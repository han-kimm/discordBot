[
  {
    "pageContent": "Quick start: Software team\n\n\n필수적으로 알아야 하는 정보\n\n * SW팀 신규 입사자를 위한 문서\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3768456/SW]: 모르면 개발 업무가\n   불가능해요!\n\n * 이큐브랩 신규 입사자를 위한 문서\n   [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/128844026]: 회사에 적응하기 위한\n   유용한 정보(밥시간, 연차, 회의실 등 여러가지…)가 담겨있어요.\n\n\n새 장비를 세팅해야 한다면?\n\n * 개발자 환경 설정 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40108046]\n\n\n우리가 만드는 제품에 대해서 알고싶어요!\n\n\nSOFTWARE PRODUCTS\n\n * Haulla (MP) [https://ecubelabs.atlassian.net/wiki/spaces/WIKI]\n\n * ERP (ERP) [https://ecubelabs.atlassian.net/wiki/spaces/ERP]\n\n * CleanCityNetworks (CCN) [https://ecubelabs.atlassian.net/wiki/spaces/CW]\n\n * Scale (GT) [https://ecubelabs.atlassian.net/wiki/spaces/GT]\n\n\nHARDWARE PRODUCTS\n\n * CleanCUBE (CCB)\n\n * (구)CleanCAP (CCP) → (신)CleanFLEX (CFX)\n\n * CleanTRACK (CTK)\n\n * CleanCALL (CCL)\n\n\n메신저/채팅방\n\n * Slack (팀 업무 메신저)\n   \n   * 업무를 진행하면서 필요한 여러 내용이 올라옵니다.\n     특정 제품/역할을 주제로 각 채널이 구성되어 있습니다.\n\n * Discord (사내 메신저)\n\n\n심심하다면?!\n\n * Shared Links\n   [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/148537486/Shared+Links]:\n   재밌는 글들을 모아놨어요.\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/473268456"
  },
  {
    "pageContent": "General\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n * 해당 하위 문서들은 이런 형태로 도움이 됩니다.\n   * 처음 입사하신 분\n   * 아직도 회사에 대해서 잘 모르시는 분\n * 이런분들이 문서를 작성 해주시면 좋습니다.\n   * 내가 회사에 대한 정보를 남길게 있으신 분 (계정 정보, 공유할 내용 등등)\n   * 나만이 아는 정보가 존재한다고 생각하시는 분\n   * 지금 자신이 본 정보가 너무나도 중요하고 어딘가에 남겨야 한다고 생각될 때",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/8781863"
  },
  {
    "pageContent": "Dev Talks\n\nYYYY-MM-DD\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2068643986"
  },
  {
    "pageContent": "Troubleshooting Logs\n\n이큐브랩의 소프트웨어 운영에 발생한 장애와 그 대응을 기록하는 문서입니다.\n\n새 트러블슈팅 로그 만들기\n\n시스템에 문제가 발생했을 때,\n\n * 누구로부터 어떻게 보고되었는가\n\n * 보고된 문제는 무엇인가\n\n * 담당자가 어떤 이유로 누구에게 할당 또는 위임되었는가\n\n * 로그 분석, 문제 재현, DB 조회 등 여러 수단으로 파악한,\n   \n   * 사실: 언제, 어떤 일이 발생하였고 어떤 영향이 있었는지\n   \n   * 문제 원인: ‘사실’의 직·간접적 원인은 무엇인지. 보고된 문제 이상의 다른 문제가 있는지.\n\n * 처리 상황 및 결과\n\n * 재발 방지를 위한 제안 및 작업\n\n를 기록합니다.\n\n\n문서 서식\n\n * 비슷한 문제를 모아서 볼 수 있도록 레이블을 달아 주세요.\n\n     \n 1.  A-C\n     * a11y [/wiki/label/SW/a11y]\n     * atlassian [/wiki/label/SW/atlassian]\n     * aug [/wiki/label/SW/aug]\n     * automation [/wiki/label/SW/automation]\n     * aws [/wiki/label/SW/aws]\n     * confluence [/wiki/label/SW/confluence]\n     * css [/wiki/label/SW/css]\n     \n 2.  D\n     * db [/wiki/label/SW/db]\n     * devops [/wiki/label/SW/devops]\n     * dkim [/wiki/label/SW/dkim]\n     * dmarc [/wiki/label/SW/dmarc]\n     * dns [/wiki/label/SW/dns]\n     * document [/wiki/label/SW/document]\n     * doobiwon [/wiki/label/SW/doobiwon]\n     \n 3.  E-K\n     * easydmarc [/wiki/label/SW/easydmarc]\n     * email [/wiki/label/SW/email]\n     * env [/wiki/label/SW/env]\n     * eslint [/wiki/label/SW/eslint]\n     * evaluation [/wiki/label/SW/evaluation]\n     * hdd [/wiki/label/SW/hdd]\n     * html [/wiki/label/SW/html]\n     \n 4.  L-O\n     * lambda [/wiki/label/SW/lambda]\n     * lazy [/wiki/label/SW/lazy]\n     * ldap [/wiki/label/SW/ldap]\n     * lint [/wiki/label/SW/lint]\n     * lodash [/wiki/label/SW/lodash]\n     * meeting-notes [/wiki/label/SW/meeting-notes]\n     * monorepo [/wiki/label/SW/monorepo]\n     * nodejs [/wiki/label/SW/nodejs]\n     * npm [/wiki/label/SW/npm]\n     * nvm [/wiki/label/SW/nvm]\n     \n 5.  P-R\n     * prettier [/wiki/label/SW/prettier]\n     * private [/wiki/label/SW/private]\n     * prometheus [/wiki/label/SW/prometheus]\n     * registry [/wiki/label/SW/registry]\n     \n 6.  S-U\n     * security [/wiki/label/SW/security]\n     * shared-links [/wiki/label/SW/shared-links]\n     * smtp [/wiki/label/SW/smtp]\n     * spam [/wiki/label/SW/spam]\n     * spf [/wiki/label/SW/spf]\n     * sso [/wiki/label/SW/sso]\n     * structure [/wiki/label/SW/structure]\n     * timeout [/wiki/label/SW/timeout]\n     * troubleshooting [/wiki/label/SW/troubleshooting]\n     \n 7.  V-Z\n     * validation [/wiki/label/SW/validation]\n     * verdaccio [/wiki/label/SW/verdaccio]\n     * vrp [/wiki/label/SW/vrp]\n     * vscode [/wiki/label/SW/vscode]\n     \n 8.  개\n     * 개발자문서 [/wiki/labels/viewlabel.action?ids=3025338492&key=SW]\n     \n 9.  방\n     * 방법론 [/wiki/labels/viewlabel.action?ids=108855630&key=SW]\n     \n 10. 신\n     * 신입 [/wiki/labels/viewlabel.action?ids=3702806&key=SW]\n     \n 11. 프\n     * 프리티어 [/wiki/labels/viewlabel.action?ids=1014726673&key=SW]\n     \n 12. 필\n     * 필수 [/wiki/labels/viewlabel.action?ids=3604542&key=SW]\n     \n\n\n문서 구조\n\n연도별로 하위 페이지를 갖습니다.\n\n새 트러블슈팅 로그 만들기\n\n * 2024-06-24 DB performance issue\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3068362789/2024-06-24+DB+performance+issue]\n * 2024-04-08 DB restarted\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2964095028/2024-04-08+DB+restarted]\n * 2024-02-14 허브스팟 하루 API 사용량 초과\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916974746/2024-02-14+API]\n * 2024-01-04 Debezium down\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2875326724/2024-01-04+Debezium+down]\n * 2023-11-02 Product-Router, Bin-Server failover\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2829189518/2023-11-02+Product-Router+Bin-Server+failover]\n * 2023-01-14 CCN down (some period)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2626027722/2023-01-14+CCN+down+some+period]\n * 2022-05-18 ERP 보다폰 유심 동기화 에러\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2422767671/2022-05-18+ERP]\n * 2021-11-12 쿠버네티스 down\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2243624965/2021-11-12+down]\n * 2021-09-16 워드프레스 다운\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2149449762/2021-09-16]\n * 2021-06-16 쿠버네티스 down\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1930068013/2021-06-16+down]\n * 2021-05-13 CCN 접속 불가\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1793851639/2021-05-13+CCN]\n * 2020-08-26 bin-server 지연으로 인한 로그 중복 생성\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/827556037/2020-08-26+bin-server]\n * 2019-12-20 DB 부하로 인한 API timeout 증가\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/254902484/2019-12-20+DB+API+timeout]\n * 2019-11-25 최적화 실패\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241533151/2019-11-25]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/240156942"
  },
  {
    "pageContent": "Runbooks",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2922053696"
  },
  {
    "pageContent": "Tips\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/8716306"
  },
  {
    "pageContent": "SW팀 만족도 조사\n\nSW팀 익명 소통 창구\n[https://docs.google.com/forms/d/e/1FAIpQLSe6opXPe5DycD6gJqamIeFu8QkY0gW3sVoQ63NikMLvDpp6Vg/viewform?usp=send_form]\n\n * 여러분의 소중한 의견은 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   에게 익명으로 전달 됩니다.\n\n * 그냥 메일/디스코드/슬랙으로 의견 주셔도 됩니다.\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2243985433"
  },
  {
    "pageContent": "Shared Links\n\nCreate shared link\n\n(정보)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/information.png] 어디서든\n이 버튼을 끌어 Link를 공유할 수 있습니다 → 사용자 브라우져의 책갈피 도구 막대에 컨플루언스에서 공유하기\n[javascript:(function(){var\nscreenWidth=screen.width,screenHeight=screen.height,popupWidth=640,popupHeight=580,popupLeft=0,popupTop=0;\nif(screenWidth>popupWidth){popupLeft=Math.round((screenWidth/2)-(popupWidth/2));}if(screenHeight>popupHeight){popupTop=Math.round((screenHeight/2)-(popupHeight/2));}window.open('https://ecubelabs.atlassian.net/wiki/plugins/sharelinksbookmarklet/bookmarklet.action?bookmarkedURL='+encodeURIComponent(window.location.href),\n'','left='+popupLeft+',top='+popupTop+',width='+popupWidth+',height='+popupHeight+',personalbar=0,toolbar=0,scrollbars=1,resizable=1');}());]를 추가하면,\n클릭하여 Link를 사용자의 팀과 공유할 수 있습니다.\n\n\n\nTitleDateLinkintroduction to algorithms 2020\n[/wiki/spaces/SW/pages/3087106121/introduction+to+algorithms+2020]  코드를 성급하게 DRY\n하지 말자 [/wiki/spaces/SW/pages/3028385818/DRY]  Rate Limit 알고리즘 시각화\n[/wiki/spaces/SW/pages/3010002999/Rate+Limit]  Good Code vs. Bad Code\n[/wiki/spaces/SW/pages/2910618381/Good+Code+vs.+Bad+Code]\n\nFeb 19, 2024\n\nblog.bytebytego.com/p/good-co…\n[https://blog.bytebytego.com/p/good-code-vs-bad-code]\n\n79 Engineering Blogs To Level Up Your System Design Skills\n[/wiki/spaces/SW/pages/2867101931/79+Engineering+Blogs+To+Level+Up+Your+System+Design+Skills]  type-challenges\n[/wiki/spaces/SW/pages/2855206923/type-challenges]  IoT 센서 데이터 플랫폼 구축과 MQTT\n[/wiki/spaces/SW/pages/2834726968/IoT+MQTT]  Google Maps Platform best\npractices: Optimization and performance tips | Google Cloud Blog\n[/wiki/spaces/SW/pages/2819752080/Google+Maps+Platform+best+practices+Optimization+and+performance+tips+Google+Cloud+Blog]  Landing\nPages Explained [/wiki/spaces/SW/pages/2818573045/Landing+Pages+Explained]  Code\nReview Developer Guide\n[/wiki/spaces/SW/pages/2671378628/Code+Review+Developer+Guide]  개발자의 성장 가능성은 어떻게\n측정 가능한가? [/wiki/spaces/SW/pages/2508718081]8월 10,\n2022euncho.medium.com/%EA%B0%9C%E…\n[https://euncho.medium.com/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%84%B1%EC%9E%A5-%EA%B0%80%EB%8A%A5%EC%84%B1%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B8%A1%EC%A0%95-%EA%B0%80%EB%8A%A5%ED%95%9C%EA%B0%80-238dd3f0f33]You\nDon’t Need A UI Framework — Smashing Magazine\n[/wiki/spaces/SW/pages/2470608905/You+Don+t+Need+A+UI+Framework+Smashing+Magazine]7월\n06, 2022www.smashingmagazine.com/2022…\n[https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/]훌륭한 개발 문화의\n이면(7) – 잉여력이냐 vs. 효율성이냐 [/wiki/spaces/SW/pages/2457436223/7+vs.]6월 24,\n2022channy.creation.net/blog/1238 [http://channy.creation.net/blog/1238]개발자의\n평생공부 [/wiki/spaces/SW/pages/2444296217]\n\nJun 11, 2022\n\nzdnet.co.kr/view/?no=20170616… [https://zdnet.co.kr/view/?no=20170616090644]\n\n101 Javascript Critical Rendering Path\n[/wiki/spaces/SW/pages/2413658115/101+Javascript+Critical+Rendering+Path]5월 10,\n2022indepth.dev/posts/1498/101-ja…\n[https://indepth.dev/posts/1498/101-javascript-critical-rendering-path]Stop\nover-abstracting your React components\n[/wiki/spaces/SW/pages/2409693185/Stop+over-abstracting+your+React+components]\n\nMay 05, 2022\n\ntech.groww.in/stop-over-abstr…\n[https://tech.groww.in/stop-over-abstracting-your-react-components-196400210a7a?gi=6db2815689f0]\n\nOptimize Cumulative Layout Shift (CLS)\n[/wiki/spaces/SW/pages/2407399434/Optimize+Cumulative+Layout+Shift+CLS]5월 02,\n2022web.dev/optimize-cls/?utm_sou…\n[https://web.dev/optimize-cls/?utm_source=lighthouse&utm_medium=lr#-7]기획자와의\n커뮤니케이션을 좀 잘못하고있었던거같아요. [/wiki/spaces/SW/pages/2402156585]4월 26,\n2022okky.kr/article/766484 [https://okky.kr/article/766484]To slash or not to\nslash  |  Google Search Central Blog  |  Google Developers\n[/wiki/spaces/SW/pages/2395144201/To+slash+or+not+to+slash+Google+Search+Central+Blog+Google+Developers]\n\nApr 19, 2022\n\ndevelopers.google.com/search/…\n[https://developers.google.com/search/blog/2010/04/to-slash-or-not-to-slash]\n\n10배 이상 뛰어난 개발자가 되는 법 | 요즘IT [/wiki/spaces/SW/pages/2371518530/10+IT]3월 25,\n2022yozm.wishket.com/magazine/det…\n[https://yozm.wishket.com/magazine/detail/1373/?fbclid=IwAR1tp6cYuoCRz8YBvg6657FKyc-QWp-adDyE7X8SarmoAu-Dod7NI9Tc0fg]2022년\n웹 개발에서 고려해야 할 환경 - LINE ENGINEERING\n[/wiki/spaces/SW/pages/2356248581/2022+-+LINE+ENGINEERING]\n\nMar 09, 2022\n\nengineering.linecorp.com/ko/b…\n[https://engineering.linecorp.com/ko/blog/the-baseline-for-web-development-in-2022/]\n\nWhy we need to abstract dependencies, a real world example with react router\n[/wiki/spaces/SW/pages/2341732353/Why+we+need+to+abstract+dependencies+a+real+world+example+with+react+router]\n\nFeb 21, 2022\n\nmedium.com/cutting-code/why-w…\n[https://medium.com/cutting-code/why-we-need-to-abstract-dependencies-a-real-world-example-with-react-router-8b06d1540264]\n\n동기와 비동기, 그리고 블럭과 넌블럭 [/wiki/spaces/SW/pages/2302017547]1월 10, 2022\nmusma.github.io/2019/04/17/bl…\n[https://musma.github.io/2019/04/17/blocking-and-synchronous.html] The\nimportance of naming in programming | The Man in the Arena\n[/wiki/spaces/SW/pages/2285109275/The+importance+of+naming+in+programming+The+Man+in+the+Arena]12월\n20, 2021 carlalexander.ca/importance-n…\n[https://carlalexander.ca/importance-naming-programming/] 중국의 어떤 서버 개발자의 디비 설계\n[/wiki/spaces/SW/pages/2253717525]\n\nNov 19, 2021\n\nblog.naver.com/imays/22146153… [https://blog.naver.com/imays/221461537682]\n\nTDZ을 모른 채 자바스크립트 변수를 사용하지 말라 [/wiki/spaces/SW/pages/2194604033/TDZ]10월 11, 2021\nui.toast.com/weekly-pick/ko_2… [https://ui.toast.com/weekly-pick/ko_20191014]\nWho's Your Coding Buddy?\n[/wiki/spaces/SW/pages/2171273254/Who+s+Your+Coding+Buddy]9월 29, 2021\nblog.codinghorror.com/whos-yo…\n[https://blog.codinghorror.com/whos-your-coding-buddy/] The history of “typeof\nnull” [/wiki/spaces/SW/pages/2165211141/The+history+of+typeof+null]9월 26, 2021\n2ality.com/2013/10/typeof-nul… [https://2ality.com/2013/10/typeof-null.html]\nJavaScript vs JavaScript. Fight!\n[/wiki/spaces/SW/pages/2109472840/JavaScript+vs+JavaScript.+Fight]8월 20, 2021\ndev.to/this-is-learning/javas…\n[https://dev.to/this-is-learning/javascript-vs-javascript-fight-53fa] CSS\nAdventures: Do leading zeros in decimal values matter?\n[/wiki/spaces/SW/pages/2038956104/CSS+Adventures+Do+leading+zeros+in+decimal+values+matter]7월\n15, 2021 hey.georgie.nu/leadingzero/ [https://hey.georgie.nu/leadingzero/]\n\n\nSHARED LINKS\n\nShare and discuss contents from the web like articles and videos with your team.\n\nCreate shared link\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/108855610"
  },
  {
    "pageContent": "회의록\n\nCreate meeting note\n\n\nINCOMPLETE TASKS FROM MEETINGS\n\n\n\n설명기한일담당자작업 표시\n * SW팀 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   : 전달받은 보류 로직 설계를 서버측에 예외처리로 적용하여 보류 기간 동안의 센싱값을 탐지하여 적절히 처리\n   https://ecubelabs.atlassian.net/browse/CCNB-1989\n   [https://ecubelabs.atlassian.net/browse/CCNB-1989]\n\n최지원 (Json) (Unlicensed)\n[/wiki/display/~557058%3Ad43dc073-7bf9-4527-b7dc-3881e6b979a1]2019-08-01 회의록: HW\nFirmware 내 보류 로직 관련 건\n[/wiki/spaces/SW/pages/186155041/2019-08-01+HW+Firmware?focusedTaskId=10]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   경로 마커 (파랑색, 회색 체크 언체크) 추가 공유 CCNB-1643\n   [https://ecubelabs.atlassian.net/browse/CCNB-1643] - 이슈 세부사항 가져오는 중... 상태 및 앱\n   뱃지 형태의 넘버링 스타일 가이드 CCNB-1644\n   [https://ecubelabs.atlassian.net/browse/CCNB-1644] - 이슈 세부사항 가져오는 중... 상태 전달\n\n남기철(Edgar) (Unlicensed) [/wiki/display/~5ad845dbb783d22b5dae9bcf]2019-06-05 회의록\n[/wiki/spaces/SW/pages/159711322/2019-06-05?focusedTaskId=61]\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]이호준\n   (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   다음 회의(6월 11일)전 까지 가이드에 꼭 들어가야할 구현시 합의할 부분, 문의할 내용 등 리스트업 CCNB-1638\n   [https://ecubelabs.atlassian.net/browse/CCNB-1638] - 이슈 세부사항 가져오는 중... 상태\n\n박기석 (Peter) (Unlicensed)\n[/wiki/display/~557058%3A74b31807-3f61-418b-8080-8edea7266412]2019-06-05 회의록\n[/wiki/spaces/SW/pages/159711322/2019-06-05?focusedTaskId=62]\n * 차고지 반경 몇 km안에 들어갔을 때 종료로 판단할 지 결정해야 함.\n\n2018-07-24 회의록: FM 모바일 API\n[/wiki/spaces/SW/pages/52756710/2018-07-24+FM+API?focusedTaskId=2]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence] –\n   웹에서 드라이버 생성 어떻게 진행해야 하는지 필요\n\n최준호 (Simon) (Unlicensed)\n[/wiki/display/~557058%3Abd7341da-ea21-4f62-bc8f-22931dea66b6]2018-07-24 회의록: FM\n모바일 API [/wiki/spaces/SW/pages/52756710/2018-07-24+FM+API?focusedTaskId=3]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   MapBox API 확인작업\n\n이호준 (Jimmy) (Unlicensed) [/wiki/display/~5ad83d7d2bb3112b34c5a694]2018-06-28\n회의록: FM 모바일 개발 회의\n[/wiki/spaces/SW/pages/43745331/2018-06-28+FM?focusedTaskId=16]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence] 프로덕션\n   레벨에서의 MapBox 사용 타당성 조사 및 결과 공유\n\n이호준 (Jimmy) (Unlicensed) [/wiki/display/~5ad83d7d2bb3112b34c5a694]2018-06-28\n회의록: FM 모바일 개발 회의\n[/wiki/spaces/SW/pages/43745331/2018-06-28+FM?focusedTaskId=17]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   MapBox 과금정책 조사 및 결과 공유\n\n이호준 (Jimmy) (Unlicensed) [/wiki/display/~5ad83d7d2bb3112b34c5a694]2018-06-28\n회의록: FM 모바일 개발 회의\n[/wiki/spaces/SW/pages/43745331/2018-06-28+FM?focusedTaskId=18]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence] FM\n   지도, 네비게이션 기능을 구글맵으로만 구현이 가능한지 여부를 조사 및 공유\n\n이호준 (Jimmy) (Unlicensed) [/wiki/display/~5ad83d7d2bb3112b34c5a694]2018-06-28\n회의록: FM 모바일 개발 회의\n[/wiki/spaces/SW/pages/43745331/2018-06-28+FM?focusedTaskId=19]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence] 유저\n   시나리오(페르소나) 조사하기(수거종료 시점에 대하여)\n\n최준호 (Simon) (Unlicensed)\n[/wiki/display/~557058%3Abd7341da-ea21-4f62-bc8f-22931dea66b6]2018-06-19 회의록: FM\n기획 회의 [/wiki/spaces/SW/pages/36307108/2018-06-19+FM?focusedTaskId=4]\n\n\n\n\nALL MEETING NOTES\n\n\n\n제목만든 이변경됨2020-03-20 회의록 - IoT-Server 리뷰\n[/wiki/spaces/SW/pages/444629067/2020-03-20+-+IoT-Server]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]3월 20, 20202019-10-15\nccn-bin-server 분리 관련\n[/wiki/spaces/SW/pages/222265472/2019-10-15+ccn-bin-server]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]10월 15, 20192019-08-01 회의록: HW\nFirmware 내 보류 로직 관련 건\n[/wiki/spaces/SW/pages/186155041/2019-08-01+HW+Firmware]이창훈 (Steve)\n[/people/5ad8434d2dc58f2b3a95325a?ref=confluence]8월 01, 20192019-06-17 회의록 -\nFront-end 개발 미팅 [/wiki/spaces/SW/pages/165085628/2019-06-17+-+Front-end]고정완\n(Can) [/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]6월 18, 20192019-06-12 회의록\n- S/W 주간회의 [/wiki/spaces/SW/pages/163020804/2019-06-12+-+S+W]고정완 (Can)\n[/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]6월 12, 20192019-06-07 회의록 -\nCCNx Progress [/wiki/spaces/SW/pages/160792601/2019-06-07+-+CCNx+Progress]고정완\n(Can) [/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]6월 07, 20192019-06-05 회의록\n[/wiki/spaces/SW/pages/159711322/2019-06-05]남기철(Edgar) (Unlicensed)\n[/people/5ad845dbb783d22b5dae9bcf?ref=confluence]6월 05, 20192019-05-22 회의록 - S/W\n주간회의 [/wiki/spaces/SW/pages/151519434/2019-05-22+-+S+W]고정완 (Can)\n[/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]5월 22, 20192019-04-24 회의록 - S/W\n주간회의 [/wiki/spaces/SW/pages/141819917/2019-04-24+-+S+W]고정완 (Can)\n[/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]5월 22, 20192018-08-01 회의록 - S/W\n주간 회의 [/wiki/spaces/SW/pages/54198341/2018-08-01+-+S+W]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]4월 11, 20192019-04-03 회의록 - S/W\n주간회의 [/wiki/spaces/SW/pages/133530025/2019-04-03+-+S+W]고정완 (Can)\n[/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]4월 03, 20192019-03-13 회의록 - S/W\n주간회의 [/wiki/spaces/SW/pages/122421819/2019-03-13+-+S+W]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]3월 13, 20192019-03-12 회의록 : 모바일\nAPI optional 값 관련 [/wiki/spaces/SW/pages/122290547/2019-03-12+API+optional]최지원\n(Json) (Unlicensed)\n[/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]3월 12,\n20192019-02-28 회의록 - FM 기획 구체화 회의록\n[/wiki/spaces/SW/pages/119408029/2019-02-28+-+FM]최지원 (Json) (Unlicensed)\n[/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]2월 28,\n20192019-02-12 회의록 - S/W 주간회의\n[/wiki/spaces/SW/pages/117506189/2019-02-12+-+S+W]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]2월 12, 20192019-01-08 회의록 - S/W\n주간 회의 [/wiki/spaces/SW/pages/108691972/2019-01-08+-+S+W]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]1월 08, 20192018-11-12 회의록 - 계근대\n회의 [/wiki/spaces/SW/pages/96763928/2018-11-12+-]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]11월 23, 20182018-11-21 회의록 -\nS/W 주간 회의 [/wiki/spaces/SW/pages/100794442/2018-11-21+-+S+W]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]11월 21, 20182018-11-02 회의록 -\nCCNx 2차 개발 리뷰 [/wiki/spaces/SW/pages/93421569/2018-11-02+-+CCNx+2]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]11월 02, 20182018-10-22 회의록 -\nS/W 주간 회의 [/wiki/spaces/SW/pages/88965204/2018-10-22+-+S+W]박종인 (Meta)\n[/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]10월 22, 2018\n\n더 많은 결과 찾기 [/wiki/search?labels=meeting-notes&spaces=SW]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/33095702"
  },
  {
    "pageContent": "Internal managed services\n\nCCN/Haulla 도메인에 포함되지 않으면서 범용적으로 이용될 수 있는 서비스에 대한 개발 및 설계 정보를 기록한다.\n\n\n\n * EcubeLabs Notification Service\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864819/EcubeLabs+Notification+Service]\n * Kafka Webhook Producer\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868740182/Kafka+Webhook+Producer]\n * URL Shortener Service\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916188438/URL+Shortener+Service]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2852487172"
  },
  {
    "pageContent": "draft: 화면 개발 프로세스\n\nDesignSystem이 적용된 화면을 개발 산출물로 내기 위해서는 아래의 순서를 따라야 한다.\n\n\n구현 순서\n\n\n1. 디자인 시스템 컴포넌트 구현\n\n프로토타입 제작이 바로 가능한 상태인 경우 이 단계는 생략해도 무방하다.\n\n 1. 디자이너가 Figma를 통해 디자인 시스템을 정리하고, 컴포넌트 스타일/동작에 대한 가이드 정리\n\n 2. 개발자에게 가이드를 전달하며 컴포넌트 구현 요청\n\n 3. 개발자는 가이드대로 구현한 컴포넌트를 ADS/CDS와 같은 UI Kit로서 배포\n    \n    1. UI Kit에 포함된 모든 컴포넌트는 소통 시 “코드 컴포넌트” 라고 칭한다.\n\n\n2. 프로토타입 제작\n\n 1. 프로토타입 제작을 위한 디자인 시스템 컴포넌트들이 모두 준비되었다면 기획자/디자이너는 Framer 를 이용해 화면을 구성한다.\n    \n    1. 화면을 구성하면서 발생하는 컴포넌트는 소통 시 “프로젝트 컴포넌트” 라고 칭한다.\n\n 2. 개발자에게 화면 개발 요청\n\n\n3. 프로토타입 기반 개발\n\n 1. 개발자는 Framer를 보고 동일한 컴포넌트를 이용해 화면을 그대로 구성하여 퍼블리싱을 진행한다.\n\n 2. 퍼블리싱이 끝나면 API 연동 등의 기타 기능을 구현한다.\n\n\n\n\n기타 참고자료\n\n\nUBIQUITOUS LANGUAGE\n\n\n코드 컴포넌트:\n\n * 최소 단위의 기능을 포함하거나, 특정 목적의 기능을 범용적으로 제공하는 UI Kit로서 유지관리된다.\n\n * 디자인 시스템에 없는 컴포넌트는 UI Kit에 포함하지 않으며, 재사용 여부가 확실한 컴포넌트만 포함해야 한다.\n\n * 프레이머와 개발된 코드에서 동일한 이름으로 이용되어야 한다.\n\n * 디자이너는 코드 컴포넌트에 새로 포함되어야 하거나, 수정되는 컴포넌트가 있는 경우 개발자와 협의 후 개발 요청해야 한다.\n\n\n프로젝트 컴포넌트:\n\n * 코드 컴포넌트를 조합하여 만드는 컴포넌트로서, 디자이너 또는 기획자가 새로운 화면을 구성하기 위해 만드는 중간 단계의 컴포넌트다.\n\n * 해당 컴포넌트는 프로젝트에만 별도의 컴포넌트로 구성되며, UI Kit에 포함되지 않는다.\n\n * 디자이너는 개발자에게 별도로 요청하지 않아도 되며, 개발자는 프레이머에 구성된대로 프로젝트에 포함시켜 구현하면 된다.\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2960327126"
  },
  {
    "pageContent": "개발 요청 가이드\n\n 1. https://ecubelabs.atlassian.net/browse/CCNB\n    [https://ecubelabs.atlassian.net/browse/CCNB] 에 들어간다.\n\n 2. 개발 요구사항을 작성한다.\n\n 3. 담당자는 김일두(Charlie)\n    [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n    로 설정한다.\n\n 4. 이슈를 생성한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2243854361"
  },
  {
    "pageContent": "Team Culture\n * 이큐브랩의 존재 이유\n   * To make all participants in waste ecosystem happy by technology.\n * 우리가 제공해야 하는 가치\n   * Let’s be EXPERTS.\n * 우선 순위\n   * US > Global\n   * Growth > Profit\n   * Customer satisfaction > Cost\n * Rules and behaviors\n   * Aligned with “Let’s be EXPERTS”\n     * 비범한 동료들이 곧 훌륭한 직장이다\n     * 한 명이 작성한 것 같은 코드 베이스를 유지한다\n     * 서로의 책임을 다한다\n     * 컨디션 관리를 잘 한다\n   * Aligned with “Customer satisfaction > Cost”\n     * Client first\n   * Others\n     * 솔직한 피드백을 주고 받는다\n     * 다 함께 SW팀 집단 지성(=위키)을 만든다\n     * 업무시간 외에 일과 관련된 연락을 하지 않는다\n     * 동료를 마주치면 밝은 얼굴로 인사한다.\n * 레퍼런스\n   * 규칙 없음\n   * Spoqa CoC\n   * Twitter Open Source Community CoC\n   * 회사에서 책임을 진다는 것 이 버그는 개발한 너의 잘못이야?\n   * 무엇이 조직문화이고 무엇이 아닌가?\n   * 수평적 조직문화의 환상과 현실\n   * 송파구에서 일을 더 잘하는 11가지 방법\n   * 구글 채용과정에서 경험한 한국 주입식 교육의 문제점\n\n\n\n\n\n\n\nEcubeLabs2022_Sean발표ᄌ…\n[/wiki/spaces/SW/pages/173801724/Team+Culture?preview=%2F173801724%2F2295037953%2FEcubeLabs2022_Sean%E1%84%87%E1%85%A1%E1%86%AF%E1%84%91%E1%85%AD%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD.pdf]\n\n\n이큐브랩의 존재 이유\n\n\nTO MAKE ALL PARTICIPANTS IN WASTE ECOSYSTEM HAPPY BY TECHNOLOGY.\n\n\n우리가 제공해야 하는 가치\n\n\nLET’S BE EXPERTS.\n\nTo be proud of ourselves.\n\nSW팀 관점의 expert\n\n * 개발/문의 결과물에 대해 책임질 수 있는가?\n   \n   * Deadline, 품질(bug, 앞으로의 유지보수), 성능\n\n\n우선 순위\n\n\nUS > GLOBAL\n\n\nGROWTH > PROFIT\n\n\nCUSTOMER SATISFACTION > COST\n\n\nRULES AND BEHAVIORS\n\n\nALIGNED WITH “LET’S BE EXPERTS”\n\n\n비범한 동료들이 곧 훌륭한 직장이다\n\n * 서로에게 훌륭한 동료가 되기 위해 끊임없이 공부하고 성장할 수 있도록 노력한다.\n\n\n한 명이 작성한 것 같은 코드 베이스를 유지한다\n\n * 개발 컨벤션을 준수한다.\n\n * 같은 이해를 하고 있는지 지속적으로 확인한다. (개발 컨벤션, 비즈니스 로직)\n\n\n서로의 책임을 다한다\n\n * 팀장에게는 개발 결과에 대한 책임이, 팀원에게는 개발 수행에 대한 책임이 있다.\n   \n   * Deadline 준수 Culture\n     [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/346685645/Deadline+Culture+200205]\n   \n   * 지킬 수 없을것으로 예상되면 선제적으로 red flag를 들어 deadline을 조정할수 있도록 한다.\n\n * 최선을 다해 개발했으면 이로 인해 문제가 발생하더라도 감추거나 혼자 해결하려고 하지 말고 투명하게 공개한다.\n\n\n컨디션 관리를 잘 한다\n\n * 프로는 컨디션 관리도 실력이다.\n\n\nALIGNED WITH “CUSTOMER SATISFACTION > COST”\n\n\nCLIENT FIRST\n\n * 고객의 입장에서 사용하기 쉽게 프로그램을 만들어야 한다.\n\n * 백엔드의 고객 == 프론트엔드\n\n * 프론트엔드의 고객 == 사용자 (!= 기획자)\n\n\nOTHERS\n\n\n솔직한 피드백을 주고 받는다\n\n * 코드리뷰 할 때, 일반적인 업무 상황에 아래의 원칙을 유념해 솔직한 피드백을 주고 받는다.\n\n * 피드백을 줄 때\n   \n   * AIM TO ASSIST (도움을 주겠다는 생각으로 하라)\n   \n   * ACTIONABLE (실질적인 조치를 포함하라)\n\n * 피드백을 받을 때\n   \n   * APPRECIATE (감사하라)\n   \n   * ACCPET OR DISCARD (받아들이거나 거부하라)\n\n\n다 함께 SW팀 집단 지성(=위키)을 만든다\n\n * 모든 지식은 위키를 통해 공유한다. 위키에 없는 내용을 혼자 알고 있으면 안 된다.\n\n * SW팀 관련 위키는 모두 평어체로 작성한다. 의도를 직관적으로 전달하는데 도움이 된다.\n\n * 주석, 문서 등. 어딘가에 기록을 할 때에는 맥락 없이도 그 메시지 단독으로 의미를 알 수 있도록 서술해야 한다. 혹은 맥락을 파악할 수\n   있게 부연설명, 링크 등을 추가해야 한다.\n   (맥락이 없으면 이해하기 어려운 단어 예: 방금 논의했던 거, 기존 기획, 그 이슈, 지난번)\n\n\n업무시간 외에 일과 관련된 연락을 하지 않는다\n\n * 업무시간이 아닌 경우 어떠한 메신저에 답할 필요도, 확인할 필요도 없다.\n\n * 단, 비상시엔 전화 하는것이 원칙이며 전화가 온다면 받아야 한다.\n\n\n동료를 마주치면 밝은 얼굴로 인사한다.\n\n * 화장실 제외\n\n\n\n\n레퍼런스\n\n\n규칙 없음\n[http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9788925599632]\n\n\nSPOQA COC [https://github.com/spoqa/code-of-conduct]\n\n\nTWITTER OPEN SOURCE COMMUNITY COC\n[https://github.com/twitter/code-of-conduct/blob/master/code-of-conduct.md]\n\n\n회사에서 책임을 진다는 것 [https://brunch.co.kr/@crispwatch/60] 이 버그는 개발한 너의 잘못이야?\n[https://www.popit.kr/%EC%9D%B4-%EB%B2%84%EA%B7%B8%EB%8A%94-%EA%B0%9C%EB%B0%9C%ED%95%9C-%EB%84%88%EC%9D%98-%EC%9E%98%EB%AA%BB%EC%9D%B4%EC%95%BC/]\n\n\n무엇이 조직문화이고 무엇이 아닌가? [https://publy.co/content/1580]\n\n\n수평적 조직문화의 환상과 현실 [https://brunch.co.kr/@supims/362]\n\n\n송파구에서 일을 더 잘하는 11가지 방법 [https://m.blog.naver.com/smartbaedal/220968454921]\n\n\n구글 채용과정에서 경험한 한국 주입식 교육의 문제점\n[https://www.youtube.com/watch?t=773&v=FpUQOmZ3dVQ&feature=youtu.be]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173801724"
  },
  {
    "pageContent": "Role & Responsibility (R & R)\n * Everyone's Responsibility\n   * 출근 → 원티드스페이스\n   * 퇴근 → 원티드스페이스\n   * 리뷰어로 지정되면 코드리뷰\n   * 우선순위에 따라 개발\n * SW\n * CCN\n * Haulla\n * Haulla (AM 대시보드)\n * Haulla (공홈)\n\n\nEVERYONE'S RESPONSIBILITY\n\n\n출근 → 원티드스페이스 [https://ecubelabs.atlassian.net/wiki/spaces/HR/pages/1930493982/-]\n\n\n퇴근 → 원티드스페이스 [https://ecubelabs.atlassian.net/wiki/spaces/HR/pages/1930493982/-]\n\n\n리뷰어로 지정되면 코드리뷰\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774#%EB%A6%AC%EB%B7%B0-%EC%A7%84%ED%96%89%EC%9E%90]\n\n\n우선순위에 따라 개발\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001652#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84]\n\n\nSW\n\n요약 설명 담당자 상태 GTM [https://ecubelabs.atlassian.net/browse/MP-7123]\n\nHaulla 반응형 통합 - 사용자 변동 내역 [https://ecubelabs.atlassian.net/browse/MP-7120]\n\n김일두(Charlie) 완료 1. 신규 입사자 안내 [https://ecubelabs.atlassian.net/browse/SW-6084]\n 1. https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/128844026\n    [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/128844026] 프린터로 출력 후\n    신규 입사자에게 전달\n 2. SW 그룹 채팅방에 초대 → 디스코드로 오면서 필요 없어짐\n 3. GitHub 계정 전달받고 조직에 초대\n 4. 경영지원팀이 G Suite 계정 생성해준것 확인\n    1. EcubeLabs, SW 그룹 할당\n    2. AWS SSO 권한 할당\n 5. https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/104300575\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/104300575] 문서 전달\n 6. App Center 초대\n    [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/1150386684/App+Center]\n    후 Developer 팀에 추가\n 7. (필요한 경우) 법카 영수증 처리 위한 비밀번호 전달\n 8. (필요한 경우) DB 계정 생성\n\n강승현 (Tim) 완료 2. SW팀 만족도 조사 [https://ecubelabs.atlassian.net/browse/SW-6533]\n김일두(Charlie) 완료 Role/Kubernetes\n[https://ecubelabs.atlassian.net/browse/SW-10551] 김일두(Charlie) 진행중 API 문서\n[https://ecubelabs.atlassian.net/browse/SW-8202] 강승현 (Tim) Backlog CCN DB 리스토어\n[https://ecubelabs.atlassian.net/browse/SW-6851]\n\n매달 마지막 월요일에 CCN DB 리스토어\n\n강승현 (Tim) 완료 Chromatic [https://ecubelabs.atlassian.net/browse/SW-7941] 강승현\n(Tim) 완료 ESLint, Prettier [https://ecubelabs.atlassian.net/browse/SW-6035]\n\nJS/TS 프로젝트에서 공통으로 사용하는 lint, format 규칙 관리\n\nVin 완료 Haulla DB 리스토어 [https://ecubelabs.atlassian.net/browse/SW-6852]\n\n매달 마지막 월요일에 Haulla DB 리스토어\n\n김일두(Charlie) 완료 Haulla testdb 관리\n[https://ecubelabs.atlassian.net/browse/SW-6883]\n\nhaulla, tycoon\n\n김일두(Charlie) 완료 i18n-ally [https://ecubelabs.atlassian.net/browse/SW-6308]\n\nVSCode 다국어 가독성 플러그인 규칙 관리\n\n김일두(Charlie) 완료 Self-hosted runner 관리\n[https://ecubelabs.atlassian.net/browse/SW-6965] 강승현 (Tim) 진행중 TS config\n[https://ecubelabs.atlassian.net/browse/SW-6036]\n\nTS 프로젝트에서 공통으로 사용하는 tsconfig 관리\n\nVin 완료 스펙 문서 [https://ecubelabs.atlassian.net/browse/SW-6384]\n\n(NEW) 통합 Protocol\n[https://docs.google.com/spreadsheets/d/17XGOS-G_LtbZ0VKYijLzvphEy22Q1v8WSiStRoZj3tk/#gid=1213549301]\n\nCCB2 Product Code / Serial Number\n[https://docs.google.com/spreadsheets/d/1pAYRLti7e02idgg316pqXsyBFbLdMuao_2OjxYSAiOQ/edit#gid=942727880]\n\n김일두(Charlie) 완료 인프라 관리자 관리 [https://ecubelabs.atlassian.net/browse/SW-6629]\n\nAWS콘솔/테라폼을 이용해 인프라를 변경할 수 있는 사용자 관리\n\n강승현 (Tim) 완료 허브스팟 리스토어 (시뮬레이터) [https://ecubelabs.atlassian.net/browse/SW-8008]\n황창환(Arthur) 완료 CEED/QUERY [https://ecubelabs.atlassian.net/browse/SW-6382]\n김일두(Charlie) 완료 CEED/UI/DataGrid\n[https://ecubelabs.atlassian.net/browse/SW-6796] 강승현 (Tim) 완료\nCEED/UI/DateRangePicker [https://ecubelabs.atlassian.net/browse/SW-6187] Vin 완료\nCEED/UI/Map [https://ecubelabs.atlassian.net/browse/SW-8448] 강승현 (Tim) 완료\nCEED/UI/PeriodPicker [https://ecubelabs.atlassian.net/browse/SW-6188] Vin 완료\nCEED/UI/패키지 관리 [https://ecubelabs.atlassian.net/browse/SW-6186] 강승현 (Tim) 완료\nECUBELABS/STORYBOOK-ADDON-INTL [https://ecubelabs.atlassian.net/browse/SW-6406]\n\nhttps://www.npmjs.com/package/@ecubelabs/storybook-addon-intl\n[https://www.npmjs.com/package/@ecubelabs/storybook-addon-intl]\n\n강승현 (Tim) 완료 TypeORM [https://ecubelabs.atlassian.net/browse/SW-8344]\n\nwith TypeDI, seed\n\n * 각 패키지가 서로 의존하지 않으면 좋은데 지금은 심각하게 의존하고 있음\n\n강주영 (Ben) 완료 이메일 서명 생성기 [https://ecubelabs.atlassian.net/browse/SW-6323]\n\nhttps://ecube-labs.github.io/ [https://ecube-labs.github.io/]\n\n강승현 (Tim) 완료 파일 서버 [https://ecubelabs.atlassian.net/browse/SW-6861] 윤보미(Windy)\n완료 노티 서버 [https://ecubelabs.atlassian.net/browse/SW-10276] 강승현 (Tim) 진행중\ncluster-autoscaler [https://ecubelabs.atlassian.net/browse/SW-8092] 김일두(Charlie)\n완료 ECK [https://ecubelabs.atlassian.net/browse/SW-7541] 이승준(Lee) 진행중\nexternal-dns [https://ecubelabs.atlassian.net/browse/SW-8011] 강승현 (Tim) 완료\ningress-nginx [https://ecubelabs.atlassian.net/browse/SW-8000]\n\nhttps://github.com/kubernetes/ingress-nginx\n[https://github.com/kubernetes/ingress-nginx]\n\n강승현 (Tim) 완료 Jenkins [https://ecubelabs.atlassian.net/browse/SW-10340]\n김일두(Charlie) 진행중 Kafka [https://ecubelabs.atlassian.net/browse/SW-8237] 강주영\n(Ben) 완료 kube-prometheus [https://ecubelabs.atlassian.net/browse/SW-10239]\n김일두(Charlie) 완료 Service Mesh [https://ecubelabs.atlassian.net/browse/SW-10649]\nVin 진행중\n\n35 이슈\n[https://ecubelabs.atlassian.net/issues/?jql=%22Epic+Name%22+in+%28%22%EA%B0%9C%EB%B0%9C+%ED%99%98%EA%B2%BD%22%2C+%22OJT%22%2C+%22%EC%82%AC%EB%82%B4+library%2Fframework%22%2C+%22%EC%84%9C%EB%B9%84%EC%8A%A4%22%2C+%22%EC%9D%B8%ED%94%84%EB%9D%BC%22%2C+%22Role%2FKubernetes%22%2C%22GTM%22%29+ORDER+BY+%22Epic+Name%22+%2C+%22Summary%22+++++&src=confmacro]\n\n\n\n\nCCN [https://ecubelabs.atlassian.net/wiki/spaces/ERP/pages/1873346588]\n\nepic name 요약 설명 담당자 상태 기한 유심 관리 001. 유심 목록\n[https://ecubelabs.atlassian.net/browse/SW-5846]\n * 유심 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5849] 후\n   * 유심 목록 조회 가능\n\n윤보미(Windy) 완료 유심 관리 002. 유심 상세 [https://ecubelabs.atlassian.net/browse/SW-5847]\n * 유심 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5849] 후\n   * 유심 상세 조회 가능\n   * 유심 정보(설명/상태/프로파일) 편집 가능\n\n윤보미(Windy) 완료 유심 관리 003. 유심 업로드 [https://ecubelabs.atlassian.net/browse/SW-5849]\n * 유심 업로드 폼(엑셀 파일) 작성 후 업로드\n\n윤보미(Windy) 완료 유심 관리 004. 유심 CSV export\n[https://ecubelabs.atlassian.net/browse/SW-6103]\n * 유심 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5849] 후\n   * 원하는 유심 정보 CSV 형태로 export 가능\n\n윤보미(Windy) 완료 유심 관리 005. 보다폰 유심 동기화\n[https://ecubelabs.atlassian.net/browse/SW-6102] 강승현 (Tim) 완료 제품 관리 006. 제품 목록\n[https://ecubelabs.atlassian.net/browse/SW-5854]\n * 제품 개별 등록 [https://ecubelabs.atlassian.net/browse/CCNB-5856] / 제품 업로드\n   [https://ecubelabs.atlassian.net/browse/CCNB-5858] 후\n   * 제품 목록 조회 가능\n\n김일두(Charlie) 완료 제품 관리 007. 제품 상세\n[https://ecubelabs.atlassian.net/browse/SW-5855]\n * 제품 개별 등록 [https://ecubelabs.atlassian.net/browse/CCNB-5856] / 제품 업로드\n   [https://ecubelabs.atlassian.net/browse/CCNB-5858] 후\n   * 제품 상세 조회 가능\n   * 제품 정보 편집 가능\n\n김일두(Charlie) 완료 제품 관리 008. 제품 개별 등록\n[https://ecubelabs.atlassian.net/browse/SW-5856]\n * CleanCUBE 등록\n * CleanCUBE 2 등록\n * CleanCUBE GT 등록\n * CleanCAP/FLEX 등록\n * CleanTRACK 등록\n * 수량을 지정해서 n개를 등록할 수 있다.\n\n윤보미(Windy) 완료 제품 관리 009. 제품 업로드를 위한 폼 다운로드\n[https://ecubelabs.atlassian.net/browse/SW-5857] 윤보미(Windy) 완료 제품 관리 010. 제품 업로드\n[https://ecubelabs.atlassian.net/browse/SW-5858]\n * 제품 업로드를 위한 폼 다운로드\n   [https://ecubelabs.atlassian.net/browse/CCNB-5857?src=confmacro]에 유효한 형식을 제품\n   정보를 입력한 후 업로드\n\n김일두(Charlie) 완료 제품 관리 011. 제품 옵션 관리\n[https://ecubelabs.atlassian.net/browse/SW-6665]\n * Product Code 시트 변경에 따라 인보이스 등록 시 선택 가능한 제품 옵션 관리\n\n윤보미(Windy) 완료 기기 관리 017. CCN 업로드\n[https://ecubelabs.atlassian.net/browse/SW-5880]\n * 제품에 대응하는 기기 생성\n   * 생성된 모든 CCB/CFX는 contacus@ecubelabs.com 에 할당 된다.\n   * 생성된 모든 CTK는 goyang 에 할당 된다.\n\nVin 완료 기기 관리 019. 기기 상세 조회 [https://ecubelabs.atlassian.net/browse/SW-6554]\n * CCN 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5880] 후\n   * ERP\n     * 이큐브랩 직원: 모든 기기를 상세 조회/설정 변경 할 수 있다.\n     * 파트너: 자신에게 할당된 모든 기기를 상세 조회/설정 변경할 수 있다.\n   * CCN\n     * 사용자는 자신에게 할당된 모든 기기를 상세 조회할 수 있다.\n\nVin 완료 기기 관리 021. 유심 unmount [https://ecubelabs.atlassian.net/browse/SW-7046]\n * ERP\n   * 이큐브랩 직원: 모든 기기의 유심을 unmount 할 수 있다.\n   * 파트너: ?\n   * CCN 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5880] 되어 있다면 unmount\n     이후 해당 기기에서 보내는 통신은 모두 오류로 처리 된다.\n\n윤보미(Windy) 완료 기기 관리 028. 트래커 할당 [https://ecubelabs.atlassian.net/browse/SW-7534]\n * CCN 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5880]하면 자동으로 고양시 계정에 할당\n   됨\n\nVin 완료 기기 관리 029. 트래커 CSV export\n[https://ecubelabs.atlassian.net/browse/SW-6578]\n * CCN 업로드 [https://ecubelabs.atlassian.net/browse/CCNB-5880] 후\n   * 원하는 트래커 정보 CSV 형태로 export 가능\n\nVin 완료 고객 관리 030. 고객 등록 [https://ecubelabs.atlassian.net/browse/SW-5950]\n윤보미(Windy) 완료 고객 관리 031. 고객 목록 조회\n[https://ecubelabs.atlassian.net/browse/SW-5951]\n * 고객 등록 [https://ecubelabs.atlassian.net/browse/CCNB-5950] 후\n   * 모든 고객 조회 가능\n   * 조건에 따라 고객 검색 가능\n     * 고객 이름, 고객 코드, GBD 담당자, 국가\n\n윤보미(Windy) 완료 고객 관리 032. 고객 상세 조회\n[https://ecubelabs.atlassian.net/browse/SW-5952]\n * 고객 등록 [https://ecubelabs.atlassian.net/browse/CCNB-5950] 후\n   * 모든 고객 상세 조회 가능\n * 고객 편집\n   * 고객 상세화면에서 편집 모드로 전환\n\n윤보미(Windy) 완료 고객 관리 035. 인보이스 등록\n[https://ecubelabs.atlassian.net/browse/SW-6814] 윤보미(Windy) 완료 고객 관리 036. 인보이스\n목록 조회 [https://ecubelabs.atlassian.net/browse/SW-6819]\n * 인보이스 등록 [https://ecubelabs.atlassian.net/browse/CCNB-6814] 후\n   * 모든 인보이스 조회 가능\n   * 조건에 따라 인보이스 검색 가능\n     * 인보이스 번호\n\n윤보미(Windy) 완료 고객 관리 037. 인보이스 상세\n[https://ecubelabs.atlassian.net/browse/SW-8186]\n * 인보이스 등록 [https://ecubelabs.atlassian.net/browse/CCNB-6814] 후\n   * 인보이스 상세 조회 가능\n   * 인보이스 편집 가능\n     * 편집 시 upload log 기록\n\n김일두(Charlie) 완료 고객 관리 039. 인보이스 pdf export\n[https://ecubelabs.atlassian.net/browse/SW-6997]\n * 인보이스 등록 [https://ecubelabs.atlassian.net/browse/CCNB-6814] 후\n   * 영문으로 pdf export 가능\n   * 국문으로 pdf export 가능\n * 이사 시 주소 수정 필요\n\n윤보미(Windy) 완료 적재량 관리 094. Raw 적재량 관리\n[https://ecubelabs.atlassian.net/browse/SW-6129]\n * 기기 통신 후\n   * 빈 서버\n     * Raw 적재량 생성\n   * ERP\n     * 이큐브랩 직원: 모든 기기의 raw 적재량을 조회할 수 있다.\n     * 파트너: 자신에게 할당된 기기의 raw 적재량을 조회할 수 있다.\n   * CCN\n     * 사용자는 자신에게 할당된 기기의 raw 적재량을 조회할 수 있다.\n\nVin 완료 기기 통신 095. 트래커 통신 [https://ecubelabs.atlassian.net/browse/SW-6128] Vin 완료\n기기 통신 096. CCB2/GT 통신 [https://ecubelabs.atlassian.net/browse/SW-6126] 강승현 (Tim)\n완료 기기 통신 097. CFX 통신 [https://ecubelabs.atlassian.net/browse/SW-6125] 강승현 (Tim)\n완료 기기 통신 098. CCB 통신 [https://ecubelabs.atlassian.net/browse/SW-6124] 강승현 (Tim)\n완료 경로 관리 900. (deprecated) 경로 생성\n[https://ecubelabs.atlassian.net/browse/SW-6842]\n * 쓰레기통 n개 선택 후 경로 생성 가능\n   * 경로 생성 관련 제약 조건이 아무것도 없는 mini CCNx\n\n김일두(Charlie) 완료 연차 관리 911. (deprecated) 연차 목록 조회\n[https://ecubelabs.atlassian.net/browse/SW-5867]\n * 연차 등록 [https://ecubelabs.atlassian.net/browse/CCNB-5868] 후 자신이 등록한 연차 목록 조회\n   가능\n * 다음의 권한이 있으면 전 사원의 연차를 조회할 수 있다.\n   * Admin(group.idx=1)\n   * ERP Developer(group.idx=13)\n   * Management(group.idx=18)\n\nUnassigned 완료 연차 관리 912. (deprecated) 연차 작성\n[https://ecubelabs.atlassian.net/browse/SW-5868] Unassigned 완료 연차 관리 913.\n(deprecated) 연차 작성 시 이메일 발송 [https://ecubelabs.atlassian.net/browse/SW-5871]\n * 연차 작성 [https://ecubelabs.atlassian.net/browse/CCNB-5868]이 성공하면 관계자에게 연차 신청서\n   이메일을 발송한다.\n   * from: 자신\n   * to: 경영지원팀\n   * cc: 소속팀\n   * bcc: 자신\n\nUnassigned 완료 연차 관리 914. (deprecated) 연차 상세 조회\n[https://ecubelabs.atlassian.net/browse/SW-5869]\n * 연차 작성 [https://ecubelabs.atlassian.net/browse/CCNB-5868] 후 자신이 작성한 연차 상세 조회\n   가능\n * 다음의 권한이 있으면 전 사원의 연차 상세 조회할 수 있다.\n   * Admin(group.idx=1)\n   * Management(group.idx=18)\n\nUnassigned 완료 연차 관리 915. (deprecated) 연차 승인/거절\n[https://ecubelabs.atlassian.net/browse/SW-5870]\n * 연차 상세 [https://ecubelabs.atlassian.net/browse/CCNB-5869]에서 경영지원팀 (Management)\n   는 연차를 승인 혹은 거절할 수 있다.\n\nUnassigned 완료 연차 관리 916. (deprecated) 연차 승인 시 구글 캘린더 등록\n[https://ecubelabs.atlassian.net/browse/SW-5883]\n * 연차 승인 [https://ecubelabs.atlassian.net/browse/CCNB-5870] 후\n   * 구글 캘린더에 일정을 등록한다.\n\nUnassigned 완료\n\n35 이슈\n[https://ecubelabs.atlassian.net/issues/?jql=project%3DCCNB+AND+component%3D%EA%B8%B0%EB%8A%A5+AND+component+in+%28CCN%2C+ERP%29+ORDER+BY+summary+ASC+++++&src=confmacro]\n\n\n\n\nHAULLA [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/1854341152/new]\n\nepic name 요약 설명 담당자 상태 기한 어카운트 관리 024. 어카운트 등록\n[https://ecubelabs.atlassian.net/browse/SW-7711]\n * 관리자 웹\n   * 관리자가 제너레이터 어카운트 등록 → 비밀번호 등록 이메일 발송\n     * 비밀번호 등록 이메일은 비밀번호 등록을 위한 링크 포함\n     * 비밀번호 등록 이메일을 수신한 제너레이터는 링크를 타고 들어와서 비밀번호 등록\n     * 비밀번호 등록 후 제너레이터 웹 이용\n   * 딜 검수 후 업로드\n\n김성준 (Lucas) 완료 어카운트 관리 025. 비밀번호 등록 메일 발송\n[https://ecubelabs.atlassian.net/browse/MP-4468]\n * 비밀번호 등록 메일은 비밀번호 등록 페이지 + 토큰 포함\n * 토큰은 발행 시각 기준 7일간 유효\n\n황창환(Arthur) 완료 어카운트 관리 034. 어카운트 목록\n[https://ecubelabs.atlassian.net/browse/MP-4662]\n * 관리자 웹\n   * 모든 어카운트 조회 가능 (with 검색 조건)\n\n황창환(Arthur) 완료 어카운트 관리 035. 어카운트 상세\n[https://ecubelabs.atlassian.net/browse/MP-4469]\n * 관리자 웹\n   * 모든 어카운트 상세 조회 가능\n * 제너레이터 웹\n   * 자신의 어카운트 상세 조회 가능\n\n황창환(Arthur) 완료 어카운트 관리 036. 어카운트 편집\n[https://ecubelabs.atlassian.net/browse/MP-5659]\n * 관리자 웹\n   * 모든 어카운트의 속성 편집 가능\n\n황창환(Arthur) 완료 어카운트 관리 037. 어카운트 상태 변경\n[https://ecubelabs.atlassian.net/browse/SW-7823]\n * 관리자 웹\n   * 모든 어카운트의 상태를 Active, Suspended, Terminated (Haulla) 로 변경 가능\n     * 허브스팟 Deal pipineline 갱신\n   * 다른 상태 변경은 허브스팟의 Deal 상태에 따라 변경 된다\n     * https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B#FSM\n       [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B#FSM]\n\n황창환(Arthur) 완료 어카운트 관리 044. 어카운트 검색\n[https://ecubelabs.atlassian.net/browse/MP-4481]\n * 관리자 웹\n   * 조건에 따라 어카운트 조회 가능\n     * 어카운트 #, 빌링 이메일, 지역, 상태, 계약일\n\n황창환(Arthur) 완료 결제 수단 관리 047. 결제 수단 관리\n[https://ecubelabs.atlassian.net/browse/SW-8349]\n * 제너레이터 웹\n   * 결제 수단 등록\n     * 신용카드\n     * ACH\n       * 은행 계정\n       * 소액 인증\n     * 어카운트별로 다른 결제 수단을 등록해야 함\n   * 결제 수단 조회\n     * 어카운트별로 등록 된 결제 수단 조회\n   * 결제 수단 삭제\n * 데이터\n   * 사용자 별 등록된 결제수단 저장 (런북)\n\n강주영 (Ben) 완료 결제 수단 관리 048. 결제 수단 등록 시 PG 연동\n[https://ecubelabs.atlassian.net/browse/MP-4789]\n * 신용카드 → Stripe\n * ACH\n   * 은행 계정 → Plaid 를 통해 Stripe 에 등록\n   * 소액 인증 → Stripe\n\n김일두(Charlie) 완료 청구 관리 063. Event charge 등록\n[https://ecubelabs.atlassian.net/browse/SW-7834]\n * 추가 비용이 발생한 경우 event charge 생성\n   * 고객에게 credit 을 지급해야 하는 경우 [/images/icons/emoticons/forbidden.png] 금액으로 event\n     charge 생성\n\n황창환(Arthur) 완료 청구 관리 064. Regular charge 등록\n[https://ecubelabs.atlassian.net/browse/MP-4964]\n * Active or Suspended 어카운트에 대해서 홀라 서비스 이용료(regular charge)가 매달 자동으로 등록 됨\n\n황창환(Arthur) 완료 청구 관리 065. First month promotion charge 등록\n[https://ecubelabs.atlassian.net/browse/MP-6152]\n * 최대 $100 의 프로모션을 빌링 첫달에 적용\n\n황창환(Arthur) 완료 청구 관리 066. Dumpster delivery charge 등록\n[https://ecubelabs.atlassian.net/browse/MP-4971]\n * 덤스터 배송이 완료 된 어카운트에 대해서 덤스터 배송비가 첫번째 청구 달에 자동으로 등록 됨\n\n황창환(Arthur) 완료 청구 관리 067. Prorate charge 등록\n[https://ecubelabs.atlassian.net/browse/SW-7880]\n * 덤스터 배송이 완료 된 어카운트에 대해서 prorate charge 가 첫번째 청구 달에 자동으로 등록 됨\n\n황창환(Arthur) 완료 청구 관리 068. Paper invoice admin fee charge 등록\n[https://ecubelabs.atlassian.net/browse/SW-7817]\n * 인보이스를 등기로 받는 어카운트에 대해서 paper invoice admin fee($5.00) 가 매달 자동으로 등록 됨\n   * 단, Active 고객인 경우에만 https://ecubelabs.atlassian.net/browse/GH-961\n     [https://ecubelabs.atlassian.net/browse/GH-961]\n\n황창환(Arthur) 완료 결제 관리 075. 결제 내역 등록\n[https://ecubelabs.atlassian.net/browse/SW-7798]\n * 관리자 웹\n   * 자동으로 결제 이력을 등록할 수 없는 경우 (ex - paper check) 관리자가 직접 결제 이력을 등록\n * Stripe 결제 내역은 API 를 통해 연동 (= 관리자 웹에서 직접 등록 안 함)\n\n황창환(Arthur) 완료 청구 관리 076. 결제 내역 목록\n[https://ecubelabs.atlassian.net/browse/SW-7727]\n * 결제 내역 등록 [https://ecubelabs.atlassian.net/browse/MP-4475] 후\n   * 관리자 웹\n     * 결제 이력 화면\n       [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/1129873813]에서 모든\n       제너레이터의 결제 내역 조회 가능\n     * 제너레이터 어카운트 상세 화면\n       [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/558989537/W+A]에서\n       특정 어카운트의 일부 결제 내역을 조회 가능\n   * 제너레이터 웹\n     * 자신의 결제 내역 조회 가능\n\n황창환(Arthur) 완료 결제 관리 077. 결제 내역 수정\n[https://ecubelabs.atlassian.net/browse/SW-7602]\n * 결제 내역 등록 [https://ecubelabs.atlassian.net/browse/MP-4475] 후\n   * 관리자 웹\n     * 어떤 인보이스에 대한 결제인지만 수정 가능\n\n황창환(Arthur) 완료 청구 관리 083. 인보이스 생성\n[https://ecubelabs.atlassian.net/browse/SW-7743]\n * API 로만 생성 가능\n   * 스트라이프 인보이스도 같이 생성\n\n강주영 (Ben) 완료 청구 관리 090. 인보이스 목록 [https://ecubelabs.atlassian.net/browse/SW-7723]\n * 관리자 웹\n   * 모든 인보이스 내역 조회 가능 (with 검색 조건)\n * 제너레이터 웹\n   * 자신의 인보이스 내역 조회 가능\n\n황창환(Arthur) 완료 청구 관리 091. 인보이스 상세\n[https://ecubelabs.atlassian.net/browse/SW-7726]\n * 관리자 웹\n   * 모든 인보이스 상세 조회 가능\n\n * 제너레이터 웹\n   * 자신의 인보이스 상세 조회 가능\n\n황창환(Arthur) 완료 청구 관리 095. SOA 인보이스 생성\n[https://ecubelabs.atlassian.net/browse/MP-6259]\n * 관리자 웹\n   * SOA (Statement Of Account) 인보이스 생성\n\n김일두(Charlie) 진행중 청구 관리 097. 인보이스 발송 완료 SMS\n[https://ecubelabs.atlassian.net/browse/SW-7590]\n * 매달 인보이스를 빌링 이메일로 발송 후 이메일을 확인하라는 SMS 를 보낸다.\n\n강주영 (Ben) 완료 청구 관리 098. 인보이스 pay/void\n[https://ecubelabs.atlassian.net/browse/SW-8072] 강주영 (Ben) 완료 개별 서비스 관리 102. 개별\n서비스 등록 [https://ecubelabs.atlassian.net/browse/MP-4514]\n * 관리자 웹\n   * 제너레이터의 개별 서비스 등록\n\n황창환(Arthur) 완료 개별 서비스 관리 103. 개별 서비스 복사\n[https://ecubelabs.atlassian.net/browse/MP-5716]\n * 관리자 웹\n   * 복사를 통해 개별 서비스를 빠르게 추가 등록 (필수값 제외한 모든 값 복사)\n\n황창환(Arthur) 완료 개별 서비스 관리 114. 개별 서비스 목록\n[https://ecubelabs.atlassian.net/browse/MP-4513]\n * 관리자 웹\n   * 모든 개별 서비스 조회 가능 (with 검색 조건)\n   * 특정 제너레이터의 개별 서비스 조회 가능\n * 제너레이터 웹\n   * 자신의 개별 서비스 조회 가능\n\n황창환(Arthur) 완료 개별 서비스 관리 115. 개별 서비스 상세\n[https://ecubelabs.atlassian.net/browse/MP-4515]\n * 관리자 웹\n   * 모든 개별 서비스 상세 조회 가능\n\n황창환(Arthur) 완료 개별 서비스 관리 116. 서비스 편집\n[https://ecubelabs.atlassian.net/browse/SW-8413]\n * 관리자 웹\n   * 모든 서비스 편집 가능\n * job\n   * 매달 22일 0시(UTC) 에 annual increase\n\n황창환(Arthur) 완료 개별 서비스 관리 117. 덤스터 배송\n[https://ecubelabs.atlassian.net/browse/MP-6490]\n * 관리자 웹\n   * 모든 서비스의 덤스터 배송일 입력 가능\n\n황창환(Arthur) 완료 개별 서비스 관리 118. 서비스 삭제\n[https://ecubelabs.atlassian.net/browse/MP-6080]\n * 관리자 웹\n   * 모든 서비스 삭제 가능\n\n황창환(Arthur) 완료 개별 서비스 관리 128. 개별 서비스 검색 (deprecated)\n[https://ecubelabs.atlassian.net/browse/MP-4592]\n * 관리자 웹\n   * 조건에 따라 개별서비스 조회 가능\n     * 이메일\n     * 어카운트#\n\nUnassigned On holding 덤스터 관리 150. 덤스터 목록\n[https://ecubelabs.atlassian.net/browse/SW-8149] 김정호(Theo) 진행중 견적 관리 230. 견적 문의\n[https://ecubelabs.atlassian.net/browse/SW-7924]\n * 공홈(www), 추천(refer) 페이지에서 견적 문의 가능 (잠재적 제너레이터)\n   * 문의 내역은 허브스팟 컴퍼니로 입력 됨\n   * www와 refer 에서 견적 문의 폼은 동일한 형태로 관리해야 한다\n * 구글 검색 결과에서 바로 견적 문의 가능 (구글 Ads 기능)\n   * 문의 내역은 허브스팟 컴퍼니로 입력 됨\n\n김성준 (Lucas) 완료 견적 관리 231. 견적 문의 시 이메일 발송\n[https://ecubelabs.atlassian.net/browse/MP-4519]\n * 견적 문의 시 sales@haulla.com 으로 이메일 발송\n   * PC\n     * 워드프레스 플러그인 (https://ecubelabs.atlassian.net/browse/MP-4492\n       [https://ecubelabs.atlassian.net/browse/MP-4492] )\n   * 모바일\n     * 노티서버 (SES)\n\nUnassigned On holding 견적 관리 232. 추천 링크 생성\n[https://ecubelabs.atlassian.net/browse/MP-4529]\n * 추천 링크를 타고 와서 견적 문의 시 추천 - 견적 과정이 트래킹 된다.\n * 추천 페이지 유입 시 utm 정보가 존재하면 utm 정보를 포함하도록 추천 링크를 생성한다.\n\n한석원(Joel) 완료 견적 관리 233. 홀라 추천 [https://ecubelabs.atlassian.net/browse/MP-4530]\n * 추천 링크 생성 [https://ecubelabs.atlassian.net/browse/MP-4529] 후 추천 대상 입력 완료 시\n   * 추천인에게 “추천 완료 메일”을 발송한다.\n   * 추천 대상에게 추천 링크가 포함된 “홀라 추천 메일”을 발송한다.\n\n한석원(Joel) 완료 견적 관리 234. 그룹 할인 [https://ecubelabs.atlassian.net/browse/MP-4557]\n * 제너레이터별 그룹 할인 링크는 개발팀에서 미리 생성\n * 제너레이터는 자신의 링크로 들어와서 친구들에서 홀라를 추천하는 SMS 를 발송\n   * SMS 를 받은 친구들은 SMS 에 포함된 견적 제출 페이지로 들어와서 견적 제출\n\nUnassigned On holding 견적 관리 235. Lead form 허브스팟 동기화\n[https://ecubelabs.atlassian.net/browse/SW-8073]\n * 구글 광고에서 제출 한 lead form 을 허브스팟 컴퍼니로 입력\n\n김성준 (Lucas) 완료 견적 관리 260. GTM 이용해 어떤 폼이 제출 되었는지 추적\n[https://ecubelabs.atlassian.net/browse/MP-5771] 한석원(Joel) 완료 견적 관리 280. 뉴스 레터\n구독 [https://ecubelabs.atlassian.net/browse/SW-7815]\n * 공홈\n   * 푸터, 블로그 배너\n   * Subscribe 시 Mailer Lite [https://www.mailerlite.com/] 에서 group\n     58600908359992624 에 추가 됨\n\n한석원(Joel) 완료 견적 관리 281. 견적 문의 (special promo code)\n[https://ecubelabs.atlassian.net/browse/SW-8150]\n * 공홈\n   * 견적 문의 시 promo code FREEAGC200 를 입력하면 Mailer Lite\n     [https://www.mailerlite.com/] 에서 group 78189844611729261 에 추가 됨\n\n한석원(Joel) 완료 수거 지점 관리 345. 수거 지점 등록\n[https://ecubelabs.atlassian.net/browse/MP-4707]\n * 하울러 웹\n   * 하울러가 자신이 관리하는 수거 지점 등록\n\n김일두(Charlie) Backlog 수거 경로 관리 353. 수거 경로 목록\n[https://ecubelabs.atlassian.net/browse/MP-4560] 임채영 (Jack) 완료 수거 지점 관리 375. 수거\n지점 목록 [https://ecubelabs.atlassian.net/browse/MP-4705]\n * 하울러가 수거 지점 등록 [https://ecubelabs.atlassian.net/browse/MP-4707] 후\n   * 하울러 웹\n     * 자신의 수거 지점 조회 가능\n\n김일두(Charlie) Backlog 수거 지점 관리 376. 수거 지점 상세\n[https://ecubelabs.atlassian.net/browse/MP-4706]\n * 하울러가 수거 지점 등록 [https://ecubelabs.atlassian.net/browse/MP-4707] 후\n   * 하울러 웹\n     * 자신의 수거 지점 상세 조회 가능\n\n김일두(Charlie) Backlog Activity 관리 601. ring/call activity 생성\n[https://ecubelabs.atlassian.net/browse/SW-7730]\n * 콜 이벤트 발생할 때 마다 다이얼패드에서 우리 웹훅 호출 → ring/call activity 생성\n\n김일두(Charlie) 완료 Activity 관리 603. Docusign activity 생성\n[https://ecubelabs.atlassian.net/browse/SW-7986]\n * 다큐사인 홈페이지에서 export → AM 대시보드에서 import\n   * API 호출을 위한 요금제를 사용하고 있지 않아서 수동 작업\n\n한석원(Joel) 완료 Activity 관리 607. Activity statistics 조회\n[https://ecubelabs.atlassian.net/browse/SW-7765] 김일두(Charlie) 완료 Activity 관리\n608. Activity statistics export (CSV)\n[https://ecubelabs.atlassian.net/browse/SW-7788] 김일두(Charlie) 완료 Activity 관리\n650. 공휴일 관리 [https://ecubelabs.atlassian.net/browse/SW-7872]\n * AM 공휴일. 공휴일은 AR 계산 기간에서 제외 된다.\n\n김일두(Charlie) 완료 Activity 관리 651. 영업일 관리\n[https://ecubelabs.atlassian.net/browse/SW-7873]\n * 영업일별로 영업 실적을 보기 위해 [https://dashboard.ecubelabs.xyz/] 필요한 데이터\n\n김일두(Charlie) 완료 직원 관리 710. Target AQ 관리\n[https://ecubelabs.atlassian.net/browse/SW-8168]\n * AM Target AQ import (every month) → 대시보드에 Goal 표시\n\n한석원(Joel) 완료 Lead 관리 750. Lead 관리\n[https://ecubelabs.atlassian.net/browse/SW-8337]\n * Lead AM 대시보드에 업로드\n * 유효한 Lead 허브스팟 company 로 생성\n * 허스브팟 compnay lead_status 변경 시 lead 상태 변경\n * lead 회수 및 재공급\n\nUnassigned 완료 SEO 850. (headless) CMS\n[https://ecubelabs.atlassian.net/browse/SW-7771] 강승현 (Tim) 완료 CS 899. 챗봇\n[https://ecubelabs.atlassian.net/browse/SW-7748]\n * 허브스팟 챗봇\n   * 공홈\n   * 제너레이터 웹\n\n한석원(Joel) 완료 허브스팟 900. 허브스팟 시뮬레이터\n[https://ecubelabs.atlassian.net/browse/SW-7676] 황창환(Arthur) 완료 허브스팟 902. Deal\n업데이트 [https://ecubelabs.atlassian.net/browse/SW-7668]\n * 관리자 웹\n   * 다음의 경우 Deal 업데이트\n     * 어카운트 등록 [https://ecubelabs.atlassian.net/browse/MP-4465]\n     * 어카운트 편집 [https://ecubelabs.atlassian.net/browse/MP-5659]\n     * 어카운트 상태 변경 [https://ecubelabs.atlassian.net/browse/MP-6252]\n     * 개별 서비스 등록 [https://ecubelabs.atlassian.net/browse/MP-4514]\n     * 개별 서비스 편집 [https://ecubelabs.atlassian.net/browse/MP-5776]\n     * 개별 서비스 삭제 [https://ecubelabs.atlassian.net/browse/MP-6080]\n\n황창환(Arthur) 완료 허브스팟 905. (Billing) Ticket 검수 및 업로드\n[https://ecubelabs.atlassian.net/browse/SW-8170]\n * 관리자 웹\n   * 허브스팟 (빌링) 티켓 목록 가져와서 노출\n     * 형식에 맞지 않는 값이 입력되어 있으면 오류로 표시\n   * 티켓 항목이 모두 정상적으로 입력되어 있으면 업로드 가능\n\n황창환(Arthur) 완료 허브스팟 910. 텐더 검수 [https://ecubelabs.atlassian.net/browse/SW-7915]\nUnassigned hold 허브스팟 920. 허브스팟 Deal 스냅샷\n[https://ecubelabs.atlassian.net/browse/SW-8181]\n * Deal 변경이 생길때마다 스냅샷 저장\n\n한석원(Joel) 완료 허브스팟 921. 허브스팟 Owner 스냅샷\n[https://ecubelabs.atlassian.net/browse/SW-8182]\n * 허브스팟에서 AM 들은 Owner 리소스로 관리 됨\n * Deal 변경이 생길때마다 Deal 의 담당 AM(owner) 스냅샷 저장\n\n한석원(Joel) 완료 허브스팟 977. Webhookify\n[https://ecubelabs.atlassian.net/browse/SW-8376] 강주영 (Ben) 완료 문서 관리 993. Hubspot\nManual For Account Managers [https://ecubelabs.atlassian.net/browse/SW-8006]\n\n01. Hubspot Manual For Account\nManagers(V.08).pdf[/images/icons/link_attachment_7.gif]\n[/rest/api/3/attachment/content/37458]\n\n김현욱(Hyun) 완료 문서 관리 993. 마켓 관리 시트\n[https://ecubelabs.atlassian.net/browse/SW-8130]\n\nService Coverage_20221214\n[https://docs.google.com/spreadsheets/d/1UAQdb5Gy9gh8gEZlVaDtm6EAO2arvl2b3QItyFqunHI/edit#gid=1324607545]\n\n김태호 (Teddy) 완료 문서 관리 994. 백오피스 메뉴얼\n[https://ecubelabs.atlassian.net/browse/MP-5662]\n * Haulla back-office Customer registration manual\n   [https://docs.google.com/presentation/d/1Y_XW1KxIDU_N8az75EMqibrsyCIc1Tj4QBriQo-3rv8/edit#slide=id.p]\n\n고광준 (Erik) 진행중 문서 관리 995. export CUSTOMER LIST\n[https://ecubelabs.atlassian.net/browse/MP-5593]\n * 주말 제외하고 매일 오전 8시 이전에 CUSOMER LIST export 진행\n\n김일두(Charlie) 완료 지역 관리 997. Coverage\n[https://ecubelabs.atlassian.net/browse/MP-5559]\n * Coverage 변동이 있으면 [https://ecubelabs.atlassian.net/browse/MP-5558] 경계 데이터 관리\n   담당자인 심예은 (Alex)\n   [https://ecubelabs.atlassian.net/secure/ViewProfile.jspa?accountId=5e83fcc4caa47a0c1992f6d4]에게\n   Jira 로 요청\n\n고광준 (Erik) 완료 지역 관리 998. 경계 [https://ecubelabs.atlassian.net/browse/SW-7608]\n * 지역 별 경계를 polygon 으로 관리\n   * 어카운트 주소의 좌표가 polygon 에 속해야 어카운트 등록, 주소 수정이 가능하다.\n\n김성준 (Lucas) 완료 사용자 관리 999. QA 사용자 관리\n[https://ecubelabs.atlassian.net/browse/MP-6074] 김일두(Charlie) 완료\n\n70 이슈\n[https://ecubelabs.atlassian.net/issues/?jql=%28project%3DMP+AND+component%3D%EA%B8%B0%EB%8A%A5+AND+component+not+in+%28%22AM+%EB%8C%80%EC%8B%9C%EB%B3%B4%EB%93%9C%22%29%29+OR+%28project%3DSoftware+AND+component%3D%EA%B8%B0%EB%8A%A5+AND+component+%3DHaulla%29+ORDER+BY+summary+ASC++++&src=confmacro]\n\n\n\n\nHAULLA (AM 대시보드)\n\nepic name 요약 설명 담당자 상태 기한 Activity 관리 601. ring/call activity 생성\n[https://ecubelabs.atlassian.net/browse/SW-7730]\n * 콜 이벤트 발생할 때 마다 다이얼패드에서 우리 웹훅 호출 → ring/call activity 생성\n\n김일두(Charlie) 완료 Activity 관리 603. Docusign activity 생성\n[https://ecubelabs.atlassian.net/browse/SW-7986]\n * 다큐사인 홈페이지에서 export → AM 대시보드에서 import\n   * API 호출을 위한 요금제를 사용하고 있지 않아서 수동 작업\n\n한석원(Joel) 완료 Activity 관리 605. Invoice activity 생성\n[https://ecubelabs.atlassian.net/browse/MP-6477] 한석원(Joel) 완료 Activity 관리 607.\nActivity statistics 조회 [https://ecubelabs.atlassian.net/browse/SW-7765]\n김일두(Charlie) 완료 Activity 관리 608. Activity statistics export (CSV)\n[https://ecubelabs.atlassian.net/browse/SW-7788] 김일두(Charlie) 완료 Activity 관리\n650. 공휴일 관리 [https://ecubelabs.atlassian.net/browse/SW-7872]\n * AM 공휴일. 공휴일은 AR 계산 기간에서 제외 된다.\n\n김일두(Charlie) 완료 Activity 관리 651. 영업일 관리\n[https://ecubelabs.atlassian.net/browse/SW-7873]\n * 영업일별로 영업 실적을 보기 위해 [https://dashboard.ecubelabs.xyz/] 필요한 데이터\n\n김일두(Charlie) 완료 직원 관리 700. 직원 싱크\n[https://ecubelabs.atlassian.net/browse/MP-6389]\n * Google Workspace 에서 사용자 추가/변경/삭제하면 AM 대시보드로 싱크 (within 1 hour)\n\n한석원(Joel) 완료 직원 관리 701. 직원 목록 [https://ecubelabs.atlassian.net/browse/MP-6368]\n한석원(Joel) 완료 직원 관리 702. 직원 수정 [https://ecubelabs.atlassian.net/browse/MP-6369]\n * 한명씩 수정\n * 여러명 한번에 수정\n\n한석원(Joel) 완료 직원 관리 710. Target AQ 관리\n[https://ecubelabs.atlassian.net/browse/SW-8168]\n * AM Target AQ import (every month) → 대시보드에 Goal 표시\n\n한석원(Joel) 완료 Lead 관리 750. Lead 관리\n[https://ecubelabs.atlassian.net/browse/SW-8337]\n * Lead AM 대시보드에 업로드\n * 유효한 Lead 허브스팟 company 로 생성\n * 허스브팟 compnay lead_status 변경 시 lead 상태 변경\n * lead 회수 및 재공급\n\nUnassigned 완료 근무 관리 751. 출근 [https://ecubelabs.atlassian.net/browse/MP-6290]\n * 사용자가 컴퓨터 시간을 엉뚱하게 맞추는 경우가 있어서 출퇴근은 모두 출퇴근 요청이 서버에 도착한 시각을 기준으로 한다.\n * @ecubelabs.com 사용자는 출퇴근 불가\n\n한석원(Joel) 완료 근무 관리 752. 퇴근 [https://ecubelabs.atlassian.net/browse/MP-6292]\n * 8시간 이하로 근무하고 퇴근 시 사유를 필수로 입력해야 한다.\n * 사용자 타임존 기준 자정 이후로는 퇴근 불가.\n\n한석원(Joel) 완료 근무 관리 753. 재출근 [https://ecubelabs.atlassian.net/browse/MP-6293]\n * 사용자 타임존 기준 자정 이후로는 재출근 불가.\n\n한석원(Joel) 완료\n\n15 이슈\n[https://ecubelabs.atlassian.net/issues/?jql=%28project%3DMP+AND+component%3D%EA%B8%B0%EB%8A%A5+AND+component+in+%28%22AM+%EB%8C%80%EC%8B%9C%EB%B3%B4%EB%93%9C%22%29%29+OR+%28project%3DSW+AND+component%3D%EA%B8%B0%EB%8A%A5+AND+component%3DHaulla+AND+component%3D%22AM+%EB%8C%80%EC%8B%9C%EB%B3%B4%EB%93%9C%22%29+ORDER+BY+summary+ASC++&src=confmacro]\n\n\n\n\nHAULLA (공홈)\n\nepic name 요약 설명 담당자 상태 기한 견적 관리 230. 견적 문의\n[https://ecubelabs.atlassian.net/browse/SW-7924]\n * 공홈(www), 추천(refer) 페이지에서 견적 문의 가능 (잠재적 제너레이터)\n   * 문의 내역은 허브스팟 컴퍼니로 입력 됨\n   * www와 refer 에서 견적 문의 폼은 동일한 형태로 관리해야 한다\n * 구글 검색 결과에서 바로 견적 문의 가능 (구글 Ads 기능)\n   * 문의 내역은 허브스팟 컴퍼니로 입력 됨\n\n김성준 (Lucas) 완료 견적 관리 235. Lead form 허브스팟 동기화\n[https://ecubelabs.atlassian.net/browse/SW-8073]\n * 구글 광고에서 제출 한 lead form 을 허브스팟 컴퍼니로 입력\n\n김성준 (Lucas) 완료 견적 관리 280. 뉴스 레터 구독\n[https://ecubelabs.atlassian.net/browse/SW-7815]\n * 공홈\n   * 푸터, 블로그 배너\n   * Subscribe 시 Mailer Lite [https://www.mailerlite.com/] 에서 group\n     58600908359992624 에 추가 됨\n\n한석원(Joel) 완료 견적 관리 281. 견적 문의 (special promo code)\n[https://ecubelabs.atlassian.net/browse/SW-8150]\n * 공홈\n   * 견적 문의 시 promo code FREEAGC200 를 입력하면 Mailer Lite\n     [https://www.mailerlite.com/] 에서 group 78189844611729261 에 추가 됨\n\n한석원(Joel) 완료 SEO 850. (headless) CMS\n[https://ecubelabs.atlassian.net/browse/SW-7771] 강승현 (Tim) 완료 CS 899. 챗봇\n[https://ecubelabs.atlassian.net/browse/SW-7748]\n * 허브스팟 챗봇\n   * 공홈\n   * 제너레이터 웹\n\n한석원(Joel) 완료\n\n6 이슈\n[https://ecubelabs.atlassian.net/issues/?jql=project%3DSW+AND+component%3D%EA%B8%B0%EB%8A%A5+AND+component%3DHaulla+AND+component%3D%22%EA%B3%B5%ED%99%88%22+ORDER+BY+summary+ASC+++&src=confmacro]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/497221968"
  },
  {
    "pageContent": "SW팀 신규 입사자를 위한 문서\n\n\n상위 문서 정보\n\n본 문서는 이큐브랩 신규 입사자를 위한 문서\n[https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/128844026]의 하위 문서입니다.\n\n\n\n * Product OT\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/9437245/Product+OT]\n * 개발자 OJT 자료\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/104300575/OJT]\n * 개발 프로세스 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001652]\n * 개발 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40271993]\n * 근태 관리 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2008350836]\n * 연차 신청 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/875135056]\n * 일정 관리 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1773044054]\n * Be a better me?\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1080754321/Be+a+better+me]\n * Online courses\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2244018199/Online+courses]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3768456"
  },
  {
    "pageContent": "보안 정보",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122323625"
  },
  {
    "pageContent": "Mac* & 기타 장비 사용 현황\n\n사용자\n\nMac\n\nDisplay\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\nMac mini (2023)\n칩 Apple M2 Pro\n메모리 32GB\n\niMac (Retina 5K, 27-inch, 2017)\n3.4 GHz Quad-Core Intel Core i5\n16 GB 2400 MHz DDR4\n\nMacBook Pro (13-inch, 2018, Four Thunderbolt 3 ports)\n2.3 GHz 쿼드 코어 Intel Core i5\n8GB 2133 MHz LPDDR3\n500GB SSD\n\n(면접용) MacBook Pro (13-inch, 2019, Two Thunderbolt 3 ports)\n1.4 GHz 쿼드 코어 Intel Core i5\n16GB 2133 MHz LPDDR3\n\n-\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\nMac mini (2023)\n칩 Apple M2 Pro\n메모리 32GB\n\n27UL550\n\n강주영 (Ben)\n[https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n\nMacBook Pro(14형, 2023년 모델)\n칩 Apple M3 Pro\n메모리 36GB\n\n27UL550\n\n한석원(Joel)\n[https://ecubelabs.atlassian.net/wiki/people/607cf1f12ad11c007278466d?ref=confluence]\n\nMacBook Pro(14형, 2023년 모델)\n칩 Apple M3 Pro\n메모리 36GB\n\n27UL550\n\n황창환(Arthur)\n[https://ecubelabs.atlassian.net/wiki/people/620098d8e5caff0070e16d29?ref=confluence]\n\nMacBook Pro(14형, 2023년 모델)\n칩 Apple M3 Pro\n메모리 36GB\n\n27UL550\n\n김성준 (Lucas)\n[https://ecubelabs.atlassian.net/wiki/people/6327e14a8b75455be45276fa?ref=confluence]\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n이승준(Lee)\n[https://ecubelabs.atlassian.net/wiki/people/712020:e5c00ada-e374-489c-bb3f-bac4106dad2a?ref=confluence]\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n정성민(Snack)\n[https://ecubelabs.atlassian.net/wiki/people/712020:50cbf253-4019-4568-b3e6-06516d98f017?ref=confluence]\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n27UL550\n\nVin\n[https://ecubelabs.atlassian.net/wiki/people/60176615b498230070273da0?ref=confluence]\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n김하늘(Bungle)\n[https://ecubelabs.atlassian.net/wiki/people/712020:17f143ac-75d6-49e3-a52f-4292638085d2?ref=confluence]\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n조성현(Jovid)\n[https://ecubelabs.atlassian.net/wiki/people/712020:4d15a89a-1da8-479a-b2bf-899d35d3aa87?ref=confluence]\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\nMacBook Pro(14형, 2021년 모델)\n칩 Apple M1 Pro\n메모리 32GB\n\n27UL550\n\n27UL550\n\n27UL550\n\n권순범 (Sean)\n[https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]\n\nMacBook Pro (13-inch, 2017, Two Thunderbolt 3 ports)\n2.3 GHz 듀얼 코어 Intel Core i5\n16GB 2133 MHz LPDDR3\n120 GB SSD\n\n-\n\n창고\n\nMacBook Pro (13-inch, 2019, Two Thunderbolt 3 ports)\n1.4 GHz 쿼드 코어 Intel Core i5\n16GB 2133 MHz LPDDR3\n\n-\n\n\n주변 장비\n\n멀티포트 어댑터 (애플 정품)\n\n권순범 (Sean)\n[https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]\n황창환(Arthur)\n[https://ecubelabs.atlassian.net/wiki/people/620098d8e5caff0070e16d29?ref=confluence]\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\nHR\n\n멀티포트 어댑터 (3rd party)\n\nUnassigned Unassigned\n\n애플 키보드 (3)\n\n이승준(Lee)\n[https://ecubelabs.atlassian.net/wiki/people/712020:e5c00ada-e374-489c-bb3f-bac4106dad2a?ref=confluence]\n창고 창고\n\n애플 마우스 (3)\n\n창고 창고 창고\n\n리얼포스 (2)\n\n강주영 (Ben)\n[https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n황창환(Arthur)\n[https://ecubelabs.atlassian.net/wiki/people/620098d8e5caff0070e16d29?ref=confluence]\n\n기계식(적축) 키보드 (2)\n\n아이맥 창고\n\n\n개인 장비\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n모니터(27UK850) 리얼포스 트랙패드\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n모니터(27UQ850W) 모니터(27UK850) 리얼포스 트랙패드\n\n강주영 (Ben)\n[https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n\n모니터(벤큐2719d)\n\n한석원(Joel)\n[https://ecubelabs.atlassian.net/wiki/people/607cf1f12ad11c007278466d?ref=confluence]\n\n애플 키보드 트랙패드\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/401801226"
  },
  {
    "pageContent": "Map\n\n\n1. PROVIDER\n\n--------------------------------------------------------------------------------\n\n\n1.1. GOOGLE\n\n\n1.2. MAPBOX\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/62095504/MapBox]\n\n\n2. API\n\n--------------------------------------------------------------------------------\n\n\n2.1. DIRECTIONS\n\nDirections API호출은 경로 측정시마다 매번 호출해야합니다. 기존 응답값을 재사용하기 어렵습니다. (현재위치가 매번 다르고, 실시간\n교통량이 다를 수 있기때문)\n\nAPI 호출 시점\n\n * 다음 목적지를 설정했을때\n * 이전 목적지로 다시 재설정했을때 등 모든 경로 조회시\n\n\nGOOGLE\n\n--------------------------------------------------------------------------------\n\n * 기본 2만건(실시간 교통량 반영) 제공\n * 이후 1000건당 10 USD 지불\n\n장점\n\n * MapBox 대비 더 풍부한 실시간 교통량 정보(훨씬 더 많은 유저수에 기반)\n\n\nMAPBOX\n\n--------------------------------------------------------------------------------\n\n * 기본 5만건(실시간 교통량 반영) 제공\n * 이후 1000건당 0.5 USD 지불\n\n장점 \n\n * Google 대비 20배 저렴한 비용\n\n\n3. 지리 좌표계 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122356038]\n\n--------------------------------------------------------------------------------\n\n\n4. 중국 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122520073]\n\n--------------------------------------------------------------------------------\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122585237"
  },
  {
    "pageContent": "참고 서적\n\n참고 서적은 회사 비용으로 구매한 서적으로 이큡 책장에 있거나 어느 개발자가 읽고 있거나 ...\n\n\n\n * 유지보수하기 어렵게 코딩하는 방법: 평생 개발자로 먹고 살 수 있다\n * Clean Code\n * DDD Start!\n * 머신러닝\n   * 프로그래머를 위한 선형대수\n   * 데이터 과학 입문\n   * 사용자 경험이야기 UX를 이해하는 가장 쉬운 방법\n * 마이크로소프트웨어\n   * VOL.394 CLOUD or DARE\n   * VOL.395 Data Adventure\n * Kubernetes\n   * 쿠버네티스 마스터 2/e\n * Elastic\n   * 시작하세요! 엘라스틱서치\n   * 일래스틱 스택 6 입문\n * Architecture\n   * 개발자에서 아키텍트로\n\n\n유지보수하기 어렵게 코딩하는 방법: 평생 개발자로 먹고 살 수 있다\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image-20210503-014629.png?api=v2]\n\neBook. 0원이므로 가입하면 그냥 다운 받을 수 있다.\n[https://www.hanbit.co.kr/store/books/look.php?p_code=E2375873090]\n\n\nCLEAN CODE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2018-11-9_13-54-26.png?api=v2]\n\n * 코드 리뷰할 때 까이지 않기 위해 읽어볼 것을 추천합니다\n\n\nDDD START!\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2018-11-9_13-57-40.png?api=v2]\n\n * DDD = 백엔드 설계 방법론 중 하나\n\n\n머신러닝\n\n\n프로그래머를 위한 선형대수\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2018-11-9_14-4-48.png?api=v2]\n\n\n데이터 과학 입문\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2018-11-9_14-5-46.png?api=v2]\n\n\n사용자 경험이야기 UX를 이해하는 가장 쉬운 방법\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/57223889(1).jpg?api=v2]\n\n * UX와 더 친해질 수 있는 책\n\n\n마이크로소프트웨어\n\n\nVOL.394 CLOUD OR DARE\n\n[https://shop-phinf.pstatic.net/20181022_12/maso@chosunbiz.com_1540137382327Utcqi_JPEG/63443682831962609_70107016.jpg?type=m510]\n\n * 얻을 수 있는 지식\n   \n   * Dev-Ops\n   \n   * CI / CD\n   \n   * TLS 1.3\n\n\nVOL.395 DATA ADVENTURE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2019-2-1_17-40-2.png?api=v2]\n\n * 머신러닝\n\n\nKUBERNETES\n\n\n쿠버네티스 마스터 2/E\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2019-4-2_10-2-28.png?api=v2]\n\n\nELASTIC\n\n\n시작하세요! 엘라스틱서치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2019-4-2_9-58-34.png?api=v2]\n\n\n일래스틱 스택 6 입문\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image2019-4-2_10-1-23.png?api=v2]\n\n\nARCHITECTURE\n\n\n개발자에서 아키텍트로\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/96632836/image-20210719-024918.png?api=v2]\n\n원서: Design It!: From Programmer to Software Architect\n[https://www.amazon.com/Design-Programmer-Architect-Pragmatic-Programmers/dp/1680502093]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/96632836"
  },
  {
    "pageContent": "Intro & JD\n\n\nINTRO\n\n우리에 대한 모든 내용은 아래 링크에 더 자세히 담겨 있습니다 :)\nhttps://ecubelabs.notion.site/Software-Team_-a8fe174a97fc42babd5d77e2f4d5f739\n\n=========================\n\n# 기업 소개\n이큐브랩에서 61개국에서 사용되고 있는 데이터 기반 폐기물 관제 솔루션 CCN과 폐기물 수거 매칭 플랫폼 Haulla를 개발 할 엔지니어를 모집합니다.\n\n• 한국과 중국에 제품 생산 공장이 있어요!\n• 상대가 누구든 수평적인 소통이 가능해요!\n\n## 근무 환경\n• 업무용 Mac 장비 제공\n• 4K 모니터 제공\n• 편안한 의자 제공 (시디즈 T50)\n• 식사/커피 제공\n• 아무때나 휴가 사용\n• 세미나/컨퍼런스 참석 자유: 휴가 쓰지 않아도 돼요\n• 1~2주 간격으로 진행하는 DevTalk\n• AWS 기본 교육 지원\n• 장기 근속자 포상 (3, 5년차 마다 100만원 및 휴가 지급)\n\n=========================\n\n# 팀 소개\n이큐브랩 소프트웨어팀은 자사의 IoT 디바이스에서 얻어오는 데이터를 이용해 다양한 서비스를 개발하고 있습니다.\n데이터 기반 폐기물 관제 솔루션, 차량 관제 솔루션을 개발하여 서비스하고 있으며,\n최근에는 폐기물 수거 업체와 폐기물 배출처를 연결해주는 서비스를 런칭하여 지속적인 고객 유치로 수익을 올리고 있습니다.\n\n관심이 생긴다면 지원해서 우리와 함께 해주세요!\n같이 재밌게 개발을 하며 성장을 하실 분들은 언제나 환영합니다.\n\n## 개발 문화\n• 개발 및 디버깅에만 집중 가능한 인프라\n• 업무는 빨리빨리? No!\n• 잘 짜여진 개발 컨벤션\n• Soft landing을 돕는 방대한 문서와 도구\n• 철저한 코드 리뷰 후 배포\n• 불필요한 회의 지양\n• 엔지니어에게 직접적인 업무 요청 No!\n\n## 우리가 만드는 제품에 대한 이야기가 궁금하다면?\nhttps://www.notion.so/ecubelabs/Software-Team_-a8fe174a97fc42babd5d77e2f4d5f739#83b92a7b63314a38ad0afcf307fe8450\n\n=========================\n\n# 채용 절차\n서류 전형 - 1차 기술 인터뷰 - 2차 임원 인터뷰 - 최종 합격\n\n\n\n\n\nJR. FULL-STACK ENGINEER\n\n## 급여\n4000만원 ~ 6000만원\n\n## 주요업무\n- Node.js 를 이용한 API 서버 개발\n- React 를 이용한 웹 서비스 개발\n- Jest, Testing Library, Cypress 를 이용한 테스트 코드 작성\n\n## 자격요건\n- React, Node.js 사용 경험 보유\n- 3년 이하의 웹 서비스 개발 경험 보유\n- 테스트 코드에 대한 경험 또는 지식 보유\n- UNIX 계열 터미널 환경(macOS, Linux 등) 사용 경험 보유\n- 원활한 소통 능력 보유\n- Git 사용 경험 보유\n\n## 우대사항\n- 데이터 시각화에 대한 경험 보유\n- D3.js 또는 visx를 이용한 Chart 개발 경험 보유\n- DDD 기반 프로젝트 개발 경험 보유\n- TDD 또는 BDD 기반의 테스트 코드 작성 경험 보유\n- 다양한 테스트 경험 보유 (Unit Test, Interaction Test, Visual Regression Test, Integration Test, E2E Test)\n- ReactiveX를 이용한 개발 경험 보유\n- NB-IoT/LoRaWAN을 이용한 서버 개발 경험 보유\n- 시계열 데이터베이스를 이용한 성능 개선 경험 보유\n\n\nSR. SRE/DEVOPS ENGINEER\n\n## 급여\n9000만원 ~ 12000만원\n\n## 주요업무\n- 이큐브랩의 모든 서비스를 안정적으로 운영하기 위한 인프라 구축 및 모니터링\n- 인프라 운영 비용 최적화 및 가용상 향상\n- 운영중인 서비스의 고도화를 위한 환경 구축\n- 레거시 인프라의 코드화(Terraform)\n- AWS Well-Architected Framework의 6대 설계 원칙에 따른 인프라 및 서비스 고도화\n- Jira Cloud 관리 및 업무 프로세스 표준화\n- 기타 협업 도구 관리 (GitHub, Slack, Wiki 등)\n\n## 자격요건\n- 만 5년 이상의 유관 경력(Backend engineer, Infra engineer) 또는 이에 준하는 지식 보유\n- AWS/GCP/Azure 등 클라우드 컴퓨팅 환경에서 서비스 운영 및 관리 경험 3년 이상 보유\n- Terraform/AWS CDK 와 같은 IaC 를 이용한 인프라 관리 경험 3년 이상 보유\n- Kubernetes 클러스터 구축 및 운영 경험 3년 이상 보유\n- 컨테이너 기반의 서비스 운영 경험 3년 이상 보유\n- AWS Certified Solution Architect — Associate 또는 이에 준하는 자격 보유\n- Prometheus, Datadog, ELK 등의 서비스로 로깅 및 모니터링 경험 보유\n\n## 우대사항\n- On-premise 환경에서의 서비스 관리 경험 보유\n- OpenStack 과 같은 IaaS를 이용한 Private/Public Cloud 구축 및 운영 경험 보유\n- Multi Cloud 운영 경험 보유\n- AD/LDAP 와 같은 Directory Service를 이용한 중앙 인증 시스템 운영 경험 보유\n- Vault 와 같은 Multi Cloud 통합 인증 시스템 관리 경험 보유\n- Kafka 와 같은 메시지 브로커 운영 경험 보유\n\n\nSR. FRONT-END ENGINEER\n\n## 급여\n7000만원 ~ 12000만원\n\n## 주요업무\n- React/React Native 기반 웹/앱 서비스 개발 및 유지보수\n- 사내 UI 라이브러리 개발 및 유지보수\n- 테스트 코드 품질 관리\n\n## 자격요건\n- 만 5년 이상의 Front-end 개발 경험 또는 이에 준하는 지식 보유\n- TypeScript를 이용한 제품 개발 경험 보유\n- Webpack/Parcel/Vite와 같은 번들러 구성 경험 보유\n- React를 이용한 제품 개발 경험 보유\n- Storybook을 이용한 UI 구성요소 개발 경험 보유\n- TDD/BDD 경험 보유\n- 웹 서비스 성능 최적화 경험 보유 (Lighthouse 기준 Performance 95~100점)\n- ICU Messages에 대한 지식 보유\n\n## 우대사항\n- WebSocket을 이용한 실시간 서비스 개발 경험\n- Zeplin을 이용한 디자이너와의 협업 경험\n- E2E 테스트 경험 보유\n\n\nSR. BACK-END ENGINEER\n\n## 급여\n7000만원 ~ 12000만원\n\n## 주요업무\n- Node.js 기반 API 서버 개발 및 유지보수\n- 기존 서비스 품질 개선 및 최적화\n- 테스트 코드 품질 관리\n\n## 자격요건\n- 만 5년 이상의 Back-end 개발 경험 또는 이에 준하는 지식 보유\n- TypeScript를 이용한 제품 개발 경험 보유\n- 도메인 주도 설계 기반의 모델링 경험 보유\n- TypeORM와 같은 ORM을 이용한 제품 개발 경험 보유\n- RDB에 대한 경험\n- TDD/BDD 경험 보유\n\n## 우대사항\n- 쿼리 튜닝 경험 보유\n- 다양한 설계 방법론에 대한 지식 보유\n- Data Warehouse에 대한 지식 또는 경험 보유\n- 비관계형 데이터베이스를 이용한 성능 개선 경험 보유\n\n\n\n\nSR. IOT BACK-END ENGINEER\n\n## 급여\n8000만원 ~ 15000만원\n\n## 주요업무\n- IoT 기기와 통신하는 서버 개발 및 유지보수\n- LoRaWAN 플랫폼과 통신하는 중계 서버 개발 및 유지보수\n- 외부 IoT 중계 플랫폼과 통신하는 중계 서버 개발 및 유지보수\n\n## 자격요건\n- 만 5년 이상의 Back-end 개발 경험 또는 이에 준하는 지식 보유\n- Node.js, TypeScript를 이용한 개발 경험 보유\n- CoAP, MQTT에 대한 이해 보유\n- LPWAN(NB-IoT, LoRaWAN) 환경을 위한 IoT 통신 서버 개발 경험 보유\n- MQTT Broker Server 개발 경험 보유\n- Protocol Buffer를 이용한 통신 서버 개발 경험 보유\n- gRPC를 이용한 IoT 기기와 서버 간의 통신 경험 보유\n\n## 우대사항\n- The Things Stack 과 같은 LoRaWAN 플랫폼을 이용한 IoT 통신 서버 개발 경험 보유\n- NB-IoT 중계 플랫폼을 이용한 IoT 통신 서버 개발 경험 보유\n- 자체적인 프로토콜을 이용해 IoT 통신 서버 개발 경험 보유\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/123011171"
  },
  {
    "pageContent": "고양시 사업 통신 관련 정리\n\n\n\n * 배경 지식\n   * LG IoT 플랫폼\n   * n2m 플랫폼\n   * ntels 플랫폼\n * CCP\n   * 개요\n   * 다운되면 통신 연동 시나리오에 영향주는 요소\n   * 다운되어도 통신 연동 시나리오에 영향주지 않는 요소\n * CCB\n   * 개요\n   * 다운되면 통신 연동 시나리오에 영향주는 요소\n   * 다운되어도 통신 연동 시나리오에 영향주지 않는 요소\n * CTK\n   * 개요\n   * 다운되면 통신 연동 시나리오에 영향주는 요소\n\n\n\n--------------------------------------------------------------------------------\n\n\n배경 지식\n\n\nLG IOT 플랫폼\n\n * LWM2M broker 등.\n * LG CNS 개발/관리.\n * 내부적으로 oneM2M 방식 이용(자사 서버와의 연동 또한).\n   * LG IoT 플랫폼과 연동하는 자사 서버(relay service) 환경\n     * HTTP/2 [https://ko.wikipedia.org/wiki/HTTP/2](1.1 호환)\n     * TLS version: 1.1\n   * 자사 서버에서 송신하여, LG IoT 플랫폼이 수신하는 모든 메시지는 https protocol 을 이용하도록 구현.\n   * LG IoT 플랫폼이 송신하여, 자사 서버가 수신하는 메시지는 이용하는 protocol(http/https) 에 상관없이 모두 수신\n     가능하도록 구현.\n\n\nN2M 플랫폼\n\n * 고양 스마트시티 플랫폼.\n * GIPA 운영.\n * oneM2M 방식 이용(자사 서버와의 연동).\n * https://iot.smartcitygoyang.kr [https://iot.smartcitygoyang.kr]\n\n\nNTELS 플랫폼\n\n * 부산 스마트시티 플랫폼.\n * BIPA 운영.\n * oneM2M 방식 이용(자사 서버와의 연동).\n * https://iot.k-smartcity.kr [https://iot.k-smartcity.kr]\n\n\nCCP\n\n\n개요\n\n * LGU+ NB-IoT 네트워크 이용.\n   * Huawei NB-IoT 모듈(LGU+ custom) 이용.\n * 고양시 실증사업 1차년도에 Vodafone 3g 네트워크 방식(cinterion 모듈) 및 ntels 플랫폼 이용토록 개발하여 설치.\n * 2차년도에 LGU+ LTE Cat.1 네트워크(LG 이노텍 모듈) 방식으로 교체 후 온갖 잡음 발생.\n   * 이노텍 모듈 문제, 자사 relay service 다운 문제.\n * 최후에 LGU+ NB-IoT 네트워크 방식으로 교체.\n   * 자사 relay service 다운 문제 잠깐 있었음.\n\n\n다운되면 통신 연동 시나리오에 영향주는 요소\n\n * LG IoT 플랫폼\n   * 자사 단말/서버는 LG IoT 플랫폼을 경유하여 통신.\n * 자사 Relay service, protocol(ccn-bin) server\n   * LG IoT 플랫폼 → 자사 Relay service 로 연결 후, protocol server 응답값을 반송.\n\n\n다운되어도 통신 연동 시나리오에 영향주지 않는 요소\n\n * n2m 플랫폼\n   * 응답값 반송 후, relay service 에서 n2m 플랫폼에 로그 적재.\n\n\nCCB\n\n\n개요\n\n * LGU+ LTE Cat.1 네트워크 이용.\n   * LG 이노텍 모듈 이용.\n * 고양시 실증사업 1차년도에 Vodafone 3g 네트워크 방식(cinterion 모듈) 및 ntels 플랫폼 이용토록 개발하여 설치.\n * 2차년도에 LGU+ LTE Cat.1 네트워크(LG 이노텍 모듈) 방식으로 교체.\n * 최후에 NB-IoT 방식으로 전환되지 않음. 은근슬쩍 넘어감.\n * 위 사유로 기존 방식 유지. 플랫폼 또한 ntels 플랫폼 이용 유지.\n * BIPA 내 database 이전 문제로 운영 중지된 상태 유지.\n\n\n다운되면 통신 연동 시나리오에 영향주는 요소\n\n * ntels 플랫폼\n   * 자사 단말/서버는 ntels 플랫폼을 경유하여 통신.\n * 자사 Relay service, protocol(ccn-bin) server\n   * ntels 플랫폼 → 자사 Relay service 로 연결 후, protocol(ccn-bin) server 응답값을 반송.\n\n\n다운되어도 통신 연동 시나리오에 영향주지 않는 요소\n\n * n2m 플랫폼\n   * 응답값 반송 후, relay service 에서 n2m 플랫폼에 로그 적재.\n\n\nCTK\n\n\n개요\n\n * Vodafone 3g 네트워크 이용.\n   * Quectel 모듈 이용.\n * 고양시 실증사업 1차년도에 Vodafone 3g 네트워크 방식(cinterion 모듈) 및 ntels 플랫폼 이용토록 개발.\n   * 프로토타입 개발만 진행하고, 양산 생산 및 설치는 진행하지 않음.\n * NB-IoT 방식으로 전환되지 않음.\n   * CTK 는 애초에 NB-IoT 이용하지 않아도 되도록 사업계획됨.\n * 2차년도 말에 n2m 플랫폼 개발 도중, n2m 플랫폼으로 이용 플랫폼 변경하여 개발.\n * 최후에 Quectel 모듈 이용토록 개발하여 양산 설치.\n   * 자사 relay service 및 protocol(ccn-tracker) server 다운 문제 각각 잠깐씩 있었음.\n\n\n다운되면 통신 연동 시나리오에 영향주는 요소\n\n * n2m 플랫폼\n   * 자사 단말/서버는 n2m 플랫폼을 경유하여 통신.\n * 자사 Relay service, protocol(ccn-tracker) server\n   * n2m 플랫폼 → 자사 Relay service 로 연결 후, protocol(ccn-tracker) server 응답값을 반송.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/131531699"
  },
  {
    "pageContent": "국가연구자번호 / 과학기술인등록번호(과학기술번호)\n\n사업팀에서 요청 받은 경우에만 발급하고 여기에 기록합니다.\n\n발급 → https://www.ntis.go.kr/hurims/hmreg/researcher/reg/checkRealNm.do\n[https://www.ntis.go.kr/hurims/hmreg/researcher/reg/checkRealNm.do]\n\n발급 → https://www.iris.go.kr/index.do [https://www.iris.go.kr/index.do]\n\n이름\n\n과학기술인등록번호\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n1111 8628\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n1162 4195\n\nVin\n[https://ecubelabs.atlassian.net/wiki/people/60176615b498230070273da0?ref=confluence]\n\n1272 5231\n\n한석원(Joel)\n[https://ecubelabs.atlassian.net/wiki/people/607cf1f12ad11c007278466d?ref=confluence]\n\n1285 3569\n\n윤보미(Windy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/60d0006adeecef006ad6d789?ref=confluence]\n\n1285 3766\n\n정찬엽(Ray) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/60d0006ba17463007078afb9?ref=confluence]\n\n1285 3770\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/489390102"
  },
  {
    "pageContent": "Workshop PTs\n\n\n\n * 2019 Summer Workshop\n   * Steve 개인 발표\n   * SW팀 발표\n * 2018 Winter Workshop\n   * SW팀 발표\n * 2018 Summer Workshop\n   * SW팀 발표\n\n\n\n--------------------------------------------------------------------------------\n\n\n2019 SUMMER WORKSHOP\n\n19.08.23\n\n\nSTEVE 개인 발표\n\nSteve_National_Team_Noti…\n[/wiki/spaces/SW/pages/200048974/Workshop+PTs?preview=%2F200048974%2F200114284%2FSteve_National_Team_Notice.pdf]\n\n\nSW팀 발표\n\n2019_Summer_Workshop_SW_…\n[/wiki/spaces/SW/pages/200048974/Workshop+PTs?preview=%2F200048974%2F200343645%2F2019_Summer_Workshop_SW_Team_190823.pdf]\n\n--------------------------------------------------------------------------------\n\n\n2018 WINTER WORKSHOP\n\n18.12.27 – 28\n\n\nSW팀 발표\n\n2018_Winter_Workshop_SW_…\n[/wiki/spaces/SW/pages/200048974/Workshop+PTs?preview=%2F200048974%2F199917828%2F2018_Winter_Workshop_SW_Team_181226.pdf]\n\n--------------------------------------------------------------------------------\n\n\n2018 SUMMER WORKSHOP\n\n18.07.29 – 30\n\n\nSW팀 발표\n\nEcubeLabs_SW_team_180728…\n[/wiki/spaces/SW/pages/200048974/Workshop+PTs?preview=%2F200048974%2F200114290%2FEcubeLabs_SW_team_180728.pptx]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/200048974"
  },
  {
    "pageContent": "AI/ML/DL\n * Intro [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3054567446/Intro]\n * 환경 설정 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055517725]\n * Image Classification\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055845389/Image+Classification]\n * MLOps [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055255581/MLOps]\n * OCR [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055484974/OCR]\n * Paper Check - Open Source\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055681601/Paper+Check+-+Open+Source]\n * LLM2 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055583262/LLM2]\n * Closed LLM vs. Open LLM\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3075833924/Closed+LLM+vs.+Open+LLM]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055353873"
  },
  {
    "pageContent": "칭찬합시다\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 DM으로 누군가를 칭찬하는 메세지를 몰래 보내면 됩니다.\n\n찰리가 보고 판단해서 칭찬할 일이 맞다고 생각되면 포상을 내려줍니다.\n\n예시)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2689990689/image-20230413-084817.png?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2689990689"
  },
  {
    "pageContent": "팀장이 해야 하는 일\n * Team Culture 수립\n * 팀원 R & R 관리\n * 팀원 1 on 1 진행\n * 신입사원 교육\n * 입/퇴사자가 발생하는 경우\n * 제품개발회의_240 참석\n * sw@ecubelabs.com 스팸 의심 메일 관리\n * 회식비 처리\n * 구독 영수증 처리\n * 동료 평가 시 팀장 코멘트 작성\n * 정부 과제 지원서 작성 보조\n * 메일 그룹 관리\n * 법카 영수증 처리 사이트 비밀번호 관리\n * 국내 사이트 휴면회원 전환 방지\n * 이사 준비\n\n\nTEAM CULTURE [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173801724] 수립\n\n\n팀원 R & R 관리\n\n\n팀원 1 ON 1 진행\n\n\n신입사원 교육\n\n * 인터뷰 복기\n\n * [OJT] TypeScript\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224002882/OJT+TypeScript]\n\n * [OJT] 프로그램, 프로세스, 쓰레드\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2021359694/OJT]\n\n * [OJT] Network\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1956446242/OJT+Network]\n\n * [OJT] Cryptography & Hash\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1901133975/OJT+Cryptography+Hash]\n\n * [OJT] SSH (Secured Shell)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1004732536/OJT+SSH+Secured+Shell]\n\n * [OJT] Git\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611139/OJT+Git]\n\n * SW-7591 [https://ecubelabs.atlassian.net/browse/SW-7591] - 이슈 세부사항 가져오는 중...\n   상태\n\n\n입/퇴사자가 발생하는 경우\n\n * 비품 관리\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/401801226/iMac+MacBook]\n   \n   * 맥북 구매 요청 or 기존 맥북 공장 초기화\n\n\n제품개발회의_240 참석\n\n * Roadmap\n   [https://ecubelabs.atlassian.net/jira/software/projects/RND/boards/83/roadmap]\n   진행상황 공유\n\n * 격주 월요일\n\n\nSW@ECUBELABS.COM 스팸 의심 메일 관리\n\n * 다음과 같은 메일이 올때가 있다. 이 메일은 sw@ecubelabs.com 의 관리자만 받는 메일이다.\n\n * [https://ecubelabs.atlassian.net/wiki/download/attachments/2305359955/image-20210201-014246.png?api=v2]\n   \n   https://groups.google.com/a/ecubelabs.com/group/sw/pendmsg\n   [https://groups.google.com/a/ecubelabs.com/group/sw/pendmsg] 에 들어가보면 pending\n   메일들이 보인다.\n\n * [https://ecubelabs.atlassian.net/wiki/download/attachments/2305359955/image-20210201-014355.png?api=v2]\n   \n   이 메일들이 스팸인지 아닌지 판단해서 (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n   혹은 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   를 눌러주면 된다. (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n   를 누르면 스팸이 아닌 것으로 간주해 sw@ecubelabs.com 에 포함된 구성원들이 모두 해당 메일을 받게 되고 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   를 누르면 스팸으로 간주해 구성원들에게 메일이 발송되지 않는다.\n\n\n회식비 처리\n\n * 기본적으로 법인카드 / 개인결제 사용내역 제출\n   [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/2046754838]와 동일하다.\n\n * 예산은 1인당 3만원.\n\n\n구독 영수증 처리\n\n * 매달/매년 자동 결제 되는 구독 영수증 처리\n\n * 기본적으로 법인카드 / 개인결제 사용내역 제출\n   [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/2046754838]와 동일하다.\n\n * Monthly\n   \n   * 3927 4907 (SW 카드)\n     \n     * 3927 은 06/23 에 만료\n     \n     * 4907 은 06/28 에 만료 예정\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/497221968/image-20210924-043816.png?api=v2]\n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/497221968/image-20210927-021911.png?api=v2]\n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/497221968/image-20210927-022030.png?api=v2]\n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2305359955/image-20220206-093238.png?api=v2]\n     \n     * Twilio\n   \n   * Mapbox → 3919 (Haulla 카드)\n\n * Yearly\n   \n   * Sketch(04/23)\n     \n     * PD 팀에서 관리\n\n * 애플 개발자 계정 결제\n   \n   * https://ecubelabs.atlassian.net/wiki/spaces/MW/pages/812711965\n     [https://ecubelabs.atlassian.net/wiki/spaces/MW/pages/812711965]\n\n * GCP 결제 비용 처리\n   \n   * GCP Console [https://console.cloud.google.com/] > 결제 > 거래 페이지에서 유일하게 카드 번호가\n     나온 파일을 다운받을수 있다.\n\n\n동료 평가 시 팀장 코멘트 작성\n\n * 팀장 코멘트는 션이 보는게 아니고 동료들에게 전달 되는 코멘트이다. 익명 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n * 팀장 코멘트 외에 다른 항목도 물론 작성해야 한다.\n\n\n정부 과제 지원서 작성 보조\n\n * 기술 관련 부분 작성 보조\n\n\n메일 그룹 [https://groups.google.com/a/ecubelabs.com/forum/#!myforums] 관리\n\n * 긴급한 경우에만. 평소에는 Management\n   [https://ecubelabs.atlassian.net/projects/MAN/board] 를 통해 김은혜(Ellie)\n   [https://ecubelabs.atlassian.net/wiki/people/6316b6b99794410874c6f9a8?ref=confluence]\n   에게 요청하면 된다.\n\n\n법카 영수증 처리 사이트 비밀번호 관리\n\n\n국내 사이트 휴면회원 전환 방지\n\n * 휴면회원 전환 예정 메일이 오면 로그인 해주면 된다.\n   \n   * Cafe24 [https://hosting.cafe24.com/]\n   \n   * Dotname [https://www.dotname.co.kr/]\n\n\n이사 준비\n\n * SW-10143 [https://ecubelabs.atlassian.net/browse/SW-10143] - 이슈 세부사항 가져오는\n   중... 상태\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2305359955"
  },
  {
    "pageContent": "Onboarding course\n\n\nATTITUDE\n\n * 질문\n   \n   * https://news.hada.io/topic?id=5253 [https://news.hada.io/topic?id=5253]\n   \n   * https://ahnheejong.name/articles/the-xy-problem/\n     [https://ahnheejong.name/articles/the-xy-problem/]\n\n * Simple is best\n   \n   * https://news.hada.io/topic?id=10916 [https://news.hada.io/topic?id=10916]\n   \n   * https://news.hada.io/topic?id=11825 [https://news.hada.io/topic?id=11825]\n\n * [OJT] 추상화\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2942533701/OJT]\n\n * [OJT] 최적화\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2409758739/OJT]\n\n\n기본 지식\n\n * 이큐브랩 제품, 특징 소개\n   \n   * HW & SW\n     \n     * CCB, CCB2, CFX, CTK\n     \n     * CCN, CCNx, Haulla (with Real CFX-CAM, CCN)\n       \n       * 소프트웨어 [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/119406640]\n   \n   * Entrypoint (product-router)\n     [https://ecubelabs.atlassian.net/wiki/spaces/IOT/pages/877920470/Entrypoint+product-router]\n   \n   * [OJT] 하드웨어 통신 기술 및 프로토콜\n     [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1535311884/OJT]\n\n * Node.js & JavaScript\n   \n   * [OJT] JavaScript\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/260046948/OJT+JavaScript]\n\n * Git\n   \n   * Branch strategy\n     \n     * Git branch & merge 가이드 (Web)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51216589/Git+branch+merge+Web]\n   \n   * Commit often, single-purpose commit\n     \n     * https://deepsource.com/blog/git-best-practices\n       [https://deepsource.com/blog/git-best-practices]\n   \n   * Cherry pick\n   \n   * 알아보기 쉬운 commit message 작성\n   \n   * Do not use Force push\n     \n     * [필독] Git - Force push\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/252018749/Git+-+Force+push]\n   \n   * Conflict resolve hands-on\n     \n     * https://github.com/Ecube-Labs/playground/tree/conflict-hands-on\n       [https://github.com/Ecube-Labs/playground/tree/conflict-hands-on]\n       \n       * git checkout -b conflict-hands-on-<nickname>\n       \n       * git fetch\n       \n       * cd server\n       \n       * npm install express@latest\n       \n       * git add , git commit\n       \n       * git merge origin/conflict-hands-on\n       \n       * resolve conflict\n         [OJT][Git] package-lock.json/yarn.lock 충돌 해결\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2086961308/OJT+Git+package-lock.json+yarn.lock]\n\n * TypeScript\n   \n   * [OJT] TypeScript\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224002882/OJT+TypeScript]\n   \n   * AST\n     \n     * [OJT] AST\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2342289431/OJT+AST]\n     \n     * ESLint\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2103869494/ESLint]\n       , Prettier\n     \n     * https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API\n       [https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API]\n     \n     * https://github.com/microsoft/TypeScript/wiki/Using-the-Language-Service-API\n       [https://github.com/microsoft/TypeScript/wiki/Using-the-Language-Service-API]\n     \n     * [OJT][리팩토링] jscodeshift\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2752446501/OJT+jscodeshift]\n\n * React, JSX\n   \n   * [OJT][FE] React\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611155/OJT+FE+React]\n   \n   * [React] 학습\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343993353/React]\n\n * 부가 업무 환경 이해\n   \n   * Headless\n     \n     * Browser\n       \n       * https://github.com/dhamaniasad/HeadlessBrowsers\n         [https://github.com/dhamaniasad/HeadlessBrowsers]\n     \n     * CMS\n       \n       * https://cms-stage.ecubelabs.xyz/admin/\n         [https://cms-stage.ecubelabs.xyz/admin/]\n       \n       * 2023-01-06\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2614198300/2023-01-06]\n         \n         * strapi\n         \n         * payload [https://payloadcms.com/]\n       \n       * [OJT] Server-driven UI\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2417000484/OJT+Server-driven+UI]\n     \n     * Component\n       \n       * https://tanstack.com/table/latest [https://tanstack.com/table/latest]\n       \n       * https://tanstack.com/virtual/latest\n         [https://tanstack.com/virtual/latest]\n     \n     * 응용 서비스/프로그램\n       \n       * Testing tools [https://www.cypress.io/], Scraping, Crawler(Bot\n         [https://developers.google.com/search/docs/crawling-indexing/googlebot?hl=ko]),\n         …\n   \n   * AWS\n     \n     * 웹 개발자 환경 설정\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323]: gsts,\n       awscli, aws-iam-authenticator, kubectl\n       \n       * 관리 툴 [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/52724014]\n       \n       * aws s3 ls --profile ecubelabs-aws-developer\n         \n         * default profile 인 경우 aws s3 ls\n       \n       * kubectl get pods --namespace ccn\n     \n     * [AWS] 콘솔 로그인 방법\n       [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2546401353/AWS]\n     \n     * 2022-09-02\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2532540425/2022-09-02]\n     \n     * Spot instance, Chaos engineering\n   \n   * Docker\n     \n     * [OJT] Docker\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/474318085/OJT+Docker]\n     \n     * Docker compose\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1912930468/Docker+compose]:\n       CCN/ERP 통합 개발 환경 구성\n   \n   * K8s (=Kubernetes*)\n     *numeronym\n     \n     * Summary\n     \n     * k8s in Ecube Labs\n   \n   * CI/CD (with K8s)\n     \n     * Jenkins\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1989279760/OJT+O+Jenkins]:\n       빌드 확인 및 재배포\n       \n       * BlueOcean\n       \n       * 2023-04-07\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2677080072/2023-04-07]\n     \n     * GitHub Actions\n     \n     * first push event bug\n       \n       * https://issues.jenkins.io/browse/JENKINS-41377?focusedCommentId=380223&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-380223\n         [https://issues.jenkins.io/browse/JENKINS-41377?focusedCommentId=380223&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-380223]\n   \n   * Multi Tenant\n     \n     * https://learn.microsoft.com/en-us/azure/azure-sql/database/saas-tenancy-app-design-patterns?view=azuresql\n       [https://learn.microsoft.com/en-us/azure/azure-sql/database/saas-tenancy-app-design-patterns?view=azuresql]\n       \n       * Atlassian\n       \n       * Slack\n       \n       * … Haulla\n   \n   * Kafka\n     \n     * EcubeLabs Notification Service\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864819/EcubeLabs+Notification+Service]\n     \n     * Kafka Webhook Producer\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868740182/Kafka+Webhook+Producer]\n   \n   * Debezium\n     \n     * EcubeLabs Notification Service\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864819/EcubeLabs+Notification+Service]\n   \n   * API Docs\n     \n     * https://docs-stage.ecubelabs.xyz/ [https://docs-stage.ecubelabs.xyz/]\n     \n     * API Docs (redocs)\n       [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2470182915/API+Docs+redocs]\n     \n     * Open API Spec 추출, 반영 원리\n       \n       * https://github.com/Ecube-Labs/koa-x-router\n         [https://github.com/Ecube-Labs/koa-x-router]\n   \n   * Logging & Monitoring\n     \n     * Kibana\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2017689634/OJT+O+Log+Visualizer+Kibana]:\n       로그 확인 및 디버깅\n       \n       * Elastic Cloud on Kubernetes (ECK)\n         [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293/Elastic+Cloud+on+Kubernetes+ECK]\n         \n         * https://kibana-stage.ecubelabs.xyz/\n           [https://kibana-stage.ecubelabs.xyz/]\n           \n           * 비밀번호재설정하세요\n       \n       * distribute tracing\n         \n         * 분산 추적\n           [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1868169440]\n         \n         * product-router → ccn-bin-server\n         \n         * erp-api → ccn-bin-server → storage-api\n           https://erp.cleancitynetworks.com/monitor/16749\n           [https://erp.cleancitynetworks.com/monitor/16749]\n           \n           [https://ecubelabs.atlassian.net/wiki/download/attachments/2461073454/image-20230803-052824.png?api=v2]\n     \n     * Grafana\n   \n   * Domain event visualizer\n     \n     * https://haulla-domain-stage.ecubelabs.xyz/events\n       [https://haulla-domain-stage.ecubelabs.xyz/events]\n     \n     * 2022-10-28\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2565570578/2022-10-28]\n   \n   * DB restore day(?)\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2461073454/image-20230413-051819.png?api=v2]\n   \n   * ICU Format\n     \n     * ICU Message Syntax\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142/ICU+Message+Syntax]\n     \n     * 1. Format\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159809537/1.+Format]\n     \n     * Pseudolocalization\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1702428891/Pseudolocalization]\n   \n   * DB Client\n     \n     * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323#DB-client\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323#DB-client]\n       \n       * MySQL Workbench\n       \n       * Sequel Ace\n     \n     * 실습\n       \n       * docker run --platform linux/x86_64 --rm -p 3306:3306 --name test-db -e\n         MYSQL_ROOT_PASSWORD=1234 mysql:5.7 mysqld\n         --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n\n제품 개발 지식\n\n * CCN 개발 환경\n   \n   * ERP: 유심 업로드, 제품 생성, CCN 업로드\n   \n   * CCN: CCN에서 업로드 된 제품 확인\n   \n   * IoT Simulator: 통신 결과 ERP, CCN 에서 확인\n   \n   * Volume: 계산 로직\n     \n     * [CC] 특징\n       [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1803845650/CC]\n     \n     * USW / ToF\n       [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/237207557/USW+ToF]\n     \n     * [CB][도메인 모델] Volume (적재량)\n       [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/827818097/CB+Volume]\n   \n   * CCNx\n\n * Testing\n   \n   * 공통\n     \n     * 테스트 작성 원칙\n     \n     * [F] 테스트\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/246317252/F]\n     \n     * https://docs.cypress.io/guides/references/best-practices\n       [https://docs.cypress.io/guides/references/best-practices]\n   \n   * testing-library\n     \n     * https://testing-playground.com/ [https://testing-playground.com/]\n   \n   * Jest\n     \n     * jest로 유닛 테스트 작성\n     \n     * jest mocking 방법\n   \n   * Stroybook\n     \n     * 띄우는 방법\n     \n     * 스토리 작성 방법\n       \n       * [F][스토리북] 스토리 작성 규칙\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964/F]\n     \n     * UI diff 확인 방법\n       \n       * Chromatic\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2093940774/Chromatic]\n     \n     * storybook로 상호작용 테스트 작성\n       \n       * Interaction Testing\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065/Interaction+Testing]\n     \n     * storybook mocking 방법\n       \n       * [OJT][SW] MSW (Mock service worker)\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284388447/OJT+SW+MSW+Mock+service+worker]\n       \n       * service worker? [OJT] Service worker\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284486676/OJT+Service+worker]\n   \n   * Cypress\n     \n     * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/246317252/F#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-(Integration-test)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/246317252/F#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-(Integration-test)]\n     \n     * Cypress로 통합 테스트 작성\n   \n   * 기타 유의사항\n     \n     * Portals API [https://ko.reactjs.org/docs/portals.html]\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2461073454"
  },
  {
    "pageContent": "기능 추가\n * 1. 에픽 생성\n * 2. Component 생성\n * 3. Epic 에 component 연결\n\n\n1. 에픽 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2590867579/image-20221206-033700.png?api=v2]\n\n\n2. COMPONENT 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2590867579/image-20221206-033804.png?api=v2]\n\n * Component name 은 epic summary 와 같게한다.\n\n\n3. EPIC 에 COMPONENT 연결\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2590867579/image-20221206-034039.png?api=v2]\n\n * 아틀라시안에서 특별히 지원하는 방법이 없으므로 component link 를 epic 의 web link 에 추가\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2590867579"
  },
  {
    "pageContent": "Product OT\n\nCCN, CCNx\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n\n\nHaulla\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/9437245"
  },
  {
    "pageContent": "개발자 OJT 자료\n\n이큐브랩에서 개발자로 일하기 위한 기본 지식입니다.\n\n실무에 투입되기 전에 모두 숙지해주세요.\n\n[/wiki/download/attachments/104300575/reference_books.drawio.png?api=v2]\n\n * History of the Web: Part 1\n   [https://www.matthewgerstman.com/tech/history-of-the-web/]\n\n * [OJT] 교양\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1144259719/OJT]\n   * [OJT] 프로그램, 프로세스, 쓰레드\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2021359694/OJT]\n   * [OJT] Network\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1956446242/OJT+Network]\n     * [OJT][Network] Security\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048898561/OJT+Network+Security]\n       * SSL/TLS Certificate\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048636456/SSL+TLS+Certificate]\n       * CA (Certification Authority)\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048702079/CA+Certification+Authority]\n   * [OJT] OSI 7 Layers\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2338258945/OJT+OSI+7+Layers]\n   * [OJT] Cryptography & Hash\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1901133975/OJT+Cryptography+Hash]\n   * [OJT] SSH (Secured Shell)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1004732536/OJT+SSH+Secured+Shell]\n   * [OJT] 리팩토링\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/687570947/OJT]\n     * [OJT][리팩토링] jscodeshift\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2752446501/OJT+jscodeshift]\n   * [OJT] Call by value, call by reference\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/726499383/OJT+Call+by+value+call+by+reference]\n   * [OJT] 클린 코드\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/936902709/OJT]\n   * [OJT] AST\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2342289431/OJT+AST]\n   * [OJT] POSIX\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2844655931/OJT+POSIX]\n   * SSO [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/478937524/SSO]\n     * SAML 기반 SSO 구현\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/485392558/SAML+SSO]\n     * LDAP란?\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/489325153/LDAP]\n   * 개발자 환경 설정 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40108046]\n     * 웹 개발자 환경 설정\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323]\n     * 앱 개발자 환경 설정\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445]\n       * Mapbox 환경 설정\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1884160028/Mapbox]\n * [OJT] JavaScript\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/260046948/OJT+JavaScript]\n   * 프로토타입(Prototype)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224067705/Prototype]\n   * [OJT][JS] Arrow function & this scope\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/214237348/OJT+JS+Arrow+function+this+scope]\n   * [OJT][JS] 부동 소수점 연산\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/253788468/OJT+JS]\n   * [OJT][JS] Map\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/625443370/OJT+JS+Map]\n   * [OJT][JS] Object destructuring and Operand selector operator\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/684621849/OJT+JS+Object+destructuring+and+Operand+selector+operator]\n   * [OJT][JS] const 는 불변인가? is const immutable?\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/723222605/OJT+JS+const+is+const+immutable]\n   * [OJT][JS] Short-circuit evaluation\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1095008423/OJT+JS+Short-circuit+evaluation]\n   * [OJT][JS] Iterable\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1969422512/OJT+JS+Iterable]\n   * [OJT][JS] Hoisting\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2235465731/OJT+JS+Hoisting]\n   * [OJT][JS] Set.has() vs Array.includes()?\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2303328303/OJT+JS+Set.has+vs+Array.includes]\n   * [OJT] 신뢰성, 가독성 향상\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2345435137/OJT]\n   * [OJT][JS] JSON.stringify/parse\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2351792137/OJT+JS+JSON.stringify+parse]\n   * [OJT][JS] valueOf\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2360115201/OJT+JS+valueOf]\n   * [OJT][JS] 정렬\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134578262/OJT+JS]\n   * [OJT][JS] JSON-S\bchema\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2428108847/OJT+JS+JSON-S+chema]\n   * [OJT][JS] Syntax sugar\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2579595413/OJT+JS+Syntax+sugar]\n * [OJT] TypeScript\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224002882/OJT+TypeScript]\n   * [TS] 1. Optional Chaining\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/251854888/TS+1.+Optional+Chaining]\n   * [TS] 2. Nullish Coalescing\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/251888072/TS+2.+Nullish+Coalescing]\n   * [TS] 4. Type-Only & Inline Type Imports and Export\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1299447979/TS+4.+Type-Only+Inline+Type+Imports+and+Export]\n   * [TS] 5. @ts-expect-error\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1299480840/TS+5.+ts-expect-error]\n   * [TS]type-challenge\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2855108619/TS+type-challenge]\n   * [TS] 학습\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2341568677/TS]\n     * [TS][학습] Intro\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2344091654/TS+Intro]\n * [OJT] Test\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2428043283/OJT+Test]\n   * [JEST] 0. 기초 - Concept & global method\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001201/JEST+0.+-+Concept+global+method]\n   * [JEST] 1. Expect\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226427448/JEST+1.+Expect]\n * [OJT] Git\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611139/OJT+Git]\n   * [필독] Git - Force push\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/252018749/Git+-+Force+push]\n   * GitHub advanced tips\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1799913483/GitHub+advanced+tips]\n   * [OJT][Git] package-lock.json/yarn.lock 충돌 해결\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2086961308/OJT+Git+package-lock.json+yarn.lock]\n * [OJT] Functional Programming\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134348925/OJT+Functional+Programming]\n   * [FP] 1. 명령형 프로그래밍 vs 선언적 프로그래밍\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/216006674/FP+1.+vs]\n   * [FP] 2. 객체를 다루는 법 및 고차 함수\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/215122371/FP+2.]\n   * [FP] 3. 로대시JS\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217514093/FP+3.+JS]\n   * [FP] 4. 선언적 코드와 느긋한 함수 체인\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217383049/FP+4.]\n   * [FP] 5. Lazy function evaluation\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217710738/FP+5.+Lazy+function+evaluation]\n   * [FP] 6. null 참조는 10억짜리 실수다\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217579738/FP+6.+null+10]\n * [OJT] RxJS\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/166723659/OJT+RxJS]\n   * [RxJS] 0. 마블 다이어그램\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/214237447/RxJS+0.]\n   * [RxJS] 1. 기본 개념\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219513561/RxJS+1.]\n   * [RxJS] 2. map 파헤치기\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227639522/RxJS+2.+map]\n   * [RxJS] 3. lift 함수\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/233799749/RxJS+3.+lift]\n * [OJT] Front-end\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/411730218/OJT+Front-end]\n   * [OJT] HTML\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2309784613/OJT+HTML]\n   * [OJT][FE] Flexbox Layout\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1346043934/OJT+FE+Flexbox+Layout]\n   * [OJT] CSS\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1529511981/OJT+CSS]\n   * [OJT][FE] SPA\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134578258/OJT+FE+SPA]\n   * [OJT] Server-driven UI\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2417000484/OJT+Server-driven+UI]\n   * [OJT] Webpack\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1759739925/OJT+Webpack]\n   * [OJT][FE] React\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611155/OJT+FE+React]\n     * [OJT][FE] JSX (React/Emotion)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2320171030/OJT+FE+JSX+React+Emotion]\n     * [OJT][FE] 상태 설계\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118784115/OJT+FE]\n     * [OJT][FE] 리스트와 키\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/248381637/OJT+FE]\n     * [React Hooks] 1. useMemo\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001024/React+Hooks+1.+useMemo]\n     * [React] 학습\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343993353/React]\n       * [React][학습] Intro\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343796747/React+Intro]\n       * [React][학습] Basics\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2351988751/React+Basics]\n     * [F] Controlled/Uncontrolled Component\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1620443151/F+Controlled+Uncontrolled+Component]\n   * [OJT][FE] Redux\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217481786/OJT+FE+Redux]\n     * [OJT][FE][Redux] 1. Reducer & Store\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219971672/OJT+FE+Redux+1.+Reducer+Store]\n     * [OJT][FE][Redux] 2. 몇 가지 개념들\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219513482/OJT+FE+Redux+2.]\n   * [OJT][FE] Web Storage\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241827911/OJT+FE+Web+Storage]\n   * [OJT][FE] CORS\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1116176519/OJT+FE+CORS]\n   * [OJT][FE] 웹서버\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/126484485/OJT+FE]\n   * [OJT][FE] Publishing\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2033254606/OJT+FE+Publishing]\n   * [OJT][FE] favicon\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1744076846/OJT+FE+favicon]\n   * [OJT][FE] Open Graph protocol\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2173763585/OJT+FE+Open+Graph+protocol]\n   * [OJT][FE] Virtual DOM\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2315878434/OJT+FE+Virtual+DOM]\n   * [OJT][FE] A11y\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343895057/OJT+FE+A11y]\n     * ARIA\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2457862177/ARIA]\n * [OJB] Back-end\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/411861401/OJB+Back-end]\n   * [OJT] UML\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/639501278/OJT+UML]\n   * [OJT] DDD (Domain-driven design)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882844/OJT+DDD+Domain-driven+design]\n     * DDD in JS\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/137855128/DDD+in+JS]\n       * DDD?\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/128188426/DDD]\n     * DDD in TS\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174489785/DDD+in+TS]\n     * @libs/ddd\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243269997/libs+ddd]\n       * 1. ddd-context\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270004/1.+ddd-context]\n       * 2. ddd-model\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243695689/2.+ddd-model]\n       * 2. ddd-service\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243696547/2.+ddd-service]\n       * 3. ddd-repository\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270153/3.+ddd-repository]\n     * 팩토리 메서드를 이용한 에그리게이트 생성\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/738558231]\n     * Optimistic update\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1269235768/Optimistic+update]\n     * [OJT][DDD] DomainEvent\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1859584011/OJT+DDD+DomainEvent]\n       * [DDD] eventId\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635825164/DDD+eventId]\n     * ddd components\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1859420236/ddd+components]\n     * Specification (명세, Spec)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2512879622/Specification+Spec]\n   * [OJT] Server Architecture\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2070708225/OJT+Server+Architecture]\n   * [OJT] Functional Architecture\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2337996801/OJT+Functional+Architecture]\n   * [OJT] libuv\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2334195748/OJT+libuv]\n   * [OJT][Node.js] Error Handling in Koa\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/710738065/OJT+Node.js+Error+Handling+in+Koa]\n   * [OJT] Security\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611180/OJT+Security]\n   * [OJT] RDB\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/286884205/OJT+RDB]\n     * [OJT][RDB] shared lock & exclusive lock\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/286851441/OJT+RDB+shared+lock+exclusive+lock]\n     * [OJT][RDB] DB Transaction isolation Level & Lock\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/619839493/OJT+RDB+DB+Transaction+isolation+Level+Lock]\n     * [OJT][RDB] N+1 Query Problem\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/652968156/OJT+RDB+N+1+Query+Problem]\n     * [OJT][RDB] UUIDs are Popular, but Bad for Performance\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2106228829/OJT+RDB+UUIDs+are+Popular+but+Bad+for+Performance]\n     * [OJT][RDB] varchar\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2297659412/OJT+RDB+varchar]\n     * [OJT][RDB] LexoRank\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2862481952/OJT+RDB+LexoRank]\n   * [OJT] Elasticsearch\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2576384036/OJT+Elasticsearch]\n     * Elasticsearch stage 접근 방법(port forwarding)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2576711715/Elasticsearch+stage+port+forwarding]\n     * [elasticsearch] create index & bulk data\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2581200902/elasticsearch+create+index+bulk+data]\n     * [elasticsearch] analyzer 를 이용해 tokens 확인하기\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2597683226/elasticsearch+analyzer+tokens]\n     * [elasticsearch] index mapping\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2597355647/elasticsearch+index+mapping]\n     * [elasticsearch] text 타입과 keyword 타입\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2818801683/elasticsearch+text+keyword]\n   * [OJT] NoSQL\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2219966469/OJT+NoSQL]\n     * [OJT] Redis\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2522578961/OJT+Redis]\n   * [OJT] REST API\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1390084114/OJT+REST+API]\n     * [OJT] REST의 멱등성(Idempotence in REST)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173670455/OJT+REST+Idempotence+in+REST]\n   * [OJT] GraphQL\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2762932249/OJT+GraphQL]\n   * [OJT] Kafka\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3022356548/OJT+Kafka]\n     * [OJT][Kafka] Consumer\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2665644088/OJT+Kafka+Consumer]\n     * [OJT][Kafka] Topic, Partition\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2651193351/OJT+Kafka+Topic+Partition]\n * [OJT] Docker\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/474318085/OJT+Docker]\n   * [OJT] Localstack\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2517827598/OJT+Localstack]\n * [OJT] Operation\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1989771303/OJT+Operation]\n   * [OJT][O] 배포 및 파이프라인 (Jenkins)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1989279760/OJT+O+Jenkins]\n   * [OJT][O] Log Visualizer (Kibana)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2017689634/OJT+O+Log+Visualizer+Kibana]\n * [OJT] Why?\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2021654610/OJT+Why]\n * [OJT] Modern Software Architecture\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2093776903/OJT+Modern+Software+Architecture]\n   * [OJT] Webhook, Polling\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2919563269/OJT+Webhook+Polling]\n * [OJT] Service worker\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284486676/OJT+Service+worker]\n   * [OJT][SW] MSW (Mock service worker)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284388447/OJT+SW+MSW+Mock+service+worker]\n * [OJT] 축약 표기법\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2301001786/OJT]\n * [OJT] 추상화\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2942533701/OJT]\n * [OJT] 최적화\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2409758739/OJT]\n * [OJT] 신입 사원 과제\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1313079331/OJT]\n * [OJT] Prometheus\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2883715353/OJT+Prometheus]\n   * [PROM] PromQL\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2883715365/PROM+PromQL]\n * Ecube Labs' Solutions Architecture\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/52789259/Ecube+Labs+Solutions+Architecture]\n   * Product Architecture\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2870575484/Product+Architecture]\n   * [deprecated] 제품 가이드\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120881706/deprecated]\n     * CCB [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120816170/CCB]\n     * CCP [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783499/CCP]\n     * CFX [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120816174/CFX]\n     * CCL [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120947350/CCL]\n     * CTK [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783524/CTK]\n     * CCN [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783480/CCN]\n * Go lang\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3057418241/Go+lang]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/104300575"
  },
  {
    "pageContent": "개발 프로세스\n\n모든 업무는 지라 이슈를 할당 받은 후(혹인 본인이 이슈를 생성해서 스스로 할당한 후) 진행 한다.\n\n지라 이슈가 없는데 임의로 업무를 진행하면 안된다.\n\n\n\n * 이슈 확인\n * 분석 및 설계\n * 일정 산출\n * 개발\n * 코드 리뷰\n * 배포\n * 우선순위\n\n\n이슈 확인\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226001652/image2020-3-26_10-29-22.png?api=v2]\n\n이슈를 확인하면 우선 백로그의 상태를 SELECTED DEVELOPMENT 로 변경한다.\n\n(션 → 찰리에게 이슈를 준 경우, 찰리가 백로그의 상태를 변경해야 션이 찰리가 이슈를 확인했는지 안했는지 인지할 수 있음. 찰리가 이슈를\n확인하고도 상태를 바꾸지 않으면 션이 메신저로 찰리에게 이슈를 확인했는지 물어봐야 함)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226001652/image2020-3-26_10-30-32.png?api=v2]\n\n\n분석 및 설계\n\n이 부분은 어떻게 문서로 남겨야 할지 모르겠다.\n\n해야할 일이 생기면 어떻게 개발전에 어떻게 개발해야 할지 깊은 고민이 필요하다.\n\n일단 코딩부터 하는 것은 미래의 나를 괴롭히는 일이다.\n\n\n일정 산출\n\nDue date 란에 언제 이슈가 언제쯤 완료될 예정인지 입력한다.\n\n\n개발\n\n백로그의 상태를 IN PROGRESS 로 변경한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226001652/image2020-3-26_10-36-47.png?api=v2]\n\n그리고 git branch 를 생성하고 개발을 시작하면 된다.\n\n * git branch 의 prefix 로 지라 이슈 번호를 사용한다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/226001652/image2020-3-26_10-40-31.png?api=v2]\n   \n   * AWS-189 [https://ecubelabs.atlassian.net/browse/AWS-189] 가 지라 이슈 번호\n\n * branch 생성 전략은 프로젝트마다 다르므로 아래의 가이드를 참고한다.\n   \n   * 웹, API → Git branch & merge 가이드 (Web)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51216589/Git+branch+merge+Web]\n   \n   * 앱 → Git branch & merge 가이드 (Mobile)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221020169/Git+branch+merge+Mobile]\n\n\n코드 리뷰\n\n백로그의 상태를 REVIEW 로 변경한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226001652/image2020-3-26_10-42-42.png?api=v2]\n\n코드 리뷰 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774] 를 참고해서\n코드 리뷰를 진행한다.\n\n\n배포\n\n코드 리뷰가 완료되면(=main/master branch 에 머지 되면) 자동으로 배포 된다. 단, 테스트 환경의 경우 develop 브랜치에\n본인이 직접 머지하면 테스트 환경에 자동으로 배포가 된다.\n\n배포 상태는 슬랙 또는 젠킨스에서 확인하면 된다.\n\n * Slack 의 #build-status 채널\n\n * 젠킨스 (prod) [https://jenkins.ecubelabs.xyz/]\n\n * 젠킨스 (stage) [https://jenkins-stage.ecubelabs.xyz/]\n\n코드 리뷰 완료 후 백로그의 상태를 DONE 으로 변경한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226001652/image2020-3-26_10-45-36.png?api=v2]\n\n\n우선순위\n\n 1. High Priority\n\n 2. FIFO\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001652"
  },
  {
    "pageContent": "개발 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40271993"
  },
  {
    "pageContent": "근태 관리 가이드\n\n출퇴근 시 커먼원티드스페이스에 잘 등록해서 누락이나 사후 변경 요청을 하는 일이 없도록 한다.\n\n2021. 7. 1.부터 근태 관리 시스템이 변경될 예정입니다 (웃음)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/smile.png]\n\n기존에는 지문 인식을 통해 출퇴근 관리를 시행해왔는데요, 앞으로는 커먼스페이스 [https://commonspace.ai/]라는 시스템을 통해\n전사 근태를 관리합니다.\n\n왜 갑자기 시스템이 변경되는지, 이것(?)이 과연 무엇인지 궁금증을 가질 분들이 계실 것이라 생각되어 만들게 된 커먼스페이스\n[https://commonspace.ai/] 페이지 입니다 (파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f646-200d-2640-fe0f.png]\n\n\n\n2021. 10. 4. 커먼스페이스 → 원티드스페이스로 명칭 바뀌었습니다.\n\n--------------------------------------------------------------------------------\n\n * 간단한 소개\n   \n   * GPS & WIFI 기반 출퇴근 관리 통합 솔루션입니다.\n\n * 도입의 이유\n   \n   * 근로 시간 체크 - 52시간 근무제 도입\n   \n   * 기존 관리 체계의 단점 상쇄를 위해 (단점 : 관리 어려움…힘들어요..)\n     \n     * 매번 많은 양의 데이터 정리 (리소스 낭비)\n     \n     * 출퇴근 안 찍는 분들, 출퇴근 누락 시트 작성 활성화 X\n     \n     * 실시간 체크 어려움(기존 : 당일 기록 확인 못하는 시스템)\n     \n     * 지문 인식기와 외근, 휴가 연동 X ⇒ 체크 어려움\n     \n     * 지각 체크 어려움(늦게 오시고 일찍 들어가시는 케이스가(파란별)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f602.png]\n       )\n   \n   * 자신의 일/주/월 별 근로 시간을 직접 확인할 수 있어요!\n   \n   * 자신의 남은 연차 개수도 직접 확인할 수 있어요\n   \n   * 구글 캘린더와의 연동을 통해 편하게 휴가를 기록할 수 있어요!\n   \n   * 지문 체크 없이도, 외근 및 재택 근무 출퇴근 기록이 가능해요!\n   \n   * 각 팀장님들이 팀원의 출근 여부를 확인할 수 있어요!\n   \n   * 직원의 업무량 체크가 가능해요\n\n--------------------------------------------------------------------------------\n\n * 가입 절차\n   \n   * 휴대폰으로 커먼스페이스 앱을 먼저 다운로드해주세요!\n   \n   * 회사 계정으로 회원 가입 후 말씀해주세요. 인증 이메일을 보내드립니다.\n   \n   * 초대 코드 : 뭉치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%BB%A4%EB%A8%BC1.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n * 사용 가이드라인\n   \n   * 출퇴근 시\n     \n     * 출·퇴근 신청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%E3%85%82%E3%84%B1.jpg?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%ED%81%B4%EB%A6%AD2.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n * 출·퇴근 시간 변경 요청 (출/퇴근 기록을 깜빡했어요!)\n   \n   \n   * 당일 출·퇴근을 깜빡한 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%8B%9C%EA%B0%84%EB%B3%80%EB%8F%99.jpg?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/1623914963728.jpg?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/S__33710086.jpg?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/S__33710082.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n * 과거의 출·퇴근을 깜빡한 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%E3%85%8E%E3%85%87.jpg?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%8B%A0%EC%B2%AD%EC%9D%80%20%EC%9D%B4%EB%A0%87%EA%B2%8C.jpg?api=v2]\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f608.png]\n왜 출퇴근을 누락했는지 이유를 꼭 적어주세요.\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f608.png]\n정확한 시간을 입력해주세요.\n\n--------------------------------------------------------------------------------\n\n * (파란별)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f608.png]\n   출퇴근을 자꾸 잊으시면 이렇게 돼요.\n   \n   \n   * 실시간 확인이 가능하여, 누락 인원에게 개별 공지를 하게 된답니다. 서로 번거로울 수 있으니, 출퇴근 기록 항상 인지해주세요!\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EB%88%84%EB%9D%BD%EC%9E%90%ED%99%95%EC%9D%B8.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n * 휴가 신청\n   \n   \n   * 연차/반차/재택 및 기타 휴가 신청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EB%8B%A4%EC%8B%9C.jpg?api=v2]\n\n① 목적에 맞는 신청을 선택합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/S__33710090.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%97%B0%EC%B0%A8%20%EC%84%A0%ED%83%9D%ED%95%98%EA%B3%A0.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%ED%81%B4%EB%A6%AD%ED%95%B4.jpg?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%9E%90%EB%8F%99%EC%97%B0%EB%8F%99.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EB%B0%98%EC%B0%A8.jpg?api=v2]\n\n * (파란별)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f91a.png]\n   오후 반차 사용했는데, 9시 출근했을 때는 어떻게 하나요? 오전 10시 출근으로 기록되는데..\n   \n   \n   * 오후 반차 신청 먼저 올리고, 출근 시간을 변경해주세요. 시간 변경은 출·퇴근 시간 변경 요청 (출/퇴근 기록을 깜빡했어요!)를\n     참고해주세요.\n   \n   * 하지만 시간 변경은 당일만 수정 가능해서, 이 점은 차차 다른 방안을 찾아보도록 하겠습니다.\n\n--------------------------------------------------------------------------------\n\n * 휴가/외근 취소\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/1111.jpg?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%9D%B4%EB%A0%87%EA%B2%8C.jpg?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EB%A7%88%EC%A7%80%EB%A7%89.jpg?api=v2]\n\n--------------------------------------------------------------------------------\n\n * 근무 현황 보기\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%EC%88%98%EC%A0%95.jpg?api=v2]\n   \n   * 앱 첫 화면에 위와 같은 근무현황이 나타납니다. 이 부분을 수정하고 싶어하시는 분들을 위해,\n\n * 마이페이지-프로필 수정-기본 팀 필터-회사(전체) / 팀 중 선택\n   \n   * 나는 우리 '팀' 근무 현황만 보고 싶어요 - 팀 선택\n   \n   * 전사 직원 근무 현황 보고 싶습니다 - 회사(전체 선택)\n   \n   * 앞으로는 단체 방에 ‘스웍하겠습니다’ 라는 말 적지 않습니다 (웃음)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/smile.png]\n     누가 출근했는지 보고싶다면, B를 선택하시면 좋을 것 같습니다.\n\n * 앞으로 변화되는 것\n   \n   * ERP HR\n     \n     * 공용 캘린더에 자동으로 기록되기 때문에, 7월 1일부터는 ERP 휴가 신청을 중지합니다. 그동안 좋은 서비스 이용할 수 있도록\n       개발해주신 분들께 감사한 마음 전합니다!\n   \n   * 연차 촉진 제도는?\n     \n     * 연차 촉진 제도에 대한 설명 : 링크(정리 중이에요 (파란별)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f605.png]\n       )\n     \n     * 앱에서 본인 휴가 개수를 확인할 수 있다고 해도, 연차 촉진 제도는 서면 통지가 필수이기에 그와 별개로 계속 진행합니다.\n   \n   * (210813) 앞으로 HQ방에 ‘스웍하겠습니다’ 라는 말 사용하지 않습니다. 다만, 출퇴근 체크 제대로 해주세요. 9시 30분에\n     오시면 18시 30분 이후 퇴근해주세요. 근무시간은 늘 체크하고 있습니다.\n\n * Q&A (추가 예정)\n   \n   * 그럼 앞으로 지문 인식기는 전혀 사용하지 않나요?\n     \n     * 출입 용도로 지문 인식기는 계속 사용하지만, “출근” , “퇴근” 버튼은 안 누르셔도 됩니다!\n   \n   * 근태 관리자는 누구인가요? 궁금한 게 생기면 누구에게 물어봐야 하나요?\n     \n     * 김아름(Belle) (Unlicensed)\n       [https://ecubelabs.atlassian.net/wiki/people/5e129adce3b48c0daa0f0da4?ref=confluence]\n       홍순우 (Henry) (Unlicensed)\n       [https://ecubelabs.atlassian.net/wiki/people/5b61207f35712e3b81c69ac4?ref=confluence]\n       에게 문의 부탁 드립니다'◡'\n   \n   * 출근, 퇴근 인증하라고 알림 오는 게 싫어요. 이럴 때는?\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/1930493982/%E3%85%87%E3%84%B3%E3%84%B9.jpg?api=v2]\n     \n     * App 접속 - 마이페이지 - 알림 설정 - 출퇴근 알림 선택\n   \n   * 저 휴가 15개 아닌가요? 왜 총 휴가 개수가 더 적나요?\n     \n     * 지난 년도 초과 사용에 대한 차감 분입니다. 마이너스 처리하면 총 휴가 개수가 그렇게 기재되더라고요. 본인이 작년에 휴가를 초과하지\n       않았나 생각해보세요!\n   \n   * 저는 7월 휴가를 미리 ERP에 올렸는데요! 취소해야 하나요?\n     \n     * ERP에 미리 올린 휴가는 그대로 두시고, 커먼 스페이스에 7월 휴가만 별도로 올려주세요!\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2008350836"
  },
  {
    "pageContent": "연차 신청 가이드\n\n3일 이상 휴가를 가거나 당일에 긴급하게 휴가를 사용하는 경우 SW팀 디스코드 채널에도 공지한다.\n\n\n\n * 연차 지급 기준\n * 연차 신청\n * 반차 사용에 대한 QnA\n * 연차 신청 상세\n * 개인별 연차일수\n * 병가\n * 대체 근무/휴무\n * 연차 촉진 제도의 이해\n\n\n연차 지급 기준\n\n이큐브랩은 회계연도를 기준으로 연차를 지급/집계하고 있습니다.\n\n기준에 관해\n\n입사일 기준은 입사일을 기준으로 만 1년씩 근속년수가 증가할 때 마다 연차를 지급하는 것이고, 회계연도 기준은 다음해 1월 1일날 일괄적으로\n연차를 지급하는 방식입니다.\n\n\n연차 신청\n\n * 이큐브랩 정책대로, 자신에게 지급된 잔여 연차일수 만큼 사용할 수 있습니다.\n\n * 팀원 및 협업 인원들에게 관련하여 사전에 공유하고, 스케줄 확인/조정 후 신청.\n\n * 연차는 1일 차감, 반차는 0.5일 차감.\n\n * 반차 사용시 4시간 근무가 기준이 되며, 기본적으로 오전 반차는 15시 퇴근, 오후 반차는 15시 출근입니다.\n   \n   * 시간 조정이 필요한 경우, 팀과 HR\n     [https://ecubelabs.atlassian.net/people/team/b46e3d9f-dc20-4bd7-9cb4-3e0ac85aa092]에\n     보고 필수.\n\n\n반차 사용에 대한 QNA\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/143589389/%E3%85%8E%E3%85%8E.jpg?api=v2]\n\n * 현재(2021. 7. 1. )까지 각 팀별 미리 합의가 되어 있던 경우, 스웍을 하여 9시 출근하였을 때 점심을 먹지 않고 1시까지 근무\n   후 퇴근이 가능하였습니다. 하지만 이는, 4시간 마다 30분의 휴게 시간을 보장해야 함 + 점심시간에 근무를 시켜서는 안된다는 근로기준법에\n   저촉된다는 사실을 간과한 경우였습니다. * 저희의 점심시간은 12시 30분 ~ 1시 30분이니까요..\n\n * 하여 앞으로는 9시 출근 시, 14시 퇴근 / 10시 출근 시, 15시 퇴근을 확실하게 정해두고자 합니다.\n\n * 3번 질문에 대한 답변은, 8시간 내리 근무를 한다면 휴게 시간을 지급하지 않은 결과를 초래하기 때문에 사용자가 처벌을 받게 되므로\n   불가함을 알려드립니다.\n\n * [Q&A] 경영지원\n   [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/204440420/Q+A]\n\n\n연차 신청 상세\n\n * 2021. 7. 1. 부로 커먼스페이스로 연차를 신청합니다.\n\n * 근태 관리 시스템 도입 - 원티드 스페이스 사용 매뉴얼\n   [https://ecubelabs.atlassian.net/wiki/spaces/HR/pages/1930493982/-]\n   \n   * 참고하여 연차를 신청해주세요!\n\n\n개인별 연차일수\n\n * 자신의 연차일수가 궁금하시면 HR\n   [https://ecubelabs.atlassian.net/people/team/b46e3d9f-dc20-4bd7-9cb4-3e0ac85aa092]으로\n   문의주시기 바랍니다.\n\n\n병가\n\n * 연차로 사용하는 병가는 연차에서 차감됩니다. 유급 휴가로 적용.\n\n * 병가의 경우, 1년 중 30일 이내로 병가를 신청할 수 있으며, 이는 무급 휴가로 적용된다. 무급 휴가의 신청은 입원 증빙, 전문의 진단서\n   제출(사후 제출 가능) 필요.\n\n * 이외의 병가는 통상적으로 연차를 먼저 소진하며, 병가가 연차 일수를 초과하게 될 경우엔 무급휴가(병가)로 적용합니다.\n\n * 팀장 및 HR\n   [https://ecubelabs.atlassian.net/people/team/b46e3d9f-dc20-4bd7-9cb4-3e0ac85aa092]과\n   사전 상의 필요.\n\n\n대체 근무/휴무\n\n * 공휴일, 주말 등 휴일에 자발적인 사유가 아닌 일정(회사의 공식일정, 전시회 등)으로 근무를 하게 될 경우, 사전에 협의한 부분에 대해서\n   대체 휴무를 지급합니다.\n\n * 이 때 근무해야하는 일정에 앞서, HR\n   [https://ecubelabs.atlassian.net/people/team/b46e3d9f-dc20-4bd7-9cb4-3e0ac85aa092]과 상의하여\n   인정되는 대체 휴무의 일수를 논의해야 합니다.\n\n * 사전에 상의 후 대체 휴가 지급이 가능하기 때문에, 먼저 꼭 논의 부탁드립니다.\n   \n   * 논의 된 대체 휴가는 커먼스페이스 - 연차 신청(대체휴가)로 신청합니다.\n     \n\n\n연차 촉진 제도의 이해\n\n 제61조(연차 유급휴가의 사용 촉진) ① 사용자가 제60조제1항ㆍ제2항 및 제4항에 따른 유급휴가(계속하여 근로한 기간이 1년 미만인\n근로자의 제60조제2항에 따른 유급휴가는 제외한다)의 사용을 촉진하기 위하여 다음 각 호의 조치를 하였음에도 불구하고 근로자가 휴가를 사용하지\n아니하여 제60조제7항 본문에 따라 소멸된 경우에는 사용자는 그 사용하지 아니한 휴가에 대하여 보상할 의무가 없고, 제60조제7항 단서에 따른\n사용자의 귀책사유에 해당하지 아니하는 것으로 본다.  <개정 2012. 2. 1., 2017. 11. 28., 2020. 3. 31.>\n\n 1. 제60조제7항 본문에 따른 기간이 끝나기 6개월 전을 기준으로 10일 이내에 사용자가 근로자별로 사용하지 아니한 휴가 일수를 알려주고,\n    근로자가 그 사용 시기를 정하여 사용자에게 통보하도록 서면으로 촉구할 것\n\n 1. 제1호에 따른 촉구에도 불구하고 근로자가 촉구를 받은 때부터 10일 이내에 사용하지 아니한 휴가의 전부 또는 일부의 사용 시기를 정하여\n    사용자에게 통보하지 아니하면 제60조제7항 본문에 따른 기간이 끝나기 2개월 전까지 사용자가 사용하지 아니한 휴가의 사용 시기를 정하여\n    근로자에게 서면으로 통보할 것\n\n② 사용자가 계속하여 근로한 기간이 1년 미만인 근로자의 제60조제2항에 따른 유급휴가의 사용을 촉진하기 위하여 다음 각 호의 조치를 하였음에도\n불구하고 근로자가 휴가를 사용하지 아니하여 제60조제7항 본문에 따라 소멸된 경우에는 사용자는 그 사용하지 아니한 휴가에 대하여 보상할 의무가\n없고, 같은 항 단서에 따른 사용자의 귀책사유에 해당하지 아니하는 것으로 본다.  <신설 2020. 3. 31.>\n\n 1. 최초 1년의 근로기간이 끝나기 3개월 전을 기준으로 10일 이내에 사용자가 근로자별로 사용하지 아니한 휴가 일수를 알려주고, 근로자가 그\n    사용 시기를 정하여 사용자에게 통보하도록 서면으로 촉구할 것. 다만, 사용자가 서면 촉구한 후 발생한 휴가에 대해서는 최초 1년의\n    근로기간이 끝나기 1개월 전을 기준으로 5일 이내에 촉구하여야 한다.\n\n 1. 제1호에 따른 촉구에도 불구하고 근로자가 촉구를 받은 때부터 10일 이내에 사용하지 아니한 휴가의 전부 또는 일부의 사용 시기를 정하여\n    사용자에게 통보하지 아니하면 최초 1년의 근로기간이 끝나기 1개월 전까지 사용자가 사용하지 아니한 휴가의 사용 시기를 정하여 근로자에게\n    서면으로 통보할 것. 다만, 제1호 단서에 따라 촉구한 휴가에 대해서는 최초 1년의 근로기간이 끝나기 10일 전까지 서면으로 통보하여야\n    한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/875135056"
  },
  {
    "pageContent": "일정 관리 가이드\n * 캘린더 종류\n * 등록 양식\n   * 예시\n   * 초대\n   * 같은 사람이 동 시간대의 여러 일정에 초대되는 것을 방지하기 위해, 참석자의 다른 일정을 꼭 확인해주세요.\n   * 초대 수락 후 개인 캘린더에 카피된 일정을 절대 제거하지 마세요.\n   * 회의실 지정\n   * 알림\n * Working Hours\n\n--------------------------------------------------------------------------------\n\n\n캘린더 종류\n\n * EcubeLabs_Official\n   \n   * 회의실 이용, 작업 일정, 외근 일정 등을 등록하는 캘린더입니다.\n   \n   * 회의실 이용 건은 필수적으로 등록합니다. 등록양식은 아래 참고.\n   \n   * 그 외 일정은 각 구성원의 판단아래, 공유해야할 가치가 있다면 꼭 등록합니다.\n\n * EcubeLabs_Vehicles\n   \n   * 사내 차량 이용 일정을 등록하는 캘린더입니다.\n   \n   * 차량 이용에 앞서 꼭 일정을 등록합니다.\n\n * EcubeLabs_BusinessTrip\n   \n   * 국내/해외 출장 일정을 등록하는 캘린더입니다.(1박 이상)\n   \n   * 출장자가 동일한 일정의 동행자들을 포함하여 등록합니다.(항공권 발권 이슈로 경영지원팀에서 하는 경우도 있습니다)\n\n * EcubeLabs_Day-off\n   \n   * 연차/반차 등의 휴가 일정이 등록되는 캘린더입니다.\n   \n   * 다른 캘린더와 달리 구성원이 직접 해당 캘린더에 일정을 등록하지 않습니다.\n   \n   * 원티드스페이스를 통한 신청/결재(승인) 이후 해당 일정이 자동 등록됩니다.\n\n * EcubeLabs_Reserved Forces\n   \n   * 예비군 일정 등 국방의 의무 관련 일정이 등록되는 캘린더입니다.\n   \n   * 다른 캘린더와 달리 구성원이 직접 해당 캘린더에 일정을 등록하지 않습니다.\n   \n   * 원티드스페이스를 통한 신청/결재(승인) 이후 해당 일정이 자동 등록됩니다.\n\n본인 계정 캘린더에서 위 캘린더 중 하나라도 보이지 않는 분이 있으시다면, 경영지원팀으로 문의하시기 바랍니다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n등록 양식\n\n> 제목: 일정내용_장소(참석자)\n\n참석자가 여러명인 경우는 콤마(,)로 구분하여 작성합니다.\n\n\n예시\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2018-6-5_10-15-9.png?api=v2]\n\n\n초대\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2018-6-29_10-21-24.png?api=v2]\n\nGUESTS 에 작성자 본인을 포함한(작성자도 참가하는 일정일 경우) 일정 참석자를 지정합니다.\n\n\n같은 사람이 동 시간대의 여러 일정에 초대되는 것을 방지하기 위해, 참석자의 다른 일정을 꼭 확인해주세요.\n\n * 참석자를 추가한 후 '참석자 참석 여부 보기'를 클릭하면, 해당 참여 인원들이 해당 시간대에 겹치는 일정이 있는지 한 번에 확인\n   가능합니다.\n\n * '권장 시간'을 클릭하면 모든 참석자가 참석 가능한 시간대를 볼 수 있습니다.\n\n참석자에게 초대 메일(Invitation)이 발송되고, 참석자는 해당 일정에 참여할지 여부(Yes, No, Maybe)를 지정합니다.\n\n초대 메일과 연동되어 본인 개인 캘린더에 동일한 일정이 자동 생성됩니다. (이메일 클라이언트 설정에 따라 다를 수 있습니다)\n\n\n초대 수락 후 개인 캘린더에 카피된 일정을 절대 제거하지 마세요.\n\n개인 캘린더에서 해당 일정을 제거하면 자동으로 불참(No) 처리됩니다.\n\n모든 참석자를 지정하고 초대 메일을 발송하여, 각자가 일정을 체크할 수 있도록 합니다.\n\n초대를 수신하신 분들은 꼭 참석 여부를 지정하시기 바랍니다.\n\n\n회의실 지정\n\n회의실을 이용하는 경우, 중복 예약을 막기 위해 회의실을 반드시 지정해 주세요. 일정에 회의실 추가하는 방법\n[https://support.google.com/calendar/answer/143753?hl=ko&co=GENIE.Platform=Desktop]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2019-6-14_15-49-42.png?api=v2]\n\n * 일정을 생성하고자하는 시간에 사용 가능한 회의실만(Available rooms only)을 필터링하여 확인할 수 있습니다.\n   \n   * 사용 불가능한 회의실도 포함(Include unavailable rooms)으로 필터를 설정하면 모든 회의실을 볼 수 있습니다.\n\n * 일정 중복 시, 회의실을 지정해놓은 기작성 일정에게 우선권을 부여합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2019-6-14_15-53-27.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2019-6-14_15-54-32.png?api=v2]\n\n * 생성된 일정은 위와 같이 회의실이 표기됩니다.\n\n * 회의실 뒤 괄호 안 숫자는 '최대 수용 인원 수' 입니다.\n\n\n알림\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2018-6-29_10-24-14.png?api=v2]\n\n알림을 지정하면 지정한 시각에 참석자에게 알림을 보냅니다.\n\n이큐브랩 캘린더는 기본 10분 전 알림으로 설정되어 있습니다.\n\n\nWORKING HOURS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2020-1-2_15-41-11.png?api=v2]\n\n개인 Working Hours 를 설정하시면, 해당 인원이 근무 시간이 아닌 시간에 일정에 초대되었음을 보여줄 수 있습니다.\n\n아래 경로를 따라 설정 화면에 진입합니다.\n\nCalendar > Settings menu(톱니바퀴 아이콘) > Settings > General > Working Hours\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/30146563/image2020-1-2_15-44-17.png?api=v2]\n\n현재(2020.01.02) 사내 많은 인원의 해당 설정 상 오류가 있습니다. 적절히 설정하여야합니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1773044054"
  },
  {
    "pageContent": "Be a better me?\n * 신은 디테일에 있다\n * 최적의 보고 타이밍\n * 상사에게 신뢰받는 사람이 되는 방법\n * 일 못하는 사람들의 공통적인 말투 특징 3가지\n * 보이 스카웃 규칙\n * Connecting the Dots\n * “왜?”라는 질문을 어떻게 해야 하는가\n * 측정 할 수 없다면 관리할 수도 없다.\n * 습관이 되는 주니어의 25가지 실수\n\n\n\n\n신은 디테일에 있다\n\n> 신은 디테일에 있다.\n\n출처:\nhttps://home1.kookmin.ac.kr/~craft/index.php?document_srl=101377&mid=comment#popup_menu_area\n[https://home1.kookmin.ac.kr/~craft/index.php?document_srl=101377&mid=comment#popup_menu_area]\n\n\n최적의 보고 타이밍\n\n> 1. 신입사원은 팀장에게 가급적 자주 보고하는 것이 좋다. 완벽주의는 금물.\n> \n> 2. 중간보고의 경우 보고서 형식에 구애받지 말아라. 구두 보고도 오케이.\n> \n> 3. (탑 10%라면) 때로는 너무 완벽하게 만들지 말고 지적당할 여지를 남겨 둬라.\n\n출처: https://brunch.co.kr/@believeinurself/10\n[https://brunch.co.kr/@believeinurself/10]\n\n\n상사에게 신뢰받는 사람이 되는 방법\n\n\n일 못하는 사람들의 공통적인 말투 특징 3가지\n\n\n보이 스카웃 규칙\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1080754321/image-20201210-110712.png?api=v2]\n\n출처:\nhttps://medium.com/@biratkirat/step-8-the-boy-scout-rule-robert-c-martin-uncle-bob-9ac839778385\n[https://medium.com/@biratkirat/step-8-the-boy-scout-rule-robert-c-martin-uncle-bob-9ac839778385]\n\n\nCONNECTING THE DOTS\n\n\n“왜?”라는 질문을 어떻게 해야 하는가\n\n\n측정 할 수 없다면 관리할 수도 없다.\n\nhttps://guavabox.com/if-you-cant-measure-it-you-cant-improve-it/\n[https://guavabox.com/if-you-cant-measure-it-you-cant-improve-it/]\n\n> If you can not measure, you can not manage\n\n관리가 가능해야 개선할 수 있다.\n측정할 수 없는것은 최대한 측정 가능하게 만든다.\n\n단, 잘못된 지표나 측정하고 싶은것만 측정하는것은 금물.\n\n\n습관이 되는 주니어의 25가지 실수\n\nhttps://brunch.co.kr/@vigorous21/871 [https://brunch.co.kr/@vigorous21/871]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1080754321"
  },
  {
    "pageContent": "Online courses\n * Udemy\n   * Next.js & React - The Complete Guide (incl. Two Paths!)\n   * Kubernetes for the Absolute Beginners - Hands-on\n   * Ultimate AWS Certified Solutions Architect Associate (SAA)\n * 신청\n\n\nUDEMY\n\n\nNEXT.JS & REACT - THE COMPLETE GUIDE (INCL. TWO PATHS!)\n[https://www.udemy.com/course/nextjs-react-the-complete-guide/]\n\n\nKUBERNETES FOR THE ABSOLUTE BEGINNERS - HANDS-ON\n[https://www.udemy.com/course/learn-kubernetes/]\n\n\nULTIMATE AWS CERTIFIED SOLUTIONS ARCHITECT ASSOCIATE (SAA)\n[https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c03/]\n\n\n신청\n\n강의 링크\n\n이유\n\n신청자\n\n결과\n\nhttps://www.udemy.com/course/learn-kubernetes/\n[https://www.udemy.com/course/learn-kubernetes/]\n\n쿠버네티스 기초 학습\n\n심예은 (Alex) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5e83fcc4caa47a0c1992f6d4?ref=confluence]\n\nAPPROVED\n\nhttps://fastcampus.co.kr/dev_red_bcr [https://fastcampus.co.kr/dev_red_bcr]\n\n\n\n> 10년&20년 후에도 지속 가능한 개발을 위해 필요한\n> 코드리뷰, 레거시와 리팩토링, TDD. 성장 방법에 대하여\n> The RED에서 다뤄보도록 할게요.\n\n꼭 이 강의가 아니더라도 The RED 에 흥미로운 강의들이 많은 것 같아서 적었습니다.\nhttps://fastcampus.co.kr/dev_red_pjc [https://fastcampus.co.kr/dev_red_pjc]\n\n강주영 (Ben)\n[https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n\n\n\nREJECTED\n\n영어 강의 신청 해주세요.\n\nhttps://www.inflearn.com/course/%ED%83%84%ED%83%84%ED%95%9C-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%84%A4%EC%8A%A4%ED%8A%B8\n[https://www.inflearn.com/course/%ED%83%84%ED%83%84%ED%95%9C-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%84%A4%EC%8A%A4%ED%8A%B8]\n\n앞으로 새로 만들 서비스가 있으면 옵션 중 하나로 두고 싶습니다.\n\n정찬엽(Ray) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/60d0006ba17463007078afb9?ref=confluence]\n\nREJECTED\n\n영어 강의 신청 해주세요.\n\nhttps://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c03/\n[https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c03/]\n\nSAA를 준비하시는 분들 or AWS 서비스들에 대해 공부하고 싶은 분들을 위해 있으면 좋을 것 같습니다\n\n황창환(Arthur)\n[https://ecubelabs.atlassian.net/wiki/people/620098d8e5caff0070e16d29?ref=confluence]\n\nAPPROVED\n\nGenerative AI for NodeJs: OpenAI, LangChain - TypeScript\n[https://www.udemy.com/course/ai-nodejs-openai-chatgpt-langchain-typescript/?couponCode=KRLETSLEARNNOW]\n\nLLM Application 구축에 필요한 기본 기술 스택(LLM Framework, Embedding, VerctorDB)을 학습하고\n싶습니다.\nJS for LLM Application 구축에 대한 공식 레퍼런스가 부족해서 유료 컨텐츠를 이용해 보려고 합니다.\n\n김하늘(Bungle)\n[https://ecubelabs.atlassian.net/wiki/people/712020:17f143ac-75d6-49e3-a52f-4292638085d2?ref=confluence]\n\nAPPROVED\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2244018199"
  },
  {
    "pageContent": "[OJT] 교양\n * 초보 웹 개발자를 위한 학습 안내서\n * CS50\n * 생활코딩\n * JavaScript\n   * Callbacks, Promises and Async/Await\n * Node.js\n   * Event loop\n   * Stream\n * React\n   * React Query\n * Subscriptions\n\n\n초보 웹 개발자를 위한 학습 안내서\n\nhttps://subicura.com/2021/06/27/study-guide.html\n[https://subicura.com/2021/06/27/study-guide.html]\n\n\nCS50\n\nhttps://www.youtube.com/playlist?list=PLhQjrBD2T382_R182iC2gNZI9HzWFMC_8\n[https://www.youtube.com/playlist?list=PLhQjrBD2T382_R182iC2gNZI9HzWFMC_8]\n\n\n생활코딩\n\nWEB [https://opentutorials.org/course/3083]\n\n * Python, PHP, OAuth 를 제외한 전체\n\n프로젝트 관리 [https://opentutorials.org/course/301]\n\n * Subversion, Gitlab, Redmine 을 제외한 전체\n\n개발도구 [https://opentutorials.org/course/580]\n\n\nJAVASCRIPT\n\nhttps://ko.javascript.info/ [https://ko.javascript.info/]\n\nhttps://www.jschallenger.com [https://www.jschallenger.com]\n\n\nCALLBACKS, PROMISES AND ASYNC/AWAIT\n\nhttps://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee\n[https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee]\n\nhttps://helloworldjavascript.net/pages/285-async.html\n[https://helloworldjavascript.net/pages/285-async.html]\n\nhttps://web.dev/promises/ [https://web.dev/promises/]\n\nhttps://web.dev/javascript-async-functions/\n[https://web.dev/javascript-async-functions/]\n\nhttps://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9\n[https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9]\n\n\nNODE.JS\n\nhttps://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp\n[https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp]\n\n\nEVENT LOOP\n\nhttps://www.youtube.com/watch?v=8aGhZQkoFbQ\n[https://www.youtube.com/watch?v=8aGhZQkoFbQ]\n\nhttps://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow/\n[https://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow/]\n\nhttps://www.youtube.com/watch?v=P9csgxBgaZ8\n[https://www.youtube.com/watch?v=P9csgxBgaZ8]\n\nhttps://dev.to/nodedoctors/an-animated-guide-to-nodejs-event-loop-3g62\n[https://dev.to/nodedoctors/an-animated-guide-to-nodejs-event-loop-3g62]\n\n\nSTREAM\n\nhttps://www.freecodecamp.org/news/node-js-streams-everything-you-need-to-know-c9141306be93\n[https://www.freecodecamp.org/news/node-js-streams-everything-you-need-to-know-c9141306be93]\n\n\nREACT\n\nhttps://kentcdodds.com/blog/javascript-to-know-for-react\n[https://kentcdodds.com/blog/javascript-to-know-for-react]\n\nhttps://youtu.be/wIyHSOugGGw?si=l3nPclqL_W9Rv7JU\n[https://youtu.be/wIyHSOugGGw?si=l3nPclqL_W9Rv7JU]\n\nhttps://www.freecodecamp.org/news/react-cheatsheet-with-real-world-examples/\n[https://www.freecodecamp.org/news/react-cheatsheet-with-real-world-examples/]\n\n\nREACT QUERY\n\nhttps://www.youtube.com/watch?v=r8Dg0KVnfMA\n[https://www.youtube.com/watch?v=r8Dg0KVnfMA]\n\n * 따라 해보기\n\n\nSUBSCRIPTIONS\n\nhttps://www.youtube.com/c/ByteByteGo [https://www.youtube.com/c/ByteByteGo]\n\nhttps://www.youtube.com/@Confluent [https://www.youtube.com/@Confluent]\n\n * https://www.youtube.com/watch?v=UStWv62FX-k&list=PLa7VYi0yPIH0IpUKXb3q7NSjpJGO9GGGZ\n   [https://www.youtube.com/watch?v=UStWv62FX-k&list=PLa7VYi0yPIH0IpUKXb3q7NSjpJGO9GGGZ]\n\nhttps://github.com/naver/fe-news [https://github.com/naver/fe-news]\n\nhttp://highscalability.com/ [http://highscalability.com/]\n\nhttps://netflixtechblog.com/ [https://netflixtechblog.com/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1144259719"
  },
  {
    "pageContent": "[OJT] JavaScript\n * 프로토타입(Prototype)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224067705/Prototype]\n * [OJT][JS] Arrow function & this scope\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/214237348/OJT+JS+Arrow+function+this+scope]\n * [OJT][JS] 부동 소수점 연산\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/253788468/OJT+JS]\n * [OJT][JS] Map\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/625443370/OJT+JS+Map]\n * [OJT][JS] Object destructuring and Operand selector operator\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/684621849/OJT+JS+Object+destructuring+and+Operand+selector+operator]\n * [OJT][JS] const 는 불변인가? is const immutable?\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/723222605/OJT+JS+const+is+const+immutable]\n * [OJT][JS] Short-circuit evaluation\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1095008423/OJT+JS+Short-circuit+evaluation]\n * [OJT][JS] Iterable\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1969422512/OJT+JS+Iterable]\n * [OJT][JS] Hoisting\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2235465731/OJT+JS+Hoisting]\n * [OJT][JS] Set.has() vs Array.includes()?\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2303328303/OJT+JS+Set.has+vs+Array.includes]\n * [OJT] 신뢰성, 가독성 향상\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2345435137/OJT]\n * [OJT][JS] JSON.stringify/parse\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2351792137/OJT+JS+JSON.stringify+parse]\n * [OJT][JS] valueOf\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2360115201/OJT+JS+valueOf]\n * [OJT][JS] 정렬\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134578262/OJT+JS]\n * [OJT][JS] JSON-S\bchema\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2428108847/OJT+JS+JSON-S+chema]\n * [OJT][JS] Syntax sugar\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2579595413/OJT+JS+Syntax+sugar]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/260046948"
  },
  {
    "pageContent": "[OJT] TypeScript\n\nhttps://www.typescriptlang.org/play [https://www.typescriptlang.org/play]\n\n * 타입스크립트가 실제로 어떻게 자바스크립트로 트랜스파일 되는지 빠르게 확인할 수 있다.\n\n타입스크립트는 개발 시 생산성을 높이는 도구일 뿐 런타임에 코드의 동작과는 아무런 관련이 없다.\n\nex) x as number; → 런타임에 실제로 x 를 number 로 컨버팅 하지 않는다.\n\nconst x = '1';\nconst y = x as number;\n\nconsole.log(x, y); // '1', '1' \n\n\n필수 학습\n\n 1. Duck typing [https://soopdop.github.io/2020/12/09/duck-typing/]\n\n 2. https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\n    [https://www.typescriptlang.org/docs/handbook/2/types-from-types.html]\n\n 3. https://www.typescriptlang.org/docs/handbook/utility-types.html\n    [https://www.typescriptlang.org/docs/handbook/utility-types.html]\n\n 4. https://www.typescriptlang.org/docs/handbook/type-compatibility.html\n    [https://www.typescriptlang.org/docs/handbook/type-compatibility.html]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224002882"
  },
  {
    "pageContent": "[OJT] Test\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2428043283"
  },
  {
    "pageContent": "[OJT] Git\n * 기초\n * 심화\n * 브랜치 정책\n   * Why GitHub flow?\n   * 참고\n * 코드 리뷰\n   * 참고\n\n\n기초\n\nPractical Git for Everyday Professional Use\n[https://egghead.io/courses/practical-git-for-everyday-professional-use]\n\nCS Visualized: Useful Git Commands\n[https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1]\n\nGit 서버 - 프로토콜\n[https://git-scm.com/book/ko/v2/Git-%EC%84%9C%EB%B2%84-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C]\n\n\n심화\n\nDeep dark-side of git: How git works internally\n[https://www.slideshare.net/SeongJaePark1/deep-darkside-ofgit]\n\n\n브랜치 정책\n\nGit 은 형상관리 프로그램으로써 브랜치는 형상관리를 위한 Git 의 기능이다.\n\n브랜치는 사실 아무렇게나 사용해도 상관없는데 협업을 위해서는 팀 구성원들이 모두 동일한 방식으로 브랜치를 사용할 필요가 있다.\n\n형상관리라는게 어느 회사나 비슷하기 때문에 브랜치를 사용하는 방식도 비슷할 수 밖에 없으며 보통 많이 사용되는 브랜치 정책은 Git flow,\nGitHub flow, GitLab flow 가 있다.\n\nGit flow vs GitHub flow vs GitLab flow\n[https://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/]\n\n이큐브랩에서는 GitHub flow 를 약간 변형한 버전을 사용한다.\n\n[http://cdn-ak.f.st-hatena.com/images/fotolife/s/shoma2da/20151104/20151104223339.png]+\ndevelop 브랜치 (GitHub flow 에는 develop 브랜치가 없다)\n\n\nWHY GITHUB FLOW?\n\nGitHub flow 가 제일 단순하기 때문에 현재 팀 규모에서는 GitHub flow 로도 충분하다고 판단된다.\n\n개발자가 더 많아져서 보다 정교한 브랜치 정책이 필요하게 되면 Git flow 나 GitLab flow 도입을 검토해보자.\n\n\n참고\n\n우아한형제들 모바일 팀 Git 브랜치 전략\n[http://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html]\n\n\n코드 리뷰\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/134611139/code_review_pyramid.svg?api=v2]\n\n\n참고\n\n카카오스토리 팀의 코드 리뷰 도입 사례 - 코드 리뷰, 어디까지 해봤니?\n[http://tech.kakao.com/2016/02/04/code-review/]\n\n코드 리뷰는 어떻게 하나요? [http://sv-story.blogspot.com/2013/04/blog-post_28.html]\n\n[LINE] Effective code review\n[https://engineering.linecorp.com/en/blog/effective-code-review/]\n\n[티몬] 쿨(Cool)한 개발자 되기 - \"코드 리뷰\"에 대하여\n[http://m.blog.naver.com/tmondev/220701344824]\n\n코드를 단 한 줄 변경할 때도 리뷰/테스트 코드/문서화가 필요할까?\n[https://selfothercontext.com/2015/07/06/one-line-bug-fix/]\n\n[다음] Code Review : What, 2 Whys & How\n[https://www.slideshare.net/pioneerhjlee/code-review-devon2013]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611139"
  },
  {
    "pageContent": "[OJT] Functional Programming\n\n\n\n\nPROFESSOR FRISBY INTRODUCES COMPOSABLE FUNCTIONAL JAVASCRIPT\n[https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134348925"
  },
  {
    "pageContent": "[OJT] RxJS\n\nRxJS finalize operator\n[/wiki/pages/createpage.action?spaceKey=SW&title=RxJS%20finalize%20operator&linkCreation=true&fromPageId=166723659]\n\nflatMap, mergeMap, switchMap and concatMap, exhaustMap in RxJS\n[https://stackoverflow.com/questions/49698640/flatmap-mergemap-switchmap-and-concatmap-in-rxjs]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/166723659"
  },
  {
    "pageContent": "[OJT] Front-end\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/411730218"
  },
  {
    "pageContent": "[OJB]\nBack-end[https://ecubelabs.atlassian.net/wiki/download/attachments/411861401/image-20210917-062908.png?api=v2]\n\nNode.js 에서 대응하는 것을 학습하면 됩니다.\n\nex) ORM → TypeORM [https://typeorm.io/#/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/411861401"
  },
  {
    "pageContent": "[OJT] Docker\n\n왜 굳이 도커(컨테이너)를 써야 하나요?\n[https://www.44bits.io/ko/post/why-should-i-use-docker-container]\n\n컨테이너 기초부터 서버 배포까지 [https://www.44bits.io/ko/post/easy-deploy-with-docker]\n\n도커 컨테이너는 가상머신인가요? 프로세스인가요?\n[https://www.44bits.io/ko/post/is-docker-container-a-virtual-machine-or-a-process]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/474318085"
  },
  {
    "pageContent": "[OJT] Operation\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1989771303"
  },
  {
    "pageContent": "[OJT] Why?\n\n\nQ. 왜 주석에도 가이드가 있지?\n\nex) Function component 주석\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/806355067/F#Function-component-%EC%A3%BC%EC%84%9D],\n주석도 동일하게 작성합니다.\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/591200604/H+B]\n\nA. 의미 없는 코드 리뷰를 하지 않도록.\n\n“Charlie: useEffect 가 const handleChange 보다 위에 선언 되어야 하는거 아닌가요?” ← 의미 없는 소모적인 리뷰\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2021654610"
  },
  {
    "pageContent": "[OJT] Modern Software Architecture\n\nWatch all videos in this YouTube channel.\n[https://www.youtube.com/channel/UCcxTiKb1h2lY_gpTCDgXn1g]\n\n\n\n * Designing WhatsApp\n * Designing Uber\n\n\nDESIGNING WHATSAPP\n[http://highscalability.com/blog/2022/1/3/designing-whatsapp.html]\n\n\nDESIGNING UBER [http://highscalability.com/blog/2022/1/25/designing-uber.html]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2093776903"
  },
  {
    "pageContent": "[OJT] Service worker\n\n브라우저를 통해 설치되는 별도의 프로그램으로 보면 간단하다.\n\n흔히 PWA(Progressive web app)를 언급할 때 자주 거론되는 기술이다.\n캐싱 등은 물론이고 푸시 API나 비동기 처리를 백그라운드로 처리할 수 있는게 특징이다.\n또한 웹에서 일어나는 다양한 이벤트를 후킹할 수 있어 유용한데, 이 모든것은 별도의 스레드에서 처리된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2284486676/image-20211218-065203.png?api=v2]\n\n서비스 워커가 등록되지 않은 경우 대충 위와 같은 라이프사이클을 가진다.\n\n모든 서비스 워커는 결국 클라이언트에 설치되므로 브라우저에서도 모든 라이프 사이클을 관리할 수 있게 도구를 제공한다.\n(F12 → Application → Service Workers)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2284486676/image-20211218-065409.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2284486676/image-20211218-065415.png?api=v2]\n\n\n\nhttps://developer.mozilla.org/ko/docs/Web/API/Service_Worker_API\n[https://developer.mozilla.org/ko/docs/Web/API/Service_Worker_API]\n\nhttps://developers.google.cn/web/fundamentals/primers/service-workers?hl=ko\n[https://developers.google.cn/web/fundamentals/primers/service-workers?hl=ko]\n\nhttps://medium.com/@kosamari/service-worker-what-are-you-ca0f8df92b65\n[https://medium.com/@kosamari/service-worker-what-are-you-ca0f8df92b65]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284486676"
  },
  {
    "pageContent": "[OJT] 축약 표기법\n\n\nENGLISH NUMERICAL CONTRACTIONS\n[https://en.wiktionary.org/wiki/Category:English_numerical_contractions]\n\n * i18n: 국제화\n   \n   * internationalization\n     ^ 18글자\n\n * l10n: 지역화\n   \n   * localization\n     ^ 10글자\n\n * a11y: 접근성\n   \n   * accessibility\n     ^ 11글자\n\n * k8s: 쿠버네티스\n   \n   * kubernetes\n     ^ 8글자\n\n모두가 암묵적으로 합의한 경우에만 통용되는것이므로 아무거나 위처럼 줄여서 부르면 안된다.\n줄여봤자 아무도 못알아듣는다.\n\n * ex) tim -> t1m, terraform -> t7m , cleancitynetworks -> c15s\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2301001786"
  },
  {
    "pageContent": "[OJT] 추상화\n\nhttps://www.youtube.com/watch?v=YP7d9ae_VzI&t=458s\n[https://www.youtube.com/watch?v=YP7d9ae_VzI&t=458s]\n\n코드를 성급하게 DRY 하지 말자\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3028385818/DRY]\n\n\nDON’T\n\nfunction page1() {\n  return <div>\n    <h1 css={{fontSize: '16px', lineHeight: 1.6, fontWeight: 'bold' }}>HI</h1>\n  </div>\n}\n\n어 이거 왠지 추상화 할 수 있을거 같은데..?\n\nthen\n\nfunction H1({ text }) {\n  ...\n}\n\nfunction page1() {\n  return <div>\n    <H1>HI</H1>\n  </div>\n}\n\n\nDO\n\nfunction page1() {\n  return <div>\n    <h1 css={{fontSize: '16px', lineHeight: 1.6, fontWeight: 'bold' }}>HI</h1>\n  </div>\n}\n\nfunction page2() {\n  return <div>\n    <h1 css={{fontSize: '16px', lineHeight: 1.6, fontWeight: 'bold' }}>HI</h1>\n  </div>\n}\n\nfunction page3() {\n  return <div>\n    <h1 css={{fontSize: '16px', lineHeight: 1.6, fontWeight: 'bold' }}>HI</h1>\n  </div>\n}\n\n뭐야 다 똑같잖아\n\nthen\n\nfunction H1({ text }) {\n  ...\n}\n\nfunction page1() {\n  return <div>\n    <H1>HI</H1>\n  </div>\n}\n\nfunction page2() {\n  return <div>\n    <H1>There</H1>\n  </div>\n}\n\nfunction page3() {\n  return <div>\n    <H1>?!</H1>\n  </div>\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2942533701"
  },
  {
    "pageContent": "[OJT] 최적화\n\n\n신중하게 최적화하라\n\n> 요약하자면, 빠른 프로그램을 만들고자 애쓰지 말라는 것이다. 대신 좋은 프로그램을 짜기 위해 애쓰라. 성능은 따라올 것이다.\n\n출처:\nhttps://itstory.tk/entry/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%EC%9E%90%EB%B0%94-%EA%B7%9C%EC%B9%9955-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%9D%BC\n[https://itstory.tk/entry/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%EC%9E%90%EB%B0%94-%EA%B7%9C%EC%B9%9955-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%9D%BC]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2409758739"
  },
  {
    "pageContent": "[OJT] 신입 사원 과제\n\n\n\n * CCN & Simulator\n   * CCN\n     * Device 객체\n     * API\n     * 웹\n   * Simulator\n     * 웹\n * CCN & Simulator with AD\n   * CCN\n   * Simulator\n\n\nCCN & SIMULATOR\n\n\nCCN\n\n\nDEVICE 객체\n\n * id: number\n\n * name: string\n\n * address: string\n\n * fillLevel: number []\n\n\nAPI\n\n 1. device 등록\n\n 2. device 목록 조회\n\n 3. 적재량 추가\n\n\n웹\n\n[/wiki/download/attachments/1313079331/newcomer-ccn-simulator.png?api=v2]\n\n\n\n\nSIMULATOR\n\n\n웹\n\n[/wiki/download/attachments/1313079331/newcomer-ccn-simulator-2.png?api=v2]\n\n\n\n\nCCN & SIMULATOR WITH AD\n\n\nCCN\n\n[/wiki/download/attachments/1313079331/new-commer-ccn-simulator-5.png?api=v2]\n\n\nSIMULATOR\n\n[/wiki/download/attachments/1313079331/new-commer-ccn-simulatr-3.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1313079331"
  },
  {
    "pageContent": "[OJT] Prometheus\n * [PROM] PromQL\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2883715365/PROM+PromQL]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2883715353"
  },
  {
    "pageContent": "Ecube Labs' Solutions Architecture\n * The newest edition\n * Old edition\n   * 1. All cases\n   * 2. NB-IoT case\n   * 3. LoRaWAN case\n   * 4. Other cases\n   * PPT raw file\n\n\nTHE NEWEST EDITION\n\n--------------------------------------------------------------------------------\n\n22.05.27 published.\n\n박현주 (Sapphira) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5b6267d0e859072d9083d7eb?ref=confluence]가\nIllustrator 로 모던하게 재작성한 diagram. Original AI file 이 필요할 시, 박현주 (Sapphira)\n(Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5b6267d0e859072d9083d7eb?ref=confluence]에게\n요청.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/52789259/EcubeLabs%20Solutions%20Architecture-fin.png?api=v2]\n\n\nOLD EDITION\n\n--------------------------------------------------------------------------------\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]가\nPowerPoint 로 작성한 diagram\n\n\n1. ALL CASES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/52789259/EcubeLabs_Solution_E2E_Architecture_180718_All.png?api=v2]\n\n\n2. NB-IOT CASE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/52789259/EcubeLabs_Solution_E2E_Architecture_180718_NB-IoT.png?api=v2]\n\n\n3. LORAWAN CASE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/52789259/EcubeLabs_Solution_E2E_Architecture_180718_LoRaWAN.png?api=v2]\n\n\n4. OTHER CASES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/52789259/EcubeLabs_Solution_E2E_Architecture_180718_Others.png?api=v2]\n\n\nPPT RAW FILE\n\nEcubeLabs_Solution_E2E_A…\n[/wiki/spaces/SW/pages/52789259/Ecube+Labs+Solutions+Architecture?preview=%2F52789259%2F52756485%2FEcubeLabs_Solution_E2E_Architecture_180718.pptx]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/52789259"
  },
  {
    "pageContent": "Go lang\n\n인프라 엔지니어 및 K8s Operator 개발자를 위한 Go lang 자료\n\n * Roadmap\n   \n   * https://roadmap.sh/golang [https://roadmap.sh/golang]\n\n * https://www.youtube.com/playlist?list=PL4cUxeGkcC9gC88BEo9czgyS72A3doDeM\n   [https://www.youtube.com/playlist?list=PL4cUxeGkcC9gC88BEo9czgyS72A3doDeM]\n\n * Go 101\n   \n   * https://go101.org/ [https://go101.org/]\n\n * Tour of Go\n   \n   * https://go-tour-ko.appspot.com/welcome/1\n     [https://go-tour-ko.appspot.com/welcome/1]\n\n * Common Mistake\n   \n   * https://100go.co/ [https://100go.co/]\n\n * google golang best practice\n   \n   * https://google.github.io/styleguide/go/best-practices\n     [https://google.github.io/styleguide/go/best-practices]\n\n * FAQ\n   \n   * https://go.dev/doc/faq#overloading [https://go.dev/doc/faq#overloading]\n\n * structuring application in go\n   \n   * https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091\n     [https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3057418241"
  },
  {
    "pageContent": "[OJT] 프로그램, 프로세스, 쓰레드\n\nhttps://opentutorials.org/course/2598/14210\n[https://opentutorials.org/course/2598/14210]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2021359694"
  },
  {
    "pageContent": "[OJT] Network\n * 인터넷, 네트워크 그리고 서버\n * 웹서버 (아파치)\n * 포트\n * AWS를 사용한다면 반드시 알아야 할 네트워크 기초 지식\n\n\n인터넷, 네트워크 그리고 서버 [https://opentutorials.org/course/2598/14427]\n\n * TCP/IP\n\n * UDP\n   \n   * QUIC powered by Google\n\n\n웹서버 (아파치) [https://opentutorials.org/course/2598/14446]\n\n\n포트 [https://opentutorials.org/course/2598/14470]\n\n * Private network\n   \n   * Gateway\n   \n   * NAT\n\n * IP addr + Port = 통신을 위한 고유값\n\n * 방화벽\n\n\nAWS를 사용한다면 반드시 알아야 할 네트워크 기초 지식 [https://www.youtube.com/watch?v=vCNexbgYmQ8]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1956446242"
  },
  {
    "pageContent": "[OJT] OSI 7\nLayers[https://ecubelabs.atlassian.net/wiki/download/attachments/2338258945/image-20220217-022657.png?api=v2]\n\n> OSI 7 계층은 네트워크\n> [http://wiki.hash.kr/index.php/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC] 프로토콜\n> [http://wiki.hash.kr/index.php/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C]이 통신\n> [http://wiki.hash.kr/index.php/%ED%86%B5%EC%8B%A0]하는 구조를 7개의 계층으로 분리하여 각 계층간\n> 상호 작동하는 방식을 정해 놓은 것이다.\n\n * 통신에 필요한 구조를 세분화 하여 7개로 나눠둔것\n\n * 개념적으로 나눠둔것이기 때문에 현실에서는 특정 프로토콜이나 기술이 하나의 OSI 계층에 딱 맞아떨어지지 않는 경우도 있다.\n   \n   * ex) 우리가 흔히 사용하는 주파수 대역폭을 가지는 LTE는 1~3 계층을 커버한다.\n   \n   * [OJT] 하드웨어 통신 기술 및 프로토콜\n     [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1535311884/OJT] 참고\n\n * 우리는 일반적으로 Application layer(7)에 있는 프로토콜을 자주 접하지만, 하위 계층의 프로토콜도 함께 이용되고 있는것이다.\n   \n   * ex) HTTP(7) 프로토콜은 일반적으로 TCP(4) 프로토콜을 기반으로 통신한다.\n\n\n\nhttps://itwiki.kr/w/OSI_7%EA%B3%84%EC%B8%B5\n[https://itwiki.kr/w/OSI_7%EA%B3%84%EC%B8%B5]\n\nhttp://wiki.hash.kr/index.php/OSI_7_%EA%B3%84%EC%B8%B5\n[http://wiki.hash.kr/index.php/OSI_7_%EA%B3%84%EC%B8%B5]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2338258945"
  },
  {
    "pageContent": "[OJT] Cryptography & Hash\n * Cryptography\n * Hash\n\n\nCRYPTOGRAPHY\n\n대칭키 비대칭키\n\nhttps://github.com/Ecube-Labs/crypto [https://github.com/Ecube-Labs/crypto]\n\n\nHASH\n\ninput → 고정 길이 output\n\nrainbow table\n\nsalt",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1901133975"
  },
  {
    "pageContent": "[OJT] SSH (Secured Shell)\n\n\n\nSSH (SECURED SHELL, === SECURE SOCKET SHELL)\n\n두 컴퓨터(SSH Client - SSH Server) 사이에서 안전하게 통신하기 위한 인터넷 프로토콜, 또는 이 프로토콜을 사용하는\n프로그램들을 말한다. 한 컴퓨터에서 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 제어, 파일을 복사할수 있도록 한다.\n\n데이터 전송이 암호화 되어 있기 때문에, 중간에 데이터를 볼 수 있어도 해석할 수 없으므로 보안상 이점을 가진다.\n\n> A secure way to access a computer over an insecure network.\n\n\n\n클라이언트 - 서버 연결\n\n 1. SSH 클라이언트에서 private/public key pair 를 생성한다. (ssh-keygen, id_rsa: private\n    key, id_rsa.pub: public key)\n\n 2. 접속하려는 SSH 서버의 authorized_keys 파일에 생성한 public key를 추가한다.\n    \n    1. 보통 서버 관리자만 이 작업을 수행할 수 있다.\n\n 3. 서버에 등록된 public key와 pair가 되는 private key를 가진 클라이언트는 별도의 로그인 없이 서버에 접속할 수 있다.\n\n\n\n이때, 클라이언트가 private key를 가지고 있는지 여부는 아래 과정을 통해 증명할 수 있다.\n\n 1. 서버가 랜덤한 값 A를 생성해 클라이언트에게 전송한다.\n\n 2. 클라이언트는 A를 private key로 암호화, 서버에 다시 전송한다.\n\n 3. 서버는 전송받은 값을 public key로 복호화 한 후, A와 일치하는지 확인한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1004732536/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-11-05%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.28.08.png?api=v2]\n\n\n\n참고 https://www.ssh.com/ssh/ [https://www.ssh.com/ssh/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1004732536"
  },
  {
    "pageContent": "[OJT] 리팩토링\n * Front-end\n   * 스냅샷을 이용한 검증\n * Back-end\n   * 신규 endpoint 로 개발\n   * 기존 endpoint 로 개발\n\n\nFRONT-END\n\n\n스냅샷을 이용한 검증\n\n리팩토링 전후에 스냅샷의 변경이 없으면(or 사소한 변경만 있으면) 된다\n\n\nBACK-END\n\n\n신규 ENDPOINT 로 개발\n\n 1. 기존 API 와 input/ouput 이 동일한 API 개발\n    \n    // 기존 API\n    GET /users?age=\n    [\n      { id: 1, first_name: 'a', last_name: 'b' },\n      { id: 2, first_name: 'c', last_name: 'd' },\n      ...\n    ]\n    \n    // 신규 API\n    GET /v2/users?age=\n    [\n      { id: 1, first_name: 'a', last_name: 'b' },\n      { id: 2, first_name: 'c', last_name: 'd' },\n      ...\n    ]\n    \n    1. case (camelCase/snake_case/…) 도 동일하면 좋지만 크게 중요한 건 아님\n\n 2. 프론트엔드에서 신규 엔드포인트 호출하게 변경\n    \n    1. case 가 변경 되었다면 이때 case 도 바꿔줘야 함\n    \n    2. case, endpoint 만 변경되었기 때문에 코드리뷰 부담 없음\n\n\n기존 ENDPOINT 로 개발\n\n기본적으로 “신규 endpoint 로 개발”과 동일하나 case 까지 일치해야 한다\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/687570947"
  },
  {
    "pageContent": "[OJT] Call by value, call by reference\n\n함수를 호출하는 방법은 크게 Call by value, Call by reference 두가지로 나눌 수 있다.\n\n\n1. CALL BY VALUE\n\n * 인자로 받은 값을 복사하여 처리한다. \n\n * 복사된 인자는 함수 안에서 local value가 된다.\n\n * 함수 내에서 인자의 값이 변경되어도 기존 값은 변경되지 않는다.\n\n * 인자가 Primitive type (Number, String, Boolean, undefined, Null) 일 때 동작한다.\n\nlet a = 1;\n\nconsole.log(`before execute a = ${a}`); \n\nfunction updateValue(val){\n    val += 1;\n    console.log(`local a = ${val}`); \n}\n\nupdateValue(a);\n\nconsole.log(`after execute a = ${a}`); \n\n// 결과\n// before execute a = 1 \n// local a = 2;\n// after execute a = 1\n\n\n\n\n2. CALL BY REFERENCE\n\n * 인자로 받은 값의 주소를 참조하여 처리한다.\n\n * 함수 내에서 인자의 값이 변경되면 기존 값도 함께 변경된다.\n\n * 인자가 Non-Primitive type (Arrays, Objects) 일 때 동작한다.\n\nlet obj = {  a : 1 };\n\nconsole.log(`before execute obj.a = ${obj.a}`);\n\nfunction updateValue(anyObject){\n    anyObject.a += 2;\n}\n\nupdateValue(obj);\n\nconsole.log(`after execute obj.a = ${obj.a}`);\n\n// 결과\n// before execute a = 1 \n// after execute a = 3\n\n\n왜 이런 결과를 얻게 될까? 예시 코드의 obj에 메모리 주소 100이 할당 되었다고 가정하자. updateValue(anyObject)의\n인자로 obj를 넘겼을 때, 이 인자는 obj와 같은 주소를 참조하게 된다.\n\n따라서 해당 인자의 값이 변경 되었을때, 같은 주소를 참조하고 있는 obj의 값도 변경되게 된다.\n\n원본을 변경하지 않은 채 같은 동작을 처리하고 싶다면 원본 obj의 copy를 만들면 된다.\n\n>  This is one of the basics of immutable style of programming. ..이라고 한다.\n\nlet obj = { a : 1 };\n\nconsole.log(`before execute obj.a = ${obj.a}`);\n\nfunction updateValue(anyObject){\n    let copy = Object.assign({}, anyObject); \n    console.log(anyObject === copy) // false. 참조값이 다르다.\n    copy.a += 2;\n}\n\nupdateValue(obj);\n\nconsole.log(`after execute obj.a = ${obj.a}`);\n\n// 결과\n// before execute a = 1 \n// after execute a = 1\n\n\n\n만약 object가 아니라 array를 인자로 넘겨야 하는 경우에도 간단히 copy한 배열을 만들어서 동일하게 해결 할 수 있다.\n\n let copy = arr.map(val => val); \n console.log(arr === copy) // false. 참조값이 다르다.\n\n\n\n\n하지만 객체 배열 형태라면 어떨까?\n\nlet arr = [{a:1}, {b:2}];\n\nfunction addToArray (anyArray, value){\n    let newArray = anyArray.map(val => val);\n    newArray.push(value);\n    newArray[0].a = 2;\n}\n\naddToArray(arr, {c:3});\nconsole.log(arr); \n\n// 결과\n// [{a:2},{b:2}]\n\n\n\nnewArray로 배열을 복사해 올때, map은 객체 a,b를 return 하는게 아니라 a,b에 할당된 메모리 주소를 return 한다.\n\n따라서 arr와 newArray는 .map을 통해 서로 다른 메모리 주소를 가지게 되었지만 배열 안의 객체 a,b는 여전히 같은 메모리 주소를\n참조하고 있으므로 위 결과가 나온다.\n\n이를 해결하려면 객체도 copy 해주면 된다.\n\nlet arr = [{a:1}, {b:2}];\n\nfunction addToArray (anyArray, value){\n    let newArray = anyArray.map(val => Object.assign({}, val));\n    newArray.push(value);\n    newArray[0].a = 2;\n}\n\naddToArray(arr, {c:3});\nconsole.log(arr);\n\n// 결과\n// [{a:1}, {b:2}];\n\n\n\n참고\n\nhttps://wayhome25.github.io/cs/2017/04/11/cs-13/\n[https://wayhome25.github.io/cs/2017/04/11/cs-13/]\n\nhttps://medium.com/swlh/call-by-value-call-by-reference-in-javascript-c5738600d9cd\n[https://medium.com/swlh/call-by-value-call-by-reference-in-javascript-c5738600d9cd]\n\nhttps://stackoverflow.com/questions/55333470/how-to-keep-an-array-with-objects-immutable-in-javascript\n[https://stackoverflow.com/questions/55333470/how-to-keep-an-array-with-objects-immutable-in-javascript]\n\n+ 참고 자료를 바탕으로 나름대로 요약, 정리 해보았습니다. 혹시 잘못 이해한 내용이 있다면 코멘트 부탁드립니다 (웃음)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/smile.png]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/726499383"
  },
  {
    "pageContent": "[OJT] 클린 코드\n\n\nCLEAN CODE\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/96632836#Clean-Code]\n\n\nSOLID PRINCIPLES EVERY DEVELOPER SHOULD KNOW\n[https://blog.bitsrc.io/solid-principles-every-developer-should-know-b3bfa96bb688]\n\n\nHTTPS://WWW.YOUTUBE.COM/WATCH?V=EDWBHP_K_9Y\n[https://www.youtube.com/watch?v=edWbHp_k_9Y]\n\n\nHTTPS://WWW.YOUTUBE.COM/WATCH?V=17KCHWOWGMS\n[https://www.youtube.com/watch?v=17KCHwOwgms]\n\n\nHTTPS://BLOG.BYTEBYTEGO.COM/P/GOOD-CODE-VS-BAD-CODE\n[https://blog.bytebytego.com/p/good-code-vs-bad-code]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/936902709"
  },
  {
    "pageContent": "[OJT] AST\n\nAST === Abstract Syntax Tree\n\nhttps://gyujincho.github.io/2018-06-19/AST-for-JS-devlopers\n[https://gyujincho.github.io/2018-06-19/AST-for-JS-devlopers]\n\nTSC, V8와 같은 트랜스파일러/런타임 플랫폼 뿐만 아니라 우리가 사용하는 eslint와 같은 대부분의 개발 보조 도구 또한 AST를 기반으로\n코드의 문제점을 파악한다.\n이를 이용해 특정 코드 패턴을 AST 기반으로 파악해 고쳐주는 prettier, codemod같은 프로그램을 만들수 있다.\n\n아래 도구를 이용해 실제로 AST가 어떻게 생성되는지 볼 수 있다.\n\n * http://int3.github.io/metajs/ [http://int3.github.io/metajs/]\n\n * https://astexplorer.net/ [https://astexplorer.net/]\n\n * https://ts-ast-viewer.com/ [https://ts-ast-viewer.com/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2342289431"
  },
  {
    "pageContent": "[OJT] POSIX\n\n * stdout / stderr\n\n * CR / LF\n\n * EOL\n   \n   * https://velog.io/@jangws/EOL%EC%9D%84-%EB%84%A3%EC%96%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EC%99%80-git%EC%97%90%EC%84%9C-CRLF-EOL-%EC%B0%A8%EC%9D%B4%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\n     [https://velog.io/@jangws/EOL%EC%9D%84-%EB%84%A3%EC%96%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EC%99%80-git%EC%97%90%EC%84%9C-CRLF-EOL-%EC%B0%A8%EC%9D%B4%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95]\n   \n   * 이와 같은 문제점의 사례로 PHP에서는 EOL 안넣으면 인터프리터가 무한대기 상태로 빠지는 버그가 존재했다. (~ 5.7 / 그 이후는\n     모름)\n   \n   * vscode는 친절하므로 알아서 EOL를 넣도록 도와주는 설정이 존재한다\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2844655931/2023-11-24%20at%2011.13.16@2x.png?api=v2]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2844655931"
  },
  {
    "pageContent": "SSO\n\nhttps://ecubelabs.atlassian.net/browse/CCNB-4551\n[https://ecubelabs.atlassian.net/browse/CCNB-4551]\n\n\n\n * 기본 개념\n   * SSO의 구성요소\n     * Service Provider; SP (== Relying Party; RP)\n     * Identity Provider; IdP\n   * SSO 구현을 위한 인증 방식\n     * 인증 대행(Delegation)\n     * 인증 정보 전달(Propagation)\n * References\n\n\n\n--------------------------------------------------------------------------------\n\n\n기본 개념\n\nSingle sign-on(이하 SSO)의 약어로, 한번의 사용자 인증으로 여러가지 서비스를 인증 없이 이용할 수 있도록 하는 기술적 정의에\n해당됩니다.\n\nSSO로 여러 문제를 해결할 수 있는데, 기술적인 문제와 관리적인 문제 모두 해당됩니다.\n\n * 기업이나 단체에서 다양한 정보시스템/외부서비스 이용 및 구축에 따른 운영 복잡성 증가 문제\n\n * PKI, 생체인식 등 다양한 사용자 인증 기술들의 활성화 (???: 지문 인식으로 사이트 로그인하게 해주세요) 참고로 TouchID는\n   디바이스에 인증정보가 있기 때문에 SSO가 아니다.\n\n * 사용자 인증 정보의 중앙 관리 (ex. 대기업, 정부 기관)\n   \n   * 사용자 관리 효율 증진\n   \n   * 보안 강화 (정보를 해킹당해도 중앙 관리중인 인증 정보만 변경하면 됩니다.)\n\n아래와 같은 프로토콜을 이용해서 SSO를 구현할 수 있으며, 단순히 프로토콜이기 때문에 당연히 직접 구현하거나 다른 솔루션을 이용해야 합니다.\n\n * OAuth (참고 [https://minwan1.github.io/2018/02/24/2018-02-24-OAuth/]): 인증이나 권한\n   부여를 위한 표준 프로토콜입니다.\n   일반적으로 패스워드를 드러내지 않고 Provider(?)의 계정을 이용하여 다른 서비스에 인증하려고 할 때 주로 사용합니다.\n\n * SAML\n\n\nSSO의 구성요소\n\n\nSERVICE PROVIDER; SP (== RELYING PARTY; RP)\n\n사용자가 접근하려고 하는 서비스를 말합니다.\n\n\nIDENTITY PROVIDER; IDP\n\n사용자 인증을 대행하는 구성요소.\n인증 후 사용자 정보가 담긴 SAML Assertion이나 토큰 등을 발행을 담당합니다.\n\n\nSSO 구현을 위한 인증 방식\n\nSSO는 인증을 어디서 시작하는지의 차이로 인증 방법이 크게 두가지로 나뉩니다.\n\n\n인증 대행(DELEGATION)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/478937524/image-20200403-101831.png?api=v2]\n\n\n인증 정보 전달(PROPAGATION)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/478937524/image-20200403-101837.png?api=v2]\n\n\nREFERENCES\n\n * https://showerbugs.github.io/2017-11-16/OAuth-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\n   [https://showerbugs.github.io/2017-11-16/OAuth-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C]\n\n * http://www.nextree.co.kr/oauth-2reul-iyonghan-sso-hwangyeong-gucug-1-2/\n   [http://www.nextree.co.kr/oauth-2reul-iyonghan-sso-hwangyeong-gucug-1-2/]\n\n * https://helloworld-88.tistory.com/98 [https://helloworld-88.tistory.com/98]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/478937524"
  },
  {
    "pageContent": "개발자 환경 설정\n\n이 문서에는 이큐브랩에서 개발자로 일하기 위해 반드시 설정해야 하는 것들만 기술한다.\n\n윈도우 장비는 더이상 지급하지 않는다.\n\n\n\n * 1. 구글, ERP 계정\n * 2. 메신저\n   * 2.1. Discord\n     * 2.1.1. 설치\n   * 2.2. Slack\n     * 2.2.1. 설치\n     * 2.2.2. 로그인\n     * 2.2.3. Display name 설정\n   * 2.3. Mail\n * 3. Atlassian\n   * 3.1. 계정 확인\n   * 3.2. 아바타 설정\n * 4. Git\n   * 4.1. Github 에 ssh key 등록\n     * 4.1.1. Github 가입\n     * 4.1.2. ssh key 생성\n     * 4.1.3. ssh key 등록\n     * 4.1.4. Public profile > Name 변경\n   * 4.2. Github Ecube Labs 조직에 등록 요청\n   * 4.3. 추천 Git GUI\n * 5. Xcode 설치\n * 6. Docker Desktop 설치\n * 7. 화면 잠금 설정\n\n\n1. 구글, ERP 계정\n\n경영지원팀에게 전달 받는다.\n\n앞으로 본 문서에서 구글 계정은 경영지원팀에서 전달 받은 이큐브랩 도메인의 구글 계정을 의미한다.\n\n(ex - id.kim@ecubelabs.com)\n\n\n2. 메신저\n\n\n2.1. DISCORD\n\n사내 메신저는 Discord 를 사용한다.\n\n\n2.1.1. 설치\n\nhttps://discord.com/download [https://discord.com/download]\n\n\n2.2. SLACK\n\n시스템 관련 각종 알람은 Slack 으로 받는다.\n\n\n2.2.1. 설치\n\nSlack for Mac [https://itunes.apple.com/kr/app/slack/id803453959?l=en&mt=12]\n\n\n2.2.2. 로그인\n\nhttps://ecube-labs.slack.com [https://ecube-labs.slack.com]\n\n구글 계정으로 로그인 할 수 있다. 가입 필요 없음.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image2018-11-28_17-26-3.png?api=v2]\n\n\n2.2.3. DISPLAY NAME 설정\n\nSlack > 아바타 클릭 > Edit profile\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210203-022621.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210203-022644.png?api=v2]\n\nDisplay name 에 자신의 닉네임을 입력한다.\n\n\n2.3. MAIL\n\nMac 기본 메일 클라이언트에 구글 계정을 추가한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210511-044901.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210511-044954.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210511-045334.png?api=v2]\n\n\n3. ATLASSIAN\n\n\n3.1. 계정 확인\n\n이큐브랩 신규 입사자를 위한 문서\n[https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/128844026]\n\n구글 계정으로 로그인 할 수 있다. 가입 필요 없음.\n\n\n3.2. 아바타 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210526-011234.png?api=v2]\n\n아바타를 설정하지 않으면 스크럼 보드에서 누가 누군지 구분이 안된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image-20210526-011453.png?api=v2]\n\n(5838, 5839 는 다른 사람에게 할당 된 이슈임)\n\n\n4. GIT\n\n형상 관리는 git 을 사용한다.\n\nGit GUI는 license 가 허용하는 범위 내에서 자유롭게 사용하면 된다.\n\n\n4.1. GITHUB 에 SSH KEY 등록\n\n기존에 Github 에 등록한 ssh key 가 없는 경우에만 진행\n\n등록한 ssh key 가 있으면 4.1. 건너뜀\n\n\n4.1.1. GITHUB 가입\n\nhttps://github.com/ [https://github.com/]\n\n회사가 관리하는 계정이 아니라 개인 계정을 사용하기 때문에 그냥 본인의 정보로 가입하면 된다.\n\n\n4.1.2. SSH KEY 생성\n\n터미널에서 다음과 같이 입력한다.\n\n> ssh-keygen\n\nprompt 가 뜨면 아무것도 입력하지말고 계속 엔터를 친다.\n\n끝.\n\n\n4.1.3. SSH KEY 등록\n\nhttps://github.com/settings/ssh/new [https://github.com/settings/ssh/new]\n\nKey 부분에 자신의 ssh public key 를 복붙하면 된다.\n\nssh public key 는 다음의 경로에 있다.\n\n~/.ssh/id_rsa.pub\n\nTitle 은 입력하지 않아도 상관 없음.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image2018-6-22_11-52-45.png?api=v2]\n\n\n4.1.4. PUBLIC PROFILE > NAME 변경\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image2019-9-3_18-0-33.png?api=v2]\n\n이미 GitHub 계정이 있었다면 Public Profile 에 자신의 닉네임을 입력한다.\n\nWhy? 닉네임을 입력하지 않으면 코드 리뷰를 요청할때 누구에게 요청해야 하는지 알 수가 없다.\n\nex) selenehyun = ?\n\n\n4.2. GITHUB ECUBE LABS 조직에 등록 요청\n\nGithub 관리자 (Tim) [https://ecubelabs.atlassian.net/wiki/spaces/INFRA]에게 등록 해 달라고\n요청.\n\n\n4.3. 추천 GIT GUI\n\nSourcetree [https://www.sourcetreeapp.com/]\n\nGit Extensions [https://gitextensions.github.io/]\n\n\n5. XCODE 설치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/image2018-11-28_14-35-4.png?api=v2]\n\n설치 후 한번 실행해서 각종 동의를 진행할 것.\n\n\n6. DOCKER DESKTOP 설치\n\ngit submodule 기반으로 구성해둔 통합 개발환경을 실행하기 위해서는 Docker desktop이 필요하다.\n\n * https://github.com/Ecube-Labs/ecubelabs\n   [https://github.com/Ecube-Labs/ecubelabs]\n\n * https://github.com/Ecube-Labs/haulla [https://github.com/Ecube-Labs/haulla]\n\n컨테이너 기반으로 빌드한 여러 서비스를 한번에 실행하여 로컬에서도 실제 운영환경과 거의 비슷하게 개발 및 테스트를 할 수 있다.\n\n\n\n7. 화면 잠금 설정\n\n자리를 비울때마다 잠자기 설정을 하고 떠나는게 보안상 가장 좋지만 이렇지 못한 경우 물리적 해킹을 막기 위해 아래와 같이 설정한다.\n\n * 설정 -> 화면 잠금 -> 비활성 상태인 경우 화면 보호기 시작 -> 3분 이후\n   (그 이하는 재량껏. 3분 이하는 가능한 하지 말것)\n\n * 설정 -> 화면 잠금 -> 화면 보호기 시작 후 또는 디스플레이가 꺼진 후 암호 요구 -> 즉시\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40108046/2023-11-03%20at%2013.50.38@2x.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40108046"
  },
  {
    "pageContent": "[OJT][Network] Security\n * SSL/TLS Certificate\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048636456/SSL+TLS+Certificate]\n * CA (Certification Authority)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048702079/CA+Certification+Authority]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048898561"
  },
  {
    "pageContent": "SSL/TLS Certificate\n\n\nSSL/TLS 인증서란?\n\n비대칭 키 방식을 이용해 서버와 클라이언트 끼리만 데이터를 주고 받을수 있도록 서로의 신원을 보증하기 위해 사용된다.\n\n인증서는 인증기관(CA)에 의해서 서명되어 생성되며, 보통 널리 알려진 믿을수 있는 CA가 Root CA로서 기능한다.\nRoot CA는 요구사항과 인증 절차가 굉장히 복잡한 만큼 인증서의 만료 기한이 굉장히 길며, 신뢰 체인이 길어질수록 신뢰성은 떨어지기 때문에\n만료 기한이 적은 편이다.\n\nSSL/TLS 방식은 인증서를 이용해 크게 두가지 절차를 거쳐 보안 통신을 할수 있게 되며 인증(검증) 및 암호화/복호화로 구분할 수 있는데,\n여기서는 PKI 라는 비대칭 암호화 방식 [https://www.ibm.com/kr-ko/topics/encryption]을 사용한다.\n(즉, Public Key/Private Key가 존재한다)\n\nSSL과 TLS의 차이?\n\nSSL이 처음 대중화 되는 과정에서 SSL이라는 단어가 널리 퍼졌고, TLS는 SSL의 후속 버전이다.\n지금은 거의 모든 환경에서 SSL이 아닌 TLS로 통신을 하고 있지만 많은곳에서 SSL과 TLS를 같은 취급하며 설명을 하고 있기 때문에 많은\n웹사이트에서 SSL/TLS 로 표기를 하고 있다.\n\nAWS 피셜 현재 전 세계에서 모든 SSL 인증서가 사용되고 있지 않다고 함.\nhttps://aws.amazon.com/ko/compare/the-difference-between-ssl-and-tls/\n[https://aws.amazon.com/ko/compare/the-difference-between-ssl-and-tls/]\n\n\n\n\n왜 필요한가?\n\n누구나 퍼블릭 네트워크를 통해 데이터를 주고 받는 순간부터 언제든지 해커에 의해 스니핑\n[https://nordvpn.com/ko/blog/what-is-sniffing-attack/]을 당할 수 있기 때문.\n\n스니핑을 가장 이상적으로 방지하려면 중간 라우터/스위치 영역에 있는 모든 연결이 보안 연결으로 이루어져야 하지만,\n현실적으로 모든것을 TLS 통신하도록 만들기는 비용/리소스 측면에서 어렵기 때문에 현재로서는 스니핑을 통해 가로챈 데이터를 해석하지 못하게\n암호화 하는것을 더 중요하게 여긴다.\n\n * 스니핑(Sniffing): 해커가 서버-클라이언트 간의 패킷(데이터) 등 을 훔쳐보는 행위를 말한다.\n\n * 스푸핑(Spoofing): 해커가 서버-클라이언트 간의 패킷(데이터) 등 을 위/변조 하여 전달하는 행위를 말한다.\n\n\n\n\n암호화가 이루어지는 방식\n\n발신자 측에서는 원하는 수신자만 복호화 할 수 있도록 데이터를 약속한 규칙(Session Key)대로 섞는(스크램블링) 한다.\n\n\n\n\n핸드쉐이킹 과정\n\n핸드쉐이킹을 정상적으로 거쳐야 위에서 언급한 “원하는 수신자” 가 될 수 있으며, 이 과정에서 Session Key를 획득한다.\n\n 1.  클라이언트 → 서버: 연결 (Syn)\n\n 2.  클라이언트 ← 서버: 연결 수락 (Ack)\n\n 3.  클라이언트 → 서버: TLS 버전/사용 가능한 암호화 알고리즘 및 무작위 메세지를 포함하여 데이터 전송\n\n 4.  클라이언트 ← 서버: 서버의 인증서, 사용할 암호화 알고리즘 및 서버측 무작위 메세지 포함하여 데이터 전송\n\n 5.  클라이언트: 인증. 서버를 신뢰 할 수 있다고 판단함\n\n 6.  클라이언트 → 서버: 서버에서 전달해준 PubKey를 통해 ‘무작위 예비 마스터 키’ 를 암호화하여 전송\n     (서버에서만 복호화 가능)\n\n 7.  클라이언트 ← 서버: 받은 무작위 메세지/보낸 무작위 메세지/복호화 된 무작위 예비 마스터 키 를 조합하여 세션 키를 생성하여 전송\n\n 8.  클라이언트 → 서버: 받은 세션 키로 “완료” 메세지를 암호화 하여 전달\n\n 9.  클라이언트 ← 서버: 동일한 세션 키로 “완료” 메세지 암호화 하여 전달\n\n 10. 클라이언트에서 정상적으로 복호화가 되면 핸드쉐이킹 완료\n\n위와 같은 과정을 통해 수신자는 알고 있는 규칙(Session Key)를 기반으로 데이터를 복호화 하여 읽을수 있으며,\n알려진 인증 기관(Root CA)을 신뢰하고 있는 인증서의 경우, 공증의 원리와 같이 Root CA의 Public Key를 통해 하위 기관들을\n인증할 수 있기 때문에 브라우저는 신뢰 할 수 있다고 판단하여 인증을 마친다.\n(인증서는 Trust chain 구조를 가지기 때문에 Root CA를 신뢰할 수 있다면 하위에 있는 인증기관도 신뢰 할 수 있다고 판단한다.)\n\n이 과정을 핸드쉐이킹이라고 부른다.\n\n\n\n\n정리\n\n위와 같은 이유와 과정을 통해 우리는 서버-클라이언트 간의 암호화 통신이 가능한것이다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048636456"
  },
  {
    "pageContent": "CA (Certification Authority)\n\n\nCOMMON CA DATABASE (CCADB)\n[https://ccadb.my.salesforce-sites.com/ccadb/AllCAAIdentifiersReport]\n\n널리 알려진 CA라고 부를수 있는 인증 기관 목록을 리눅스 재단에서 관리하며, CCADB 라고 불리고 있다.\n\n우리가 사용하는 Google Chrome 브라우저 또한 여기에 알려진 인증서를 모두 포함하여 사용할 수 있도록 개발되어 있다.\n위와 같이 브라우저에 미리 포함된 인증서는 Pre-installed CA Certificate 라고 부를수 있다.\n\n브라우저마다 미리 설치된 CA 인증서는 다를수 있으며, 버전마다 다를수도 있다.\n다음과 같은 Root CA 정책을 확인해보면 어떤 브라우저 버전부터 어떤 인증서가 포함되거나, 호환되는지 알 수 있다.\nhttps://www.chromium.org/Home/chromium-security/root-ca-policy/\n[https://www.chromium.org/Home/chromium-security/root-ca-policy/]\n\n\n\n\nROOT CA\n\nimage-20240610-023853.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3048702079/image-20240610-023853.png?api=v2]\n\n일반적으로 CCADB에 등재된 인증 기관들에서 발급한 인증서를 사용해야 대부분의 브라우저/클라이언트에서 호환 된다.\n이미 알려져 있어 신뢰 할 수 있는 인증서로 취급하기 때문이다.\n\n이 Root CA로 구분되는 인증 기관들의 서명 값이 절대로 유출되지 않거나, 즉시 대처가 가능한 방안이 마련되어 있다고 믿고 써야 한다.\n만약 Root CA의 서명이 털리면 해커는 직접 서명해서 가짜 웹사이트를 신뢰할 수 있는 웹 사이트라고 표시되게 할 수 있다.\n\n또한, Root CA는 참조할 상위 인증서의 Private Key가 없으므로 당연히 Self Signed 인증서라고 볼 수 있다.\nSelf signed 인증서는 누구나 만들 수 있지만 누가 서명하는지, 어떻게 관리되는지에 대한 영향이 매우 크다고 볼 수 있다.\n\n\n\n\nINTERMEDIATE CA (ICA)\n\n중간 인증 기관이라고 불리는 이 인증 기관은, 대부분 Root CA의 서명은 그대로 가져가되, Root CA에서 관리가 용이하게 하기 위한\n개념으로 도입됐다.\n\nRoot CA 하위에 바로 실 사용자가 접근하는 인증서(End-entity Certification)를 서명하게 되면 여러가지 예상되는 문제가\n생긴다.\n\n * 하위 인증서 서명을 위해 빈번한 Root CA Private Key의 접근으로 인한 노출/유출 위험 상승\n\n * Root CA 의 Signature/Private Key 유출 시 즉각적인 대응 어려움\n\n이 외에도 다양한 문제가 존재할 수 있지만 Root CA는 최대한 직접적으로 사용하지 않는 방향을 지향하고 있다.\nAWS에서 Root Account 를 사용하는 대신, Admin 권한을 가진 IAM User를 만들어 사용하라는 이치와 같다.\n\n이를 위해 AWS 같은 경우 필요에 따라 Root/Intermediate 인증서가 언제든지 순환되어 변경할 수 있다며 고지하고 있다.\nhttps://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html\n[https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html]\n\n\n\n\nEND ENTITY CERTIFICATE\n\n실질적으로 End user가 참조하는 인증서에 해당한다.\n클라이언트가 서버에 연결해서 받아오는 인증서가 이것이고, 이 인증서에는 상위 체인에 있는 인증서 정보까지 모두 포함되어 있다.\n\n이 인증서는 아래에서 언급할 Self-signed 인증서일수도 있고, 상위 인증서로부터 서명된 인증서일수도 있다.\n\n\n\n\nSELF-SIGNED CERTIFICATE\n\nRoot CA처럼 우리가 직접 인증서를 서명하여 생성하고, 이를 TLS 통신에 사용할 수 있다.\n\n하지만 이런 인증서를 아무대서나 신뢰해주는것은 아니므로 보통 내부 망에서 사용할때만 직접 서명한 인증서를 사용하여 보안 통신을 한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048702079"
  },
  {
    "pageContent": "[OJT][리팩토링] jscodeshift\n\nhttps://github.com/facebook/jscodeshift\n[https://github.com/facebook/jscodeshift]\n\n변경해야 하는 파일이 많을때 규칙(코드 컨벤션)을 적용해 코드를 쉽게 변경할수 있게 돕는 도구다.\nAST를 기반으로 동작하기 때문에 정확히 원하는 부분의 코드를 원하는 형식으로 변형할 수 있다.\n\n--------------------------------------------------------------------------------\n\n예를 들어 대충 아래와 같이 transform 코드를 작성하면 지정한 모듈을 import 하는 코드만 가져온 뒤 사용되지 않으면 지울수 있다.\n\n// transform.js\nmodule.exports = function (fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n\n  // '@testing-library/react' 모듈을 import 하는 구문을 찾는다\n  const importDeclaration = root.find(j.ImportDeclaration, {\n    source: {\n      value: '@testing-library/react',\n    },\n  });\n\n  // import 구문이 없으면 변환하지 않는다\n  if (importDeclaration.size() === 0) {\n    return null;\n  }\n\n  // import 구문에서 가져온 식별자들을 모은다\n  const importedNames = new Set();\n  importDeclaration.find(j.ImportSpecifier).forEach((path) => {\n    importedNames.add(path.node.imported.name);\n  });\n\n  // 가져온 식별자들을 사용하는 구문들을 찾는다\n  const usedNames = new Set();\n  root.find(j.Identifier).forEach((path) => {\n    if (importedNames.has(path.node.name)) {\n      usedNames.add(path.node.name);\n    }\n  });\n\n  // 사용하지 않는 식별자들을 필터링한다\n  const unusedNames = [...importedNames].filter((name) => !usedNames.has(name));\n\n  // 사용하지 않는 식별자들을 import 구문에서 제거한다\n  unusedNames.forEach((name) => {\n    importDeclaration\n      .find(j.ImportSpecifier, {\n        imported: {\n          name,\n        },\n      })\n      .remove();\n  });\n\n  // import 구문이 비었으면 제거한다\n  if (importDeclaration.find(j.ImportSpecifier).size() === 0) {\n    importDeclaration.remove();\n  }\n\n  // 변환된 코드를 반환한다\n  return root.toSource();\n};\n\n위와 같은 코드가 transform.js로 존재한다고 가정하면 아래와 같이 실행할 수 있다.\n\nnpx jscodeshift -t ./transform.js src/**/*.test.tsx --parser=tsx\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2752446501/2023-07-10%2012-10-15.2023-07-10%2012_24_56.gif?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2752446501"
  },
  {
    "pageContent": "SAML 기반 SSO 구현\n\nhttps://ecubelabs.atlassian.net/browse/CCNB-4551\n[https://ecubelabs.atlassian.net/browse/CCNB-4551]\n\n\n\n * SAML 2.0이란?\n   * 구성요소\n   * Trust Agreement\n   * SSO Call flow\n * 단점\n * 정리\n * References\n\n\n\n--------------------------------------------------------------------------------\n\n\nSAML 2.0이란?\n\nSAML은 Security Assertion Markup Language의 약어입니다.\n단어를 보면 짐작할 수 있듯이, 단순히 인증과 권한에 대한 정보를 교환하기 위한 표준으로 많은 기업에서 SSO를 구현하기 위해 사용하는\n규약입니다.\n\nSAML을 사용해서 IdP-Initiated와 SP-Initiated SSO 모두 구현이 가능하고 인증 요청을 처음에 어디서 시작하냐에 따라\n달라질 뿐입니다.\n우리는 SP를 구현해야 하기 때문에 여기서는 SP의 역할을 중심으로 살펴볼 예정입니다.\n(SAML Push 모델이냐, Pull 모델이나 다르게 동작하지만 지금은 Pull 모델을 구현하는것을 기준으로 작성한 문서입니다.)\n\n\n구성요소\n\n구현을 위해 필요한 구성요소를 먼저 살펴보겠습니다.\n잘 모르겠다면 꼭 SSO\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/478937524/SSO] 를 먼저 보고\n와주세요.\n\n * Client: 주로 사용자가 되는 브라우저같은 인증을 요구하는 단말을 말합니다.\n\n * SP: 클라이언트가 접근하려고 시도하는 서비스나 어플리케이션을 말합니다.\n\n * IdP: 사용자 인증과 SAML Assertion 발행을 담당합니다.\n\n * SAML Assertion [http://saml.xml.org/assertions]: 사용자 인증을 위해 IdP가 SP에게 전달하는 보안\n   정보.\n   주로 사용자 정보와 권한 등의 내용을 XML 문서로 제공하며, 변조를 막기 위해 전자서명을 합니다.\n\n * SAML Request: SP가 IdP에게 인증 요청하는것을 말합니다.\n   인증 요청을 함으로써 IdP에게 인증 위임을 할 수 있습니다.\n\n * CoT (Circle of Trust): 하나의 IdP를 공유하는 SP들로 구성합니다.\n\n * Metadata: SSO를 활성화 하는 SP, IdP가 생성하는 XML 파일.\n   \n   * 이 데이터를 교환을 통해 SP, IdP의 신뢰 관계가 설립되며 아래와 같은 정보를 교환한다고 합니다.\n     \n     * Entity ID\n     \n     * Encryption key\n     \n     * Endpoint URL (실제 서버 주소를 말하는것으로 보임)\n\n * ACS URL (Assertion Consumer Service URL): IdP의 최종적인 SAML 응답을 특정 URL로 POST하도록\n   요구할수 있는 주소입니다.\n   \n   * 흔히 언급되는 callback url 같은 개념과 비슷합니다.\n\n\nTRUST AGREEMENT\n\nSAML을 이용한 SSO에서는 IdP와 SP간의 Provisioning 과정에서 인증서와 Metadata를 교환하므로서 CoT를 설립합니다.\n이를 통해 SP는 IdP의 사용자 정보를 신뢰할수 있는것입니다.\n\n방금 말했듯이 SAML 2.0에서 IdP와 SP가 신뢰 관계를 맺기 위해서는 각각의 Metadata를 교환해야 하는데, 실제 교환은 관리자에\n의해 수동으로(파일 전달 or xml 복붙) 전달되는 가장 확실한 방식을 주로 사용한다고 합니다.\n\n\nSSO CALL FLOW\n\n여기서는 항상 보안 연결을 기본으로 합니다.\n\n[/wiki/download/attachments/485392558/sso-call-flow.drawio.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/485392558/image-20210518-030843.png?api=v2]\n\n출처: https://support.google.com/a/answer/6262987?hl=ko\n[https://support.google.com/a/answer/6262987?hl=ko]\n\nSummary\n\nDescription\n\n1\n\n어플리케이션 접근\n\n사용자가 브라우저로 SP에 접근합니다.\n여기서는 브라우저에 SP에 대한 기존 세션이 없는 시나리오입니다.\n\n2\n\nSAML Request 생성\n\n클라이언트에게 전달하기 위해 SP는 SAML 인증 요청(== SAML Request)을 생성합니다.\n\n3\n\nIdP로 SAML Request를 리디렉션 하도록 유도\n\nSP는 IdP와 직접 통신하지 않고 사용자의 브라우저가 IdP로 인증 요청을 리디렉션하도록 합니다. (인증 위임)\n\n4\n\nSP에게 얻은 SAML Request를 그대로 IdP에게 전송\n\n브라우저는 SP로부터 받은 SAML Request를 그대로 IdP에게 보내서 인증 요청을 합니다.\n\n여기서 IdP URL은 Trust Agreement과정에서 교환한 Metadata에 포함되어 사전 구성되어 있기 때문에, SP와 IdP는 서로\n신뢰 관계에 있는것을 가정합니다.\n\n * SAML Request에는 요청을 생성한 SP를 나타내는 정보가 포함됩니다.\n   IdP는 여기에 있는 정보를 통해 어떤 SP가 인증을 요청했는지 알 수 있으며, SAML Request가 정상적으로 수행되려면 IdP에\n   ACS URL이 등록되어 있어야 합니다.\n   \n   * ACS URL은 IdP가 최종적인 SAML Response를 SP에게 POST하기 위해 필요한 정보입니다.\n\n * 인증 요청을 IdP로 보낸 뒤에는 SAML Assertion을 Redirection or POST binding을 통해 SP에게 줄 수\n   있습니다.\n\n5\n\n세션이 있다면 유효한지 검사. 없거나 유효하지 않다면 로그인 요청\n\nIdP는 신뢰 관계에 있는 SP가 생성한 SAML Request인지 확인하고, SAML Request에 포함된 정보를 통해 사용자의 세션\n유효성을 검사합니다.\n\n세션이 유효하다면 IdP는 8번 흐름을 태워 인증 정보의 유효성을 검사하게 됩니다.\n세션이 유효하지 않다면 IdP는 6번 흐름을 태워 사용자에게 로그인을 요청합니다.\n\n6\n\n로그인 요청\n\n사용자에게 IdP에서 요구하는 인증 방식을 사용하여 사용자 인증을 수행하도록 요구합니다.\n\n7\n\n사용자 인증 정보 제출\n\n사용자는 IdP가 요구한 자격 증명 정보를 IdP에게 제출합니다.\n\n이 과정에서 SP는 사용자 인증 과정에 관여하지 않습니다.\n\n8\n\n인증 정보 유효성 검사\n\nIdP는 자격 증명 정보를 LDAP 서버에 제출합니다.\n\n경우에 따라 LDAP 서버를 사용하지 않을 수 있지만, 여기서는 사용하는것을 기준으로 설명합니다.\n\n9\n\n유효성 검사 결과 반환\n\nLDAP 서버는 디렉토리에서 자격 증명을 확인하고 유효성 검사 결과를 IdP로 보냅니다.\n\n만약 여기서 유효성 검사에 실패했다면 IdP는 다시 6번 흐름을 태워 사용자에게 로그인을 요청합니다.\n\n10\n\nSAML Response 생성\n\nLDAP 서버를 통해 유효성 검사를 성공하면 SP에게 보내주기 위해 SAML Assertion이 포함된 SAML Response를 생성합니다.\n\nSAML Assertion은 IdP에 의해서 전자 서명됩니다.\n\n11\n\nSP로 SAML Response를 리디렉션 하도록 유도\n\n브라우저는 IdP로부터 받은 SAML Response를 그대로 SP로 리디렉션하도록 합니다.\n\n12\n\nPOST로 SAML Response 전달\n\n브라우저는 약속에 따라 SAML Response를 ACS URL에 POST합니다.\n\n13\n\nSAML Response 처리\n\nSP는 SAML Response에서 Assertion을 추출하여 전자 서명의 유효성을 검사하고, 전자 서명을 이용하여 사용자 인증을 처리합니다.\n\n14\n\n처리 결과 반환\n\nSP는 사용자가 요구한 리소스를 제공합니다.\n\n * SP는 브라우저에 세션을 설정하며, 추가적인 리소스 요청이 발생하는 경우 요청에 인증 정보를 포함시킵니다. (like\n   Authorization header)\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]참고 다이어그램\n[https://ecubelabs.atlassian.net/wiki/download/attachments/485392558/image-20200407-045953.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/485392558/image-20200408-041423.png?api=v2]\n\n\n단점\n\n * SAML 기반의 SSO는 OAuth에 비해 스마트폰과 같은 외부 환경에서 제대로 지원하기 어려울수도 있다고 합니다.\n\n\n정리\n\n * SSO Call flow에 나온 흐름대로 데이터나 요청이 흘러갑니다.\n\n * 여기서 다루는 방식은 IdP에게 인증 정보를 전달받는 SP-initiated SSO 입니다.\n\n\nREFERENCES\n\n * https://www.itworld.co.kr/news/108736 [https://www.itworld.co.kr/news/108736]\n\n * https://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/SAML_SSO_deployment_guide/10_5_1/CUCM_BK_S52C3A64_00_saml-sso-deployment-guide-105/CUCM_BK_S52C3A64_00_saml-sso-deployment-guide-105_chapter_01.pdf\n   [https://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/SAML_SSO_deployment_guide/10_5_1/CUCM_BK_S52C3A64_00_saml-sso-deployment-guide-105/CUCM_BK_S52C3A64_00_saml-sso-deployment-guide-105_chapter_01.pdf]\n\n * http://www.knom.or.kr/knom-review/v7n2/1.pdf\n   [http://www.knom.or.kr/knom-review/v7n2/1.pdf]\n\n * https://www.nexpert.net/606 [https://www.nexpert.net/606]\n\n * https://docs.spring.io/autorepo/docs/spring-security-saml/1.0.x-SNAPSHOT/reference/htmlsingle/#glossary\n   [https://docs.spring.io/autorepo/docs/spring-security-saml/1.0.x-SNAPSHOT/reference/htmlsingle/#glossary]\n\n * http://www.thevruk.com/?p=317 [http://www.thevruk.com/?p=317]\n\n * https://www.sauru.so/blog/basic-of-oauth2-and-jwt/\n   [https://www.sauru.so/blog/basic-of-oauth2-and-jwt/]\n\n * https://support.procore.com/faq/what-is-the-difference-between-sp-and-idp-initiated-sso\n   [https://support.procore.com/faq/what-is-the-difference-between-sp-and-idp-initiated-sso]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/485392558"
  },
  {
    "pageContent": "LDAP란?\n\nhttps://ecubelabs.atlassian.net/browse/CCNB-4551\n[https://ecubelabs.atlassian.net/browse/CCNB-4551]\n\nhttps://medium.com/ecube-labs/4e5aecd358e3\n[https://medium.com/ecube-labs/4e5aecd358e3]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/489325153"
  },
  {
    "pageContent": "웹 개발자 환경 설정\n\n이 문서에는 이큐브랩에서 웹 개발자로 일하기 위해 반드시 설정해야 하는 것들만 기술합니다.\n\n\n\n * 웹 브라우저\n   * 필수 extensions\n * Node.js\n   * zshrc 준비\n   * nvm 설치\n   * Node.js 설치 (using nvm)\n     * Node.js 버전 변경 (using nvm)\n     * 설치 된 Node.js 목록 확인 (using nvm)\n     * 사용중인 Node.js 버전 확인\n * IDE\n   * Visual Studio Code\n     * 필수 extensions\n     * 선택 extensions\n * Postman\n * DB client\n * Docker\n   * Amazon ECR Docker Credential Helper 설치\n   * dockerconfig 설정\n     * ~/.docker/config.json\n * AWS\n   * awscli 설치\n   * gsts 설치\n   * awsconfig 설정\n     * ~/.aws/config\n     * ~/.aws/credentials (deprecated) - 더이상 설정하지 않아도 된다.\n       https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/52724014#gsts\n * Kubernetes (optional)\n   * kubectl 설치\n   * kubeconfig 설정\n     * ~/.kube/config\n   * aws-iam-authenticator 설치\n   * OpenLens\n     * Build on Mac\n       * 6.5.2\n       * 6.1.1-\n\n\n웹 브라우저\n\n크로미움 기반 브라우저 아무거나 사용해도 된다.\n\nChrome [https://www.google.com/chrome/]\n\nChromium [https://www.chromium.org/getting-involved/download-chromium]\n\nEdge [https://www.microsoft.com/en-us/edge]\n\n\n필수 EXTENSIONS\n\nReact Developer Tools\n[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en]\n\n\nNODE.JS\n\n\nZSHRC 준비\n\nOS\n\n확인 사항\n\nmacOS\n\nhome directory 에 .zshrc 가 있는지 확인. 없으면 생성 (참고\n[https://superuser.com/questions/244964/mac-os-x-bashrc-not-working])\n\n카탈리나(10.15) 이후 기본 쉘이 bash에서 zsh로 바뀌었다.\n\nLinux\n\nhome directory 에 .bashrc 가 있는지 확인. 없으면 생성\n\nWindows\n\n윈도우 장비는 더는 지급하지 않는다.\n\n\n\n\nNVM 설치\n\nWhat is nvm? [https://github.com/creationix/nvm]\n\n다음의 명령어를 터미널에 입력하면 nvm 이 설치 된다\n\n> curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | zsh\n\nnvm 설치가 완료되고 나면 터미널을 재시작해야 한다. (환경변수를 다시 로딩하기 위해, 재시작하지 않고 다시 로딩할 수 있지만 그런 고오급\n스킬은 위키에 적지 않겠다)\n\n\nNODE.JS 설치 (USING NVM)\n\n터미널에서 nvm 을 이용해 node.js 를 쉽게 설치할 수 있다\n\nLTS 버전의 node.js 를 설치하도록 한다\n\n> nvm install --lts\n\n(2018.10.31 기준)\n\n서버는 8.X 버전으로 동작하고 있기 때문에 호환성 문제가 확인되기 전까지 다른 major 버전의 node.js 는 사용금지\n\n\nNODE.JS 버전 변경 (USING NVM)\n\n> nvm use 버전\n\n\n설치 된 NODE.JS 목록 확인 (USING NVM)\n\n> nvm list\n\n\n사용중인 NODE.JS 버전 확인\n\n> node --version\n\n\nIDE\n\n웹 개발자들은 IDE 로 VSCode 를 사용 한다.\n\nlint, prettier 규칙을 지킬 수 있으면 원하는 IDE 를 사용해도 된다.\n\n추천 IDE 는 Visual Studio Code\n\n * 대부분 이걸 사용하고 있기 때문\n\n\nVISUAL STUDIO CODE\n\nhttps://code.visualstudio.com/ [https://code.visualstudio.com/]\n\n\n필수 EXTENSIONS\n\n * Code Spell Checker\n   [https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker]\n\n * ESLint\n   [https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint]\n\n * Prettier\n   [https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode]\n\n * GitLens [https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens]\n\n * TODO Highlight\n   [https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight]\n   \n   * 다음과 같이 데이터에서 특정 키워드들을 highlight 하는 extension \n     \n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image2019-3-6_12-29-11.png?api=v2]\n     \n     \n     \n   \n   * Open VS Code > ⇧⌘P > Preferences: Open Settings (JSON) 검색 > settings.json\n     편집\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image-20210303-025043.png?api=v2]\n     \n     settings.json 을 다음과 같이 편집한다\n     \n     settings.json\n     \n     {\n       // your settings go here\n       // ...\n       \"todohighlight.keywords\": [\n         {\n           \"text\": \"NOTE:\",\n           \"color\": \"#222\",\n           \"backgroundColor\": \"yellow\",\n           \"overviewRulerColor\": \"grey\"\n         },\n         \"XXX:\",\n         \"HACK:\",\n         \"OPTIMIZE:\",\n         \"HARDCODING:\",\n         {\n           \"text\": \"BUG:\",\n           \"isWholeLine\": true,\n           \"color\": \"red\"\n         }\n       ],\n       \"todohighlight.defaultStyle\": {\n         \"color\": \"#FFF\",\n         \"backgroundColor\": \"#ffab00\",\n         \"overviewRulerColor\": \"#ffab00\",\n         \"cursor\": \"pointer\",\n         \"border\": \"1px solid rgba(255,255,255, .68)\",\n         \"borderRadius\": \"2px\"\n       }\n     }\n     \n     \n     \n\n * i18n-ally\n   [https://marketplace.visualstudio.com/items?itemName=lokalise.i18n-ally]\n   \n   * 다음과 같이 번역 키에 대한 미리보기를 제공하는 플러그인\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image2020-1-6_18-10-8.png?api=v2]\n     \n     // i18n-ally-custom-framework.yml\n     // 이 파일은 프로젝트마다 존재하므로 처음 프로젝트 셋업하는 사람만 추가하면 된다.\n     \n     languageIds:\n       - javascriptreact\n       - typescriptreact\n     \n     # https://github.com/lokalise/i18n-ally/blob/c9e45379d29e2e828b10973b9004e3bca5d1f474/src/frameworks/react.ts#L25\n     usageMatchRegex:\n       - \"[^\\\\w\\\\d](?:i18nKey=|FormattedMessage\\\\n\\\\s*id=|t\\\\(\\\\s*)['\\\"`]({key})['\\\"`]\"\n       - \"[^\\\\w\\\\d](?:formattedMessage)\\\\(.*?['\\\"`]?id['\\\"`]?:\\\\s*['\\\"`]({key})['\\\"`]\"\n     \n     * 첫번째 regex\n       \n       * [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image-20211102-053043.png?api=v2]\n         \n         id=\"\" 가 줄바꿈 된 경우 대응\n     \n     * 두번째 regex\n       \n       * [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image-20211102-053150.png?api=v2]\n         \n         useIntl 훅 사용하는 경우 대응\n\n\n선택 EXTENSIONS\n\n * GitHub Copilot\n   [https://marketplace.visualstudio.com/items?itemName=GitHub.copilot]\n\n * Git Graph\n   [https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph]\n   \n   * 커밋 그래프를 VSCode 안에서 확인할 수 있다.\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image-20211025-100314.png?api=v2]\n\n\nPOSTMAN\n\nhttps://www.getpostman.com [https://www.getpostman.com/]\n\n\nDB CLIENT\n\n본인 취향에 맞는 클라이언트 사용하면 된다. 몇개 추천.\n\n * MySQL Workbench [https://www.mysql.com/products/workbench/]\n\n * Sequel Ace [https://github.com/Sequel-Ace/Sequel-Ace]\n   \n   * Sequel Pro 포크해서 다시 개발된 앱. 앱스토어에서도 받을 수 있다.\n   \n   * Sequel Pro에서 사용하던 암호는 키체인에 있으므로 필요하면 가져와서 쓰면 된다. or Migration script(비추)\n     [https://sequel-ace.com/get-started/migrating-from-sequel-pro.html]\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/35127323/image-20220301-103241.png?api=v2]\n\n * Sequel Pro\n   \n   * 옛날에는 좋았는데 버려진 프로젝트\n\n * DataGrip [https://www.jetbrains.com/datagrip/]\n\nZeplin\n\n디자인 확인 도구\n\nhttps://app.zeplin.io/welcome [https://app.zeplin.io/welcome]\n\n\nDOCKER\n\nhttps://www.docker.com/products/docker-desktop\n[https://www.docker.com/products/docker-desktop]\n\n\nAMAZON ECR DOCKER CREDENTIAL HELPER\n[https://github.com/awslabs/amazon-ecr-credential-helper] 설치\n\n> brew install docker-credential-helper-ecr\n\n\nDOCKERCONFIG 설정\n\n~/.DOCKER/CONFIG.JSON\n\n{\n  \"credHelpers\": {\n    \"512973208661.dkr.ecr.us-west-2.amazonaws.com\": \"ecr-login\"\n  },\n  \"credsStore\": \"desktop\"\n}\n\n\nAWS\n\n\nAWSCLI 설치\n\n> brew install awscli\n\n\nGSTS 설치\n\n> brew tap ruimarinho/tap\n> brew install gsts\n\n * 5.0.0 버전 (2023.06.26 기준)\n\n * 정상적으로 동작하지 않으면 아래 aws config와 함께 [TS][Tools] gsts\n   [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2763882507/TS+Tools+gsts]\n   를 참고해서 트러블슈팅을 시도한다.\n\n\nAWSCONFIG 설정\n\nawsconfig 를 다음과 같이 설정한다. (파일이 없으면 신규로 생성)\n\n~/.AWS/CONFIG\n\n[profile default]\ncredential_process = gsts --no-credentials-cache --username <YOUR EMAIL>@ecubelabs.com --aws-role-arn arn:aws:iam::512973208661:role/GoogleSAMLDeveloperRole --aws-region=us-west-2 --sp-id 899403333489 --idp-id C0276w9ji --json\n\n~/.AWS/CREDENTIALS (DEPRECATED) - 더이상 설정하지 않아도 된다.\nHTTPS://ECUBELABS.ATLASSIAN.NET/WIKI/SPACES/INFRA/PAGES/52724014#GSTS\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/52724014#gsts]\n\n[YOUR_NAME]\naws_access_key_id = ********\naws_secret_access_key = ********\n\n\nKUBERNETES (OPTIONAL)\n\nKubernetes 리소스를 확인하고 싶은 사람만 설정하면 된다.\n\n\nKUBECTL 설치\n\n> brew install kubernetes-cli\n// Client Version: version.Info{Major:\"1\", Minor:\"15\", GitVersion:\"v1.15.0\", GitCommit:\"e8462b5b5dc2584fdcd18e6bcfe9f1e4d970a529\", GitTreeState:\"clean\", BuildDate:\"2019-06-20T04:49:16Z\", GoVersion:\"go1.12.6\", Compiler:\"gc\", Platform:\"darwin/amd64\"}\n\n\nKUBECONFIG 설정\n\nkubeconfig 를 다음과 같이 설정한다. (파일이 없으면 신규로 생성)\n\n~/.KUBE/CONFIG\n\napiVersion: v1\nclusters:\n- cluster:\n    server: https://api-ecubelabs2-stage-k8s.ecubelabs.xyz\n  name: ecubelabs2-stage.k8s.local\ncontexts:\n- context:\n    cluster: ecubelabs2-stage.k8s.local\n    user: ecubelabs-aws-developer\n  name: ecubelabs2-stage.k8s.local\ncurrent-context: ecubelabs2-stage.k8s.local\nkind: Config\npreferences: {}\nusers:\n- name: ecubelabs-aws-developer\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      args:\n      - token\n      - -i\n      - 3e1950350f8d44119961c84602b90cc0\n      command: aws-iam-authenticator\n\n\nAWS-IAM-AUTHENTICATOR [https://github.com/kubernetes-sigs/aws-iam-authenticator]\n설치\n\n> brew install aws-iam-authenticator\n\n\nOPENLENS\n\nLens [https://k8slens.dev/] 사용 금지.\n\n * 유료인데 우리팀은 굳이 유료 기능 필요하지 않음.\n\n * OpenLens 는 Lens 의 base project. (MIT)\n\n * Extensions list: https://github.com/lensapp/lens-extensions\n   [https://github.com/lensapp/lens-extensions]\n\n\nBUILD ON MAC\n\n6.5.2 가 마지막 오픈 소스 버전. 현재는 Closed source 로 전환 되었고 구독 방식의 Lens 만 제공함.\n\n6.5.2 도 기본적인 클러스터 관리에는 문제 없음.\n\n6.5.2\n\n> nvm install 16\n> nvm use 16\n> npm install -g npm@^9.9.0\n\n * node 16 에 기본으로 따라오는 npm 으로는 lens 빌드 못 함\n\n * node 18 로도 빌드 못 함\n\n * 일부로 버전 꼬아 놓은 거 같은 의심\n\n> git clone https://github.com/lensapp/lens.git\n> cd lens\n> git checkout v6.5.2\n> npm ci\n> npm run build\n> npm run build:app\n\n6.1.1-\n\n> git clone https://github.com/lensapp/lens.git\n> cd lens\n> git checkout tags/v6.1.1 # 원하는 버전으로 빌드 하면 됨\n> nvm use 16\n> yarn install\n> CSC_IDENTITY_AUTO_DISCOVERY=false make build\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323"
  },
  {
    "pageContent": "앱 개발자 환경 설정\n\n\n\n이 문서에는 이큐브랩에서 앱 개발자로 일하기 위해 반드시 설정해야 하는 것들만 기술합니다\n\n\n\n * 0. React Native\n   * 0.1. Node, Watchman, JDK\n     * 0.1.1. node\n     * 0.1.2. watchman\n     * 0.1.3. JDK (Java)\n * 1. iOS\n   * 1.1. Xcode\n   * 1.2. rvm & ruby 설치\n   * 1.3 CocoaPods 설치\n     * 1.3.1 버전이 다를 경우\n   * 1.4. Apple developer 등록 요청\n * 2. Android\n   * 2.1. Android Studio\n     * 2.1.1. 기본 설치\n     * 2.1.2. SDK 설치\n     * 2.1.3. 환경변수 설정\n\n\n0. REACT NATIVE\n\n\n0.1. NODE, WATCHMAN, JDK\n\nReact Native 설치 가이드\n[https://reactnative.dev/docs/environment-setup#node--watchman]를 보면 다음과 같이 하라고\n되어 있지만 꼭 이를 따를 필요는 없고 아래의 0.1.x 를 참고해서 설치하면 된다.\n\n> brew install node\n> brew install watchman\n> brew tap AdoptOpenJDK/openjdk\n> brew install --cask adoptopenjdk8\n\n0.1.1. NODE\n\nnode 설치 과정은 brew install node 로 하지 않는다. (나중에 귀찮아짐)\n\nnode 설치는 웹 개발자 환경 설정\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323] 참고\n\n0.1.2. WATCHMAN\n\nFacebook 이 개발한 파일의 변경사항을 감시하는 툴\n\n가이드에 따라 brew install watchman 으로 설치한다\n\n0.1.3. JDK (JAVA)\n\n이미 Java 설치 되어 있으면 건너뛰어도 됨\n\n가이드에 따라 brew 로 설치해도 되고 원하는 방식으로 JDK 설치하면 됨\n\n * Oracle JDK 는 라이센스 이슈가 발생할 수 있으므로 사용금지\n\n * JDK 11 이상으로 설치\n\n\n1. IOS\n\n\n1.1. XCODE\n\nhttps://apps.apple.com/kr/app/xcode/id497799835?l=en&mt=12\n[https://apps.apple.com/kr/app/xcode/id497799835?l=en&mt=12]\n\n\n1.2. RVM & RUBY 설치\n\n> curl -L https://get.rvm.io | bash -s stable\n> source ~/.rvm/scripts/rvm\n> rvm install ruby-2.7.4\n\n\n1.3 COCOAPODS 설치\n\n> sudo gem install cocoapods -v 1.14.3\n\n * CocoaPods 는 모두 동일한 버전으로 설치해야 한다. 그렇지 않으면 소스코드를 checkout 했을때 out of the box 로\n   실행할 수 없다.\n\n * 1.14.3 로 모두 통일.\n\n\n1.3.1 버전이 다를 경우\n\n> pod --version\n> sudo gem uninstall cocoapods\n> sudo gem install cocoapods -v 1.14.3\n\n\n1.4. APPLE DEVELOPER 등록 요청\n\n개발자 가이드 > Xcode 에 개발자 계정 등록\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204505203]\n\n\n2. ANDROID\n\n\n2.1. ANDROID STUDIO\n\nhttps://developer.android.com/studio [https://developer.android.com/studio]\n\n\n2.1.1. 기본 설치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-22-54.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-19-34.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-19-51.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-24-40.png?api=v2]\n\n\n2.1.2. SDK 설치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-33-32.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-34-59.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/40337445/image2019-9-18_10-37-46.png?api=v2]\n\nConfigure > SDK Manager\n\n * SDK Platforms 에서 Android SDK Platform 28 선택.\n   \n   * Show Package Details opt-in 해야 선택할 수 있다.\n   \n   * Apply / OK 누르지 말고 SDK Tools 탭으로 이동\n\n * SDK Tools 에서 28.0.3 선택.\n   \n   * Show Package Details opt-in 해야 선택할 수 있다.\n   \n   * OK 눌러서 설치\n\n\n\n\n\n2.1.3. 환경변수 설정\n\n환경변수\n\n값\n\nANDROID_SDK_ROOT\n\nAndroid SDK Location\n\n * Android Studio > Configure > SDK Manager 에서 확인 가능\n\n * ex) /Users/ildukm/Library/Android/sdk\n\nPATH\n\n$PATH:$ANDROID_SDK_ROOT/platform-tools/\n\n환경변수는 개인의 취향에 따라 원하는 방식으로 설정하면 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445"
  },
  {
    "pageContent": "Mapbox 환경 설정\n * Mapbox?\n * SDK 다운로드\n   * 1. Access token 발급\n   * 2. Access token 구성\n   * 3. SDK 다운로드\n * 프로젝트 설정\n   * 1. Localization English 수동 활성화\n     * 1-1. Xcode Navigator 에서 Pods/Pods 을 오픈한다.\n     * 1-2. 그 중 Pods/MapboxNavigation/Resources/Localizable.strings 파일을 찾아 선택한다.\n     * 1-3. Localization 목록에서 English를 체크해 활성화한다.\n * Reference\n\n앱 개발자 환경 설정 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445] 설정을\n마친 상태여야 한다.\n\n\nMAPBOX?\n\n맵, 내비게이션 SDK를 제공해주는 서비스이다.\n\nSDK를 이용하면 내비게이션 기능을 쉽게 구현할 수 있어 CCNx, Haulla 에서 사용 중이다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210604-034834.png?api=v2]\n\n\n\n\nSDK 다운로드\n\n\n1. ACCESS TOKEN 발급\n\nSDK 는 유효한 access token이 세팅된 환경에서만 다운로드 가능하다.\n\nMapbox 담당자에게 요청해 발급받는다. (https://ecubelabs.atlassian.net/wiki/spaces/INFRA\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA] 페이지 참고)\n\n비공개 채널(라인, 슬랙)을 통해 전달받고, 토큰을 타인에게 노출하면 안된다.\n\n\n2. ACCESS TOKEN 구성\n\n플랫폼\n\nAndroid\n\niOS\n\n방법\n\n~/.gradle/gradle.properties 에 발급받은 access token 를 세팅한다.\n\nMAPBOX_DOWNLOADS_TOKEN={accessToken}\n\n~/.netrc에 발급받은 access token 를 세팅한다.\n\nmachine api.mapbox.com\nlogin mapbox\npassword {accessToken}\n\n예시\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210723-045500.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210604-034251.png?api=v2]\n\n\n3. SDK 다운로드\n\n플랫폼\n\nAndroid\n\niOS\n\n방법\n\n안드로이드 스튜디오 상단 Sync project with Gradle files 버튼을 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210604-041545.png?api=v2]\n\npod install\n\n\n프로젝트 설정\n\n\n1. LOCALIZATION ENGLISH 수동 활성화\n\n최초 설치 이후 Localization에서 English 를 수동 체크(활성화)해 줘야 한다.\n\n그렇지 않으면 영어 말고 이상한 언어가 표시되는 버그가 발생한다. (한번 체크하면 버전 바뀌거나 Pods 지우지 않는 한 유지될 것임)\n\n\n1-1. XCODE NAVIGATOR 에서 PODS/PODS 을 오픈한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210726-110421.png?api=v2]\n\n\n1-2. 그 중 PODS/MAPBOXNAVIGATION/RESOURCES/LOCALIZABLE.STRINGS 파일을 찾아 선택한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210726-104542.png?api=v2]\n\n\n1-3. LOCALIZATION 목록에서 ENGLISH를 체크해 활성화한다.\n\n만약 File already exists 경고창이 뜨면 Use file 을 선택한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1884160028/image-20210726-110721.png?api=v2]\n\n\n\n\n\n\nREFERENCE\n\nhttps://docs.mapbox.com/android/navigation/guides/install/\n[https://docs.mapbox.com/android/navigation/guides/install/]\n\nhttps://docs.mapbox.com/ios/navigation/guides/\n[https://docs.mapbox.com/ios/navigation/guides/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1884160028"
  },
  {
    "pageContent": "프로토타입(Prototype)\n\n자바스크립트에서 객체지향적인 개발 개념을 가지게 해주는 녀석이 바로 prototype이다.\n\n이 아이는 자바스크립트에 클래스 문법이 들어오기 전부터 있었다.\n\n하지만 이제는 클래스 문법을 많이 사용해서인지 프로토타입을 많이 모르는거 같다. 물론 들어는 봤지만(저처럼...) 사용은 안한 사람도 많다고\n생각한다.\n\n\n\n\n그래서 이참에 정리해 보려고 한다.\n\n아래 글에서는 프로토타입 기반의 프로그래밍 무엇인지 그리고 프로토타입 기반의 핵심을 지탱하는 `Prototype Object`와\n`Prototype Link`에 대해 구분해 보려고 한다. \n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n프로토타입 기반 프로그래밍\n[https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_%EA%B8%B0%EB%B0%98_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D]\n\n(절대 귀찮아서 위키디피아를 복붙 하는게 아니다...)\n\n> 프로토타입 기반 프로그래밍은객체지향 프로그래밍\n> [https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D]의\n> 한 형태의 갈래로클래스\n> [https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9E%98%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)]가\n> 없고,클래스 기반\n> [https://ko.wikipedia.org/w/index.php?title=%ED%81%B4%EB%9E%98%EC%8A%A4_%EA%B8%B0%EB%B0%98&action=edit&redlink=1]언어에서상속\n> [https://ko.wikipedia.org/w/index.php?title=%EC%83%81%EC%86%8D_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)&action=edit&redlink=1]을\n> 사용하는 것과는 다르게,객체\n> [https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)]를\n> 원형(프로토타입\n> [https://ko.wikipedia.org/w/index.php?title=%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_(%EA%B0%9D%EC%B2%B4)&action=edit&redlink=1])으로\n> 하여복제\n> [https://ko.wikipedia.org/w/index.php?title=%EB%B3%B5%EC%A0%9C_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)&action=edit&redlink=1]의\n> 과정을 통하여 객체의 동작 방식을 다시 사용할 수 있다. 프로토타입기반 프로그래밍은클래스리스(class-less),프로토타입\n> 지향(prototype-oriented) 혹은인스턴스 기반(instance-based) 프로그래밍이라고도 한다.\n\n\n\n\n\n클래스 기반과의 비교\n\n> 클래스기반 언어에서객체\n> [https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)]는\n> 일반적으로 두 가지 형태가 있다. '클래스\n> [https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9E%98%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)]'는\n> 객체의 기본적인 만듦새와 기능을 정의하고, '인스턴스\n> [https://ko.wikipedia.org/wiki/%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4]'는 \"사용할 수\n> 있는\" 객체로 특정 클래스의 양식을 기반으로 한다. 클래스기반 언어에서 '클래스'는 동작 방식인메소드\n> [https://ko.wikipedia.org/wiki/%EB%A9%94%EC%86%8C%EB%93%9C]의 모임으로 동작하고, 모든\n> 인스턴스의 구조는 동일하고, 인스턴스는 객체의 자료를 가지고 있다. 한쪽에는 구조와 동작 방식, 다른 한쪽에는상태\n> [https://ko.wikipedia.org/w/index.php?title=%EC%83%81%ED%83%9C_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)&action=edit&redlink=1]로\n> 구분된다.\n> \n> 프로토타입 기반 프로그래밍을 지지하는 사람들은 클래스기반 언어에서는 개발자가 클래스들 사이의 분류와 관계에 먼저 초점을 맞추기 쉽다고 한다.\n> 이와는 달리, 프로토타입기반 프로그래밍은 프로그래머가 여러 가지 표본의 동작 방식에 초점을 맞추고, 이 객체들을 나중에 클래스와 비슷한\n> 방식의 \"객체의 원형\"으로 분류하는 것은 나중에 걱정해도 된다. 많은 프로토타입기반 체계가실행시간\n> [https://ko.wikipedia.org/wiki/%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84]에 프로토타입을\n> 대체하기 쉬우나, 클래스기반 객체지향 체계에서는 최초의 동적 객체지향 체계인스몰토크\n> [https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%AA%B0%ED%86%A0%ED%81%AC]와 같이 프로그램의\n> 실행 중에 클래스를 바꿀 수 있는 것은 몇 가지 되지 않는다.\n> \n> 프로토타입 기반 프로그래밍은, 학습의 과정의 주요한 특징으로 프로토타입이나이그젬플러\n> [https://ko.wikipedia.org/w/index.php?title=%EC%9D%B4%EA%B7%B8%EC%A0%AC%ED%94%8C%EB%9F%AC&action=edit&redlink=1]를\n> 강조하는,인지 심리학\n> [https://ko.wikipedia.org/wiki/%EC%9D%B8%EC%A7%80_%EC%8B%AC%EB%A6%AC%ED%95%99]과\n> 같은 특정 학문과 관련되어 있는 경우가 많다.\n> \n> 프로토타입 기반 체계의 대부분은 인터프리터이고 동적 타입 프로그래밍 언어이다. 하지만 프로토타입기반의 정적 타입의 체계가 기술적으로\n> 가능하다.오메가\n> [https://ko.wikipedia.org/w/index.php?title=%EC%98%A4%EB%A9%94%EA%B0%80_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4)&action=edit&redlink=1]는\n> 그런 체계의 한 예이다.\n\n\n\n\n자바스크립트에서는 객체의 원형인 프로토타입을 이용한 클로닝(Cloneing: 복사)과 객체특성을 확장해 나가는 방식을 통해 새로운 객체를 생성해\n낸다.\n\n여기서 재밌는 사실중 하나는, 자바스크립트의 프로토타입 객체의 확장은 옵저버 패턴을 따른다. \n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n자바스크립트의 프로토타입(PROTOTYPE)이란?\n\n> 자바스크립트의 모든 객체는 자신을 생성한 객체 원형에 대한 숨겨진 연결을 갖는다. 이때 자기 자신을 생성하기 위해 사용된 객체원형을\n> 프로토타입이라 한다.\n> \n> 자바스크립트의 모든 객체는 Object 객체의 프로토타입을 기반으로 확장 되었기때문에 이 연결의 끝은 Object 객체의 프로토타입\n> Object 다.\n\nor\n\n> 프로토타입prototype은 ECMAScript에서 구조structure, 상태status, 습성behavior 를 구현하기 위해 사용하는\n> 오브젝트object입니다.\n> \n> 생성자constructor는 오브젝트를 생성할 때 그 오브젝트에 프로퍼티 레퍼런스를 가리킬 목적으로 생성자constructor의 연관된\n> 프로토타입prototype 을 참조하게 됩니다.\n> \n> 생성자constructor와 연관된 프로토타입prototype은 constructor.prototype과 같이 프로그램program적인\n> 표현expression 으로 참조 될 수 있고 native Object의 프로토타입prototype에 추가되어진 프로퍼티properties가\n> 공유shared되어 집니다\n\n\n\n\n즉 어떠한 객체가 만들어지기 위해 그 객체의 모태가 되는 녀석을 프로토타입(prototype)이라고 한다.\n\n아래는 크롬에서 실험해본 간단한 예제다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224067705/image2019-10-17_20-40-49.png?api=v2]\n\n여기서 중요하게 봐야하는 부분은 `__proto__`와 `constructor`다.\n\n이 아이 두명이 jacob이라는 객체를 만들어내기 위해 사용된 객체원형에 대한 숨겨진 연결이다.\n\n자바스크립트의 모든 객체는 생성과 동시에 자기자신이 생성될 당시의 정보를 취한 `Prototype Object`라는 새로운 객체를\nCloning하여 만들어낸다. \n\n프로토 타입이 객체를 만들어내기 위한 원형이라면 이 `Prototype Object`는 자기 자신의 분신이며 자신을 원형으로 만들어질 다른\n객체가 참조할 프로토 타입이된다. \n\n즉 __proto__라는 프로토 타입에 대한 link는 상위에서 물려받은 객체의 프로토 타입에 대한 정보이며, prototype 프로퍼티는\n자신을 원형으로 만들어질 새로운 객체들, 하위에 물려줄 연결에 대한 속성이다. \n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224067705/image2019-10-17_20-55-19.png?api=v2]\n\n> 위 관계도에서 알수 있듯 모든 객체의 확장은 객체가 소유한 prototype Object를 통해 이루어지며 이 연결의 끝은 이전 글에서\n> 소개한 Object 객체의 prototype Object 가 된다. 일반적으로 자바스크립트 코드를 통해 다루는 prototype이 객체가\n> 소유한 자기자신의 prototype Object 이기 때문에 대부분의 자바스크립트 입문자는 프로토타입이란 것을 prototype\n> property라고 생각하게 되는 오류를 범하게 되는 것이다\n\n\n\n\n간단한 예를 하나만 더 만들어 보자. \n\n프로토 타입 초짜인가 고수인가\n\nfunction info(x) {\n    this.x = x;\n}\n\nconst jacob = new info('kind');\nconsole.log(jacob.x);\n\nconsole.log(jacob.prototype.x);\n\n\n\n\n결과값을 예상해 보자.\n\n당연히 'kind', syntax error 의 순서로 결론을 내었다면 역시 잘하시는 분이다..\n\n물론 jacob 이라는 객체가 kind한게 본성이 아니라서 syntax error가 아니다. jacob이라는 객체는 info라는 원형을 이용하여\n함수객체를 통해 만들어진 Object 단일 객체일 뿐이다. \n\n즉 jacob은 `prototype 프로퍼티`를 소유하고 있지 않기 때문에 jacob.prototype.x가 에러인 것이다~!\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n그럼 CONSTRUCTOR는 모야?\n\n> 생성자constructor는 생성create하고 초기화initialize하는 함수 오브젝트입니다.  각각의 생성자는 상속구현과 공유 프로퍼티 사용을 위해 연관된 프로토타입prototype 오브젝트를 갖습니다.\n> 생성자를 포함하는 모든 함수들은 오브젝트이지만 모든 오브젝트가 생성자가 되는 것은 아닙니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224067705/image2019-10-17_21-21-29.png?api=v2]\n\n바꿔 말하면,  \n\n첫번째는 오브젝트가 직접 언급했던 프로퍼티가 있는지 없는지 조사(검토)하는 것입니다.  만약 오브젝트가 정해진 프로퍼티를 포함한다면 그\n레퍼런스가 참조하는 프로퍼티입니다.  만약 그렇지 않다면 오브젝트는 찾기 위해서 다음 프로토타입prototype으로 넘어간다. \n\n\n즉 위의 예제 소스를 예로 설명하자면 마지막에  childObject.name\n[http://childObject.name].toString(); 를 호출했습니다.\n최초 childObject가 가지고 있는 name을 참조합니다. childObject에는 name 프로퍼티를 가지고 있기 때문에 \ntoString()을 수행하게 됩니다. 만약 name 프로퍼티가 존재하지 않는다면 fatherObject -> grandFather ->\nObject 까지 찾아가게 되겠죠.\n\n아무튼 name 프로퍼티가 존재하므로 childObject에는 toString()이라는 메서드를 수행하게 됩니다. 하지만 childObject\n에는 toString() 이라는 메서드가 존재하지 않기 때문에 Object.prototype.toString()을 수행하게 됩니다. 만약\nObject.prototype.toString 메서드가 존재하지 않는다면 당연히 (fireBug)toString is not a function\n이라는 메세지를 보게되겠죠.\n\n\n그래서 클래스 기반class-based 객체 지향 언어는 일반적으로 인스턴스instance에 의해 이동된 상태, 클래스에 의해서 이동된 메서드\n그리고 상속은 구조와 습성의 유일함이다.\n\nECMAScript에서 상태와 메서드들은 오브젝트에 의해서 이동되어 집니다.  그리고 구조, 습성, 상태는 모두 상속되어 집니다.\n\n직접 그것들의 프로토타입prototype이 포함하는 특별한 프로퍼티property를 포함하지 않는 모든 오브젝트들은 저 프로퍼티와 그\n값value을 공유한다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n몬가 더 알듯하면서도 미궁으로 빠져드네요.\n\n하지만, 여기까지 읽었다면 분명히 평소 많은 고민은 안했던 prototype에 갈증이 날 것이라고 생각됩니다 (웃음)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/smile.png]\n\n\n\n\nhttps://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b\n[https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b]\n\n\n\n\n이제 정리하고 싶다면 위에 글을 읽어보시면 됩니다^^\n\n\n\n\n\n\n\n\n\n\n\n\n\n참고 URL\n\nhttps://www.geeksforgeeks.org/prototype-in-javascript/\n[https://www.geeksforgeeks.org/prototype-in-javascript/]\n\nhttps://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_%EA%B8%B0%EB%B0%98_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\n[https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_%EA%B8%B0%EB%B0%98_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D]\n\nhttps://rhio.tistory.com/236 [https://rhio.tistory.com/236]\n\nhttps://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67\n[https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67]\n\nhttp://insanehong.kr/post/javascript-prototype/?source=post_page-----f8e67c286b67----------------------\n[http://insanehong.kr/post/javascript-prototype/?source=post_page-----f8e67c286b67----------------------]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224067705"
  },
  {
    "pageContent": "[OJT][JS] Arrow function & this scope\n\n\n\n\n\n1. ARROW FUNCTION\n\n구문이 짧고 항상 익명이며, 메소드 함수(Method function)가 아닌 곳에 가장 적합하다. 그래서 생성자로 사용할 수 없다.\n\n\n\n\n메서드 함수에서는 부적합!\n\n'use strict';\n\nconst obj = {\n    num: 10,\n    arrowFunc: () => console.log(this.num, this),\n    nomalFunc: function(){\n        console.log(this.num, this);\n    }\n}\n\nobj.arrowFunc(); // undefined {}\nobj.nomalFunc(); // 10 { num: 10, arrowFunc: [Function: arrowFunc], nomalFunc: [Function: nomalFunc] }\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nCF) 메서드(METHOD) VS 함수(FUNCTION)\n\n평소 혼용해서 쓰고 있던 개념이었지만, 정확히 따지자면 다른 말이다. \n\nfunction의 경우 지역이건 전역이건 어떠한 기능을 수행하는 함수를 의미한다. 반면, method의 경우 객체 또는 클래스 내부에서 선언된\n함수를 의미한다. \n\n> 모든 메서드는 함수이지만, 모든 함수는 메서드가 아니다\n\n(Aaaaa!!!! 그래서 자바같은 객체지향언어의 경우 애초에 클래스 안에서 함수 자체가 선언되는 경우가 많기 때문에 메서드라는 말을 많이\n사용하는 거였다..!!)\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n2. THIS\n\nJavascript는 함수 또는 블록 레벨에서 범위를 결정하는 lexical scope 규칙을 따르지만, this는 dynamic scope\n방식을 따르기 때문에 주의해야 한다.(관련 내용은 아래...)\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/214237348/image2019-9-29_15-11-21.png?api=v2]\n\nArrow function의 핵심 포인트라고 할 수 있을거 같다. 단순히 함수식이 간단해 진게 아니라, this의 활용에 있어서 큰 차이점이\n발생한다. \n\n일반적인 경우 this는 함수를 선언할 때, this에 바인딩할 객체가 정적으로 결정되는 것이 아니라, 호출과 동시에 this에 바인딩할 객체가\n동적으로 결정된다. \n\n\n\n\n일반적인 Function this\n\n'use strict';\n\nconst obj = {\n    name: \"jacob\",\n    goodBoy: function(){\n        console.log(`goodBoy result: ${this.name}`);\n    }\n}\n\nobj.goodBoy(); // goodBoy result: jacob\n\n\n\n\n만약 this가 메서드 더 안에 있다면 어떻게 될까.\n\ninner method\n\n'use strict';\n\nconst obj = {\n    name: \"jacob\",\n    strengths: [\"kind1\", \"kind2...\", \"kind3.... ha..\"],\n    goodBoy: function(){\n        console.log(`goodBoy result: ${this.name}`);\n        this.strengths.forEach(function(strength){\n            console.log(`${this.name}'s strengths is ${strength}`);\n        })\n    }\n}\n\nobj.goodBoy(); // goodBoy result: jacob /n TypeError: Cannot read property 'name' of undefined\n\n\n\n\nerror 라니..\n\n일반 함수의 사용시에 범위는 기본적으로 전역 함수에 바인딩 된다. \n\nstrict 모드이기 때문에 현재는 error가 나오지만, 일반 모드(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png]로\n보면 undefined가 나오며, 그냥 console.log(this);를 출력해 보면 window 객체가 나오게 된다.\n\n이렇게 나오는 이유는\n\n 1. this는 기본적으로 현재 함수의 소유자를 참조하기 때문이다. 그리고 익명 함수의 경우 this는 전역범위에 있는 window 객체를\n    된다. 그렇기 때문에 error나 윈도우 객체가 나오는 현상이 일어나는 것이다.\n 2. 중첩된 구조에서는 각각 dynamic scope가 모두 발생한다. \n\n물론 이 문제를 call, apply, bind나 외부 변수를 두는 것으로 해결할 수는 있으나 코드가 길어진다(+jQuery proxy..) \n\n\n\n\n--------------------------------------------------------------------------------\n\n\nCF) SCOPE MODEL \n\n\nDYNAMIC SCOPE\n\n변수나 함수가 불려진 곳의 context를 사용한다.\n\n콜 스텍에서 먼저 검색한다. 콜 스텍의 데이터 구조는 LIFO (last in first out, 후입선출).\n\n따라서 다이나믹 스코프는 어디에서 선언되는지가 아니라, 어디에서 호출되는지에 관심이 있다. 그래서 스텍이 보유하는 변수에 따라 런타임시에\n동적으로 결정될 수 있는 것이다.\n\n\nLEXICAL SCOPE\n\n변수나 함수가 정의된 곳의 context를 사용한다. Javascript가 사용하는 스코프이기도 하다. \n\n(but, 자바스크립트에서 일반 함수는 다이나믹 스코프와 비슷한 방식으로 작동하며, context는 함수 호출 방법에 따라 런타임에 정의\n된다.)\n\n다른 함수 내에 함수를 정의하면, 내부 함수는 내부 함수의 런타임에 관계없이 항상 외부 함수의 범위에 정의된 모든 변수에 접근할 수 있다.\n자바스크립트에서 화살표 함수를 사용하면 런타임시에 동적으로 결정되는 것이 아니라, \n\nLexical Scope에 따라 결정된다(← Arrow Function이 일반 함수와 다르게 동작하는 이유). \n\n\n\n\n화살표 함수는 Lexical Scope라구!\n\nconst Info = {};\nInfo.name = 'Jacob';\n\nInfo.introduce = () => {\n    console.log(`I'm ${this.name}.`)\n}\n\nInfo.introduce(); //I'm undefined.\n\n * 빈객체를 리터럴을 생성하고 나중에 속성을 지정하는 것과 같기 때문에 결과 값으로 undefined가 출력된다. \n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n하지만, 화살표 함수(Fat Arrow || hash rocket)에서는 this는 자신을 감싼 정적 범위이다. 전역 코드에서는 전역 객체를\n가리킨다.\n\n간단하게 해결해 보자.\n\narrow function this\n\n'use strict';\n\nconst obj = {\n    name: \"jacob\",\n    strengths: [\"kind1\", \"kind2...\", \"kind3.... ha..\"],\n    goodBoy: function(){\n        console.log(`goodBoy result: ${this.name}`);\n        this.strengths.forEach((strength) => {\n            console.log(`${this.name}'s strengths is ${strength}`);\n        })\n    }\n}\n\nobj.goodBoy(); \n\n// results\n// goodBoy result: jacob\n// jacob's strengths is kind1\n// jacob's strengths is kind2...\n// jacob's strengths is kind3.... ha..\n\n\n\n\n화살표 함수는 자체 범위를 바인딩하지 않지만 부모 또는 범위를 참조한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n참고 주소\n\nhttp://www.ecma-international.org/ecma-262/5.1/#sec-11.2.5\n[http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.5]\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions]\n\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this]\n\nhttps://poiemaweb.com/es6-arrow-function\n[https://poiemaweb.com/es6-arrow-function]\n\nhttps://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function\n[https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function]\n\nhttps://www.codementor.io/dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc\n[https://www.codementor.io/dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc]\n\n\n\n\nhttp://wiki.c2.com/?DynamicScoping [http://wiki.c2.com/?DynamicScoping]\n\nhttps://developer.mozilla.org/en-US/docs/Glossary/Call_stack\n[https://developer.mozilla.org/en-US/docs/Glossary/Call_stack]\n\nhttps://medium.com/front-end-weekly/the-strange-case-of-arrow-functions-and-mr-3087a0d7b71f\n[https://medium.com/front-end-weekly/the-strange-case-of-arrow-functions-and-mr-3087a0d7b71f]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/214237348"
  },
  {
    "pageContent": "[OJT][JS] 부동 소수점 연산\n\n부동 소수점 연산 시 정확도 문제는 JS 뿐 아니라 모든 언어에 존재한다.\n\nhttps://blog.naver.com/leojesus/80045980042\n[https://blog.naver.com/leojesus/80045980042]\n\n이 문제를 해결하기 위해 C# 과 같은 언어에서는 decimal 이라는 타입이 존재하기도 한다.\n\n\n문제 상황\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/253788468/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-12-19%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.24.09.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/253788468/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-12-19%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.07.40.png?api=v2]\n\n\n\n\n해결책\n\n * 부동 소수점 연산이 필요한 경우 가능하면 백엔드에서 결과값을 받도록 한다.\n\n * 위의 방법이 불가능하다면 부동 소수점 연산을 위한 라이브러리를 사용해야 한다.\n   \n   * 백엔드는 http://numeraljs.com/ [http://numeraljs.com/] 를 사용 중이다.\n   \n   * api-docs 에서 number<float>로 되어 있는 것만 조심하면 된다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/253788468/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-12-23%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.49.54.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/253788468"
  },
  {
    "pageContent": "[OJT][JS] Map\n\nStop Using Objects as Hash Maps in JavaScript\n[https://medium.com/better-programming/stop-using-objects-as-hash-maps-in-javascript-9a272e85f6a8]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/625443370"
  },
  {
    "pageContent": "[OJT][JS] Object destructuring and Operand selector operator\n\n\nOBJECT DESTRUCTURING 이란?\n\n[1] 디스트럭처링(Destructuring)은 구조화된 배열 또는 객체를 Destructuring(비구조화, 파괴)하여 개별적인 변수에\n할당하는 것이다. 배열 또는 객체 리터럴에서 필요한 값만을 추출하여 변수에 할당하거나 반환할 때 유용하다.\n\nES6의 객체 디스트럭처링은 객체의 각 프로퍼티를 객체로부터 추출하여 변수 리스트에 할당한다. 이때 할당 기준은 프로퍼티 이름(키)이다.\n\n// ES6 Destructuring \n\nconst obj = { firstName: 'John', lastName: 'Doe' }; \n\n// 프로퍼티 키를 기준으로 디스트럭처링 할당이 이루어진다. 순서는 의미가 없다. \n\n// 변수 lastName, firstName가 선언되고 obj(initializer(초기화자))가 Destructuring(비구조화, 파괴)되어 할당된다. \n\nconst { firstName, lastName } = obj; \n\nconsole.log(firstName, lastName); // John Doe\n\n만약 firstName 이 undefined 가 올 가능성이 있어서 이를 초기화 하고 싶을 경우 아래와 같이 backup value 로 초기화\n할 수 있다.\n\n[2]\n\nconst obj = { firstName: undefined, lastName: 'Doe' }; \n\nconst { firstName = 'David', lastName } = obj; \n\nconsole.log(firstName, lastName); // David Doe\n\n하지만 이는 ES6의 destructuring default values 가 undefined일 경우에만 초기화가 가능하고 자바스크립트에서\nfalsy value 인 null, false, '', 0 등에는 해당하지 않는다!\n\nconst obj = { firstName: '', lastName: 'Doe' }; \n\nconst { firstName = 'David', lastName } = obj; \n\nconsole.log(firstName, lastName); // Doe\n\n위의 firstName이 ''만이 아닌 falsy value에 해당하는 경우에 원하는 값으로 초기화 하고 싶을 경우 아래와 같이 값을 초기화 할\n수 있다.\n\nconst obj = { firstName: '', lastName: 'Doe' }; \n\nconst { lastName } = obj;\n\nconst firstName = obj.firstName || 'David';\n\nconsole.log(firstName, lastName); // David Doe\n\n위의 || 연산자는 단순히 boolean checker 로 동작하는 것이 아닌 변수의 값이 존재하지 않거나 falsy value 로 판별될 경우\n|| 뒤의 backup default value ('David') 로 초기화 시켜주는 Operand selector operator 의 역할을\n합니다.\n\n[3] The a = a || \"hello\" idiom (sometimes said to be JavaScript's version of the\nC# \"null coalescing operator\") acts to test a and if it has no value (or only an\nundesired falsy value), provides a backup default value (\"hello\").\n\n\n\n\n\n참고 자료\n\n[1]\nhttps://poiemaweb.com/es6-destructuring#2-%EA%B0%9D%EC%B2%B4-%EB%94%94%EC%8A%A4%ED%8A%B8%EB%9F%AD%EC%B2%98%EB%A7%81-object-destructuring\n[https://poiemaweb.com/es6-destructuring#2-%EA%B0%9D%EC%B2%B4-%EB%94%94%EC%8A%A4%ED%8A%B8%EB%9F%AD%EC%B2%98%EB%A7%81-object-destructuring]\n\n// Setting Default Values with JavaScript’s Destructuring\n\n[2] https://wesbos.com/destructuring-default-values\n[https://wesbos.com/destructuring-default-values]\n\n// Operand selector operator\n\n[3]\nhttps://github.com/getify/You-Dont-Know-JS/blob/f0d591b6502c080b92e18fc470432af8144db610/types%20%26%20grammar/ch4.md#operators--and-\n[https://github.com/getify/You-Dont-Know-JS/blob/f0d591b6502c080b92e18fc470432af8144db610/types%20%26%20grammar/ch4.md#operators--and-]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/684621849"
  },
  {
    "pageContent": "[OJT][JS] const 는 불변인가? is const immutable?\n\nconst 변수에 할당된 값은 재할당을 막기 때문에 바뀌지 않지만 그렇지 않아 보이는 경우가 존재합니다.\n\n예를 들어서 const 변수에 Object 를 대입하는 경우에는 const 변수에 주소 값이 할당됩니다. 그래서 이 주소 값은 불변이지만\nObject 에 Key-Value 를 추가하거나 변경하는 행위가 가능합니다. 왜냐하면 이 값은 const 에 할당되는 값이 아니기 때문입니다.\n\nPrimitive values, i.e. numbers, strings, booleans, symbols, null, or undefined,\nare always immutable.\n\nvar foo = 27;\nfoo.bar = 42;\nconsole.log(foo.bar); // → `undefined`\n\n하지만 Object의 Key-Value 의 값들은 바뀔 수 있습니다.\n\nconst foo = {};\nfoo.bar = 42;\nconsole.log(foo.bar);\n// → 42\n\n\n\n그러면 이 Key-Value 값들을 불변하게 만드려면 어떻게 해야 할까요?\n\nES5 에서는 Object.freeze()함수를 통해 Object 의 값을 불변하게 만들 수 있습니다.\n\nconst foo = Object.freeze({\n\t'bar': 27\n});\nfoo.bar = 42; // throws a TypeError exception in strict mode;\n              // silently fails in sloppy mode\nconsole.log(foo.bar);\n// → 27\n\n하지만 Object.freeze() 함수는 얕아서(shallow) frozen object(i.e. nested objects)의 Object\nvalues 들은 바뀔 수 있습니다. 이는 The MDN entry on \n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze]Object.freeze()\n에서는 deepFreeze()구현을 통해 Object values 들의 값들을 완전히 불변하게 만들 수 있습니다.\n\n또한, Object.freeze() 함수는 property-value pairs 에만 동작하여, Dates, Maps, or Sets 들을\n완전히 불변하게 만드는 방법은 없습니다.\n\n위의 방법은 단기적인 방법으로 실질적으론 페이스북이 만든 라이브러리인 Immutable\n[https://facebook.github.io/immutable-js/] 을 사용하는게 가장 나은 수단으로 보입니다.\n\n\n요즘 CONST 사용법\n\n원문에서는 변수 사용시에 다음과 같이 하라고 되어있습니다.\n\n 1. 기본적으로는 const를 사용한다.\n\n 2. 재할당이 필요한 경우에만 let을 사용한다.\n\n 3. var는 ES2015에서는 쓰지 않는다.\n\nlet이나 var을 사용하였을 경우 사용자가 실수로 값을 변경하거나 한 뒤에 이를 뒤늦게 알아서 추적하려고 자원을 소모하게되지만 const를\n사용하면 코드 정적 분석 단계에서 이를 탐지할 수 있습니다.\n또한 값의 재할당이 필요해 보이지만 const 선언 할당 단계에서 이를 해결할 수 있는 방법이 존재하기도 합니다.\n→\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2345435137/OJT#let-%EC%A7%80%EC%96%91\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2345435137/OJT#let-%EC%A7%80%EC%96%91]\n와 같은 방법을 참고하세요.\n\nlet과 var의 차이는 자바스크립트의 호이스팅(hoisting)\n[https://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html] 개념을 살펴보시면\n됩니다.\n\n\n\n * 참고자료\n\nhttps://hyunseob.github.io/2016/11/21/misunderstanding-about-const/\n[https://hyunseob.github.io/2016/11/21/misunderstanding-about-const/]\n\nhttps://mathiasbynens.be/notes/es6-const\n[https://mathiasbynens.be/notes/es6-const]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/723222605"
  },
  {
    "pageContent": "[OJT][JS] Short-circuit evaluation\n\nboolean 연산의 결과가 확정되면 필요 없는 코드는 실행하지 않는다.\n\nfunction foo() {\n  console.log('foo')\n  return true\n}\n\nfalse && foo() // false 는 어떤값과 && 연산을 해도 false. foo() 실행하지 않는다.\nfalse || foo() // false 는 true 와 || 연산을 하면 true. foo() 실행한다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1095008423"
  },
  {
    "pageContent": "[OJT][JS] Iterable\n\nhttps://helloworldjavascript.net/pages/260-iteration.html\n[https://helloworldjavascript.net/pages/260-iteration.html]\n\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Iteration_protocols\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Iteration_protocols]\n\n * 객체의 Symbol.iterator 속성에 iterator 함수가 존재하면 iterable 객체로 취급\n   \n   * string, array, object와 같은 자료형은 자바스크립트에선 Object를 기반으로 만들어졌기 때문에 속성에 접근이\n     가능하다.\n\n * generator function은 iterator 함수를 반환하므로 아래와 같이 작성 가능\n\nconst test = {};\ntest[Symbol.iterator] = function* () {\n    yield 'test';\n    yield 1;\n};\nconsole.log([...test]); // spread 문법은 iterable 객체라면 모두 사용할 수 있다.\n// Print: ['test', 1]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1969422512"
  },
  {
    "pageContent": "[OJT][JS] Hoisting\n\n자바스크립트 개발자들은 var 키워드를 사용해 변수를 선언하면 안된다고 한다. 다들 이렇게 말하는 이유는 Hoisting(이하 호이스팅)\n때문이다.\n\n그러면 const, let은 호이스팅의 대상이 아니기 때문에 괜찮은걸까? 이것을 자세히 알아보기 전에 호이스팅이 일어나면 어떤 상황이 발생하는지\n예시를 통해 살펴보자.\n\n\n\n\n호이스팅 발생 예시\n\n\n선언되지 않은 변수를 참조하는 경우: 호이스팅 X\n\nconsole.log(typeof variable); // 출력: undefined\n\nconsole.log(variable); // 출력: ReferenceError: variable is not defined\n\nconst variable = 'Test';\n\n선언되지 않은 변수의 타입은 항상 undefined 이며, 이러한 변수를 참조하는 순간 ReferenceError 라는 이름의 에러가 발생한다.\n\n\n선언되지 않은 변수를 참조하는 경우: 호이스팅 O\n\nconsole.log(typeof variable); // 출력: undefined\n\nconsole.log(variable); // 출력: undefined\n\nvar variable = 'Test';\n\n아직 선언되지 않은 변수를 참조해도 undefined를 뱉을 뿐, 예상했던 참조 에러가 발생하지 않는다. 이렇듯 예상한것과 다르게 동작하는 순간\n개발자의 코드는 어딘가 잘못 되어갈 가능성이 매우 높으며, 호이스팅 된 변수의 내용이 같은 이름을 사용하는 다른 코드에 의해 의도치 않게\n변경되어 아주 힘든 디버깅 시간을 보내게 될것이다.\n\n어떻게 이런 상황이 발생할 수 있는지 알아보기 위해서는 자바스크립트의 라이프 사이클 일부를 살펴봐야 한다.\n\n\n\n\n호이스팅은 왜 생겨날까?\n\n자바스크립트의 변수 라이프사이클을 살펴보면 알 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2235465731/image-20211105-021721.png?api=v2]\n\n자바스크립트에서 변수의 라이프사이클은 크게 선언, 초기화, 할당의 단계를 거친다.\n\n이 중 선언 단계에서 코드에 선언된 모든 변수, 함수, 클래스 선언은 변수처럼 선언 처리가 된다. 이후 실행 단계에서 할당 코드를 만났을때 선언\n되었던 변수나 함수, 클래스에 값이 들어간다.\n\n단, var 키워드로 선언된 변수는 선언과 동시에 초기화도 진행되기 때문에 호이스팅이 되는것이다. 그렇기 때문에 우리가 변수의 값을 미리 조회\n했을 때 undefined를 볼 수 있는것이다.\n\n\n\n\n그럼 CONST, LET은 왜 호이스팅의 대상이 아닌가?\n\n사실 자바스크립트에서는 선언하는 거의 대부분의 변수, 함수, 클래스 선언이 호이스팅의 대상이 된다.\n\n일부 개발자들이 var 만 호이스팅의 대상이라고 말하는것은 TDZ라는 개념이 존재하기 때문에 사실처럼 보이는것 뿐이다. TDZ에 대해서는 조금\n뒤에 자세히 알아보자.\n\n\n\n\n선언 전에 사용하면 참조 에러가 나던데?\n\n앞서 말했듯 const, let으로 선언한 변수나 함수, 클래스도 호이스팅된다.\n\n그러나 함수와 달리 클래스는 const 처럼 평가되기 전까지는 초기화되지 않고 TDZ에 속하므로 사용할 수 없다.\n\nconst Tim = new Person(200, 100); // ReferenceError: Person is not defined\nTim.weight = 90;\nconsole.log(Tim);\n\nclass Person {\n  constructor(height, weight) {\n    this.height = height;\n    this.weight = weight;\n  }\n}\n\n그렇기 때문에 위의 코드에서 Person을 참조해도 undefined를 참조하지 않고 참조 에러가 발생 하는것이다. 이 특징은 클래스 선언,\n클래스 표현식 모두 해당된다.\n\nTDZ의 존재 덕분에 위 코드를 제대로 동작하게 하려면 당연히 아래처럼 작성하게 된다.\n\nclass Person {\n  constructor(height, weight) {\n    this.height = height;\n    this.weight = weight;\n  }\n}\n\nconst Tim = new Person(200, 100);\nTim.weight = 90;\nconsole.log(Tim);\n\n// Print: Person {height: 200, weight: 90}\n\n\n\n\nTDZ\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/let#%EC%8B%9C%EA%B0%84%EC%83%81_%EC%82%AC%EA%B0%81%EC%A7%80%EB%8C%80]가\n도대체 뭐길래?\n\nTDZ(Temporal Dead Zone)는 선언문을 만나 초기화가 완료되기 전까지 변수를 참조하면 참조 에러를 발생시키는 역할을 한다.\n\n모든 선언은 TDZ에 속할 수 있지만, var로 선언된 변수는 선언과 동시에 무조건 undefined 값으로 초기화 하기 때문에 TDZ에 속하지\n않는것처럼 동작한다.\n\n이 개념을 이해한다면 그동안 let, const, class 선언은 왜 호이스팅이 일어나지 않는지 이해할 수 있다.\n\n때문에 TDZ와 블록 스코프를 알고 있다면 아래의 예시에서 에러가 발생하는게 당연하다고 여길수 있게 된다.\n\n\n\n\n직접 눈으로 확인해보자\n\n아래의 예시와 함께 VSC의 디버거로 손쉽게 확인해 볼 수 있다.\n\n\nVAR로 선언한 경우\n\ndebugger; // 모든 코드를 읽어 초기화 된 상태\n\nmyFn(); // Output: \"TypeError: myFn is not a function\"\n\nvar myFn = function () {\n  console.log(\"Will this work?\");\n};\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2235465731/image-20211105-022002.png?api=v2]\n\nvar로 선언한 myFn은 호이스팅이 일어나 초기화가 끝난 상태에서 undefined로 초기화 된것을 볼 수 있다.\n\n그 증거로 myFn() 를 평가하면 발생하는 에러 메세지가 아래와 같다. Uncaught TypeError: myFn is not a\nfunction\n\n\nCONST로 선언한 경우\n\ndebugger; // 모든 코드를 읽어 초기화 된 상태\n\nmyFn(); // Output: \"Uncaught ReferenceError: Cannot access 'myFn' before initialization\"\n\nconst myFn = function () {\n  console.log(\"Will this work?\");\n};\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2235465731/image-20211105-022012.png?api=v2]\n\nconst로 선언할 때도 마찬가지로 myFn 변수도 호이스팅이 일어나 변수가 미리 선언된 것을 볼 수 있다.\n\n실제로 선언되는 모든 변수는 undefined 가 기본 값이기 때문에 undefined 로 보이기는 하지만 초기화가 끝난 상태가 아닌 TDZ에\n속한 상태이므로 아직 사용할 수 없다.\n\n그 증거로 myFn() 를 평가하게 되면 아래와 같은 에러가 발생한다. Uncaught ReferenceError: Cannot access\n'myFn' before initialization\n\nTDZ에 속해 있을 때 접근하면 발생하는 에러다.\n\n\n\n\n코드 검증\n\n실제로 Node.js가 의존하고 있는 V8 엔진의 코드를 보면 아래와 같이 메세지를 별도로 관리하며, 변수 키워드에 따라 초기화 상태가 다르게\n관리된다.\n\n// 출처: https://github.com/nodejs/node/blob/842fd234b7634200ed55141fc77d4e96c3c593bd/deps/v8/src/common/message-template.h#L325\n/* ReferenceError */                                                         \\\n  T(NotDefined, \"% is not defined\")                                            \\\n  T(SuperAlreadyCalled, \"Super constructor may only be called once\")           \\\n  T(AccessedUninitializedVariable, \"Cannot access '%' before initialization\")  \\\n\n// 출처: https://github.com/nodejs/node/blob/e83c8aef4b787b531f23ad7abb498fe81db5ee83/deps/v8/src/ast/variables.h#L240-L244\nstatic InitializationFlag DefaultInitializationFlag(VariableMode mode) {\n    DCHECK(IsDeclaredVariableMode(mode));\n    return mode == VariableMode::kVar ? kCreatedInitialized\n                                      : kNeedsInitialization;\n\n// 출처: https://github.com/nodejs/node/blob/e83c8aef4b787b531f23ad7abb498fe81db5ee83/deps/v8/src/ast/variables.h#L42-L44\n// Var declared variables never need initialization.\n    DCHECK(!(mode == VariableMode::kVar &&\n             initialization_flag == kNeedsInitialization));\n\n\n\n\n마무리\n\n * var를 사용하면 안되는 이유에 대해 논리적으로 이해할 수 있다.\n\n * TDZ 덕분에 우리는 호이스팅이 일어나지 않는 패턴으로 작성할 수 있게 된다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2235465731"
  },
  {
    "pageContent": "[OJT][JS] Set.has() vs Array.includes()?\n\n아래 두 예시에서 더 빠르게 동작하는 것은 어떤 것일까?\n\n 1. Array().filter() + Array().includes()\n\nconst ids = [1,2,3,4,5];\nconst messages = [{ id: 1, ... }, { id: 2, ...}];\n\nmessages.fliter((message)=> ids.includes(message.id));\n\n\n\n2. Array().filter() + Set.has()\n\nconst idSet = new Set([1,2,3,4,5]);\nconst messages = [{ id: 1, ... }, { id: 2, ...}];\n\nmessages.fliter((message)=> idSet.has(message.id));\n\n\n\n큰 고민 없이 1.로 작성해서 정상 동작하는 것을 확인했는데, 컨테이너에 올려서 많은 양의 데이터를 처리하려고 하자마자 대기시간이 엄청나게\n늘어나면서 502 에러가 돌아왔다 (파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f622.png]\n\n\n\n.includes()와 .filter() 는 둘다 O(n)으로 동작하므로, 이 두 개를 중첩해서 사용하면 O(n^n)이 된다.\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes]\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter]\n\n\n\n반면 Set.has()는 항상 O(1) 이므로 위 같은 경우에는 2.가 더 적절하다.\n\nref.\nhttps://dev.to/arnaud/using-array-prototype-includes-vs-set-prototype-has-to-filter-arrays-41fg\n[https://dev.to/arnaud/using-array-prototype-includes-vs-set-prototype-has-to-filter-arrays-41fg]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2303328303"
  },
  {
    "pageContent": "[OJT] 신뢰성, 가독성 향상\n * let 지양\n   * Case 1:\n   * Case 2:\n * Object.assign 지양\n\n\nLET 지양\n\n무조건 const만 사용해야 하는건 아니지만 대체로 let을 사용하지 않을 방법이 있다.\n\n\nCASE 1:\n\n간단한 조건식의 경우\n\nlet name;\n\nif (condition1) name = 'Tim';\nelse name = 'Charlie';\n\n아래와 같이 개선이 가능하다.\n\nconst name = condition1 ? 'Tim' : 'Charlie';\n\n\nCASE 2:\n\n복잡한 조건식의 경우\n\nlet name = 'Charlie';\n\nif (params.condition1) name = 'Tim';\nelse if (params.condition2) name = 'Ben';\nelse if (params.condition3) name = 'Alex';\nelse if (params.condition4) name = 'Vin';\nelse if (params.condition5) name = 'Ray';\nelse if (params.condition6) name = 'Windy';\n\n\n아래와 같이 개선이 가능하다.\n\nfunction getName(params) {\n\tif (params.condition1) return 'Tim';\n\tif (params.condition2) return 'Ben';\n\tif (params.condition3) return 'Alex';\n\tif (params.condition4) return 'Vin';\n\tif (params.condition5) return 'Ray';\n\tif (params.condition6) return 'Windy';\n\treturn 'Charlie';\n}\n\nconst name = getName(params);\n\n/////////////////////////////////////////////\n\ncosnt name = {\n  1: 'Tim',\n  2: 'Ben',\n  3: 'Alex',\n  4: 'Vin',\n}[params];\n\n// IIFE\nconst name = ((params) => {\n    if (params.condition1) return 'Tim';\n\tif (params.condition2) return 'Ben';\n\tif (params.condition3) return 'Alex';\n\tif (params.condition4) return 'Vin';\n\tif (params.condition5) return 'Ray';\n\tif (params.condition6) return 'Windy';\n\treturn 'Charlie';\n})(params);\n\n\n값이 한번 결정된 이후 재할당 되지 않는것을 확신 할 수 있기 때문에 가독성과 신뢰성 모두 향상될 수 있다.\n\nhttps://zellwk.com/blog/dont-reassign/ [https://zellwk.com/blog/dont-reassign/]\n\n\nOBJECT.ASSIGN 지양\n\n아래와 같은 타입스크립트로 작성된 코드가 있다.\n\nclass ClientModel {\n  constructor(initProps: {\n    typeName: string,\n    usimId: string,\n    serial: string,\n    latitude: number,\n    longitude: number,\n    address: string,\n    status: string,\n    volume: number,\n    lastCollectionDate: Date,\n    description: string,\n\t}) {\n\t\tthis.typeName = initProps.typeName;\n\t\tthis.usimId = initProps.usimId;\n\t\tthis.serial = initProps.serial;\n\t\tthis.latitude = initProps.latitude;\n\t\tthis.longitude = initProps.longitude;\n\t\tthis.address = initProps.address;\n\t\tthis.status = initProps.status;\n\t\tthis.volume = initProps.volume;\n\t\tthis.lastCollectionDate = initProps.lastCollectionDate;\n\t\tthis.description = initProps.description;\n  }\n}\n\n\n프로퍼티가 너무 많아지고 계속 추가된다고 생각해서 아래와 같이 개선했다.\n\nclass ClientModel {\n  constructor(initProps: {\n\t\ttypeName: string,\n    usimId: string,\n    serial: string,\n    latitude: number,\n    longitude: number,\n    address: string,\n    status: string,\n    volume: number,\n    lastCollectionDate: Date,\n    description: string,\n\t}) {\n\t\tObject.assign(this, initProps);\n  }\n}\n\n\n타입 정의 외엔 반복되는 코드가 사라지고 자바스크립트의 특성을 잘 살려 리팩토링한것처럼 보인다.\n\n그러나 지금은 타입스크립트도 자바스크립트 런타임에서 돌아가므로 initProps는 타입을 무시하고 어떤 값이든 입력 받을 수 있기 때문에\nClientModel을 사용하는 쪽에서 조금만 제대로 validation 하지 않고 값을 넘기면 이상한 값이 ClientModel에 들어갈 수\n있으므로 주의해야 한다.\n\n즉, 확실한 상황 또는 어떤 값을 입력받든 관계 없도록 의도한 상황에서만 사용할것.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2345435137"
  },
  {
    "pageContent": "[OJT][JS] JSON.stringify/parse\n\nconsole.log(JSON.stringify({\n    a: 0,\n    b: undefined,\n    c: null,\n    d: NaN,\n    e: Infinity,\n    f: true,\n    g: 'what',\n    h: Symbol('the')\n}))\n\n// {\"a\":0,\"c\":null,\"d\":null,\"e\":null,\"f\":true,\"g\":\"what\"}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2351792137"
  },
  {
    "pageContent": "[OJT][JS] valueOf\n\n이러한 자바스크립트의 Syntax sugar는 가독성을 떨어트리기 쉬우니 알아두기만 하고 활용하는것은 지양한다.\n\n코드를 작성하며 혼란스럽지 않을 수 있게 작성한 내용이다.\n\nconsole.log(new Date() - 10) // 현재 시간보다 10ms 과거\n// 1647250755199\n\n위와 같이 timestamp로 변환되어 연산하는 코드는 자바스크립트에 하드코딩된 동작도 아니고 마법도 아니다.\n\n연산자로 연산을 하기 전에 대상이 객체라면 valueOf 메서드가 존재하면 메서드를 실행해 원시 값을 얻기 때문에 자바스크립트에서는 자연스러운\n동작이다. (Date.getTime === Date.valueOf)\n\n그래서 아래와 같은 코드도 동작하는것이다.\n\nconsole.log(({ valueOf() { return 1000 } }) + 100)\n// 1100\n\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf]\n\n\n추가\n\ntoString/toJSON\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2334785543/toString+toJSON]\n와 비슷하게 Number 함수도 valueOf를 참조할 수 있다.\n\nNumber({ valueOf() { return 1000 } })\n// 1000\n\nnew Date({ valueOf() { return 1234567888888 } })\n// Sat Feb 14 2009 08:31:28 GMT+0900 (한국 표준시)\n\nString({ toString() { return 'asdasd' } })\n// 'asdasd'\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2360115201"
  },
  {
    "pageContent": "[OJT][JS] 정렬\n\nWhat is stability in sorting algorithms and why is it important?\n[https://stackoverflow.com/questions/1517793/what-is-stability-in-sorting-algorithms-and-why-is-it-important]\n\nWhat is the stability of the Array.sort() method in different browsers?\n[https://stackoverflow.com/questions/3026281/what-is-the-stability-of-the-array-sort-method-in-different-browsers]\n\nTL;DR\n\n> Array.prototype.sort is now stable in\n> \n> @v8js\n> \n> v7.0 / Chrome 70! 🎉\n> \n> Previously, V8 used an unstable QuickSort for arrays with more than 10\n> elements. Now, we use the stable TimSort algorithm.\n\nhttps://twitter.com/mathias/status/1036626116654637057?lang=en\n[https://twitter.com/mathias/status/1036626116654637057?lang=en]\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134578262"
  },
  {
    "pageContent": "[OJT][JS] JSON-S\bchema\n\n\nJSON SCHEMA\n\n * JSON 형태의 데이터에 대해 스키마를 선언하고 validation 하려고 할 때 유용한 도구이다.\n\n * 현재 홀라 공홈에서 Server-driven UI\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2417000484/OJT+Server-driven+UI]를\n   구현할 때 응용해서 사용하고 있다.\n\n * 버전 별로 문법이 조금씩 다른데 현재 시점 LTS는 https://json-schema.org/draft/2020-12/schema 이다.\n\n * https://json-schema.org/understanding-json-schema/UnderstandingJSONSchema.pdf\n   [https://json-schema.org/understanding-json-schema/UnderstandingJSONSchema.pdf]\n\n * example/\n\n{\n  title: 'any title',\n  description: 'any description',\n  type: 'object',\n  $schema: '작성한 json-schema 버전',\n  properties : {\n    anyPropertyName1 : { // 상황에 따라 적당히 변형해서 사용한다\n      type?: 'string' | 'number' | 'array' | ..etc,\n      enum?: ['value1', 'value2', 'value3'] // enum으로 선언하면 선언한 값 중 하나만 유효\n      format?: 'email'| 'date' | ..etc,\n      pattern?: '필요한 RegExp',\n      default?: 'any value',\n    },\n    ...,\n    required: ['anyPropertyName1', ...] // required property\n  }\n}\n\n\nVALIDATION\n\n * JSON-Schema에서 지원하는 format을 사용할 수도 있고, enum, RegExp 등도 지원한다.\n\n * 선언한 스키마에 맞는 형식인지 확인하기 위해 Ajv [https://ajv.js.org/] 같은 모듈을 사용할 수도 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2428108847"
  },
  {
    "pageContent": "[OJT][JS] Syntax sugar\n\n\nSWAP VARIABLE\n\nconst a = { a: 1, b: 2 };\nconst b = { a: 3, b: 4 };\n[a.a, a.b, b.a, b.b] = [b.a, b.b, a.a, a.b];\n\n// a: { a: 3, b: 4 }\n// b: { a: 1, b: 2 }\n\nPlayground\n[https://www.typescriptlang.org/play?target=1#code/MYewdgzgLgBAhjAvDA3vAXDAjAGhgI0wCYYBfAbgChRJZ8lUMYBmPQmAFjKoG04A6OHgH42gsfgC6DHvnEF+o+PJGSgA]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2579595413/image-20221116-083924.png?api=v2]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2579595413"
  },
  {
    "pageContent": "[TS] 1. Optional Chaining\n\n\nSYNTAX\n\nobj?.prop       // optional static property access\nobj?.[expr]     // optional dynamic property access\nfunc?.(...args) // optional function or method call\n\n설명은 예시와 함께 아래서 하겠다.\n\n\nBASE CASE\n\na?.b                          // undefined if `a` is null/undefined, `a.b` otherwise.\na == null ? undefined : a.b\n\na?.[x]                        // undefined if `a` is null/undefined, `a[x]` otherwise.\na == null ? undefined : a[x]\n\na?.b()                        // undefined if `a` is null/undefined\na == null ? undefined : a.b() // throws a TypeError if `a.b` is not a function\n                              // otherwise, evaluates to `a.b()`\n\na?.()                        // undefined if `a` is null/undefined\na == null ? undefined : a()  // throws a TypeError if `a` is neither null/undefined, nor a function\n                             // invokes the function `a` otherwise\n\n\n\n\nWHAT’S OPTIONAL CHAINING?\n\nnull 또는 undefined가 있다면, 표현식 실행을 즉시(immediately) 중지시킬 수 있다. 기존 조건식이 필요 없고 우리는 단순히\n?.라는 새로운 연산자만 추가하면 된다.\n\n아래는 타입스크립트를 사용한다면 많이 사용하는 표현식 중 하나이다.\n\nif(data && data.item && data.item.id){\n  // ...\n}\n\n불필요한 nullish checks를 위해 && 오퍼레이터를 사용해 왔다.\n\n물론 저 코드를 쓰는것은 어렵진 않지만, 반복되는 코드로 인해 가독성이 떨어진다. 결국 원하는건 id가 있기를 바라는거 하나인데.\n\noptaional chaining을 적용하면 조금더 간단하고 멋진 코드가 된다.\n\nif(data?.item?.id){\n  // ...\n}\n\n\n\n--------------------------------------------------------------------------------\n\n\n기능\n\n\n1. OPTIONAL ELEMENT에 접근할 수 있다.\n\nfunction getArray<T>(arr?: T[]){\n  return arr?.[0];\n}\n\n위 예제를 기존의 방식으로 바꿔보면 아래와 동일한 코드이다.\n\nfunction getArray<T>(arr?: T[]){\n  return (arr === null || arr === undefined) ? undefined : arr[0];\n}\n\n\n\n\n2. OPTIONAL CALL이 가능하다.\n\nasync function makeRequest(url: string, log?: (msg: string) => void) {\n    log?.(`Request started at ${new Date().toISOString()}`);\n    // roughly equivalent to\n    //   if (log != null) {\n    //       log(`Request started at ${new Date().toISOString()}`);\n    //   }\n\n    const result = (await fetch(url)).json();\n\n    log?.(`Request finished at at ${new Date().toISOString()}`);\n\n    return result;\n}\n\n\n\n\n더 나아가기\n\n\nLONG SHORT-CIRCUITING\n\n아래 단락이 트리거 될 때, .? 뒤에 오는 모든 함수 호출, 프로퍼티 접근 등을 모두 건너 뛴다.\n\na?.b.c(++x).d  // if `a` is null/undefined, evaluates to undefined. Variable `x` is not incremented.\n               // otherwise, evaluates to `a.b.c(++x).d`.\na == null ? undefined : a.b.c(++x).d\n\n\nSTACKING\n\nOptional Chaining뒤에 또다른 Optional Chaining이 연속해서 올 수 있다.\n\na?.b[3].c?.(x).d\na == null ? undefined : a.b[3].c == null ? undefined : a.b[3].c(x).d\n  // (as always, except that `a` and `a.b[3].c` are evaluated only once)\n\n\n\n\n왜 NULL이 아닌 UNDEFINED로 평가할까?\n\nnull은 프로퍼티가 없는 것으로 간주한다. null?.b는 undefined이다.\n\n--------------------------------------------------------------------------------\n\n\n실제 프로젝트에 적용 전)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/251854888/image-20191219-070633.png?api=v2]\n\n\n\n\n실제 프로젝트에 적용 후)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/251854888/image-20191219-070652.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/251854888"
  },
  {
    "pageContent": "[TS] 2. Nullish Coalescing\n\n\nPRESENT\n\n우리는 아래와 같은 코드 작성에 익숙하고 결과에도 익숙하다.\n\nconst response = {\n  settings: {\n    nullValue: null,\n    height: 400,\n    animationDuration: 0,\n    headerText: '',\n    showSplashScreen: false\n  }\n};\n\nconst undefinedValue = response.settings.undefinedValue || 'some other default'; // result: 'some other default'\nconst nullValue = response.settings.nullValue || 'some other default'; // result: 'some other default'\n\n근데 이 결과는 종종 예상치 못한 결과를 이끌어 낸다. 아래 예제의 값을 예상해 보자.\n\nconst headerText = response.settings.headerText || 'Hello, world!';\nconst animationDuration = response.settings.animationDuration || 300;\nconst showSplashScreen = response.settings.showSplashScreen || true;\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]정답\n\nPotentially unintended. '' is falsy, result: 'Hello, world!'\n\nPotentially unintended. 0 is falsy, result: 300\n\nPotentially unintended. false is falsy, result: true\n\n예상한 값이 맞았더라도, 과연 저 코드를 저런 값이 나오기 위해 작성했을까? 자바스크립트는 ||에 대한 대한으로 새로운 ?? 이라는 아이를\n가지고 왔다.\n\n\nWHAT’S NULLISH COALESCING?\n\n굳이 해석해 보자면 “널한(?) 병합”이다. “Nullish”라는 단어가 없어서 정확하게는 잘 모르겠다.\n\n오히려 기존에 존재하던 널 병합 연산자가 맞는\n표현같다(https://en.wikipedia.org/wiki/Null_coalescing_operator\n[https://en.wikipedia.org/wiki/Null_coalescing_operator]).\n\n이 널 병합연산자는 기존에 ||가 0, false, '' 등 falsy로 평가되는 모든 값을 통과시켰다면, 이 아이는 똑똑하게 null과\nundefiend만 falsy한 값으로 평가하도록 돕는다.\n\n\n트랜스파일 결과\n\nTODO: 실제로 JS로 트랜스파일 하면 어떻게 코드가 나오는지 작성하면 더 간략하게 이해를 도울수 있을듯 하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/251888072/image-20191219-061801.png?api=v2]\n\n\nSYNTAX\n\n일단 문법은 간단하다. 위에서 말한대로 ??만 || 대신 써주면 된다.\n\n위에 예제를 그대로 바꿔보면 이제 신세계가 펼쳐진다.\n\nconst response = {\n  settings: {\n    nullValue: null,\n    height: 400,\n    animationDuration: 0,\n    headerText: '',\n    showSplashScreen: false\n  }\n};\n\nconst undefinedValue = response.settings.undefinedValue ?? 'some other default'; // result: 'some other default'\nconst nullValue = response.settings.nullValue ?? 'some other default'; // result: 'some other default'\nconst headerText = response.settings.headerText ?? 'Hello, world!'; // result: ''\nconst animationDuration = response.settings.animationDuration ?? 300; // result: 0\nconst showSplashScreen = response.settings.showSplashScreen ?? true; // result: false\n\n\nNULLISH COALESCING ASSIGNMENT\n\nNullish coalescing 대입연산도 가능하다.\n\nconst response = {\n  settings: {\n    nullValue: null,\n    height: 400,\n    animationDuration: 0,\n    headerText: '',\n    showSplashScreen: false\n  }\n};\n\nresponse.message ??= \"No message\"; // result: response.message = \"No message\"\n\n\n참고 자료\n\nhttps://tc39.es/proposal-nullish-coalescing/\n[https://tc39.es/proposal-nullish-coalescing/]\n\n\nNULLISH COALESCING ASSIGNMENT\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment]\n\n\nLOGICAL ASSIGNMENT\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment]\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/251888072"
  },
  {
    "pageContent": "[TS] 4. Type-Only & Inline Type Imports and Export\n\n\nTYPE-ONLY IMPORT\n\nTypeScript 3.8+ 부터 type만 import 하거나 export 할 수 있다. 즉, import type은 declaration만\n포함시키고, runtime에는 그 내용이 제거되어 type만 사용하는 경우 순환참조를 방지할 수 있다.\n\n관련 내용: Documentation\n[https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html]\n\nUser와 Photo가 oneToMany 관계일 경우, 아래와 같이 user.ts파일과 photo.ts파일로 class를 구분해서 모델링 할\n수도 있다.\n\n(아래는 예시일 뿐 실제로 typeorm을 사용한다면 타입이 아닌 값을 사용하기 때문에 import type을 할 수 없다.)\n\n// user.ts\n\nimport { Photo } from './photo';\n\nexport class User {\n    id: number;\n\n    photos: Photo[];\n\n    constructor(id: number, photos: Photo[]) {\n        this.id = id;\n        this.photos = photos;\n    }\n}\n\n// photo.ts\n\nimport { User } from './user';\n\nexport class Photo {\n    id!: number;\n\n    user!: User;\n\n    constructor(id: number, user: User) {\n        this.id = id;\n        this.user = user;\n    }\n}\n\n하지만 이 경우 순환참조가 되어 런타임에 에러가 발생할 수도 있다(항상 발생하는 것은 아닌데 발생할 수도 있어서 ).\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1299447979/image-20210202-142430.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1299447979/image-20210202-142450.png?api=v2]\n\n\n\n위와 같은 경우는 서로 type만 필요한 상황이기 때문에 import type을 하면 해결 가능하다. 값으로서 직접 사용 되는 경우는\n불가능하다.\n\n// user.ts\n\nimport type { Photo } from './photo';\n\nexport class User {\n ...\n}\n\n// photo.ts\n\nimport type { User } from './user';\n\nexport class Photo {\n   ...\n}\n\n\n\n\nINLINE TYPE IMPORT\n\nTypeScript 4.5 부터 하나의 Import 구문에서 Type-only Import 를 함께 작성할 수 있게 되었다.\n\nhttps://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#type-on-import-names\n[https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#type-on-import-names]\n\nimport type { BaseType } from \"./some-module.js\";\nimport { someFunc } from \"./some-module.js\";\n\nexport class Thing implements BaseType {\n    // ...\n}\n\nimport { someFunc, type BaseType } from \"./some-module.js\";\n\nexport class Thing implements BaseType {\n    someMethod() {\n        someFunc();\n    }\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1299447979"
  },
  {
    "pageContent": "[TS] 5. @ts-expect-error\n\nSince 3.9 공식 문서\n[https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#-ts-expect-error-comments]\n\n@ts-expect-error, @ts-ignore 는 둘 다 타입스크립트 에러를 무시하고 넘어가기 위해 사용 된다.\n\n사용법 구분\n\n * @ts-expect-error\n   \n   * 타입스크립트 에러가 발생할 것은 알지만 어쩔 수 없이 에러를 무시해야 할 때 사용 한다.\n   \n   * 런타임 에러가 발생하면 안된다. 진짜 타입 에러인 경우에만 사용.\n   \n   * https://github.com/Ecube-Labs/haulla-api/blob/e030bfc37498f5f777bb85af8a16534195e6b8f7/src/lib/ddd/ddd-model.ts#L45\n     [https://github.com/Ecube-Labs/haulla-api/blob/e030bfc37498f5f777bb85af8a16534195e6b8f7/src/lib/ddd/ddd-model.ts#L45]\n\n * @ts-ignore\n   \n   * “아몰랑 일단 넘어가자…” 할 때 사용 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1299480840"
  },
  {
    "pageContent": "[TS]type-challenge\n\nhttps://github.com/type-challenges/type-challenges/blob/main/README.ko.md\n[https://github.com/type-challenges/type-challenges/blob/main/README.ko.md]\n\n\n\n\n타입스크립트 타입 시스템 공부하기에 좋은 챌린지",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2855108619"
  },
  {
    "pageContent": "[TS] 학습\n\n\n\n * [TS][학습] Intro\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2344091654/TS+Intro]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2341568677"
  },
  {
    "pageContent": "[TS][학습] Intro\n\n\nWHAT?\n\n * A Typed Superset of JavaScript\n\n * TC39 채택된 Spec + 아직 채택되지 않은 Proposal Spec을 포함하여 구현한것.\n   \n   * TC39: Ecma International 산하의 자바스크립트 표준을 위한 그룹\n   \n   * 아무 Proposal이나 구현한것은 X. stage 2~3에 있는 것 중 MS 개발자들이 채택한 유용한 기능만.\n\n\nTYPE? VALUE?\n\n * 타입과 값을 헷갈리면 어떤 일이?\n   \n   * ts 에러. 삽질 파티.\n   \n   * 이건 그냥 타입스크립트를 이해 못한것이라고 봐야 한다.\n\n * 타입과 값을 헷갈리지 않으려면 어떻게?\n   \n   * 타입이 어디서 개입되고 있는지 제대로 알아야 한다.\n   \n   * 정말 모르겠으면 빌드해서 type definition file 생성되는지 확인해보면 된다.\n\n\nTRANSPILE\n\nhttps://www.typescriptlang.org/play [https://www.typescriptlang.org/play]\n\n\nDUCK TYPING\n\n> 그 것이 오리인지 100% 확실하지는 않다. 하지만 오리처럼 생겼고, 오리처럼 걷고, 오리처럼 헤엄치며, 오리처럼 꽥꽥 소리를 낸다. 이\n> 정도의 추론 단서라면 내가 보는 것이 오리라고 판단해도 전혀 무리는 없을 것이다.\n\n * 자바스크립트의 유연함과 타이핑의 장점을 모두 살릴수 있도록 해주는 강력한 TS의 기능 중 하나.\n   \n   * Go lang같은 언어에도 존재한다. →\n     https://www.popit.kr/golang%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%82%98%EB%B3%B4%EB%8A%94-duck-typing/\n     [https://www.popit.kr/golang%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%82%98%EB%B3%B4%EB%8A%94-duck-typing/]\n\n * 정의된 속성이 존재하고 시그니쳐가 맞으면 모두 해당 타입으로 인정한다.\n   \n   * https://www.w3schools.blog/duck-typing-typescript\n     [https://www.w3schools.blog/duck-typing-typescript]\n   \n   * 형태(인터페이스)가 같으면 별도의 캐스팅 없이 특정 타입으로 인정해준다는 의미\n     (실제 값이 해당 타입으로 캐스팅되는것이 아니므로 착각하면 안된다.)\n\n\n자주 하는 실수\n\n * 타입 캐스팅을 사용하다 보면 실제 타입과 값의 타입이 다를수 있다.\n   \n   * 캐스팅보단 타입 추론에 의해 결정되는 타입을 최대한 사용하는것이 좋다.\n\n\nTYPESCRIPT를 더 제대로 이해하기 위해서는?\n\n * https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide]\n\n * https://www.typescriptlang.org/ko/docs/handbook/typescript-in-5-minutes.html\n   [https://www.typescriptlang.org/ko/docs/handbook/typescript-in-5-minutes.html]\n\n\nTIPS\n\n * 발생한 에러가 어디서 발생시킨 에러인지 알 수 있어야 한다.\n   \n   * 모든 에러는 발생시키는 프로그램이 존재한다.\n   \n   * 그러므로 사용하는 도구에 익숙해져 ts 에러인지 js 에러인지 eslint 에러인지 구분 할 수 있어야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2344091654"
  },
  {
    "pageContent": "[JEST] 0. 기초 - Concept & global method\n\n\nJEST란?\n\n * 테스트 프레임 워크 \n * https://jestjs.io/en/ [https://jestjs.io/en/]\n\n\nFIXTURE\n\n→ 테스팅을 하는데 있어서 필요한 부분들 혹은 조건들을 미리 준비해 놓은 리소스 혹은 코드들\n\n→ 이 값은 어떤 객체가 될 수도 있고 환경이 될 수도 있고, DB가 될 수도 있다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nGLOBAL METHOD\n\n\n\n\n\nBEFOREALL(FN, TIMEOUT) / AFTERALL(FN, TIMEOUT)\n\n→ 모든 테스트가 완료된 전/후 기능을 실행\n\n→ 테스트 전체에서 공유되는 일부 전역 설정 상태를 정리하는 경우 유용\n\nAfterAll 원본 펼치기\n\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n\n\n\n\n\nBEFOREEACH(FN, TIMEOUT) / AFTEREACH(FN, TIMEOUT)\n\n→ 이 파일의 각 테스트가 완료된 전 / 후 실행\n\nbeforeEach 원본 펼치기\n\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n\n\n\n\n\nDESCRIBE(NAME, FN)\n\n→ 여러 테스트를 그룹화하는 블록을 만듬(테스트 계층 구조를 만든다!)\n\ndescribe 원본 펼치기\n\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrowError(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrowError(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n\n\n\n\n\nDESCRIBE.EACH(TABLE)(NAME, FN, TIMEOUT)\n\n→ table: 각 행에 대해 fn으로 전달되는 인수가 포함된 배열\n\n→ name: 테스트 슈트의 제목\n\nname의 경우 printf의 포맷팅을 따른다. \n\n>  * %p - pretty-format.\n>  * %s- String.\n>  * %d- Number.\n>  * %i - Integer.\n>  * %f - Floating point value.\n>  * %j - JSON.\n>  * %o - Object.\n>  * %# - Index of the test case.\n>  * %% - single percent sign ('%'). This does not consume an argument.\n\ndescribe.each() 원본 펼치기\n\ndescribe.each([[1, 1, 2], [1, 2, 3], [2, 1, 3]])(\n  '.add(%i, %i)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test(`returned value not be greater than ${expected}`, () => {\n      expect(a + b).not.toBeGreaterThan(expected);\n    });\n\n    test(`returned value not be less than ${expected}`, () => {\n      expect(a + b).not.toBeLessThan(expected);\n    });\n  },\n);\n\n→ test.each(table)(name, fn, timeout)도 동일하게 있으며 같은 논리\n\n\n\n\n\n.ONLY & .SKIP\n\n→ describe 또는 함수에 사용 가능.\n\n→ .only를 뒤에 붙여주면 해당 describe 또는 해당 테스트 함수만 실행됨(스킵은 반대)\n\n\n\n\n\nTEST(NAME, FN, TIMEOUT)\n\n→ 테스트에 필요한 테스트를 실행하는 메서드\n\ntest 원본 펼치기\n\n  test('정상 작동되야 한다', () => {\n    const fixture = createComponent(CeedDatePicker);\n    expect(fixture.componentInstance instanceof CeedDatePicker).toEqual(true);\n  });\n\n\n\n\n\nTEST.TODO(NAME)\n\n→ 테스트 계획을 짤때 사용\n\n→ 이미 테스트 코드를 구현했지만, 테스트가 중단되어 실행하지 않는 경우 .skip 사용 권장\n\n\n\n\n\n\n\ncf) 유용한 명령어\n\nnpm test — --only-changed // 변경 사항만 테스트함\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001201"
  },
  {
    "pageContent": "[JEST] 1. Expect\n\n([JEST] 0. 기초 - Concept & global method\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001201/JEST+0.+-+Concept+global+method] 에서\n언급한 개념은 설명을 생략한다)\n\n\n\n\nExpect는 사전적 의미랑 거의 유사한 뜻을 의미한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226427448/image2019-10-22_19-57-18.png?api=v2]\n\n\n\n\nJest에서도 특정 조건을 충족하는지 기대해 볼때 쓰인다. 좀 더 정확히는 그냥 결과를 예측하고 비교하는 것이다.\n\nexpect함수는 많은 메서드를 제공하는데, 감만 잡을 수 있게 몇 가지만 정리해보겠다.\n\n\n\n\n참고로 많이 나오는 matcher라는 개념은 \"(값이나 어떠한 결과를) 매칭 시켜주는 함수\"라고 생각하면 이해가 편하다.\n\n종류는 매우 많으며, jest는 matcher에 대해 수십가지의 extends를 제공한다(기본 제공도 많음). \n\n대표적으로 toBe(value), toEqual(value) 등이 있다. \n\n\n\n\n만약 아래에 원하는 결과가 없다면 참고 URL에서 찾아보면 된다.\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nEXPECT(VALUE)\n\n→ 값을 테스트 할 때 matcher와 함께 사용됩니다.\n\n→ 아래 예제는 `bestLaCroixFlavor()` 라는 문자열을 반환하는 메서드를 테스트 하는 예이다.\n\n\n\n\nEXPECT(VALUE)\n\ntest('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n\n→ 위 테스트는 bestLaCroixFlavor() 메서드를 실행시켜 값을 예측하는 테스트이며, 그 값이 grapefruit가 나온다면 테스트는\n성공할 것이다. (앞으로 이런 설명은 생략할 것이다.)\n\n\n\n\n\nCUSTOM MATCHER - EXPECT.EXTEND(MATCHERS)\n\n→ jest는 나만의 매처를 추가할 수 있는 옵션을 제공한다.\n\n→ 아래 예제는 숫자 유틸리티 라이브러리를 테스트하고 있고 숫자가 다른 숫자의 특정 범위 내에 나타나는 경우가 자주 있다고 가정한다.\n\n→ toBeWithinRange()를 matcher로 추상화 해보겠다.\n\nADD MATCHER\n\nexpect.extend({\n  toBeWithinRange(received, floor, ceiling) {\n    const pass = received >= floor && received <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be within range ${floor} - ${ceiling}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be within range ${floor} - ${ceiling}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('numeric ranges', () => {\n  expect(100).toBeWithinRange(90, 110);\n  expect(101).not.toBeWithinRange(0, 100);\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n\n\n\n\n물론 비동기 매처도 제공한다.\n\nEXPECT.EXTEND(VALUE)\n\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue == 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n\n\n\n\n→ 위 두 예에서 보다시피 두개의 키를 사용하여 객체를 반환하면 된다. true와 false에 대한 pass와 message ~!!\n\n\n\n\n\nEXPECT.ARRAYCONTAINING(ARRAY)\n\n→ 예상 배열의 모든 요소를 포함하는 수신 배열과 일치해야 한다. 즉, 예상되는 배열은 수신된 배열의 하위 집합이다. \n\n→ 따라서 예상된 배열에 없는 요소를 포함하는 수신된 배열과도 일치한다. \n\nEXPECT.ARRAYCONTAINING()\n\ndescribe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n\ncf) it은 test의 별칭이다. 자스민 등에서는 테스트가 아닌 it만 가능하다(but 현재 Ceed 에서는 test()로 통일하기로 했으니,\n프로젝트별로 무엇을 사용할지는 확인하면 될거같다.)\n\n→ expect.arrayContaining(array)과 반대되는 개념으로는 expect.not.arrayContaining(array)이\n있다. \n\n→ expect.not.arrayContaining(array)은 배열의 모든 요소를 포함하지 않는 수신된 배열과 일치하며, 따라서 예상되는\n배열은 수신된 배열의 하위 집합이 아니다. \n\nEXPECT.NOT.ARRAYCONTAINING(ARRAY)\n\ndescribe('not.arrayContaining', () => {\n  const expected = ['Samantha'];\n\n  it('matches if the actual array does not contain the expected elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(\n      expect.not.arrayContaining(expected),\n    );\n  });\n});\n\n\n\n\ncf) 수신하는 데이터가 array가 아니고 object인 경우 expect.objectContaining(object)를 사용하면 되고 반대는\n동일하게 not이 들어간다. 기본적인 논리는 array와 동일하기 때문에 생략한다.\n\ncf) string이면, 어떤 함수일지는 예상이 되니, 생략한다. 아무튼 위에랑 비스무리하게 생긴 아이가 string으로도 있다.\n\n\n\n\n\n.NOT\n\n→ 이미 눈치챘겠지만, 테스트하는 방향과 반대 방향으로 테스트 하고 싶을때 사용하면 된다. \n\n.NOT\n\ntest('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n\n\n\n\n\n.TOBE(VALUE)\n\n→ 기본 값을 비교하거나 객체 인스턴스의 참조 ID를 확인하는데 사용한다. \n\n→ === 비교라고 보면 된다. \n\n→ 하지만 주의점은 부동 소수점과는 사용하면 안된다(심심할때 크롬 콘솔에서 테스트 해보면 좋다, 왜 이런 결과인지는 논외 이므로 개인적인 검색을\n추천한다). \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226427448/image2019-10-22_20-38-46.png?api=v2]\n\n그냥 해도 안되니 당연히 === 와같은 toBe() 가 될리가 없다(멋져 자바스크립트)\n\n\n\n\n\n.TOEQUAL(VALUE)\n\n→ 객체 인스턴스의 모든 속성을 비교하는데 사용된다. \n\nTOEQUAL(VALUE)\n\nconst can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n\n\n\n\n\n.TOMATCH(REGEXPORSTRING)\n\n→ 문자열이 정규식과 일치하는지 확인\n\nTOMATCH\n\ndescribe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n\n\n\n\n\n.TOHAVELENGTH(NUMBER)\n\n→ 객체에 .length 속성이 있고 특정 숫자 값으로 설정되어 있는지 확인하는데 사용된다.\n\n→ 특히 배열 또는 문자열 크기를 확인할 때 유용하다.\n\n.TOHAVELENGTH(NUMBER)\n\nexpect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n\n\n\n\n\n.TOBEDEFINED()\n\n→ 변수가 정의되지 않았는지 확인하는데 사용한다.\n\n→ 아래 예제는 fetchNewFlavorIdea() 함수가 무언가를 반환하는지 확인하려는 예제다.\n\nTOBEDEFINED()\n\ntest('there is a new flavor idea', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n\n\n\n\n\n.TOBEFALSY()\n\n→ 값이 무엇인지 상관 없이, 거짓을 확인하고자 할때 사용한다. (↔ .toBeTruthy() )\n\nTOBEFALSY()\n\ntest('drinking La Croix does not lead to errors', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n\ncf) javascript에서는 falsy 값은 6개 이다. (false, 0, '', null, undefined, NaN)\n\n\n\n\n\n.TOBENULL()\n\n→ .toBe(null)과 동일하지만 이게 오류 메시지가 더 좋다.\n\n\n\n\n\n.TOCONTAIN(ITEM)\n\n→ item이 배열에 있는지 확인하려는 경우 사용\n\nTOCONTAIN(ITEM)\n\ntest('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n\n\n\n\n\n\n\n.TOCONTAINEQUAL(ITEM)\n\n→ 특정 구조와 값을 가진 항목이 배열에 포함되어 있는지 확인하려는 경우\n\nTOCONTAINEQUAL(ITEM)\n\ndescribe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n\n\n\n\n.ASSERTIONS(NUMBER)\n\n→ 프로그램에서 assert는 변수가 원하는 값을 가지고 있는지 확인하는 코드를 의미한다.\n\n→ number : ex/ expect.toBe(value) 와 같이 테스트 코드 실행 후 원하는 값이 나오는지 확인하는 코드가 실행되는 횟수\n(라고 이해했는데 혹시 잘못 이해한 거라면 정정 부탁드립니다)\n\n→ 이를 이용해서 테스트가 원하는 방향으로 진행되지 않으면 실패하도록 유도할 수 있다.\n\nex/ 아래 샘플에서 원하는대로 에러가 발생하지 않으면 catch문의 expect(err).tobe~~가 실행되지 않으므로\nexpect.assertions(1)을 만족하지 못하여 테스트가 실패하게 된다.\n\nASSERTIONS(NUMBER)\n\n describe('Cat to Dog', () => {\n    test('Trying transform cat to dog will be failed', () => {\n      expect.assertions(1);\n      try {\n        Cat.transform(Dog); // any code cause error\n      } catch (err) {\n        expect(err).toBeBoom(\n          Boom.badRequest(`Cat can not be a dog!`);\n        );\n      }\n    });\n });\n\n\n\n--------------------------------------------------------------------------------\n\n\n참고 URL\n\nhttps://jestjs.io/docs/en/expect [https://jestjs.io/docs/en/expect]\n\nhttps://github.com/jest-community/jest-extended\n[https://github.com/jest-community/jest-extended]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226427448"
  },
  {
    "pageContent": "[필독] Git - Force push\n\nTL;DR: force push 하지 마세요.\n\ngit push --force를 사용하면 이미 원격 서버에 푸시된 커밋 히스토리를 강제로 덮어씌울 수 있습니다.\n\n하지만 이미 공개된 깃 히스토리를 강제로 변경하지 마세요. 더러운 커밋, 실수, 오타, 이상한 커밋 메시지 등의 이유로 force push하지\n마세요. 가장 좋은 것은 커밋 메세지와 변경사항을 잘 관리하는 것입니다.\n\n\nFORCE PUSH를 사용하면 발생할 수 있는 참사\n\n 1. 다른 작업자의 커밋이 사라질 수 있다.\n    작업자 1이 A 브랜치에 커밋 후 푸시했는데 작업자 2가 그 커밋이 포함되지 않은 로컬 커밋 히스토리로 A 브랜치에 force push\n    해서 덮어씌우는 사례\n\n 2. 다른 작업자의 로컬 깃 히스토리를 망가트린다.\n    로컬 커밋 히스토리와 원격 커밋 히스토리가 달라져서 정상적인 pull이 불가능해진다. 이런 경우 모든 다른 작업자들이 원격 커밋\n    히스토리로 자신의 로컬 커밋 히스토리를 덮어쓰고 다시 변경사항을 반영하거나, 억지로 머지를 해서 푸시를 하고 브랜치 그래프가 괴상하게\n    꼬이게 된다.\n\n\nFORCE PUSH를 사용할 수 있는 예외상황\n\n 1. 보안 정보가 커밋으로 올라간 경우\n    \n    1. DB, Secret Key 등 어딘가에 공개되어선 안되는 정보를 없애기 위해 사용될 수 있습니다.\n\n 2. force push로 망가진 커밋 히스토리를 복구하는 경우 (참고\n    [https://evilmartians.com/chronicles/git-push---force-and-how-to-deal-with-it])\n\n이 외에는 절대 사용하지 말아주세요. 영원히 혼자 작업할 브랜치라고 해도 커맨드 실수나 Git 클라이언트의 config, 버전에 따라서 문제가\n발생할 여지가 있습니다.\n\n\n대체 수단들\n\n * git revert:\n   변경사항을 다시 되돌리는 커밋을 만들어서 푸시하세요.\n\n * git push --force-with-lease (Git ^1.8.5):\n   원격 브랜치가 마지막으로 fetch한 것과 다르면(내가 pull한 이후 다른 작업자가 커밋을 푸시했음) 에러가 납니다.\n   참사 1을 예방할 수 있지만, 참사 2는 막을 수 없습니다.\n\n\n참고\n\n 1. Git을 개발한 리누스 토발즈도 force push를 하지 말라고 권장합니다.\n    [https://stackoverflow.com/a/432518]\n\n 2. force push 사고 사례와 트러블 슈팅\n    [https://evilmartians.com/chronicles/git-push---force-and-how-to-deal-with-it]\n\n 3. force push with lease\n    [https://estl.tech/a-gentler-force-push-on-git-force-with-lease-fb15701218df]\n\n 4. force push된 원격 브랜치를 pull 하는 방법\n    [https://stackoverflow.com/questions/14787776/how-to-pull-after-a-forced-git-push]\n    → 커밋하지 않은 변경사항 뿐이라면 stash를 활용해도 좋습니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/252018749"
  },
  {
    "pageContent": "GitHub advanced tips\n * Quote reply\n * Auto link\n   * Hash\n * Insert code snippet in comment\n * VSCode on Github repo (정식 명칭 )\n * 기타\n\n--------------------------------------------------------------------------------\n\n\nQUOTE REPLY\n\n전체 또는 드래그한 부분만 인용하여 댓글을 달 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/2021-07-13%2010-22-06.2021-07-13%2010_22_40.gif?api=v2]\n\n참고: https://github.blog/changelog/2018-09-11-quote-reply-to-a-comment/\n[https://github.blog/changelog/2018-09-11-quote-reply-to-a-comment/]\n\n\nAUTO LINK\n\n\nHASH\n\n그냥 해시의 앞자리 6글자를 쓰면 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/image-20210513-082946.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/image-20210513-082956.png?api=v2]\n\n이 외에도 이것저것 오토링크 걸 수 있는데 아래 링크 참고하세요\n\nhttps://docs.github.com/en/github/writing-on-github/autolinked-references-and-urls\n[https://docs.github.com/en/github/writing-on-github/autolinked-references-and-urls]\n\n\nINSERT CODE SNIPPET IN COMMENT\n\n 1. 원하는 permalink를 복사합니다. (방법\n    [https://docs.github.com/en/github/managing-files-in-a-repository/getting-permanent-links-to-files])\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/image-20210513-083340.png?api=v2]\n\n 2. 댓글에 그냥 붙여넣습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/image-20210513-083653.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/image-20210513-083704.png?api=v2]\n\n동일한 레파지토리의 permalink만 코드스니펫으로 출력되고 이외에는 링크만 나옵니다.\n\n참고:\nhttps://docs.github.com/en/github/managing-your-work-on-github/creating-a-permanent-link-to-a-code-snippet\n[https://docs.github.com/en/github/managing-your-work-on-github/creating-a-permanent-link-to-a-code-snippet]\n\n\nVSCODE ON GITHUB REPO (정식 명칭 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png])\n\n레포에서 . 을 누르면 됩니다.\n\nPR에서 누르면 해당 브랜치의 형상으로 열립니다. (File changes 들어가서 누르면 안되는데 버그인지는 모르겠습니다)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1799913483/2021-08-12%2011-17-36.2021-08-12%2011_19_06.gif?api=v2]\n\n아직 지원되지 않는 vscode extensions도 많고 소소한 제약이 많지만 전체적으로 코드를 보면서 리뷰하기 좋은 기능인것 같습니다.\n\n\n\n\n기타\n\n * 편리한 git alias\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165282370/git+alias]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1799913483"
  },
  {
    "pageContent": "[OJT][Git] package-lock.json/yarn.lock 충돌 해결\n\n패키지 관리자의 lock 파일 존재 이유는 모두 같기 때문에 각종 lock 파일의 충돌 해결방법은 모두 동일하다.\nex) Podfile.lock\n\n코드를 병합할 때 package-lock.json 파일이 conflict가 났다면 직접 해결하지 말것.\n잘못 해결해서 배포하면 서비스가 다운될 수 있으므로 아래의 절차를 따른다.\n\n 1. 충돌 발생\n\n 2. main 브랜치의 lock 파일을 가져온다.\n    git checkout main -- package-lock.json\n    git checkout main -- yarn.lock\n\n 3. npm i / yarn install 을 통해 lock 파일을 현재 의존성에 맞게 정리한다.\n\n 4. conflict 해결 커밋 (git add, git commit)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2086961308"
  },
  {
    "pageContent": "[FP] 1. 명령형 프로그래밍 vs 선언적 프로그래밍\n\n\n명령형 프로그래밍\n\n자바와 같은 언어는 흔히 명령형(imperative) 혹은 절차적(procedural) 프로그래밍이라고 합니다. \n\n객체지향 언어를 지원하기 때문에 더 많이 쓰인다고 하더라고요.\n\n명령형 프로그래밍은 어떤 결과를 내기기 위해 상태를 변경하는 구문을 위부터 아래로 쭉~ 늘려놓은 sequence에 불과합니다.\n\n간단히 코드를 보겠습니다.\n\n명령형 프로그래밍\n\nconst array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nfor(let i=0; i < array.length; i++){\n\tarray[i] = Math.pow(array[i], 2);\n}\narray; // [0,1,4,9,16,25,36,49,64,81]\n\n가장 흔한 프로그래밍인데요, \n\n\n선언적 프로그래밍\n\n프로그램의 서술부(description)와 평가부(evaluation)을 분리하여, 제어 흐름이나 상태 변화를 특정하지 않고도 프로그램 로직이\n무엇인지를 표현식(expression)으로 나타냅니다.\n\n같은 작업이라도 함수형으로 접근하면, 개발자가 각 요소를 올바르게 작동시키는 일에만 전념하고 루프 제어는 시스템의 다른 파트에 일임할 수\n있습니다.\n\n선언적 프로그래밍\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(\n\tnum => Math.pow(num, 2)\n);\t// [0,1,4,9,16,25,36,49,64,81]\n\n위 예제만 보면 한 가지 궁금증이 생깁니다. 왜 루프를 제거해야 하는가.\n\n루프는  재사용하기도 어렵거니와 다른 연산에 끼워 넣기도 어려운 명령형 제어 구조물 입니다. 또 루프는 성격상 반복할 때마다 값이나 상태가 계속\n바뀝니다. \n\n하지만 함수형 프로그래밍은 순수함수(pure function), 즉 side effect가 없는 무상태성(statelessness)와\n불변성(immutability)를 지향 합니다.\n\n--------------------------------------------------------------------------------\n\ncf) impure function\n\n일반적으로 외부 자원을 상대로 데이터를 읽고 쓰는 함수(ex Date.now(), this 키워드를 거쳐 인스턴스 데이터에 접근하는 것)\n\n순수하지 않는 함수\n\nvar counter = 0;  // counter 값이 언제라도 변할 수 있어서 어떤 값이 반환될지 알 수 없음\nfunction increment() {\n\treturn ++counter;\n}\n\n참조 투명한 함수로 변경(설명은 아래..)\n\nconst increment = counter => counter + 1;\n\ncf) 참조 투명성(referential transparency)\n\n→ 어떤 함수가 동일한 입력을 받았을때 동일한 결과를 내면, '참조 투명한 함수'라고 한다.\n\n→ 함수 호출을 값 또는 동일한 결과를 가진 참조 가능한 것으로 대체할 수 있음을 의미\n\n--------------------------------------------------------------------------------\n\n물론 모든 것에 대해 순수함수를 사용하는 것은 현실적으로 어렵다.\n\n그렇지만 상태 변이를 줄이고 관리할 수 있는 프레임워크를 제공하여 순수/불순 함수를 구분하자는 것이다. \n\n\n\n실제 예제를 통해 직접 코드를 수정해 보자.\n\n아래 예제는 사회보장번호(SSN)로 학생 레코드를 검색하여 브라우저에 표시하는 프로그램이다.\n\nSIDE EFFECT를 일으키는 명령형 함수 예\n\nfunction showStudent(ssn) {\n    let student = db.find(ssn);\n    if(student != null) {\n        document.querySelector(`#{elementId}`).innerHTML =\n        `${student.ssn},\n        ${student.firstname},\n        ${student.lastname}`;\n    } else {\n        throw new Error('학생을 찾을 수 없습니다!');\n    }\n}\n\nshowStudent('444-44-4444');\n\n위 함수에서 발생하는 Side Effect\n\n 1. 외부 변수 db를 통해 데이터에 접근하고 있으며, 이 변수는 실행 중 언제라도 null을 참조하거나 호출 단계마다 상이한 값을 가리키며\n    결과가 달라질 수 있어 무결성을 깨질 수 있다.\n\n 2. elementId도 전역 변수 ... \n\n 3. HTML 요소를 직접 고침 - DOM은 그 자체로 가변적인 전역 공유 자원입니다.\n\n 4. 학생 레코드를 찾지 못해 예외를 던지면 전체 프로그램의 스택이 툭 풀리면서 종료된다. \n\n\n\n이 함수는 외부 자원에 의존하므로 코드가 유연하지 않고 다루기가 힘들고 테스트 역시 어렵습니다.\n\n그럼 이 함수를 함수형 프로그래밍으로 바꾸면 어떨까요? \n\n조금씩 개선해 보겠습니다.\n\n\n개선 1)\n\n 1. 긴 함수를 하나의 목적을 가진 짧은 함수로 각각 분리한다. → 학생 레코드를 조회하는 일과 화면에 그리는 일을\n    분리합니다(Currying, 커링 기법 사용). \n\n 2. 함수가 해야할 작업에 필요한 인수를 모두 명시하여 부수효과 개수를 줄인다. \n\nSHOWSTUDENT 개선1 - 커링\n\nconst find = curry((db, id) => {\n    let obj = db.find(id);\n    if(obj === null) { // null 체크 분기문을 포함함으로서 *참조 투명성*을 유지합니다.\n        throw new Error('객체를 찾을 수 없습니다.');\n    }\n    return obj;\n})\n\nconst csv = student => `${student.ssn}, ${student.firstname}, ${student.lastname}`;\n\nconst append = curry((selector, info) => {\n    document.querySelector(selector).innerHTML = info;\n});\n\n\n\ncf) 커링(currying)이란?\n\n→ 인자를 여러개 받는 함수를 분리하여, 인자를 하나씩만 받는 함수의 체인으로 만드는 기법\n\n(참고 URL : https://stackoverflow.com/questions/36314/what-is-currying\n[https://stackoverflow.com/questions/36314/what-is-currying] ,\nhttps://edykim.com/ko/post/writing-a-curling-currying-function-in-javascript/\n[https://edykim.com/ko/post/writing-a-curling-currying-function-in-javascript/])\n\n\n개선 1 리뷰)\n\n 1. 재사용 가능한 컴포넌트 3개로 나뉘었고 코드가 유연해지며, 신경 써서 관리할 코드 크기가 확 줄어들기 때문에 생산성을 높일 수 있다. \n\n 2. 프로그램이 해야할 일들을 고수준에서 단계별로 명확하게 보여주는 선언적 스타일을 따르므로 코드 가독성이 향상됩니다.\n\n 3. 순수하지 않는 로직을 순수함수에서 배제했다.\n\n\n여기서 좀 더 발전된 함수형 프로그래밍에 대한 정의!\n\n외부에서 관찰 가능한 부수효과가 제거된 불변 프로그램을 작성하기 위해 순수함수를 선언적으로 평가하는 것\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/216006674"
  },
  {
    "pageContent": "[FP] 2. 객체를 다루는 법 및 고차 함수\n\n\nA. 객체 다루기 - FP가 원하는 수준의 불변성을 실현할려면..\n\n 1. const를 사용하지 → 다만, const만으로는 부족함\n    const의 한계\n    \n    const student = new Student('Jacob', '0812', 'kind');\n    student.name = 'can'; // 속성값이 바뀌어 버림\n\n 2. 객체 구조가 단순하면 값 객체 패턴(value object pattern)을 사용한다.\n    \n    값 객체 패턴(zipCode, string, number, date ...)\n    \n    function zipCode(code, location) {\n        let _code = code;\n        let _location = location || '';\n    \n        return { // 클로저는 나중에!\n            code: function () {\n                return _code;\n            },\n            location: function () {\n                return _location;\n            },\n            fromString: function (str) {\n                let parts = str.split('-');\n                return zipCode(parts[0], parts[1]);\n            },\n            toString: function () {\n                return _code + '-' + _location;\n            }\n        };\n    }\n    \n    const princetonZip = zipCode('08544', '3345');\n    princetonZip.toString(); // 08544-3345\n    \n    이런 변수는 클로저를 거쳐야만 객체 리터럴에 접근할 수 있으며, toString 메서드는 순수함수가 아니지만, 순수함수처럼 작동합니다.\n\n\n\n\n       3. 사본을 만들어 새로 만들어 반환한다.\n\n사본 만들어!\n\nfunction coordinate(lat, long) {\n    let _lat = lat;\n    let _long = long;\n\n    return {\n        latitude: function () {\n            return _lat;\n        },\n        longitude: function () {\n            return _long;\n        },\n        translate: function (dx, dy) { // 반환된 좌표를 새 사본 객체로 반환 \n            return coordinate(_lat + dx, _long + dy);\n        },\n        toString: function () {\n            return `(${_lat}, ${_long})`;\n        }\n    };\n}\n\nconst greenwich = coordinate(51.4778, 0.0015);\ngreenwich.toString(); // (51.4778, 0.0015)\n\n\n\n\n     4. Object.freeze \n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nOBJECT.FREEZE\n\nwritable처럼 숨겨진 메타속성을 제어해서 내부 조작을 할 수 있는 방법\n\nobject.freeze() 함수는 writable 속성을 false로 세팅해서 객체 상태를 못 바꾸게 동결합니다. \n\nObject.freeze()\n\n'use strict'\nclass Person {\n    constructor(name, birth, attr){\n        this._name = name;\n        this._birth = birth;\n        this._attr = attr;\n    }\n}\n\nconst person = Object.freeze(new Person('Jacob', 812, 'kind'));\nconsole.log(person); // Person { _name: 'Jacob', _birth: 812, _attr: 'kind' }\nperson._name = 'Can';\n\nconsole.log(person); // TypeError: Cannot assign to read only property '_name' of object '#<Person>'\n\n\n\n\n몇 가지 테스트를 해보니, use strict 모드가 아니면, 객체 할당시에는 에러가 나지 않고 컴파일도 되지만, 실제 값 할당이 되지 않고\n기존 할당값이 그대로 출력됩니다. \n\n다만 Object.freeze의 경우 최상위 객체만 동결되는 얕은 동결(shallow freeze)입니다.\n\nDeep freeze (수작업... 시름....) 원본 펼치기\n\nconst isObject = val => val && typeof val === 'object';\n\nfunction deepFreeze(obj) {\n    if(isObject(obj) && !Object.isFrozen(obj)){ // 이미 동결된 객체 무시 \n        Object.keys(obj).forEach(name => deepFreeze(obj[name])); // 재귀 호출 - 익숙치 않는 패턴이라 공부해볼 예정\n        Object.freeze(obj);\n    }\n    return obj; // 루트 객체를 동결\n}\n\n\n\n\n아직까지는 현실적인 코드라고 하기에는 조금 부족한거 같네요...;; 그렇다면?\n\n람다JS에서 구현해 놓은 렌즈를 사용하면 되지만(전역 객체 R을 이용한 셋과 뷰어를 사용..), 내용을 생략!\n\n(참고 URL: https://www.npmjs.com/package/ramda\n[https://www.npmjs.com/package/ramda], https://ramdajs.com/\n[https://ramdajs.com/] ) \n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nB. 고차 함수(HIGHER-ORDER FUNCTION)\n\n함수 인수로 전달하거나 함수를 반환받을 수 있음. FP를 구사하는 근간인 개념. \n\n아래 예제에서 보다시피, 자바스크립트의 함수는 일급 + 고차 함수이기 때문에, 자신이 받은 입력값을 기반으로 정의돈 언젠가는 실행될 값에 지나지\n않는다.('yet-to-be-executed')\n\n나는 고차함수야\n\nfunction applyOperator(a, b, opt){\n    return opt(a,b);\n}\n\nconst muliplier = (a, b) => a * b;\n\napplyOperator(2, 3, muliplier); // 6 \n\n// -------------------------------------\n\nfunction add(a) {\n    return function(b) {\n        return a+b;\n    }\n}\n\nadd(3)(3); // 6\n\n이런 고차 함수를 이용하면 장황한 프로그램을 단순화 시킬 수가 있다.\n\n아래 예제는 마국 거주자 명단을 출력하는 프로그램입니다.\n\n리펙토링전(명령형)\n\nfunction printPeopleInTheUs(people) {\n    for(let i=0; i < people.length; i++){\n        let thisPerson = people[i];\n        if(thisPerson.address.country === 'US'){\n            console.log(thisPerson);\n        }\n    }\n}\n\nprintPeopleInTheUs([p1, p2, p3]); // p1, p2, p3는 Person 인스턴스\n\n리펙토링후(고차함수 활용) 원본 펼치기\n\nfunction printPeople(people, selector, printer) {\n    people.forEach(function(person){ // 함수형 프로그램에서 즐겨쓰는 루프문\n        if(selector(person)){\n            printer(person);\n        }\n    });\n}\n\nconst inUs = person => person.address.country === 'US';\nprintPeople(people, inUs, console.log);\n\n\n\n\n고차함수를 쓰면 '선언적 패턴'이 점점 늘어나기 시작해서 표현식만 봐도 프로그램이 하는 일을 파악할 수 있다.\n\n(이렇게 사고를 전환하는게 쉽지가 않네요..ㅠㅠ)\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nC. 클로저(CLOSURE)\n\n→ 함수를 선언할 당시의 환경에 함수를 묶어둔 자료구조(함수 선언부의 물리적 위치에 의존하므로, 정적 스코프(static scope) 혹은 어휘\n스코프(lexical scope)라고 한다)\n\n클로저 간단한 예\n\nfunction makeAddFunction(amount){\n    // add 함수는 makeAddFunction에 어휘적으로 바인딩 되어 amount 변수에 접근 가능하다.\n    function add(number){\n        return number + amount;\n    }\n    return add;\n}\n\nconst addTenTo = makeAddFunction(10);\nconsole.log(addTenTo(10)); // 20\nconsole.log(makeAddFunction(10)(10)); // 20\n\n\n\n\n→ 클로저는 바깥 스코프(전역), 부모 함수의 내부 스코프에 위차한 변수, 부모 함수의 매개변수, 함수 선언부 다음에 선언한 변수까지\n보관됩니다.\n\n→ 함수 본체 내부 코드는 이들 각 스코프에 정의된 변수와 객체에 접근 가능하며, 전역 스코프는 모든 함수가 공유합니다. \n\n\n\n\n책에 있는 nice 예제\n\nvar outerVar = 'Outer'; // 전역 변수\nfunction makeInner(params){\n    var innerVar = 'Inner'; // makeInner 내부에 지역 변수\n\n    function inner(){\n        console.log(\n            `${outerVar}, ${innerVar}, ${params}이 출력되네?`\n        )\n    }\n    return inner;\n}\n\nvar inner = makeInner('Params'); // inner 함수가 반환됨. \ninner();\n\n\n\n\n'var inner = makeInner('Params'); ' 에서 makeInner 함수의 실행이 끝났으므로 gc의 대상이 되서\ninnerVar 변수는 사라져 undefined가 되어야할거 같지만, \n\n클로저의 힘으로 값이 제대로 출력됩니다(신기신기). makeInner가 반환한 함수가 자신이 선언되었던 스코프에 존재했던 변수들을 모두 기억해서\n붙잡아둔거죠.\n\n\n\n\n\n전역 스코프(GLOBAL SCOPE)의 문제점\n\n→ 가장 단순하면서, 가장 나쁜!! 스크프\n\n→ FP에서는 관찰 가능한 어떤 변화도 함수에서 전파되는 것을 금기시 하지만, 전역스코프가 이런 변화를 일으키는 원인이 될 수 있음\n\n→ 모듈 단위로 코드를 잘 묶어두지 않으면 namespace가 충돌 할 수 있다. → 선언된 변수, 함수를 예기지 않게 override하는\n문제도 생길 수 있다.\n\n→ 전역 데이터를 읽고 사용할려면 어쩔 수 없이 외부에 의존하게 되어 함수가 side effect를 유발하는 원인이 된다.\n\n→ 전역 데이터는 변수 상태가 언제 바뀌는지 머릿속에서 따라가야 해서 점점 알 수 없는 프로그램을 만드는 부작용을 초래 \n\n\n\n\n\nD. 클로저 응용\n\n→ 전역 범위의 데이터 공유를 피하기 위해 전역 이름공간을 관리하는 수단으로 쓰임\n\n→ 모듈 패턴(module pattern)\n\n→ 내부 변수를 캡슐화하면서 전역 레퍼런스 개수를 줄이고 외부 세계에는 딱 필요한 기능한 표출(export)하기 위해 즉시 실행함수(IIFE)를\n사용\n\n모듈의 뼈대(참고용) 원본 펼치기\n\n// 에러 발생시 스택을 보며 추적할 때 IIFE를 식별할 수 있게 이름을 붙임 \nvar MyModule = (function MyModule(export) {\n    let _myPrivateVar = ...; // 두 메서드를 제외하고는 프라이빗 변수는 이 함수 밖에서 접근할 수 없다.\n\n    export.method1 = function(){\n        // working\n    };\n\n    export.method2 = function(){\n        //working\n    };\n    return export;\n}(MyModule || {})); // MyModule.method1()로 호출\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n여기까지는 기초 지식 및 배경지식.\n\n다음부터 좀 더 FP에 가까운 것을 작성해 보겠습니다.\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/215122371"
  },
  {
    "pageContent": "[FP] 3. 로대시JS\n\n→ Lodash라는 함수형 라이브러리\n\n→ 개발자가 함수형 프로그램을 작성하도록 유도하는 중요한 장치를 제공하고, 여러가지 공통적인 프로그래밍 작업을 처리하는데 유용한 도우미 함수를\n제공 \n\n→ 'npm i --save lodash'\n\n→ 전역 객체 _ (low-dash, 로대시 라고 읽음)를 통해 필요한 함수를 꺼내 쓰면됨.\n\n→ 내부적으로 언더스코어 JS를 개선한 라이브러리\n\n\n\n\n\n3가지 중요한 함수(MAP, REDUCE, FILTER)\n\n참고용(안봐도 돼요) 원본 펼치기\n\nexports.Person = class Person {\n\tconstructor(ssn,firstname, lastname, birthYear = null, address = null) {\n\t\tthis._ssn = ssn;\n\t\tthis._firstname = firstname;\n\t\tthis._lastname = lastname;\n\t\tthis._birthYear = birthYear;\n\t\tthis._address = address;\n\t}\n\n\tget ssn() {\n\t\treturn this._ssn;\n\t}\n\n\tget firstname() {\n\t\treturn this._firstname;\n\t}\n\n\tset firstname(firstname) {\n\t\tthis._firstname = firstname;\n\t\treturn this;\n\t}\n\n\tget lastname() {\n\t\treturn this._lastname;\n\t}\n\n\tget birthYear() {\n\t\treturn this._birthYear;\n\t}\n\n\tget address() {\n\t\treturn this._address;\n\t}\n\n\tget fullname() {\n\t\treturn `${this._firstname} ${this._lastname}`;  \n\t}\n}; // 코드 복붙했더니, 무조건 <b>가 되버리네여... 이상해\n\n\n._MAP: 데이터를 변환\n\n→ 배열 각 원소에 이터레이터 함수를 적용하여 크기가 같은 새 배열을 반환하는 고차함수\n\n→ 루프를 쓰거나 괴팍한 스코프 문제를 신경 쓸 필요 없이 컬렉션의 원소를 전부 파싱할 경우 유용\n\n예제(학생 리스트에서 성명 추출)\n\nvar result = [];\nvar persons = [p1, p2, p3, p4];\n\nfor(let i = 0; i < persons.length; i++){\n    var p = persons[i];\n    if(p !== null && p !== undefined){\n        result.push(p.fullname);\n    }\n}\n\n\n\n\n고차 함수를 써서 변수 선언부를 모두 없앰.\n\n_.map 사용\n\n_.map(persons, s => (s !== null && s !== undefined ? s.fullname : ''));\n\n\n\n\ncf) map 구현하기\n\nmap 구현부 원본 펼치기\n\nfunction map(arr, fn) {\n    const len = arr.length,\n    result = new Array(len); // 입력받은 배열과 크기가 동일한 배열 result를 선언\n    for(let idx=0; idx < len; ++idx){\n        result[idx] = fn(arr[idx], idx, arr);\n    }\n    return result;\n}\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n_.REDUCE: 결과를 수집\n\n→ 원소 배열을 하나의 값으로 짜내는 고차함수로, 원소마다 함수를 실행한 결괏값의 누적치를 계산한다.\n\n\n\n\ncf) reduce 구현하기(fn 이터레이터 함수 - 매개변수는 누산치, 현재값, 인텍스, 배열 / acc - 계산할 초깃값으로 넘겨받는 인수)\n\nreduce 원본 펼치기\n\nfunction reduce(arr, fn, acc) {\n    let idx = -1,\n        len = arr.length;\n\n        if(!acc && len > 0) {\n            acc = arr[++idx];\n        }\n\n        while (++idx < len) {\n            acc = fn(acc, arr[idx], idx, arr);\n        }\n\n        return acc;\n}\n\n\n\n\nex) map과 reduce를 조합하여 통계치를 산출\n\n국가별 인구 계산하기(풀코드가 아니므로 논리만!)\n\nconst getCountry = person => person.address.country;\n\nconst gatherStats = function(stat, criteria) {\n    stat[criteria] = _.isUndefined(stat[criteria]) ? 1 : stat[criteria] + 1;\n    return stat;\n};\n\n_(persons).map(getCountry).reduce(getherStats, {});\n\n\n\n\n→ but, reduce는 일괄적용(apply-to-all) 연산이라서 배열을 순회하는 도중 그만두고 나머지 원소를 생략할 방법이 없어,\n_.some, _.isUndefined, _.isNull 같은 함수를 써서 좀 더 효율적인 검증이 필요하다. \n\n\n\n\n\n._REDUCERIGHT: 오른쪽에서 왼쪽으로 결과를 수집\n\n→ reduce랑 대부분 동일하나 진행방향이 반대!\n\nreduceRight 원본 펼치기\n\nfunction reduceRight(arr, fn, acc) {\n    let idx = arr.length;\n\n        if(!acc && idx > 0) {\n            acc = arr[--idx];\n        }\n\n        while (--idx < 0) {\n            acc = fn(acc, arr[idx], idx, arr);\n        }\n\n        return acc;\n}\n\n\n\n\n\n_.FILTER: 원하지 않는 원소를 제거\n\n→ if-else문을 남발하는 대신 필터를 사용하면 코드가 한결 깔끔해 진다. \n\n→ 오류 데이터를 제거하는 용도로 자주 쓰임 \n\n\n\n\ncf) filter 함수 구현하기\n\nfilter 구현하기 원본 펼치기\n\nfunction filter(arr, predicate) {\n    let idx = -1,\n        len = arr.length,\n        result = [];\n\n        while( ++idx < len) {\n            let value = arr[idx];\n            if(predicate(value, idx, this)) {\n                result.push(value);\n            }\n        }\n        return result;\n}\n\n(RxJS 코드 까봤을때도 predicate 라는 단어가 많이 사용 되던데, '술부'라는 뜻이고 그냥 \"조건\"( | 조건 함수)으로 해석하면\n됩니다.)\n\n\n\n\nPerson 객체 컬랙션에서 1903년 출생자만!\n\nconst bornIn1903 = person => person.birthYear === 1903;\n_(persons).filter(bornIn1903).map(fullname).join(' and ');\n\n\n\n\n\n_.FLATMAP: 새 배열로 병합\n\nTMI) RxJS에서는 flatMap의 mergeMap의 별칭으로 사용됩니다.\n\nflatMap 구현하기 원본 펼치기\n\nfunction flatMap(arr, predicate) {\n    let idx = -1,\n        len = arr.length,\n        result = [];\n\n        while(++idx < len) {\n            let value = arr[idx];\n            result.push(predicate(value));\n        }\n        return result;\n}\n\n\n\n\n_.flatMap\n\nfunction duplicate(n) {\n\treturn [n, n];\n}\n_.flatMap([1, 2], duplicate); // [1, 1, 2, 2]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217514093"
  },
  {
    "pageContent": "[FP] 4. 선언적 코드와 느긋한 함수 체인\n\n함수형 프로그래밍은 이론적으로 배열, 연결 리스트, 이진 트리 등 어떤 자료구조를 쓰더라도 프로그램 자체의 의미가 달라져선 안된다.\n\n\n\n\n아래 이름 리스트를 읽고 데이터 정제 후, 중복은 제거하고 정렬하는 일련의 작업인 예시를 보자.\n\n예시 데이터\n\nconst names = ['alonzo church', 'Haskell curry', 'stephen_kleene', 'John Von Neumann', 'stephen_kleene'];\n\n\n\n\n명령형 프로그래밍\n\nlet result = [];\nfor(let i=0; i<names.length; i++) {\n    let n = names[i];\n    if( n !== undefined && n !== null) {\n        let ns = n.replace(/_/, ' ').split(' ');\n        for(let j =0; j < ns.length; j++){\n            let p = ns[j];\n            p = p.charAt(0).toUpperCase() + p.slice(1);\n            ns[j] = p;\n        } \n        if(result.indexOf(ns.join(' ')) < 0){\n            result.push(ns.join(' '));\n        }    \n    }\n}\nresult.sort();\n// [ 'Alonzo Church', 'Haskell Curry', 'John Von Neumann', 'Stephen Kleene' ]\n\ncf) 정규표현식\n- https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D]\n\ncf) str.charAt(index) - 지정된 인덱스에 해당하는 문자를 반환 \n\n\n\n\n→ 추상화 수준이 낮을수록 코드를 재사용할 기회는 줄어들고 에러 가능성과 코드 복잡성은 증가한다. \n\n\n\n\n함수형 프로그래밍\n\n_.chain(names)\n    .filter(isValid)\n    .map(s => s.replace(/_/, ' ')) // 값을 정규화\n    .uniq() // 중복을 제거\n    .map(_.startCase) // 대소문자를 맞춤\n    .sort()\n    .value();\n\n→ 코딩 작업도 확연히 줄지만, 단순 명료한 구조가 됩니다. \n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n유사 SQL 데이터: 데이터로서의 함수\n\nmap, reduce 등 어휘만으로도 함수가 데이터에 하는 일을 어렵잖게 추론할 수 있다. 그런데 관점을 조금만 틀어보면 SQL 구문과\n비슷하다는걸 알 수 있다.\n\nSQL\n\nselect p.firstname from Person p\nwhere p.birthYear > 1903 and p.country IS NOT 'US'\ngroup by p.firstname\n\n\n\n\n이 SQL문처럼 로데시JS의 믹스인(mixin) 기능을 응용하면, 핵심 라이브러리에 함수를 추가하여 확장한 후, 마치 원래 있던 함수처럼\n체이닝할 수 있다.\n\nLODASH - MIXIN\n\n_.mixin({\n\t'select': _.map,\n\t'from': _.chain,\n\t'where': _filter,\n\t'sortBy': _.sortByOrder\n});\n\n_.from(persons)\n\t.where(p => p.birthYear > 1900 && p.address.country !== 'US')\n\t.sortBy(['firstname'])\n\t.select(p => p.firstname)\n\t.value();\n\n\n\n\n→ SQL 키워드와 동일한 별칭으로 기능을 매핑해서 함수형 코드를 쿼리 언어와 최대한 유사하게 작성했습니다. (함수형 프로그래밍 명령형 코드\n위에 강력한 추상화를 제공!)\n\n(but, 아직 크게 좋다는 점이 아직 다가오지 않네요..! 적용을 해보면 알려나..)\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n재귀적 사고방식\n\n좀처럼 해법이 떠오르지 않는 어렵고 복잡한 문제가 있다. 이럴때 전체 문제를 더 작은 분신들로 조깰 수 있다면, 작은 문제들을 하나씩 풀면서\n전체 문제도 풀수 있을 것이다. \n\n(하스켈, 얼랭 등) 순수 함수형 프로그래밍 언어는 처음부터 루프 구조가 없기 때문에 배열 등을 탐색할 때 재귀는 필수!\n\n\n\n\n\n재귀(RECURSION)란?\n\n주어진 문제를 자기 반복적인 문제들로 잘게 분해한 다음, 이들을 다시 조합해 원래 문제의 정답을 찾는 기법\n\n\n\n\n\n재귀적 사고란?\n\n자기 자신 또는 그 자신을 변형한 버전을 생각하는 것 \n\n\n\n\n(뭔말이지... ) 일단 숫자 배열의 원소를 모두 더하는 간단한 예제를 보며, 조금씩 이해해 보자.\n\n일반적으로 본인이 명령형 두뇌(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png]라면, \n\n\n\n\n명령형 프로그래밍\n\nlet acc = 0 ;\nfor(let i=0; i < nums.length; i++) {\n    acc += nums[i];\n}\n\n그리고 중간 합계를 어딘가 보관하기 위해 누산치가 필요하다는 강박증에 사로 잡혀있겠죠.(와.. 점쟁이인가....)\n\n하지만, 수동 루프가 진짜 필요할까요?\n\n\n\n\nREDUCE 사용!\n\n_(nums).reduce((acc, current) => acc + current, 0);\n\n(어려운 문제가 아니라면, 직접 구현하는게 낫다고 생각했는데, 많은 생각의 전환이 필요하네여..)\n\n→ _.reduce 함수를 쓰면 루프는 물론 리스트 크기조차 신경 쓸 필요가 없습니다.\n\n→ 첫 번째 원소를 나머지 원소들과 순차적으로 더해가며 결괏값을 계산하는 재귀적 사고방식을 적용한 것!\n\n→ 재귀와 반복은 동전의 앞/뒷면이다. 재귀는 변이가 없으므로 더 강력하고 우수하며 표현적인 방식으로 반복을 대체할 수 있다. 사실상 순수\n함수형 언어는 모든 루프를 재귀로 수행하기 때문에 do, for, while 같은 기본 루프 체계조차 없으며, 재귀를 적용한 코드가 더 이해하기\n쉽습니다. (이건 잘 설명된거 같아, 그냥 책이랑 똑같이 적었어여..)\n\n\n\n\n재귀적 사고방식의 확장(수평 사고)\n\nsum[1,2,3,4,5,6,7,8,9] = 1 + sum[2,3,4,5,6,7,8,9]\n                       = 1 + 2 + sum[3,4,5,6,7,8,9]\n                       = 1 + 2 + 3 + sum[4,5,6,7,8,9]\n\n\n\n\n재귀적 덧셈\n\nfunction sum(arr){\n    if(_.isEmpty(arr)){ // 기저 케이스(종료조건)\n        return 0;\n    }\n    return _.first(arr) + sum(_.rest(arr)); // 재귀 케이스: _first와 _.rest로 입력을 점점 줄여가며 자신을 호출\n}\n\nsum([]); // 0\nsum([1,2,3,4,5,6,7,8,9]); // 45\n\ncf) https://lodash.com/docs/4.17.15#head\n[https://lodash.com/docs/4.17.15#head] && https://lodash.com/docs/4.17.15#rest\n[https://lodash.com/docs/4.17.15#rest]\n\n→ 더하려는 배열이 빈 배열일 경우는 기저 케이스로서 당연히 0\n\n→ 이외에 원소가 포함된 배열은 첫 번째 원소를 추출 후 두 번째 이후 원소들과 계속 재귀적으로 더함(이때 내부적으로는 재귀 호출 스택이 겹겹이\n쌓입니다.)\n\n→ 알고리즘이 종료 조건에 이르면 쌓인 스택이 런타임에 의해 즉시 풀리면서 반환문이 모두 실행되고 이 과정에서 실제 덧셈이 이루어 진다.\n\n→ 이런 식으로 재귀를 이용해 언어 런타임에 루프를 맡기는 것\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217383049/image2019-10-6_14-48-25.png?api=v2]\n\n\n\n\n\n그렇다면 성능은?\n\n컴파일러는 루프에 최적화할 수 있도록 진화했고, ES6부터는 꼬리 호출 최적화(tail-call optimization)까지 추가되어 성능차이는\n미미하다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nTAIL-CALL OPTIMIZATION (TCO)\n\n흔히 TCO라고 하며, 꼬리 호출 제거(tail-call elimination)이라고도 한다.\n\n재귀 함수는 당연히 노재귀(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png] 함수보다\n스택 소모량이 심합니다. 그래서 등장한 꼬리 호출 최적화는 ES6부터 나왔으며, 재귀를 반복할 때마다 스택에 새 프레임이 계속 쌓이지 않고\n이전에 쓰고 버린 프레임을 재활용합니다.\n\n\n\n\nex) 일반 재귀함수\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217383049/image2019-10-7_16-52-56.png?api=v2]\n\n\n\n\nRangeError: Maximum call stack size exceeded가 나오게 됩니다.\n\n\n\n\nTCO로 바꾸기\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217383049"
  },
  {
    "pageContent": "[FP] 5. Lazy function evaluation\n\n자바스크립트는 기본적으로 조급한 평가(eager evaluation)를 한다( 또는 탐욕스러운 평가(greedy evaluation) ).\n\n즉, 함수 결괏값이 필요한지 따져볼 새도 없이 변수에 바인딩되자마자 표현식 평가를 마칩니다. \n\n\n\n\n반면 함수형 언어는 기본적으로 느긋한 평가(lazy function)를 지원합니다. 의존하는 표현식이 호출될 때까지 미룬다는 것이죠.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217710738/image2019-10-7_20-10-28.png?api=v2]\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n단축 융합(SHORTCUT FUSION)을 활용\n\n→ 단축 융합이라는 기법으로 Lodash JS가 프로그램 실행을 내부적으로 최적화할 수 있다. \n\n→ 몇 개 함수의 실행을 하나로 병합하고 중간 결과를 계산할 때 사용하는 내부 자료구조의 개수를 줄이는 함수 수준의 최적화입니다. \n\n→ 물론 자료구조가 줄면 대량 데이터를 처리할 때 필요한 과도한 메모리 사용을 낮출 수도 있다. \n\n→ 수학적인 정합 관계(algebraic correctness)가 성립한다.\n\n> ex1) compose(map(f), map(g))는 map(compose(f, g))로 표현식을 바꾸어 실행해도 의미가 같다.\n> \n> ex2) compose(filter(p1), filter(p2))도 filter((_x) => p1(_x) && p2(_x))와 동등한\n> 표현식이다.\n> \n> 이런게 가능한 이유는 순수함수 이기 때문이다.\n\n\n\n\nLodashJS - 단축융합\n\nconst square = (x) => Math.pow(x, 2);\nconst isEven = (x) => x & 2 === 0;\nconst numbers = _.range(200); // 1~200 사이의 숫자로 구성된 배열을 생성\n\nconst result = _.chain(numbers)\n                .map(square)\n                .filter(isEven)\n                .take(3) // 처음 3개 값만 신경쓰고 나머지 값에 대해서는 신경쓰지마!\n                .value(); // [0,4,16]\n\nresult.length; // 5\n\n참고 URL  - https://lodash.com/docs/4.17.15#range\n[https://lodash.com/docs/4.17.15#range]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217710738"
  },
  {
    "pageContent": "[FP] 6. null 참조는 10억짜리 실수다\n\n제목은 영국의 컴퓨터 학자 찰스 앤터니 리처드 호어가 한 말이다(저 아찌님이 퀵정렬 만드셨다...).\n\n\n\n\n프로그램 실행 중 예외가 나거나 네트워크 연결이 끊기는 등 예기치 않는 사고로 인해 데이터가 null, undefined로 세팅되면 갖가지 골치\n아픈 문제가 생긴다. \n\n그래서 이런 상황을 대비해서 코딩을 하다보면 어쩔 수 없이 코드가 복잡해진다. 시간 낭비도.. \n\n애플리케이션이 덩치가 커지고 복잡도가 커질수록 확장하기도 어렵고 알 수 없는 수수께끼 코드로 가득해진다. \n\n\n\n\n\n명령형 에러 처리의 문제점\n\n\n\n\n보편적인 try-catch\n\ntry {\n\t// 예외가 날 가능성 있는 코드\n} \ncatch(e) {\n\t// 예외를 처리하는 구문\n\tconsole.log(e.message);\n}\n\n→ 안전하지 않은 코드 조각은 둘러싸자는 발상(python으로 코딩할때도 맨날 썼는데...)\n\n→ 프로그램이 예외를 던지면 자바스크립트 런타임은 실행을 멈추고 문제의 원인을 찾는 데 실마리가 될 만한 함수 호출 스택의 추적 정보를\n생성한다. \n\n→ 함수에 try-catch를 쓰면 다른 함수와 합성/체이닝을 할 수 없고 코드 설계시 적잖은 압박을 받기 때문에 에러 처리도 어떤 식으로든\n추상화할 필요가 있다.\n\n\n\n\n\n함수형 프로그램은 왜 예외를 던지지 않을까?\n\n 1. 다른 함수형 장치처럼 합성이나 체이닝을 할 수 없다.\n 2. 예외를 던지는 행위는 함수 호출에서 빠져나갈 구멍을 찾는 것이므로 단일한, 예측 가능한 값을 지향하는 참조 투명성 원리에 위배\n 3. 예기치 않게 스택이 풀리면 함수 호출 범위를 벗어나 전체 시스템에 영향을 미치는 Side Effect를 발생시킨다.\n 4. 에러를 조치하는 코드가 당초 함수를 호출한 지점과 동떨어져 있어서 비지역성(non-locality) 원리(? - 몰라서 찾아봤지만 내용이\n    없다는?? 지역성의 원리만 있네..)에 위배된다. 에러가 나면 함수는 지역 스택과 환경에서 벗어난다.\n 5. 함수의 단일 반환값에 신경 써야 할 에너지를, catch 블록을 선언해 특정 예외를 붙잡아 처리하는 데에 낭비하면서 호출자의 부담이\n    가중됩니다. \n 6. 다양한 에러 조건을 처리하는 블록들이 중첩되어 사용하기 어렵다.\n\n\n\n\n물론 예외를 사용하면 전 글에서 봤던 (RangeError: Maximum call stack size exceeded) 경우처럼 더 효율적인\n경우도 있다. 다만 예외를 던져야 할 경우라도 과용해선 안된다. \n\n\n\n\n\nNULL 체크라는 고질병\n\n함수가 null을 반환하면 이 함수를 부른 호출자는 성가신 null 체크를 해야 한다.\n\n학생의 주소를 읽고 거주 국자를 조회하는 getCountry 함수\n\nfunction getCountry(student) {\n    let school = student.getSchool();\n    if(school !== null) {\n        let addr = school.getAddress();\n        if(addr !== null) {\n            var country = addr.getCountry();\n            return country;\n        }\n        return null;\n    }\n    throw new Error('국가 조회 중 에러 발생!');\n}\n\n\n\n\n과연 이게 최선인가..\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n여기에 대한 대안으로 모나드를 제시하지만, but 아직 이해를 할 수가 없다는..\n\n혹시 이해할 수 있다면 아래를 채워주세요.. 저는 더 공부하고 다시 채우겠습니다 (웃음)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/smile.png]\n\n아니면 더 좋은 대안을 찾는다면 그걸 남길게요!\n\n당분간은 10억짜리 실수를...\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nOPTIONAL-CHAINING\n\nhttps://github.com/tc39/proposal-optional-chaining\n[https://github.com/tc39/proposal-optional-chaining]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217579738"
  },
  {
    "pageContent": "[RxJS] 0. 마블 다이어그램\n\n마블 다이어그램은 ReactiveX 공식 문서에서 옵저버블의 연산자를 설명할 때 많이 나온다.\n\n이해하기가 난감(?)했지만, \"RxJS 프로그래밍 - 이종욱, 안재하 지음\" 이라는 개발서에 예시와 함께 잘 나와있어 사진으로 찍어\n공유합니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/214237447/%E1%84%86%E1%85%A1%E1%84%87%E1%85%B3%E1%86%AF%20%E1%84%83%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8B%E1%85%A5%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7.jpeg?api=v2]\n\n\n\n\n참고 링크\n\nhttps://rxmarbles.com/ [https://rxmarbles.com/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/214237447"
  },
  {
    "pageContent": "[RxJS] 1. 기본 개념\n\n\nSTREAM\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513561/image2019-10-13_11-54-23.png?api=v2]http://tcpschool.com/java/java_io_stream\n\n→ 검색어 제안 기능에서는 사용자가 입력한 키값이 데이터 스트림(data stream) 형태로 서버에 전달되고 처리 결과를 받아 추천 키워드\n목록으로 응답\n\n→ 입력된 데이터 스트림은 관측할 수 있고 다룰 수 있는 대상이 되므로 옵저버블(Observables)이 된다.\n\n→ 예를 들어 검색할 때, \"type\"이라는 단어가 입력되면 type이라는 단어 자체를 값으로 받아들이는 것이 아니라, 글자 단위로 분리해\n데이터 스트림으로 받아드린다.\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513561/image2019-10-13_13-18-53.png?api=v2]\n\n\n\n\n\n반응형 프로그래밍\n\n→ 웹페이지에 들어오는 스트림(stream) 형태의 입력 이벤트를 감지해 반응(responsive)을 처리할 수 있는 모델\n\n\n\n\n\n발행 구독 패턴\n\n→ 옵저버(observer)는 옵저버블(observable)을 관측하고, 옵저버블은 상태가 변경됐을 때 옵저버에게 상태가 변경됐음을 통지해\n준다.\n\n→ 여기서 관측 대상인 옵저버블은 사용자가 입력한 데이터 스트림(연속된 이벤트나 데이터)이다.\n\n→ 옵저버는 관찰 대상인 옵저버블을 구독하거나 해지할 수 있다. 이러한 발행 구독 패턴을 RxJS에서 구현하고 있다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nRXJS\n\n→ 반응형 프로그래밍 모델(reactive programming model)을 구현해 놓은 자바스크립트 기반 라이브러리로 데이터 흐름(data\nflow)을 처리하는데 도움을 준다.\n\n→ 비동기 코드를 제어하는데 강점이 있는데, 데이터 스트림에 대한 연산을 연산자(operator) 메서드를 이용해 연쇄적으로 처리할 수 있게\n관련 인터페이스를 제공한다.\n\n\n\n\n\nSCHEDULER\n\n→ 옵저버가 옵저버블을 구독할 때 어떤 순서로 어떻게 (동기/비동기 등) 실행할지 실행 컨텍스트를 관리하는 역할의 자료구조(Data\nStructure)다.\n\n→ rxjs에서 비동기 방식으로는 setTimeout, setInterval 함수 또는 마이크로 큐를 이용해 실행하는 asapScheduler,\nasyncScheduler가 있다. \n\n→ 동기 방식으로는 트램폴린(Trampoline) 방식으로 큐(Queue)를 사용하는 queueScheduler가 있다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n열심히 정리를 하려고 했으나, 거의 정석(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png] 같은\n글을 발견했습니다.\n\n여러 책이나 외국 글에서 하나같이 동일한 글을 가르키고 있더라고요.\n\n\"The introduction to Reactive Programming you've been missing\"\n\n한글 번역: https://gist.github.com/casamia918/93b8db69beb9ee06b92a96b2a234d48e\n[https://gist.github.com/casamia918/93b8db69beb9ee06b92a96b2a234d48e]\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219513561"
  },
  {
    "pageContent": "[RxJS] 2. map 파헤치기\n\nmap 파헤치기다.\n\nmap vs flatMap\n[/wiki/pages/createpage.action?spaceKey=SW&title=map%20vs%20flatMap&linkCreation=true&fromPageId=227639522] 맵은\n자바스크립트에서도 이미 존재하는 아이다. 의미도 거의 유사하다. \n\n자바스크립트의 map을 RxJS로 가져와 보자.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nMAP\n\n→ 설명을 생략한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_19-56-19.png?api=v2]\n\n\nFLATMAP (=MERGEMAP) VS CONCATMAP\n\n→ flatMap이 좀 더 대중적인 의미다. 하지만 RxJS에서는 얼리어스 네임을 줘서 mergeMap이라고 사용한다(본 글은 RxJS에\n대분류이므로 이하 'mergeMap'으로 명명하겠다).\n\n→ concatMap이나 mergeMap이나 Map의 기능을 동일하게 수행하면서 결과에 대해 flattening하는 작업을 한다.\n\n→ 일반적으로 map에서 옵져버블을 리턴하면 1개의 스트림이 생성된다. 하지만 내부에서 또 다른 옵져버블을 리턴한다면 2개의 스트림이 생성되며,\nmergeMap과 concatMap은 이를 한 개의 스트림으로 다시 바꾸어 준다.\n\n\n\n\n→ 아따 그럼 차이가 무엇일까. 아주 간단하게 정리해겠다.\n\n→ 두 아이의 차이점은 결과값을 하나의 스트림으로 합칠때(옵져버블을 합칠때)의 방식에 있다. 먼저 mergeMap 이다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_19-38-3.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_19-43-12.png?api=v2]\n\n→ mergeMap의 경우 마블다이어그램에서 보다시피, 두 개의 스트림을 하나로 합친다. 마치 덧쌤을 할때처럼 자리에 맞춰 딱딱 한개로 합치는\n것이다.\n\n→ but, 만약 여러개의 옵져버블이 겹치면 어떻게 될까요? 옵저버블이 겹치면 값을 병렬로 방출합니다.(즉 내부 옵져버블이 완료되기를 기다리자\n않고 내부 옵져버블이 트리거 됩니다)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_20-8-10.png?api=v2]\n\n→ 물론 이런 상황을 유도했을수도(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png] 이겠지만,\n이런 상황을 원치 않는 사람이 사용하게 되는게 concatMap입니다.\n\n\n\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_19-40-13.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_19-49-15.png?api=v2]\n\n→ 반면 concatMap의 경우, 하나의 스트림이 끝난 뒤에, 그 뒤에 스트림을 붙여서 하나로 만든다.\n\n→ 이렇다보니 mergeMap과 달리 중첩된 구독이 생길 수\n없다.[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_20-6-1.png?api=v2]\n\n→ 요청이 항상 순차적으로 가겠죠?\n\n\nSWITCHMAP\n\n→ 스위치 맵또한 flattening해주는 역할을 한다. 다만 취소한 구독의 값은 방출하지 않는다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_19-51-59.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227639522/image2019-10-24_20-14-55.png?api=v2]\n\n→ 이전값이 완전히 처리될 때까지 이 전의 값을 옵져버블에서 무시한다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n정리\n\n\n * 완료를 기다리는 동안 순차적으로 작업을 수행해야하는 경우 CONCATMAP이 올바른 선택입니다.\n\n\n * 병렬로 작업을 수행하려면 MERGEMAP이 가장 좋습니다.\n\n\n * 취소 로직이 필요한 경우 SWITCHMAP을 사용하십시오.\n\n\n * 현재 OBSERVABLE이 계속 진행되는 동안 새로운 OBSERVABLE을 무시하기 위해, HAUSTMAP (아직 내가 안써봐서 딱히 더\n   안적는다.)\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227639522"
  },
  {
    "pageContent": "[RxJS] 3. lift 함수\n\n파이퍼블 연산자(Pipeable Operator)는 생성 함수로 만들어진 옵저버블 인스턴스를 pipe 함수 안에서 다룰 수 있는 연산자다.\n\n<옵저버블 인스턴스>.pipe(연산자1(), 연산자2(), …) 형태로 연산자를 연결해서 호출할 수 있다.\n\n이렇게 연결된 파이퍼블 연산자는 새로운 인스턴스를 리턴한다.\n\npipe 함수 호출 후 리턴하는 결과는 각 연산자를 거치며 새로운 옵저버블 인스턴스다.\n\n\n\n즉\n\n<옵저버블 인스턴스>.pipe(연산자1(), 연산자2(), …) 처럼 사용해도 되고,\n\n<옵저버블 인스턴스>.pipe(연산자1()).pipe(연산자2())) 처럼 사용해도 동일하게 동작한다.\n\n\n\n리턴하는 값이 옵저버블 인스턴스니깐 뭐 되겠지 하는 생각도 있지만 코드를 조금만 까볼려고 한다.\n\n\n\nconst { range } = require('rxjs');\nconst { filter, map } = require('rxjs/operators');\n\nrange(1, 10).pipe(\n    filter(function(value) {\n        return value % 2 == 0;\n    }),\n    map(function(value) {\n        return value + 1;\n    })\n);\n\n위 예제는 간단하다.\n\nrange 함수가 옵져버블을 생성하고 pipe 함수로 filter라는 연산자 뒤에 map이라는 연산자를 연결해서 리턴한다.\n\nfilter 연산자가 새로운 옵저버블 인스턴스를 만든 후, map이라는 파이퍼블 연산자를 연결하여 호출할 수 있기 때문이다.\n\n\n\n어떻게 가능한 걸까…\n\n실제 코드를 뒤져보자.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/233799749/image-20191103-105653.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/233799749/image-20191103-105031.png?api=v2]\n\nrxjs 깃헙에서 대표적인 파이퍼블 연산자인 filter와 map을 가져와봤다.\n\nObservable.js에 있는 lift 함수를 사용하고 있다.\n\n\n\n\n\nlift(operator) {\n  const observable = new Observable();\n  observable.source = this;\n  observable.operator = operator;\n  return observable;\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/233799749/image-20191103-110627.png?api=v2]\n\n요래 생긴 아이였다.\n\n먼저 lift 함수는 기존 옵저버블에 영향을 주지 않고 있다. 기존 옵저버블은 this로 새로운 옵저버블의 source로 설정한다.\n\n그리고 source를 감싸는 연산자를 지정(observable.operator = operator;)해 나중에 구독할 때 어떤 연산자를 실행할지\n알 수 있도록 했다.\n\n새로운 옵저버블은 연산자를 호출할 때마다 리턴(return observable;)된다.\n\n\n\n즉, 기존 옵저버블을 감싸서 새로운 옵저버블로 한 단계 끌어 올려주는(lift) 역할을 한다.\n\n\n\n\n\n\n\n\n\n\n참고 URL\n\nhttps://github.com/ReactiveX/rxjs/blob/master/src/internal/Observable.ts\n[https://github.com/ReactiveX/rxjs/blob/master/src/internal/Observable.ts]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/233799749"
  },
  {
    "pageContent": "[OJT] HTML\n\nhttps://blog.greenroots.info/10-useful-html5-features-you-may-not-be-using\n[https://blog.greenroots.info/10-useful-html5-features-you-may-not-be-using]\n\n * <details>\n\n * <element contenteditable=\"true\">\n\n * <map>\n\n * <mark>\n\n * data-*\n\n * <datalist>\n   \n   * datalist 가 동적으로 변경될 수 있는 경우라면 autocomplete 사용 (오류)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   \n   * datalist 가 동적으로 변경될 때 autocomplete 이 켜져있으면 사라진 data 를 제안하는 경우가 있다.\n     \n     * HA-615 [https://ecubelabs.atlassian.net/browse/HA-615?src=confmacro]\n\n * <input type=\"range\">\n\n * <meter>\n\n * <progress>\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2309784613"
  },
  {
    "pageContent": "[OJT][FE] Flexbox Layout\n\nhttps://d2.naver.com/helloworld/8540176\n[https://d2.naver.com/helloworld/8540176]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1346043934"
  },
  {
    "pageContent": "[OJT] CSS\n\nhttps://javascript.plainenglish.io/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6\n[https://javascript.plainenglish.io/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6]\n\n * Child selectors\n\n * Writing mode\n\n * calc()\n\n\nLINE-HEIGHT 속성\n\n * 일반적으로 텍스트 줄 사이의 거리를 설정하는데 사용한다.\n\n * 절대 값으로 입력할 경우 font size 에 따라 글자가 겹치는 등의 상황이 발생하기 때문에 상대 값으로 입력해야 한다.\n\n * ex) 15px (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   / 1.5 (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n\n\nLink : https://velog.io/@ursr0706/line-height-속성\n[https://velog.io/@ursr0706/line-height-%EC%86%8D%EC%84%B1]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1529511981"
  },
  {
    "pageContent": "[OJT][FE] SPA\n\nhttps://en.wikipedia.org/wiki/Single-page_application\n[https://en.wikipedia.org/wiki/Single-page_application]\n\nhttps://medium.com/@bbirec/spa-single-page-application-%EA%B0%9C%EB%B0%9C%EC%97%90%EC%84%9C-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%82%AC%ED%95%AD-eedcb7cb618f\n[https://medium.com/@bbirec/spa-single-page-application-%EA%B0%9C%EB%B0%9C%EC%97%90%EC%84%9C-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%82%AC%ED%95%AD-eedcb7cb618f]\n\nhttps://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80_%ED%8E%98%EC%9D%B4%EC%A7%80_%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\n[https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80_%ED%8E%98%EC%9D%B4%EC%A7%80_%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98]\n\n\n\n\n--------------------------------------------------------------------------------\n\n(보다 자세한 내용은 위 링크를...)\n\n\n과거\n\n페이지 이동 요청이 있을 때마다 서버에 요청하는 구조. \n\n\n\n\n\n변화하는 요구 사항\n\n웹 어플리케이션을 보다 유동적으로 만들고 로드 시간을 줄이며, 서버에 대한 요청 수를 줄이는 방법을 찾게 됨.\n\n\n\n\n\n대안중 하나(SPA)\n\nSPA의 기본 전제는 하나의 HTML 페이지를 가지고, 항상 새로운 페이지 전체를 로드하는 대신 사용자가 애플리케이션과 상호 작용할 때\nHTML의 내부 컨텐츠를 교체하는 것.\n\n이 방법을 사용하면 요청 횟수를 줄이고 애플리케이션의 크기를 줄이며 애플리케이션의 응답 속도를 높일 수 있다. \n\n\n\n\n\nSPA 프레임워크\n\nReact, Angular, Vue, Aurelia 등..",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134578258"
  },
  {
    "pageContent": "[OJT] Server-driven UI\n\nA Deep Dive into Airbnb’s Server-Driven UI System\n[https://medium.com/airbnb-engineering/a-deep-dive-into-airbnbs-server-driven-ui-system-842244c5f5]\n\nServer Driven UI 설계를 통한 UI 유연화\n[https://devblog.croquis.com/ko/2021-12-16-1-server-driven-ui/]\n\nHeadless CMS [https://strapi.io/]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2417000484"
  },
  {
    "pageContent": "[OJT] Webpack\n * 번들링이란?\n * 웹팩 기본 동작 원리\n   * 1. Entry\n   * 2. Output\n   * 3. Loader\n   * 4. Plugin\n * 웹팩의 플러그인 동작 원리\n * 코드 분할(Code Splitting)\n   * 실제 적용 후 느낀점..\n * 번들링 사이즈 줄이기\n * References\n\n\n번들링이란?\n\n여러개의 파일 중에 종속성이 존재하는 파일들을 1개의 파일로 묶어 패키징을 시키는 과정을 번들링이라고 한다.\n\n하지만 모든 코드를 하나의 파일로 번들링하는 것은 성능적으로 문제가 될 수 있다.\n이를 방지하기 위해 Code splitting과 같은 방법들이 존재한다.\n\n\n웹팩 기본 동작 원리\n\n * 웹팩(Webpack)은 자바스크립트 정적 모듈 번들러(Static Module Bundler)이다.\n\n * 웹팩에서 모든 것은 모듈이다. 자바스크립트, 스타일시트, 이미지 등 모든 것을 자바스크립트 모듈로 로딩해서 사용한다.\n\n * 웹팩의 주요 네 가지 개념으로 Entry, Output, Loader, Plugin이 있다.\n\n\n1. ENTRY\n\n * 의존성 그래프의 시작점을 웹팩에서는 엔트리(Entry)라고 한다.\n\n * 웹팩은 엔트리를 통해서 필요한 모듈을 로딩하고 하나의 파일로 묶는다.\n\n * 여러개의 엔트리가 존재할 수 있다.\n\n * config 파일에 entry가 설정 되어 있지 않다면 기본값은 ./src/index.js 이다.\n\n\n2. OUTPUT\n\n * 엔트리에 설정한 자바스크립트 파일을 시작으로 하나로 묶는다. 그후 번들된 결과물을 처리할 위치를 output에 기록한다.\n\n * config 파일에 output이 설정되어 있지 않다면 기본 값은 ./dist/main.js 이다.\n\n\n3. LOADER\n\n * 웹팩은 오직 JavaScript와 JSON만 이해할 수 있다.\n\n * 로더는 다른 Type의 파일(img, font, stylesheet 등)을 웹팩이 이해하고 처리 가능한 모듈로 변환 시키는 작업을 한다.\n\n\n4. PLUGIN\n\n * 로더가 파일단위로 처리하는 반면 플러그인은 번들링 된 결과물을 처리한다.\n\n * 로더가 변환하는 동안 플러그인은 bundle optimization, asset management and injection of\n   environment과 같은 일을 진행할 수 있다.\n\n\n웹팩의 플러그인 동작 원리\n\n * 웹팩 플러그인은 apply 메소드를 가지고 있는 자바스크립트 객체다. 이 apply 메소드는 웹팩 컴파일러에 의해 호출되며, 전체 컴파일\n   라이프사이클에 접근 할 수 있도록 한다.\n   ConsoleLogOnBuildWebpackPlugin.js\n   \n   const pluginName = 'ConsoleLogOnBuildWebpackPlugin';\n   \n   class ConsoleLogOnBuildWebpackPlugin {\n     apply(compiler) {\n       compiler.hooks.run.tap(pluginName, compilation => {\n         console.log('The webpack build process is starting!!!');\n       });\n     }\n   }\n\n * 컴파일러 hook에서 tab 메소드의 첫번째 매개 변수는 카멜 표기법으로 된 플러그인 이름이다. 재사용할 수 있도록 상수 선언하는 것을\n   권장한다.\n\n * 플러그인은 인자와 옵션을 사용할 수 있으므로, plugins 속성에 넣기 전에 new 접두사를 붙여 인스턴스로 전달해야 한다.\n   \n   // webpack.config.js\n   plugins: [ \n     new webpack.ProgressPlugin(), \n     new HtmlWebpackPlugin({template: './src/index.html'}) \n   ]\n\n\n코드 분할(CODE SPLITTING)\n\n코드 분할(Code Splitting)은 런타임에서 여러 번들을 동적으로 만들고 필요한 코드만을 불러오는 것을 의미한다. 코드 분할은 앱을\n“지연 로딩(Lazy Loading)” 할 수 있도록 도와주어 성능적인 향상을 만들어 준다. \n\n * Dynamic import\n\n// before\nimport { add } from \"./math\";\n\n// after\nimport(\"./math\").then((math) => {\n  console.log(math.add(16, 26));\n});\n\n * React.lazy\n\n// before\nimport OtherComponent from \"./OtherComponent\";\n\n// after\nconst OtherComponent = React.lazy(() => import(\"./OtherComponent\"));\n\n(더하기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\nSuspense를 사용하여 react-router와 함께 사용 예시\n\nimport React, { Suspense, lazy } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"./routes/Home\"));\nconst About = lazy(() => import(\"./routes/About\"));\n// 각 Route 에 lazy loading 된 컴포넌트를 제공합니다.\n// 페이지 전환 시 해당 컴포넌트를 동적으로 import 합니다.\nconst App = () => (\n  <Router>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\n실제 적용 후 느낀점..\n\n 1. 기존 코드에 적용시 리팩토링해야하는 코드가 많다.\n\n 2. 위와 비슷한 이유로 각각 코드마다 적용하는 법이 불편하고, 가독성도 떨어질 것 같다.\n\n 3. 어떤 가져오기에 동적으로 적용할 수 있는지에 대해 구분하기가 어렵다.\n\n 4. 기존 프로젝트에서 route.tsx 파일을 수정하여 테스트해봤지만 번들 크기, 로딩 속도의 변화가 눈에 띄지 않았다.\n\n\n번들링 사이즈 줄이기\n\n * optimization.minimize\n   [https://webpack.js.org/configuration/optimization/#optimizationminimize] 사용:\n   불필요한 공백이나, 줄바꿈 혹은 주석 과 같은 렌더링 과정에 필요없는 코드를 제거 할 수 있다.\n\n * Tree Shaking [https://webpack.js.org/guides/tree-shaking/]:\n   Webpack 은 Code 를 Build 하는 시점에 import 된 module 중 사용하지 않는 코드를 제거할 수 있다.\n\n번들러별 Tree Shaking 성능 비교: https://github.com/mischnic/tree-shaking-example\n[https://github.com/mischnic/tree-shaking-example]\nTree Shaking 체크 모듈:\nhttps://www.npmjs.com/package/eslint-plugin-tree-shaking/v/1.9.1\n[https://www.npmjs.com/package/eslint-plugin-tree-shaking/v/1.9.1]\n번들 사이즈 시각화 모듈: https://www.npmjs.com/package/webpack-bundle-analyzer\n[https://www.npmjs.com/package/webpack-bundle-analyzer]\n모듈 크기 체크 vscode Extention: Import Cost\n[https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost]\n\n번들 사이즈를 줄이기 위해 여러 방법을 테스트 했을 때 눈에 띄게 큰 변화가 있었던 것은 모듈을 세부경로를 통해 가져오는 것이었다.\n그렇기에 자동으로 변환해주는 기능들을 활용하는 것도 좋지만 코드를 작성할 때 모듈의 가져오는 방식을 더 신중하게 고민하여 선택하는 것이\n바람직하다고 생각된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1759739925/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.23.27.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1759739925/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.23.38.png?api=v2]\n\n\n\n\nREFERENCES\n\nhttps://velog.io/@hih0327/Webpack-%EA%B8%B0%EC%B4%88\n[https://velog.io/@hih0327/Webpack-%EA%B8%B0%EC%B4%88]\n\nhttps://beomy.tistory.com/41 [https://beomy.tistory.com/41]\n\nhttps://webpack.js.org/concepts/plugins/\n[https://webpack.js.org/concepts/plugins/]\n\nhttps://eunsukim.me/posts/5-ways-to-optimize-your-react-app\n[https://eunsukim.me/posts/5-ways-to-optimize-your-react-app]\n\nhttps://pks2974.medium.com/dynamic-import-로웹페이지-성능-올리기-caf62cc8c375\n[https://pks2974.medium.com/dynamic-import-%EB%A1%9C%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%B1%EB%8A%A5-%EC%98%AC%EB%A6%AC%EA%B8%B0-caf62cc8c375]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1759739925"
  },
  {
    "pageContent": "[OJT][FE]\nReact[https://ecubelabs.atlassian.net/wiki/download/attachments/134611155/image-20210204-062710.png?api=v2]\n\n출처:\nhttps://medium.com/better-programming/a-2021-roadmap-to-learning-react-c58c28f5bb58\n[https://medium.com/better-programming/a-2021-roadmap-to-learning-react-c58c28f5bb58]\n\n\n\n * React\n   * useEffect\n * Flutter, SwiftUI\n   * React\n   * Flutter\n   * SwiftUI\n   * Headless component\n\n\nREACT\n\nThe Beginner's Guide to React\n[https://egghead.io/lessons/react-a-beginners-guide-to-react-introduction]\n\nThinking in React [https://ko.reactjs.org/docs/thinking-in-react.html]\n\nWriting Resilient Components\n[https://overreacted.io/writing-resilient-components/]\n\nBullet proof React [https://github.com/alan2207/bulletproof-react]\n\n\nUSEEFFECT\n\nhttps://alexsidorenko.com/blog/useeffect\n[https://alexsidorenko.com/blog/useeffect]\n\nhttps://alexsidorenko.com/blog/useeffect-cleanups/\n[https://alexsidorenko.com/blog/useeffect-cleanups/]\n\n\nFLUTTER, SWIFTUI\n\nFlutter [https://flutter.dev/], SwiftUI\n[https://developer.apple.com/xcode/swiftui/] 는 React 의 짭이라 보면 된다.\n\n아래는 같은 UI 를 렌더링하는 코드를 각각 React, Flutter, SwiftUI 로 작성한 것이다.\n\n\nREACT\n\nclass App extends React.Component {\n  var items = ...;\n\n  render() {\n    return items.map(item => (\n      <>\n        <p>{item.title}</p>\n        <p>{item.subtitle}</p>\n      </>\n    ))\n  }\n}\n\n\nFLUTTER\n\nclass App extends StatelessWidget {\n  List items = ...;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(      \n      home: Scaffold(\n        body: ListView(\n          children: \n          items.map(item => ListTitle(\n            title: Text(item.title),\n            subtitle: Text(item.subtitle)\n          ))\n        )\n      )\n    );\n  }\n}\n\n\nSWIFTUI\n\nstruct Content: View {\n  @State var model = Themes.listModel\n\n  var body: some View {\n    List(model.items, action: model.selectItem) { item in\n      VStack(alignment: .leading) {\n        Text(item.title)\n        Text(item.subtitle)\n            .color(.gray)\n      }\n    }\n  }\n}\n\n\nHEADLESS COMPONENT\n\nhttps://martinfowler.com/articles/headless-component.html\n[https://martinfowler.com/articles/headless-component.html]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611155"
  },
  {
    "pageContent": "[OJT][FE] Redux\n\n~2019 까지는 상태 관리를 위해 Redux 를 사용했지만 앞으로는 Redux 를 가급적이면 사용하지 않을 계획이므로 본 문서와 하위의\n문서들은 참고만 한다.\n\n\n\n\n하위 글에서는 리덕스 데이터 아키텍처를 살펴볼려고 한다.\n\n이 글은 프롤로그에 불과하다.\n\n\n\n\n책을 보며 정리할 수도 있고, google님의 힘을 빌릴 수도, Doc이나 blog에서 발췌해 올 수도 있다.\n\n다만, 혹시 모르는 사람이 있었다면 자료를 찾는 시간을 줄여주고, 아는 사람은 복습할 수 있지 않을까 하는 생각에 적고 있다. 또는 긍정적인\n비판을 원합니다. (사실 쓰면서 하는 내가 ... 공부가 잘되서 하는거다)\n\n외부 유출을 하면 문제가 생길 수도 있으니(저작권!), 공유 없이 가벼운 마음으로 봐주시면 좋을거 같다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nWHY REDUX?\n\n컴포넌트 계층 구조에 따라 아래로 전달하는 상태 관리를 한다면 무슨 단점이 있는가?\n\n\n\n\n * 프로퍼티 즉시 전달 - 컴포넌트의 상태를 얻기 위해서는 inputs을 통해 값을 전달해야 한다. 이는 직접적인 관계도 없는 많은 중간\n   컴포넌트 단계에서 상태를 전달해야 한다는 뜻이다.\n * 경직된 리펙토링 - 컴포넌트 계층 구조 아래로 inputs를 전달하기 때문에 부모 컴포넌트와 자식 컴포넌트가 짝으로 존재해야 한다. 따라서\n   자식 컴포넌트를 계층 구조 내 다른 곳에 두기가 어려워진다. 상태를 변경해야 하기 때문!\n * 서로 일치하지 않는 상태 트리와 DOM 트리 - 상태의 '모양'이 뷰/컴포넌트 계층 구조의 '모양'과 일치하지 않을 때가 많다.\n   props를 통해 데이터를 컴포넌트 트리로 내려 보내면 트리 구조에서 거리가 먼 데이터를 참조해야 하는 불편이 잦아진다.\n * 앱 전반의 상태 - 컴포넌트를 통해 상태를 관리하면 앱 전체의 상태를 스냅샷으로 관리하기가 어려워진다. 이 때문에 어느 컴포넌트가 특정\n   데이터를 '소유'하는지 또는 어느 컴포넌트가 변경 내용과 관련되는지 파악하기 어려워진다.\n\n\n\n\n\nKEY CONCEPTS OF REDUX (WITH 구글 번역기)\n\n 1. 애플리케이션의 모든 데이터는 단일 데이터 구조인 상태(state)로 표현된다. 상태는 저장소(store)에 저장된다.\n 2. 앱은 저장소에서 상태를 가져와 읽는다\n 3. 이 저장소는 직접 변형할 수 없다.\n 4. 사용자 인터랙션은 일어날 일을 기술하기 위한 동작(action)을 유발한다.\n 5. 새 상태는 리듀서(reducer)라는 함수로 이전 상태와 동작을 결합하여 만들어 진다. \n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217481786/image2019-10-7_22-33-48.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217481786"
  },
  {
    "pageContent": "[OJT][FE] Web Storage\n\n\n정의\n\n클라이언트에서 데이터를 저장하는 공간. HTML5에 추가된 저장소이며 간단히 키와 값을 저장할 수 있습니다. key-value 형태입니다.\n\n\n특징\n\n * 키와 값은 어떤 형태가 들어와도 문자열로 변환되어 저장됩니다.\n\n * 브라우저 별 용량 제한이 다릅니다. 약 5mb.\n\n\n공통점\n\n * 서버에 의존하지 않습니다.\n   \n   * 이와 다르게, 세션과 쿠키는 항상 서버로 보내도록 되어있습니다.\n\n * window 객체 안에 들어 있으며 Storage 객체를 상속 받습니다.\n\n\n차이점\n\n항목\n\n로컬 스토리지\n\n세션 스토리지\n\n정보의 영구성\n\n도메인 별로 지속됨. 사용자가 지워야 사라짐\n\n세션(프로세스, 탭, 브라우저…)이 종료되면 사라짐\n\n\nLOCALSTORAGE, SESSIONSTOREAGE의 사용 방법\n\n\n\n// 데이터 저장\nlocalStorage.setItem('key', 'value');\nsessionStorage.setItem('key', 'value');\n\n// 데이터 조회\nlocalStorage.getItem('key');\nlocalStorage.getItem(); // 전체 조회\nsessionStorage.getItem('key');\n\n// 데이터 삭제\nlocalStorage.removeItem('key');\nsessionStorage.removeItem('key');\n\n// 스토리지 전체 삭제\nlocalStorage.clear();\nsessionStorage.clear();\n\n// 데이터가 객체일 때\nlocalStorage.setItem('object', JSON.stringify({a: 'b'}));\nJSON.parse(localstorage.getItem('object')); // {a: 'b'}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241827911"
  },
  {
    "pageContent": "[OJT][FE] CORS\n\n\n정의\n\nCORS(Cross-Origin Resource Sharing) 의 줄임말이다. 먼저 이 출처(Origin) 의 의미를 알아보자.\n\n\n출처(ORIGIN)\n\n서버의 위치를 의미하는 URL 은 아래와 같은 여러 개의 구성 요소로 이루어져 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1116176519/image-20201221-012412.png?api=v2]\n\n이 때 출처는 Protocol, Host, 그리고 위 그림에는 나와있지 않은 :80, :443 과 같은 포트 번호까지 모두 합친 것을 의미한다.\n위의 포트 번호는 각 웹에서 쓰이는 포로토콜 HTTP, HTTPS의 기본 포트 번호가 정해져 있기 때문에 생략이 가능하다.\n\n그러나 만약 https://google.com:443과 같이 출처에 포트 번호가 명시적으로 포함되어 있다면 이 포트 번호까지 모두 일치해야 같은\n출처라고 인정된다.\n\n\nSAME-ORIGIN, CROSS-ORIGIN 의 구분\n\n 두 URL의 구성 요소 중 Scheme, Host, Port, 이 3가지만 동일하면 된다.\n\nhttps://evan-moon.github.io:80라는 출처를 예로 들면 https:// 이라는\n스킴에 evan-moon.github.io 호스트를 가지고 :80번 포트를 사용하고 있다는 것만 같다면 나머지는 전부 다르더라도 같은\n출처(Same-origin)으로 인정이 된다는 것이다.\n\n여기서 중요한 사실 한 가지는 이렇게 출처를 비교하는 로직이 서버에 구현된 스펙이 아니라 브라우저에 구현되어 있는 스펙이라는 것이다.\n\n만약 우리가 CORS 정책을 위반하는 리소스 요청을 하더라도 해당 서버가 같은 출처에서 보낸 요청만 받겠다는 로직을 가지고 있는 경우가 아니라면\n서버는 정상적으로 응답을 하고, 이후 브라우저가 이 응답을 분석해서 CORS 정책 위반이라고 판단되면 그 응답을 사용하지 않고 그냥 버리는\n순서인 것이다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1116176519/image-20201221-013905.png?api=v2]\n\n즉, CORS는 브라우저의 구현 스펙에 포함되는 정책이기 때문에, 브라우저를 통하지 않고 서버 간 통신을 할 때는 이 정책이 적용되지 않는다.\n또한 CORS 정책을 위반하는 리소스 요청 때문에 에러가 발생했다고 해도 서버 쪽 로그에는 정상적으로 응답을 했다는 로그만 남기 때문에,\nCORS가 돌아가는 방식을 정확히 모르면 에러 트레이싱에 난항을 겪을 수도 있다.\n\n\n\n\nCORS 의 동작\n\n\n\n기본적으로 웹 클라이언트 어플리케이션이 다른 출처의 리소스를 요청할 때는 HTTP 프로토콜을 사용하여 요청을 보내게 되는데, 이때 브라우저는\n요청 헤더에 Origin이라는 필드에 요청을 보내는 출처를 함께 담아보낸다.\n\nOrigin: https://evan-moon.github.io\n\n이후 서버가 이 요청에 대한 응답을 할 때 응답 헤더의 Access-Control-Allow-Origin이라는 값에 “이 리소스를 접근하는 것이\n허용된 출처”를 내려주고, 이후 응답을 받은 브라우저는 자신이 보냈던 요청의 Origin과 서버가 보내준\n응답의 Access-Control-Allow-Origin을 비교해본 후 이 응답이 유효한 응답인지 아닌지를 결정한다.\n\n기본적인 흐름은 이렇게 간단하지만, 사실 CORS가 동작하는 방식은 한 가지가 아니라 세 가지의 시나리오에 따라 변경되기 때문에 여러분의 요청이\n어떤 시나리오에 해당되는지 잘 파악한다면 CORS 정책 위반으로 인한 에러를 고치는 것이 한결 쉬울 것이다.\n\n\nPREFLIGHT REQUEST\n\n프리플라이트(Preflight) 방식은 일반적으로 우리가 웹 어플리케이션을 개발할 때 가장 마주치는 시나리오이다. 이 시나리오에 해당하는 상황일\n때 브라우저는 요청을 한번에 보내지 않고 예비 요청과 본 요청으로 나누어서 서버로 전송한다.\n\n이때 브라우저가 본 요청을 보내기 전에 보내는 예비 요청을 Preflight라고 부르는 것이며, 이 예비 요청에는 HTTP 메소드\n중 OPTIONS 메소드가 사용된다. 예비 요청의 역할은 본 요청을 보내기 전에 브라우저 스스로 이 요청을 보내는 것이 안전한지 확인하는\n것이다.\n\n이 과정을 간단한 플로우 차트로 나타내보면 대략 이런 느낌이다.\n\n브라우저는 본 요청을 보내기 전 예비 요청을 먼저 보내고, 요청의 유효성을 검사한다\n\ncors preflight\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1116176519/cors-preflight.png?api=v2]\n\n우리가 자바스크립트의 fetch API를 사용하여 브라우저에게 리소스를 받아오라는 명령을 내리면 브라우저는 서버에게 예비 요청을 먼저 보내고,\n서버는 이 예비 요청에 대한 응답으로 현재 자신이 어떤 것들을 허용하고, 어떤 것들을 금지하고 있는지에 대한 정보를 응답 헤더에 담아서\n브라우저에게 다시 보내주게 된다.\n\n이후 브라우저는 자신이 보낸 예비 요청과 서버가 응답에 담아준 허용 정책을 비교한 후, 이 요청을 보내는 것이 안전하다고 판단되면 같은\n엔드포인트로 다시 본 요청을 보내게 된다. 이후 서버가 이 본 요청에 대한 응답을 하면 브라우저는 최종적으로 이 응답 데이터를 자바스크립트에게\n넘겨준다.\n\n이 플로우는 브라우저의 개발자 도구 콘솔에서도 간단하게 재현해볼 수 있는데, 필자의 블로그 환경에서 필자의 티스토리 블로그의 RSS 파일\n리소스에 요청을 보내면 브라우저가 본 요청을 보내기 전에 OPTIONS 메소드를 사용하여 예비 요청을 보내는 것을 확인할 수 있다.\n\nconst headers = new Headers({\n  'Content-Type': 'text/xml',\n});\nfetch('https://evanmoon.tistory.com/rss', { headers });\nOPTIONS https://evanmoon.tistory.com/rss\n\nAccept: */*\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-US,en;q=0.9,ko;q=0.8,ja;q=0.7,la;q=0.6\nAccess-Control-Request-Headers: content-type\nAccess-Control-Request-Method: GET\nConnection: keep-alive\nHost: evanmoon.tistory.com\nOrigin: https://evan-moon.github.io\nReferer: https://evan-moon.github.io/2020/05/21/about-cors/\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: cross-site\n\n실제로 브라우저가 보낸 요청을 보면, 단순히 Origin에 대한 정보 뿐만 아니라 자신이 예비 요청 이후에 보낼 본 요청에 대한 다른 정보들도\n함께 포함되어 있는 것을 볼 수 있다.\n\n이 예비 요청에서 브라우저는 Access-Control-Request-Headers를 사용하여 자신이 본 요청에서 Content-Type 헤더를\n사용할 것을 알려주거나, Access-Control-Request-Method를 사용하여 이후 GET 메소드를 사용할 것을 서버에게 미리\n알려주고 있는 것이다.\n\n이렇게 티스토리 서버에 예비 요청을 보내면, 이제 티스토리 서버가 이 예비 요청에 대한 응답을 보내준다.\n\nOPTIONS https://evanmoon.tistory.com/rss 200 OK\n\nAccess-Control-Allow-Origin: https://evanmoon.tistory.com\nContent-Encoding: gzip\nContent-Length: 699\nContent-Type: text/xml; charset=utf-8\nDate: Sun, 24 May 2020 11:52:33 GMT\nP3P: CP='ALL DSP COR MON LAW OUR LEG DEL'\nServer: Apache\nVary: Accept-Encoding\nX-UA-Compatible: IE=Edge\n\n여기서 우리가 눈여겨 봐야할 것은 서버가 보내준 응답 헤더에 포함된 Access-Control-Allow-Origin:\nhttps://evanmoon.tistory.com라는 값이다.\n\n티스토리 서버는 이 리소스에 접근이 가능한 출처는 오직 https://evanmoon.tistory.com 뿐이라고 브라우저에게 이야기해준\n것이고, 필자가 이 요청을 보낸 출처는 https://evan-moon.github.io이므로 서버가 허용해준 출처와는 다른 출처이다.\n\n결국 브라우저는 이 요청이 CORS 정책을 위반했다고 판단하고 다음과 같은 에러를 뱉게 되는 것이다.\n\n> 🚨 Access to fetch at ‘https://evanmoon.tistory.com/rss’ from origin\n> ‘https://evan-moon.github.io [https://evan-moon.github.io]’ has been blocked\n> by CORS policy: Response to preflight request doesn’t pass access control\n> check: The ‘Access-Control-Allow-Origin’ header has a value\n> ‘http://evanmoon.tistory.com [http://evanmoon.tistory.com]’ that is not equal\n> to the supplied origin. Have the server send the header with a valid value,\n> or, if an opaque response serves your needs, set the request’s mode to\n> ‘no-cors’ to fetch the resource with CORS disabled.\n\n이때 예비 요청에 대한 응답에서 에러가 발생하지 않고 정상적으로 200이 떨어졌는데, 콘솔 창에는 빨갛게 에러가 표시되기 때문에 많은 분들이\n헷갈려하시는데, CORS 정책 위반으로 인한 에러는 예비 요청의 성공 여부와 별 상관이 없다. 브라우저가 CORS 정책 위반 여부를 판단하는\n시점은 예비 요청에 대한 응답을 받은 이후이기 때문이다.\n\n물론 예비 요청 자체가 실패해도 똑같이 CORS 정책 위반으로 처리될 수도 있지만, 중요한 것은 예비 요청의 성공/실패 여부가 아니라 “응답\n헤더에 유효한 Access-Control-Allow-Origin 값이 존재하는가”이다. 만약 예비 요청이 실패해서 200이 아닌 상태 코드가\n내려오더라도 헤더에 저 값이 제대로 들어가있다면 CORS 정책 위반이 아니라는 의미이다.\n\n대부분의 경우 이렇게 예비 요청, 본 요청을 나누어 보내는 프리플라이트 방식을 사용하기는 하지만, 모든 상황에서 이렇게 두 번씩 요청을 보내는\n것은 아니다. 조금 까다로운 조건이기는 하지만 어떤 경우에는 예비 요청없이 본 요청만으로 CORS 정책 위반 여부를 검사하기도 한다.\n\n\nSIMPLE REQUEST\n\n이 시나리오에 대한 정식 명칭은 없지만 MDN의 CORS 문서에서는 이 시나리오를 Simple Request\n[https://developer.mozilla.org/ko/docs/Web/HTTP/CORS#%EC%A0%91%EA%B7%BC_%EC%A0%9C%EC%96%B4_%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4_%EC%98%88%EC%A0%9C]라고\n부르고 있으니, 필자도 그냥 단순 요청(Simple Request)이라고 부르도록 하겠다.\n\n단순 요청은 예비 요청을 보내지 않고 바로 서버에게 본 요청부터 때려박은 후, 서버가 이에 대한 응답의\n헤더에 Access-Control-Allow-Origin과 같은 값을 보내주면 그때 브라우저가 CORS 정책 위반 여부를 검사하는 방식이다.\n즉, 프리플라이트와 단순 요청 시나리오는 전반적인 로직 자체는 같되, 예비 요청의 존재 유무만 다르다.\n\n단순 요청은 예비 요청없이 바로 본 요청으로 퉁치는 시나리오이다\n\nsimple request\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1116176519/simple-request.png?api=v2]\n\n하지만 아무 때나 단순 요청을 사용할 수 있는 것은 아니고, 특정 조건을 만족하는 경우에만 예비 요청을 생략할 수 있다. 게다가 이 조건이 조금\n까다롭기 때문에 일반적인 방법으로 웹 어플리케이션 아키텍처를 설계하게 되면 거의 충족시키기 어려운 조건들이라 필자도 이런 경우를 거의 경험하지는\n못 했다.\n\n--------------------------------------------------------------------------------\n\n 1. 요청의 메소드는 GET, HEAD, POST 중 하나여야 한다.\n\n 2. Accept, Accept-Language, Content-Language, Content-Type, DPR, Downlink, Save-Data, Viewport-Width, Width를\n    제외한 헤더를 사용하면 안된다.\n\n 3. 만약 Content-Type를 사용하는\n    경우에는 application/x-www-form-urlencoded, multipart/form-data, text/plain만\n    허용된다.\n\n--------------------------------------------------------------------------------\n\n사실 1번 조건의 경우는 그냥 PUT이나 DELETE 같은 메소드를 사용하지 않으면 되는 것 뿐이니 그렇게 보기 드문 상황은 아니지만, 2번이나\n3번 조건 같은 경우는 조금 까다롭다.\n\n애초에 저 조건에 명시된 헤더들은 진짜 기본적인 헤더들이기 때문에, 복잡한 상용 웹 어플리케이션에서 이 헤더들 외에 추가적인 헤더를 사용하지\n않는 경우는 드물다. 당장 사용자 인증에 사용되는 Authorization 헤더 조차 저 조건에는 포함되지 않는다.\n\n게다가 대부분의 HTTP API는 text/xml이나 application/json 컨텐츠 타입을 가지도록 설계되기 때문에 사실 상 이 조건들을\n모두 만족시키는 상황을 만들기는 그렇게 쉽지 않은 것이 현실이다.\n\n\nCREDENTIALED REQUEST\n\n3번째 시나리오는 인증된 요청을 사용하는 방법이다. 이 시나리오는 CORS의 기본적인 방식이라기 보다는 다른 출처 간 통신에서 좀 더 보안을\n강화하고 싶을 때 사용하는 방법이다.\n\n기본적으로 브라우저가 제공하는 비동기 리소스 요청 API인 XMLHttpRequest 객체나 fetch API는 별도의 옵션 없이 브라우저의\n쿠키 정보나 인증과 관련된 헤더를 함부로 요청에 담지 않는다. 이때 요청에 인증과 관련된 정보를 담을 수 있게 해주는 옵션이\n바로 credentials 옵션이다.\n\n이 옵션에는 총 3가지의 값을 사용할 수 있으며, 각 값들이 가지는 의미는 다음과 같다.\n\n옵션 값\n\n설명\n\nsame-origin (기본값)\n\n같은 출처 간 요청에만 인증 정보를 담을 수 있다\n\ninclude\n\n모든 요청에 인증 정보를 담을 수 있다\n\nomit\n\n모든 요청에 인증 정보를 담지 않는다\n\n만약 여러분이 same-origin이나 include와 같은 옵션을 사용하여 리소스 요청에 인증 정보가 포함된다면, 이제 브라우저는 다른 출처의\n리소스를 요청할 때 단순히 Access-Control-Allow-Origin만 확인하는 것이 아니라 좀 더 빡빡한 검사 조건을 추가하게 된다.\n\n백문이불여일견이니 필자가 지금 이 포스팅을 작성하고 있는 로컬 환경과 필자의 블로그를 호스팅하고 있는 Github 서버와의 통신을 통해, 어떤\n제약이 추가되었는지 직접 살펴보는 것이 좋을 것 같다.\n\n필자의 블로그는 Access-Control-Allow-Origin 값으로 모든 출처를 허용한다는 의미인 *가 설정되어있기 때문에, 다른 출처에서\n필자의 블로그로 리소스를 요청할 때 CORS 정책 위반으로 인한 제약을 받지 않는다.\n\n그래서 http://localhost:8000과 같은 로컬의 개발 환경에서도 fetch API를 사용하여 마음대로 리소스를 요청하고, 또 받아올\n수 있다.\n\nfetch('https://evan-moon.github.io/feed.xml');\nRequest\nGET https://evan-moon.github.io/feed.xml\n\nOrigin: http://localhost:8000\nReferer: http://localhost:8000/2020/05/21/about-cors/\nResponse\nGET https://evan-moon.github.io/feed.xml 200 OK\n\nAccess-Control-Allow-Origin: *\nContent-Encoding: gzip\nContent-Length: 1132748\nContent-Type: application/xml\nServer: GitHub.com\nStatus: 200\n\n또한 구글 크롬 브라우저의 credentials 기본 값은 같은 출처 내에서만 인증 정보를 사용하겠다는 same-origin이기 때문에, 필자의\n로컬 환경에서 https://evan-moon.github.io로 보내는 리소스 요청에는 당연히 브라우저의 쿠키와 같은 인증 정보가 포함되어\n있지 않다.\n\n그렇기 때문에 브라우저는 단순히 Access-Control-Allow-Origin: *이라는 값만 보고 “이 요청은 안전하구만”이라는 결론을\n내리는 것이다. 그러나 필자가 credentials 옵션을 모든 요청에 인증 정보를 포함하겠다는 의미를 가진 include로 변경하고 같은\n요청을 보내면 이번에는 상황이 조금 달라진다.\n\nfetch('https://evan-moon.github.io/feed.xml', {\n  credentials: 'include', // Credentials 옵션 변경!\n});\n\n직접 브라우저 콘솔에서 실행해보면 알겠지만, 이번에는 credentials: include 옵션을 사용하여 동일 출처 여부와 상관없이 무조건\n요청에 인증 정보가 포함되도록 설정했으므로, 이번 요청에는 브라우저의 쿠키 정보가 함께 담겨있는 것을 확인해볼 수 있다.\n\n필자의 블로그를 호스팅하고 있는 Github 서버는 이번에도 동일한 응답을 보내주었지만, 브라우저의 반응은 다르다.\n\n> 🚨 Access to fetch at ’https://evan-moon.github.io/feed.xml\n> [https://evan-moon.github.io/feed.xml]’ from origin ’http://localhost:8000\n> [http://localhost:8000/]’ has been blocked by CORS policy: The value of the\n> ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard\n> ’*’ when the request’s credentials mode is ‘include’.\n\n브라우저는 인증 모드가 include일 경우, 모든 요청을 허용한다는 의미의 *를 Access-Control-Allow-Origin 헤더에\n사용하면 안된다고 이야기하고 있다.\n\n이처럼 요청에 인증 정보가 담겨있는 상태에서 다른 출처의 리소스를 요청하게 되면 브라우저는 CORS 정책 위반 여부를 검사하는 룰에 다음 두\n가지를 추가하게 된다.\n\n--------------------------------------------------------------------------------\n\n 1. Access-Control-Allow-Origin에는 *를 사용할 수 없으며, 명시적인 URL이어야한다.\n\n 2. 응답 헤더에는 반드시 Access-Control-Allow-Credentials: true가 존재해야한다.\n\n--------------------------------------------------------------------------------\n\n인증까지 얶혀있는 이 시나리오는 다른 시나리오에 비해서 다소 복잡하게 느껴질 수는 있지만, 이렇게 CORS 정책에 대한 다양한 시나리오를\n알아두면 실제 상황에서 CORS 정책 위반으로 인한 문제가 발생했을 경우 삽질해야하는 시간을 크게 단축시킬 수 있으니 숙지해놓는 것을\n추천한다. (하라는 거 다 했는데 왜 안돼? 같은 상황을 조금은 예방할 수 있다)\n\n\nCORS 해결 방법\n\n\nACCESS-CONTROL-ALLOW-ORIGIN 세팅하기\n\nCORS 정책 위반으로 인한 문제를 해결하는 가장 대표적인 방법은, 그냥 정석대로\n서버에서 Access-Control-Allow-Origin 헤더에 알맞은 값을 세팅해주는 것이다.\n\n이때 와일드카드인 *을 사용하여 이 헤더를 세팅하게 되면 모든 출처에서 오는 요청을 받아먹겠다는 의미이므로 당장은 편할 수 있겠지만, 바꿔서\n생각하면 정체도 모르는 이상한 출처에서 오는 요청까지 모두 받아먹겠다는 오픈 마인드와 다를 것 없으므로 보안적으로 심각한 이슈가 발생할 수도\n있다.\n\n그러니 가급적이면 귀찮더라도 Access-Control-Allow-Origin: https://evan.github.io와 같이 출처를\n명시해주도록 하자.\n\n이 헤더는 Nginx나 Apache와 같은 서버 엔진의 설정에서 추가할 수도 있지만, 아무래도 복잡한 세팅을 하기는 불편하기 때문에 소스 코드\n내에서 응답 미들웨어 등을 사용하여 세팅하는 것을 추천한다. Spring, Express, Django와 같이 이름있는 백엔드 프레임워크의\n경우에는 모두 CORS 관련 설정을 위한 세팅이나 미들웨어 라이브러리를 제공하고 있으니 세팅 자체가 어렵지는 않을 것이다.\n\n\nWEBPACK DEV SERVER로 리버스 프록싱하기\n\n사실 CORS를 가장 많이 마주치는 환경은 바로 로컬에서 프론트엔드 어플리케이션을 개발하는 경우라고 해도 과언이 아니다. 백엔드에는\n이미 Access-Control-Allow-Origin 헤더가 세팅되어있겠지만, 이 중요한\n헤더에다가 http://localhost:3000 같은 범용적인 출처를 넣어주는 경우는 드물기 때문이다.\n\n프론트엔드 개발자는 대부분 웹팩과 webpack-dev-server를 사용하여 자신의 머신에 개발 환경을 구축하게 되는데, 이 라이브러리가\n제공하는 프록시 기능을 사용하면 아주 편하게 CORS 정책을 우회할 수 있다.\n\nmodule.exports = {\n  devServer: {\n    proxy: {\n      '/api': {\n        target: 'https://api.evan.com',\n        changeOrigin: true,\n        pathRewrite: { '^/api': '' },\n      },\n    }\n  }\n}\n\n이렇게 설정을 해놓으면 로컬 환경에서 /api로 시작하는 URL로 보내는 요청에 대해 브라우저는 localhost:8000/api로 요청을 보낸\n것으로 알고 있지만, 사실 뒤에서 웹팩이 https://api.evan.com으로 요청을 프록싱해주기 때문에 마치 CORS 정책을 지킨 것처럼\n브라우저를 속이면서도 우리는 원하는 서버와 자유롭게 통신을 할 수 있다. 즉, 프록싱을 통해 CORS 정책을 우회할 수 있는 것이다.\n\n웹팩의 함정 카드 리버스 프록싱(이)가 발동했다!\n\ntrap\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1116176519/trap.png?api=v2]\n\n혹시 webpack-dev-middleware [https://github.com/webpack/webpack-dev-middleware]와\nNode 서버의 조합으로 개발 환경을 직접 구축했더라도 http-proxy-middleware\n[https://github.com/chimurai/http-proxy-middleware] 라이브러리를 사용하면 손쉽게 프록시 설정을 할 수\n있으니 걱정하지말자. (webpack-dev-server도 내부적으로는 어차피 http-proxy-middleware를 사용한다)\n\n다만 이 방법은 실제 프로덕션 환경에서도 클라이언트 어플리케이션의 소스를 서빙하는 출처와 API 서버의 출처가 같은 경우에 사용하는 것이 좋다.\n물론 로컬 개발 환경에서야 웹팩이 요청을 프록싱해주니 아무 이상이 없겠지만, 어플리케이션을 빌드하고 서버에 올리고 나면 더\n이상 webpack-dev-server가 구동하는 환경이 아니기 때문에 프록싱이고 나발이고 이상한 곳으로 API 요청을 보내기 때문이다.\n\n예를 들어 API 서버의 출처는 https://api.evan.com이고 클라이언트 어플리케이션을 서빙하는 서버의\n출처는 https://www.evan.com이라면, 다음과 같은 상황이 발생한다는 것이다.\n\nfetch('/api/me');\n로컬환경에서는...\nGET https://api.evan.com/me 200 OK\n\n실제 서버에는 프록싱 로직이 없음...\nGET https://www.evan.com/api/me 404 Not Found\n\n물론 비즈니스 로직 내에서 process.env.NODE_ENV와 같은 빌드 환경 변수를 사용하여 분기 로직을 작성하는 방법도 있지만,\n개인적으로 비즈니스 로직에 이런 개발 환경 전용 소스가 포함되는 것은 별로 좋지 않다고 생각해서 피하는 편이다.\n\n\n\n레퍼런스\n\n * https://evan-moon.github.io/2020/05/21/about-cors/\n   [https://evan-moon.github.io/2020/05/21/about-cors/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1116176519"
  },
  {
    "pageContent": "[OJT][FE] 웹서버\n * NGINX Explained in 100 Seconds\n * The Architecture of Open Source Applications - Nginx\n * Middleware\n * Playground\n\n\nNGINX EXPLAINED IN 100 SECONDS\n\n\nTHE ARCHITECTURE OF OPEN SOURCE APPLICATIONS - NGINX\n\nThe Architecture of Open Source Applications - Nginx\n[https://www.aosabook.org/en/nginx.html]\n\n\nMIDDLEWARE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/126484485/middleware_arrow.png?api=v2]\n\nApache module, Express middleware, … 이름은 조금씩 다르지만 모든 웹서버들이 가지고 있는 개념. 기본적인 동작\n원리는 같다.\n\n 1. req 는 순서대로 모든 middleware 를 통과해서 라우터로 전달 된다.\n\n 2. middleware 는 다음의 두가지 중 하나의 동작을 수행한다.\n    \n    1. req headers, query string, body, … 등에 부가 정보를 추가하고 req 를 다음 middleware 로\n       전달한다.\n    \n    2. req 에 필요한 정보가 없는 경우 req 를 다음 middleware 로 전달하지 않고 바로 res 를 생성한다.\n\n\nPLAYGROUND\n\nhttps://nginx-playground.wizardzines.com\n[https://nginx-playground.wizardzines.com]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/126484485"
  },
  {
    "pageContent": "[OJT][FE] Publishing\n * 가능한 마크업 언어로서 표현한다.\n   * 예시: “이미지를 누르면 특정 주소의 새 창이 열린다.”\n * RTL을 고려한다.\n\n\n가능한 마크업 언어로서 표현한다.\n\n성능/보안 요소, 요구사항을 수행하기 위해 꼭 필요한게 아니라면 프로그래밍 언어적 요소를 제거하여 직관적으로 표현한다.\n\n\n예시: “이미지를 누르면 특정 주소의 새 창이 열린다.”\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDo\n\n<a target=\"_blank\" href=\"...\">\n  <img src=\"...\" >\n</a>\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nDon’t\n\n<button style=\"background-image: url(...)\" onclick=\"window.open(...)\"></button>\n\n\n\n\nRTL을 고려한다.\n\nhttps://steelkiwi.com/blog/right-to-left-rtl-website-development-design/\n[https://steelkiwi.com/blog/right-to-left-rtl-website-development-design/]\n\n * 방향성이 있는 아이콘이나 스타일은 좌우 반전(미러링)되어야 한다.\n   \n   * 무조건 뒤집어버리면 문제가 될 수 있으므로 별도로 리소스를 가지거나 컴포넌트화 하는것이 좋다.\n\n * 글꼴 기울임은 아랍어에서 적용되지 않는다.\n\n * 모든걸 직접 반전 할 필요는 없다.\n   \n   * https://www.w3.org/International/questions/qa-html-dir\n     [https://www.w3.org/International/questions/qa-html-dir]\n   \n   * <html dir=”rtl”> 으로 설정하면 동작이 달라지는 스타일의 특성도 이해해야 한다.\n     \n     * ex) flex는 정렬 순서가 자동으로 반전된다.\n     \n     * ex2) 기본적으로 글자 정렬이 오른쪽으로 바뀐다.\n\n * LTR 언어의 방향은 그대로 유지한다.\n   \n   * ex) 영어와 히브리어를 섞어서 쓰는 경우, RTL 환경이더라도 LTR 언어인 영어는 방향을 바꾸지 않고 그대로 표기한다.\n\n * 방향, 정렬과 관련된 스타일은 가능한 방향보다 논리적 속성을 사용한다.\n   \n   * ex) left,right보단 start, end와 같은 속성.\n   \n   * https://www.w3.org/International/questions/qa-html-dir#alignment\n     [https://www.w3.org/International/questions/qa-html-dir#alignment]\n\n[F] RTL 지원 컴포넌트 개발\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1640235032/F+RTL] 를 따르면\n퍼블리싱(CSS)과 관련된 항목은 신경쓰지 않아도 된다.\nRTL 변환 라이브러리 없이 직접 구현할 때 신경 써야 할 내용이다.\n\n글꼴 기울임은 아랍어에서 적용되지 않는다. 이런건 개발자 및 디자이너가 신경써야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2033254606"
  },
  {
    "pageContent": "[OJT][FE] favicon\n * 1. 파비콘(favicon) 소개\n * 2. 기본 설정\n   * /src/index.html 파일에서 적용하기\n   * favicons-webpack-plugin 라이브러리를 사용하여 적용하기 ( 추천)\n * 3. 그 외 추가 정보\n   * 터치 아이콘\n   * PNG 파비콘\n   * 파비콘(favicon) 강제 새로고침\n   * SVG 파비콘\n * 출처\n\n\n1. 파비콘(FAVICON) 소개\n\n파비콘은 웹페이지에 접속했을때, 상단 탭에 보여지는 아이콘을 일컫는다. 이 아이콘은 즐겨찾기에 웹페이지를 등록할때도 사용된다. 웹사이트를\n대표하는 로고(logo)의 개념과 비슷하며, 사이트의 성격을 드러내기도 한다.\n\n터치(touch) 아이콘, 타일(tile) 아이콘의 등장으로 더욱 혼란스러움이 가중되었으며, 각각의 기기에 최적화된 파비콘의 크기를 재설정하여\n개발자들에게 어려움을 주고 있다.\n\n\n(전구)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/lightbulb_on.png]\n파비콘이 있는 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1744076846/image-20210430-065151.png?api=v2]\n\n(회색 전구)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/lightbulb.png]\n파비콘이 없는 경우 (지구본 이미지)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1744076846/image-20210430-065244.png?api=v2]\n\n\n2. 기본 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1744076846/image-20210430-075258.png?api=v2]\n\n\n(star)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/star_yellow.png]\n/SRC/INDEX.HTML 파일에서 적용하기\n\n(정보)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/information.png]\n기존 프로젝트에 적용중인 파비콘\n\n <link\n      rel=\"icon\"\n      href=\"https://haulla.com/wp-content/uploads/2019/10/cropped-haullafavicon-32x32.png\"\n      sizes=\"32x32\"\n    />\n    <link\n      rel=\"icon\"\n      href=\"https://haulla.com/wp-content/uploads/2019/10/cropped-haullafavicon-192x192.png\"\n      sizes=\"192x192\"\n    />\n    <link\n      rel=\"apple-touch-icon\"\n      href=\"https://haulla.com/wp-content/uploads/2019/10/cropped-haullafavicon-180x180.png\"\n    />\n\n\n(star)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/star_yellow.png]\nFAVICONS-WEBPACK-PLUGIN [https://www.npmjs.com/package/favicons-webpack-plugin]\n라이브러리를 사용하여 적용하기 (추천)\n\n위처럼 html 파일에서 직접 설정하지 않고, webpack.comfig.js 파일 설정을 통해 파비콘을 적용할 수 있다.\n\n기본적인 설정 방법\n\n 1. $ npm install --save-dev favicons favicons-webpack-plugin\n\n 2. webpack.comfig.js\n    \n    const FaviconsWebpackPlugin = require('favicons-webpack-plugin')\n    \n    ...\n    \n    plugins: [\n      new FaviconsWebpackPlugin({\n            logo: './src/assets/favicons/original.png',\n            mode: 'auto',\n          }),\n    ]\n\n 3. 폴더 위치에 알맞게 실제 이미지 파일 저장 ex) original.png\n\n주의할 점..\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1744076846/image-20210510-045126.png?api=v2]\n\n * html-webpack-plugin 라이브러리와 메이저 버전을 일치 시켜야 함. ex) 4.x.x, 5.x.x …\n\n * plugins에서 html-webpack-plugin 바로 다음으로 위치해야 함.\n\n * 라이브러리를 사용하는 경우 번들 사이즈나 이미지 교체 등의 이슈를 고려하여 적용해야 함.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. 그 외 추가 정보\n\n\n(더하기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n터치 아이콘\n\n터치 아이콘?\n\n웹 사이트를 홈 화면에 추가 했을 때 보여지는 아이콘\n\niOS 2.0 이상과 Android 2.1 이상에서는 터치(Touch) 아이콘 지정이 가능하다. 고해상도 아이콘(152x152) 하나만 준비하면\n저해상도에서는 알아서 아이콘의 크기가 변경된다. 다만, 기기의 홈스크린에 아이콘이 추가되면 성능에 부정적일 수는 있다.\n\nex) <link rel=\"apple-touch-icon-precomposed\" href=\"path/to/favicon-152.png\">\n\n\n(더하기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\nPNG 파비콘\n\nChrome, Firefox, Opera 7+, 그리고 Safari 4+는 모두 PNG 파비콘을 지원하지만 Chrome과 Safari는 ICO\n파비콘이 함께 지정되어 있으면 선언된 순서에 상관없이 PNG 파비콘을 무시하고 ICO 파비콘을 사용한다. 즉, PNG 파비콘을 지원하지 않는\nIE를 위해 ICO 파일을 사용하게 되는 순간, Chrome과 Safari는 PNG 파비콘을 무시하게 된다.\n\n\n(더하기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n파비콘(FAVICON) 강제 새로고침\n\n일반적으로는 필요치 않으나, 개발하는 동안이나 새로고침으로 파비콘이 표시되지 않을때를 고려한 방법이다.\n\n * 방문한 페이지에 대한 캐시를 삭제한다. (Windows: Ctrl + F5, Mac: Command + Shift + R).\n\n * 만일 IE라면 브라우저를 닫고 다시 연다.\n\n * 만일 여전히 골머리를 썩고 있다면 새로운 탭을 열어보거나 How do I force a favicon refresh\n   [http://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh]을\n   참고하라.\n\n * 일시적으로 명시적인 HTML 태그를 추가하고 쿼리 문자열을 추가한다. 확인이 완료된 후엔 이를 제거하자.\n\n\n(더하기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\nSVG 파비콘\n\nhttps://web.dev/building-an-adaptive-favicon/\n[https://web.dev/building-an-adaptive-favicon/]\n\n\n출처\n\n * https://webdir.tistory.com/337 [https://webdir.tistory.com/337]\n\n * http://www.gallery-nomad.com/web5/bbs/board.php?bo_table=05_myboard&wr_id=19\n   [http://www.gallery-nomad.com/web5/bbs/board.php?bo_table=05_myboard&wr_id=19]\n\n * https://www.npmjs.com/package/favicons-webpack-plugin\n   [https://www.npmjs.com/package/favicons-webpack-plugin]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1744076846"
  },
  {
    "pageContent": "[OJT][FE] Open Graph protocol\n\nhttps://ogp.me/ [https://ogp.me/]\n\nmeta tag 를 이용해 웹 페이지의 정보를 기술하기 위한 프로토콜.\n\nSocial media 에서 링크를 전달할 때 프리뷰를 구성하기 위해 사용되기도 한다.\n\n// https://github.com/Ecube-Labs/haulla-official/blob/ccb7796c639ed929f15ad5ba63aecd1d7097ce39/src/index.html#L53-L53\n<meta property=\"og:title\" content=\"Haulla\" />\n<meta property=\"og:description\" content=\"Automated waste collections for businesses | Save money on trash pickups\" />\n<meta property=\"og:type\" content=\"website\" />\n<meta property=\"og:image\" content=\"https://refer.haulla.com/images/referral-og.png\" />\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2173763585/image-20210930-124538.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2173763585/image-20210930-124052.png?api=v2]\n\nhttps://refer.haulla.com/request-quote?referralId=46b7e35b-f040-4b49-ba3f-486fc3e065c3\n[https://refer.haulla.com/request-quote?referralId=46b7e35b-f040-4b49-ba3f-486fc3e065c3]\n← 이 링크를 라인이나 카톡으로 전달해볼 것.\n\n\n\nhttps://tech.inflab.com/20240219-dynamic-og-image/\n[https://tech.inflab.com/20240219-dynamic-og-image/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2173763585"
  },
  {
    "pageContent": "[OJT][FE] Virtual DOM\n\nReact는 Virtual DOM 방식을 사용한다. 해당 개념을 이해하기 전에 아래 2가지 개념을 먼저 이해해야 한다.\n\n\nDOM (DOCUMENT OBJECT MODEL)\n\n * 문서의 구성요소들을 객채로 구조화하여 나타낸 것\n\n * 웹 문서를 위한 프로그래밍 인터페이스\n\n * 페이지를 나타내고 문서의 구조, 스타일 그리고 내용 수정이 가능함\n\n * HTML Elements, Attribute, Event 등 다양한 인터페이스를 제공함으로서 조작이 가능함\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2315878434/pic_htmltree.gif?api=v2]\n\n\n\n\nHOW BROWSERS WORK?\n\n * https://d2.naver.com/helloworld/59361 [https://d2.naver.com/helloworld/59361]\n\n * 브라우저마다 다른 엔진을 가지고 있음\n   \n   * 브라우저마다 동작 과정이 다름 - https://en.wikipedia.org/wiki/Browser_engine\n     [https://en.wikipedia.org/wiki/Browser_engine]\n\n * 웹 파일을 브라우저에서 그려 사용자에게 보여줄때까지 아래 그림 프로세스를 따라간다. 과정 하나 하나가 모두 연산이고 시간이다.\n   \n   * 예1) 먼저 브라우저가 HTML파일을 DOM 트리로 파싱하고 CSS는 스타일 규칙으로 만듬 → 이 2개를 합쳐서 렌더 트리를 만듬 →\n     이걸 화면에 구조적으로 배치함 → 예쁘게 나머지를 Painting → 우리에게 보여줌\n   \n   * 예2) DOM이 100번 변경되면 100번 브라우저 렌더 과정을 거친다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2315878434/helloworld-59361-3.png?api=v2]\n\n\nVIRTUAL DOM\n\n * 실제 DOM과 똑같이 구조화 시킨 객체를 추상화시켜 메모리에 올려두고, 변화가 있으면 일단 Virtual DOM부터 수정한다. 이렇게\n   한번에 모아서 실제 DOM이랑 비교해서 바뀐 부분만 수정한다.\n   \n   * 예) 100번 변경 <-> Virtual DOM 수정 → Virtual DOM이랑 Real DOM이랑 바뀐 부분만 비교하여 수정 →\n     한번만 브라우저 렌더\n\n\n\n참고 자료\n\n * https://www.youtube.com/watch?v=d7pyEDqBDeE\n   [https://www.youtube.com/watch?v=d7pyEDqBDeE]\n\n * https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\n   [https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction]\n\n * https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/\n   [https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/]\n\n * https://reactjs.org/docs/faq-internals.html\n   [https://reactjs.org/docs/faq-internals.html]\n\n * https://svelte.dev/blog/virtual-dom-is-pure-overhead\n   [https://svelte.dev/blog/virtual-dom-is-pure-overhead] - 가상돔이 무조건 좋은건 아님. 최적화\n   못시키면 의미 없음.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2315878434"
  },
  {
    "pageContent": "[OJT][FE] A11y\n\n * a11y === accessibility\n\n * 접근성이 높은 웹 서비스일수록 장애인 사용자가 이용하기에 좋다.\n   \n   * 주로 시각 장애인이 스크린 리더를 이용해 조작할 수 있다.\n\n * 접근성은 기존 웹의 스펙을 활용해 높일 수 있다.\n   \n   * HTML Semantic tag:\n     div 태그를 떡칠하는 대신 적재 적소에 main, aside, article, nav, footer 등의 시멘틱 태그를 사용하는것\n     만으로도 접근성을 높일 수 있다. (적재 적소에 대한 표준이 없어 개발자 재량껏 의미를 부여해야 한다.)\n   \n   * attributes:\n     접근성 측면에서 엘리먼트의 상태나 이름을 결정 할 수 있다.\n     \n     * alt: 사람이 알기 쉽게 이미지의 이름 또는 설명을 넣는다.\n     \n     * …\n   \n   * ARIA attributes:\n     엘리먼트의 상태나 이름, 다른 엘리먼트와의 관계를 부가적으로 표현해 줄 수 있다.\n     일반 attribute와 겹치는 경우도 있으니(aria-disabled, disabled) 상황에 맞게 쓰도록 한다.\n     \n     * aria-label: 사람이 알기 쉽게 엘리먼트의 이름 또는 설명을 넣는다.\n     \n     * aria-labelledby: id를 기준으로 관계를 맺어 특정 엘리먼트에 대한 이름 또는 설명을 표현한다.\n     \n     * …\n\n * 이러한 접근성을 높이면 종종 플랫폼(브라우저)의 assistant를 받을 수 있다.\n   \n   * ex) label, input을 for/id 어트리뷰트로 연결지어두면 레이블을 눌렀을 때 인풋에 포커싱이 된다.\n     https://stackblitz.com/edit/web-platform-oebq3z?file=index.html\n     [https://stackblitz.com/edit/web-platform-oebq3z?file=index.html]\n\n * 프론트엔드 테스트에서 DOM 선택시 아주 유용하게 이용되므로 최대한 활용하는것이 권장된다.\n   \n   * 구현체에 얽매이지 않고 추상적으로 객체를 선택하고 조작할 수 있도록 도와준다.\n\n * 도구를 사용해서 접근성 높은 웹 서비스를 만드는것에 도움을 받을 수 있다.\n   \n   * https://www.npmjs.com/package/eslint-plugin-jsx-a11y\n     [https://www.npmjs.com/package/eslint-plugin-jsx-a11y]\n   \n   * https://storybook.js.org/docs/react/writing-tests/accessibility-testing\n     [https://storybook.js.org/docs/react/writing-tests/accessibility-testing]\n\n * 사용자의 값을 입력받는 종류(input, textarea 등…)의 컴포넌트는 특정 이벤트만 지원하는것을 지양해야 한다.\n   \n   * onClick, onTouch와 같은 이벤트 대신 가능한 onChange 를 사용하는것을 고려한다.\n   \n   * 이는 포인터 장치 사용자들에게는 괜찮으나, 키보드 사용자들에게는 기능적으로 문제가 생깁니다. 다음 엘리먼트로 탭을 이동할 때\n     window 객체가 click 이벤트를 받을 수 없기 때문입니다. 이로 인해, 기능이 가려져 사용자들이 애플리케이션을 제대로 사용할 수\n     없게 됩니다.\n   \n   * https://ko.reactjs.org/docs/accessibility.html#mouse-and-pointer-events\n     [https://ko.reactjs.org/docs/accessibility.html#mouse-and-pointer-events]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343895057"
  },
  {
    "pageContent": "[OJT][FE] JSX (React/Emotion)\n * React JSX Pragma\n * Emotion JSX Pragma\n * 관련 논의\n\n\nREACT JSX PRAGMA\n\nReact의 JSX Pragma는 <div ... /> 코드를 React.createElement(\"div\", { ... }) 으로 변환한다.\n\n그래서 JSX 표현식을 사용하는 파일에서 React를 import 하지 않으면 에러가 발생한다.\n\nTry it out\n[https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=Q&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.17.2&externalPlugins=&assumptions=%7B%7D]\n\n\nEMOTION JSX PRAGMA\n\nemotion의 JSX Pragma는 <div ... /> 코드를 jsx(\"div\", { ... }) 으로 변환한다.\n(jsx 함수? import { jsx } from \"@emotion/react\")\n\n * jsx 함수는 css prop이 있다면 css prop을 넘긴 값을 기반으로 className을 생성하여 className 프로퍼티로\n   주입한다.\n\n * 타입스크립트를 사용할 땐 React JSX pragma 대신 이모션의 JSX pragma를 사용하기 위해\n   https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2294841417/MUI+v5+Styling+guide#%2Ftsconfig.json\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2294841417/MUI+v5+Styling+guide#%2Ftsconfig.json]\n   와 같은 설정이 필요한것이다.\n   \n   * 위와 같이 설정하면 컴포넌트에서 React를 import하지 않아도 에러가 발생하지 않는다.\n     [https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html]\n\n\n관련 논의\n\n * https://github.com/Ecube-Labs/ccnx-front/pull/208#discussion_r792320852\n   [https://github.com/Ecube-Labs/ccnx-front/pull/208#discussion_r792320852]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2320171030"
  },
  {
    "pageContent": "[OJT][FE] 상태 설계\n * useState or useReducer\n * Normalizing State Shape\n * How to use finite state machines in React?\n\n\nUSESTATE OR USEREDUCER\n\nTL;DR\n\n단순한 상태 → useState\n\n여러개의 상태들이 서로 의존하고 있음 → useReducer\n\nhttps://kentcdodds.com/blog/should-i-usestate-or-usereducer\n[https://kentcdodds.com/blog/should-i-usestate-or-usereducer]\n\n\nNORMALIZING STATE SHAPE\n\nhttps://redux.js.org/usage/structuring-reducers/normalizing-state-shape\n[https://redux.js.org/usage/structuring-reducers/normalizing-state-shape]\n\n * 문서는 Redux 문서이지만 단순 React state 를 설계할 때도 도움이 된다.\n\n\nHOW TO USE FINITE STATE MACHINES IN REACT?\n\nhttps://tsh.io/blog/finite-state-machines-in-react/\n[https://tsh.io/blog/finite-state-machines-in-react/]\n\n * FSM 은 백엔드 설계할 때도 도움이 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118784115"
  },
  {
    "pageContent": "[OJT][FE] 리스트와 키\n\n루프를 통해 컴포넌트를 렌더링하는 경우 항상 키를 사용해야 한다.\n\nlist.map(item => <SomeComponent key={...} /> )\n\n\n\n번역\n\nhttps://reactjs-kr.firebaseapp.com/docs/lists-and-keys.html\n[https://reactjs-kr.firebaseapp.com/docs/lists-and-keys.html]\n\n원문\n\nhttps://reactjs.org/docs/lists-and-keys.html\n[https://reactjs.org/docs/lists-and-keys.html]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/248381637"
  },
  {
    "pageContent": "[React Hooks] 1. useMemo\n\n(메모제이션에 대한 기본 개념은 [이큐피디아] 용어 정의\n[/wiki/pages/createpage.action?spaceKey=SW&title=%5B%EC%9D%B4%ED%81%90%ED%94%BC%EB%94%94%EC%95%84%5D%20%EC%9A%A9%EC%96%B4%20%EC%A0%95%EC%9D%98&linkCreation=true&fromPageId=226001024]를\n참고 부탁드립니다)\n\n\n\n\n일반적으로 React의 함수형 컴포넌트는 다음과 같이 작성된다.\n\nReact Component\n\nfunction Jacob({x, y}) {\n\tconst z = lazyLogic(x, y);\n\treturn <div>{z}</div>\n}\n\n\n\n\n이러한 컴포넌트는 앱이 랜더링 될때마다 호출된다. \n\n(기본로직) 컴포넌트 함수가 호출 → 자바스크립트 로직 수행 → HTML 마크업된 UI 리턴\n\n\n\n\n하지만 랜더링이 한번 되고 끝나는게 아니라, 컴포넌트 자신의 상태 변경 또는 부모 컴포넌트의 상태 변경이 일어나 덩달아 함께 렌더링되야 하는\n경우도 있다. \n\n위 함수에서 lazyLogic은 세상에세 제일 느린 함수라고 가정해 보자. 아주 복잡하고 복잡한 로직이다. 그리고 값으로 받는 x, y 값이\n항상 바뀌는게 아니라면 lazyLogic() 함수를 계속 실행해야할 필요가 있을까?\n\n\n\n\n바로 이러한 경우를 메모제이션이라는 개념을 통해 개선할 수 있으며, React hook에서는 v16.8 버전에서부터 기본적으로\n내장돼있는 useMemo로 해결할 수 있다.\n\nusememo는 2개의 인자를 받는데, 첫번째는 결과값을 생성해주는 팩토리 함수이고, 두번째는 결과값을 재활용할 때 기준이 되는 입력값\n배열이다.\n\n그럼 위의 함수를 개선해 보자.\n\nReact Component\n\nimport React, { useMemo } from 'react';\n\nfunction Jacob({x, y}) {\n\tconst z = useMemo(() => lazyLogic(x, y), [x, y]);\n\treturn <div>{z}</div>\n}\n\n→ x, y 값이 이전에 렌더링했을 때와 동일한 경우, 랜더링 때 구했던 결과값을 재활용 한다. \n\n하지만, 이전과 값이 달라졌다면, ` ()=>lazyLogic(x, y) ` 함수를 호출하여 z를 할당해 줍니다.\n\n--------------------------------------------------------------------------------\n\n\n이 글을 마치며, \n\n\n소프트웨어 최적화에는 항상 그에 상응하는 대가가 따르기 마련이다.\n\n성능 최적화를 함에 따라 얻는 이점이 더 많은지 꼭 따져보고 사용해야 한다. \n\n예를 들면, useMemo hook함수를 남용하면, 컴포넌트의 복잡도가 올라가기 때문에 코드를 읽기도 어렵고 유지보수성도 떨어진다. \n\n또한 gc에서 제외되기 때문에 메모리를 더 쓰게된다. (← 추가설명: useMemo가 적용된 레퍼런스를 재활용하기 위해 가비지 컬렉션에서\n제외된다.)\n\n잘 생각해보면 프론트에서 수 초이상 소요되는 로직을 구현하는 일 자체가 흔치 않다. 사용할 일이 많지 않는게 정상이다. \n\n설사 있다고 해도 useEffect 함수 등을 이용해서 비동기로 처리하는 방안이 우선 고려된다. \n\n결론: 무분별한 useMemo를 사용하지 말고, 필요한 경우만 사용하자!\n\n[캡쳐]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/226001024/image2019-10-21_19-7-49.png?api=v2]\n\n참고 URL\n\nhttps://kentcdodds.com/blog/usememo-and-usecallback\n[https://kentcdodds.com/blog/usememo-and-usecallback]\n\nhttps://ko.reactjs.org/docs/hooks-reference.html\n[https://ko.reactjs.org/docs/hooks-reference.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/226001024"
  },
  {
    "pageContent": "[React] 학습\n * [React][학습] Intro\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343796747/React+Intro]\n * [React][학습] Basics\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2351988751/React+Basics]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343993353"
  },
  {
    "pageContent": "[F] Controlled/Uncontrolled Component\n\n\n개요\n\n리액트는 <input>, <textarea>, <select>와 같이 입력받을 수 있는 HTML 폼 요소들을 제어 컴포넌트와 비제어 컴포넌트 두\n가지의 개념으로 구분하고 있다.\n\n이 글에서는 제어, 비제어 컴포넌트가 무엇인 지 소개하고 상황에 따라 어떻게 사용해야 적절한 지 소개하며 글을 마친다.\n\n\n제어 컴포넌트와 비제어 컴포넌트\n\n\n제어 컴포넌트란?\n\n리액트에서 사용자의 입력을 받고자 해봤다면 아래와 같은 코드를 보고 다음과 같이 생각할 수 있을 것이다.\n\n<input type='number' value={count} onChange={handleChange}>\n\n“이 input 요소의 값은 count일 것이고, 변경이 발생할 때마다 handleChange가 호출되겠구나.”\n\n만약 value와 onChange 속성이 없다면 당연히 위와 같은 생각을 할 수 없을 뿐더러 이후 어떠한 값이 될 지 알 수 없다.\n\n\n\n또한 사용자가 값을 바꿀 경우 호출되는 이벤트 핸들러 함수 handleChange에서 count에 대한 작업을 해줘야만 값이 변경되므로\ncount에 대한 작업을 하지 않을 경우에는 입력 폼 요소의 값이 그대로 유지된다는 것을 확신할 수 있다.\n\n\n\n이 상황은 마치 입력 폼 요소가 이벤트 핸들러 외에 다른 누군가에 의해 변경될 수 없도록 제어하고 있는 것 같다.\n\n이렇게 입력 폼 요소의 value 속성을 지정하여 값을 제어할 수 있는 컴포넌트를 제어 컴포넌트라고 한다.\n\n\n비제어 컴포넌트란?\n\n위 제어 컴포넌트의 개념과 반대로 생각하면 쉽다. 입력 폼 요소의 value 속성을 제어하지 않는 것이다.\n\n이러한 경우 별도의 value 속성을 지정해주지 않았으므로 화면에는 DOM에 저장된 데이터 값이 나타내진다\n\n자바스크립트에서 document.getElementById('id').value를 통해 볼 수 있는 그 값이다.\n\n\n\nvalue 속성을 제어하진 않더라도 기본값을 지정해주고 싶은 경우에는 리액트에서 제공하고 있는 defaultValue,\ndefaultChecked 속성을 통해 해결할 수 있으며 default… 속성은 이후 값이 바뀌더라도 화면에는 반영되지 않는다.\n\n\n둘 중 어느 것을 사용하도록 해야하는가?\n\n당연한 답변이겠지만 제어 컴포넌트를 사용하도록 해야하며 리액트 공식 문서에서도 다음과 같이 말하고 있다.\n\n“대부분 경우에 폼을 구현하는데 제어 컴포넌트를 사용하는 것이 좋습니다.”\n\n\n\n이 말은 단순히 값을 제어하고 사용할 수 있도록 하기 위함을 넘어서 리액트의 핵심 개념이 담겨져 있다.\n\n리액트의 핵심 원칙 중 하나는 단일 진실 공급원 [https://ko.wikipedia.org/wiki/단일_진실_공급원]이며 모든 데이터\n요소를 한 곳에서만 제어하도록 하는 설계이다.\n\n이 원칙은 리액트 공식 문서 중 State 끌어올리기\n[https://ko.reactjs.org/docs/lifting-state-up.html#lessons-learned]에서 재차 강조되고 있는\n원칙이며 읽어볼 것을 추천한다.\n\n\n완전한 해결책\n\n리액트 공식 문서에서는 유효성 검사, 방문한 필드 추적 및 폼 제출 처리와 같은 완벽한 해결을 원한다면 Formik\n[https://jaredpalmer.com/formik]이 대중적인 선택 중 하나라고 소개하고 있다.\n\n\n참고\n\n * https://ko.reactjs.org/docs/forms.html\n   [https://ko.reactjs.org/docs/forms.html]\n\n * https://ko.reactjs.org/docs/uncontrolled-components.html\n   [https://ko.reactjs.org/docs/uncontrolled-components.html]\n\n * https://ko.reactjs.org/docs/lifting-state-up.html\n   [https://ko.reactjs.org/docs/lifting-state-up.html]\n\n * https://itnext.io/controlled-vs-uncontrolled-components-in-react-5cd13b2075f9\n   [https://itnext.io/controlled-vs-uncontrolled-components-in-react-5cd13b2075f9]\n\n * https://fjorgedigital.com/insights/blog/the-philosophy-of-react-a-single-source-of-truth/\n   [https://fjorgedigital.com/insights/blog/the-philosophy-of-react-a-single-source-of-truth/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1620443151"
  },
  {
    "pageContent": "[React][학습] Intro\n\n\nWHAT?\n\n * 컴포넌트 기반으로 DOM을 조작 할 수 있도록 도와주는 라이브러리\n   \n   * 다양한 API가 있지만 본질은 이 이상도 이하도 아님.\n\n * JSX 사용할 수 있음. → 선택사항이지만 표현식이 비교적 익숙하므로 많이들 쓴다.\n   \n   * https://ko.reactjs.org/docs/introducing-jsx.html\n     [https://ko.reactjs.org/docs/introducing-jsx.html]\n\n\nREACT ≠ JSX\n\n * React: library\n\n * JSX: syntax\n\n\nJSX, TRANSPILE\n\nhttps://babeljs.io/repl/ [https://babeljs.io/repl/]\n\n<div>Content</div>\n\nReact.createElement(\"div\", null, \"Content\");\n\nReact.createElement(\"div\", {\n  id: \"Test\"\n}, \"Content\");\n\n// === <div id=\"Test\">Content</div>\n\n\n결국 중요한건?\n\n * JSX 문법\n\n * React API\n\n위 두가지만 잘 알면 리액트를 사용함에 있어 어려움이 존재 할 수 없다.\n그래도 어렵다면 자바스크립트나 타입스크립트, 혹은 사용하고 있는 서드파티 라이브러리가 어떻게 동작 하는지 모르는것.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2343796747"
  },
  {
    "pageContent": "[React][학습] Basics\n\n\nCOMPONENT?\n\n * 코드를 캡슐화 하여 의존성을 분리시키고 독립적으로 동작할 수 있도록 만드는것\n\n * 캡슐화가 가능하다면 어떤 형태로 된것도 컴포넌트라 부를 수 있지만, 리액트는 Class/Function 두가지를 이용해 컴포넌트를 렌더링\n   할 수 있게 지원한다.\n\n\nCOMPONENT LIFE CYCLE\n\n크게 보면 대략 아래의 생명주기를 가진다.\n\n * mount\n\n * render / update\n\n * unmount\n\n리액트와 유사한 다른 프레임워크, 라이브러리에서 훨씬 다양한 라이프사이클을 가지더라도 위 세가지를 제외하면 대부분 Syntax sugar와\n다를것이 없다.\n\n\nPROPS VS STATE\n\n컴포넌트가 다루는 값은 크게 두가지 종류가 있다.\n\n * Props? Properties.\n   \n   * 말 그대로 컴포넌트의 속성. 외부로부터 주입받는 값으로 보면 된다.\n   \n   * props는 레퍼런스가 바뀔수도 있고, 안바뀔수도 있다. 부모가 주입하기 나름.\n   \n   * 기본적으로 컴포넌트는 값을 props로 주입받고, props로 노출한다.\n   \n   * 절대 컴포넌트 안에서 변경하면 안된다.\n     \n     * why? 주입되는 값의 레퍼런스에 의존해 렌더링 여부를 결정하는 리액트 특성상 컴포넌트 안에서 props를 직접 변경하면\n       immutable하지 않게 되어 의도한대로 렌더링되지 않는다.\n\n * State?\n   \n   * 말 그대로 상태. 컴포넌트 내부적으로 다루는 값이다.\n   \n   * 외부에서 주입받는 props는 상태처럼 취급할 수 있지만, 상태는 props로 취급할 수 없다.\n   \n   * 이 값만 컴포넌트 내부적으로 변경할 수 있다.\n\n * 어떤 차이가 있을까?\n   \n   * https://ko.reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props\n     [https://ko.reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props]\n   \n   * https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\n     [https://github.com/uberVU/react-guide/blob/master/props-vs-state.md]\n\n\nFUNCTION COMPONENT?\n\n * Functional component 🙅‍♂️ 함수형 컴포넌트 🙅‍♂️\n   \n   * 공식 문서 [https://reactjs.org/docs/components-and-props.html]에서도 functional이라고\n     표현하지 않는다. (한국어 페이지에서 함수형이라고 표현하지도 않는다)\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2351988751/image-20220304-030341.png?api=v2]\n     \n     functional component라고 치면 일치하는 문서가 없다. (한국어 페이지에서 함수형으로 쳐봐도 없다)\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2351988751/image-20220304-030400.png?api=v2]\n     \n     function component라고 치면 뭐가 많이 나온다. (한국어 페이지에서도 많이 나온다.)\n\n * 그냥 함수인데, 반환 값이 React.createElement 함수의 결과 값(객체)이면 된다.\n\n * 화면이 다시 렌더링 되어야 할 필요가 있을때 마다 전부 다시 평가한다.\n   (Memoization에 의해 일부 또는 전체 생략될 수 있음. 이후 추가 설명)\n\n * 렌더링 할 컴포넌트에 이전과 다른 레퍼런스를 가지는 값을 전달하면 무조건 다시 렌더링 된다.\n   \n   * 리액트에서는 이로 인한 불필요한 렌더링을 막기 위해 Hook 이라는 개념을 이용한 메모이제이션을 적극 활용한다. (useMemo,\n     useCallback, ... 등)\n\n\nCLASS COMPONENT?\n\nFunction component와의 차이점 중 가장 중요한건 단 하나라고 봐도 된다.\n\nClass component는 매번 평가되는 Function component와 다르게 컴포넌트 마운트 때 인스턴스를 생성하고 다시 생성하지\n않는다.\n\n * 화면이 다시 렌더링 되어야 할 필요가 있을때 마다 인스턴스에 있는 render 메서드를 호출한다.\n   \n   * 컴포넌트 내부에서 setState를 호출하거나 컴포넌트 외부에서 주입되는 props가 변경될 때도 포함이다.\n\n * 반드시 필요한 경우가 아니면 사용을 지양한다.\n   \n   * 리액트 공식 문서에서 Class component에 의한 예시가 거의 다 사라졌다.\n     리액트 팀이 아래의 이유로 FC를 권장하는지는 모르겠지만 영향이 없지는 않을것으로 예상한다.\n   \n   * Function component는 Memoized 데이터와 VDOM(Virtual DOM)을 제외하곤 메모리에 저장하지 않지만,\n     Class component는 VDOM을 포함해 렌더링하는 모든 컴포넌트의 인스턴스를 메모리에 저장해야 한다.\n   \n   * Function component가 좀 더 선언적인 구문으로 코드를 작성할 수 있기 때문에 가독성이 좋다고 하는데, 뚜렷한 차별점은\n     아니라고 생각한다.\n\n\nHOW TO RENDER IT?\n\n2023-06-16\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2732982313/2023-06-16]\n\n * React.createElement 의 반환 값은 객체라고 했는데 어떻게 HTML으로 볼 수 있을까?\n\n * ReactDOM.render 함수가 트리 구조의 객체를 HTML로 변환하여 렌더링 해준다.\n   \n   * Virtual DOM(VDOM)도 React.createElement 에 의해 생성된 객체를 메모리에 저장해두고 새로 렌더링하기 전에\n     비교하는것이다.\n     (애초에 비교하기 쉬운 구조로 설계한다)\n   \n   * React 공식 문서 [https://ko.reactjs.org/docs/faq-internals.html]에서 말하는 “가상\"적인\n     표현이 createElement 함수의 반환 값이라고 이해하면 된다.\n   \n   * https://github.com/Matt-Esch/virtual-dom\n     [https://github.com/Matt-Esch/virtual-dom] → 참고하면 컨셉을 이해할 수 있다.\n\n * JSX를 제외하고 보면 더 간단하다. [https://ko.reactjs.org/docs/react-without-jsx.html]\n   \n   * 결국 ReactDOM이 렌더링에 관련된 대부분의 요소를 제어해준다고 보면 된다.\n\n[/wiki/download/attachments/2351988751/react-render-stepbystep.png?api=v2]\n\n\nCONCLUSION\n\n * 컴포넌트가 뭔지 이해할 수 있다.\n\n * 컴포넌트의 라이프 사이클을 알고, 활용할 수 있다.\n\n * 리액트로 만든 컴포넌트가 브라우저에 렌더링 될 수 있는 원리를 이해할 수 있다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2351988751"
  },
  {
    "pageContent": "[OJT][FE][Redux] 1. Reducer & Store\n\n\n리듀서(REDUCER)란?\n\n→ 리듀서는 이전 상태와 동작을 받아 새 상태를 리턴한다.\n\n→ 리듀서는 반드시 순수 함수여야 한다. 이를테면 데이터베이스 호출이나 HTTP 호출 등 외부의 데이터 구조를 변형하는 호출은 허용되지 않는다.\n\n→ 리듀서는 항상 현재 상태를 '읽기 전용'으로 다룬다. 기존 상태를 변경하지는 않지만 새 상태를 리턴은 할 수 있다. \n\n\n\n\n\n리듀서가 포함하고 있는 세 가지.\n\n 1. 할 일을 정의하는 Action(인수는 옵션)\n 2. 애플리케이션의 모든 데이터를 저장하는 state\n 3. state와 Action을 받아 새 상태를 리턴하는 Reducer\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n첫 리듀서 만들기\n\n→ 가장 단순한 리듀서는 상태 자체만을 리턴한다(identity reducer라고 한다).\n\n\n\n\nAction 인터페이스\n\ninterface Action {\n    type: string;\n    payload?: any;    \n}\n\n→ payload는 종류와 상관 없이 객체가 될 수 있다. \n\nReducer 인터페이스\n\ninterface Reducer<T> {\n        (state: T, action: Action): T;\n}\n\n→ Reducer에는 타입 T의 state와 Action을 받아 새 state를 리턴하는 함수가 포함된다.\n\nIdentity Reducer\n\nlet reducer: Reducer<number> = (state: number, action: Action) => {\n\treturn state;\n};\n\nreducer.ts Test\n\nconsole.log(reducer(0, null)); // 0\n\n→ 의미는 없지만, 여기서 알 수 있는 것은 리듀서는 기본적으로 원래 상태를 리턴한다.\n\n--------------------------------------------------------------------------------\n\n\nSTATE 변경하기\n\n→ 리덕스에서는 상태를 변경할 수 없다는 사실을 잊지 말자.\n\nAction 생성!\n\nlet incrementAction: Action = { type: 'INCREMENT' }\nlet decrementAction: Action = { type: 'DECREMENT' }\n\n\n\n\nReducer 생성\n\nlet reducer: Reducer<number> = (state: number, action: Action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default: \n            return state;\n    }\n}\n\n→ switch의 default case에서는 원래 state를 리턴한다. 그래야 알 수 없는 동작이 전달되어도 오류가 출력되지 않고 원래\nstate가 변경되지 않는다.\n\n\nPAYLOAD 파라미터 사용하기\n\n→ 변경하는 내용을 설명하기 위해 payload 파라미터를 사용했음\n\nReducer 생성\n\n...\nlet plusSevenAction: Action = {type: 'PLUS', payload: 7};\n\nlet reducer: Reducer<number> = (state: number, action: Action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n\t\tcase 'PLUS':\n\t\t\treturn state + action.payload;\n        default: \n            return state;\n    }\n}\n\nconsole.log(reducer(3, {type: 'PLUS', payload: 7})); // 10\nconsole.log(reducer(3, {type: 'PLUS', payload: 9000})); // 9003\nconsole.log(reducer(3, {type: 'PLUS', payload: -2})); // 1\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n상태 저장하기\n\n→ 리듀서는 순수한 함수이며, 외부 환경을 변경하지 않는다. 문제는 앱에서 모든 것이 변경된다는 점이다. 즉 상태는 변화하고 앱 어딘가에서는 새\n상태를 유지하고 있어야 한다.\n\n→ 리덕스에서는 상태를 저장소(store)에 보관한다. 저장소는 리듀서를 실행하여 새 상태를 유지할 책임을 진다.\n\n\n\n\nstore 구현하기\n\nclass Store<T> {\n    private _state: T;\n\n    constructor(\n        private reducer: Reducer<T>,\n                initialState: T\n    ){\n        this._state = initialState;\n    }\n\n    getState(): T {\n        return this._state;\n    }\n\n    dispatch(action: Action): void {\n        this._state = this.reducer(this._state, action);\n    }\n}\n\n→ constructor에서는 _state를 초기 상태로 설정했다.\n\n→ getState()는 단순히 현재 _state를 리턴한다.\n\n→ dispatch는 동작을 받아 이를 리듀서로 보낸 뒤 _state의 값을 리턴값으로 업데이트한다.\n\n\n\n\n→ dispatch는 아무것도 리턴하지 않는다. 저장소의 상태를 '업데이트'할 뿐이다. (리덕스의 중요한 원칙)\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n저장소 사용하기\n\n\n\n\n스토어 사용!\n\nlet store = new Store<number>(reducer, 0);\nconsole.log(store.getState()); // 0\n\nstore.dispatch({type: 'INCREMENT'});\nconsole.log(store.getState()); // 1\n\nstore.dispatch({type: 'INCREMENT'});\nconsole.log(store.getState()); // 2\n\nstore.dispatch({type: 'DECREMENT'});\nconsole.log(store.getState()); // 1\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n옵저버(OBSERVER) 패턴 구현하기 - SUBSCRIBE \n\n→ 앞에 예시에서는 상태 변화를 알려면 store.getState()가 필요하다. 이를 개선하기 위해 옵저버 패턴을 구현해 보겠다. 모든 변화를\n구독하는 콜백함수를 등록할 것이다.\n\n→ 동작 과정 \n\n 1. subscribe를 사용하여 리스너(listener) 함수를 등록한다.\n 2. dispatch가 호출되면 모든 리스너를 반복 호출한다. 이는 상태가 변경되었다는 알림이다.\n\n\n\n\n스토어 업그레이드!\n\n// 리스너 콜백함수 인터페이스\ninterface ListenerCallback {\n    (): void;\n}\n\n// '구독 해지' 함수용 인터페이스\ninterface UnsubscribeCallback {\n    (): void;\n}\n\nclass Store<T> {\n    private _state: T;\n    private _listeners: ListenerCallback[] = [];\n\n    constructor(\n        private reducer: Reducer<T>,\n                initialState: T\n    ){\n        this._state = initialState;\n    }\n\n    getState(): T {\n        return this._state;\n    }\n\n    dispatch(action: Action): void {\n        this._state = this.reducer(this._state, action);\n        this._listeners.forEach((listener: ListenerCallback) => listener()); // 상태가 변경될 때마다 모든 리스너가 호출된다.\n    }\n\n    subscribe(listener: ListenerCallback): UnsubscribeCallback {\n        this._listeners.push(listener);\n        return () => { // '구독할 수 없는' 함수를 리턴한다.\n            this._listeners = this._listeners.filter(l => l !== listener);\n        };\n    }\n}\n\n→ 서브 스크라이브의 결과값이 왜 언서브스크라이브일까요...? (고민중... ) 물론 그러니깐 아래처럼 예제가 나올 수 있는거 같지만,\n...;;\n\n→ 보다보니 RxJS 스터디가 생각나는 이유는..?..\n\n\n\n\nsubscribe 테스트\n\nlet store = new Store<number>(reducer, 0);\nconsole.log(store.getState()); // 0\n\n// 구독 \nlet unsubscribe = store.subscribe(() => {\n    console.log('subscribed: ', store.getState());\n});\n\nstore.dispatch({type: 'INCREMENT'}); // subscribed:  1\nstore.dispatch({type: 'INCREMENT'}); // subscribed:  2\n\nunsubscribe();\nstore.dispatch({type: 'DECREMENT'}); // 로그 안찍힘\n\nconsole.log(store.getState()); // 1  -> 주시하지 않아도 감소가 일어난다. \n\n→ 동작은 여전히 디스패치할 수 있지만 저장소를 요청해야 그 결과를 확인할 수 있다. ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219971672"
  },
  {
    "pageContent": "[OJT][FE][Redux] 2. 몇 가지 개념들\n\n\n스토어\n\n→ 애플리케이션의 상태(state)를 가지고 있는 곳\n\n→ createStore라는 함수를 가지고 있고 이를 통해 스토어를 생성\n\n→ 스토어는 애플리케이션 내부에서 유일성을 가진다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n플럭스 표준 액션(FLUX STANDARD ACTION)\n[https://github.com/redux-utilities/flux-standard-action]\n\n→ 액션의 형식을 표준화한 것(with 페이스북 개발자)\n\n→ 디자인 목표: Human-friendly, Useful, Simple\n\n\n\n\nPropertyDesctype필수값으로 액션 구분payload액션에 따라 데이터로 사용되는 값, 객체를 자료형으로 사용하는 것이\n일반적error오류를 표현하고 싶은 경우 true로 지정, 이러한 경우 payload에도 Error 객체를 넣어야 한다.metapayload\n외의 정보를 액션에 포함시키고 싶은 경우 사용\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n액션크리에이터(ACTIONCREATOR)\n\n→ 액션을 생성하기 위한 함수\n\n→ 액션크리에이터를 만들어 두면 액션 테스트를 쉽게 할 수 있으며, 실제로 액션을 사용하는 경우에도 직감적으로 쉽게 사용할 수 있다.\n\nActionCreator\n\nconst addTask = task => ({\n    type: 'ADD_TASK',\n    payload: {\n        task\n    }\n})\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nCREATESTORE(REDUCER, [PRELOADEDSTATE], [ENHANCER])\n\n→ 이름 그대로 스토어 생성때 사용\n\n→ 첫번째 매겨변수에는 리듀서를 전달\n\n→ 4개의 메서드가 들어있음(dispatch, subscribe, getState, replaceReducer)\n\n\nDISPATCH\n\n→ 액션을 발행함 \n\nDispatch\n\nstore.dispatch(addTask('따릉이로 한강까지');\n\n→ ADD_Task라는 Type을 가진 액션이 발행되어 리듀서에 의해 상태가 변함\n\n\n\n\n\nGETSTATE\n\n→ 스토어의 현재 상태를 확인할 수 있음\n\ngetState\n\nconsole.log(store.getState());\n//{\n//\ttasks: ['따릉이로 한강까지']\n//}\n\n\n\n\n\nSUBSCRIBE\n\n→ 스토어의 상태가 변경될 때 호출할 콜백함수를 지정할 수 있음\n\nSubscribe\n\nimport { createStore } from 'redux';\n\nconst initialState = {\n    tasks : []\n};\n\nfunction tasksReducer(state=initialState, action) {\n    switch(action.type) {\n        case 'ADD_TASK':\n            return {\n                ...state,\n                tasks: state.tasks.concat([action.payload.task])\n            };\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(tasksReducer);\n\nfunction handleChange() {\n    console.log(store.getState());\n}\n\nconst unsubscribe = store.subscribe(handleChange);\n\nconst addTask = task => ({\n    type: 'ADD_TASK',\n    payload: {\n        task\n    }\n});\n\nstore.dispatch(addTask('따릉이로 한강까지'));\n\n→ cf) react-redux에서는 subscribe 관련 기능을 알아서 처리해 줌\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513482/image2019-10-13_10-50-39.png?api=v2]\n\n\n\n\n\nREPLACEREDUCER\n\n→ createStore로 스토어를 생성할 때 연결되는 리듀서는 하나!\n\n→ 하지만, 애플리케이션의 규모가 커질수록 리듀서를 분할하고 싶은 경우가 발생하며, 여러 개로 분할한 리듀서를 하나로 묶어 스토어에 연결할 수\n있게 conbineReducers라는 메서드를 많이 사용한다.\n\n→ 그런데 분할한 리듀서를 동적으로 읽어 들이고 싶은 경우 스토어에 연결된 리듀서를 이후 다른 리듀서로 변경해야한다. 이때 사용되는\nreplaceReducer!\n\n→ 특별한 이슈가 없다면 combineReducer를 사용해 리듀서를 하나씩 연결해서 사용하며, 리듀서를 동적으로 로드하고 싶은 경우는\nreplaceReducer를 사용한다.\n\n\n\n\nex) \"태스크를 추가하는 리듀서'와 '태스크를 리셋하는 리듀서'로 분할\n\nreplaceReducer 원본 펼치기\n\nimport { createStore, replaceReducer } from \"redux\";\n\nconst initialState = {\n  tasks: []\n};\n\nfunction addReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"ADD_TASK\":\n      return {\n        ...state,\n        tasks: state.tasks.concat([action.payload.task])\n      };\n    default:\n      return state;\n  }\n}\n\nfunction resetReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"RESET_TASK\":\n      return {\n        ...state,\n        tasks: []\n      };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(addReducer);\n\nfunction handleChange() {\n  console.log(store.getState());\n}\n\nconst unsubscribe = store.subscribe(handleChange);\n\nconst addTask = task => ({\n  type: \"ADD_TASK\",\n  payload: {\n    task\n  }\n});\n\nstore.dispatch(addTask(\"따릉이로 한강까지\"));\n// -------------------------------------------\nstore.replaceReducer(resetReducer);\n\nconst resetTask = () => ({\n  type: \"RESET_TASK\"\n});\n\nstore.dispatch(resetTask());\n\n\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513482/image2019-10-13_11-2-58.png?api=v2]\n\n→ resetReducer로 변경한다고 스토어의 상태가 변환하는 것은 아니므로 이전 태스크가 남아 있는다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513482/image2019-10-13_11-5-33.png?api=v2]\n\n→ 스토어에 연결돼 있는 리듀서의 변경사항만 적용\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nCOMBINEREDUCER\n\n→ 리덕스가 제공하는 메서드로 각 리듀서를 하나로 모아주는 역할\n\n→ 애플리케이션의 규모가 커지면 하나의 리듀서로 모든 것을 처리하는 것이 굉장히 복잡하고 어렵다, 특히 여러개의 엔티티를 사용하는 애플리케이션의\n경우 이러한 분할은 거의 필수라고 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513482/image2019-10-13_11-14-33.png?api=v2]https://medium.com/@davidtheclark/redux-for-state-management-in-large-web-apps-17b115a1b3\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219513482/image2019-10-13_11-27-18.png?api=v2]\n\n\n\n\n참고 URL\n\nhttps://redux.js.org/faq/code-structure\n[https://redux.js.org/faq/code-structure]\n\nhttps://d2.naver.com/helloworld/1848131\n[https://d2.naver.com/helloworld/1848131]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219513482"
  },
  {
    "pageContent": "ARIA\n\nhttps://developer.mozilla.org/ko/docs/Web/Accessibility/ARIA\n[https://developer.mozilla.org/ko/docs/Web/Accessibility/ARIA]\n\n\n스크립트 처리된 위젯을 위한 ARIA\n\n> <input>, <button> 등 내장 요소는 기본적으로 키보드를 지원합니다. <div>와 ARIA로 특정 요소를 흉내 낸다면, 그 위젯도\n> 키보드를 지원하도록 해야 합니다.\n\nARIA 어트리뷰트는 스크린 리더기에 특정 의미를 암시 할 수 있지만 실제 동작을 구현해주는건 아니므로 자바스크립트로 직접 구현해야 한다.\n\n * https://stackblitz.com/edit/react-ts-zbvhnk?file=App.tsx\n   [https://stackblitz.com/edit/react-ts-zbvhnk?file=App.tsx]\n   키보드로 제어 가능한 체크 리스트는 위와 같이 구현할 수 있다.\n\n * https://nuli.navercorp.com/community/article/1133011\n   [https://nuli.navercorp.com/community/article/1133011]\n   자동완성의 경우에 실제로는 검색 입력창에만 포커스가 있지만, 자동 완성 선택창에도 포커스가 있는것을 알려야 하기 때문에\n   aria-activedescendant 와 같은 속성을 이용해 특정 요소에 포커스가 이동한것 처럼 표시해줘야 한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2457862177"
  },
  {
    "pageContent": "[OJT] UML\n\nhttps://en.wikipedia.org/wiki/Class_diagram\n[https://en.wikipedia.org/wiki/Class_diagram]\n\n\n\nAggregation vs Composition\n[https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-aggregation-vs-composition/]\n\n> Composition Example:\n> \n> We should be more specific and use the composition link in cases where in\n> addition to the part-of relationship between Class A and Class B - there's a\n> strong lifecycle dependency between the two, meaning that when Class A is\n> deleted then Class B is also deleted as a result\n\n\n\n\n> Aggregation Example:\n> \n> It's important to note that the aggregation link doesn't state in any way that\n> Class A owns Class B nor that there's a parent-child relationship (when parent\n> deleted all its child's are being deleted as a result) between the two.\n> Actually, quite the opposite! The aggregation link is usually used to stress\n> the point that Class A instance is not the exclusive container of Class B\n> instance, as in fact the same Class B instance has another container/s.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/639501278"
  },
  {
    "pageContent": "[OJT] DDD (Domain-driven design)\n\n이 문서는 이큐브랩에서의 DDD 를 정의한다.\n\n아직 우리의 로직은 엄청나게 복잡하지 않기 때문에 DDD 원칙을 충실하게 따르려고 하면 오버 엔지니어링이 된다.\n\n그래서 DDD 원칙을 따르되 적당한 선에서 타협한다.\n\n * 먼저 봐야 할 자료\n * DDD 설계 원칙\n * DDD 구현\n * Intermediate\n * Advanced\n\n\n먼저 봐야 할 자료\n\nDDD Lite@Spring [https://www.youtube.com/watch?v=TdyOH1xZpT8&feature=youtu.be]\n\nTactical Domain-Driven Design\n[https://vaadin.com/learn/tutorials/ddd/tactical_domain_driven_design]\n\n마이크로 서비스 도메인 모델 디자인\n[https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-domain-model]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174882844/image-20200613-091014.png?api=v2]\n\n\nDDD 설계 원칙\n\nEffective Aggregate Design Part I: Modeling a Single Aggregate\n[https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf]\n\nEffective Aggregate Design Part II: Making Aggregates Work Together\n[https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_2.pdf]\n\nEffective Aggregate Design Part III: Gaining Insight Through Discovery\n[https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_3.pdf]\n\n\nDDD 구현\n\nState or Events? Which Shall I Keep? [https://youtu.be/r7AGQsM7ncA]\n\n * Java, Kafka 를 이용한 DDD 구현\n\n\nINTERMEDIATE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174882844/image-20220221-034820.png?api=v2]\n\n\nADVANCED\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174882844/image-20210707-023357.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174882844/image-20210707-023534.png?api=v2]\n\nDomain Modeling Made Functional [https://www.youtube.com/watch?v=Up7LcbGZFuo]\n\nGetting Started with Redux\n[https://egghead.io/courses/getting-started-with-redux]\n\n * Live React: Hot Reloading with Time Travel\n   [https://www.youtube.com/watch?v=xsSnOQynTHs]\n\n * State or Events? Which Shall I Keep? [https://youtu.be/r7AGQsM7ncA] 를 보고 나서 볼\n   것.\n\nhttps://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/\n[https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/]\n\nhttps://enterprisecraftsmanship.com/posts/collections-primitive-obsession/\n[https://enterprisecraftsmanship.com/posts/collections-primitive-obsession/]\n\nhttps://www.youtube.com/playlist?list=PLa7VYi0yPIH145SVtPoh3Efv8xZ1ehUYy\n[https://www.youtube.com/playlist?list=PLa7VYi0yPIH145SVtPoh3Efv8xZ1ehUYy]\n\n * Event Sourcing | ViewModel Composition\n   [https://github.com/nowakprojects/SelfImprovement/issues/3853]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882844"
  },
  {
    "pageContent": "[OJT] Server\nArchitecture[https://ecubelabs.atlassian.net/wiki/download/attachments/2070708225/image-20211008-042727.png?api=v2]\n\nhttps://www.reactivemanifesto.org/ [https://www.reactivemanifesto.org/]\n\n\n\n * 현재 우리 아키텍처랑 가장 유사함\n\n\n\n\n\nhttps://itnext.io/how-to-build-an-event-driven-asp-net-core-microservice-architecture-e0ef2976f33f\n[https://itnext.io/how-to-build-an-event-driven-asp-net-core-microservice-architecture-e0ef2976f33f]\n\n * 원칙대로하면 비슷한 데이터가 중복되어서 저장될 수 밖에 없음\n   \n   * = 각 bounded context 별로 원하는 데이터를 저장해야 하기 때문\n\n * 마이크로서비스는 이런 데이터 중복을 감수하더라도 시스템간 결합도를 떨어뜨리는 것에 더 초점을 맞춤\n   \n   * 시스템간 결합도를 떨어뜨려서 오류 전파 방지\n   \n   * 시스템간 데이터 무결성을 확보하는 것은 숙제\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2070708225"
  },
  {
    "pageContent": "[OJT] Functional Architecture",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2337996801"
  },
  {
    "pageContent": "[OJT] libuv\n\nNode.js가 이벤트 기반으로 처리를 할 수 있도록 돕는 라이브러리.\n각종 비동기 IO를 담당하며 우리가 아는 이벤트 루프도 libuv에 속한다.\n\nhttp://docs.libuv.org/en/v1.x/ [http://docs.libuv.org/en/v1.x/]\n\nV8에 이벤트 루프 포함 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nV8은 단순히 자바스크립트를 더 빠르게 실행할 수 있도록 하는 고성능 엔진이다.\nhttps://youtu.be/VJag_H2Cosc?t=227 [https://youtu.be/VJag_H2Cosc?t=227] 참고\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2334195748"
  },
  {
    "pageContent": "[OJT][Node.js] Error Handling in Koa\n\n\n\n\nERP-API ERROR HANDLING\n\nerp-api 에는 src/middlewarers/error-handlers.ts 에 에러 핸들링 함수가 존재합니다.\n\nimport { Context } from 'koa';\nimport { ValidationError } from '@hapi/joi';\nimport { isBoom } from '@hapi/boom';\nimport { ResponseError } from '../lib/response/error';\nimport { createLogger } from '../lib/logger';\n\nconst logger = createLogger();\n\ninterface TransformResponse {\n    status: number;\n    body: ResponseError;\n}\n\nconst isJoi = (err: any): err is ValidationError => Boolean(err.isJoi);\n\nconst transformResponse = (err: Error): TransformResponse => {\n    const rs: TransformResponse = {\n        status: 500,\n        body: {\n            errorMessage: '',\n        },\n    };\n    if (isBoom(err)) {\n        const { statusCode } = err.output;\n        const { errorMessage } = err.data || ({} as any);\n        rs.status = statusCode;\n        rs.body = {\n            errorMessage: errorMessage || `Something went wrong and we couldn't complete your request.`, // TODO: 메시지 정리\n        };\n    } else if (isJoi(err)) {\n        // Valdation Error\n        rs.status = 400;\n        rs.body = {\n            errorMessage:\n                // TODO: 환경 설정 값 하나의 파일에서 받아오자.\n                process.env.NODE_ENV !== 'production'\n                    ? `Invalid request.\\nPlease check the request value.\\n${err.message}` // NOTE: 개발 환경에서는 뭐가 문젠지 그대로 보여주는게 낫지 않을까 싶어서 추가.\n                    : 'Invalid request.\\nPlease check the request value.', // NOTE: 운영 환경에서는 이상한 내용이 나가면 안된다.\n        };\n    } else {\n        rs.status = 500;\n        rs.body = {\n            errorMessage: 'An unexpected error has occurred. Please try again.', // TODO: unexpected_error\n        };\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n        console.error('[Error Handler]', err);\n    }\n\n    return rs;\n};\n\nexport const errorHandlerMiddleware = async (ctx: Context, next: () => Promise<any>) => {\n    try {\n        await next();\n    } catch (err) {\n        logger.error(err.message, {\n            txId: ctx.state && ctx.state.txId,\n            err,\n        });\n\n        const response = transformResponse(err);\n        ctx.status = response.status;\n        const { errorMessage } = response.body;\n        ctx.body = {\n            errorMessage: errorMessage || 'An unexpected error has occurred. Please try again.', // TODO: unexpected_error\n        };\n    }\n};\n\n\nKoa에서 에러를 catch할 경우 errorHandlerMiddleware 가 호출되고 해당 에러를 transformResponse 에서\n클라이언트에게 보내줄 에러로 변환시켜 클라이언트에게 응답합니다.\n\ntransformResponse은 위에서부터 @hapi/boom 에러 처리, Joi 에러 처리 그리고 나머지 에러 처리입니다.\n\n@hapi/boom으로 발생한 에러는 status code를 그대로 처리, Joi 로 발생한 에러는 400 Bad Request로 처리, 그 외\n발생한 에러는 500 Internal Server Error로 처리합니다.\n\n에러가 발생했을 때 클라이언트에게 응답할 body의 타입은 src/lib/response/error.ts 에 정의되어있습니다.\n\nexport const responseErrorSchema = Joi.object({\n    errorMessage: Joi.string().required(), // error.message를 기본 값으로 하더라도 response로 나갈땐 결국 항상 존재해야 함\n}).description('Error');\n\nexport interface ResponseError {\n    errorMessage?: string;\n}\n\n\n\n이 에러 핸들링 함수는 Koa 가 오류를 catch 해야만 호출되어 수행됩니다. res.sendStatus(4XX,5XX)과 같은 에러 처리는\n단순히 상태 코드만 반환하기 때문에 오류를 catch 하지 못합니다.\n\n    let { idx } = req.body;\n    if (!idx) {\n        return res.sendStatus(400).end();\n    }\n\n3번째 줄은 400 에러 코드만 반환하고 Koa 가 오류를 catch 하지 못하여 상단의 에러 핸들링 함수가 호출되지 못하고\nlogger.error를 통한 에러 로깅을 하지 않습니다. 이를 @hapi/boom 라이브러리 함수를 통해 아래와 같이 에러를 보내는 식으로\n해결합니다.\n\n    let { idx } = req.body;\n    if (!idx) {\n        throw badRequest('invalid or undefined param');\n    }\n\n\n\nKoa 가 어떤 식으로 에러 핸들링 하는지에 대한 자세한 내용은 밑의 공식문서를 참고하시면 됩니다.\n\n\n참고자료\n\n * https://github.com/koajs/koa/blob/master/docs/error-handling.md\n   [https://github.com/koajs/koa/blob/master/docs/error-handling.md]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/710738065"
  },
  {
    "pageContent": "[OJT] Security\n\n해싱, 해시함수, 해시테이블\n[https://ratsgo.github.io/data%20structure&algorithm/2017/10/25/hash/]\n\nAES 와 SHA 차이 [https://brownbears.tistory.com/73]\n\nJWT (JSON Web Token) [https://velopert.com/2389]\n\nPKI (Public Key Infrastructure)\n[https://ko.wikipedia.org/wiki/%EA%B3%B5%EA%B0%9C_%ED%82%A4_%EA%B8%B0%EB%B0%98_%EA%B5%AC%EC%A1%B0]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611180"
  },
  {
    "pageContent": "[OJT] RDB\n\nhttps://towardsdatascience.com/10-sql-operations-for-80-of-your-data-manipulation-7461c56e25f4\n[https://towardsdatascience.com/10-sql-operations-for-80-of-your-data-manipulation-7461c56e25f4]\n\n * SQL 기본\n\nSQL 트랜잭션 - 믿는 도끼에 발등 찍힌다\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/175964416/SQL+-]\n\nhttps://sqlbolt.com/ [https://sqlbolt.com/]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/286884205"
  },
  {
    "pageContent": "[OJT] Elasticsearch\n\n\n\n\n공식 문서\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html]\n\n\nWHAT IS ELASTICSEARCH?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2576384036/es.png?api=v2]\n\n * Apache Lucene(아파치 루씬) 기반의 java 오픈소스 분산 검색 엔진\n\n * 방대한 양의 데이터를 신속하고 거의 실시간으로 저장, 검색, 분석 가능\n\n\n장점\n\n 1. 오픈소스 검색 엔진이기 때문에 무료로 사용 가능하다.\n\n 2. 역색인을 이용해 방대한 양의 데이터를 신속하게 처리가 가능하다.\n\n\n단점\n\n 1. 진입장벽이 있다.\n\n 2. Document 간의 조인을 수행할 수 없다. (두 번 쿼리로 해결은 가능)\n\n 3. 트렌잭션이 제공되지 않는다.\n\n 4. ‘실시간(Real Time)' 처리 불가능\n\n 5. 진정한 의미의 업데이트를 지원하지 않는다. (실제로는 delete → insert 과정으로 업데이트 됨)\n\n\n\n\nELASTICSEARCH VS RDBMS\n\nElasticsearch\n\nRDBMS\n\nmapping\n\nschema\n\nindex\n\ndatabase\n\ntype (deprecated)\n\ntable\n\ndocument\n\nrow\n\nfield\n\ncolumn\n\npartition\n\nshard\n\n이 중에 우리가 중점적으로 보아야 하는 것은 index, document, mapping 정도이다.\n\n\n\nElasticsearch\n\nRDBMS\n\n스키마 없음\n\n스키마 존재\n\n역색인 자료 구조\n\n인덱스 자료 구조\n\n검색 엔진\n\n데이터 저장소\n\n\n\n\nELASTICSEARCH CRUD\n\nElasticsearch\n\nRDBMS\n\nCRUD\n\nGET\n\nSELECT\n\nREAD\n\nPUT\n\nUPDATE\n\nUPDATE\n\nPOST\n\nINSERT\n\nCREATE\n\nDELETE\n\nDELETE\n\nDELETE\n\n\n\n\n\n\n왜 엘라스틱 서치가 더 빠를까?\n\n * 데이터를 저장하고 있는 구조 자체가 다르다. (역색인 구조)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2576384036/esvsrdb.jpeg?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2576384036/%E1%84%86%E1%85%A9%E1%86%A8%E1%84%8E%E1%85%A1.png?api=v2]\n\n\n\n좌 : 색인 구조(문서에서 키워드를 찾아 보기 쉽도록 정렬 및 나열한 목록)\n\n우 : 역색인 구조(키워드를 통해 문서를 찾아내는 방식)\n\n\n\n\n그럼 엘라스틱 서치를 쓸 일이 뭐가 있을까?\n\n 1. 관계형 데이터베이스는 단순 텍스트 매칭에 대한 검색만을 제공\n    \n    * MySQL 최신 버전에서 n-gram 기반의 Full-text 검색을 지원하지만, 한글 검색의 경우에 아직 많이 빈약하다고 한다.\n\n 2. 텍스트를 여러 단어로 변형하거나 텍스트의 특질을 이용한 동의어나 유의어를 활용한 검색이 가능\n\n 3. 엘라스틱서치에서는 관계형 데이터베이스에서 불가능한 비정형 데이터의 색인과 검색이 가능\n\n 4. 엘라스틱서치에서는 형태소 분석을 통한 자연어 처리가 가능\n    \n    * 엘라스틱서치는 다양한 형태소 분석 플러그인을 제공\n\n 5. 역색인 지원으로 매우 빠른 검색이 가능",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2576384036"
  },
  {
    "pageContent": "[OJT] NoSQL\n\nSQL (RDB) 가 아닌 DB 는 모두 NoSQL.\n\n\n\nhttps://engineering.kablamo.com.au/posts/2021/memcached-vs-redis-whats-the-difference\n[https://engineering.kablamo.com.au/posts/2021/memcached-vs-redis-whats-the-difference]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2219966469"
  },
  {
    "pageContent": "[OJT] REST API\n\nREST API 이해와 설계 #1 개념 소개 [http://bcho.tistory.com/953]\n\nREST API 이해와 설계 #2 API 설계 가이드 [http://bcho.tistory.com/954]\n\nREST API 이해와 설계 #3 API 보안 [http://bcho.tistory.com/955]\n\nREST API 디자인 가이드 [https://bcho.tistory.com/914]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1390084114"
  },
  {
    "pageContent": "[OJT] GraphQL\n\n\n공식문서\n\nhttps://graphql.org/ [https://graphql.org/]\n\n\nGRAPHQL?\n\n * Facebook 내에서 사용하기 위해 개발 되었다가 2015년 공개된 쿼리 언어. 이후 오픈소스로 배포\n\n * 클라이언트가 필요로 하는 데이터의 구조와 양을 정확하게 지정할 수 있다\n\n * Overfetching, Underfetching을 방지하고 네트워크 트래픽을 최적화 할 수 있다\n\n\n탄생배경\n\n * GraphQL이 왜 생겨나게 되었고 어떤문제를 해결하기 위해 존재하는지에 대해 알면 기술을 어떻게 이용해야하는지 이해할 수 있다\n\n * https://www.youtube.com/watch?v=783ccP__No8&t=3s\n   [https://www.youtube.com/watch?v=783ccP__No8&t=3s]\n\n * Facebook에서 내부적으로 사용되던 데이터 플랫폼의 문제점을 해결하고자 시작되었다\n\n * 기존의 RESTful API로 데이터를 제공하던 방식에서 발생하는 불만족스러운 점들이 GraphQL의 개발 동기가 되었다\n\n\nRESTFUL API의 단점\n\n * Overfetching과 Underfetching: Restful API에서는 클라이언트가 필요로 하는 데이터보다 더 많은 데이터를\n   받거나, 필요한 데이터를 얻기 위해 여러번의 요청을 보내야 하는 경우가 있다. 이로 인해 불필요한 데이터 트래픽이 발생하고 성능과 효율성에\n   문제가 생길 수 있다\n\n/users \n\nres: [{    // 클라이언트에서 user의 이름만 필요한 경우에도 user에 대한 모든 응답값을 overfetching 해야한다\n  id,\n  name,\n  address,\n  phoneNumber\n}]\n\n/payment + /user/id\n\nres: {    // 클라이언트에서 payment 정보와 해당 payment를 이행한 사람에 대한 정보가 필요. 두개의 엔드포인트에서 underfetching한 경우.\n  id,\n  paymentMethod,\n  amount,\n  dueDate,\n  userId,\n  userName,\n  userPhoneNumber\n}\n\n * 여러 엔드포인트: RESTful API에서는 각 리소스마다 별도의 엔드포인트가 필요하다. 따라서 여러 개의 엔드포인트를 호출해야 하는\n   경우가 생기며, 이로 인해 여러번의 네트워크 라운드트립이 필요하게 된다.\n\n * 버전 관리의 어려움: API를 업데이트할 때마다 새로운 버전을 생성하여 관리해야 하는 번거로움이 있다. (그렇지 않으면 기존 API를\n   사용하던 모든 클라이언트들이 에러를 경험하게 될 것이다)\n\n * 복잡한 데이터 요구사항: 애플리케이션에서 필요로 하는 복잡한 데이터 요구사항을 충족시키기 위해 여러번의 요청과 응답이 필요하다\n\n\nAPOLLO SERVER\n\n * 공식문서 https://www.apollographql.com/docs/apollo-server/\n   [https://www.apollographql.com/docs/apollo-server/]\n\n * GraphQL은 수많은 커뮤니티의 서포트 아래에 여러 언어로 지원되고 있다 (https://graphql.org/code/\n   [https://graphql.org/code/] )\n\n * 그 중 우리는 Apollo Server를 이용한다\n\n * 이유는 GraphQL 서버를 구축하기 위한 다양한 기능과 도구를 제공하고 기존의 Express 미들웨어와 쉽게 통합할 수 있고 공식문서와\n   튜토리얼도 잘 구성되어 있다.\n\n\nTYPEGRAPHQL\n\n * 공식문서 https://typegraphql.com/docs/introduction.html\n   [https://typegraphql.com/docs/introduction.html]\n\n * 우리는 ‘type-graphql’ 패키지를 이용하여 Field 및 Resolver 등을 구현하기로 한다.\n\n * 이유는 타입스크립트로 인한 타입보장과 기존 typeorm 의 엔티티에 데코레이터를 이용해 스키마설정을 함으로써 single source\n   of truth를 구현할 수 있다. + 기타 boiler plate 코드를 많이 줄여준다\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2762932249"
  },
  {
    "pageContent": "[OJT] Kafka\n * Kafka?\n * Architecture\n   * 간단히 알아보기\n * 특징\n * 활용 용도\n * 이큐브랩 Kafka\n   * 관리 콘솔\n   * 관련 이슈\n\n\nKAFKA?\n\n링크드인 사내 프로그램에서 출발하여 정식 Apache 오픈소스로 등록된 분산 이벤트 스트리밍 플랫폼\n\n\nARCHITECTURE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3022356548/image-20230309-083318.png?api=v2]\n\n\n간단히 알아보기\n\n이름\n\n설명\n\n주키퍼(ZooKeeper)\n\n카프카의 메타데이터(metadata) 관리 및 브로커의 정상상태 점검(health check)을 담당합니다.\n\n카프카(Kafka) 또는 카프카 클러스터(Kafka cluster)\n\n아파치 프로젝트 애플리케이션 이름입니다. 여러 대의 브로커를 구성한 클러스터를 의미합니다.\n\n브로커(broker)\n\n카프카 애플리케이션이 설치된 서버 또는 노드를 말합니다.\n\n프로듀서(producer)\n\n카프카로 메시지를 보내는 역할을 하는 클라이언트를 총칭합니다.\n\n컨슈머(consumer)\n\n카프카에서 메시지를 꺼내가는 역할을 하는 클라이언트를 총칭합니다.\n\n토픽(topic)\n\n카프카는 메시지 피드들을 토픽으로 구분하고, 각 토픽의 이름은 카프카 내에서 고유합니다.\n\n파티션(partition)\n\n병렬 처리 및 고성능을 얻기 위해 하나의 토픽을 여러 개로 나눈 것을 말합니다.\n\n세그먼트(segment)\n\n프로듀서가 전송한 실제 메시지가 브로커의 로컬 디스크에 저장되는 파일을 말합니다.\n\n메시지(message) 또는 레코드(record)\n\n프로듀서가 브로커로 전송하거나 컨슈머가 읽어가는 데이터 조각을 말합니다.\n\n\n특징\n\n * Producer와 Consumer의 분리 (Pub / Sub 방식)\n\n * 멀티 Producer, 멀티 Consumer\n\n * Disk에 메시지 저장\n\n * 용이한 확장성\n\n * 분산 처리, 배치 처리 등 다양한 기법을 사용한 높은 성능\n\n\n활용 용도\n\n * 로그 시스템\n\n * Event Driven Architecture\n\n * 메세지 큐\n\n\n이큐브랩 KAFKA\n\n\n관리 콘솔\n\nhttps://kafkaui-stage.ecubelabs.xyz/ [https://kafkaui-stage.ecubelabs.xyz/]\n\n\n관련 이슈\n\nSW-8054 [https://ecubelabs.atlassian.net/browse/SW-8054] - 이슈 세부사항 가져오는 중... 상태\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3022356548"
  },
  {
    "pageContent": "DDD in JS\n\n\n\n * Joi\n * 계층\n   * Presentation\n   * 응용 (application)\n   * 도메인 (domain)\n   * 인프라스트럭처 (infrastructure)\n   * 폴더 구조\n * 도메인\n   * 도메인 모델\n   * 도메인 모델 구현\n     * schema\n     * 모델 class 선언\n       * Identifier\n       * Interface 가 Joi.extractType 으로 추출한 타입을 상속하는 이유\n       * Class 가 schema type 을 직접 구현하지 않는 이유\n     * Ctor (생성자)\n       * ctorType\n         * ctorType 관련 이슈\n       * ctor 런타임 타입 검사\n     * Static factory method\n       * create (객체 생성 static factory method)\n       * of (객체 재구성 static factory method)\n     * Update\n       * updateType\n       * update 런타임 타입 검사\n     * Convention\n   * 도메인 서비스\n   * 레파지토리\n   * 레파지토리 interface 작성\n     * token\n * 응용\n   * 서비스\n   * 서비스 type\n * 인프라스트럭처 (infrastructure)\n   * 레파지토리\n     * save\n       * signature\n     * find\n * 참고\n * ========== 여기 아래는 정리가 안되었으므로 읽어 봤자 노의미 ==========\n * 폴더 구조\n * 레파지토리 interface\n * 레파지토리 구현체 (class)\n * Sample Code\n\n\n\n\n\n\n\nJOI [https://github.com/hapijs/joi]\n\n 1. Joi 를 사용하지 않으면 validation 이 매우 귀찮다\n    \n    // without Joi\n    function (idx: number, name: string, age?: number) {\n        if (!idx || typeof idx !== number) {\n            throw new TypeError()\n        }\n        if (!name || typeof name !== string) {\n            throw new TypeError()\n        }\n        if (age && typeof age !== number) {\n            throw new TypeError()\n        }\n    }\n    \n    // with Joi\n    function (idx: number, name: string, age?: number) {\n        const { error, value } = schema.validate({idx, name, age})\n    }\n    \n    TS 코드간에 잘못된 타입으로 호출하는 경우 컴파일 타임에 검출할 수 있다.\n    하지만 REST API 로 받은 값이나 DB 에서 조회한 값의 타입은 컴파일 타임에 검출할 수 없기 때문에 런타임에도 validation\n    이 필요하다.\n    Joi 를 이용하면 validation 을 쉽게 할 수 있다.\n\n 2. Joi 로 정의한 스키마를 TS 타입으로 추출할 수 있다\n\n\n계층\n\n\n\n\nDDDDDE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/39467265-2ecb8d9c-4d68-11e8-9e48-88dc1c78e67a.png?api=v2][http://www.joaopauloseixas.com/howtodoit.net/wp-content/uploads/2011/04/Domain-Driven-Design-Overview-of-a-Layered-Architecture.png]\n\n[/wiki/download/attachments/137855128/ddd-in-ecubelabs.png?api=v2]\n\n\n\n\n\nPRESENTATION\n\n * DDD: user interface\n * DDE: route controller\n\nAPI 계층\n\n이 계층은 단순히 service 를 호출하는 계층이어야 한다\n\n\n\n\n이 계층에서 작성된 transaction 관련 코드를 service 로 옮기고 싶다\n\nWhy?\n\nPUT client/1\n\nPUT /mobile/v1/client2\n\n지금 endpoint 가 두개인데 로직은 service 로 모으면 되지만 transaction 은 서로 다른 route controller 의\n담당이 되기 때문에\n\n\n응용 (APPLICATION)\n\nrepository 를 이용해 domain object instantiate\n\nrepository 를 이용해 domain object persist\n\n서로 다른 domain object 를 이용한 로직 구현\n\n\n\n\ndomain object 자체의 로직은 domain class 의 method 로 구현한다\n\napplication 은 복수개의 domain 에 걸쳐있는 로직이 있을 경우 각각의 domain object 또는 service 를\ninstantiate 해서 엮어주는 역할을 한다\n\n\n도메인 (DOMAIN)\n\n\n인프라스트럭처 (INFRASTRUCTURE)\n\ndb 쿼리해서 domain object instantiate\n\ndomain object 변경되면 update query\n\n\n\n\ndb 쿼리를 통해 domain object 를 재구성하거나 domain object 에 변경점이 있는 경우 이를 update 하는 역할\n\n아무런 로직을 포함하면 안된다\n\n그래야 repository 를 쉽게 모킹해서 application level 의 단위 테스트를 작성할 수 있다\n\n\n폴더 구조\n\n\n[/wiki/download/attachments/137855128/ddd-folder-layout.png?api=v2]\n\n\n\n\n\n도메인\n\n\n도메인 모델\n\n해당 도메인의 비즈니스 로직을 추상화한 객체.\n\nclass 를 이용해 구현하며 아무런 side effect 를 발생시키지 않아야 한다.\n\n도메인 모델만으로 구현하지 못하는 비즈니스 로직은 도메인 서비스로 구현한다.\n\n\n도메인 모델 구현\n\n\nSCHEMA\n\n모델의 완전한 스키마\n\nmodel.ts\n\nimport * as Joi from 'joi'\n\n// schema\nconst schema = {   \n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n * 모델이 반드시 값을 가져야 하는 property 는 required 로 선언한다.\n * 모델이 반드시 값을 가질 필요가 없으면 optional + allow(null) 로 선언한다.\n\n\n모델 CLASS 선언\n\n모델은 TS 의 interface, class merge 기능을 이용해 선언한다\n\nhttps://stackoverflow.com/questions/47670959/typescript-declaration-merge-a-class-and-an-interface\n[https://stackoverflow.com/questions/47670959/typescript-declaration-merge-a-class-and-an-interface]\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\n\n// schema\nconst schema = {\n    idx: Joi.number()\n        .required(),\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {}\n\n위와 같이 interface 는 Joi schema 에서 추출한 타입을 상속하고 이를 class 와 merge 시키면 vscode 에서 다음과\n같이 인텔리센스를 사용할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_16-6-53.png?api=v2]\n\n인텔리센스에서 필수값, 선택값이 확실히 구분되기 때문에 코딩할 때 실수를 줄일 수 있다.\n\nIDENTIFIER\n\nIdentifier 는 모델명 + Idx 로 표현한다.\n\nauto_increment  를 사용하는 경우 모델을 persist 해야 유효한 idx 가 생기기 때문에 주의. 이는 나중에 repository\n에서 자세히 설명한다.\n\nINTERFACE 가 JOI.EXTRACTTYPE 으로 추출한 타입을 상속하는 이유\n\n아래 두개는 동일한 interface 선언이다.\n\ninterface.ts (without Joi.extractType)\n\ninterface Person {\n    name: string\n    age?: number\n    address: string\n    isDeveloper: boolean\n}\n\ninterface.ts (with Joi.extractType)\n\ninterface Person extends Joi.extractType<typeof schema> { }\n\nJoi 를 이용해서 이미 스키마를 정의했기 때문에 TS 에서 불필요한 property 재선언을 방지하기 위해 Joi.extractType 을\n사용한다.\n\nCLASS 가 SCHEMA TYPE 을 직접 구현하지 않는 이유\n\nclass 가 Joi schema 에서 추출한 타입을 직접 구현하면 컴파일 오류가 발생한다.\n\nTS 에서 class 는 interface 에 정의된 property 들을 모두 다시 선언해줘야 하기 때문이다.\n\n// (x) compile error\nexport class Person implements Joi.extractType<typeof schema> {}\n\n// (o)\nexport class Person implements Joi.extractType<typeof schema> {\n    name: string\n    age?: number\n    address: string\n    isDeveloper: boolean\n}\n\n\n\n\n그래서 class 가 직접 schema type 을 구현하지 않고 interface 가 schema type 을 상속하게 한다음\ninterface, class merge 기능을 사용한다.\n\n이는 TS 라서 가능한 일종의 트릭이다.\n\n// (o) interface & class merge trick\ninterface Person extends Joi.extractType<typeof schema> {}\nexport class Person {}\n\n\nCTOR (생성자)\n\nmodel.ts (ctorType 선언 전)\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\n\n// schema\nconst schema = {\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {\n    constructor(name: string, age?: number, latitude: number, longitude: number, isDeveloper: boolean) {\n        this.name = name\n        this.age = age\n        this.address = googleAPI.reverseGeocode({latitude, longitude})\n        this.isDeveloper = isDeveloper\n    }\n}\n\n * 위의 코드를 보면 생성자에서 Joi schema 와 유사한 schema 가 TS 로 반복된다\n * Joi schema 에서 age 를 required 로 고치면 생성자도 같이 수정해야 한다\n * property 가 많아지면 수정할 가능성이 높아진다\n * property 가 많아지면 TS 로 재정의해야 하는 property 가 너무 많다\n * ctorType 을 선언해서 위의 문제를 해결한다\n\nCTORTYPE\n\nmodel.ts (ctorType 선언 후)\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\nconst schema = {\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// ctorType\nconst ctorSchema = Joi.object(\n    (() => ({\n        ...pick(schema, ['name', 'age', 'isDeveloper']),\n        longitude: Joi.number()\n            .required()\n            .description('위도'),\n        latitude: Joi.number()\n            .required()\n            .description('경도'),\n    }))(),\n)\nexport type PersonCtorType = Joi.extractType<typeof ctorSchema>\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = args.isDeveloper\n    }\n}\n\n * ctorType 의 이름은 ClassCtorType (ex - PersonCtorType) 으로 한다\n * ctorType 은 export 한다\n * ctorSchema 는 export 하지 않는다\n   * ctorType 만 선언할 수 있으면 좋겠는데 현재 TS 에서는 type 자체를 반환값으로 사용한다던가 할 수 없기 때문에 위와 같이\n     하는게 최선이다\n\nCTORTYPE 관련 이슈\n\nctorType 선언을 다음과 같이 하고 싶다\n\nconst ctorSchema = Joi.object({\n    ...pick(schema, ['name', 'age', 'isDeveloper']),\n    longitude: Joi.number()\n        .required()\n        .description('위도'),\n    latitude: Joi.number()\n        .required()\n        .description('경도'),\n})\nexport type PersonCtorType = Joi.extractType<typeof ctorSchema>\n\n그런데 vscode 인텔리센스를 보면 schema 에서 name, age, isDeveloper 만 pick 했음에도 address 가\n남아있는것을 볼 수 있다\n\n(인텔리센스만 이상한게 아니고 실제로 생성자에도 address 를 넘겨줘야 한다)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_16-6-10.png?api=v2]\n\npick 의 signature 와 관련된 이슈라고 생각되는데 다음과 같이 하면 잘 된다\n\n(논리적으로는 위와 동일한 코드임)\n\nconst tmpCtorSchema = {\n    ...pick(schema, ['name', 'age', 'isDeveloper']),\n    longitude: Joi.number()\n        .required()\n        .description('위도'),\n    latitude: Joi.number()\n        .required()\n        .description('경도'),\n}\nconst ctorSchema = Joi.object(tmpCtorSchema)\nexport type PersonCtorType = Joi.extractType<typeof ctorSchema>\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_16-5-17.png?api=v2]\n\n\n\n\n따라서 tmpCtorSchema 를 불필요하게 사용하는 것을 방지하기 위해 ctorType (생성자 type) 에서 처럼 block scope\n를 추가해서 tmpCtorSchema 선언을 숨겨버렸다\n\nCTOR 런타임 타입 검사\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\nconst schema = {\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// ctorType\nconst ctorSchema = Joi.object(\n    (() => ({\n        ...pick(schema, ['name', 'age', 'isDeveloper']),\n        longitude: Joi.number()\n            .required()\n            .description('위도'),\n        latitude: Joi.number()\n            .required()\n            .description('경도'),\n    }))(),\n)\nexport type PersonCtorType = Joi.extractType<typeof ctorSchema>\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = isDeveloper\n    }\n}\n\nTS 코드 사이의 호출은 타입이 맞지 않으면 컴파일이 안되기 때문에 이상한 타입이 들어올 일이 없다.\n\n하지만 도메인 객체는 대부분 DB 에 저장되고 DB 에 저장된 값을 읽어오는건 TS 영역 밖의 일이기 때문에 이상한 타입이 TS 로 전달될 수\n있다.\n\nconst [personRow] = await mysql.query('select name, age, latitude, longitude, isDeveloper from person where idx = ?', [userIdx])\nconst person = new Person(...personRow)\n\n위와 같은 코드의 경우 DB 에서 값을 읽어와서 person 객체를 생성하는것은 런타임에 발생하는 일이고 버그로 인해 DB 에 잘못된 값이\n들어갈 수 있기 때문에 런타임에 파라미터 타입이 잘못되는 것은 막을 수 없다.\n\n따라서 런타임에 타입 검사를 해야 한다\n\n\n\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\nconst schema = {\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// ctorType\n...\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        if (typeof args.name !== 'string') {\n            throw new TypeError()\n        }\n        if (args.age && typeof args.age !== 'number') {\n            throw new TypeError()\n        }\n        if (typeof args.latitude !== 'number' || typeof args.longitude !== 'number') {\n            throw new TypeError()\n        }\n        if (typeof args.isDeveloper !== 'boolean') {\n            throw new TypeError()\n        }\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = isDeveloper\n    }\n}\n\nJoi 를 이용해 정의한 스키마가 있기 때문에 코드를 좀 더 간결하게 만들 수 있다\n\n(예제의 property 수가 적어서 코드양이 비슷해 보이지만 위의 코드는 property 가 많을 수록 if 문이 선형적으로 증가한다)\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n// model\n// ...\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        const { latitude, longitude, ...ps } = args // 파생 property 를 만들기 위해 전달받은 값은 걸러낸다\n        const { error, value } = Joi.validate(schema, {\n            ...ps,\n            address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        })\n        if (error) {\n            throw error\n        }\n        Object.assign(this, value)\n    }\n}\n\n\n\n\n생성자 코드는 모든 도메인 객체에 반복될 수 밖에 없기 때문에 상속을 이용해 추후에 도메인 객체 생성 로직에 변경이 필요할 경우 쉽게 대처할 수\n있도록 한다\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        super()\n\n        const { latitude, longitude, ...ps } = args // 파생 property 를 만들기 위해 전달받은 값은 걸러낸다\n        this.load(schema, {\n            ...ps,\n            address: googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        })\n    }\n}\n\nddd.ts\n\nexport class DomainModel {\n    protected load(schema, props) {\n        const { error, value } = schema.validate(props)\n        if (error) {\n            throw error\n        }\n        Object.assign(this, props)\n    }\n}\n\n\nSTATIC FACTORY METHOD\n\n도메인 객체의 구현 클래스를 추상화하기 위해 객체는 static factory method 로 생성한다.\n\n상속 관계로 도메인 객체가 디자인 된 경우 어플리케이션 영역에서는 절대로 도메인 객체의 생성자를 직접 호출하면 안된다.\n\n잘못된 구현\n\n// model.js\nclass Client {}\nclass ClientCCB extends Client {}\nclass ClientCFX extends Client {}\n\n// app.js\nconst client = type === 'ccb' ? new ClientCCB() : new ClientCFX() // (x). 도메인 객체의 생성 책임은 어플리케이션 영역이 아니라 도메인 영역에 있다.\n\n\n올바른 구현\n\n// model.js\nclass Client {\n    static of(type) {\n        return type === 'ccb' ? new ClientCCB() : new ClientCFX()\n    }\n}\nclass ClientCCB extends Client {}\nclass ClientCFX extends Client {}\n\n// app.js\nconst client = Client.of(type)\n\n상속 관계를 사용하지 않으면 어플리케이션 영역에서 new 객체() 로 생성해도 무방하다.\n\nCREATE (객체 생성 STATIC FACTORY METHOD)\n\n신규 객체를 생성할때 항상 특정 property 는 값을 받지 않고 항상 정해진 default 값을 사용하고 싶은 경우가 있다\n\n(isDeveloper = false)\n\n이 경우 생성자는 isDeveloper 를 받지만 객체 생성 factory method 는 isDevelopr 를 받지 않는다\n\nmodel.ts\n\n// ...\nexport class Person extends DomainModel {\n    static create(name: string, age: number, latitude:number, longitude: number) {\n        return new Person({\n            name,\n            age,\n            latitude,\n            longitude,\n            isDeveloper: false\n        })\n    }\n\n    constructor(args: PersonCtorType) {\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = args.isDeveloper\n    }\n}\n\nPersonCtorType = (name, age, latitude, longitude, isDeveloper) 이므로 create 의 인자\ntype 을 다음과 같이 파생시킬 수 있다\n\n\n\n\nmodel.ts\n\n// ...\nexport type PersonCtorType = Joi.extractType<typeof ctorSchema>;\nexport type PersonCreateType = Omit<PersonCtorType, 'isDeveloper'>;\n\nexport class Person extends DomainModel {\n    static create(args: PersonCreateType) {\n        return new Person({\n            name,\n            age,\n            latitude,\n            longitude,\n            isDeveloper: false\n        })\n    }\n\n    constructor(args: PersonCtorType) {\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = args.isDeveloper\n    }\n}\n\n// test.js\n// isDeveloper=false 인 person 이 생성 됨\nconst person = Person.create({\n    name: 'starbucks',\n    age: 10,\n    latitude: 1,\n    longitude: 3,\n})\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_16-18-9.png?api=v2]\n\nOF (객체 재구성 STATIC FACTORY METHOD)\n\nTODO:\n\ncreate 와 유사하게 PersonUpdateType 을 PersonCtorType 에서 파생시킬 수 있다\n\n\nUPDATE\n\n다음과 같이 인스턴스의 property 를 직접 변경하는 코드는 모두 코드 리뷰단계에서 걸러내야 한다\n\nTODO: eslint 같은거로 체크할 수 있나?\n\nconst p1 = new Person({ name: 'Ecube', age: 7, latitude: 37, longitude: 128 })\np1.age = 8\n\n이는 잘못된 property 변경을 막기 위함인데 age 는 사실 그냥 변경해도 무방하다\n\n하지만 address 는 reverseGeocode 로 계산해야 하는 값인데 그냥 p1.address = '한국' 과 같이 하는것은 곤란하다\n\n따라서 혼란의 여지를 없애기 위해 단순 업데이트 가능한 property 는 모두 update(...) 함수로 변경하고 특별한 로직을 거쳐서\n업데이트 해야 하는 property 는 전용 업데이트 함수를 만들어 준다\n\n관련 내용은 setter harm 키워드로 구글링 해볼 것\n\n비즈니스 로직 없이 단순히 변경 가능한 property 들은 모두 update 함수로 변경해야 한다\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        // ...\n    }\n\n    update({ name, age }: { name?: string, age?: number }) {\n        if (name) {\n            this.name = name\n        }\n        if (age) {\n            this.age = age\n        }\n    }\n\n    changeAddress(latitude: number, longitude: number) {\n        address: googleAPI.reverseGeocode({ latitude, longitude })\n    }\n}\n\n * 이때 ctor 경우와 유사하게 스키마가 반복되는 문제가 발생하는데 updateType 을 선언해 이 문제를 해결한다\n\nUPDATETYPE\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n\n// updateType\nexport type PersonUpdateType = Partial<Pick<PersonCtorType, Exclude<keyof PersonCtorType, 'latitude' | 'longitude'>>>\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        // ...\n    }\n\n    update({ name, age }: PersonUpdateType) {\n        if (name) {\n            this.name = name\n        }\n        if (age) {\n            this.age = age\n        }\n    }\n\n    changeAddress(latitude: number, longitude: number) {\n        address: googleAPI.reverseGeocode({ latitude, longitude })\n    }\n}\n\n * TS 분석\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_15-49-7.png?api=v2]\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_15-50-23.png?api=v2]\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_15-51-7.png?api=v2]\n     이 단계에서 끝나면 안된다\n     update({ name: 'something' }) or update({ age: 30 }) 모두 가능한 시나리오이기 때문에\n     update 에 전달되는 모든 props 는 optional 이어야 한다\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/137855128/image2019-6-14_15-52-11.png?api=v2]\n * updateType 은 export 한다\n\nUPDATE 런타임 타입 검사\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n\n// updateType\n// ...\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        // ...\n    }\n\n    update({ name, age }: PersonUpdateType) {\n        if (name) {\n            if (typeof name !== 'string') {\n                throw new TypeError()\n            }\n            this.name = name\n        }\n        if (age) {\n            if (typeof age !== 'number') {\n                throw new TypeError()\n            }\n            this.age = age\n        }\n    }\n\n    changeAddress(latitude: number, longitude: number) {\n        address: googleAPI.reverseGeocode({ latitude, longitude })\n    }\n}\n\n생성자의 경우와 마찬가지로 TS 는 런타임에 타입 검사를 수행할 수 없다\n\n따라서 POST body 나 GET queryString 으로 받은 값이 update 함수에 잘못된 타입으로 전달될 수 있다\n\n따라서 위와 같이 런타임 타입 검사를 해야 한다\n\n * 현재는 Joi router 를 사용하기 때문에 body 와 queryString 이 이미 런타임에 검사 되고 있으므로 이는 중복\n   검사이긴하다\n * 하지만 Joi router 에 의존적이지 않도록 하기 위해 일단은 중복 검사하도록 내버려둔다\n\n\nCONVENTION\n\nimport * as Joi from 'joi';\nimport 'joi-extract-type';\nimport { DddModel } from '../../../../lib/@ccn/ddd';\n\n// schema\nconst schema = {\n  ...\n};\n\n// ctorType\ntype XXXCtorType = ...;\nexport type XXXCreateType = ...;\nexport type XXXOfType = ...;\n\n// updateType\nexport type XXXUpdateType = ...;\n\n// model\nexport interface XXX extends Joi.extractType<typeof schema> {}\n\nexport class XXX extends DddModel {\n  static create(props: XXXCreateType) {\n    ...\n  }\n\n  static of(props: XXXOfType) {\n    ...\n  }\n  ...\n}\n\n * 코드의 구역을 나누는 주요 주석들은 반드시 추가한다\n   * // schema\n   * // ctorType\n   * // updateType\n   * // model\n *  ctorType\n   * 명명 규칙\n     * 생성자: 모델 이름 + CtorType\n     * 객체 생성 factory method: 모델 이름 + CreateType\n     * 객체 재구성 factory method: 모델 이름 + UpdateType\n   * export\n     * 생성자는 private 이기 때문에 생성자의 argument type 은 export 하지 않는다\n     * factory method 는 public 이기 때문에 factory method 의 argument type 은 export 해야\n       한다\n * updateType\n   * 명명 규칙: 모델 이름 + UpdateType\n   * updateType 은 export 해야 한다\n *  model\n   * 모델은 export 해야 한다\n\n\n도메인 서비스\n\n도메인 모델만으로 구현하지 못하는 비즈니스 로직을 구현하는 객체.\n\n예를 들어 client 도메인 모델이 있는데 client 들의 통계를 내는 비즈니스 로직은 client 모델에 포함시키기 곤란하다.\n\n이런 경우 client 도메인 서비스를 이용해 구현한다.\n\n\n레파지토리\n\n레파지토리는 도메인 모델의 영속성을 담당한다.\n\n레파지토리의 interface 는 도메인 영역에 속하고 레파지토리의 실제 구현체는 인프라 영역에 속한다.\n\n[/wiki/download/attachments/137855128/ddd-repository-concept.png?api=v2]\n\n서비스는 interface 를 통해서만 레파지토리를 사용해야 한다. 이렇게 함으로써 레파지토리의 구현체를 격리시키면 다음과 같은 장점이 있다.\n\n 1. 서비스는 모델이 mysql 에 저장되는지 redis 에 저장되는지 신경쓸 필요가 없음\n 2. 영속성을 변경 (ex - mysql → redis) 해야 하는 경우 레파지토리 이외의 영역은 수정 사항이 없음\n\n\n레파지토리 INTERFACE 작성\n\nrepository.ts\n\nimport { Token } from 'typedi';\nimport { Person } from './model';\n\nexport interface PersonRepository {\n    findByIdx(idx: number): Promise<Person>;\n    findAll(): Promise<Person[]>;\n    save(person: Person): Promise<Person>;\n}\n\nexport const PersonRepositoryToken = new Token<PersonRepository>();\n\n\nTOKEN\n\nTS 에서 interface 는 타입 검사를 위해서만 존재한다 (JS 로 트랜스파일 해보면 interface 관련 코드는 모두 삭제 되는 것을\n확인할 수 있다).\n\n런타임에 DI (Dependency Injection) 을 이용해 어떤 레파지토리 구현체를 사용할지 결정하는데 언급한대로 interface 관련\n코드는 런타임에 존재하지 않기 때문에 DI 에서 instance 식별자로 interface 를 사용할 수 없다.\n\n따라서 interface 에 대한 토큰을 생성하고 실제 레파지토리 구현체에 해당 토큰을 붙여줘야 런타임에 DI 를 사용할 수 있다.\n\n\n\n\n\n응용\n\n\n서비스\n\n도메인 모델, 레파지토리를 엮어서 특정한 동작을 수행하는 함수\n\n * 응용 서비스끼리는 서로 호출하면 안된다\n * 도메인 로직이 구현되면 안된다\n   * ex - 클린큐브는 월/수/금에만 수거 가능하다 = 도메인 로직\n\n\n서비스 TYPE\n\n서비스의 parameter type, return type 은 도메인 모델과 밀접한 관련이 있다\n\nexport class PeopleService {\n  registerUser(props: ?): Person {\n    const user = Person.create({ \n      ...props,\n    })\n    \n    userRepository.save(user)\n  }\n}\n\n위와 같은 경우라면 registerUser 에 전달되는 파라미터 props 가 곧 Person.create 의 파라미터이므로 props:\nPersonCreateType 이면 된다\n\n\n\n\nexport class PeopleService {\n  registerUser(props: ?): Person {\n    const { latitude, longitude } = googleAPI.geocode(props.address)\n\n    const user = Person.create({ \n      name: props.name,\n      age: props.age,\n      latitude,\n      longitude,\n    })\n    \n    userRepository.save(user)\n  }\n}\n\n위와 같은 경우라면 registerUser 에 전달되는 파라미터는 { name: string; age: number; address:\nstring; } 으로 PersonCreateType 과 다르다\n\n따라서 서비스에서 사용하는 type 은 도메인과 별개로 정의되어야 한다\n\n\n\n\nexport type registerUserType = {\n  name: string;\n  age: number;\n  address: string;\n}\n\n * type 의 이름은 서비스 이름 + Type 으로 한다\n * 서비스에서 사용하는 type 이 도메인의 type 과 같더라도 서비스가 도메인의 type 을 직접 사용하는 일은 없도록 한다\n   * example\n     \n     export type registerUserType = PersonCreateType;\n\nargument가 많을 경우에는 별도의 type으로  - 4개이상? \n\n\n\n\n async updateVehicles(\n        userIdx: number,\n        vehicleIdxs: number[],\n        description: string,\n        depotSiteIdx: number,\n        landfillSiteIdx: number,\n        operationHours: any[][], // FIXME: 무슨 타입이지\n        capacity: number,\n        tagIdxs: number[],\n    ): Promise<VehicleReturnType[]> {\n\n\nasync updateVehicles(vehicleProps: updateVehiclesType): Promise<VehicleReturnType[]> {\n        const {\n            userIdx,\n            vehicleIdxs,\n            description,\n            depotSiteIdx,\n            landfillSiteIdx,\n            operationHours,\n            capacity,\n            tagIdxs,\n        } = vehicleProps;\n\n\n\n\n\n\n\n인프라스트럭처 (INFRASTRUCTURE)\n\n\n레파지토리\n\n레파지토리는 도메인 모델의 영속성을 담당한다.\n\n레파지토리의 interface 는 도메인 영역에 속하고 레파지토리의 실제 구현체는 인프라 영역에 속한다.\n\n\nSAVE\n\nsave 는 도메인 객체를 저장하는 책임을 갖는다.\n\nsave 는 신규 생성 객체, 변경 된 객체 모두 저장할 수 있어야 한다.\n\nconst person = new Person({...}) // 신규 객체 생성. 메모리에만 있고 DB 에 없음\n\npersonRepository.save([person])    // 신규 객체 저장\n\nconst person = personRepository.findByIdx(1) // 객체 조회\n\nperson.update({ name: 'Ecube Labs2' })       // 객체 변경\n\npersonRepository.save([person])                // 변경된 객체 저장\n\n\n\n\n도메인 객체를 저장하는 함수는 단 하나만 존재해야 하며 save 의 변형을 만들면 안된다\n\nperson.update({ name: 'Ecube Labs3' })\npersonRepository.updateName(person) // name field 를 업데이트 하기 위한 함수 -- (x)\n\nperson.update({ age: 20 })\npersonRepository.updateAge(person) // age field 를 업데이트 하기 위한 함수 -- (x)\n\nSIGNATURE\n\nsave 는 다음과 같은 signature 를 갖는다.\n\nsave(entities: Entity[]): Promise<void>;\n\n\n\n\nd.ts 파일을 작성하는 경우 single entity 를 받는 save() 와 multiple entities 를 받은 save() 를 다음과\n같이 오버로딩 된 interface 로 제공할 수 있다.\n\nsave(entity: Entity): Promise<void>;\nsave(entities: Entity[]): Promise<void>;\n\n하지만 아직은 d.ts 파일에 대한 필요성이 없기 때문에 save() 는 무조건 single entity 도 받고 multiple\nentities 도 받는 interface 를 제공하기 힘들다.\n\n그래서 save() 는 그냥 multiple entities 를 받도록 개발한다.\n\n\nFIND\n\nfind() 는 데이터베이스를 조회해서 완전한 aggregate root 를 반환하는 책임을 갖는다.\n\nfind 는 절대 불완전한 aggregate root 를 반환하면 안된다.\n\nfind() 는 몇가지 변형된 형태로 작성이 가능하다.\n\n이름기능find(options?, order?)모든 aggregate root 조회findXXX(options?, order?)\n\nXXX 조건에 부합하는 모든 aggregate root 조회\n\nex) findOngoing(): onGoing 상태의 모든 aggregate root 조회\n\nfindByYYY(...yyy, options?, order?)\n\nYYY 를 파라미터로 모든 aggregate root 조회\n\nex) findByName()\n\nfindXXXByYYY(...yyy, options?, order?)XXX 조건에 부합 + YYY 를 파라미터로 모든 aggregate root\n조회\n\n컨벤션 논의\n[/wiki/pages/createpage.action?spaceKey=WIKI&title=%EC%BB%A8%EB%B2%A4%EC%85%98%20%EB%85%BC%EC%9D%98]\n\n\n참고\n\nAggregate 설계에 도움이 되는 문서\n\nEffective Aggregate Desi…\n[/wiki/spaces/SW/pages/137855128/DDD+in+JS?preview=%2F137855128%2F168626030%2FEffective+Aggregate+Design+Part+I-+Modeling+a+Single+Aggregate.pdf]\n\nEffective Aggregate Desi…\n[/wiki/spaces/SW/pages/137855128/DDD+in+JS?preview=%2F137855128%2F169345624%2FEffective+Aggregate+Design+Part+II-+Making+Aggregates+Work+Together.pdf]\n\nEffective Aggregate Desi…\n[/wiki/spaces/SW/pages/137855128/DDD+in+JS?preview=%2F137855128%2F168626035%2FEffective+Aggregate+Design+Part+III-+Gaining+Insight+Through+Discovery.pdf]\n\n\n\n\n\n========== 여기 아래는 정리가 안되었으므로 읽어 봤자 노의미 ========== \n\n\n\n\n\n폴더 구조\n\n|-- src\n|    |-- services\n|    |    |-- $DOMAIN\n|    |    |    |-- domain\n|    |    |    |    |-- repository.ts\n|    |    |    |-- infrastructure\n|    |    |    |    |-- repository.ts\n\n\n\n\n\n레파지토리 INTERFACE\n\n서비스는 레파지토리 구현체에 직접 의존하면 안된다 (레파지토리 구현체는 실제 db 와 연결되는 구현체, mock 구현체 등 여러가지 있을 수\n있기 때문)\n\n따라서 레파지토리 interface 를 둬서 서비스는 레파지토리 interface 에 의존하게 해야 한다\n\n/src/services/$DOMAIN/domain/repository.ts\n\nimport { Token } from 'typedi';\nimport { Person } from './model';\n\nexport interface PersonRepository {\n    /**\n     * @param idx\n     */\n    findByIdx(idx: number): Promise<Person>;\n}\n\nexport const PersonRepositoryToken = new Token<PersonRepository>();\n\ninterface 와 추가로 interface token 도 선언해야 한다\n\ntypescript 에서 interface 는 transpile 시 모두 제거되는 정보이기 때문에 di 모듈은 interface 정보만 가지고는\n레파지토리 구현체를 찾을 수 없다\n\n그래서 interface token 을 추가로 선언한다\n\n\n\n\n\n\n\n\n레파지토리 구현체 (CLASS)\n\n/src/services/$DOMAIN/infrastructure/repository.ts\n\nimport { Service } from 'typedi';\nimport { EpaRepository } from '../../../lib/@ccn/epa';\nimport { makeQueryMethods, BoundQuery } from '../../../lib/query-methods';\nimport { Person } from '../domain/model';\nimport { PersonRepository, PersonRepositoryToken } from '../domain/repository';\n\nconst query = makeQueryMethods(require('@ccn/mysql')('ccn'))({\n    getPersonByIdx: {\n        input: (idx: number) => [idx],\n        sql: `select idx, name, age from person where idx = ?`,\n    },\n});\n\n@Service(PersonRepositoryToken) // interface token 을 이용해 di 모듈이 레파지토리 구현체를 찾을 수 있게 함\nexport class PersonRepositoryImpl extends EpaRepository implements PersonRepository {\n    @BoundQuery\n    private query = query;\n\n    /**\n     * @param idx\n     */\n    async findByUserIdxVehicleIdxs(idx: number): Promise<Person[]> {\n        const data = await this.query.getPersonByIdx(idx);\n        return new Vehicle(data);\n    }\n}\n\n\n\n다음의 작업을 통해 connection 이 자동으로 관리되도록 한다\n\n * makeQueryMethods 로 query 객체를 생성\n * 레파지토리는 EpaRepository 상속, interface 구현\n * 레파지토리 query 필드에 @BoundQuery decorator 붙이고 makeQueryMethods 로 생성한 query 객체 할당\n\n\n\n\n\n\n\n\n\n\n\nSAMPLE CODE\n\napplication/client-service.ts\n\nclass ClientService {\n  private clientRepository: ClientRepository\n\n  constructor(clientRepository: ClientRepository) {\n    this.clientRepository = clientRepository\n  }\n\n  // description 일괄 수정\n  async updateClients: Client[] (idxs: number[], description: string): Promise<Client[]> {\n    // ClientRepository 는 interface 이기 때문에 service 는 이게 실제로 db 연동이 구현된 instance 인지 mocking 된 가짜 instance 인지 몰라도 됨\n    const clients = await clientRepository.findByIdxs(idxs)\n\n    clients.forEach(client => client.update(description))\n\n    await clientRepository.batchUpdate(clients)\n\treturn clients\n  }\n}\n\ndomain/client.ts\n\nclass Client {\n  constructor(public readonly clientIdx, public readonly typeName) {\n    // ...\n  }\n  update(description: string) {\n    this.description = description\n  }\n}\n\ndomain/client-repository.ts\n\ninterface ClientRepository {\n  async findByIdxs(idxs: number[]): Promise<Client[]>\n  async batchUpdate(clients: Client[])\n}\n\ninfrastructure/client-repository-impl.ts\n\nclass ClientRepositoryImpl implements ClientRepository {\n  async findByIdxs(idxs: number[]): Promise<Client[]> {\n    // sql goes here\n  }\n\n  async batchUpdate(clients: Client[]) {\n    // sql goes here\n  }\n}\n\ninfrastructure/client-repository-test-impl.ts\n\nclass ClientRepositoryTestImpl implements ClientRepository {\n  async findByIdxs(idxs: number[]): Promise<Client[]> {\n    return [\n      {clientIdx: 1, typeName: 'CCB'},\n      {clientIdx: 2, typeName: 'CFX'},\n    ]\n  }\n\n  async batchUpdate(clients: Client[]) {\n    // do nothing\n  }\n}\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/137855128"
  },
  {
    "pageContent": "DDD in TS\n\n\n\n * 계층\n   * Presentation\n   * 응용 (application)\n   * 도메인 (domain)\n   * 인프라스트럭처 (infrastructure)\n * 도메인\n   * 도메인 모델\n   * 도메인 모델 구현\n     * 모델 class 선언\n       * Identifier\n     * Ctor (생성자)\n     * Static factory method\n * 인프라스트럭처 (infrastructure)\n   * 레파지토리\n     * save\n       * signature\n     * find\n * 폴더 구조\n * ========== 여기 아래는 정리가 안되었으므로 읽어 봤자 노의미 ==========\n         * ctor 런타임 타입 검사\n     \n      * update\n        * updateType\n        * update 런타임 타입 검사\n   \n   * 도메인 서비스\n   * 레파지토리\n   * 레파지토리 interface 작성\n     * find\n     * save\n     * token\n * 응용\n   * 서비스\n   * 서비스 type\n * 참고\n * 레파지토리 interface\n * 레파지토리 구현체 (class)\n * Sample Code\n\n\n\n\n\n\n\n계층\n\nDDD\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174489785/39467265-2ecb8d9c-4d68-11e8-9e48-88dc1c78e67a.png?api=v2][http://www.joaopauloseixas.com/howtodoit.net/wp-content/uploads/2011/04/Domain-Driven-Design-Overview-of-a-Layered-Architecture.png]\n\n\n\n\n\nPRESENTATION\n\n * DDD: user interface\n\nAPI 계층\n\n이 계층은 단순히 service 를 호출하는 계층이어야 한다\n\n\n\n\n이 계층에서 작성된 transaction 관련 코드를 service 로 옮기고 싶다\n\nWhy?\n\nPUT client/1\n\nPUT /mobile/v1/client2\n\n지금 endpoint 가 두개인데 로직은 service 로 모으면 되지만 transaction 은 서로 다른 route controller 의\n담당이 되기 때문에\n\n\n응용 (APPLICATION)\n\nrepository 를 이용해 domain object instantiate\n\nrepository 를 이용해 domain object persist\n\n서로 다른 domain object 를 이용한 로직 구현\n\n\n\n\ndomain object 자체의 로직은 domain class 의 method 로 구현한다\n\napplication 은 복수개의 domain 에 걸쳐있는 로직이 있을 경우 각각의 domain object 또는 service 를\ninstantiate 해서 엮어주는 역할을 한다\n\n\n도메인 (DOMAIN)\n\n도메인 로직을 구현하는 계층\n\n\n인프라스트럭처 (INFRASTRUCTURE)\n\ndb 쿼리해서 domain object instantiate\n\ndomain object 변경되면 update query\n\n\n\n\ndb 쿼리를 통해 domain object 를 재구성하거나 domain object 에 변경점이 있는 경우 이를 update 하는 역할\n\n아무런 로직을 포함하면 안된다\n\n그래야 repository 를 쉽게 모킹해서 application level 의 단위 테스트를 작성할 수 있다\n\n\n\n\n\n도메인\n\n\n도메인 모델\n\n해당 도메인의 비즈니스 로직을 추상화한 객체.\n\nclass 를 이용해 구현하며 아무런 side effect 를 발생시키지 않아야 한다.\n\n도메인 모델만으로 구현하지 못하는 비즈니스 로직은 도메인 서비스로 구현한다.\n\n\n도메인 모델 구현\n\n\n모델 CLASS 선언\n\nmodel.ts\n\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn({ unsigned: true })\n    userId!: number;\n    \n    @Column()\n    name!: string;\n\n    @Column({ nullable: true })\n    age?: number;\n\n    @Column()\n    address!: string;\n\n    @Column()\n    isDeveloper!: boolean;\n\n    @CreateDateColumn()\n    private createdAt!: Date;\n\n    @Column()\n    private createdBy!: string;\n\n    @UpdateDateColumn()\n    private updatedAt!: Date;\n\n    @Column()\n    private updatedBy!: string;\n}\n\n * TypeORM [https://typeorm.io/#/] 을 이용해 도메인 모델을 선언한다.\n   * 도메인 영역은 인프라 영역에 의존하면 안되기 때문에 엄밀히 따지면 도메인 모델과 별도로 DAO 를 선언해야 한다.\n   * 하지만 도메인 모델에 ORM 메타 데이터를 추가함으로써 쿼리 작성에 필요한 시간을 절약할 수 있기 때문에 ORM 은 예외로 인정한다.\n * 모델이 반드시 값을 가질 필요가 없으면 TS optional 로 선언한다.\n   * 컬럼에도 nullable 임을 명시한다.\n * TS 가 도메인 모델의 스키마 정보를 잘 표현하고 있기 때문에 별도의 스키마 정의는 필요 없다.\n\nIDENTIFIER\n\nIdentifier 는 모델명 + Id 로 표현한다.\n\n필요에 따라 auto_increment 를 사용할 수도 있고 uuid 로 직접 생성할 수도 있다.\n\nauto_increment 를 사용하는 경우 모델을 persist 해야 유효한 id 가 생기기 때문에 주의. 이는 나중에 repository\n에서 자세히 설명한다.\n\n\nCTOR (생성자)\n\n타입 정의\n\n\nBase ClassExtended ClassNameclass name + CtorTypeclass name +\nCtorTypePropertiesproperties 나열BaseClassCtorType & { ...extended properties }\n\n\n\n\nSignature\n\npublic new (args? CtorType) => T\n\n\n\n\ntype AnimalCtorType = {\n    numberOfLegs: number\n}\ntype CatCtorType = AnimalCtorType & {\n    is뭉치: boolean\n}\ntype UnicornCtorType = AnimalCtorType & {\n    numberOfWings: number\n}\n\nabstract class Animal {\n    species: 'cat' | 'unicorn'\n    numberOfLegs: number\n\n    constructor(args? AnimalCtorType) {\n        if (args) {\n            // 신규 도메인 객체를 생성할 때만 실행되는 코드\n            this.numberOfLegs = args.numberOfLegs\n        }\n    }\n}\n\nclass Cat extends Animal {\n    is뭉치: boolean\n\n    constructor(args? CatCtorType) {\n        super(args)\n        if (args) {\n            // 신규 도메인 객체를 생성할 때만 실행되는 코드\n            this.species = 'cat'\n            this.is뭉치 = args.is뭉치\n        }\n    }\n}\n\nclass Unicorn extends Animal {\n    numberOfWings: number\n\n    constructor(args? UnicornCtorType) {\n        super(args)\n        if (args) {\n            // 신규 도메인 객체를 생성할 때만 실행되는 코드\n            this.species = 'unicorn'\n            this.numberOfWings뭉치 = args.numberOfWings\n        }\n    }\n}\n\n * Extended class 들이 공통으로 갖는 properties 는 Base class 의 properties 로 선언되기 때문에\n   type ExtendedClassCtorType = BaseClassCtorType & { ...extended properties } 로\n   선언하는게 가능하다.\n * BaseClassCtorType, ExtendedClassCtorType 에는 구분자 (위 예제에서는 species) 을 선언하지 않는다.\n   * 구분자는 extended class 의 고유값이기 때문에 파라미터로 받는게 의미가 없다.\n   * Extended class 에서 직접 구분자에 값을 할당한다.\n * TypeORM 은 new XXX() 로 객체를 생성하기 때문에 생성자는 다음의 규칙을 만족해야 한다.\n   \n   * 생성자 argument 는 신규 도메인 객체를 생성할때만 사용된다.\n   * 위에서 언급했듯이 TypeORM 이 DB 값을 읽어서 객체를 생성할때는 new XXX() 을 호출하기 때문에 생성자에 선언한\n     argument 는 DB 에 있는 객체를 불러올 때 아무런 의미를 갖지 않는다.\n\n\nSTATIC FACTORY METHOD\n\n도메인 객체의 구현 클래스를 추상화하기 위해 객체는 static factory method 로 생성한다.\n\n상속 관계로 도메인 객체가 디자인 된 경우 어플리케이션 영역에서는 절대로 도메인 객체의 생성자를 직접 호출하면 안된다.\n\n잘못된 구현\n\n// model.ts\nclass Animal {}\nclass Cat extends Animal {}\nclass Dog extends Animal {}\n\n// app.ts\nconst pet = type === 'cat' ? new Cat() : new Dog() // (x). 도메인 객체의 생성 책임은 어플리케이션 영역이 아니라 도메인 영역에 있다.\n\n\n올바른 구현\n\n// model.ts\nabstract class Animal {\n    static of(type) {\n        return type === 'cat' ? new Cat() : new Dog()\n    }\n}\nclass Cat extends Animal {}\nclass Dog extends Animal {}\n\n// app.ts\nconst pet = Animal.of(type)\n\n\n\n\n상속 관계를 사용하지 않으면 어플리케이션 영역에서 new 객체() 로 생성해도 무방하다.\n\n\n인프라스트럭처 (INFRASTRUCTURE)\n\n\n레파지토리\n\n레파지토리는 도메인 모델의 영속성을 담당한다.\n\n레파지토리의 interface 는 도메인 영역에 속하고 레파지토리의 실제 구현체는 인프라 영역에 속한다.\n\n\nSAVE\n\nsave 는 도메인 객체를 저장하는 책임을 갖는다.\n\nsave 는 신규 생성 객체, 변경 된 객체 모두 저장할 수 있어야 한다.\n\nconst person = new Person({...}) // 신규 객체 생성. 메모리에만 있고 DB 에 없음\n\npersonRepository.save([person])    // 신규 객체 저장\n\nconst person = personRepository.findByIdx(1) // 객체 조회\n\nperson.update({ name: 'Ecube Labs2' })       // 객체 변경\n\npersonRepository.save([person])                // 변경된 객체 저장\n\n\n\n\n도메인 객체를 저장하는 함수는 단 하나만 존재해야 하며 save 의 변형을 만들면 안된다\n\nperson.update({ name: 'Ecube Labs3' })\npersonRepository.updateName(person) // name field 를 업데이트 하기 위한 함수 -- (x)\n\nperson.update({ age: 20 })\npersonRepository.updateAge(person) // age field 를 업데이트 하기 위한 함수 -- (x)\n\nSIGNATURE\n\nsave 는 다음과 같은 signature 를 갖는다.\n\nsave(entities: Entity[]): Promise<void>;\n\n\n\n\nd.ts 파일을 작성하는 경우 single entity 를 받는 save() 와 multiple entities 를 받은 save() 를 다음과\n같이 오버로딩 된 interface 로 제공할 수 있다.\n\nsave(entity: Entity): Promise<void>;\nsave(entities: Entity[]): Promise<void>;\n\n하지만 아직은 d.ts 파일에 대한 필요성이 없기 때문에 save() 는 무조건 single entity 도 받고 multiple\nentities 도 받는 interface 를 제공하기 힘들다.\n\n그래서 save() 는 그냥 multiple entities 를 받도록 개발한다.\n\n\nFIND\n\nfind() 는 데이터베이스를 조회해서 완전한 aggregate root 를 반환하는 책임을 갖는다.\n\nfind 는 절대 불완전한 aggregate root 를 반환하면 안된다.\n\nfind() 는 몇가지 변형된 형태로 작성이 가능하다.\n\n이름기능find(options?, order?)모든 aggregate root 조회findXXX(options?, order?)\n\nXXX 조건에 부합하는 모든 aggregate root 조회\n\nex) findOngoing(): onGoing 상태의 모든 aggregate root 조회\n\nfindByYYY(...yyy, options?, order?)\n\nYYY 를 파라미터로 모든 aggregate root 조회\n\nex) findByName()\n\nfindXXXByYYY(...yyy, options?, order?)XXX 조건에 부합 + YYY 를 파라미터로 모든 aggregate root\n조회\n\n컨벤션 논의\n[/wiki/pages/createpage.action?spaceKey=WIKI&title=%EC%BB%A8%EB%B2%A4%EC%85%98%20%EB%85%BC%EC%9D%98]\n\n\n\n\n\n폴더 구조\n\n|-- src\n|   |-- services\n|   |   |-- [domain]\n|   |   |   |-- application\n|   |   |   |-- domain\n|   |   |   |   |-- model.ts\n|   |   |   |   |-- model.type.ts -- x\n|   |   |   |-- infrastructure\n\n * model.type.ts\n   \n   * Enum, Types, Status 같은 것들을 선언하는 파일.\n   * 단순히 model.ts 에 위의 값들을 선언하면 순환참조가 발생할 수 있다.\n   * 관련 논의\n     [https://github.com/Ecube-Labs/haulla-api/pull/173#discussion_r328414055]\n   * typescript 3.8에서 import type 이 생겨서 더이상 필요하지않다.\n\n\n\n\n\n\n\n\n========== 여기 아래는 정리가 안되었으므로 읽어 봤자 노의미 ========== \n\nCTOR 런타임 타입 검사\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\nconst schema = {\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// ctorType\nconst ctorSchema = Joi.object(\n    (() => ({\n        ...pick(schema, ['name', 'age', 'isDeveloper']),\n        longitude: Joi.number()\n            .required()\n            .description('위도'),\n        latitude: Joi.number()\n            .required()\n            .description('경도'),\n    }))(),\n)\nexport type PersonCtorType = Joi.extractType<typeof ctorSchema>\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = isDeveloper\n    }\n}\n\nTS 코드 사이의 호출은 타입이 맞지 않으면 컴파일이 안되기 때문에 이상한 타입이 들어올 일이 없다.\n\n하지만 도메인 객체는 대부분 DB 에 저장되고 DB 에 저장된 값을 읽어오는건 TS 영역 밖의 일이기 때문에 이상한 타입이 TS 로 전달될 수\n있다.\n\nconst [personRow] = await mysql.query('select name, age, latitude, longitude, isDeveloper from person where idx = ?', [userIdx])\nconst person = new Person(...personRow)\n\n위와 같은 코드의 경우 DB 에서 값을 읽어와서 person 객체를 생성하는것은 런타임에 발생하는 일이고 버그로 인해 DB 에 잘못된 값이\n들어갈 수 있기 때문에 런타임에 파라미터 타입이 잘못되는 것은 막을 수 없다.\n\n따라서 런타임에 타입 검사를 해야 한다\n\n\n\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\nconst schema = {\n    name: Joi.string()\n        .required()\n        .description('이름'),\n    age: Joi.number()\n        .allow(null)\n        .optional()\n        .description('나이'),\n    address: Joi.string()\n        .required()\n        .description('주소'),\n    isDeveloper: Joi.boolean()\n        .required()\n        .description('개발자 여부'),\n};\n\n// ctorType\n...\n\n// model\nexport interface Person extends Joi.extractType<typeof schema> {}\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        if (typeof args.name !== 'string') {\n            throw new TypeError()\n        }\n        if (args.age && typeof args.age !== 'number') {\n            throw new TypeError()\n        }\n        if (typeof args.latitude !== 'number' || typeof args.longitude !== 'number') {\n            throw new TypeError()\n        }\n        if (typeof args.isDeveloper !== 'boolean') {\n            throw new TypeError()\n        }\n        this.name = args.name\n        this.age = args.age\n        this.address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        this.isDeveloper = isDeveloper\n    }\n}\n\nJoi 를 이용해 정의한 스키마가 있기 때문에 코드를 좀 더 간결하게 만들 수 있다\n\n(예제의 property 수가 적어서 코드양이 비슷해 보이지만 위의 코드는 property 가 많을 수록 if 문이 선형적으로 증가한다)\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n// model\n// ...\n\nexport class Person {\n    constructor(args: PersonCtorType) {\n        const { latitude, longitude, ...ps } = args // 파생 property 를 만들기 위해 전달받은 값은 걸러낸다\n        const { error, value } = Joi.validate(schema, {\n            ...ps,\n            address = googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        })\n        if (error) {\n            throw error\n        }\n        Object.assign(this, value)\n    }\n}\n\n\n\n\n생성자 코드는 모든 도메인 객체에 반복될 수 밖에 없기 때문에 상속을 이용해 추후에 도메인 객체 생성 로직에 변경이 필요할 경우 쉽게 대처할 수\n있도록 한다\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        super()\n\n        const { latitude, longitude, ...ps } = args // 파생 property 를 만들기 위해 전달받은 값은 걸러낸다\n        this.load(schema, {\n            ...ps,\n            address: googleAPI.reverseGeocode({latitude: args.latitude, longitude: args.longitude})\n        })\n    }\n}\n\nddd.ts\n\nexport class DomainModel {\n    protected load(schema, props) {\n        const { error, value } = schema.validate(props)\n        if (error) {\n            throw error\n        }\n        Object.assign(this, props)\n    }\n}\n\n\nUPDATE\n\n다음과 같이 인스턴스의 property 를 직접 변경하는 코드는 모두 코드 리뷰단계에서 걸러내야 한다\n\nTODO: eslint 같은거로 체크할 수 있나?\n\nconst p1 = new Person({ name: 'Ecube', age: 7, latitude: 37, longitude: 128 })\np1.age = 8\n\n이는 잘못된 property 변경을 막기 위함인데 age 는 사실 그냥 변경해도 무방하다\n\n하지만 address 는 reverseGeocode 로 계산해야 하는 값인데 그냥 p1.address = '한국' 과 같이 하는것은 곤란하다\n\n따라서 혼란의 여지를 없애기 위해 단순 업데이트 가능한 property 는 모두 update(...) 함수로 변경하고 특별한 로직을 거쳐서\n업데이트 해야 하는 property 는 전용 업데이트 함수를 만들어 준다\n\n관련 내용은 setter harm 키워드로 구글링 해볼 것\n\n비즈니스 로직 없이 단순히 변경 가능한 property 들은 모두 update 함수로 변경해야 한다\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        // ...\n    }\n\n    update({ name, age }: { name?: string, age?: number }) {\n        if (name) {\n            this.name = name\n        }\n        if (age) {\n            this.age = age\n        }\n    }\n\n    changeAddress(latitude: number, longitude: number) {\n        address: googleAPI.reverseGeocode({ latitude, longitude })\n    }\n}\n\n * 이때 ctor 경우와 유사하게 스키마가 반복되는 문제가 발생하는데 updateType 을 선언해 이 문제를 해결한다\n\nUPDATETYPE\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n\n// updateType\nexport type PersonUpdateType = Partial<Pick<PersonCtorType, Exclude<keyof PersonCtorType, 'latitude' | 'longitude'>>>\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        // ...\n    }\n\n    update({ name, age }: PersonUpdateType) {\n        if (name) {\n            this.name = name\n        }\n        if (age) {\n            this.age = age\n        }\n    }\n\n    changeAddress(latitude: number, longitude: number) {\n        address: googleAPI.reverseGeocode({ latitude, longitude })\n    }\n}\n\n * TS 분석\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/174489785/image2019-6-14_15-49-7.png?api=v2]\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/174489785/image2019-6-14_15-50-23.png?api=v2]\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/174489785/image2019-6-14_15-51-7.png?api=v2]\n     이 단계에서 끝나면 안된다\n     update({ name: 'something' }) or update({ age: 30 }) 모두 가능한 시나리오이기 때문에\n     update 에 전달되는 모든 props 는 optional 이어야 한다\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/174489785/image2019-6-14_15-52-11.png?api=v2]\n * updateType 은 export 한다\n\nUPDATE 런타임 타입 검사\n\nmodel.ts\n\nimport * as Joi from 'joi'\nimport 'joi-extract-type'\nimport { pick } from 'lodash'\nimport { DddModel } from '../../lib/@ccn/ddd'\n\n// schema\n// ...\n\n// ctorType\n// ...\n\n\n// updateType\n// ...\n\n// model\n// ...\n\nexport class Person extends DomainModel {\n    constructor(args: PersonCtorType) {\n        // ...\n    }\n\n    update({ name, age }: PersonUpdateType) {\n        if (name) {\n            if (typeof name !== 'string') {\n                throw new TypeError()\n            }\n            this.name = name\n        }\n        if (age) {\n            if (typeof age !== 'number') {\n                throw new TypeError()\n            }\n            this.age = age\n        }\n    }\n\n    changeAddress(latitude: number, longitude: number) {\n        address: googleAPI.reverseGeocode({ latitude, longitude })\n    }\n}\n\n생성자의 경우와 마찬가지로 TS 는 런타임에 타입 검사를 수행할 수 없다\n\n따라서 POST body 나 GET queryString 으로 받은 값이 update 함수에 잘못된 타입으로 전달될 수 있다\n\n따라서 위와 같이 런타임 타입 검사를 해야 한다\n\n * 현재는 Joi router 를 사용하기 때문에 body 와 queryString 이 이미 런타임에 검사 되고 있으므로 이는 중복\n   검사이긴하다\n * 하지만 Joi router 에 의존적이지 않도록 하기 위해 일단은 중복 검사하도록 내버려둔다\n\n\n도메인 서비스\n\n도메인 모델만으로 구현하지 못하는 비즈니스 로직을 구현하는 객체.\n\n예를 들어 client 도메인 모델이 있는데 client 들의 통계를 내는 비즈니스 로직은 client 모델에 포함시키기 곤란하다.\n\n이런 경우 client 도메인 서비스를 이용해 구현한다.\n\n\n레파지토리\n\n레파지토리는 도메인 모델의 영속성을 담당한다.\n\n레파지토리의 interface 는 도메인 영역에 속하고 레파지토리의 실제 구현체는 인프라 영역에 속한다.\n\n[/wiki/download/attachments/174489785/ddd-repository-concept.png?api=v2]\n\n서비스는 interface 를 통해서만 레파지토리를 사용해야 한다. 이렇게 함으로써 레파지토리의 구현체를 격리시키면 다음과 같은 장점이 있다.\n\n 1. 서비스는 모델이 mysql 에 저장되는지 redis 에 저장되는지 신경쓸 필요가 없음\n 2. 영속성을 변경 (ex - mysql → redis) 해야 하는 경우 레파지토리 이외의 영역은 수정 사항이 없음\n\n\n레파지토리 INTERFACE 작성\n\nrepository.ts\n\nimport { Token } from 'typedi';\nimport { Person } from './model';\n\nexport interface PersonRepository {\n    findByIdx(idx: number): Promise<Person>;\n    findAll(): Promise<Person[]>;\n    save(person: Person): Promise<Person>;\n}\n\nexport const PersonRepositoryToken = new Token<PersonRepository>();\n\n\nFIND\n\nfindXXX 는 데이터베이스를 조회해서 완전한 객체를 반환하는 책임을 갖는다.\n\nasync function 이지만 interface 에서는 async 를 생략해도 된다. (async 를 쓰면 tslint 에 걸린다)\n\n비동기 함수이기 때문에 Promise<T> 를 반환해야 한다.\n\n\nSAVE\n\nsave 는 도메인 객체를 저장하는 책임을 갖는다.\n\nsave 는 신규 생성 객체, 변경 된 객체 모두 저장할 수 있어야 한다.\n\nconst person = new Person({...}) // 신규 객체 생성. 메모리에만 있고 DB 에 없음\n\npersonRepository.save(person)    // 신규 객체 저장\n\nconst person = personRepository.findByIdx(1) // 객체 조회\n\nperson.update({ name: 'Ecube Labs2' })       // 객체 변경\n\npersonRepository.save(person)                // 변경된 객체 저장\n\n\n\n\n도메인 객체를 저장하는 함수는 단 하나만 존재해야 하며 save 의 변형을 만들면 안된다\n\nperson.update({ name: 'Ecube Labs3' })\npersonRepository.updateName(person) // name field 를 업데이트 하기 위한 함수 -- (x)\n\nperson.update({ age: 20 })\npersonRepository.updateAge(person) // age field 를 업데이트 하기 위한 함수 -- (x)\n\n\nTOKEN\n\nTS 에서 interface 는 타입 검사를 위해서만 존재한다 (JS 로 트랜스파일 해보면 interface 관련 코드는 모두 삭제 되는 것을\n확인할 수 있다).\n\n런타임에 DI (Dependency Injection) 을 이용해 어떤 레파지토리 구현체를 사용할지 결정하는데 언급한대로 interface 관련\n코드는 런타임에 존재하지 않기 때문에 DI 에서 instance 식별자로 interface 를 사용할 수 없다.\n\n따라서 interface 에 대한 토큰을 생성하고 실제 레파지토리 구현체에 해당 토큰을 붙여줘야 런타임에 DI 를 사용할 수 있다.\n\n\n\n\n\n응용\n\n\n서비스\n\n도메인 모델, 레파지토리를 엮어서 특정한 동작을 수행하는 함수\n\n * 응용 서비스끼리는 서로 호출하면 안된다\n * 도메인 로직이 구현되면 안된다\n   * ex - 클린큐브는 월/수/금에만 수거 가능하다 = 도메인 로직\n\n\n서비스 TYPE\n\n서비스의 parameter type, return type 은 도메인 모델과 밀접한 관련이 있다\n\nexport class PeopleService {\n  registerUser(props: ?): Person {\n    const user = Person.create({ \n      ...props,\n    })\n    \n    userRepository.save(user)\n  }\n}\n\n위와 같은 경우라면 registerUser 에 전달되는 파라미터 props 가 곧 Person.create 의 파라미터이므로 props:\nPersonCreateType 이면 된다\n\n\n\n\nexport class PeopleService {\n  registerUser(props: ?): Person {\n    const { latitude, longitude } = googleAPI.geocode(props.address)\n\n    const user = Person.create({ \n      name: props.name,\n      age: props.age,\n      latitude,\n      longitude,\n    })\n    \n    userRepository.save(user)\n  }\n}\n\n위와 같은 경우라면 registerUser 에 전달되는 파라미터는 { name: string; age: number; address:\nstring; } 으로 PersonCreateType 과 다르다\n\n따라서 서비스에서 사용하는 type 은 도메인과 별개로 정의되어야 한다\n\n\n\n\nexport type registerUserType = {\n  name: string;\n  age: number;\n  address: string;\n}\n\n * type 의 이름은 서비스 이름 + Type 으로 한다\n * 서비스에서 사용하는 type 이 도메인의 type 과 같더라도 서비스가 도메인의 type 을 직접 사용하는 일은 없도록 한다\n   * example\n     \n     export type registerUserType = PersonCreateType;\n\nargument가 많을 경우에는 별도의 type으로  - 4개이상? \n\n\n\n\n async updateVehicles(\n        userIdx: number,\n        vehicleIdxs: number[],\n        description: string,\n        depotSiteIdx: number,\n        landfillSiteIdx: number,\n        operationHours: any[][], // FIXME: 무슨 타입이지\n        capacity: number,\n        tagIdxs: number[],\n    ): Promise<VehicleReturnType[]> {\n\n\nasync updateVehicles(vehicleProps: updateVehiclesType): Promise<VehicleReturnType[]> {\n        const {\n            userIdx,\n            vehicleIdxs,\n            description,\n            depotSiteIdx,\n            landfillSiteIdx,\n            operationHours,\n            capacity,\n            tagIdxs,\n        } = vehicleProps;\n\n\n\n\n\n\n\n참고\n\nAggregate 설계에 도움이 되는 문서\n\n[/wiki/plugins/servlet/confluence/placeholder/unknown-attachment?locale=ko_KR]\n\n[/wiki/plugins/servlet/confluence/placeholder/unknown-attachment?locale=ko_KR]\n\n[/wiki/plugins/servlet/confluence/placeholder/unknown-attachment?locale=ko_KR]\n\n\n\n\n\n\n\n\n레파지토리 INTERFACE\n\n서비스는 레파지토리 구현체에 직접 의존하면 안된다 (레파지토리 구현체는 실제 db 와 연결되는 구현체, mock 구현체 등 여러가지 있을 수\n있기 때문)\n\n따라서 레파지토리 interface 를 둬서 서비스는 레파지토리 interface 에 의존하게 해야 한다\n\n/src/services/$DOMAIN/domain/repository.ts\n\nimport { Token } from 'typedi';\nimport { Person } from './model';\n\nexport interface PersonRepository {\n    /**\n     * @param idx\n     */\n    findByIdx(idx: number): Promise<Person>;\n}\n\nexport const PersonRepositoryToken = new Token<PersonRepository>();\n\ninterface 와 추가로 interface token 도 선언해야 한다\n\ntypescript 에서 interface 는 transpile 시 모두 제거되는 정보이기 때문에 di 모듈은 interface 정보만 가지고는\n레파지토리 구현체를 찾을 수 없다\n\n그래서 interface token 을 추가로 선언한다\n\n\n\n\n\n\n\n\n레파지토리 구현체 (CLASS)\n\n/src/services/$DOMAIN/infrastructure/repository.ts\n\nimport { Service } from 'typedi';\nimport { EpaRepository } from '../../../lib/@ccn/epa';\nimport { makeQueryMethods, BoundQuery } from '../../../lib/query-methods';\nimport { Person } from '../domain/model';\nimport { PersonRepository, PersonRepositoryToken } from '../domain/repository';\n\nconst query = makeQueryMethods(require('@ccn/mysql')('ccn'))({\n    getPersonByIdx: {\n        input: (idx: number) => [idx],\n        sql: `select idx, name, age from person where idx = ?`,\n    },\n});\n\n@Service(PersonRepositoryToken) // interface token 을 이용해 di 모듈이 레파지토리 구현체를 찾을 수 있게 함\nexport class PersonRepositoryImpl extends EpaRepository implements PersonRepository {\n    @BoundQuery\n    private query = query;\n\n    /**\n     * @param idx\n     */\n    async findByUserIdxVehicleIdxs(idx: number): Promise<Person[]> {\n        const data = await this.query.getPersonByIdx(idx);\n        return new Vehicle(data);\n    }\n}\n\n\n\n다음의 작업을 통해 connection 이 자동으로 관리되도록 한다\n\n * makeQueryMethods 로 query 객체를 생성\n * 레파지토리는 EpaRepository 상속, interface 구현\n * 레파지토리 query 필드에 @BoundQuery decorator 붙이고 makeQueryMethods 로 생성한 query 객체 할당\n\n\n\n\n\n\n\n\n\n\n\nSAMPLE CODE\n\napplication/client-service.ts\n\nclass ClientService {\n  private clientRepository: ClientRepository\n\n  constructor(clientRepository: ClientRepository) {\n    this.clientRepository = clientRepository\n  }\n\n  // description 일괄 수정\n  async updateClients: Client[] (idxs: number[], description: string): Promise<Client[]> {\n    // ClientRepository 는 interface 이기 때문에 service 는 이게 실제로 db 연동이 구현된 instance 인지 mocking 된 가짜 instance 인지 몰라도 됨\n    const clients = await clientRepository.findByIdxs(idxs)\n\n    clients.forEach(client => client.update(description))\n\n    await clientRepository.batchUpdate(clients)\n\treturn clients\n  }\n}\n\ndomain/client.ts\n\nclass Client {\n  constructor(public readonly clientIdx, public readonly typeName) {\n    // ...\n  }\n  update(description: string) {\n    this.description = description\n  }\n}\n\ndomain/client-repository.ts\n\ninterface ClientRepository {\n  async findByIdxs(idxs: number[]): Promise<Client[]>\n  async batchUpdate(clients: Client[])\n}\n\ninfrastructure/client-repository-impl.ts\n\nclass ClientRepositoryImpl implements ClientRepository {\n  async findByIdxs(idxs: number[]): Promise<Client[]> {\n    // sql goes here\n  }\n\n  async batchUpdate(clients: Client[]) {\n    // sql goes here\n  }\n}\n\ninfrastructure/client-repository-test-impl.ts\n\nclass ClientRepositoryTestImpl implements ClientRepository {\n  async findByIdxs(idxs: number[]): Promise<Client[]> {\n    return [\n      {clientIdx: 1, typeName: 'CCB'},\n      {clientIdx: 2, typeName: 'CFX'},\n    ]\n  }\n\n  async batchUpdate(clients: Client[]) {\n    // do nothing\n  }\n}\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174489785"
  },
  {
    "pageContent": "@libs/ddd\n\n의존 관계\n\n[/wiki/download/attachments/243269997/libs-ddd.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243269997"
  },
  {
    "pageContent": "팩토리 메서드를 이용한 에그리게이트 생성\n\nhttps://ecubelabs.atlassian.net/browse/MP-3181\n[https://ecubelabs.atlassian.net/browse/MP-3181]\n\n도메인 주도 설계 11장. 팩토리 내용 정리\n\n\n\n팩토리 메서드를 사용하여 에그리게이트를 생성하는 예제\n\n// service.ts\nconst individualServiceContract = this.individualServiceContractRepository.findOneOrFail(id);\nconst collection = individualServiceContract.createCollection();\nawait this.collectionRepository.save([collection]);\n\n\n// individualServiceContract model.ts\nclass individualServiceContract {\n...\ncreateCollection():Collection{\n    return new Collection(\n        this.individualServiceId,\n        this.collectionPrice,\n        this.servicePrice,\n        ...   \n    )\n  }\n}\n\n\n\n팩토리 메서드를 효과적으로 사용하여 에그리게이트를 생성할 때 아래와 같은 이점을 얻을 수 있다.\n\n 1. Collection의 생성자 대신 유비쿼터스 언어에 부합하는 메소드 이름 사용\n\n 2. 클라이언트에서 Parameter를 전달하는 부담 약화\n\n 3. 엄격히 팩토리 메소드를 통해서만 Collection이 생성되므로 올바른 Collection Instance 생성 보장\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/738558231"
  },
  {
    "pageContent": "Optimistic\nupdate[https://ecubelabs.atlassian.net/wiki/download/attachments/1269235768/optimistic-update.gif?api=v2]\n\n * 유튜브 사례\n   \n   * “(더하기)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n     ADD TO LIBRARY” 클릭 시 API 가 성공할 것을 가정하고 그냥 UI 를 “(빼기)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/forbidden.png]\n     REMOVE FROM LIBRARY” 로 바꿔 버린다.\n   \n   * 하지만 실제로는 API 가 실패하기 때문에 새로고침 해보면 다시 “(더하기)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n     ADD TO LIBRARY” 로 바뀌어 있다.\n   \n   * API 의 응답을 기다리지 않기 때문에 사용자는 반응성이 좋다고 느끼지만 실제로 오류를 인지하지 못하고 넘어갈 수 있기 때문에 이\n     방식을 사용할 때는 장단점을 잘 따져보고 진행해야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1269235768/2021-01-28%2013-13-41.2021-01-28%2013_30_26.gif?api=v2]\n\n * 슬랙 사례 (거의 모든 메세징 앱이 전부 해당된다. 카톡, 라인도 마찬가지.)\n   \n   * 슬랙 서버가 불안정한 상황을 가정하기 위해 메세지를 보내기 전에 인터넷을 끊은 직후 메세지를 보낸다.\n   \n   * 내가 보낸 메세지는 보낸것처럼 보인다.\n     \n     * 예전 버전의 슬랙은 아직 전송되지 않은 메세지가 약 85~90%정도의 투명도로 흐릿하게 보였는데, 지금은 흐릿하지 않은 대신 메세지\n       우측에 마우스를 갖다 댔을때 툴바(?)가 보이지 않는다.\n   \n   * 인터넷을 연결한 직후 새로고침을 한다.\n     \n     * 슬랙은 잘 만들어놨기 때문에 인터넷에 다시 연결되면 pending됐던 메세지를 다시 보낸다.\n   \n   * 보낸것처럼 보였던 메세지는 실제로 전송되지 않았다.\n     \n     * 오랫동안 메세지 전송에 실패하면 나중에서야 메세지 전송에 실패했다고 뜬다.\n\n\n\n\n적용 예시\n\n * https://github.com/Ecube-Labs/haulla/pull/340\n   [https://github.com/Ecube-Labs/haulla/pull/340]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1269235768"
  },
  {
    "pageContent": "[OJT][DDD] DomainEvent\n\n도메인에 의해 일어나는 사이드 이펙트를 명시적으로 구현하기 위해 도메인 이벤트를 사용한다.\n\n\n규칙\n\n\nEVENTID는 이벤트에 작성한다.\n\n아래와 같이 정의한다.\n\n// domain/events/hello-event.ts\nexport class HelloEvent extends DddEvent {\n  static eventId = \"uuid\";\n\n  constructor(...) { ... }\n\n각 핸들러에서는 아래와 같이 사용한다.\n\n// application/service.ts\n...\n    @EventHandler(HelloEvent, {\n        eventId: HelloEvent.eventId,\n    })\n    async onGreeted(...) { ... }\n\nWhat is eventId? -> [DDD] eventId\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635825164/DDD+eventId]\n\n관련 논의: https://github.com/Ecube-Labs/payment-api/pull/92#discussion_r1095295902\n[https://github.com/Ecube-Labs/payment-api/pull/92#discussion_r1095295902]\n\n\n\n\n이벤트의 이름은 ‘일어난 일’을 표현해야 한다.\n\n * 유심 정보 변경시:\n   \n   * (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n     UsimChangedEvent\n   \n   * (오류)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n     UsimVodafoneChangedEvent, UsimLgChangedEvent, …\n\n * 제품 삭제시:\n   \n   * (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n     ProductDeletedEvent\n   \n   * (오류)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n     CcnClientDeletedEvent, ErpProductDeletedEvent, …\n\n\n\n\n동일한 이벤트를 처리하는 핸들러는 여러개일 수 있다.\n\n항상 1개의 이벤트 핸들러로 처리해야 하는것이 아니다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nDon’t\n\nclass UsimApplicationService {\n  ...\n\n  @EventHandler(UsimChangedEvent)\n  @Transactional()\n  async onUsimChanged(event: UsimChangedEvent) {\n    if (event.isVodafone) {\n      // ...\n    } else if (event.isLg) {\n      // ...\n    }\n    // ...\n  }\n}\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDo\n\nclass UsimApplicationService {\n  ...\n\n  @EventHandler(UsimChangedEvent)\n  @Transactional()\n  async onVodafoneUsimChange(event: UsimChangedEvent) {\n    if (!event.isVodafone) {\n      return;\n    }\n    // ...\n  }\n\n  @EventHandler(UsimChangedEvent)\n  @Transactional()\n  async onLgUsimChange(event: UsimChangedEvent) {\n    if (!event.isLg) {\n      return;\n    }\n    // ...\n  }\n}\n\n\n\n\n핸들러 하나가 여러개의 이벤트를 처리할 수도 있다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nDon’t\n\nclass BalanceService {\n  ...\n  \n  @EventHandler(PaymentRegisteredEvent)\n  @Transactional()\n  async onPayemntRegisteredEvent(event: PaymentRegisteredEvent){\n    ... // 같은로직\n  }\n  \n  @EventHandler(PaymentUpdatedEvent)\n  @Transactional()\n  async onPaymentUpdatedEvent(event: PaymentUpdatedEvent){\n    ... // 같은로직\n  }\n  \n  @EventHandler(PaymentDeletedEvent)\n  @Transactional()\n  async onPaymentDeletedEvent(event: PaymentDeletedEvent){\n    ... // 같은로직\n  }\n  \n  ...\n}\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDo\n\nclass BalanceService {\n  ...\n\n  @EventHandler(PaymentRegisteredEvent)\n  @EventHandler(PaymentUpdatedEvent)\n  @EventHandler(PaymentDeletedEvent)\n  @Transactional()\n  async onPaymentEvent(event: PaymentRegisteredEvent | PaymentUpdatedEvent | PaymentDeletedEvent){\n    ...\n  }\n  \n  ...\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1859584011"
  },
  {
    "pageContent": "ddd components\n\n도메인 주도 설계(Domain Driven Design)\n[/wiki/pages/createpage.action?spaceKey=SW&title=%EB%8F%84%EB%A9%94%EC%9D%B8%20%EC%A3%BC%EB%8F%84%20%EC%84%A4%EA%B3%84%28Domain%20Driven%20Design%29&linkCreation=true&fromPageId=1859420236]\n\n\n\nTODO\n\n\n\n\n\n * aggregate\n   \n   * MSA로 개발한다고 가정했을때 하나의 서비스가 하나의 aggregate이 될 수 있어야 한다.\n   \n   * aggregate 간 참조는 PK를 이용해야 한다.\n   \n   * 트랜잭션 하나당 하나의 에그리게잇만 생성/업데이트 해야한다.\n\n * domain model\n   \n   * 다른 계층(infra, application)에 종속성이 있으면 안된다.\n   \n   * POCO https://en.wikipedia.org/wiki/Plain_old_CLR_object\n     [https://en.wikipedia.org/wiki/Plain_old_CLR_object]\n\n * domain entity\n   https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-domain-model\n   [https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-domain-model]\n   \n   * 하나의 에그리게잇에 여러개의 엔티티가 존재할 수 있다.\n\n * value object\n   https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects\n   [https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects]\n\n * domain event\n   \n   * 에그리게잇간의 데이터 일관성, 트랜잭션 분리를 위해 사용된다.\n   \n   * https://www.infoq.com/articles/microservices-aggregates-events-cqrs-part-1-richardson/\n     [https://www.infoq.com/articles/microservices-aggregates-events-cqrs-part-1-richardson/]\n   \n   * https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation\n     [https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1859420236"
  },
  {
    "pageContent": "Specification (명세, Spec)\n\n\nSPECIFICATION\n\nSpecification(명세, 이하 Spec)은 어떤 객체가 평가 기준을 만족 시키는지 판정하기 위한 객체이다. Spec은 객체가 조건을\n만족하는지 확인하는 역할만 수행하므로, 평가 대상이 복잡한 평가 절차 코드와 분리되어 원래의 의도를 더 잘 나타내도록 할 수 있다.\n\nSpec은 단독으로 사용되기도 하지만, 리포지토리와 조합해서 사용할 수도 있다. 리포지토리가 Spec을 전달 받아 Spec에 정의된 조건와\n일치하는 객체를 검색하는 방법이다.\n\n\n\n\n용도\n\n현재 Spec 은 크게 아래 두가지 평가 기준을 적용하기 위한 용도로 사용되고 있다.\n\n1. 권한 확인\n\n * ex/ 현재 유저는 요청한 리소스를 읽을 수 있는 / 업데이트 할 수 있는 / 삭제할 수 있는 권한이 있는가?\n\n2. 특정 fillter 조건으로 데이터 쿼리\n\n * ex/ 주어진 id에 해당하는 객체의 status가 A일 때만 리턴\n\n * ex/ where property1 = A and property2 = B 인 객체만 리턴\n\n\n\n간단한 예시로, 아래 코드는 이대로도 충분히 기능할 것이다.\n\n// service.ts\n\nasync add (){\n if ( 현재 사용자가 admin 이라면 ){\n  const route = await routeRepository.findOneOrFail(id);\n  \n  if(condition1){\n    throw error1;\n  }\n  \n  if(condition2){\n    throw error2;\n  }\n  \n  ...\n }\n}\n\n\n\n아래처럼 리팩토링 한다고 가정하면 어떤 점이 달라질까?\n\n// service.ts\nasync add (){\n const route = await routeRepository.findSatisfying(new CollectionCreatableSpec(role, id));\n ...\n}\n\n// spec\n\nif ( 현재 사용자가 admin 이라면 ){\n  const route = await routeRepository.findOneOrFail(id);\n  \n  if(condition1){\n    throw error1;\n  }\n  \n  if(condition2){\n    throw error2;\n  }\n  \n  ...\n}\n\n\n\n어떤 조건을 가진 route가 collection을 생성할 수 있는가 는 서비스 영역 보다는 도메인 영역에 가까운 코드이다. 위처럼 관련 코드를\nspec에 정리함으로써, 서비스 영역에서는 구체적으로 어떤 조건이 필요한지 신경 쓸 필요 없이\nCollectionCreatableRouteSpec 에 파라미터를 보내는 것 만으로 원하는 결과를 얻을 수 있다.\n\n만약 조건을 수정해야 하는 경우, 해당 spec을 사용하는 서비스 영역의 코드를 모두 읽어볼 필요 없이 spec의 코드만 수정하면 해결될\n것이다.\n\n반대로, route validation과는 상관 없는 목적으로 service.add를 수정하려고 한다면 개발자는 route validation\n관련된 코드를 읽어볼 필요도 없이 작업하는 코드에만 집중할 수 있을 것이다.\n\n\n\n\n정리\n\n현재 어떤 상황에서 반드시 spec을 적용해야 한다는 룰은 존재하지 않고, 개발자의 판단에 맡기고 있다. 따라서 상황에 따라서 재사용이 어려운\n1회성 Spec\n[https://github.com/Ecube-Labs/haulla-api/blob/main/src/services/routes/domain/specs/collection-creatable-route-spec.ts]\n이 만들어질 수도 있지만, 위에서 언급한 대로\n\n 1. 특정 상황에 대한 권한을 다른 권한과 분리한다.\n\n 2. 관련 validation을 서비스 영역에서 분리해서 정리한다.\n\n과 같은 효과를 기대할 수 있으므로 충분히 의미가 있다.\n\n\n\n\n참고\n\n기존에 구현되어 있는 Spec 코드 중 일부는 입력받는 parameter에 따라 서로 다른 repository method를 호출하도록 분기\n처리되어 있다.\n\n// spec\nif(propertyA && propertyB && propertyC){\n  return anyRepository.findByPropertyAAndProPertyBAndPropertyC(...);\n} \nif(propertyA && propertyB){\n  return anyRepository.findByPropertyAAndPropertyB(...);\n}\n\n그러나 최근에는 find로 통일하는 방향을 권장하고 있으므로, 레거시가 된 코드를 작업하게 된다면 조금씩 리팩토링 하는 작업이 필요하다.\n\n// spec\nreturn anyRepository.find(...);\n\n// repository\nasync find(props){\n  ...\n  where : stripUndefined({...props})\n}\n\nref. https://github.com/Ecube-Labs/haulla-api/pull/1304#discussion_r914384225\n[https://github.com/Ecube-Labs/haulla-api/pull/1304#discussion_r914384225]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2512879622"
  },
  {
    "pageContent": "DDD?\n\n\n\n * Layers in DDD\n   * Application Layer\n   * Domain model layer\n   * Infrastructure layer\n * 참고\n\n\n\n\n\n\n\nLAYERS IN DDD\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/128188426/image2019-3-29_11-2-20.png?api=v2]\n\nhttps://docs.microsoft.com/ko-kr/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/ddd-oriented-microservice\n[https://docs.microsoft.com/ko-kr/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/ddd-oriented-microservice]\n\n백엔드는 위와 같이 Application Layer, Domain model layer, Infrastructure layer 로 나뉘어야 한다\n\n\nAPPLICATION LAYER\n\n사용자의 요청을 받는 레이어\n\nWeb API, gRPC, ... 다양한 기술이 사용될 수 있다\n\nCCN API 의 route controller 가 여기에 해당한다\n\n\nDOMAIN MODEL LAYER\n\n비즈니스 로직을 처리하는 레이어\n\n다음의 코드는 가상 쓰레기통인 경우 capacity 를 수정하는 코드이다\n\nif (capacity && client.typeName === 'Bin') {\n  // 가상 쓰레기통만 capacity 수정 가능\n  queries.push(ctx.model.client.updateClientsVirtual.call(conn, [clientIdx], { capacity }));\n}\n\n\"가상 쓰레기통인 경우 capacity가 수정가능하다\" 는 비즈니스 로직으로 application layer 와는 무관해야 한다\n\n\n\n\n현재 상태에서 CCN API 가 앱과의 통신에서 gRPC 를 지원해야 한다면 소스 구조는 다음과 같이 될것이다\n\n| -- src/routes/web/clients/_clientIdx/patch.js\n    ...\n    if (capacity && client.typeName === 'Bin') {\n        // 가상 쓰레기통만 capacity 수정 가능\n        queries.push(ctx.model.client.updateClientsVirtual.call(conn, [clientIdx], { capacity }));\n    }\n    ...\n\n| -- src/routes/grpc/clients/_clientIdx/patch.js\n    ...\n    if (capacity && client.typeName === 'Bin') {\n        // 가상 쓰레기통만 capacity 수정 가능\n        queries.push(ctx.model.client.updateClientsVirtual.call(conn, [clientIdx], { capacity }));\n    }\n    ...\n\n비즈니스 로직이 \"가상 쓰레기통인 경우 capacity가 수정가능하다\" 에서 \"가상 쓰레기통인 경우 capacity가 200 보다 작은 값으로만\n수정가능하다\" 로 바뀐다면 수정해야 하는 곳이 두개 생긴다\n\n개발자가 깜박하고 한곳만 수정한다면 버그를 유발하게 되고 동일한 테스트를 두개의 endpoint 에 대해서 진행해야 하기 때문에 테스트가\n복잡해진다\n\n이처럼 application layer 와 무관한 로직은 domain model layer 에서 처리하도록 해야 한다\n\n\n\n\n| -- src/routes/web/clients/_clientIdx/patch.js\n    ...\n    client.updateCapacity(clientIdx, capacity);\n    ...\n\n| -- src/routes/grpc/clients/_clientIdx/patch.js\n    ...\n    client.updateCapacity(clientIdx, capacity);\n    ...\n\n| -- src/???/client.js\n    ...\n    function updateCapacity(clientIdx, capacity) {\n        ...\n        if (capacity && client.typeName === 'Bin') {\n            // 가상 쓰레기통만 capacity 수정 가능\n            queries.push(ctx.model.client.updateClientsVirtual.call(conn, [clientIdx], { capacity }));\n        }\n        ...\n    }\n\n위와 같이 domain model layer 가 존재하면 비즈니스 로직이 \"가상 쓰레기통인 경우 capacity가 수정가능하다\" 에서 \"가상\n쓰레기통인 경우 capacity가 200 보다 작은 값으로만 수정가능하다\" 로 바뀌어도 쉽게 대응 가능하다\n\ncapacity 관련 비즈니스 로직이 복잡하게 바뀌어도 변경 및 테스트가 쉬워진다\n\n\n\n\nTODO\n\nCA 에는 domain model layer 가 없고 route controller 에 application layer 와 domain\nmodel layer 가 혼합되어 있다\n\ndomain model layer 가 분리되도록 리팩토링을 점진적으로 진행해야 한다\n\n\nINFRASTRUCTURE LAYER\n\n실제 데이터 영속성을 담당하는 layer\n\ndomain model layer 에서 client.create(...) 한다면 client 정보는 mysql 에 저장할 것인가? redis?\nmongodb?\n\napplication layer, domain model layer 는 이런것에 관심을 가질 필요가 없다\n\n데이터가 어딘가에 손실되지 않고 저장되고 조회만 되면 그것으로 충분\n\n\n\n\nCA는 대부분 데이터를 mysql 에 저장한다\n\n쿼리를 짤때는 쿼리는 데이터 영속성에 대한 동작만 수행해야 한다\n\n비즈니스 로직이 쿼리에 포함되면 안된다\n\n\n\n\n또 쿼리에서 domain model 간의 관계를 정의해서도 안 된다\n\n다음의 두 코드를 생각해보자\n\nCode A\n\n// code. 음식물 쓰레기 처리 가능한 쓰통 조회\nconst clients = getClientByWasteType(\"Food\")\n\n// query. getClientByWasteType\nselect\n  c.*\nfrom client as c\njoin relation_client_options as rco on c.idx = rco.client_idx\njoin options as o on rco.option_idx = o.idx\nwhere o.option_type = \"Waste Type\" and o.option_name = ?\n\n\n\n\nCode B\n\n// code. 음식물 쓰레기 처리 가능한 쓰통 조회\nconst allClients = getClients()\nconst foodWasteTypeIdxs = getOptions(clients.map(c => c.tagIdx)).filter(o => o.option_name == \"Food\").map(o => o.idx)\n\nconst clients = allClients.filter(c => foodWasteTypeIdxs.includes(c.tagIdx))\n\n// query. getClients\nselect\n  c.*,\n  rco.option_idx as tag_idx\nfrom client as c\njoin relation_client_options as rco on c.idx = rco.client_idx\n\n// query. getOptions\nselect\n  o.*\nfrom options\n\n\n\n\nCode A 와 Code B 의 clients 는 동일한 값이다\n\nCode A 는 client 와 options 모델의 관계를 join 으로 정의해버리는데 쿼리가 짧다면 문제가 없지만 쿼리가 길어질수록 다른\n개발자들이 이해하기 힘들어진다\n\n또 추후에 성능 문제 때문에 options 를 redis 에 저장해야 한다면 code 도 고쳐야 하고 쿼리도 고쳐야 한다\n\n\n\n\nCode B 는 분명히 Code A 보다 성능이 떨어진다\n\n하지만 코드를 분석하는게 쿼리를 분석하는것보다 쉽기 때문에 다른 개발자들이 이해하기 더 쉽다\n\n또 options 를 redis 에 저장해야 한다면 getOptions() 만 고치면 되기 때문에 리팩토링이 용이하다\n\n\n\n\n\n참고\n\nDDD Start! 요약 [https://github.com/iamkyu/TIL/tree/master/books/summary]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/128188426"
  },
  {
    "pageContent": "1. ddd-context\n\nTL;DR\n\nddd-context 는 C#, Java 에서 thread per request 를 통해 공유되는 context 에 해당한다. Node.js 는\nsingle thread 모델 이지만 typedi 를 이용해 context per request 구현이 가능하다.\n\n\n\n * Overview\n * API\n   * <static> of: (txId: string) => DddContext\n   * dispose: () => void\n   * get: <T>(clazz: new (...args: any[]) => T) => T\n\n\nOVERVIEW\n\n다음과 같은 코드가 있다.\n\nclass UserService {\n  userRepository: UserRepository;\n  smsRepository: SmsRepository;\n  \n  async changeName(userId: number, name: string) {\n    const user = this.userRepository.findOne(userId);\n    user.changeName(name);\n    await this.userRepository.save(user);\n    await this.smsRepository.save(new Sms(`Your name's been changed to ${name}`));\n  }\n}\n\n이름이 변경만 성공하거나 SMS 만 발송되거나 하는 상황이 발생하면 안된다. (둘 다 성공하던지 or 둘 다 실패하던지)\n위와 같은 문제를 해결하기 위해 트랜잭션을 사용한다.\n\nuserRepository 와 smsRepository 를 같은 트랜잭션으로 묶으려면 두 레파지토리가 동일한 db connection 을 얻을\n수 있어야 한다. C#, Java 의 전통적인 웹 프레임웤들은 thread per request 로 동작하기 때문에 이 목적을 쉽게 달성할 수\n있다.\n\n// C#, Java pseudo code\nclass UserService {\n  userRepository: UserRepository;\n  smsRepository: SmsRepository;\n  \n  async changeName(userId: number, name: string) {\n    Thread.currentThread().set('conn', new DbConnection().startTransaction());\n    const user = this.userRepository.findOne(userId);\n    user.changeName(name);\n    await this.userRepository.save(user);\n    await this.smsRepository.save(new Sms(`Your name's been changed to ${name}`));\n    Thread.currentThread().get('conn').commitTransaction();\n  }\n}\n\nclass UserRepository {\n  findOne(userId: number) {\n    return Thread.currentThread().get('conn').query(`SELECT * FROM USER WHERE USER_ID=${userId}`);\n  }\n  // ...\n}\n\n\n\nNode.js 는 single thread 모델이기 때문에 위와 같은 구현이 불가능하며 db connection 을 계속 파라미터로 전달하거나\n함수에 bind 해줘야 한다.\n\n// Node.js pseudo code\n// CCN-CURRENT 에서 conn 을 파라미터로 계속 전달하도록 구현한 방식\n// 쿼리마다 분리된 method - findUser, saveUser, ... 존재\nasync changeName(userId: number, name: string) {\n  startTransacion(async (conn) => {\n    const user = await findUser(conn, userId);\n    user.changeName(name);\n    await saveUser(conn, user);\n    await sendSms(conn, new Sms(`Your name's been changed to ${name}`));\n  })\n}\n\n// Node.js pseudo code\n// CCN-API 에서 conn 을 함수에 bind 하는 방식\n// CCN-CURRENT 에서 쿼리마다 분리된 method 를 사용하는 것에 문제의식을 느끼고 queryModel 개념 도입\n// queryModel 은 DDD 에서 얘기하는 레파지토리와 유사한 형태\nasync changeName(userId: number, name: string) {\n  const conn = startTransaction();\n  const user = userModel.bind({ conn }).findOne(userId);\n  user.changeName(name);\n  await userModel.bind({ conn }).save(user);\n  await smsModel.bind({ conn }).save(new Sms(`Your name's been changed to ${name}`));\n}\n\n\n\ntypedi [https://github.com/typestack/typedi] 를 이용하면 Node.js 에서도 쉽게 request 별로\n격리된 무언가를 만들어낼 수 있다.\n\n// Node.js pseudo code\napp.patch('/users/:userId', async (req, res) => {\n  const containerId = uuid();\n  const container = Container.of(containerId);\n  \n  container.set('conn', new DbConnection.startTransaction());\n  \n  const userService = container.get(UserService);\n  await userService.changeName(req.params.userId, req.body.name);\n  \n  container.get('conn').commitTransaction();\n  Container.reset(containerId); // 이걸 하지 않으면 memory leak 이 발생해 서버가 터진다\n});\n\n@Service()\nclass UserService {\n  @Inject()\n  userRepository: UserRepository;\n  @Inject()\n  smsRepository: SmsRepository;\n  \n  async changeName(userId: number, name: string) {\n    const user = this.userRepository.findOne(userId);\n    user.changeName(name);\n    await this.userRepository.save(user);\n    await this.smsRepository.save(new Sms(`Your name's been changed to ${name}`));\n  }\n}\n\n@Service()\nclass UserRepository {\n  @Inject('conn')\n  conn: DbConnection;\n  \n  findOne(userId: number) {\n    return this.conn.query(`SELECT * FROM USER WHERE USER_ID=${userId}`);\n  }\n  // ...\n}\n\n@Service()\nclass SmsRepository {\n  @Inject('conn')\n  conn: DbConnection;\n  \n  save(sms: Sms) {\n    return this.conn.insert(sms);\n  }\n  // ...\n}\n\n\n\nDddContext 는 위의 아이디어를 이용해 request 내에서 공유 되도록 설계한 context 객체이다.\n\n나중에 https://nodejs.org/api/async_hooks.html\n[https://nodejs.org/api/async_hooks.html] 이 stable release 되면 async_hooks 를 이용해서\n구현할 수도 있을 것 같다.\n\n\nAPI\n\n\n<STATIC> OF: (TXID: STRING) => DDDCONTEXT\n\ncontext 를 생성하는 factory method.\n\n\nDISPOSE: () => VOID\n\ncontext cleanup.\n\ncontext 사용이 끝나면 호출해줘야 한다. 그렇지 않고 서버가 계속 살아 있으면 결국 OOM 으로 서버가 터진다.\n\n\nGET: <T>(CLAZZ: NEW (...ARGS: ANY[]) => T) => T\n\ncontext 에서 유일한 clazz 의 instance (singleton) 을 반환하는 함수.\n\nSpring 에서 Context getBean 과 유사함.\n\nhttps://gmlwjd9405.github.io/2018/11/10/spring-beans.html\n[https://gmlwjd9405.github.io/2018/11/10/spring-beans.html]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270004"
  },
  {
    "pageContent": "2. ddd-model\n\nTL;DR\n\nDDD 에서 도메인 이벤트를 발행하는 주체는 aggregate 이다. 이벤트의 발행은 aggregate 의 업데이트와 일관성을 유지해야 한다.\n\n\n\n다음과 같은 코드가 있다.\n\nclass UserService {\n  userRepository: UserRepository;\n  \n  async changeName(userId: number, name: string) {\n    const user = this.userRepository.findOne(userId);\n    user.changeName(name);\n    await this.userRepository.save(user);\n  }\n}\n\nclass User {\n  name: string;\n  \n  changeName(name: string) {\n    this.name = name;\n    publishEvent({ type: 'USER_NAME_CHANGED', name });\n  }\n}\n\n이름 변경만 성공하거나 이름 변경 완료 이벤트만 발행되거나 하는 상황이 발생하면 안된다. (둘 다 성공하던지 or 둘 다 실패하던지)\n\n이걸 달성하는 가장 쉬운 방법은 도메인 모델과 이벤트 저장소가 같은 영속성을 사용하도록 하는 것이다. 그러면 트랜잭션으로 둘을 묶어 버리면\n된다.\n\nC#, Java 에서는 thread 단위로 트랜잭션을 실행하기 때문에 publishEvent 에서 current thread 를 이용해 쉽게\n둘을 트랜잭션으로 묶을 수 있다.\n\n// C#, Java pseudo code\nclass UserService {\n  userRepository: UserRepository;\n  \n  async changeName(userId: number, name: string) {\n    Thread.currentThread().set('conn', new DbConnection().startTransaction());\n    const user = this.userRepository.findOne(userId);\n    user.changeName(name);\n    await this.userRepository.save(user);\n    Thread.currentThread().get('conn').commitTransaction();\n  }\n}\n\nclass User {\n  name: string;\n  \n  changeName(name: string) {\n    this.name = name;\n    publishEvent({ type: 'USER_NAME_CHANGED', name });\n  }\n}\n\nclass UserRepository {\n  save(user: User) {\n    Thread.currentThread().get('conn').insert(user);\n  }\n}\n\nstatic publishEvent(event) {\n  Thread.currentThread().get('conn').insert(event);\n}\n\n\n\nNode.js 는 single thread 모델이기 때문에 위와 같은 구현이 불가능하며 Repository 가 Model 에 의존하도록 만드는\n게 최선이다.\n\n// Node.js pseudo code\n// @Service(), @Inject() 는 https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270004/1.+ddd-context 참고\n@Service()\nclass UserService {\n  @Inject()\n  userRepository: UserRepository;\n  \n  async changeName(userId: number, name: string) { \n    const user = this.userRepository.findOne(userId);\n    user.changeName(name);\n    await this.userRepository.save(user);\n  }\n}\n\nclass User {\n  name: string;\n  \n  changeName(name: string) {\n    this.name = name;\n    publishEvent({ type: 'USER_NAME_CHANGED', name });\n  }\n  \n  events = [];\n  publishEvent(event) {\n    this.events.push(event);\n  }\n}\n\n@Service()\nclass UserRepository<User> {\n  @Inject('conn')\n  conn: DbConnection;\n  \n  save(user: User) {\n    // user 저장과 events 저장을 트랜잭션으로 묶을 수 있다!\n    conn.insert(user);\n    conn.insert(user.events);\n  }\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/243695689/image-20191202-044734.png?api=v2]\n\n메시지 큐를 도입하게 되면 이벤트 저장소를 버리는게 아니라 메시지 큐가 이벤트 저장소를 구독하도록 해야 한다.\n\n(이벤트 저장소를 버리면 도메인 모델과 메시지 큐의 데이터 일관성이 맞아야 하는데 -도메인 모델이 DB에 반영 되면 메시지 큐에도 추가 되어야\n하고 or 둘 다 실패해야 하고- 이것은 구현이 힘들고 메시지 큐 교체가 힘들어 진다.)\n\n\n\n참고\n\n“도메인 주도 설계 구현” p.380\n\n“도메인 주도 설계 구현” p.398 - 메시징 인프라의 일관성",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243695689"
  },
  {
    "pageContent": "2. ddd-service\n\nDddService 는 DddContext 에 대한 reference 를 갖고 있는거 말고는 특별한 게 없다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243696547"
  },
  {
    "pageContent": "3. ddd-repository\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270153"
  },
  {
    "pageContent": "[DDD] eventId\n\neventId는 이큐브랩 내부적으로 개발해 사용중인 이벤트 시각화 도구에서 이벤트를 구분하기 위해 존재한다.\nex) https://haulla-domain.ecubelabs.xyz/events\n[https://haulla-domain.ecubelabs.xyz/events]\n\n이 값은 어떠한 문자열 값으로 지정해도 상관 없고, 따로 지정하지 않으면 이벤트의 이름을 eventId로 사용한다.\n굳이 구분이 필요하지 않은 경우에는 지정하지 않아도 된다.\n\n하나의 Monorepo 안에서 각자 다른 프로젝트에서 다른 용도로 발행하는 이벤트 이름이 같을수 있고, 이런 경우 eventId를 별도로\n지정해서 서로 다른 이벤트임을 구분할 수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635825164"
  },
  {
    "pageContent": "[OJT][RDB] shared lock & exclusive lock\n\n\n\nshared lock과 exclusive lock의 차이점을 쉽게 설명하는 글이 있어서 공유합니다. 글의 내용을 토대로 정리했고, 원문이\n궁금하시면 아래 링크를 읽어보시길 바랍니다.\n\nhttps://stackoverflow.com/questions/11837428/whats-the-difference-between-an-exclusive-lock-and-a-shared-lock\n[https://stackoverflow.com/questions/11837428/whats-the-difference-between-an-exclusive-lock-and-a-shared-lock]\n\n\n개요\n\nshared lock은 흔히 ‘read lock', exclusive lock은 흔히 'write lock’이라고 불린다. shared는\nread할 때, exclusive는 write 할 때 걸리는 lock이라고 보면 된다.\n\n\n\nlock을 해야 하는 이유는 일관성 때문이다.\n\n\nSHARED LOCK\n\nshared lock은 동시에 여러 shared lock이 걸릴 수 있다. 즉, shared lock이 걸리면 동시에 여러 read 작업이\n가능하다. 단, write 작업은 할 수 없다.\n\n\nEXCLUSIVE LOCK\n\nexclusive lock이 걸리면 다른 lock을 배척한다. 즉, exclusive lock이 걸리면 동시에 한 write 작업만 가능하고,\nread도 할 수 없다.\n\n\n설명\n\n위 링크에서 shared lock과 exclusive lock을 교실에 비유해서 쉽게 설명하고 있습니다.\n\n> 교실에 칠판, 선생님, 학생들이 있을 때, 칠판은 lock 될 수 있는 대상(객체), 선생님은 writer 그리고 학생들은 다수의\n> readers 이라고 볼 수 있겠다.\n> \n> \n> \n> 1. exclusive lock 상황\n> \n> - 선생님이 칠판에 무언가를 쓸 때, 여러 학생들은 선생님 등에 가려서 볼 수 없다.\n> \n> → exclusive lock이 걸린 경우 shared lock이 걸릴 수 없다.\n> \n> - 다른 선생님이 와서 동시에 같은 칠판에 글을 쓸 수 없을 뿐더러 쓰게 되면 칠판의 내용이 혼란스러워진다.\n> \n> → exclusive lock이 걸린 경우 exclusive lock을 동시에 걸 수 없다.\n> \n> \n> \n> 2. shared lock 상황\n> \n> - 선생님이 판서를 마치고 옆으로 비켜있는 때 여러 학생들은 동시에 칠판을 읽고 노트에 필기할 수 있다.\n> \n> → shared lock은 동시에 여러 개 얻을 수 있다.\n> \n> - 선생님이 다음 내용을 판서하기 위해 학생들이 모두 필기하기를 기다린다.\n> \n> → shared lock이 한 개 이상 존재하면, exclusive lock을 걸 수 없다.\n\n\n\n\n부연\n\nread가 계속 끊임 없이 요청되는 경우, exclusive lock을 획득할 수 없어 write 할 수 없는 경우가 발생할 수 있다. 이런\n경우 를 write starvation(기아)라 한다.\n\n\n\n트랜잭션으로 read 후 write하는 경우에도 일관성이 깨질 수 있다. SQL 트랜잭션 - 믿는 도끼에 발등 찍힌다\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/175964416/SQL+-]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/286851441"
  },
  {
    "pageContent": "[OJT][RDB] DB Transaction isolation Level & Lock\n\n\n\nhttps://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html\n[https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html]\n\n관련 지식을 공부하면서 정리한 내용을 공유합니다. 혹시 잘못 이해한 부분이 있다면 코멘트 부탁드립니다.\n\n\n\n\nTRANSACTION의 정의\n\n * 상태를 변화 시키기 위해 수행하는 하나의 작업 단위\n\n * 데이터베이스의 완전성을 보장하기 위한 것\n\n\n\nTRANSACTION ISOLATION LEVEL ( 격리 수준 )\n\n * Transaction 에서 일관성이 없는 데이터를 허용하도록 하는 수준\n\n * Read Uncommitted (잘 사용하지 않음), Read Committed, Repeatable Read, Serializable\n\nRead Committed\n\n * 대부분의 DBMS에서 기본으로 설정\n\n * 커밋된 데이터만 읽어오는 격리 수준\n\n * Transaction A에서 데이터를 생성하고 commit하기 전이라면, Transaction B는 해당 데이터를 읽을 수 없다.\n\nRepeatable Read\n\n * 데이터 조회 시 항상 동일한 데이터 응답을 보장한다.\n\n * Transaction이 완료 될때까지 다른 Transaction은 해당 데이터를 수정할 수 없다. \n\n * 데이터를 select * from A where condition이라고 지정했다면 condition에 해당하는 row를 insert하는\n   것은 가능하다.\n\nSerializable\n\n * Transaction이 완료될 때까지, 다른 Transaction은 해당 데이터에 대한 수정/입력이 불가능하다.\n   \n\n\n\nDB LOCK\n\n\nLock의 분류 (더 자세한 설명은 [OJT][RDB] shared lock & exclusive lock\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/286851441/OJT+RDB+shared+lock+exclusive+lock]\n참고 )\n\nShared Lock ( = S lock)\n\n * Read lock\n\n * 여러 transaction이 동시에 같은 row에 S lock을 걸 수 있다.\n\n * S lock이 걸려있는 row에 다른 transactional X lock을 걸 수 없다. \n   \n   * ( 다른 transaction이 읽고 있는 row를 수정/삭제 할 수 없다.) \n\nExclusive Lock ( = X lock)\n\n * Write lock\n\n * X lock이 걸려있는 row에는 다른 transaction이 S/X lock을 모두 걸 수 없다. \n   \n   * ( 다른 transaction이 수정/삭제하고 있는 row를 읽기/수정/삭제 for update 할 수 없다. for update가\n     아닌 읽기는 가능하다.)\n\nIntention Lock (= IS, IX lock)\n\n * Table-level Lock\n\n * row에 대해서 나중에 어떤 row-level 락을 걸 것을 알려주기 위해 미리 table-level에 걸어두는 lock\n\n * Intention Shared Lock (IS)\n   \n   * transaction이 shared lock을 잡을 의도가 있음을 의미\n\n * Intention Exclusive Lock (IX)\n   \n   * transaction이 exclusive lcok을 잡을 의도가 있음을 의미\n\n * S lock을 사용하는 쿼리 끼리는 같은 row에 접근 가능하다. (Shared)\n\n * X lock이 걸린 row에는 다른 쿼리가 접근 불가능 하다. (Exclusive)\n\n * 모든 lock은 해당 transaction이 commit/rollback 될 때 unlock된다.\n\n\n\nX\n\nIX\n\nS\n\nIS\n\nX\n\n충돌\n\n충돌\n\n충돌\n\n충돌\n\nIX\n\n충돌\n\n허용\n\n충돌\n\n허용\n\nS\n\n충돌\n\n충돌\n\n허용\n\n허용\n\nIS\n\n충돌\n\n허용\n\n허용\n\n허용\n\n\n\nPESSIMISTIC LOCK VS OPTIMISTIC LOCK \n\n(Transaction\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/236879899/Transaction] 참고)\n\n\nPESSIMISTIC LOCK : 비관적 락 , 선점잠금 (… FOR UPDATE라는 구문이 추가로 붙는다)\n\n * transaction의 충돌이 발생한다고 가정하고, 우선 X lock을 거는 방법\n\n * transaction A에서 lock을 건 후, 다른 transaction B에서 해당 데이터를\n   insert/update/delete/select for update하려고 하면, A가 commit될 때까지 B는 계속 대기하게 된다. (\n   … for update가 아닌 select만 한다면 read는 가능하다. 이 때 읽어지는 값은 isolation level 에 따라\n   다르다.)\n\n * 더 느리게 돌아가는 대신, 더 critical 한 영역에 사용한다. Ex/ bidding\n\n * 쿼리문에서 where절을 빼먹으면 테이블 전체에 X lock이 걸린다. 이 경우  커밋이 될 때까지 다른 transaction은 테이블\n   전체에 select 밖에 못하므로 지양한다.\n\n\nOPTIMISTIC LOCK: 낙관적 락 , 비선점 잠금\n\n * 버전 정보를 이용하여 업데이트를 처리하는 방법\n\n * 변경한 데이터를 실제 DBMS에 반영하는 시점에 변경 가능 여부를 확인한다.\n\n * 더 빠르게 처리하기 위한 경우 사용한다. ex/ collection\n\n\n\n\nINTENTION LOCK\n\n\nSELECT … LOCK IN SHARE MODE 구문이 실행되면\n\n * Intention Shared Lock (IS Lock) 이 테이블에 걸림\n\n * row-level 에 S-Lock이 걸림\n\n\nSELECT … FOR UPDATE, INSERT, DELETE, UPDATE 구문이 실행되면\n\n * Intention exclusive lock (IX Lock)이 테이블에 걸림\n\n * row-level에 X-Lock이 걸림\n\n\n출처\n\nhttps://effectivesquid.tistory.com/entry/데이터베이스-Isolation-Level\n[https://effectivesquid.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-Isolation-Level]\n\nhttps://suhwan.dev/2019/06/09/transaction-isolation-level-and-lock/\n[https://suhwan.dev/2019/06/09/transaction-isolation-level-and-lock/]\n\nhttps://effectivesquid.tistory.com/entry/Optimistic-Lock과-Pessimistic-Lock\n[https://effectivesquid.tistory.com/entry/Optimistic-Lock%EA%B3%BC-Pessimistic-Lock]\n\nhttps://medium.com/@chrisjune_13837/db-transaction-isolation-level-f21b6d1e64eb\n[https://medium.com/@chrisjune_13837/db-transaction-isolation-level-f21b6d1e64eb]\n\nhttps://singun.github.io/2019/03/10/mysql-innodb-locking/\n[https://singun.github.io/2019/03/10/mysql-innodb-locking/]\n\nhttps://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-intention-locks\n[https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-intention-locks]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/619839493"
  },
  {
    "pageContent": "[OJT][RDB] N+1 Query Problem\n\n\n\n\nN+1 QUERY PROBLEM\n\n * 쿼리 1번으로 N건의 데이터를 가져오고 각 N건으로 부터 속성 값을 얻기 위해 다시 N번 쿼리를 반복하여 수행하는 문제.\n\n * DB 쿼리 수행 비용이 크므로(빈번한 I/O 발생) eager 로딩 등으로 해결하는 것이 권장.\n\n\nEAGER LOADING\n\n * 로딩 시 참조해야하는 정보를 미리 명시하는 일\n\n * ORM 활용 시 흔히 발생할 수 있는 N+1 문제 해결 가능\n\n * Lazy Loading의 반대 개념\n\n\n문제 상황\n\n/* \n두 모델\ncat { id, kind, name }\ncatColor { kind, color }\n로부터, result {id, kind, name, color }[] 를 쿼리하려고 한다. \n*/\n\nconst cats = await this.catRepository.findByIds(catIds); // SELECT * FROM Cat WHERE catId IN (catIds);\n\n// N+1 Query Problem 상황\nconst colors = cats.map((cat) => \n  // N건의 고양이 데이터에 대해 N번의 쿼리를 반복한다\n  this.catColorRepository.findByKinds(cat.kind); // SELECT * FROM CatColor WHERE kind = 'Russian Blue';\n    \n)\n\n\nEAGER LOADING 적용\n\nSELECT Cat.*, CatColor.* from Cat WHERE catId IN (catIds)\nJOIN CatColor\nON Cat.kind == CatColor.kind \n\n\n하지만 EAGER LOADING을 사용할 수 없는 경우에는 어떻게 해결해야 할까?\n\n * Map나 lodash의 keyBy를 사용해 아래처럼 해결할 수도 있다.\n\n// Map을 사용하는 경우\nconst cats = await this.catRepository.findByIds(catIds);\n                                    \nconst catColorsMap = await this.catColorRepository.findAll()\n                                                  .then((catColors)=> new Map(catColors.map((catColor)=> [catColor.kind], catColor)));\n\nconst result = cats.map((cat)=> {\n                                return {\n                                    ...cat, \n                                    color: catColorsMap.get(cat.kind).color\n                                });\n                \n// lodash를 사용하는 경우\nconst cats = await this.catRepository.findByIds(catIds);\n\nconst catColorKindOf = _.keyBy(await this.catColorRepository.findAll(),'kind');\n\nconst result = cats.map((cat)=> {\n                                return {\n                                    ...cat, \n                                    color: catColorKindOf[cat.kind].color\n                                });\n\n\n\n참고 문서\n\n * https://zetawiki.com/wiki/N%2B1_쿼리_문제\n   [https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C]\n\n * https://zetawiki.com/wiki/이른_로딩\n   [https://zetawiki.com/wiki/%EC%9D%B4%EB%A5%B8_%EB%A1%9C%EB%94%A9]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/652968156"
  },
  {
    "pageContent": "[OJT][RDB] UUIDs are Popular, but Bad for Performance\n\nhttps://www.percona.com/blog/2019/11/22/uuids-are-popular-but-bad-for-performance-lets-discuss/\n[https://www.percona.com/blog/2019/11/22/uuids-are-popular-but-bad-for-performance-lets-discuss/]\n\nTL;DR\n\n * MySQL(innodb) 는 B+ Tree 형태로 데이터를 저장한다.\n   \n   * B+ Tree\n     \n     * https://www.youtube.com/watch?v=h6Mw7_S4ai0\n       [https://www.youtube.com/watch?v=h6Mw7_S4ai0]\n     \n     * https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\n       [https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html]\n   \n   * UUID 를 PK 로 사용하면 insert 시 cache hit 확률이 거의 없으므로 auto inc 에 비해 성능이 안좋다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2106228829"
  },
  {
    "pageContent": "[OJT][RDB] varchar\n\nvarchar\n\n * 가변 길이 문자열을 저장하기 위해 사용 되는 컬럼 타입\n\n * 길이 + 데이터로 저장 된다.\n\n * varchar(0~255) 까지는 길이를 저장하기 위해 1 byte 사용\n\n * varchar(n>255) 는 길이를 저장하기 위해 2 bytes 사용",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2297659412"
  },
  {
    "pageContent": "[OJT][RDB] LexoRank\n\n * 지라에서 사용하는 랭킹(정렬) 시스템\n   \n   * 주로 칸반보드에서 사용된다고 함\n     \n     \n\nid\n\ncontent\n\nrank\n\nnanoId1\n\ncontent1\n\n1\n\nnanoId2\n\ncontent2\n\n2\n\nnanoId3\n\ncontent3\n\n3\n\n\n\n…\n\n\n\nrank를 number로 1, 2, 3, …, 93893749 로 하였을 때, 9만번째 데이터를 2번째로 옮기고 싶다면?\n\n→ rank 2 ~ 9만번째까지의 데이터 이동이 필요하다.\n\n2 → 3, 3 → 4, …\n\n\n\n\n기본\n\n * LexoRank는 해당 문제를 해결하기 위해 rank를 문자열로 관리한다. (사전식 정렬)\n\nid\n\ncontent\n\nrank\n\nnanoId1\n\ncontent1\n\nAAA\n\nnanoId2\n\ncontent2\n\nBBB\n\nnanoId3\n\ncontent3\n\nCCC\n\n\n\n…\n\n\n\nnanoIdBig\n\ncontentBig\n\nZZZ\n\n위처럼 랭크가 되어있다고 했을 때 nanoIdBig을 2번째 순서로 옮기고 싶다면?\n\nid\n\ncontent\n\nrank\n\nnanoId1\n\ncontent1\n\nAAA\n\nnanoId2\n\ncontent2\n\nBBB\n\nnanoId3\n\ncontent3\n\nCCC\n\n\n\n…\n\n\n\nnanoIdBig\n\ncontentBig\n\nAZZ\n\n이런식으로 UPDATE product SET rank=\"AZZ\" WHERE id=\"nanoIdBIg\"; 과 같이 하나의 row만 변경하면 될\n것이다.\n\n\n\n\nUSE BUCKET\n\n그 외에 bucket 이라는 개념이 있는데 이는 리밸런싱용으로 사용된다.\n\nid\n\ncontent\n\nrank\n\nnanoId1\n\ncontent1\n\nAAA\n\nnanoId2\n\ncontent2\n\nBBB\n\nnanoId3\n\ncontent3\n\nCCC\n\n\n\n…\n\n\n\nnanoBig\n\ncontBig\n\nZZY\n\nnanoIdBig\n\ncontentBig\n\nZZZ\n\nZZY와 ZZZ 사이의 간격이 너무 좁아 더이상 사용할 수 없을 때 bucket 개념을 사용하면 좋다\n\nid\n\ncontent\n\nrank\n\nnanoId1\n\ncontent1\n\n0|AAA\n\nnanoId2\n\ncontent2\n\n0|BBB\n\nnanoId3\n\ncontent3\n\n0|CCC\n\n\n\n…\n\n\n\nnanoBig\n\ncontBig\n\n1|AAA\n\nnanoIdBig\n\ncontentBig\n\n1|ZZZ\n\n이렇게 하면 0번 bucket 다음으로 1번 bucket이 올것이고 nanoBig row와 nanoIdBig row사이에는 또다시 많은수의\n간격이 생길 수 있다.\n\n\n\n이런식으로 리밸런싱을 해가면서 하면 순서를 바꿀 때 O(1)로 할 수 있다.\n\n\n참고\n\nhttps://www.youtube.com/watch?v=OjQv9xMoFbg\n[https://www.youtube.com/watch?v=OjQv9xMoFbg]\n\nhttps://github.com/kvandake/lexorank-ts\n[https://github.com/kvandake/lexorank-ts]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2862481952"
  },
  {
    "pageContent": "Elasticsearch stage 접근 방법(port forwarding)\n\n\n\n\n스테이지 키바나 링크\n\nhttps://kibana-stage.ecubelabs.xyz/ [https://kibana-stage.ecubelabs.xyz/]\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2707783686/2023-05-12#ECK\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2707783686/2023-05-12#ECK]\n를 참고하여 개인 계정, 초기 비밀번호를 확인하고 반드시 비밀번호를 변경해준다.\n계정이 없거나 비밀번호를 잊어버린 경우, 김정호(Theo) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/620098dad362410069110da2?ref=confluence]\n에게 문의.\n\n\n포트 포워딩\n\n컴퓨터 네트워크 상에서 패킷이 방화벽이나 라우터 같은 네트워크 게이트를 지날 때 IP 주소와 포트 번호 결합의 통신 요청을 다른 곳으로 넘겨주는\n네트워크 주소 변환\n\nprivate subnet 에 위치한 elastic 에 접근하기 위해 포트포워딩을 이용한다. ref. System Architecture\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2211479553/System+Architecture]\n\n\n\n\n로컬에서 키바나 접속하기\n\n준비물 : aws config / aws credential\n\n\n\n * kibana port forwarding cli\n\nkubectl port-forward services/kibana-kb-http 아무거나1:5601 -n elastic-system\n\n터미널에 Forwarding from 127.0.0.1:아무거나1 -> 5601 가 뜨면 성공\n\n\n\n\n\n * elasticsearch port forwarding cli → 로컬에서 POSTMAN 으로 ES 를 직접 호출할 때 사용한다.\n\nkubectl port-forward services/elasticsearch-es-http 아무거나2:9200 -n elastic-system\n\n터미널에 Forwarding from 127.0.0.1:아무거나2 -> 9200 가 뜨면 성공\n\n\n\n\n엘라스틱 로그인 계정\n\nhttp://localhost:아무거나1/ 로 접속\n\nID : developer / PW : esecubelabs1!\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2576711715/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-11-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.01.20.png?api=v2]\n\n로그인 후 Analytics → Discover 에서 데이터 확인 가능\n\n\n\n\n참고\n\n중간에 connection error 가 발생할 경우 재접속을 하면 된다. (오래 켜두면 종종 connection 끊김)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2576711715"
  },
  {
    "pageContent": "[elasticsearch] create index & bulk data\n\n\n\n\n인덱스 생성하기\n\n만약 이미 생성한 인덱스가 있는데 매핑 정보를 바꾸려 한다면 가장 좋은 방법은 해당 인덱스를 삭제하고 새로 생성하는 것이다. (혹시 모를 인덱스\n매핑 오류를 막기 위해 인덱스를 밀고 새로 넣는 게 제일 좋다고 한다.)\n\n+ 인덱스에 이미 데이터가 들어있다면 매핑 정보를 수정할 수 없다.\n\n\n포스트맨을 이용해 PUT HTTP://ES_URL:PORT/생성할_인덱스_명칭 에 요청 보내기\n\n * headers : 로컬이 아닌 경우 Authorization - ApiKey 를 함께 넣어서 요청한다.\n\n * body\n\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_english_\" \n        },\n        \"english_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"english\"\n        },\n        \"english_possessive_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"possessive_english\"\n        }\n      },\n      \"analyzer\": {\n        \"default\": {\n          \"tokenizer\": \"standard\",\n           \"filter\": [\n            \"english_possessive_stemmer\",\n            \"lowercase\",\n            \"english_stop\",\n            \"english_stemmer\"\n          ],\n          \"char_filter\": [\n            \"my_char_filter\"\n          ]\n        }\n      },\n      \"char_filter\": {\n        \"my_char_filter\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(\\\\d+)-(\\\\d+)-(\\\\d+)\",\n          \"replacement\": \"$1$2$3\"\n        }\n      }\n    }\n  }\n}\n\nenglish_analyzer 와 char_filter 를 이용해 커스텀 했다.\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html#english-analyzer\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html#english-analyzer]\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-mapping-charfilter.html#analysis-mapping-charfilter\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-mapping-charfilter.html#analysis-mapping-charfilter]\n\n\n\n\n인덱스에 데이터 BULK 하기\n\n많은 양의 데이터를 한 번에 밀어 넣기 위해 bulk API 를 사용한다.\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html]\n\n이번엔 포스트맨이 아닌 스크립트를 이용해 API 를 호출한다. (인덱스에 저장할 id 를 따로 지정해줘야하기 때문에 스크립트를 사용했고, 그냥\n한 개를 입력할 것이라면 포스트맨으로 보내도 된다.)\n\n\n\n백오피스에서 사용하는 account search 를 기준으로 설명한다.\n\n 1. npm i @elastic/elasticsearch\n\n 2. account list api\n    (https://haulla-api.haulla.com/admins/accounts?role=generator) 를 호출해서 받은\n    데이터를 accounts.json 으로 저장한다.\n\n 3. 스크립트에서 accounts.json 을 import 해서 bulk 데이터로 넣어준다. (이 때 role = \"generator\" 로\n    하드코딩, output 에 없음)\n\n 4. 아래 스크립트를 만들고 실행한다.\n\n// bulk.js\nconst accounts = require(\"./account.json\");\nconst { Client } = require(\"@elastic/elasticsearch\");\n\nconst client = new Client({\n  node: \"요청보낼 es url 입력하면 됩니다. (http, port 포함)\",\n  maxRetries: 3,\n  auth: {\n    apiKey: \"production 에 있는 es api key 를 넣어주시면 됩니다.\",\n  },\n});\n\nconst bulk = async (index, data) => {\n  const operations = data.flatMap((doc) => [\n    { index: { _index: index, _id: doc.id } },\n    { ...doc, role: \"generator\" },\n  ]);\n\n  await client.bulk({ refresh: true, operations });\n};\n\n이후의 과정은\nhttps://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/380862998/H+O#%EB%A1%9C%EC%BB%AC-%EC%97%98%EB%9D%BC%EC%8A%A4%ED%8B%B1-%EC%84%9C%EC%B9%98-%26-%ED%82%A4%EB%B0%94%EB%82%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/380862998/H+O#%EB%A1%9C%EC%BB%AC-%EC%97%98%EB%9D%BC%EC%8A%A4%ED%8B%B1-%EC%84%9C%EC%B9%98-%26-%ED%82%A4%EB%B0%94%EB%82%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0]\n3번, 4번을 참고\n\n\n\n\n데이터 검색하기\n\n위에서 bulk 한 account 를 검색해보자.\n\n\n포스트맨을 이용해 GET HTTP://ES_URL:PORT/ACCOUNT 에 요청 보내기\n\n * headers : 로컬이 아닌 경우 Authorization - ApiKey 를 함께 넣어서 요청한다.\n\n * body\n\n {\n \"query\": {\n      \"bool\": {\n        \"must\": [\n          {\n            \"multi_match\": {\n              \"query\": \"검색하고 싶은 내용\",\n              \"type\": \"phrase_prefix\"\n            }\n          }\n        ]\n      }\n    }\n }\n\n검색한 내용에 맞는 결과가 반환되면 성공 👏\n\n\n\n\n\n만약 검색한 내용이 안나오거나 이상한 결과가 나온다면 윤보미(Windy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/60d0006adeecef006ad6d789?ref=confluence]\n에게 문의 부탁드립니다.. 😇",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2581200902"
  },
  {
    "pageContent": "[elasticsearch] analyzer 를 이용해 tokens 확인하기\n\n\n\n\nANALYZER 구성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2597683226/6.2-02.png?api=v2]\n\n구성 요소\n\n설명\n\n캐릭터 필터\n\n입력받은 문자열을 변경하거나 불필요한 문자들을 제거한다.\n\n토크나이저\n\n문자열을 토큰으로 분리한다. 분리할 때, 토큰의 순서나 시작, 끝 위치도 기록한다.\n\n토큰 필터\n\n분리된 토큰들의 필터 작업을 한다.\n\nanalyzer 는 하나의 토크나이저를 반드시 포함해야한다.\n하지만 캐릭터 필터와 토큰 필터는 optional 이므로 없어도 되고 여러 개를 함께 사용해도 된다.\n\n\n텍스트 분석 과정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2597683226/image-20231018-020740.png?api=v2]\n\n * 애널라이저가 수행\n\n * 캐릭터 필터링 → 토크나이징 → 토큰 필터링 순서로 진행\n\n 1. 캐릭터 필터는 토크나이징이 진행되기전 캐릭터 전체에 대한 내용을 필터한다.\n    - 원문에 불필요한 문자들을 제거한다 → 문자열 자체가 분리되는 것은 아니기 때문에 그냥 필터링된 문자열이다.\n    \n\n 2. 토크나이징은 특정 기준으로 분석을 실행해야 해서 1개만 지정 가능하다.\n    - 캐릭터 필터가 된 문자열을 자르게 되는데 잘린 단위를 토큰(token)이라고 한다.\n    \n\n 3. 잘린 토큰들이 토큰 필터를 거치면서 정제되는데 그 후에 인덱스에 저장된 상태의 토큰을 용어(term)이라고 한다.\n    \n\n워딩을 구분해서 사용하자.\n토큰 → 분석기 내부에서 일시적으로 존재하는 상태\n용어 → 인덱싱되어 있는 단위 또는 검색에 사용되는 단위\n\n\nANALYZER 를 이용해 TOKENS 확인하기\n\n 1. 로컬에서 elastic 실행\n\n 2. GET http://localhost:9200/_analyze 으로 원하는 text 와 analyzer 를 넣어서 요청하기\n\n// body\n{\n  \"text\": [\"genorator\", \"hauler\"],\n  \"analyzer\": \"english\"\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2597683226/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-12-14%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.10.13.png?api=v2]\n\n\n\n\nTOKENIZER 를 이용해 TOKENS 확인하기\n\n 1. 로컬에서 elastic 실행\n\n 2. GET http://localhost:9200/_analyze 으로 원하는 text 와 tokenizer, filter 를 넣어서\n    요청하기\n\n// body\n{\n  \"text\": [\"genorator\"],\n  \"tokenizer\": \"standard\",\n  \"filter\": [ \"stemmer\" ]\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2597683226/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-12-14%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.23.03.png?api=v2]\n\n\n\n\n\nref.\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#indices-analyze\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#indices-analyze]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2597683226"
  },
  {
    "pageContent": "[elasticsearch] index mapping\n\n\n\n\nDYNAMIC MAPPING\n\n * 별도의 매핑을 지정하지 않았을 경우, 처음 인덱스를 생성하고 데이터를 입력하면 elasticsearch 가 자동으로 동적 매핑을 진행 →\n   동적 매핑의 경우 원하는대로 검색이 동작하지 않을 수도 있기 때문에 mapping 을 따로 지정해주는 것을 권장한다. (Explicit\n   mapping)\n\n * 동적 매핑 시 text 타입은 text 와 keyword 두 가지의 멀티 필드를 생성한다.\n   멀티 필드를 지정할 경우, 필드 개수만큼 용량이 더 소모되므로 keyword 로만 관리할 필드는 keyword 필드, text 로만 관리할\n   필드는 text 필드로 하는 게 좋다.\n\n * 문자열의 경우 검색 과 정렬 등을 고려한 매핑이 제대로 되지 않는다.\n\n원본 소스 데이터 타입\n\n동적 매핑으로 변환된 데이터 타입\n\nnull\n\n필드를 추가하지 않음\n\nboolean\n\nboolean\n\nfloat\n\nfloat\n\ninteger\n\nlong\n\nobject\n\nobject\n\nstring\n\n데이터 형태에 따라 date, text/keywork 필드\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html]\n\n\n\n\nEXPLICIT MAPPING\n\n * 인덱스 생성 시 커스터마이징 해서 지정해주는 매핑\n\n * 데이터가 들어있을 경우 매핑 변경은 불가능하기 때문에 인덱스를 지우고 새로 mapping 을 해야한다.\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/explicit-mapping.html\n[https://www.elastic.co/guide/en/elasticsearch/reference/current/explicit-mapping.html]\n\n\n\n\n\n\n특정 필드의 매핑 바꾸기\n\n 1. 인덱스를 만들고 데이터를 하나 넣어서 dynamic mapping 을 생성한다.\n\n 2. 해당 mapping 을 불러와서 가공한다.\n\n 3. 기존 인덱스를 지우고 다시 인덱스를 생성할 때, 시 가공한 mapping 을 넣어서 explicit mapping 으로 만든다.\n    PUT http://localhost:1111/haulla-account\n\n// body\n{\n  \"mappings\": {\n    \"properties\": {\n      \"accountManagerId\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"keyword\": {\n            \"type\": \"keyword\",\n            \"ignore_above\": 256\n          }\n        }\n      },\n      ...      \n      \"role\": {\n        \"type\": \"keyword\", // 타입을 text -> keyword 로 변경\n        \"fields\": {\n          \"keyword\": {\n            \"type\": \"keyword\",\n            \"ignore_above\": 256\n          }\n        }\n      },\n     ...\n      \"vertical\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"keyword\": {\n            \"type\": \"keyword\",\n            \"ignore_above\": 256\n          }\n        }\n      }\n    }\n  }\n}\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2597355647/cbcc464c-b3aa-4cd3-8c9d-860c8ac21698.png?api=v2]\n\n새로 만든 role 타입이 keyword 로 mapping 된 것을 확인할 수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2597355647"
  },
  {
    "pageContent": "[elasticsearch] text 타입과 keyword 타입\n\n\n1. TEXT 타입\n\n * 일반적으로 문장을 저장하는 매핑 타입으로 사용된다.\n\n * 강제성은 없지만 문장이나 여러 단어가 나열된 문자열을 텍스트 타입으로 지정한다.\n\n\n\n텍스트 타입으로 지정된 문자열은 분석기에 의해 토큰으로 분리된다. 그리고 이 토큰들은 역인덱싱 과정을 거친다.\nWe offer solutions for enterprise search, observability, and security 와 같은 문자열은\n분석기를 통해서\n[we, offer, solutions, enterprise, …] 와 같이 분리되고 가공 과정을 거쳐 역인덱스에 저장되어 전문 검색(full\ntext)을 할 수 있다. → solutions 로 검색하면 전체 문장을 검색할 수 있다.\n\n\n2. KEYWORD 타입\n\n * 카테고리, 브랜드, 요일 등 규칙성이 있거나 유의미한 값들의 집합으로 범주형 데이터에 주로 사용된다.\n\n * 텍스트 타입과 다르게 분석기를 거치지 않고 문자열 전체가 하나의 용어로 인덱싱된다.\n\n\n\nbeautiful day 문자열이 존재하면, 텍스트 타입의 경우 [beautiful, day] 로 분리되어 인덱싱되지만 키워드 타입은\n[beautiful day] 그 자체가 인덱싱된다.\n그러므로 부분 일치 검색은 불가능하지만 완전 일치 검색을 위해 사용되므로 정렬이나 집계에 사용할 수 있다.\n범주형 데이터의 경우 데이터의 형태가 몇가지로 고정되어 있기 때문이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2818801683"
  },
  {
    "pageContent": "[OJT] Redis\n\n\n\n\n1. WHAT IS REDIS?\n\n * 전세계에서 가장 유명한 Caching 솔루션. 대부분 cache 용도로 Redis 를 사용한다.\n\n\n\n\n의미있는 CACHE\n\n 1. 데이터의 재사용 횟수가 한 번 이상일 경우\n\n 2. 잘 변하지 않는 데이터일수록 cache 를 사용할 때 더 효율적\n\n\n\n\nREDIS AS A CACHE\n\n * 단순한 key-value 구조 : 사용이 간편하고 데이터 저장이 쉽다.\n\n * in-memory 데이터 저장소 (RAM)\n   \n   * 빠른 성능 : 평균 작업 속도 < 1 ms, 초당 수백만 건의 작업 가능\n\n\n\n\n\n\n2. REDIS 아키텍처 종류\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2522578961/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-08-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.21.01.png?api=v2]\n\nstandAlone\n\nReplication\n\nSentinel\n\nCluster\n\n마스터만 존재한다.\n\n마스터와 리플리카만 존재하는 간단한 구조이다.\n\n마스터와 리플리카 노드 외에 센티널 노드가 필요하다.\n\n센티널은 일반 노드들을 모니터링하는 역할을 한다.\n\n최소 세대의 마스터가 필요하며 샤딩 기능을 제공한다.\n\n\n\n\n3. 장단점 비교\n\nstandAlone\n\nReplication\n\nSentinel\n\nCluster\n\n장점\n\n?\n\n단순함\n\n자동 failover 가능한 HA 구성\n\n스케일 아웃(샤딩)과 HA 구성\n\n단점\n\nHA 지원 안됨\n\nHA 기능이 없기 때문에 마스터에 장애가 발생하면 수동으로 변경해줘야 함 (리플리카 노드에 직접 접속해서 복제를 끊어야 하고, 어플리케이션에서도\n연결 설정을 변경하여 배포하는 작업이 필요하다.)\n\n데이터 분산 문제를 해결 못함\n\n메모리 사용량이 많음\n\nMigration 자체는 관리자가 시점을 결정해야함\n\nLibrary 구현이 필요함\n\n\n\n\n4. 아키텍처 선택 기준\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2522578961/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-08-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.53.35.png?api=v2]\n\n\n\n\n\nref.\n\nhttps://www.youtube.com/watch?v=92NizoBL4uA\n[https://www.youtube.com/watch?v=92NizoBL4uA]\n\nhttps://azderica.github.io/01-db-nosql-redis/\n[https://azderica.github.io/01-db-nosql-redis/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2522578961"
  },
  {
    "pageContent": "[OJT] REST의 멱등성(Idempotence in REST)\n\n\nTLDL\n\nREST에서의 멱등성을 갖는 요청은 여러번 같은 요청을 해도 서버입장에는 상태값이 변하지 않으므로, 안전한 요청으로 볼 수 있으며, 멱등성을\n갖는 메소드에는 GET, HEAD, PUT, DELETE, OPTIONS, TRACE, 이 있고, POST는 멱등성을 갖지 않는다. PATCH는\n경우에 따라 멱등성을 가질수도, 아닐수도 있다\n\n\nWHAT IS IDEMPOTENCE ? \n\n멱등성, 멱등법칙은 수학이나 전산학에서 연산의 한 성질을 나타내는 것으로, 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 의미한다.\n예를들어 1을 곱하는 연산은 여러번해도 항상 같은 결과값이 나오므로 멱등성을 만족하며, 이때 수 1은 곱셈의 멱등원이다. eg) n * 1 =\nn\n\n\nIDEMPOTENCE IN REST\n\nREST에서의 멱등성은 동일한 요청이 여러번 수행되어도, 서버 자원의 상태값은 항상 동일한 것을 의미한다.\n\n구현하기에 따라 달라질 수 있지만, 일반적으로 REST의 원칙을 따른다고 보았을 때, 멱등성을 만족시키는 요청과 그 이유는 다음과 같다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/173670455/image2019-7-8_14-52-15.png?api=v2]\n\n * GET, HEAD, OPTIONS, TRACE\n\n서버의 자원상태를 변화시키지 않으며, 자원을 가져오는 형태의 메소드 이므로 멱등성을 만족한다.\n\n * PUT\n\n새로운 자원을 만들거나 기존 자원을 업데이트 하는데 쓰인다. 기존에 해당 자원이 없다면 최초요청시에 생성을 하고, 그 뒤의 동일한 요청이 온다면\n해당 자원을 동일한 상태로 업데이트 하기때문에 동일한 요청을 계속 해도 항상 결과적인 서버의 상태값은 같다. 따라서 멱등성을 만족한다.\n\n * DELETE\n\n특정 자원을 삭제한다. 첫 요청이 해당자원을 삭제하게 되고, 그 뒤의 동일한 요청을 해도 해당자원 삭제를 시도하다가 실패하게 되므로, 결과적인\n서버의 상태값은 항상 같다. 따라서 멱등성을 만족한다.\n\n * POST\n\n새로운 특정 자원을 만든다. 동일한 요청을 계속하면 새로운 자원이 계속 만들어져서 늘어나므로, 서버의 상태값은 항상 같지 않다. 따라서 멱등성을\n만족하지 않는다.\n\n * PATCH\n\n자원의 일부 또는 전부를 업데이트 하는데 쓰인다. 일반적으로 멱등성을 갖지 않지만, 경우에 따라 멱등성을 가질 수도 있다. (맨 아래 예시\n참조)\n\n\n\n\n주의할 점은 자원의 상태값이 동일하면 멱등성이 있다고 보는 것이지, 응답(Response)값과는 상관없으며. 멱등성이 있더라도 요청마다 응답값은\n달라질 수 있다. 예를 들어, DELETE 요청을 할때 첫 요청시 해당 자원이 있다면 자원을 삭제하고 200 또는 204 response를\n반환하게 되고, 후에 동일한 DELETE요청이 온다면 삭제할 자원을 찾을 수 없으므로 404를 반환하게 되는 등 동일한 요청 마다 응답값이\n달라질 수가 있으며, PUT도 이와 비슷한 일이 일어날 수 있다, 하지만 Response와 상관없이 서버의 상태값은 최초 요청의 결과와 그 후\n요청의 결과가 항상 동일하게 되므로 멱등성을 만족한다고 볼 수 있는 것이다.\n\n\n* POST, PATCH와 멱등성\n\n앞서서 POST와 PATCH는 멱등성을 갖지 않는다고 말했다 . 이 것은 어디까지나 일반적인 REST원칙을 따랐을 때를 말하는 것이다.\nPOST를 특정 자원을 지정(id값 지정)해서 해당 자원의 일부 혹은 전부를 수정하는 방식으로 이용할 수도 있고, 이럴 때 POST는 동일한\n자원을 동일한 값으로 계속 수정요청하게 되고 그 결과값은 항상 같게 되므로 멱등성을 갖는다고 볼 수 있다. 하지만 일반적으로 POST는\n클라이언트측에서 자원의 ID값을 지정하지 않고 서버에서 지정하며, 새로운 자원을 create하는 메소드이다. 따라서 동일한 데이터로 요청을\nn번하게 되면 데이터가 동일한 n개의 자원을 생성하게 되고, 이는 멱등성을 만족하지 않게 된다.\n\nPATCH는 주로 클라이언트에서 자원의 id값을 지정해서 보내는 요청인데, 일반적으로는 멱등성을 갖지 않지만, 업데이트 방식에 따라 멱등성을\n가질 수도 있다.\n\n\n\n\nNon-idempotent patch example:\n\n// Original resource\n{\n  name: 'Tito',\n  age: 32\n}\n\n// PATCH request\n{\n  $increment: 'age'\n}\n\n// New resource\n{\n  name: 'Tito',\n  age: 33\n}\n\n\n\n\nIdempotent patch example:\n\n// Original resource\n{\n  name: 'Tito',\n  age: 32\n}\n\n// PATCH request\n{\n  name: 'Riaco',\n  age: 29\n}\n\n// New resource\n{\n  name: 'Riaco',\n  age: 29\n}\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173670455"
  },
  {
    "pageContent": "[OJT][Kafka] Consumer\n\n\nCONSUMER?\n\n토픽을 구독하여 메시지를 소비하는 프로그램 혹은 논리적 단위\n\n\nCONSUMER GROUP?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2665644088/image-20230221-075713.png?api=v2]\n\n * 메시지를 소비하는 컨슈머들의 논리적 그룹이다. https://www.popit.kr/kafka-consumer-group/\n   [https://www.popit.kr/kafka-consumer-group/]\n\n * 다른 목적을 가진 컨슈머가 동일한 이름의 컨슈머 그룹을 사용하지 않도록 주의해야한다.\n\n\nCONSUMER LAG?\n\n * 컨슈머 그룹이 처리하지 못한 메시지 개수\n\n\nCONSUMER와 TOPIC 관계\n\n * Consumer - Topic 구독 관계를 맺으려면 Commit 이력이 1회라도 존재해야 한다.\n\n * Commit 이력이 없으면 구독 관계가 아니며, Lag 도 쌓이지 않는다.\n\n\nCONSUMER와 PARTITION 관계\n\n * 하나의 파티션에는 하나의 컨슈머만 접근할 수 있다. https://www.popit.kr/kafka-consumer-group/\n   [https://www.popit.kr/kafka-consumer-group/]\n   \n   * 파티션 각각 하나의 reader만 허용하여 순서를 보장하기 위함이다.\n\n * 정리하면 아래와 같다.\n   \n   * 파티션과 컨슈머 그룹 관계: 1:N\n   \n   * 파티션과 컨슈머 관계: 1:1",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2665644088"
  },
  {
    "pageContent": "[OJT][Kafka] Topic, Partition\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2651193351/image-20230221-080446.png?api=v2]\n\n\n토픽 (TOPIC)\n\n * 카프카가 데이터를 받을 수 있는 논리적 데이터 모델. (데이터 구분 단위로 보면 된다.)\n\n * 토픽은 여러가지 파티션으로 나눠 관리할 수 있다.\n\n\n파티션 (PARTITION)\n\n * 토픽 메시지 저장 단위이며 수평 확장이 가능하다.\n\n * 파티션을 늘릴수록 동시 처리 성능이 늘어난다.\n\n * 주의\n   \n   * 파티션 수가 많을수록 관리하는 파일이 많아져 비교적 리소스가 많이 들며, 장애 복구 능력도 떨어진다. 파티션 단위로 복제하는 특성\n     때문.\n   \n   * 같은 파티션 내부에 속한 메시지 간 순서만 보장된다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2651193351"
  },
  {
    "pageContent": "[OJT] Localstack\n\n\n\n\n공식문서\n\nhttps://github.com/localstack/localstack\n[https://github.com/localstack/localstack]\n\n\n\n\nWHAT IS LOCALSTACK ?\n\n * AWS API 를 시뮬레이션 해주는 프레임워크\n\n * 도커 컨테이너 형태로 제공되며, AWS REST API 스펙에 맞는 모킹 http 서버를 실행한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2517827598/localstack.png?api=v2]\n\n\n\n\nLOCALSTACK 지원하는 서비스\n\nLocalstack은 유료 버전과 무료 버전으로 나눠져 있으며 무료로 제공하는 서비스는 아래와 같다.\n\nNote: localstack 0.11.0 부터는 모든 APIs 단위 포인트(http://localhost:4566)로 연결을 됨API Gateway at http://localhost:4567\nKinesis at http://localhost:4568\nDynamoDB at http://localhost:4569\nDynamoDB Streams at http://localhost:4570\nS3 at http://localhost:4572\nFirehose at http://localhost:4573\nLambda at http://localhost:4574\nSNS at http://localhost:4575\nSQS at http://localhost:4576\nRedshift at http://localhost:4577\nElasticsearch Service at http://localhost:4578\nSES at http://localhost:4579\nRoute53 at http://localhost:4580\nCloudFormation at http://localhost:4581\nCloudWatch at http://localhost:4582\nSSM at http://localhost:4583\nSecretsManager at http://localhost:4584\nStepFunctions at http://localhost:4585\nCloudWatch Logs at http://localhost:4586\nEventBridge (CloudWatch Events) at http://localhost:4587\nSTS at http://localhost:4592\nIAM at http://localhost:4593\nEC2 at http://localhost:4597\nKMS at http://localhost:4599\nACM at http://localhost:4619\n\n\n\n\n왜 쓰나요?\n\n * 실제 aws s3 와 연동하지 않고도 로컬에서 aws 서비스를 테스트 할 수 있다.\n\n * AWS 서비스를 사용하는 인프라 로직의 통합테스트를 작성하기 위해 사용한다.\n\n\n\n\nLOCALSTACK 을 실행하는 방법\n\n 1. Testcontainers\n\n 2. docker compose\n\n→ 이큐브랩에서는 docker 를 사용하므로 2번에 대해서만 정리한다.\n\n\n\n\nDOCKER COMPOSE 로 LOCALSTACK 실행하기\n\nhttps://github.com/Ecube-Labs/ecubelabs\n[https://github.com/Ecube-Labs/ecubelabs] 를 기준으로 설명한다.\n\nhttps://github.com/Ecube-Labs/ecubelabs/blob/2015c7f398b3fe9a186da43fbff4becfb43683f5/docker-compose.yml#L254\n[https://github.com/Ecube-Labs/ecubelabs/blob/2015c7f398b3fe9a186da43fbff4becfb43683f5/docker-compose.yml#L254]\n\naws:\n    image: localstack/localstack\n    environment:\n      - SERVICES=s3 // 사용할 서비스 , 를 이용해 나열\n      - DEBUG=1\n    volumes:\n      - \"./test/docker-entrypoint-initaws.d:/docker-entrypoint-initaws.d\"\n\n * 사용할 서비스는 SERVICES=ses,s3... 처럼 나열이 가능하다.\n\n * ./test/docker-entrypoint-initaws.d:/docker-entrypoint-initaws.d 경로에 있는 파일에 s3\n   버킷을 만들 수 있다.\n\nhttps://github.com/Ecube-Labs/ecubelabs/blob/main/test/docker-entrypoint-initaws.d/s3.sh\n[https://github.com/Ecube-Labs/ecubelabs/blob/main/test/docker-entrypoint-initaws.d/s3.sh]\n\n#!/bin/sh\n\nawslocal s3 mb s3://test\n\nawslocal s3 mb s3://erp-stage\n\n * awslocal 명령어를 이용해 test, erp-stage 버킷 두 개를 만들었다.\n\n\n\ndocker compose up 명령어를 이용해 빌드 후 실행 시켜준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2517827598/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-08-19%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.35.53.png?api=v2]\n\nhttps://github.com/Ecube-Labs/ecubelabs/blob/main/docker-compose.yml\n[https://github.com/Ecube-Labs/ecubelabs/blob/main/docker-compose.yml]\n\nstr:\n    build:\n      context: ./storage-api\n      dockerfile: ../Dockerfile.str\n    environment:\n      - NODE_ENV=development\n      - BKT_HAULLA=haulla-stage\n      - BKT_HAULLA_AUTH_NAME=haulla-stage\n      - BKT_HAULLA_AUTH_PASSWORD=TODO\n      - BKT_ERP=erp-stage\n      - BKT_ERP_AUTH_NAME=erp-stage\n      - BKT_ERP_AUTH_PASSWORD=TODO\n      - BKT_DEVICE=ecubelabs-device-stage\n      - BKT_DEVICE_AUTH_NAME=device-stage\n      - BKT_DEVICE_AUTH_PASSWORD=TODO\n      - DB_HOST=db\n      - DB_PORT=3306\n      - DB_USER=root\n      - DB_PASSWORD=1234\n      - PORT=3030\n      - AWS_ENDPOINT=http://aws:4566 # see https://github.com/localstack/localstack\n      - AWS_ACCESS_KEY_ID=aws # 아무 값이나 환경변수로 지정하기만 하면 ok\n      - AWS_SECRET_ACCESS_KEY=aws # 아무 값이나 환경변수로 지정하기만 하면 ok\n    depends_on:\n      - db\n    ports:\n      - \"3030:3030\"\n\n * 사용하고자 하는 도커에서 AWS_ENDPOINT=http://aws:4566 로 엔드포인트를 설정해준다. (그래야 localstack 으로\n   요청이 간다.)\n\n * AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY 는 아무 값이나 넣어준다.\n\n\n\n\nSTORAGE API 를 이용한 LOCALSTACK POST 요청 테스트 (파일 업로드)\n\n * 포스트맨\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2517827598/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-08-19%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.43.50.png?api=v2]\n\n * localstack docker\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2517827598/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-08-19%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.43.58.png?api=v2]\n\n\n\n\n\nref.\n\nhttps://tech.inflab.com/202202-integration-test-with-localstack/\n[https://tech.inflab.com/202202-integration-test-with-localstack/]\n\nhttps://medium.com/@dudwls96/localstack-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-9b81ec51749c\n[https://medium.com/@dudwls96/localstack-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-9b81ec51749c]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2517827598"
  },
  {
    "pageContent": "[OJT][O] 배포 및 파이프라인 (Jenkins)\n\nURL\n\nNotes\n\nhttps://jenkins.cleancitynetworks.com/ [https://jenkins.cleancitynetworks.com/]\n\n * 레거시 인프라에서 운영중인 서비스들의 파이프라인을 볼 수 있다.\n\n * 젠킨스를 통한 수동 배포는 관리자만 가능하다.\n   \n   * 관리자: 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * Production, Stage 구분 없이 구성되어 있다.\n\nhttps://jenkins.ecubelabs.xyz/ [https://jenkins.ecubelabs.xyz/]\n\nhttps://jenkins-stage.ecubelabs.xyz/ [https://jenkins-stage.ecubelabs.xyz/]\n\n * 최신(?) 인프라에서 운영중인 서비스들의 파이프라인을 볼 수 있다.\n\n * 로그인 후 자유롭게 수동 배포할 수 있다.\n   \n   * GitHub OAuth 2.0을 통해 Ecube-Labs Org에 소속된 사용자만 로그인할수 있다.\n\n * Production과 Stage 환경의 젠킨스가 별도로 운영된다.\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1989279760"
  },
  {
    "pageContent": "[OJT][O] Log Visualizer (Kibana)\n\n운영 환경을 자세히 디버깅하거나 모니터링 하기 위해 사용한다.\n\n이큐브랩은 로그 시각화 도구로 Elastic stack 중 하나인 Kibana를 사용하고 있다.\n기능은 다양하지만 아직 로그 검색 수단으로서만 사용하고 있다.\n\n\nARCHITECTURE\n\nElastic Stack\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293/Elastic+Cloud+on+Kubernetes+ECK]\n\n * 키바나는 Elasticsearch를 데이터베이스로서 사용한다.\n\n\nSEARCH SYNTAX\n\nElasticsearch는 Apache Lucene을 기반으로 만들어졌기 때문에 키바나의 쿼리도 Lucene의 문법을 기반으로 한다.\n\n * Lucene search syntax:\n   https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl-query-string-query.html#query-string-syntax\n   [https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl-query-string-query.html#query-string-syntax]\n\n * KQL: https://www.elastic.co/guide/en/kibana/current/kuery-query.html\n   [https://www.elastic.co/guide/en/kibana/current/kuery-query.html]\n\n\n\n이상한 쿼리를 많이 날리거나 너무 긴 기간의 데이터를 한번에 조회하면 엘라스틱서치가 죽을수도 있다.\n좀 기다리면 쿠버네티스가 알아서 살려주지만 죽지 않게 신경써서 쿼리를 날려주는것이 좋다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2017689634"
  },
  {
    "pageContent": "[OJT] Webhook, Polling\n\nhttps://www.youtube.com/watch?v=x_jjhcDrISk\n[https://www.youtube.com/watch?v=x_jjhcDrISk]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2919563269"
  },
  {
    "pageContent": "[OJT][SW] MSW (Mock service worker)\n\n서비스 워커 개념도 모른다면 [OJT] Service worker\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284486676/OJT+Service+worker]\n참고\n\nMSW가 설치된 브라우저를 통해 발생하는 모든 네트워크 요청과 응답을 mocking 할 수 있게 도와준다.\n\n모든 처리는 Service worker를 이용해 모킹을 하기 때문에 실제 서버에 요청을 전달하지 않는건 당연하다.\n이 외의도 아래의 특징을 가진다.\n\n * 다른 mock library와 다르게 요청 값과 응답 값을 실제 개발자 도구의 Network tab에서 확인할 수 있다.\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/2284388447/image-20211218-070305.png?api=v2]\n\n * 서비스 워커가 동작 가능한 환경이라면 모든 코드와 호환된다.\n   \n   * cypress\n   \n   * jest\n   \n   * storybook\n   \n   * …\n\n * 실제 서버가 존재하는것 처럼 동적인 요청 및 응답 값으로 mocking이 가능하다.\n   \n   * 인터페이스도 express와 비슷하므로 아주 간단해서 러닝커브 또한 낮다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284388447"
  },
  {
    "pageContent": "[PROM] PromQL\n\n프로메테우스에서 시계열 데이터를 쿼리할수 있는 언어를 PromQL이라고 한다.\n\nSQL과 상당히 다른 스펙을 가지고 있기 때문에 별도의 스터디가 필요하다.\n\nhttps://prometheus.io/docs/prometheus/latest/querying/basics/\n[https://prometheus.io/docs/prometheus/latest/querying/basics/]\n\n\n\n * Basic\n   * Data Type\n\n--------------------------------------------------------------------------------\n\n\nBASIC\n\n\nDATA TYPE\n\n쿼리를 통해 얻어올 수 있는 데이터 유형이다.\n그라파나를 통해 시각화를 할 때는 당연하고, 서브쿼리나 조인을 할 때도 어떤 데이터 유형인지 알고 있어야 쿼리를 정상적으로 작성할 수 있다.\n\n * Instant vector: 한 타임스탬프를 공유하는 데이터\n   \n   * 그래프로 표현 가능한 유일한 데이터 유형이라고 보면 된다.\n   \n   * 특정 시점에 GET /metrics 로 긁어간 데이터 한 덩어리가 하나의 Instant vector라고 생각해도 무방할것같다.\n   \n   * Instant vector를 쿼리하기 위한 구문을 Instant query라고 부른다. ex) http_requests_total\n\n * Range vector: 특정 시간 범위 안에 있는 데이터\n   \n   * 그래프로 표현 할 수 없으며, 그래프로 표현하기 위해서는 Instant vector로 변환하기 위한 aggregation 성격의 함수를\n     이용해 변환해야만 한다.\n   \n   * Range vector Selector를 통해 특정 범위(window)의 Instant vector를 묶어서 가져온다고 이해해도\n     무방하다.\n   \n   * Instant vector를 쿼리하기 위한 구문은 인스턴트 쿼리와 함께 다음의 형식으로 사용해야 한다.\n     <instant_query> '[' <range> ':' [<resolution>] ']'\n     ex) http_requests_total[5m]\n\n * Scalar: 타임스탬프 정보가 포함되지 않은 단순한 숫자 값으로 이해하면 된다.\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2883715365"
  },
  {
    "pageContent": "Product\nArchitecture[/wiki/download/attachments/2870575484/product-architecture.drawio.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2870575484"
  },
  {
    "pageContent": "[deprecated] 제품 가이드\n\n이큐브랩의 제품들에 관한 정보를 요약한 공간입니다.\n\n\n\n\n\n\n주의사항: 공식적인 제품명에는 띄어쓰기가 없어야 합니다.\n\n예시: Clean City Networks → CleanCityNetworks\n\n클린 시티 네트웍스 → 클린시티네트웍스\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120881706/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-03-07%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.39.54.png?api=v2]\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n각 제품의 위키 페이지를 참고하세요.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120881706"
  },
  {
    "pageContent": "CCB\n\n\nCLEANCUBE(클린큐브)\n\n\n\n\n태양광 압축 쓰레기통입니다.\n\n적재량을 인식해서 상황에 맞게 압축합니다.\n\n클린큐브에서 수집된 정보는 무선통신을 통해 CCN에 전송됩니다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120816170/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-03-07%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.56.57.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120816170"
  },
  {
    "pageContent": "CCP\n\n\nCLEANCAP(클린캡)\n\n\n\n\n1구형 무선 초음파 적재량 감지 센서 입니다.\n\nCFX의 전신입니다.\n\n현재는 deprecated 된 제품입니다.\n\n쓰레기 용기의 적재량을 모니터링하여, CCN에 데이터를 실시간으로 전송합니다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120783499/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-03-07%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.13.38.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783499"
  },
  {
    "pageContent": "CFX\n\n\nCLEANFLEX(클린플렉스)\n\n\n\n\n2구형 무선 초음파 적재량 감지 센서 입니다.\n\n클린캡의 후속 제품입니다.\n\n클린캡의 blind zone 문제를 해결했습니다.\n\n\n\n\nblind zone이란?\n\n초음파를 쏘는 Tx(트랜시버)와 초음파 신호를 받아들이는 Rx(리시버)가 클린캡에서는 하나의 센서구에 같이 탑재되어 있었습니다.\n따라서, 초음파를 쏘는 동안에는 센서구가 떨고 있어서, 반사된 초음파를 감지할 수 없습니다.\n반사된 초음파를 감지할 수 없는 시간에 대응되는 거리를  blind zone 이라 합니다.\n클린캡은 25~30cm의 blind zone을 가졌습니다.\n\n\n\n\n클린플렉스의 blind zone:\n\n클린플렉스는 Tx와 Rx를 서로 다른 2구의 초음파 센서로 나누어, blind zone을 2cm 로 만들었습니다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120816174/CleanFLEX_01.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120816174"
  },
  {
    "pageContent": "CCL\n\n\nCLEANCALL(클린콜)\n\n\n\n\n쓰레기 수거 요청 센서 입니다.\n\n쓰레기 적재량이 일정이상 차오르면 자동으로 수거를 하도록 할 수도 있지만,\n\n클라이언트가 자신의 주관에 따라 수동으로 버튼을 눌러 수거를 요청하게 할 때 쓰입니다.\n\nB2B를 넘어 B2C가 요구되는 MP(Matching Platform) 프로젝트에 쓰이기 위해 개발되었습니다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120947350/%E1%84%8F%E1%85%B3%E1%86%AF%E1%84%85%E1%85%B5%E1%86%AB%E1%84%8F%E1%85%A9%E1%86%AF.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120947350"
  },
  {
    "pageContent": "CTK\n\n\nCLEANTRACK(클린트랙)\n\n\n\n\n쓰레기 수거차량 GPS 트래커 입니다.\n\n수거차량의 FM(Fleet Management)에 쓰입니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120783524/%E1%84%8F%E1%85%B3%E1%86%AF%E1%84%85%E1%85%B5%E1%86%AB%E1%84%90%E1%85%B3%E1%84%85%E1%85%A2%E1%86%A8.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783524"
  },
  {
    "pageContent": "CCN\n\n\nCLEANCITYNETWORKS(클린시티네트웍스)\n\nhttps://cleancitynetworks.com [https://cleancitynetworks.com]\n\n이큐브랩의 클라우드 기반 폐기물 관리 플랫폼입니다.\n\nCCB, CCP, CFX 등의 제품들이 보낸 데이터들을 분석하고 시각화해서 모니터링 할 수 있습니다.\n\n\n\n\nCC: 현재 위 도메인으로 운영 중인 CCN을 뜻합니다. Repository name: ccn-current\n[https://github.com/Ecube-Labs/ccn-current]\n\nCF: 새로 개발중인 CCN의 프론트엔드를 뜻합니다. Repository name: CCN-Front\n[https://github.com/Ecube-Labs/CCN-Front]\n\nCA: 새로 개발중인 CCN의 백엔드 API를 뜻합니다. Repository name: CCN-API\n[https://github.com/Ecube-Labs/CCN-API]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120783480/4.9-1020x1024.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783480"
  },
  {
    "pageContent": "필요한 git 작업\n\n개발 시 git 을 사용하는 방법을 정리합니다. 이 글을 읽기 전에 [OJT] Git\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611139/OJT+Git], Git\nbranch & merge 가이드 (Web)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51216589/Git+branch+merge+Web]\n를 먼저 읽어 보시기 바랍니다.\n\n\n작업 시작\n\n작업을 시작할 때 최신 main(또는 master)으로 부터 branch를 생성한다. 생성할 때 할당 된 {Jira 이슈번호}+{간단한\n설명}으로 branch 이름을 짓는다. 특히, prefix로 붙인 Jira 이슈번호에 의해 의해 Jira에서 추적이 되기 때문에 Jira\n이슈번호와 prefix는 반드시 같게 해주도록 한다.\n\n\n예) Jira 이슈 번호가 “MP-2702”, 제목이 “서비스 validation 강화 - AdminCollectionService” 인 경우\nbranch 이름을 “MP-2702-enhance-validation-at-AdminCollectionService“ 또는 간단하게\n“MP-2702-enhance-validation” 정도로 명명하면 된다.\n\n$ git checkout main\n$ git checkout -b MP-2702-enhance-validation \n(or)\n$ git branch MP-2702-enhance-validation\n$ git checkout MP-2702-enhance-validation\n\n\n\ndevelop에서 생성된 branch는 어느 곳으로든 merge 하지 않는다. develop은 stage 형상에 배포되는 branch로\nmain과 항상 형상이 같을 수 없고, 실험적인 곳이기 때문에 언제든지 쉽게 변경될 수 있다.\n\n\n\n\n충돌 해결\n\nPR중 여러 사람이 동시에 같은 파일을 수정하는 경우 충돌이 흔하게 발생할 수 있다. 이 때, 최신 main(origin/main)을\nmerge한 후 충돌을 스스로 해결하면 된다. 코드 리뷰를 하면서 다른 사람의 코드를 봤기 때문에 스스로 해결할 수 있을 것이다.\n\n$ git status \nOn branch MP-2702-enhance-validation # 현재 작업중인 branch\n...\n\n$ git merge origin/main\n\n# TODO: 충돌 해결하기\n\n$ git add & commit \n$ git push\n\n\n\ndevelop에 merge 할 때도 비슷하게 해결하도록 한다.\n\n\nDEVELOP 초기화\n\ndevelop branch는 PR 과정을 거치지 않고 스스로 merge & push 하기 때문에 쉽게 망가진다. 그래서 master 형상을\ndevelop에 가져와야 하는 경우가 있다. 원격 develop branch를 강제로 바꾸는 것이기 때문에 작업 전에 팀원들과 충분한 상의가\n필요하다.\n\n$ git checkout develop\n$ git reset main\n$ git reset --hard\n$ git reset origin/develop\n$ git commit -m \"Force master\"\n\n\n\n작업 중인 branch가 PR 진행 중이라, main에는 merge되지 않았지만 develop에는 merge 되어 있는 경우는 가급적\ndevelop branch를 초기화 하지 않도록 한다. 아래와 같은 이유 때문이다.\n\n위 방법대로 develop branch를 초기화 한 후 작업 했던 branch를 develop에 다시 merge 하려면 되지 않는다. 이미\nmerge 된 것으로 인식하기 때문인 것 같다.\n\n만약 PR이 열린채로 develop을 초기화 해야만 하는 경우라면 다음과 같이 작업 중인 branch를 복사해서 develop에 다시 merge\n해야 하는 번거로움이 있다.\n\n 1. 작업 중인 branch(A)를 checkout해서 새로운 branch를 만든다.(A-copy)\n\n 2. A-copy를 A가 분기를 시작한 곳으로부터 rebase 혹은 reset 등을 해서 새로운 커밋처럼 만든다.\n\n 3. develop에 A-copy를 merge\n\n$ git status\nOn branch MP-2702\n...\n\n$ git checkout -b MP-2702-copy\n\n$ git rebase -i HEAD~3 # TODO: 커밋 3개를 합친다.\n(or)\n$ git reset --soft {A가 분기하기 시작된 커밋 해시} & git commit \n\n$ git checkout develop\n$ git merge MP-2702-copy\n$ git push \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/609288193"
  },
  {
    "pageContent": "Git 가이드\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40173590"
  },
  {
    "pageContent": "변수 명명 규칙\n * 케이스\n * Boolean\n * Date\n * Abbreviations\n * Opening or closing\n * Redundant\n * 참고\n\n\n케이스\n\n * JS 변수 camelCase\n\n * TS Class, Type, Interface 선언 PascalCase\n   \n   * 예시:\n     \n     * type TypeName = { propertyName: any };\n     \n     * class ClassName { ... }\n     \n     * type CcbMedia = { ... }; // CCB와 같이 모두가 알만한 약자 또한 파스칼 케이스를 유지한다. Abbreviations 참고\n   \n   * Type, Interface 변수명이 prefix, postfix 없이 구분이 가능할 때에 변수명에 Type을 붙이지 않도록 한다.\n\n * (Draft) String literal 을 구성하는 요소는 PascalCase 로 한다.\n   \n   * 예시\n     \n     type UserStatus = 'Active' | 'Pending' | 'Terminated';\n   \n   * 참고 Enum value\n     [https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions]\n\n\nBOOLEAN\n\nBoolean type의 변수일 경우, 가능하다면 is(are), has, can을 앞에 붙이자. 영어 문장이라 생각하고보자. 이런 동사가\n앞에오면 yes, no로 대답 가능한 의문문이 되기 때문에 코드 가독성이 더 좋아진다. is(are)의 경우는 \"맞는가?\", has의 경우는\n\"가지고 있는가?\", can의 경우는 \"할 수 있나?, 성공했나?\" 정도로 번역되니 더 자연스러운 변수명이 될 것이라 생각한다. (예외 적인\n상황도 있을텐데 어떤 경우일까요?)\n\nboolean type 예\n\n// examples\n\n// good\nlet isCircleGeofence;\nlet hasVehicles;\nlet canFetchClients;\n\n// bad\nlet circleGeofence; // circleGeofence에 boolean이 아니라, circleGeofence에 대한 정보가 들어있을 것으로 예상된다. \nlet vehicles; // 마찬가지로 vehicles를 갖는 list일 것으로 예상된다.\nlet fetchClients; // clients를 fetch하는 함수처럼 보인다.\n\nhttps://dev.to/michi/tips-on-naming-boolean-variables-cleaner-code-35ig\n[https://dev.to/michi/tips-on-naming-boolean-variables-cleaner-code-35ig]\n\n\nDATE\n\n날짜만 포함하는 Date 형식인 경우 (yyyy-mm-dd 형태) postFix 로 on 사용.\n\n시간을 포함하는 Date 형식인 경우 (yyyy-mm-dd HH:mm:SS) postFix 로 at 사용.\n\nconst startOn = '2021-01-21' (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nconst startAt = '2021-01-21' (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nconst endOn = '2021-01-21T00:00:00.000Z' (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nconst endAt = '2021-01-21T00:00:00.000Z' (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://www.englishclub.com/grammar/prepositions-at-in-on-time.htm\n[https://www.englishclub.com/grammar/prepositions-at-in-on-time.htm]\n\n\nABBREVIATIONS\n\n * 가능하면 사용하지 않는다.\n\n * 꼭 사용해야 한다면 두글자일 때는 대문자로 한다.\n\n * 꼭 사용해야 한다면 세글자 이상일 때는 camelCase / PascalCase 로 한다.\n\n * https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/141e06ef(v=vs.71)?redirectedfrom=MSDN\n   [https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/141e06ef(v=vs.71)?redirectedfrom=MSDN]\n\n\nOPENING OR CLOSING\n\n단순히 요소를 여닫기 위해 필요한 변수는 open* 로 짓는다.\n\n * boolean 타입이어야 한다.\n\n * open 으로만 짓는것도 허용한다.\n\n * 필요한 경우 openNotificationPopup 처럼 명사를 붙인다.\n\n * false인 경우 닫히도록 구현해야 한다.\n\nconst [open, setOpen] = useState(false); (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nconst [isOpen, setIsOpen] = useState(false); (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nopen && <Alert />\nopenCreateUserModal && <CreateUserModal />\n\n요소를 여닫을때 주입해야 하는 데이터가 있는 경우 openWith* 으로 짓는다.\n\n * T | undefined 타입이어야 한다.\n\n * 값이 undefined인 경우에만 닫히도록 구현해야 한다.\n\n * With 뒤에는 어떤 데이터를 담는지 알 수 있도록 데이터의 이름을 넣는다.\n\nconst [openWithUser, setOpenWithUser] = useState<UserModel>(user); (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nuseState의 경우 useState<S = undefined>(): [S | undefined,\nDispatch<SetStateAction<S | undefined>>]; 같은 시그니쳐를 가지므로 굳이 undefined를 명시해줄 필요는\n없다.\n\nopenWithUser && <ModifyModal user={openWithUser} />\n\n\nREDUNDANT\n\ninfo, data 같은 postfix 는 붙이지 않는다.\n\n * dumpster vs dumpsterInfo\n\n * user vs userData\n\ninfo, data 같은 postfix 를 붙임으로써 더 알 수 있는 정보가 있나? → 없다\n\n\n참고\n\nhttps://brunch.co.kr/@goodvc78/12 [https://brunch.co.kr/@goodvc78/12]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/176848899"
  },
  {
    "pageContent": "문서 작성 가이드\n * 주석\n   * 토큰 목록\n * 커밋 메시지\n   * Semantic Commit Messages\n   * AI Commits\n * 에러 메시지\n\n\n주석\n\n주석을 작성할 때 앞에 TODO 와 같은 토큰을 붙이면 검색이 용이하고 주석을 작성한 목적에 따른 분류 가능\n\n// TODO: validation 구현해야 함\n// NOTE: 왜 이렇게 개발했냐면...\n\n\n토큰 목록\n\n * NOTE\n   \n   * 주목 필요한 부분\n   \n   * 그냥 주석이랑 차이 없지만 하이라이트 시켜서 개발자가 한번 더 읽어 보도록 하기 위한 용도\n     \n     image-20240527-011602.png\n     [https://ecubelabs.atlassian.net/wiki/download/attachments/120783029/image-20240527-011602.png?api=v2]\n\n * TODO\n   \n   * 아직 구현되지 않았지만 언젠가 해야 하는 일\n\n * FIXME\n   \n   * 빠른 시간 내에 해야 하는 일\n   \n   * 어떤 목적(최적화, 리팩토링 등)을 달성하기 위해 코드를 고칠 필요가 있음\n\n * HACK\n   \n   * 주석이 없다면 왜 이렇게 코딩했을지 알 수 없는 예상치 못한 방법을 사용함\n\n * OPTIMIZE\n   \n   * 최적화가 필요한 부분\n\n * BUG\n   \n   * 버그가 있는 코드\n\n * HARDCODING\n   \n   * 하드코딩된 값\n\n\n커밋 메시지\n\n\nSEMANTIC COMMIT MESSAGES\n[https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716]\n\n\nAI COMMITS [https://github.com/Nutlope/aicommits]\n\n\n에러 메시지\n\nhttps://www.morling.dev/blog/whats-in-a-good-error-message/\n[https://www.morling.dev/blog/whats-in-a-good-error-message/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783029"
  },
  {
    "pageContent": "JS/TS 개발 가이드\n\nFront-end, Back-end 에 공통적으로 적용되는 JS 개발 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1333264389"
  },
  {
    "pageContent": "Date 개발 가이드\n * 타입\n   * DateTime\n   * DayOfWeek\n   * CalendarDate\n * 연산\n * DateTime ↔︎ CalendarDate\n * Summer time\n\n\n타입\n\n다음과 같이 사용하기로 약속한다.\n\n\nDATETIME\n\nhttps://docs.microsoft.com/en-us/dotnet/api/system.datetime?view=net-6.0\n[https://docs.microsoft.com/en-us/dotnet/api/system.datetime?view=net-6.0]\n\ntype DateTime = string; // 날짜 + 시간 정보가 있는 string\n\n\nDAYOFWEEK\n\nhttps://docs.microsoft.com/en-us/dotnet/api/system.dayofweek?view=net-5.0\n[https://docs.microsoft.com/en-us/dotnet/api/system.dayofweek?view=net-5.0]\n\ntype DayOfWeek \n  = 'Sunday'\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday';\n\n\nCALENDARDATE\n\nhttps://en.wikipedia.org/wiki/Calendar_date\n[https://en.wikipedia.org/wiki/Calendar_date]\n\ntype CalendarDate = string; // yyyy-mm-dd 형태의 string\n\n\n\n\n연산\n\nDate 연산은 항상 libs/date, libs/calendar-date 를 통해야 한다.\n\nDate 라이브러리는 종류가 다양한데 인터페이스도 다 달라서 특정 라이브러리에 의존하게 개발해 놓으면 나중에 교체가 너무 힘들기 때문이다.\n\n입력받는 parameter 에따라서 나누어 사용한다\n\n * 입력받는 parameter가 CalendarDate면 libs/calendar-date\n\n * 입력받는 parameter가 Date면 libs/date\n\n * https://github.com/Ecube-Labs/haulla-back-office-front/pull/986#discussion_r1058172528\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/986#discussion_r1058172528]\n\n\nDATETIME ↔︎ CALENDARDATE\n\n타임존 없이는 이 과정이 성립할 수 없다.\n\nDateTime: 2022-12-27T03:00:00.000Z\n\n * Asia/Seoul 기준 CalendarDate: 2022-12-27\n\n * America/Los_Angeles 기준 CalendarDate: 2022-12-26\n\n * 타임존이 없다면 CalendarDate 로 2022-12-27 을 사용해야 할지 2022-12-26 를 사용해야 할지 결정할 수 없다.\n\n\n\n\nSUMMER TIME\n\ntimezone을 다룰때 미국에는 Summer Time이 있기 때문에 해당 테스트가 이루어져야 한다. (moment를 사용하는 경우\nutcOffset 같은 애들은 모킹된 날짜 기준이 아닌 현재날짜 기준으로 offset을 하기때문에 모킹이 되지 않는다.)\n\n * 테스트는 date 함수 뿐만 아니라 사용하는곳에서도 작성하면 좋을 것 같다.\n\n// packages/calendar-date/src/calendar-date.test.ts\ndescribe(\"startOfDay() 테스트\", () => {\n  test(\"해당 타임존에서 0시가 되는 UTC를 반환한다. - LA\", () => {\n    expect(startOfDay(\"2022-12-28\", \"America/Los_Angeles\")).toEqual(\n      new Date(\"2022-12-28T08:00:00.000Z\")\n    );\n  });\n  test(\"해당 타임존에서 0시가 되는 UTC를 반환한다. - LA(summerTime)\", () => {\n    expect(startOfDay(\"2022-08-28\", \"America/Los_Angeles\")).toEqual(\n      new Date(\"2022-08-28T07:00:00.000Z\")\n    );\n  });\n});\n\n// core-api/src/services/individual-services/domain/model.test.ts\ntest('collectionExpectedAt을 수거 요일 중 가장 빠른 요일로 변경한다.', () => {\n    const service = plainToClass(IndividualService, {\n        ...baseService,\n        collectionExpectedAt: undefined,\n        frequency: new Frequency({ every: '1 week', on: ['Sunday'], count: 1 }),\n    });\n    service.determineCollectionExpectedAt('America/Los_Angeles');\n\n    expect(service.collectionExpectedAt).toEqual(new Date('2023-09-04T07:00:00.000Z'));\n});\ntest('collectionExpectedAt을 수거 요일 중 가장 빠른 요일로 변경한다. - no summerTime', () => {\n    mockDate(new Date('2023-12-14T00:00:00.000Z'));\n    const service = plainToClass(IndividualService, {\n        ...baseService,\n        collectionExpectedAt: undefined,\n        frequency: new Frequency({ every: '1 week', on: ['Sunday'], count: 1 }),\n    });\n    service.determineCollectionExpectedAt('America/Los_Angeles');\n\n    expect(service.collectionExpectedAt).toEqual(new Date('2023-12-18T08:00:00.000Z'));\n});",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1938784349"
  },
  {
    "pageContent": "Front-end 개발 가이드\n\n앱, 웹에 공통적으로 적용 되는 개발 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230621346"
  },
  {
    "pageContent": "Back-end 개발 가이드 (Node.js)\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/111116289"
  },
  {
    "pageContent": "모바일 앱 개발 가이드\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2043609129"
  },
  {
    "pageContent": "배포 가이드",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/220233971"
  },
  {
    "pageContent": "DB 작업 관련 가이드\n * DB 작업 과정\n * DB 작업 JIRA 템플릿\n * DBA\n\n\n\n\n\nDB 작업 과정\n\nhaulla는 아래 과정 없이 ORM을 이용해 별도로 관리한다.\n\n 1. 개발자 → DBA 에게 JIRA 로 요청. 요청할 때는 아래의 템플릿 규칙을 준수해야 한다.\n    \n    1. stage DB 는 개발자가 직접 변경해도 되고 잘 모르겠으면 DBA 에게 요청해도 된다.\n\n 2. DBA 는 해당 이슈로 PR 생성해서 db-schema [https://github.com/Ecube-Labs/db-schema] 코드\n    리뷰 진행.\n    \n    1. DBA 끼리 하거나 작업을 요청한 개발자도 함께 하거나.\n\n 3. PR 머지 되면 DBA 가 prod DB 에 반영.\n\n\n\n\n\nDB 작업 JIRA 템플릿\n\n필드\n\n값\n\nProject\n\nSoftware (CCNB)\n\nIssue Type\n\nTask\n\nComponent/s\n\nInfra/DB\n\n나머지 필드\n\n관리자가 이해할 수 있는 내용을 자유롭게 기술\n\n\n\n\n * 계정 생성 요청\n\n * 데이터 보정 요청\n   \n   * 쿼리는 본인이 직접 작성해야 함\n\n\n\n\n\nDBA\n\nDB\n\nDBA\n\nccn db\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\nproduct db\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\nhaulla db\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/138314121"
  },
  {
    "pageContent": "Dockerfile 작성 가이드\n * CMD에서 npm 스크립트 사용 금지\n * yarn 으로 CMD 작성 시 v1 사용 금지\n * 환경변수\n   * ARG\n   * ENV\n     * Use case\n * ARG 명령 사용시 주의할 점\n   * Bad\n   * Good\n * 가능하면 이미지 사이지를 작게, 빌드할때 캐시가 되도록\n\n\nCMD에서 NPM 스크립트 사용 금지\n\n * https://github.com/Ecube-Labs/kafka-webhook-producer/pull/7\n   [https://github.com/Ecube-Labs/kafka-webhook-producer/pull/7]\n\n * https://github.com/npm/npm/pull/10868 [https://github.com/npm/npm/pull/10868]\n\nnpm 으로 실행하면 SIGTERM / SIGINT와 같은 시그널이 정상적으로 동작하지 않아 라이프사이클 핸들링에 문제가 생긴다.\n\n\nYARN 으로 CMD 작성 시 V1 사용 금지\n\n * yarn v1은 signal을 정상적으로 처리하지 않으므로 사용하면 안된다.\n\n * 프로젝트 내부에서 v3+ 를 사용한다고 해도 전역에 있는 yarn이 v1인 경우 문제가 해결되지 않으므로 전역 버전을 별도로 설정한다.\n\n * 참고\n   \n   * https://github.com/Ecube-Labs/ecubelabs/pull/284\n     [https://github.com/Ecube-Labs/ecubelabs/pull/284]\n\nRUN corepack enable\nRUN corepack prepare yarn@3.5.1 --activate\n\n\n환경변수\n\n\nARG\n\nARG = 빌드 할 때만 유효\n\n// Dockerfile\nFROM node:18-alpine\nARG NODE_ENV\nRUN npm run build\nCMD [\"node\", \"dist/server.js\"]\n\n> docker build --build-arg NODE_ENV=development .\n// npm run build 할때 NODE_ENV=development\n// 컨테이너 실행할 때 NODE_ENV=undefined\n\n\n\n// Dockerfile\nFROM node:18-alpine\nRUN npm run build\nARG NODE_ENV\nCMD [\"node\", \"dist/server.js\"]\n\n> docker build --build-arg NODE_ENV=development .\n// npm run build 할때 NODE_ENV=undefined\n// 컨테이너 실행할 때 NODE_ENV=undefined\n\n→ 순서가 중요하다.\n\n\nENV\n\nENV = 빌드타임, 런타임에 유효\n\n// Dockerfile\nFROM node:16-alpine\nARG NODE_ENV\nENV APP_ENV=$NODE_ENV\nRUN npm run build\nCMD [\"node\", \"dist/server.js\"]\n\n> docker build --build-arg NODE_ENV=development .\n// npm run build 할때 NODE_ENV=development, APP_ENV=development\n// 컨테이너 실행할 때 NODE_ENV=undefined, APP_ENV=development\n\n\nUSE CASE\n\n> docker run -e \"APP_ENV=local\"\n\n런타임 환경변수는 보통 실행 환경에 따라 다르기 때문에 Dockerfile 에 잘 선언하지 않는다.\n\n(Dockerfile 에서 ENV 로 선언한 값은 컨테이너 실행 시 -e 옵션으로 덮어 씀)\n\n빌드타임에 결정 되는 값을 런타임에서도 사용할 때 보통 ENV 를 사용한다.\n\n(Ex - commit hash)\n\n\nARG 명령 사용시 주의할 점\n\nnpm ci 는 NODE_ENV 환경변수가 “production” 이면 devDependency를 설치하지 않습니다.\n\nARG 명령이 실행되면 빌드중인 컨테이너에 환경변수로 설정된다.\n즉, 아래 Bad 예시에선 9번째 줄 시점에서 NODE_ENV, PORT, COMMIT_HASH 3개가 환경변수로 선언된것.\n\n때문에 NODE_ENV를 “production” 으로 주입해서 빌드한 경우, 11번째 줄에서 설치하는 모듈은 devDependency에 있는\n패키지를 제외하고 설치되는것이다.\n\n\nBAD (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nFROM node:18-alpine\n\nWORKDIR /my-custom-app\n\nCOPY package*.json ./\n\nARG NODE_ENV\nARG PORT\nARG COMMIT_HASH\n\nRUN npm ci\n\nCOPY . .\n\nENV NODE_ENV=$NODE_ENV \\\n    PORT=$PORT \\\n    COMMIT_HASH=$COMMIT_HASH\n    \nRUN npm run build\n\nCMD [\"node\", \"dist/server.js\"]\n\n이렇게 작성하면 TypeScript나 Webpack처럼 devDependency에 넣어둔 패키지를 설치하지 않아서 19번 라인에서 앱 빌드를\n시도하면 실패하게 될 수 있다. (일반적으로 NODE_ENV=production만 해당)\n\nWhy? 앱 빌드에 필요한 tsc나 webpack cli가 설치되지 않았기 때문이다.\n\n\nGOOD (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nFROM node:18-alpine\n\nWORKDIR /my-custom-app\n\nCOPY package*.json ./\n\nRUN npm ci\n\nCOPY . .\n\nARG NODE_ENV\nARG PORT\nARG COMMIT_HASH\n\nENV NODE_ENV=$NODE_ENV \\\n    PORT=$PORT \\\n    COMMIT_HASH=$COMMIT_HASH\n\nRUN npm run build\n\nCMD [\"node\", \"dist/server.js\"]\n\n이렇게 하면 필요한 항상 모든 패키지가 설치된 상태로 앱 빌드를 시작할 수 있다.\n\n단, devDependency도 빌드된 이미지에 포함되기 때문에 이미지 크기가 더 커진다.\n\n이미지 크기를 작게 만드려면 최종적으로 필요한 패키지만 남겨놓도록 작성하면 된다.\nmulti-stages build\n[https://docs.docker.com/develop/develop-images/multistage-build/]를 활용하던가, 마지막\n앱을 실행할때 필요 없는 패키지를 지우는게 일반적이다.\n\n그러나 위 방법대로 하면 layer cache가 안돼서 빌드가 매번 오래 걸릴수도 있다는 단점이 있으니 잘 작성해야한다.\n\n\n가능하면 이미지 사이지를 작게, 빌드할때 캐시가 되도록",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/852393996"
  },
  {
    "pageContent": "Jenkins job 작성 가이드\n * cron\n * 모니터링\n\n\nCRON\n\n특별한 이유가 있는 게 아니라면 분에 0 을 입력하지 않는다.\n\n0 4 * * * (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nH 4 * * * (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n0 을 입력하게 되면 n시 0분이 되었을 때 동시에 여러 job 이 실행 되는 경우가 생긴다.\n\nH 를 사용하면 Jenkins 가 알아서 job 실행 시점을 분산시킨다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2844688853/image-20231124-071352.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2844688853/image-20231124-071406.png?api=v2]\n\n\n모니터링\n\njob 은 3가지 상태로 구분할 수 있다.\n\n * 실행 됨\n\n * 아직 실행 안 됨\n   \n   * ex) 매달 25일에 실행되는 job 은 1-24일에 봤을 때 실행 안됐어도 문제 없는 것임\n\n * 실행 됐어야 하지만 오류로 인해 실행 안 됨\n\n모니터링을 방법\n\n * Elasticsearch 에서 해당 job 의 호출 기록이 있는지 확인한다.\n   \n   * 호출 기록이 없으면 알림\n     \n     * job 이 성공했지만 Elasticsearch 문제로 인해 알림이 발생할 수도 있다.\n     \n     * 이 경우에 알림 받아도 상관 없음 (job 이 성공했기 때문에 알림 받아도 대응할 필요 없음)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2844688853"
  },
  {
    "pageContent": "번역 요청 가이드\n\n번역 요청은 기획자만 합니다.\n\n개발자가 번역 요청을 하고 싶은 경우 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 문의 해주세요.\n\n\n\n * 신규 번역 요청\n   * 1. 화면 설계에 번역 키 추가\n     * 1.1. 번역 키 형식\n     * 1.2. 번역 키 추가\n   * 2. 지라를 통해 번역 요청\n * 번역 수정 요청\n   * 1. 지라를 통해 번역 요청\n * 출력 데이터 형식\n   * 변수가 있는 출력 데이터\n * 기존 다국어 메시지 migration\n\n\n신규 번역 요청\n\n\n1. 화면 설계에 번역 키 추가\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191230-033522.png?api=v2]\n\n\n1.1. 번역 키 형식\n\n * mp__ (언더바 두개)를 prefix 로 붙이고 나머지는 _ 를 이용해 적절하게 이름을 짓는다.\n   \n   * ex) mp__hello_world\n\n * 번역 키는 고유값이어야 한다. (위키에서 번역 키 검색 시 일반적인 영어 단어가 같이 검색되지 않도록 위와 같이 prefix 를 정함)\n   \n   * 아래와 같이 위키에서 검색했을 때 검색 결과가 있으면 키 중복이다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20200114-015647.png?api=v2]\n     \n     \n\n\n1.2. 번역 키 추가\n\n * 출력 데이터 열에 추가하면 됨.\n\n * 반드시 한국어 + 콤마 + 번역 키 형태로 추가 한다.\n   \n   * 중간에 공백을 넣지 않는다.\n     \n     * ex) 알림 목록, mp__notifications (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n       \n       * 콤마 와 번역 키 사이에 공백이 있기 때문에 위의 예제는 잘못된 것.\n   \n   * 번역 자체에 변수를 포함해야 한다.\n     \n     * 단 변수가 금액인 경우, 번역에 통화 기호를 포함하지 않는다.\n     \n     * ex) 추천됨 {price},mp__suggested,Max Price {price} (파란별)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/2705.png]\n     \n     * ex) 추천됨 $ {price},mp__suggested,Max Price $ {price} (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n\n2. 지라를 통해 번역 요청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191230-033629.png?api=v2]\n\n * Project: CCNB\n\n * Assignee: 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * Description\n   \n   * 한국어 + 콤마 + 번역 키\n   \n   * 중간에 공백을 넣지 않는다.\n   \n   * n 개가 있어도 상관 없음.\n\n * 나머지 필드는 optional.\n\n\n번역 수정 요청\n\n * 화면 설계의 “출력 데이터” 는 이미 한국어 + 콤마 + 번역 키 형태.\n\n * 화면 설계의 한국어를 직접 수정하지 않고 바로 지라를 통해 수정 요청 한다.\n\n\n1. 지라를 통해 번역 요청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191230-033710.png?api=v2]\n\n * Project: CCNB\n\n * Assignee: 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * Description\n   \n   * 한국어 + 콤마 + 번역 키\n   \n   * 중간에 공백을 넣지 않는다.\n   \n   * n 개가 있어도 상관 없음.\n\n * 나머지 필드는 optional.\n\n\n출력 데이터 형식\n\n\n변수가 있는 출력 데이터\n\n변수는 중괄호로 감싸면 된다. 변수의 이름은 임의로 해도 무방하다.\n\nex)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20200211-012354.png?api=v2]\n\n출력 데이터\n\n * 한글: 즉시 낙찰 {price}\n\n * 영어: Secure this collection at {price}\n\n\n\n\n기존 다국어 메시지 MIGRATION\n\n * 기존 다국어 메시지에는 출력 데이터에 번역 키가 없는 상태\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191226-095953.png?api=v2]\n   \n   * 한번에 번역 키를 다 추가할 수는 없으니 변경 사항이 있는 화면 설계 위주로\n     https://translation.ecubelabs.xyz/ [https://translation.ecubelabs.xyz/] 에서\n     번역 키를 확인한 뒤 화면 설계에 반영.\n   \n   * 키가 없는 경우 개발자는 기획자에게 키\n   \n   * 위의 경우 수거 확인 에 대한 번역 키는 mp__confirm_collection이므로,\n     출력 데이터를 수거 확인,mp__confirm_collection으로 변경 하면 된다.\n\n * 삭제 된 번역 제거\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191226-100536.png?api=v2]\n   \n   * 위와 같이 취소선으로 삭제 된 번역은 위키에 남겨두지 말고 그냥 지운다.\n   \n   * 이것도 한번에 다 할 수는 없으니 눈에 띌 때마다 지운다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/262734319"
  },
  {
    "pageContent": "RxJS\n\n\n\n\n\n\n\ntap [https://rxjs-dev.firebaseapp.com/api/operators/tap] 을 사용한다면 내가 제대로 개발하고\n있는건지 먼저 의심해봐야 한다.\n\n디버깅 할 때 console.log를 찍는게 아니라면 사이드 이펙트를 일으키려고 사용하는 경우가 대부분이기 때문이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334626869"
  },
  {
    "pageContent": "Secure Coding\n * X-Powered-By\n * ?\n * 보안 스캔\n\n\nX-POWERED-BY\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-powered-by\n[https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-powered-by]\n\n\n\n\n?\n\nhttps://www.scalescale.com/tips/nginx/how-to-deny-script-execution-inside-writable-directories/\n[https://www.scalescale.com/tips/nginx/how-to-deny-script-execution-inside-writable-directories/]\n\n\n\n\n보안 스캔\n\nhttps://observatory.mozilla.org [https://observatory.mozilla.org]\n\n\n\nColumn-Level Encryption in MySQL - Percona Database Performance Blog\n[https://www.percona.com/blog/column-level-encryption-in-mysql/]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/62128425"
  },
  {
    "pageContent": "새 프로젝트 환경 설정 가이드\n\n모든 환경은 node_modules가 설치된것을 기준으로 설명한다.\n\n\n운영환경 규칙\n\n 1. npm start 명령어를 실행했을때 조건 없이 앱 실행이 가능해야 한다.\n    \n    1. TypeScript를 사용하는 프로젝트인 경우 빌드가 되어있는 상태를 전제로 한다.\n\n 2. 앱 빌드 또는 실행시 주입이 필요한 환경변수는 모두 Dockerfile에 정의해둔다.\n    (런타임에 필요한 환경변수는 배포시 k8s가 컨테이너에 직접 주입해서 상관 없지만, 개발자를 위한 문서로서 사용한다.)\n    \n    1. Build-time에 필요한 환경변수는 “ARG” 명령어만 사용한다.\n    \n    2. Run-time에 필요한 환경변수는 “ENV” 명령어만 사용한다.\n       Build-time과 함께 사용하는 경우 ENV TEST=$TEST 처럼 인자를 환경변수에도 주입해준다.\n\n\n개발환경 규칙\n\n 1. npm run start:dev 명령어를 실행했을때 빌드되어 있지 않아도 앱 실행이 가능해야 한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204275761"
  },
  {
    "pageContent": "다국어 개발 가이드\n * ICU i18n 가이드\n * 메시지 내용\n   * 폼 레이블\n\n\nICU I18N 가이드\n\nhttps://unicode-org.github.io/icu/userguide/icu/i18n.html\n[https://unicode-org.github.io/icu/userguide/icu/i18n.html]\n\nICU에 포함된 기능만 사용해도 i18n과 l10n은 대체로 커버가 가능하기 때문에 로직에 관련 코드를 포함하지 않도록 주의\n\n\n메시지 내용\n\n\n폼 레이블\n\n필수, 선택과 같은 내용을 포함시키지 않는다.\n\nFirst Name (required) (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nFirst Name (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n<TextField required /> 와 같이 개발하기 때문에 property 를 보고 일괄적으로 스타일 및 컨텐츠를 적용할 수 있다.\n\nhttps://ecubelabs.atlassian.net/browse/MP-4368\n[https://ecubelabs.atlassian.net/browse/MP-4368]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1702428884"
  },
  {
    "pageContent": "Monorepo 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1714290725"
  },
  {
    "pageContent": "Test 작성 가이드\n\nhttps://testing-playground.com/ [https://testing-playground.com/]\n\ncheat-sheet.pdf\n[/wiki/spaces/SW/pages/27787361/Test?preview=%2F27787361%2F2581102646%2Fcheat-sheet.pdf]\n\n[https://api.media.atlassian.com/file/ffd87bfd-b94d-4cd9-bd56-9f0fe971db86/image?token=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI4N2I5ZmE2OS1mYzI1LTRhZDYtOThiMS01NGFmOTU4OGFkYWIiLCJhY2Nlc3MiOnsidXJuOmZpbGVzdG9yZTpmaWxlOmZmZDg3YmZkLWI5NGQtNGNkOS1iZDU2LTlmMGZlOTcxZGI4NiI6WyJyZWFkIl19LCJleHAiOjE3MjIyMTQ1OTUsIm5iZiI6MTcyMjIxMTU5NX0.hkSw7sZhgAS_ovzzJqu0UZCwKFkoMC1Gfp6iXno5lUU&client=87b9fa69-fc25-4ad6-98b1-54af9588adab&name=cheat-sheet.pdf]\n\n\n테스트 기본 원칙\n\n * https://www.boxuk.com/insight/the-seven-principles-of-testing/\n   [https://www.boxuk.com/insight/the-seven-principles-of-testing/]\n\n * https://howtodoinjava.com/best-practices/first-principles-for-good-tests/\n   [https://howtodoinjava.com/best-practices/first-principles-for-good-tests/]\n\n * 테스트케이스에 3가지 설명을 넣을것:\n   https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/testingandquality/3-parts-in-name.md\n   [https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/testingandquality/3-parts-in-name.md]\n   \n   * 1) 뭘 테스트 하는가?\n   \n   * 2) 시나리오\n   \n   * 3) 결과\n\n * 가능한 계산된 결과 값을 사용하지 말것:\n   https://softwareengineering.stackexchange.com/questions/126652/should-unit-test-expected-results-be-hardcoded\n   [https://softwareengineering.stackexchange.com/questions/126652/should-unit-test-expected-results-be-hardcoded]\n   \n   * 테스트 대상에 버그가 있어도 잘못된 값을 그대로 가져오기 때문에 테스트를 통과시키는 문제가 발생할 수 있다.\n   \n   * 만약 유연한 테스트 코드를 위해 계산된 결과 값을 사용해야 한다면, 얻어온 결과 값이 기대한 형태가 맞는지 검증하고 사용한다.\n\n * 구현 로직을 테스트코드에 복제하지 않도록 한다.\n   \n   * https://www.testim.io/blog/unit-testing-best-practices/\n     [https://www.testim.io/blog/unit-testing-best-practices/]\n   \n   * Test Shouldn't Duplicate Implementation Logic\n\n * 테스트 코드에 의해 로직이 실패하는것을 먼저 확인하고 로직을 작성한다.\n   \n   * 로직을 다 작성해두고 이에 맞춰 테스트 코드를 작성하는것보다, 테스트에 실패하는것을 확인하고 로직을 개선해야 훨씬 효과적인 테스트\n     코드를 작성할 수 있다.\n   \n   * 이를 지키지 않을 경우 로직이 이상하게 동작하는데 잡아내지 못하는 테스트 코드를 만들기 쉽다.\n     (=== 의미 없는 테스트 코드)\n   \n   * TDD 원칙을 모두 따를 필요는 없으나, 의미있는 테스트 코드를 작성하기 위한 가장 효과적인 방법중 하나이다.\n\n\nTDD\n\n> TDD의 장점\n> \n> • 자신이 얼마나 설계를 못하고 의존적이며 즉흥적인 코딩을 하고 있는지 (=엉터리 개발자인지) 알게 된다.\n\nhttps://repo.yona.io/doortts/blog/issue/2#yb-header-생각이-살짝-바뀐-부분\n[https://repo.yona.io/doortts/blog/issue/2#yb-header-생각이-살짝-바뀐-부분]\n\n\nBDD\n\nTDD와 크게 다르지 않다.\n다만, 테스트 케이스를 사용자의 입장(요구사항)에서 작성하는것이 차이점이라고 볼 수 있을것같다.\n\n * https://yorr.tistory.com/26 [https://yorr.tistory.com/26]\n\n * https://blog.aliencube.org/ko/2014/04/02/differences-between-bdd-and-tdd/\n   [https://blog.aliencube.org/ko/2014/04/02/differences-between-bdd-and-tdd/]\n\n테스트 코드가 기획 문서와도 같게 관리되는것이 베스트라고 보인다.\n\n\n읽어볼 만한 자료들\n\n * 단위 테스트부터 잘 작성하고 볼 일: http://huns.me/development/1865\n   [http://huns.me/development/1865]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27787361"
  },
  {
    "pageContent": "분산 추적\n\nGoal: https://zipkin.io/ [https://zipkin.io/]\n\n\n분산 추적이란?\n\nhttps://www.elastic.co/guide/en/apm/get-started/6.6/distributed-tracing.html#distributed-tracing\n[https://www.elastic.co/guide/en/apm/get-started/6.6/distributed-tracing.html#distributed-tracing]\n\n\n사용 예시\n\n아래처럼 한 트랜잭션 안에서 같은 txId를 공유하도록 구현한다. 두 애플리케이션은 매 요청마다 log forwarder로 로그를 던진다.\n(ref. Elastic Cloud on Kubernetes (ECK)\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293/Elastic+Cloud+on+Kubernetes+ECK]\n)\n\n// haulla-api\nawait axios.post(dislpadUrl, {..}, { \n  headers : {\n    'x-request-id': txId\n  } \n})\n\n// dialpad-api\nctx.state.txId = ctx.get('x-request-id');\n\n\n\n결과적으로 txId로 아래처럼 연관된 요청들을 한번에 추적할 수 있다. (ref.\nhttps://docs.microsoft.com/ko-kr/dotnet/core/diagnostics/distributed-tracing-concepts#activity-ids\n[https://docs.microsoft.com/ko-kr/dotnet/core/diagnostics/distributed-tracing-concepts#activity-ids]\n)\n\n이큐브랩의 어플리케이션 로그는 대부분 https://kibana.cleancitynetworks.com/\n[https://kibana.cleancitynetworks.com/] https://kibana-stage.ecubelabs.xyz/\n[https://kibana-stage.ecubelabs.xyz/] 에서 확인할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1868169440/image-20211020-061509.png?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1868169440"
  },
  {
    "pageContent": "키바나 사용 가이드\n * 사용자 이벤트 검색\n\n\n사용자 이벤트 검색\n\nEvent Logger\n[https://github.com/Ecube-Labs/haulla/blob/a7bad90bd4566fbe39610e1fa94376b45c09f366/packages/event-logger/src/index.ts#L16]\n가 활성화 되어 있는 경우\n\nGoogle Tag Manager 를 활용하기 때문에 사용자가 Ad Block 같은 걸 쓰면 이벤트가 제대로 기록 되지 않는다.\n\n사용자가 버튼을 클릭했는지 확인하고 싶으면 다음과 같이 검색하면 된다\n\n스크린샷 2024-06-28 오전 9.43.10.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3074555952/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202024-06-28%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.43.10.png?api=v2]스크린샷\n2024-06-28 오전 9.44.20.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3074555952/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202024-06-28%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.44.20.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3074555952"
  },
  {
    "pageContent": "OAuth2 연동 가이드\n * [OAuth2] GCP OAuth2 Client 연동\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1891172498/OAuth2+GCP+OAuth2+Client]\n\n\n\n--------------------------------------------------------------------------------\n\n\nSPEC\n\nIETF RFC6749를 따르면 OAuth 2.0이라 부를수 있다.\n\nhttps://datatracker.ietf.org/doc/html/rfc6749\n[https://datatracker.ietf.org/doc/html/rfc6749]\n\n\nACCESS TOKEN [https://datatracker.ietf.org/doc/html/rfc6749#section-1.4]\n\n권한을 증명할 수 있는 토큰.\n\n만료 기한이 존재해야한다.\n\n\nREFRESH TOKEN [https://datatracker.ietf.org/doc/html/rfc6749#section-1.5]\n\nAccess token을 다시 받아오기 위해 필요한 토큰.\n이 값을 사용하면 사용자가 직접 인증을 다시 해서 액세스 토큰을 받아오지 않아도 액세스 토큰을 갱신할 수 있다.\n\n리프레시 토큰을 이용하면 만료기한과 상관 없이 Access token을 다시 얻어올 수 있다.\n토큰이 만료되기 전에 주기적으로 Access token을 받아올 필요가 없다는 의미도 된다.\n\nRefresh token의 재사용 가능 여부나 만료 기한에 대해서는 스펙에 명시되어 있지 않기 때문에 구현체에 따라 다를수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1897267208"
  },
  {
    "pageContent": "Docker compose를 이용한 통합 개발 가이드\n * 준비\n   * 1. 레포 클론\n   * 2. 기반 이미지 다운로드 및 업데이트\n * 개발 시작\n   * 1. 원하는 서비스 이름 확인\n   * 2. 서비스를 나열하여 컨테이너 시작\n * 팁\n   * 특정 서비스 로그 확인\n * 트러블슈팅\n\n이 글은 CCN 기준으로 설명합니다.\n\n\n준비\n\n\n1. 레포 클론\n\n터미널에서 입력\n\ngit clone git@github.com:Ecube-Labs/ecubelabs.git\ncd ecubelabs\ngit submodule update --remote --init --recursive\n\n\n2. 기반 이미지 다운로드 및 업데이트\n\ndocker compose pull\n\n만약 이미 pull을 받았어도 최신 이미지를 받고싶다면 위처럼 pull을 하면 관련 이미지의 레이어를 업데이트한다.\n\n\n\n\n개발 시작\n\n\n1. 원하는 서비스 이름 확인\n\ndocker-compose.yml 파일을 보고 필요한 서비스의 이름을 체크한다.\n\n이번 글에서는 예시로 erp와 iot simulator를 켜려면 “ea, em, is” 가 필요하다. (각 서비스가 어떤 서비스에 의존하는지 잘\n알아야 한다.)\n\ndependency가 잘 등록되어 있지 않다면 하나하나 다 나열해야 하지만, 지금은 위의 서비스만 켜도 나머지 의존 서비스도 같이 켜진다.\n\n\n2. 서비스를 나열하여 컨테이너 시작\n\ndocker compose up --build em ea is\n\n이제 개발하면 된다.\n\n서비스 이름을 붙이지 않으면 모든 서비스가 시작될 수 있다. 리소스 낭비이므로 필요한 서비스만 시작하도록 한다.\n\n\n팁\n\n\n특정 서비스 로그 확인\n\ndocker compose logs <service-name> -f --tail 10\n\n서비스 이름을 입력하면 해당 서비스에서 마지막으로 발생한 stdout 10줄을 가져오면서 새로 발생하는 stdout을 지속적으로 보여준다.\n\n\n트러블슈팅\n\n * 가끔 DB보다 다른 서비스가 먼저 켜졌는데 재시작을 못하는 경우가 있다. 이런 경우 직접 컨테이너를 재시작해주면 된다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1912930468"
  },
  {
    "pageContent": "사용자 추적 가이드\n\nutm 이 de facto standard 인듯. 특별한 이유가 없다면 utm 을 사용해서 사용자를 추적하면 된다.\n\n\n구글 광고에서 UTM 을 활용한 사용자 추적 사례\n\n[/wiki/download/attachments/812679293/refer-haulla.png?api=v2]\n\n\nDOUBLE UTM PARAMETERS\n\n하나의 파라미터를 중복해서 사용하는 경우 마지막 값을 추적. 복수 추적이라는 개념은 없다.\n\nhttps://www.reddit.com/r/GoogleAnalytics/comments/e6ubbh/double_utm_parameters/\n[https://www.reddit.com/r/GoogleAnalytics/comments/e6ubbh/double_utm_parameters/]\n\nMP-5019 [https://ecubelabs.atlassian.net/browse/MP-5019?src=confmacro]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/812679293"
  },
  {
    "pageContent": "사무실 주소 관련 리소스\n * 미국 오피스 주소 변경\n   * 2023.03\n\n * @ccn/lang: ECUBE_ADDR\n\n * ccn-noti-server: update ccn/lang\n\n * ccn-current: tos, pp\n   \n   * https://github.com/Ecube-Labs/ccn-current/pull/340\n     [https://github.com/Ecube-Labs/ccn-current/pull/340]\n\n * erp-api: pdf export invoice\n   \n   * https://github.com/Ecube-Labs/erp-api/pull/381\n     [https://github.com/Ecube-Labs/erp-api/pull/381]\n\n * 공홈: https://www.ecubelabs.com [https://www.ecubelabs.com]\n\n * 메일 서명: https://github.com/Ecube-Labs/ecube-labs.github.io\n   [https://github.com/Ecube-Labs/ecube-labs.github.io]\n\n이사할 때 마다 위 리소스 변경이 필요한지 확인해야한다.\n\n\n\n기타:\n\nCCNB-6463 [https://ecubelabs.atlassian.net/browse/CCNB-6463] - 이슈 세부사항 가져오는 중...\n상태\n\n\n\n\n미국 오피스 주소 변경\n\n\n2023.03\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283176041/image-20230306-050545.png?api=v2]\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/EL/pages/121307522/US\n[https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/121307522/US]\n\nGH-1191 [https://ecubelabs.atlassian.net/browse/GH-1191] - 이슈 세부사항 가져오는 중... 상태\n\nTS-1804 [https://ecubelabs.atlassian.net/browse/TS-1804] - 이슈 세부사항 가져오는 중... 상태\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2283176041"
  },
  {
    "pageContent": "Copyright 작업 가이드\n\n\n하드코딩하지 말 것.\n\n 1. 해마다 작업해야 하면 귀찮다.\n\n 2. 빅테크들의 레퍼런스 찾아봤는데 다들 그렇게 중요하게 관리하지 않는다.\n    \n    1. SW-6485 [https://ecubelabs.atlassian.net/browse/SW-6485?src=confmacro]\n    \n    2. SW-7885 [https://ecubelabs.atlassian.net/browse/SW-7885?src=confmacro]\n\n\n\nRecommended\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/3912497cdb331dfc9cfd643995b05347f7fb18be/src/app/components/PublicLayout/PublicLayout.tsx#L145\n[https://github.com/Ecube-Labs/ccnx-front/blob/3912497cdb331dfc9cfd643995b05347f7fb18be/src/app/components/PublicLayout/PublicLayout.tsx#L145]\n\n<span>\n  Use of this service constitutes acceptance of our <FooterPolicyLink to=\"/tos\">ToS</FooterPolicyLink> and{' '}\n  <FooterPolicyLink to=\"/privacy-policy\">Privacy Policy</FooterPolicyLink>. © 2013-{new Date().getFullYear()}{' '}\n  Ecube Labs Co., Ltd. All rights reserved.\n</span>",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2611576932"
  },
  {
    "pageContent": "이메일 서명 개발 가이드\n\nhttps://github.com/Ecube-Labs/ecube-labs.github.io\n[https://github.com/Ecube-Labs/ecube-labs.github.io]\n\nhttps://ecube-labs.github.io/ [https://ecube-labs.github.io/]\n\n * 배너\n\n\n배너\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2802450474/image-20230921-023929.png?api=v2]\n\n * 이런 건 전체 이미지로 받을 것\n\n * 이미지를 back ground 로 적용하고 Learn More 를 버튼으로 퍼블리싱하려고 했는데 메일 클라이언트에 따라 이 방식이 통하는\n   것도 있고 안 통하는 것도 있다 → 시간 낭비하지 말고 이미지로 받기\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2802450474"
  },
  {
    "pageContent": "SEO 가이드\n\n뭘 해야 하는 지 잘 모르겠어서 SEO 업체 개발자가 올린 PR 들만 우선 적어 둔다.\n\nhttps://github.com/Ecube-Labs/haulla-landing/pull/184\n[https://github.com/Ecube-Labs/haulla-landing/pull/184]\n\nhttps://github.com/Ecube-Labs/haulla-landing/pull/186\n[https://github.com/Ecube-Labs/haulla-landing/pull/186]\n\nhttps://github.com/Ecube-Labs/haulla-landing/pull/198\n[https://github.com/Ecube-Labs/haulla-landing/pull/198]\n\n\n\n * hreflang\n * 참고\n\n\nHREFLANG\n\nHaulla Hreflang issues.p…\n[/wiki/spaces/SW/pages/2656731290/SEO?preview=%2F2656731290%2F2888565048%2FHaulla+Hreflang+issues.pdf]\n\n\n참고\n\nhttps://fe-developers.kakaoent.com/2022/221208-basic-seo-guide/\n[https://fe-developers.kakaoent.com/2022/221208-basic-seo-guide/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2656731290"
  },
  {
    "pageContent": "패키지 관리 가이드\n\n\nCONFLICT LOCK FILE (YARN.LOCK OR PACKAGE-LOCK.JSON)\n\n모노레포에는 scripts/resolve-conflict-lock.sh 스크립트가 있으므로 해당 스크립트를 실행하면 된다.\n동작 원리에 대한 자세한 내용은 아래 위키를 참고하면 된다.\n\n[OJT][Git] package-lock.json/yarn.lock 충돌 해결\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2086961308/OJT+Git+package-lock.json+yarn.lock]\n\n\nBUMP\n\n * 프로젝트가 노후되지 않도록 매 달 첫번째 주 수요일에 지정된 패키지의 bump를 진행한다.\n   \n   * 패키지를 지속적으로 방치하는 경우 발생 가능한 문제를 예방한다.\n   \n   * 모든 패키지를 bump 해야하는 경우 철저한 테스트를 진행해야 하므로 평소에는 지정된 패키지에 대해서만 관리한다.\n\n * 지정된 패키지는 아래 규칙에 따라 scripts/bump-*.sh 파일에서 형상 관리된다.\n   \n   * test 관련 도구\n     \n     * jest, cypress, testing-library, …\n   \n   * lint 관련 도구\n     \n     * eslint, prettier, …\n   \n   * TODO\n     \n     * storybook, webpack\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2769551378"
  },
  {
    "pageContent": "Tooling troubleshooting guide\n\n개발 환경에서 사용되는 도구에 공통적으로 발생하는 문제를 해결하기 위해 조치한 내용을 기록한다.\n기본적으로 2명 이상이 같은 증상을 보였다면 기록하는것을 원칙으로 한다.\n\n\n\n * test/lint 실행 시 node-canvas 관련 에러 발생한 경우\n   * 조치 방법\n   * 위와 같이 했는데 아래와 같은 에러가 나는 경우\n\n\n\n--------------------------------------------------------------------------------\n\n\nTEST/LINT 실행 시 NODE-CANVAS 관련 에러 발생한 경우\n\nApple chip에서 동작하지 않는 사례 확인됨.\ncanvas 바이너리가 정상적으로 동작하기 위해 필요한 패키지를 설치하고 다시 바이너리를 컴파일해야 한다.\n\nhttps://github.com/Automattic/node-canvas/issues/1733\n[https://github.com/Automattic/node-canvas/issues/1733]\n\n\n조치 방법\n\n 1. 프로젝트에 모든 node_modules 삭제\n\n 2. brew install pkg-config cairo pango libpng jpeg giflib librsvg\n\n 3. yarn install\n\n\n위와 같이 했는데 아래와 같은 에러가 나는 경우\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]canvas 설치\n에러\n\nimage-20240408-045114.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2769682490/image-20240408-045114.png?api=v2]\n\n# This file contains the result of Yarn building a package (canvas@npm:2.11.2)\n# Script name: install\n\nnode-pre-gyp info it worked if it ends with ok\nnode-pre-gyp info using node-pre-gyp@1.0.11\nnode-pre-gyp info using node@20.12.1 | darwin | arm64\nnode-pre-gyp http GET https://github.com/Automattic/node-canvas/releases/download/v2.11.2/canvas-v2.11.2-node-v115-darwin-unknown-arm64.tar.gz\nnode-pre-gyp ERR! install response status 404 Not Found on https://github.com/Automattic/node-canvas/releases/download/v2.11.2/canvas-v2.11.2-node-v115-darwin-unknown-arm64.tar.gz \nnode-pre-gyp WARN Pre-built binaries not installable for canvas@2.11.2 and node@20.12.1 (node-v115 ABI, unknown) (falling back to source compile with node-gyp) \nnode-pre-gyp WARN Hit error response status 404 Not Found on https://github.com/Automattic/node-canvas/releases/download/v2.11.2/canvas-v2.11.2-node-v115-darwin-unknown-arm64.tar.gz \ngyp info it worked if it ends with ok\ngyp info using node-gyp@9.3.1\ngyp info using node@20.12.1 | darwin | arm64\ngyp info ok \ngyp info it worked if it ends with ok\ngyp info using node-gyp@9.3.1\ngyp info using node@20.12.1 | darwin | arm64\ngyp info find Python using Python version 3.12.2 found at \"/opt/homebrew/opt/python@3.12/bin/python3.12\"\ngyp info spawn /opt/homebrew/opt/python@3.12/bin/python3.12\ngyp info spawn args [\ngyp info spawn args   '/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/gyp_main.py',\ngyp info spawn args   'binding.gyp',\ngyp info spawn args   '-f',\ngyp info spawn args   'make',\ngyp info spawn args   '-I',\ngyp info spawn args   '/Users/joelhan/Desktop/haulla/node_modules/canvas/build/config.gypi',\ngyp info spawn args   '-I',\ngyp info spawn args   '/Users/joelhan/Desktop/haulla/node_modules/node-gyp/addon.gypi',\ngyp info spawn args   '-I',\ngyp info spawn args   '/Users/joelhan/Library/Caches/node-gyp/20.12.1/include/node/common.gypi',\ngyp info spawn args   '-Dlibrary=shared_library',\ngyp info spawn args   '-Dvisibility=default',\ngyp info spawn args   '-Dnode_root_dir=/Users/joelhan/Library/Caches/node-gyp/20.12.1',\ngyp info spawn args   '-Dnode_gyp_dir=/Users/joelhan/Desktop/haulla/node_modules/node-gyp',\ngyp info spawn args   '-Dnode_lib_file=/Users/joelhan/Library/Caches/node-gyp/20.12.1/<(target_arch)/node.lib',\ngyp info spawn args   '-Dmodule_root_dir=/Users/joelhan/Desktop/haulla/node_modules/canvas',\ngyp info spawn args   '-Dnode_engine=v8',\ngyp info spawn args   '--depth=.',\ngyp info spawn args   '--no-parallel',\ngyp info spawn args   '--generator-output',\ngyp info spawn args   'build',\ngyp info spawn args   '-Goutput_dir=.'\ngyp info spawn args ]\nTraceback (most recent call last):\n  File \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/gyp_main.py\", line 42, in <module>\n    import gyp  # noqa: E402\n    ^^^^^^^^^^\n  File \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/pylib/gyp/__init__.py\", line 9, in <module>\n    import gyp.input\n  File \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/pylib/gyp/input.py\", line 19, in <module>\n    from distutils.version import StrictVersion\nModuleNotFoundError: No module named 'distutils'\ngyp ERR! configure error \ngyp ERR! stack Error: `gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/Users/joelhan/Desktop/haulla/node_modules/node-gyp/lib/configure.js:325:16)\ngyp ERR! stack     at ChildProcess.emit (node:events:518:28)\ngyp ERR! stack     at ChildProcess._handle.onexit (node:internal/child_process:294:12)\ngyp ERR! System Darwin 23.4.0\ngyp ERR! command \"/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node\" \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/bin/node-gyp.js\" \"configure\" \"--fallback-to-build\" \"--update-binary\" \"--module=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release/canvas.node\" \"--module_name=canvas\" \"--module_path=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release\" \"--napi_version=9\" \"--node_abi_napi=napi\" \"--napi_build_version=0\" \"--node_napi_label=node-v115\"\ngyp ERR! cwd /Users/joelhan/Desktop/haulla/node_modules/canvas\ngyp ERR! node -v v20.12.1\ngyp ERR! node-gyp -v v9.3.1\ngyp ERR! not ok \nnode-pre-gyp ERR! build error \nnode-pre-gyp ERR! stack Error: Failed to execute '/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node /Users/joelhan/Desktop/haulla/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --update-binary --module=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release/canvas.node --module_name=canvas --module_path=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release --napi_version=9 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v115' (1)\nnode-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/Users/joelhan/Desktop/haulla/node_modules/@mapbox/node-pre-gyp/lib/util/compile.js:89:23)\nnode-pre-gyp ERR! stack     at ChildProcess.emit (node:events:518:28)\nnode-pre-gyp ERR! stack     at maybeClose (node:internal/child_process:1105:16)\nnode-pre-gyp ERR! stack     at ChildProcess._handle.onexit (node:internal/child_process:305:5)\nnode-pre-gyp ERR! System Darwin 23.4.0\nnode-pre-gyp ERR! command \"/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node\" \"/Users/joelhan/Desktop/haulla/node_modules/@mapbox/node-pre-gyp/bin/node-pre-gyp\" \"install\" \"--fallback-to-build\" \"--update-binary\"\nnode-pre-gyp ERR! cwd /Users/joelhan/Desktop/haulla/node_modules/canvas\nnode-pre-gyp ERR! node -v v20.12.1\nnode-pre-gyp ERR! node-pre-gyp -v v1.0.11\nnode-pre-gyp ERR! not ok \nFailed to execute '/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node /Users/joelhan/Desktop/haulla/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --update-binary --module=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release/canvas.node --module_name=canvas --module_path=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release --napi_version=9 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v115' (1)\n\npython 버전이 3.12 인 경우 downgrade 해서 사용한다.\nhttps://github.com/nodejs/node-gyp/issues/2869\n[https://github.com/nodejs/node-gyp/issues/2869]\n\n * brew unlink python && brew install python@3.11\n\n * node_modules/canvas 삭제 후 yarn install",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2769682490"
  },
  {
    "pageContent": "Framer 컴포넌트 개발 가이드\n\n개발자가 개발한 컴포넌트를 Framer에 import 해서 디자이너/기획자가 그대로 이용할 수 있다.\n\n다만 여러가지 제약사항을 지키지 않으면 정상적으로 이용할 수 없게 되므로 유의해서 관리해야 한다.\n\n * 개발된 컴포넌트 Framer Import 방법\n * Portal을 이용해 띄우는 컴포넌트는 Framer 내장 컴포넌트의 스타일이 적용되지 않는다.\n\n\n\n--------------------------------------------------------------------------------\n\n\n개발된 컴포넌트 FRAMER IMPORT 방법\n\n이 방법을 따라야 디자이너/기획자가 컴포넌트를 프레이머에서 사용할 수 있다.\n\n 1. 배포한 모듈을 사용해 아래와 같은 방식으로 Code Component를 작성한다.\n    \n    1. import { addPropertyControls, ControlType } from \"framer\"\n       import * as ADS from \"https://www.unpkg.com/@ceed/ads@0.0.7/framer\"\n       \n       /**\n        * These annotations control how your component sizes\n        * Learn more: https://www.framer.com/docs/guides/auto-sizing\n        *\n        * @framerSupportedLayoutHeight auto\n        */\n       export default function Button(props) {\n           const { text, ...innerProps } = props\n       \n           return (\n               <ADS.ThemeProvider>\n                   <ADS.Button {...innerProps}>{text}</ADS.Button>\n               </ADS.ThemeProvider>\n           )\n       }\n       \n       addPropertyControls(Button, {\n           text: {\n               title: \"Text\",\n               type: ControlType.String,\n               defaultValue: \"Press me\",\n           },\n           onTap: {\n               type: ControlType.EventHandler,\n           },\n           disabled: {\n               title: \"Disabled\",\n               type: ControlType.Boolean,\n               defaultValue: false,\n           },\n           color: {\n               title: \"Color\",\n               type: ControlType.Enum,\n               options: [\"primary\", \"neutral\", \"danger\", \"success\", \"warning\"],\n               optionTitles: [\"Primary\", \"Neutral\", \"Danger\", \"Success\", \"Warning\"],\n           },\n           variant: {\n               title: \"Variant\",\n               type: ControlType.Enum,\n               options: [\"solid\", \"outlined\", \"soft\", \"plain\"],\n           },\n           loading: {\n               title: \"Loading\",\n               type: ControlType.Boolean,\n               defaultValue: false,\n           },\n           endDecorator: {\n               title: \"End Decorator\",\n               type: ControlType.ComponentInstance,\n           },\n           startDecorator: {\n               title: \"Start Decorator\",\n               type: ControlType.ComponentInstance,\n           },\n           size: {\n               title: \"Size\",\n               type: ControlType.Enum,\n               options: [\"sm\", \"md\", \"lg\"],\n               defaultValue: \"md\",\n           },\n       })\n       \n\n 2. npm cdn인 unpkg 에서 프레이머용으로 번들링 한 모듈을 가져다가 사용한다.\n    ESM 기반이기 때문에 반드시 import * as ADS from ~~ 처럼 가져와야 구동에 필요한 코드가 모두 실행된다.\n\n 3. addPropertyControls 로 디자이너가 컴포넌트에 값을 주입할 수 있도록 설정한다.\n    아래 참고 문서를 기반으로 ControlType을 적절하게 설정하면 된다.\n\n * 참고\n   \n   * ThemeProvider같은 애들을 전역으로 적용할 위치가 없기 때문에 컴포넌트마다 적용하고 그대로 내보내야 한다.\n     중첩사용해도 문제가 없으므로 더 좋은 방법을 찾기 전까지는 이 방법을 그대로 따른다.\n   \n   * https://www.framer.com/developers/#code-components-property-controls\n     [https://www.framer.com/developers/#code-components-property-controls]\n\n\nPORTAL을 이용해 띄우는 컴포넌트는 FRAMER 내장 컴포넌트의 스타일이 적용되지 않는다.\n\nFramer에 컴포넌트를 Import 해줄때 disablePortal 과 같은 prop을 붙여 Portal로 렌더링하지 않도록 해야한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2915762181/2024-02-22%20at%2014.16.47@2x.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2915762181/2024-02-22%20at%2014.17.11@2x.png?api=v2]\n\nPortal 로 렌더링\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2915762181/2024-02-22%20at%2014.16.31@2x.png?api=v2]\n\nPortal 비활성화 후 렌더링\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2915762181"
  },
  {
    "pageContent": "[Go lang] K8s Operator 개발 가이드\n * Go/Operator SDK 개발 환경 설정\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3020783793/Go+Operator+SDK]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3020587222"
  },
  {
    "pageContent": "LLM\n\nhttps://www.salesforceairesearch.com/crm-benchmark\n[https://www.salesforceairesearch.com/crm-benchmark]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069313026"
  },
  {
    "pageContent": "Git branch & merge 가이드 (Web)\n\nGit branch & merge 가이드는 이큐브랩에서 사용중인 GitHub flow 를 기반으로 한다\n\nGit#Git-브랜치정책\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611139/OJT+Git#id-[OJT]Git-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%A0%95%EC%B1%85]\n참고\n\n\n\n\n\n절대 룰\n\n * main 브랜치는 항상 배포 가능한 상태로 유지되어야 한다\n\n * develop 은 아무 곳으로도 머지하지 않는다\n * 자기 자신을 assignee로 지정하지 않는다\n   * 예외\n     1. hotfix 인 경우\n        * 아무도 응답하지 않는 경우에만 자기 자신을 assignee 로 지정하고 배포한다\n          * 아무도 응답하지 않음 := SW 라인방에서 5분간 아무도 답이 없다\n     2. hotfix 가 아니면 짤 없음\n * assignee 가 approve 후 머지 한다\n\n\n\n\n\nECUBE LABS' FLOW\n\n단위가 큰 feature 를 개발할 때와 단위가 작은 feature 를 개발할 때 flow 가 약간 다르다\n\nflow 를 통일해도 되지만 작은 feature 를 개발할 때 불필요한 규칙을 강제함으로써 오는 불편함을 줄이기 위해서이다\n\n\n단위가 큰 FEATURE 의 경우\n\n[/wiki/download/attachments/51216589/ecubelabs-git-flow-large.png?api=v2]\n\n 1. 개발을 시작할 때는 항상 master 에서 feature_master 를 체크아웃 한다\n 2. feature_master 에서는 작업을 하지 않는다\n 3. 작업 단위로 feature_master 에서 feature_sub branch 를 생성한다\n 4. 작업이 완료될 때 마다 feature_sub 를 feature_master 로 머지할 때 마다 PR 을 보낸다\n 5. 테스트가 필요한 경우 feature_master 를 develop 으로 걍 머지한다\n 6. 개발이 완료되면 feature_master 를 master 로 머지하기 위한 PR 을 보낸다\n    * 이 때는 코드 리뷰는 완료된 상태이기 때문에 assignee 는 conflict 이 없으면 그냥 머지해주면 됨\n\n\n\n\n\n단위가 작은 FEATURE 인 경우 (자잘한 기능 수정, 오타 수정, 핫픽스 등)\n\n[/wiki/download/attachments/51216589/ecubelabs-git-flow-small.png?api=v2]\n\n 1. 일단 master 에서 fix-x 를 체크아웃 한다.\n 2. fix-x 에서 작업을 한다.\n 3. develop 에 fix-x를 직접 머지한다.\n 4. fix-x 를 master 에 PR 을 보낸다.\n 5. develop 브랜치에는 항상 최종적인 수정사항이 머지되어 있어야 한다.\n\n\nDEVELOP 브랜치\n\nstage 환경을 의미하는 브랜치입니다.\n\n\nDEVELOP 브랜치로의 MERGE\n\n * 리뷰되지않았거나, 완성되지 않은 변경사항을 머지해도 됩니다.\n * 실행되지않거나 오류가 발생하는 변경사항을 머지하면 안됩니다.\n * 머지하는 시점의 제한은 없습니다.\n * master 브랜치에 머지된 커밋은 develop 브랜치에도 동일하게 머지되어야합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/51216589/image2020-4-1_12-2-19.png?api=v2]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51216589"
  },
  {
    "pageContent": "Git branch & merge 가이드 (Mobile)\n\n\n\nCode Push 가 적용된 RN 프로젝트는 웹으로 취급한다.\n\n모바일은 좀 더 정교한 배포 정책이 필요해서 웹과는 다르게 Git flow 를 사용한다.\n\n\n\n\n[https://nvie.com/img/git-model@2x.png]\n\nhttps://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\n[https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221020169"
  },
  {
    "pageContent": ".gitignore 파일 작성\n\nlocal 빌드 결과물 같이 형상관리가 필요없는 파일은 .gitignore 파일에 등록한다\n\nhttps://www.gitignore.io/ [https://www.gitignore.io/] 에서 쉽게 .gitignore 파일의 초기\n버전을 생성할 수 있다\n\n아래 항목은 필수로 선택하여 개발 환경을 구성한다.\n\n * macos\n\n * visualstudiocode\n\n * node\n\n * git\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/142540848"
  },
  {
    "pageContent": "코드 리뷰 가이드\n * 리뷰 원칙\n * 진행 과정\n   * 리뷰 요청자\n     * 1. Github 들어가서 PR 생성 시작\n     * 2. 브랜치 선택\n     * 3. 본문 작성\n       * 3.1. 위키 페이지 링크\n     * 4. 변경 사항 검토\n       * 4.1. 레이블 선택\n     * 5. Reviewers, assignees 선택\n     * 6. 코드 수정\n   * 리뷰 진행자\n     * 1. 리뷰\n     * 2. 머지 (assignees 중 한명이 수행)\n   * Conversation\n * Draft PR\n   * 알림\n\n\n리뷰 원칙\n\n * Reviewer, 리뷰이는 코드의 품질이 개선되었는지 확인한다.\n\n * Reviewer, 리뷰이는 기능이 정상적으로 동작하는지 확인한다.\n\n * Reviewer 는 코멘트 작성시 질문, 사실 확인, 멘토링이 목적인 내용을 작성한다.\n\n * 여러 이슈를 하나의 PR 로 올리지 않는다.\n   \n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20211012-051354.png?api=v2]\n   \n   \n   \n   * 예외\n     \n     * 스쿼드 개발 시에는 하나의 PR 로 올린다. 이슈를 task 단위로 생성하기 때문에 이슈가 여러개 생기지만 결국은 하나의 use\n       case 를 위한 개발이라 PR 이 나뉘면 전체 동작을 파악하기가 더 힘듦.\n     \n     * 코드 리뷰 [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2804318271]\n\n\n진행 과정\n\n\n리뷰 요청자\n\n\n1. GITHUB 들어가서 PR 생성 시작\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-41-40.png?api=v2]\n\nNew pull request 클릭\n\n\n2. 브랜치 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-43-12.png?api=v2]\n\nbase branch 와 compare branch 선택\n\nbase 는 merge target, compare 는 작업한 브랜치\n\nex) main 에서 feature branch 를 생성한 후 작업한 결과를 다시 main 로 merge하려고 한다면 base=main,\ncompare=feature\n\n\n3. 본문 작성\n\n3.1. 위키 페이지 링크\n\n위키를 수정했다면 링크를 추가할 것.\n\n참고 할 필요가 있다고 생각 되는 위키도 추가해도 됨.\n\nimage-20240612-014505.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20240612-014505.png?api=v2]\n\n\n4. 변경 사항 검토\n\nFiles changed 탭을 눌러보면 PR 관련 전체 코드 변경 내역을 확인할 수 있다. 문제가 없는지 최종 검토(= self review)\n한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20210429-020439.png?api=v2]\n\n4.1. 레이블 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20230120-013159.png?api=v2]\n\n배포 전 DB 작업이 필요한 경우 DDL 레이블을 붙인다.\n\n\n\n\n5. REVIEWERS, ASSIGNEES 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-46-43.png?api=v2]\n\nReviewers: Code Review를 진행하는 사람\n\nAssignees: Code Review 완료 후, main merge를 진행하는 사람\n\n\n6. 코드 수정\n\n * PR을 올리고 나서 추가 작업을 해야 한다면 PR 제목에 WIP 를 붙인다. WIP 가 붙은 PR 은 머지가 불가능하다. 리뷰어들은 WIP\n   가 붙은 PR 에 대해서는 리뷰를 중지해도 된다.\n   [https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2020-3-4_13-50-1.png?api=v2]\n\n\n\n\n리뷰 진행자\n\n\n1. 리뷰\n\n자신이 reviewer 로 선정되면 메일을 받는다\n\n메일을 받으면 Code Review를 최우선으로 수행한다 (급한일이 아니면 현재 작업중인 것보다 Review가 우선. Review를 안해주면 그\n사람의 업무가 지연될 수 있다)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-57-48.png?api=v2]\n\n\n2. 머지 (ASSIGNEES 중 한명이 수행)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-48-44.png?api=v2]\n\nCode Review가 완료되면 Merge pull request 를 클릭 해 main merge가 완료될 수 있도록 한다.\n\n\nCONVERSATION\n\nReviewer가 코멘트를 남기면 다음과 같이 conversation 이 진행된다\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2019-5-1_15-57-25.png?api=v2]\n\n해당 코멘트에 대해 논의가 종결되면(코드 수정 or 단순 대화 종결) 대화를 마무리 짓는 사람이 conversation 을 resolve\n처리한다\n\n * 코드 수정: Reviewee가 대화를 마무리 짓는 사람\n\n\nDRAFT PR\n\n개발 완료 전 코드에 관해 의논할 게 있다면 draft PR 을 생성한다.\n\n\n알림\n\nGitHub (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n메일 (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n슬랙봇 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774"
  },
  {
    "pageContent": "[H][B] 에러 메세지 작성\n\n기본적으로 에러 던지기 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1163264020] 를\n참고해 개발한다.\n\n\n컨벤션\n\n 1. Active, Passive 모두 사용 가능한 상황이라면 Active를 사용한다.\n\n 2. 첫 글자는 대문자로, 문장 끝에는 마침표를 사용한다.\n\n 3. 메세지는 영어로 통일한다.\n\n 4. 현재 시제 / 과거 시제의 사용은\n    https://www.postgresql.org/docs/current/error-style-guide.html\n    [https://www.postgresql.org/docs/current/error-style-guide.html] (Present\n    vs. Past Tense) 에 맞게 사용한다.\n\n> Use past tense if an attempt to do something failed, but could perhaps succeed\n> next time (perhaps after fixing some problem). Use present tense if the\n> failure is certainly permanent.\n\n\n가이드\n\n 1. 어떤 문제가 일어났는지 포함해 작성해야 한다.\n\n 2. 해결 방법을 알려주거나, 유추할 수 있어야 한다.\n\n\n\nref.\n\n * https://github.com/Ecube-Labs/haulla-api/pull/1192#discussion_r843499718\n   [https://github.com/Ecube-Labs/haulla-api/pull/1192#discussion_r843499718]\n\n * https://www.morling.dev/blog/whats-in-a-good-error-message/\n   [https://www.morling.dev/blog/whats-in-a-good-error-message/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2384887829"
  },
  {
    "pageContent": "도메인 모델 문서 작성 규칙\n\n\n1. 제목 작성 규칙\n\n하나의 스페이스 안에서 문서 이름은 고유해야 한다.\n그렇기 때문에 제목은 Prefix를 항상 붙여서 관리한다.\n\n[??][도메인 모델] 모델이름\n\n맨 앞에는 보통 프로젝트의 약자를 쓰는데 경우에 따라 생략해도 상관 없다.\n문서 이름이 겹치는 일이 발생하면 정리하면 된다.\n\n\n2. 템플릿 선택\n\n오른쪽에서 “사용자 지정”이라고 적힌 태그같은걸 누르면 아래와 같은 템플릿이 있는데, 그것을 선택하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1516798021/image-20210312-054156.png?api=v2]\n\n\n3. 내용 작성 규칙\n\n * 맨 처음 작성되는 도메인 모델은 Aggregate root이어야 한다.\n\n * 필요한 경우 다이어그램을 그려 모델간의 관계를 표현한다.\n\n * 도메인의 이름을 정확하게 작성한다.\n   \n   * 기획자 또는 다른 개발자와 협의된 언어여야 한다.\n   \n   * 원활한 의사 소통을 위해 가능한 한글 명칭도 지정해야한다.\n   \n   * 언어는 중요하다. → https://opennote46.tistory.com/101\n     [https://opennote46.tistory.com/101]\n\n\n\n\n참고할 문서\n\n * [CA][도메인 모델] 알림 설정\n   [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1351221261/CA]\n\n * [CA][도메인 모델] 사용자 알림\n   [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1172471970/CA]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1516798021"
  },
  {
    "pageContent": "패키지 관리\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1210187842"
  },
  {
    "pageContent": "HTTP client\n\n\n\n * 합의된 HTTP client 의 필요성\n * Why Axios?\n * 주의사항\n   * Timeout 설정\n * ETC\n\n\n\n\n\n\n이큡에서는 HTTP client 로 axios [https://github.com/axios/axios] 를 사용한다\n\nCCNB-464 [https://ecubelabs.atlassian.net/browse/CCNB-464] - 이슈 세부사항 가져오는 중...\n상태\n\n\n합의된 HTTP CLIENT 의 필요성\n\n원활한 코드 리뷰와 다른 프로젝트 작업 시 생산성을 높이기 위해 모두가 이해하고 사용할 수 있는 HTTP client 가 필요하다\n\n프로젝트마다 사용하는 HTTP client 가 다르다면 모든 client 를 숙지해야 하기 때문에 생산성이 떨어진다\n\n\nWHY AXIOS?\n\n * Promise 지원\n * Light\n\n\n주의사항\n\nTIMEOUT 설정\n\n웹 API 를 호출할 때는 항상 timeout 을 설정해야 한다\n\ntimeout 을 설정하지 않으면 target API 의 장애가 current application 으로 전파된다\n\n\nETC\n\n간단한 요청에는 axios.<method_name>() 을, 많은 option이 필요한 경우에는 axios({\nmethod: <methos_name> }) 을 사용한다. (상황에 따라 사용자의 재량에 맡긴다.)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/110100487"
  },
  {
    "pageContent": "array 합치기\n\n\n성능 테스트\n\nhttps://jsperf.com/spread-vs-concat-vs-push\n[https://jsperf.com/spread-vs-concat-vs-push]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/165380683/image2019-6-17_20-33-36.png?api=v2]\n\n\n\n\n검색어: array, 배열, concat, push, merge",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165380683"
  },
  {
    "pageContent": "중복 제거\n\nHow to Remove Array Duplicates in ES6\n[https://medium.com/dailyjs/how-to-remove-array-duplicates-in-es6-5daa8789641c]\n\n\n\n\n\n중복 제거 코드\n\nconst array = [1, 1, 2, 1, 3, 2]\n\n// 방법 (1)\n[...new Set(array)]\n\n// 방법 (2)\narray.filter((item, index, array2) => array2.indexOf(item) === index)\n\n// 방법 (3)\narray.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], [])\n\n// 방법 (4)\nArray.from(new Set(array));\n\n// 방법 (5) - lodash\n_.uniq(array)\n\n\n\n성능 테스트\n\nhttp://jsben.ch/ziS3i [http://jsben.ch/ziS3i]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/116260939/image2019-2-7_13-38-24.png?api=v2]\n\nUser AgentFastest\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2)\nAppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.2 Safari/605.1.15\"(2)\n\njsben으로 공유는 불가능하다. (lodash 소스가 길어서 잘려서 로딩된다.)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/116260939/image2019-5-26_18-34-23.png?api=v2]\n\nUser AgentFastest\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\"(5)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/116260939"
  },
  {
    "pageContent": "ESLint\n\n\nESLINT [https://eslint.org/]\n\neslint는 Javascript, JSX의 코드를 분석해 문법적인 오류부터 코드의 포맷까지 일관되게 작성할 수 있게 도와주는 오픈 소스이다.\n커스터마이징이 쉽고 여러 플러그인을 통해 확장이 용이하기 때문에 여러 프로젝트에서 많이 사용 중이다.\n\n\n작동 방식\n\n먼저 보면 좋은 글 - 자바스크립트 개발자를 위한 AST(번역)\n[https://gyujincho.github.io/2018-06-19/AST-for-JS-devlopers]\n\nESLint를 실행하면 lint의 parser가 작성된 코드를 분석하여 AST(Abstract Syntax Tree)를 만든다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2103869494/image-20210820-024408.png?api=v2]\n\n그리고 eslint는 각 트리를 순회하며 설정에 맞는 규칙을 지키고 있는지 확인하고 규칙을 지키고 있지 않으면 보고하고 수정에 대한 규칙이 있을\n경우 수정할 수 있도록 도와준다.\n\n\n타입스크립트에서의 ESLINT\n\nESLint의 기본 파서인 espree [https://github.com/eslint/espree]는 자바스크립트만 분석 가능하기 때문에\n타입스크립트의 코드를 분석할 수 없다.\n\n하지만 ESLint는 앞서 말한대로 확장성이 좋기 때문에 parser를 타입스크립트 분석이 가능한 parser로 설정하면 타입스크립트에서도\n사용이 가능해진다.\n\n예전에는 타입스크립트의 린트인 TSLint가 있었지만 ESLint와 겹치는 부분이 많고 자잘한 오류가 많아 2019년에 deprecated\n되었다. https://github.com/typescript-eslint/typescript-eslint#what-about-tslint\n[https://github.com/typescript-eslint/typescript-eslint#what-about-tslint]\n\n\n\n\nESLINT-CONFIG-ECUBELABS [https://github.com/Ecube-Labs/eslint-config-ecubelabs]\n\neslint를 모듈로서 배포하기 위해선 eslint-config prefix를 붙여야 하며 ecubelabs에선\neslint-config-ecubelabs로 배포중이다. 여기서 설정한 규칙이 문법과 코드 포맷에 대한 사내 컨벤션이라 볼 수 있다.\n\n자바스크립트의 경우 index.js 에서 규칙을 설정하고 타입스크립트의 경우 typescript.js 에서 추가적으로 규칙을 설정하고 있다.\n\n자세히 들여다보면\n\n...\n  extends: [\n      'airbnb-base', // includes plugin: import\n      'plugin:import/errors',\n      'plugin:import/warnings',\n      'plugin:jest/recommended', // includes plugin: jest\n      'plugin:jest/style',\n      'plugin:prettier/recommended', // includes plugin: prettier\n  ],\n...\n\nairbnb-base에 import, jest, prettier 플러그인을 사용중이다.\n이 덕분에 prettier를 직접 사용하지 않고도 eslint를 통해 간접적으로 코드 포맷을 수정할 수 있게 된다.\n\n\n연관된 글\n\n1. 개발 환경(Lint & Prettify) 설정\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374073/1.+Lint+Prettify]\n\n\n참고 자료\n\nhttps://tech.kakao.com/2019/12/05/make-better-use-of-eslint/\n[https://tech.kakao.com/2019/12/05/make-better-use-of-eslint/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2103869494"
  },
  {
    "pageContent": "tsconfig\n\n\nTSCONFIG.JSON\n\ntsconfig.json은 타입스크립트로 작성된 코드를 자바스크립트 코드로 컴파일 할 때 컴파일러의 옵션을 설정해둔 파일이다.\n이 설정 역시 extends 옵션을 통해 상속이 가능하기 때문에 프로젝트 간 공통적인 옵션을 사용가능하다.\n\n\nCOMPILEROPTIONS\n\n말 그대로 컴파일러의 옵션을 나타낸다.\n\n예를 들어 experimentalDecorators는 데코레이터를 사용할 수 있도록 하는 옵션이다. 이 옵션을 끄게 된다면 @~~~ 를 사용할\n수 없게된다.\n\n각 옵션에 대한 설명은 https://www.typescriptlang.org/ko/tsconfig\n[https://www.typescriptlang.org/ko/tsconfig] 여기를 참고\n\n\n@ECUBELABS/TSCONFIG [https://github.com/Ecube-Labs/tsconfig]\n\necubelabs의 tsconfig들을 모아둔 모듈이다. 프로젝트에서 사용할 tsconfig는 여기에 있는 옵션을 사용하도록 한다.\n\n프로젝트마다 사용 중인 node의 버전이 다르기 때문에 맞는 모듈을 사용하면 된다.\n\n\n백엔드 환경에서 사용되는 경우\n\n사용중인 Node.js 버전에 맞게 사용하지 않으면 트랜스파일된 자바스크립트 파일이 지원되지 않는 문법을 사용해서 에러가 날 수 있다.\n자세한것은 target 정보를 참조하면 된다.\n\n프론트엔드와 다르게 번들러를 사용하지 않기 때문에 트랜스파일 과정은 오로지 이 설정에 의존한다.\n\n\n프론트엔드 환경에서 사용되는 경우\n\n대부분 웹팩과 같은 번들러를 사용하기 때문에 개발 환경에서 사용중인 Node.js, TypeScript 버전만 호환되는 설정이라면 대체로 문제가\n없다.\n\n\nNODE 버전 MIGRATION\n\ncompilerOptions에서 lib, target을 맞는 es버전에 맞춰주면 된다(ex: node16 => es2021)\n\ntsconfig는 Typescript가 Javascript로 컴파일할 때 사용하는 옵션이기 때문에 타입스크립트의 버전이 올라가면서 새로 추가된\n옵션을 사용하는 경우는 있을 수 있지만 기존의 옵션을 변경하는 경우는 거의 없다.\n\n\nNPM PUBLISH\n\n사전 준비\n\n 1. npm login 되어있어야 한다.\n\n 2. 로그인 한 npm 계정이 npm의 ecubelabs organization에 속해있어야 한다.\n    필요한 경우 관리자에게 요청한다.\n    (관리자: 김일두(Charlie)\n    [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n    or 강승현 (Tim)\n    [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence])\n\n배포\n\n 1. 최신 main 브랜치로 checkout or pull 한다.\n\n 2. npm version major|minor|patch 변경사항을 고려해 시멘틱 버전에 맞게 적절한것으로 골라서 버전을 올려준다.\n    이러면 npm이 알아서 package.json을 수정하고 커밋 + 태그를 생성해준다.\n\n 3. npm publish --access=public 해서 npm에 패키지를 배포한다.\n\n 4. git push --tags 태그를 포함해 변경사항을 원격에 올려준다.\n\n\n연관된 글\n\n1. 개발 환경(Lint & Prettify) 설정\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374073/1.+Lint+Prettify]\n\nhttps://kangax.github.io/compat-table/es2016plus/\n[https://kangax.github.io/compat-table/es2016plus/]\n\nhttps://node.green/#ES2022 [https://node.green/#ES2022]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2104590349"
  },
  {
    "pageContent": "toString/toJSON\n\n\nTOSTRING\n\nString({})\n// Print: '[object Object]'\n\nString({ toStirng() { return 'test' } });\n// Print: 'test'\n\ntoString 프로퍼티가 존재하는지 확인하고 존재하면 해당 프로퍼티의 결과 값으로 resolving\n\n\nTOJSON\n\nJSON.stringify({});\n// Print: '{}'\n\nJSON.stringify({ toJSON() { return 'test' } });\n// Print: '\"test\"'\n\ntoString과 비슷하다.\n\ntoJSON 프로퍼티가 존재하면 결과 값을 기준으로 JSON.stringify한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2334785543"
  },
  {
    "pageContent": "String 변환\n\n크롬 기준으로 단순히 String으로 변환하는 경우 Template literal이 제일 성능이 좋다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2715320374/image-20230522-091520.png?api=v2]\n\nBenchmark\n[https://perf.link/#eyJpZCI6InZpd3FxMnpmMGxoIiwidGl0bGUiOiJDb252ZXJ0IHN0cmluZyBwZXJmb3JtIiwiYmVmb3JlIjoiY29uc3QgaWQgPSAxOyIsInRlc3RzIjpbeyJuYW1lIjoidG9TdHJpbmciLCJjb2RlIjoiZm9yIChsZXQgaSA9IDA7IGkgPCAzMDAwOyArK2kpIHtcbiAgY29uc3QgcmVzdWx0ID0gaWQudG9TdHJpbmcoKTtcbn0iLCJydW5zIjpbNzAwMCwyMDAwLDEwMDAsOTAwMCwzMDAwLDcwMDAsMzAwMCwxMDAwMCw1MDAwLDIwMDAsNjAwMCwxMDAwLDYwMDAsODAwMCw0MDAwLDMwMDAsMTEwMDAsMTAwMCwyMDAwLDQwMDAsNjAwMCw5MDAwLDYwMDAsMTAwMCw1MDAwLDUwMDAsNjAwMCwxMDAwLDUwMDAsOTAwMCwxMDAwMCwzMDAwLDMwMDAsNzAwMCw1MDAwLDEwMDAwLDEwMDAwLDUwMDAsMzAwMCw5MDAwLDIwMDAsMzAwMCw2MDAwLDUwMDAsMTAwMCw0MDAwLDcwMDAsMjAwMCwxMDAwMCwxMDAwLDkwMDAsMzAwMCwyMDAwLDIwMDAsMjAwMCw0MDAwLDkwMDAsMzAwMCw3MDAwLDgwMDAsNzAwMCwzMDAwLDQwMDAsNTAwMCwzMDAwLDExMDAwLDIwMDAsMzAwMCwzMDAwLDIwMDAsODAwMCw1MDAwLDUwMDAsMTAwMDAsMjAwMCw0MDAwLDMwMDAsNDAwMCw4MDAwLDQwMDAsMzAwMCw0MDAwLDEwMDAwLDUwMDAsMTAwMCwxMDAwLDMwMDAsNjAwMCw0MDAwLDMwMDAsMzAwMCwyMDAwLDEwMDAsMTAwMCwyMDAwLDUwMDAsNDAwMCw1MDAwLDYwMDAsNDAwMF0sIm9wcyI6NDcyMH0seyJuYW1lIjoiUGx1cyBvcGVyYXRvciIsImNvZGUiOiJmb3IgKGxldCBpID0gMDsgaSA8IDMwMDA7ICsraSkge1xuICBjb25zdCByZXN1bHQgPSBpZCArICcnO1xufSIsInJ1bnMiOls0MDAwLDMwMDAsMTAwMCwxMDAwMCwzMDAwLDUwMDAsMTAwMCwxMzAwMCw1MDAwLDIwMDAsNjAwMCw5MDAwLDkwMDAsNDAwMCw2MDAwLDQwMDAsNDAwMCwxMDAwLDQwMDAsNDAwMCw4MDAwLDEzMDAwLDEwMDAwLDE1MDAwLDEwMDAwLDEwMDAsNTAwMCwxMDAwLDQwMDAsNDAwMCwxNDAwMCwzMDAwLDUwMDAsMTAwMDAsNzAwMCwxMDAwLDEzMDAwLDcwMDAsMTUwMDAsOTAwMCwxMjAwMCwxMTAwMCwzMDAwLDUwMDAsMTAwMCwyMDAwLDQwMDAsMTEwMDAsODAwMCw1MDAwLDExMDAwLDQwMDAsMjAwMCwxMTAwMCw4MDAwLDQwMDAsMTAwMCwyMDAwLDgwMDAsNDAwMCw0MDAwLDIwMDAsMjAwMCw2MDAwLDcwMDAsMTQwMDAsNDAwMCw0MDAwLDQwMDAsMzAwMCw5MDAwLDE0MDAwLDQwMDAsMTQwMDAsMzAwMCwyMDAwLDExMDAwLDQwMDAsMTAwMCwxMjAwMCwxMzAwMCwxMTAwMCwzMDAwLDEwMDAwLDEwMDAsMTAwMDAsNDAwMCw5MDAwLDIwMDAsNTAwMCwxMzAwMCwxMTAwMCwxNDAwMCwxMDAwMCwzMDAwLDYwMDAsNjAwMCwzMDAwLDYwMDAsNjAwMF0sIm9wcyI6NjQwMH0seyJuYW1lIjoiQ29uY2F0IGZ1bmN0aW9uIiwiY29kZSI6ImZvciAobGV0IGkgPSAwOyBpIDwgMzAwMDsgKytpKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFwiXCIuY29uY2F0KGlkKTtcbn0iLCJydW5zIjpbNjAwMCwyMDAwLDgwMDAsMjAwMCwyMDAwLDMwMDAsNDAwMCwxMDAwMCwzMDAwLDIwMDAsMTAwMCw2MDAwLDQwMDAsNzAwMCw5MDAwLDMwMDAsNzAwMCwxMDAwLDEwMDAwLDEwMDAsMjAwMCw4MDAwLDcwMDAsODAwMCwxMDAwLDUwMDAsMjAwMCwxMDAwLDQwMDAsNjAwMCw5MDAwLDMwMDAsMzAwMCw2MDAwLDQwMDAsMTAwMCw4MDAwLDQwMDAsMzAwMCw0MDAwLDMwMDAsMjAwMCwyMDAwLDEwMDAsMTAwMCwyMDAwLDgwMDAsNDAwMCw0MDAwLDcwMDAsNDAwMCwyMDAwLDUwMDAsMjAwMCw0MDAwLDEwMDAsNTAwMCw1MDAwLDQwMDAsOTAwMCw0MDAwLDEwMDAsODAwMCwzMDAwLDgwMDAsOTAwMCwzMDAwLDIwMDAsMzAwMCwxMDAwLDEwMDAsMzAwMCwzMDAwLDMwMDAsMjAwMCwxMDAwLDQwMDAsMzAwMCw0MDAwLDIwMDAsODAwMCwzMDAwLDMwMDAsMzAwMCwxMDAwLDEwMDAsMjAwMCwzMDAwLDcwMDAsMzAwMCwzMDAwLDQwMDAsODAwMCwyMDAwLDgwMDAsNDAwMCwzMDAwLDQwMDAsNDAwMCwzMDAwXSwib3BzIjo0MDAwfSx7Im5hbWUiOiJUZW1wbGF0ZSBsaXRlcmFscyIsImNvZGUiOiJmb3IgKGxldCBpID0gMDsgaSA8IDMwMDA7ICsraSkge1xuICBjb25zdCByZXN1bHQgPSBgJHtpZH1gO1xufSIsInJ1bnMiOls1MDAwLDMwMDAsNDAwMCw0MDAwLDEzMDAwLDUwMDAsMjAwMCwxNDAwMCwyMDAwLDEwMDAsMTAwMCw1MDAwLDEzMDAwLDUwMDAsMTkwMDAsMTAwMDAsMTYwMDAsMjgwMDAsNTAwMCwxNTAwMCw1MDAwLDE2MDAwLDE1MDAwLDEyMDAwLDIwMDAsMTMwMDAsMTAwMCwxMjAwMCwxMzAwMCwxNzAwMCwyMzAwMCwzMDAwLDYwMDAsMTEwMDAsNjAwMCwyNTAwMCwyMDAwMCw1MDAwLDYwMDAsMjYwMDAsMTAwMCwyMTAwMCwyMzAwMCwzMDAwLDEwMDAsNDAwMCw1MDAwLDI0MDAwLDEzMDAwLDIwMDAwLDE3MDAwLDEzMDAwLDEwMDAsNDAwMCwxMDAwMCwxMDAwLDUwMDAsNTAwMCwxMTAwMCwyNjAwMCwyMTAwMCwxMDAwLDE3MDAwLDUwMDAsMjAwMDAsMjAwMDAsNTAwMCw1MDAwLDUwMDAsMjYwMDAsMTQwMDAsMzAwMCw5MDAwLDUwMDAsMTAwMCwxNjAwMCwyMDAwLDQwMDAsMTEwMDAsMjcwMDAsMTIwMDAsNDAwMCwzMTAwMCw3MDAwLDE2MDAwLDEzMDAwLDMwMDAsMTAwMDAsNDAwMCwyMTAwMCwxMDAwMCwxOTAwMCwyMTAwMCwxMzAwMCw5MDAwLDEwMDAwLDE1MDAwLDI0MDAwLDkwMDAsNTAwMF0sIm9wcyI6MTA4ODB9LHsibmFtZSI6IlN0cmluZyBmdW5jdGlvbiIsImNvZGUiOiJmb3IgKGxldCBpID0gMDsgaSA8IDMwMDA7ICsraSkge1xuICBjb25zdCByZXN1bHQgPSBTdHJpbmcoaWQpXG59IiwicnVucyI6WzEwMDAwLDMwMDAsMjAwMCwyMDAwLDcwMDAsNDAwMCwxMDAwLDYwMDAsNjAwMCwzMDAwLDEyMDAwLDgwMDAsMTAwMCw4MDAwLDIwMDAsOTAwMCw0MDAwLDEyMDAwLDExMDAwLDQwMDAsNTAwMCw1MDAwLDMwMDAsNzAwMCw1MDAwLDExMDAwLDcwMDAsMTUwMDAsNzAwMCw2MDAwLDEwMDAwLDEwMDAwLDQwMDAsNzAwMCw0MDAwLDkwMDAsMTAwMCwyMDAwLDgwMDAsNDAwMCw4MDAwLDQwMDAsODAwMCw0MDAwLDEyMDAwLDUwMDAsNjAwMCw4MDAwLDgwMDAsMTIwMDAsNDAwMCw2MDAwLDYwMDAsNjAwMCwxNDAwMCwxNTAwMCwxMDAwLDQwMDAsNDAwMCw0MDAwLDcwMDAsMTIwMDAsNTAwMCw5MDAwLDUwMDAsNzAwMCwyMDAwLDMwMDAsMzAwMCw0MDAwLDMwMDAsMTEwMDAsMzAwMCw1MDAwLDUwMDAsMTMwMDAsNzAwMCwyMDAwLDkwMDAsMTAwMDAsOTAwMCwzMDAwLDcwMDAsODAwMCwxMDAwMCwxMDAwMCwzMDAwLDEwMDAwLDQwMDAsMjAwMCw4MDAwLDExMDAwLDEwMDAsMTEwMDAsMTEwMDAsMTEwMDAsODAwMCw1MDAwLDUwMDAsNzAwMF0sIm9wcyI6NjUzMH1dLCJ1cGRhdGVkIjoiMjAyMy0wNS0yMlQwOToxNDoyNS41MzJaIn0%3D]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2715320374"
  },
  {
    "pageContent": "try catch\n\n꼭 필요한 상황이 아니면 사용하지 않는다.\n\ncatch 에서 에러를 먹어버리면 에러 핸들러에 의해 에러가 처리되지 않기 때문이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2719744036"
  },
  {
    "pageContent": "GitHub Package 설정/배포/설치 방법\n\nAWS-293 [https://ecubelabs.atlassian.net/browse/AWS-293?src=confmacro] 진행하면서 작성한\n문서입니다.\n\n지금은 이 방식으로 모듈을 사용하고 있지 않습니다.\n\n\n⚙️ 모듈 배포 설정 방법\n\n\n1. 배포 할 모듈의 PACKAGE.JSON을 열어 아래 내용을 추가한다.\n\n  \"name\": \"@ecube-labs/my-module\",\n  ...\n  \"publishConfig\": {\n    \"registry\": \"https://npm.pkg.github.com\"\n  },\n\nname 속성에 있는 “@ecube-labs” scope는 반드시 따라야 한다.\n\ngithub package는 조직과 같은 이름의 scope만 지원한다고 한다.\n때문에 위처럼 하지 않으면 무조건 배포에 실패한다.\n\n\n2. 프로젝트에 .GITHUB/WORKFLOWS/RELEASE-PACKAGE.YML 파일을 아래 내용으로 생성한다.\n\nname: Publish module\n\non:\n  release:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-gpr:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n          registry-url: https://npm.pkg.github.com/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n\n\n위에 보이는 시크릿키 secrets.GITHUB_TOKEN는 github action이 알아서 주입해준다.\n[https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-docker-for-use-with-github-packages#authenticating-with-the-github_token]\n\ngithub에서 릴리즈를 하면 위 잡들이 실행된다는 의미다. 자세한건 아래 모듈 배포 방법 참고\n\n\n3. MASTER로 머지한다.\n\n이제 준비 완료.\n\n--------------------------------------------------------------------------------\n\n\n🚀 모듈 배포 방법\n\n이 방법은 모듈 배포 설정이 되어있어야합니다.\n\n\n1. 수정된 코드에서 모듈 버전을 바꿔준다.\n\nnpm version patch\n\n위의 방법처럼 하는게 베스트다. (patch, minor, major 노상관)\n\n뭐가 됐든 package.json에 있는 버전이 바뀌면 된다.\n\n\n2. 변경된 파일과 태그를 푸시해준다.\n\n태그는 아래처럼 푸시하면 된다.\n\ngit push --tags\n\n\n3. 해당 레파지토리를 GITHUB에서 연다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-071620.png?api=v2]\n\n페이지 우측에 이렇게 생긴 releases 항목이 보이는데, 파란 링크나 제목 부분을 누른다.\n\n\n4. “DRAFT A NEW RELEASE” 버튼을 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-072535.png?api=v2]\n\n우측에 보이는 버튼이다.\n\n\n5. 태그 버전과 내용을 입력하고 “PUBLISH RELEASE” 버튼을 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-073159.png?api=v2]\n\n\n6. ACTIONS 탭에 들어가서 잘 되는지 확인한다.\n\n한번 잘 되고 나면 보통 잘 되니까 필수는 아니다.\n\n그리고 빌드에 실패하면 잡을 트리거 한 사용자에게 메일을 보내주니 괜찮다.\n\n\n7. 최종적으로 배포된 패키지 확인\n\n레포 메인 페이지로 가면 우측에 보인다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-073413.png?api=v2]\n\n\n\n--------------------------------------------------------------------------------\n\n\n🛠 모듈 설치 방법\n\nprivate repo에 배포된 모듈이면 당연히 배포 환경에서도 read 권한이 있어야 한다.\n여기서는 권한이 있는것을 가정하고 설명한다. (없으면 0번을 따라하면 된다.)\n\n\n0. (로컬 환경) NPM LOGIN\n\n공식 문서\n[https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-npm-for-use-with-github-packages#authenticating-to-github-packages]를\n참고하여 개인 액세스 토큰을 발급해서 npm login을 한다.\n권한은 여기\n[https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#about-scopes-and-permissions-for-package-registries]에\n나온 권한을 모두 허용한 토큰이어야 한다.\n(read 권한만 필요해도 write 관련 권한까지 없으면 안된다 ;ㅅ;)\n\nnpm login --scope=@ecube-labs --registry=https://npm.pkg.github.com\n\n\n1. 프로젝트에 .NPMRC 파일을 만들거나 수정한다.\n\n@ecube-labs:registry=https://npm.pkg.github.com/\nregistry=https://registry.npmjs.org/\n\n이미 파일이 있다면 첫번째 줄에 있는 내용만 추가해도 된다.\n\n\n2. 준비 끝. 설치하면 된다.\n\nnpm install @ecube-labs/my-module -S\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1126039657"
  },
  {
    "pageContent": "npm 종속성 관리 (package.json)\n * package.json\n   * dependencies\n   * devDependencies\n   * peerDependencies\n * package-lock.json\n * 예시\n   * react, react-dom 패키지\n     * 가정1: npm i react 직후 리액트를 바로 사용할 수 있으므로 react 패키지에는 peerDependencies가\n       없을것으로 기대된다.\n     * 증명1: 실제로 react의 package.json에는 peerDependencies가 없다.\n     * 가정2: react-dom은 react를 기반으로 동작하므로 peerDependencies에 react가 있을것이다.\n     * 증명2: 실제로 react-dom의 peerDependencies에 react가 있다.\n\n\nPACKAGE.JSON\n\n{\n  \"dependencies\": {\n    // 런타임에 필요한 패키지\n  },\n  \"devDependencies\": {\n    // 런타임에 필요 없는 패키지\n    // build, lint, test, local develop 을 위해 필요한 패키지\n  },\n  \"peerDependencies\": {\n    //\n  }\n}\n\n\nDEPENDENCIES\n\n * 코드 실행 시 반드시 필요한 패키지의 이름과 버전을 표시한다.\n   \n   * 즉, tsc/webpack/parcel 등의 transpiler/bundler를 통해 빌드되어 순수한 자바스크립트 코드를 실행할 때\n     필요한 패키지는 모두 dependencies에 속해야 한다.\n\n * npm install 시 표기된 패키지가 node_modules 디렉터리에 없으면 표시된 버전의 패키지를 설치한다.\n\n\nDEVDEPENDENCIES\n\n * 코드 실행 시가 아닌 개발 또는 빌드 환경에서 필요한 패키지의 이름과 버전을 표시한다.\n   \n   * typescript/webpack/eslint/prettier 등의 개발 및 빌드 환경에서만 필요한 패키지가 해당될 수 있다.\n   \n   * 실질적으로 코드를 실행할 때 필요하지 않은 패키지라면 모두 devDependencies에 해당될 수 있다.\n   \n   * https://github.com/Ecube-Labs/CCN-API/pull/132#discussion_r249606588\n     [https://github.com/Ecube-Labs/CCN-API/pull/132#discussion_r249606588]\n\n * npm install 시 표기된 패키지가 node_modules 디렉터리에 없으면 표시된 버전의 패키지를 설치한다.\n\n\nPEERDEPENDENCIES\n\n * 코드가 호환 가능한 패키지의 이름과 버전을 표시한다.\n   \n   * \"호환\" 가능할 것으로 예상된 패키지의 버전을 표시 하는것 이므로 dependencies와 다르게 가능한 관대하게 표시하는것이\n     권장된다.\n   \n   * 예를 들어, Semantic Version(semver)를 따르는 패키지라면 대체로 major 버전이 바뀌지 않는다면 동작이 보장되는걸\n     기대할 수 있으므로 ^1.0 처럼 마이너 버전까지는 모두 포함할 수 있도록 표기하는게 바람직하다. (semver 참고\n     [https://docs.npmjs.com/cli/v6/using-npm/semver])\n   \n   * 반대로 minor 버전만 바뀌어도 기능이나 인터페이스가 바뀔 수 있는 패키지라면 위 예시처럼 관대하게 표기하면 안된다.\n\n * npm install 시 표기된 패키지가 node_modules 디렉터리에 없더라도 아무것도 설치하지 않는다.\n   \n   * 대신, peerDependencies에 있는 패키지를 node_modules 디렉터리에서 찾을 수 없다는 경고문을 표시한다. (npm\n     v3 이후부터 해당)\n   \n   * 이 경고문을 마주하면 호환되는 버전의 패키지를 직접 설치해야 한다.\n   \n   * npm v7 부터 npm install 은 peerDependencies 를 다시 설치한다.\n     \n     * https://blog.npmjs.org/post/618653678433435649/npm-v7-series-arborist-deep-dive\n       [https://blog.npmjs.org/post/618653678433435649/npm-v7-series-arborist-deep-dive]\n\n * 코드와 함께 동작할 수 있는 프레임워크나 개발자가 패키지의 버전을 선택적으로 사용할 수 있게 해주므로 패키지를 작성할 때에는 사용하는것을\n   고려하는게 바람직하다.\n\n\nPACKAGE-LOCK.JSON\n\n * npm install 시 자동 생성되는 파일\n\n * 형상관리 대상\n   \n   * npm ci 명령어로 패키지를 설치하면 package-lock.json 에 정의된 버전의 패키지를 설치하기 때문에 배포시 의도치 않게\n     테스트 되지 않은 상위 버전의 패키지가 설치 되어 배포 되는것을 막을 수 있다.\n   \n   * npm install 명령어로 패키지 설치하면 package-lock.json 무시하고 semver(Semantic\n     versioning) [https://docs.npmjs.com/about-semantic-versioning] 에 따라\n     package.json, package-lock.json 갱신한다.\n\n * 위와 같은 특성때문에 단순 프로젝트 실행을 위해 패키지 설치가 필요하면 npm ci 를 권장하지만, 버전이 중요한 패키지는 개발자가 알아서\n   package.json 의 버전을 고정해두는게 더 바람직하다.\n\n\n예시\n\n\nREACT, REACT-DOM 패키지\n\n\n가정1: NPM I REACT 직후 리액트를 바로 사용할 수 있으므로 REACT 패키지에는 PEERDEPENDENCIES가 없을것으로 기대된다.\n\n\n증명1: 실제로 REACT의 PACKAGE.JSON\n[https://github.com/facebook/react/blob/ad607469c58d337d23d05e3be73087d370f7d715/packages/react/package.json]에는\nPEERDEPENDENCIES가 없다.\n\n\n가정2: REACT-DOM은 REACT를 기반으로 동작하므로 PEERDEPENDENCIES에 REACT가 있을것이다.\n\n\n증명2: 실제로 REACT-DOM의 PEERDEPENDENCIES\n[https://github.com/facebook/react/blob/ad607469c58d337d23d05e3be73087d370f7d715/packages/react-dom/package.json#L25]에\nREACT가 있다.\n\n{\n  \"name\": \"react-dom\",\n  \"version\": \"17.0.3\",\n...\n  \"peerDependencies\": {\n    \"react\": \"17.0.3\"\n  },\n...\n\n\n위 처럼 작성되어 있으므로 react-dom은 react의 버전과 동일하게 사용해야 하는것을 알 수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2273837083"
  },
  {
    "pageContent": "Private NPM Registry (Verdaccio)\n * URL\n * 공통 규칙\n * 다른 환경/프로젝트에서 모듈 사용 (Install)\n   * .npmrc\n * 모듈 프로젝트 설정\n   * package.json\n   * .npmrc\n * NPM 모듈 업로드 (Publish)\n   * 1. NPM Module Version Update\n   * 2. PR\n   * 3. Publish\n     * 주의!\n * 모듈 작성\n   * Git repo 생성 요청\n   * 개발\n   * 버전 관리\n\n\nURL\n\nhttps://npm.ecubelabs.xyz/\n\n\n공통 규칙\n\n * 모듈 프로젝트의 .npmrc 파일은 반드시 .gitignore에 추가되어야 하며, 형상관리가 되지 않도록 해야 합니다.\n\n * .npmrc 파일은 프로젝트 최상단에만 존재해야 합니다.\n   \n   * 모듈 프로젝트가 아닌 일반 프로젝트에서는 install에 필요한 설정만 존재하는 .npmrc 파일이 있어야 하며, 인증 관련된 설정이\n     존재해선 안됩니다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n다른 환경/프로젝트에서 모듈 사용 (INSTALL)\n\n사무실과 AWS에서만 접근이 가능한 환경이기 때문에 아무런 인증 체계가 없습니다.\nprivate module을 사용할 프로젝트 최상단에 아래처럼만 설정해두세요.\n\n.NPMRC\n\n@ccn:registry=https://npm.ecubelabs.xyz/\nregistry=https://registry.npmjs.org/\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n모듈 프로젝트 설정\n\npackage.json 파일에 아래처럼 publishConfig를 설정해주세요!\n이렇게 하면 npm publish 커맨드를 실행할 때 다른 옵션을 안붙여도 우리의 레지스트리에 배포하게 됩니다. (private npm\nregistry에 배포할 필요가 없는 경우에는 아래를 추가하지 않으셔도 됩니다.)\n\nPACKAGE.JSON\n\n{\n\t...\n    \"publishConfig\": {\n        \"registry\": \"https://npm.ecubelabs.xyz/\"\n    }\n\t...\n}\n\n아무런 인증이 필요 없지만 토큰이 없으면 publish가 불가능한 npm이기 때문에, 아래처럼 아무 토큰이나 넣도록 설정합니다. 글로벌 npm\n설정(`~/.npmrc`)에 이미 인증 정보가 있다면 필요 없습니다.\n\n.NPMRC\n\n//npm.ecubelabs.xyz/:_authToken=fooBar\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nNPM 모듈 업로드 (PUBLISH)\n\n모듈을 업로드 하려고 한다면, 아래와 같은 절차를 따르면 된다.\n\n\n1. NPM MODULE VERSION UPDATE\n\n$ npm version <newversion> # 버전을 직접 지정하거나\n$ npm version major # 이런\n$ npm version minor # 식으로\n$ npm version patch # 사용이 가능해집니다.\n\n\n2. PR\n\n 1. 1번에서 생긴 변경사항을 원격으로 푸시한다.\n\n 2. 코드 리뷰를 받는다.\n\n\n3. PUBLISH\n\n아래처럼 입력하면 버전과 latest 태그가 같이 붙어서 배포됩니다.\n\n\n주의!\n\nnpm publish 시, .npmignore가 별도로 존재하지 않을 경우, .gitignore을 대신 사용합니다.\n\n\n\n\n$ npm publish\n\nnpm version 할 때 생긴 git tag 푸쉬도 잊지 마세요 (git push --tags)\n\n\n모듈 작성\n\n\nGIT REPO 생성 요청\n\nGitHub 관리자 [https://ecubelabs.atlassian.net/wiki/spaces/INFRA]에게 repo 생성 요청\n\n\n개발\n\n열심히\n\n\n버전 관리\n\n모듈의 버전은 Semantic Versioning 2.0.0 [https://semver.org/lang/ko/] 을 준수해야 한다\n\n> 요약\n> 버전을 주.부.수 숫자로 하고:\n> \n> 1. 기존 버전과 호환되지 않게 API가 바뀌면 “주(主) 버전”을 올리고,\n> \n> 2. 기존 버전과 호환되면서 새로운 기능을 추가할 때는 “부(部) 버전”을 올리고,\n> \n> 3. 기존 버전과 호환되면서 버그를 수정한 것이라면 “수(修) 버전”을 올린다.\n> \n> 주.부.수 형식에 정식배포 전 버전이나 빌드 메타데이터를 위한 라벨을 덧붙이는 방법도 있다.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/59572227"
  },
  {
    "pageContent": "[F] 폴더 구조 / 네이밍\n * app\n   * index.html\n   * components\n   * containers\n   * hooks\n     * local hooks\n   * screens\n     * 웹\n     * 모바일\n     * 공통 컨벤션\n * assets\n   * images\n * React Native\n   * routes\n     * 컴포넌트 네이밍\n\n\n\n|-- src\n|   |-- app\n|   |   |-- components\n|   |   |   |-- AbcButton\n|   |   |   `-- XyzList\n|   |   |-- configs\n|   |   |-- containers (DEPRECATED)\n|   |   |-- hooks\n|   |   |-- libs\n|   |   |   |-- navigator\n|   |   |   `-- validators\n|   |   |-- models\n|   |   |-- reducers     (DEPRECATED)\n|   |   |-- repositories (DEPRECATED)\n|   |   |-- routes\n|   |   |-- services\n|   |   |-- screens\n|   |   |   |-- AbcScreen\n|   |   |   `-- XyzScreen\n|   |   |-- actions.ts  (DEPRECATED)\n|   |   |-- epics.ts    (DEPRECATED)\n|   |   |-- reducers.ts (DEPRECATED)\n|   |   `-- types.tsx\n|   |-- assets\n|   |   |-- images\n|   |-- index.html\n\n\nAPP\n\n\nINDEX.HTML\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    ...\n    <style>\n      html,\n      body,\n      #app {\n        min-width: 1600px;\n        height: 100%;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\"></div>\n  </body>\n</html>\n\n * React 앱의 기본 html\n\n * min-width 는 제플린 기준 width\n   \n   * 제플린 기준 width != 사용자들이 많이 사용하는 화면 width 이면 width 선정이 잘못된 것\n   \n   * 사용자들이 많이 사용하는 화면 width 로 제플린을 다시 작업해야 한다\n   \n   * 잘 모르겠으면 최대한 작은 너비로 작업해두는것이 바람직하다.\n     작은 너비 → 큰 너비로 확장하는것은 쉽지만 반대는 어렵기 때문.\n\n\nCOMPONENTS\n\n화면에 대한 root component 인 XXXScreeen.tsx 를 제외한 모든 리엑트 컴포넌트는 components 하위에 둔다.\n\ncomponent 단위로 폴더를 생성하며 component 의 이름 === 폴더 이름 이어야 한다.\n\n\nCONTAINERS\n\nDEPRECATED. https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\n[https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0]\n\n\nHOOKS\n\n범용적으로 사용 가능한 hooks\n\nex)\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/2d795d4a2a1ae1b4f253d1b6d555e3af219e98b8/src/app/hooks/index.ts#L73\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/2d795d4a2a1ae1b4f253d1b6d555e3af219e98b8/src/app/hooks/index.ts#L73]\n\n\nLOCAL HOOKS\n\n * 특정 화면에서만 사용하는 hook의 경우 해당 컴포넌트 폴더 하위에 hooks 파일을 만들어 위치한다.\n\n * ex)\n   https://github.com/Ecube-Labs/haulla-back-office-front/blob/b17fd523eb6523ef1cf1db71bf3f487864c0e442/src/app/components/AuditInvoiceButton/hooks.tsx#L1\n   [https://github.com/Ecube-Labs/haulla-back-office-front/blob/b17fd523eb6523ef1cf1db71bf3f487864c0e442/src/app/components/AuditInvoiceButton/hooks.tsx#L1]\n\n\nSCREENS\n\n\n웹\n\n * 웹의 경우 url 단위로 하위 폴더를 구성한다.\n\n * URL에 params를 포함하는 경우 백엔드와 동일하게 아래와 같이 한다.\n   \n   * ex. /clients/123/details → /clients/_id/details/ 하위에 파일 구성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image2020-4-21_11-41-30.png?api=v2]\n\n위의 예시에서 /auth, /change-password, /customer-support, ... 같은 endpoint 가 모두 존재한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image2020-4-21_11-45-48.png?api=v2]\n\n하위 폴더 구성\n\n * index.ts\n   \n   * barrel [https://basarat.gitbook.io/typescript/main-1/barrel]\n\n * XXXScreen.tsx\n   \n   * 해당 endpoint 를 렌더링하는 컴포넌트\n\n * hooks.ts\n   \n   * XXXScreen.tsx 에서만 사용하는 hooks\n\n\n모바일\n\n모바일의 경우 flow\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/175472648/H+M] 단위로 하위\n폴더를 구성한다.\n\n\n공통 컨벤션\n\n화면을 구성하는 root component 는 postfix 로 Screen 을 사용한다.\n\n원래 postfix 로 View 를 사용하려고 했는데\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/210206760/React+component+naming+convention]\n일반 component 도 postfix 로 View 를 사용하는 경우가 생겨서 컨벤션에 혼란이 생긴다.\n\n그래서 화면을 구성하는 root component 는 postfix 로 View 대신 Screen 을 사용한다.\n\n\nASSETS\n\n\nIMAGES\n\n제플린에서 받은 이미지 파일은 모두 이곳에 위치 시킨다.\n\n이때 파일 이름은 변경하지 않는다.\n\n * 서로 선호하는 파일 이름이 다를 수 있기 때문.\n\n * 파일 이름 변경이 필요하다고 생각 되면 디자인팀과 협의할 것.\n\n\nREACT NATIVE\n\n|-- android\n|-- ios\n|   |-- PROJ_NAME\n|   |-- Pods\n|   |-- Podfile\n|   |-- Podfile.lock\n|-- src\n|   |-- ...\n\n\n\n * Pods\n   \n   * iOS 에서 node_modules 와 비슷한 역할. iOS 앱을 빌드할 때 필요한 라이브러리들이 모여있다. CocoaPods\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445#1.2.-CocoaPods]\n     를 통해 설치하므로 형상 관리 (오류)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n * Podfile.lock\n   \n   * iOS 에서 package-lock.json 과 비슷한 역할. pod install 을 실행하면 lock 파일에 명시된 라이브러리들이\n     Pods 폴더에 다운로드 된다. 형상 관리 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n   \n   * Known issue\n     \n     * pod install 시 Podfile.lock 변경\n       \n       * CocoaPods 설치 가이드\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445#1.2.-CocoaPods]\n         에서 버전을 통일하라고 한 이유. npm ci 같은 명령어가 CocoaPods 에도 있어야 할 것 같은데 아직 그런 명렁어는\n         없으므로 개발자들이 CocoaPods 버전을 통일해서 해결.\n     \n     * https://github.com/CocoaPods/CocoaPods/issues/10506\n       [https://github.com/CocoaPods/CocoaPods/issues/10506]\n       \n       * pod install 시 엄청 오래 걸린다.\n       \n       * 모든 프로그램 다 종료하고 pod install 시 1시간 30분 정도 걸림 (아이맥 기준)\n         \n         [https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image-20210501-074016.png?api=v2]\n       \n       * 문제 해결 전까지 퇴근 전에 install 걸어 놓고 가는 것 추천\n\n\n\n===== 아래는 편집중\n\n\nROUTES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image2019-8-16_11-11-48.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n===\n\n---\n\n===\n\n\n\n\n모바일(React native)하고 웹 프론트 폴더 구조 입니다.\n\n- 단어가 2개인 폴더 // collection-service / 케밥\n\n- Type 대분류 / postfix Type을 붙이는 걸로 // 우리가 제안하는거  XXXRepository, XXXXButton\n\n\n\n\n\n컴포넌트 네이밍\n\n한 컴포넌트 폴더에 // index, component 둘다 생성해서 쓰는걸로\n\ncollectionView\n- collectionView.tsx\n- index.tsx\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/192413700"
  },
  {
    "pageContent": "웹 접근성(a11y) 개발 컨벤션\n\n대상\n\n규칙\n\n비고\n\n아이콘 역할을 하는 img or svg 태그\n\n * role=\"img\" 추가 (img 태그는 기본 값이라 생략 가능)\n\n * 아이콘을 설명할 수 있는 텍스트로 aria-label attr 추가\n\n * testing-library 이용 시 findByRole 로 DOM을 탐색해야 한다.\n\n\n\ninput[type=password]\n\n * role은 별도로 지정하지 않는다.\n\n * testing-library 이용 시 findByLabelText 로 DOM을 탐색해야 한다.\n\n * W3C에서 관리하는 스펙 [https://www.w3.org/TR/html-aria/#docconformance]상 password는\n   role이 없다.\n\n * testing-library는 이 스펙을 지켜서 개발되었으므로 차선책으로 findByLabelText로 찾는것을 규칙으로 한다.\n   https://github.com/testing-library/dom-testing-library/issues/567\n   [https://github.com/testing-library/dom-testing-library/issues/567]\n\n입력 필드와 입력 필드의 이름을 설명해주는 Label이 있는 경우\n\n * label 태그를 사용한다면 for attr 를 추가하여 입력 필드의 이름을 암시한다.\n\n * label 태그 사용이 불가능 한 경우 Label 역할을 하는 태그에 id를 지정하고, 입력 필드에 aria-labelledby 를 이용해\n   입력 필드의 이름을 암시한다.\n\n * testing-library 이용 시 findByRole 로 DOM을 탐색해야 한다.\n\n\n\n입력 필드와 입력 필드의 상태의 힌트를 제공하는 텍스트가 있는 경우\n\n * 힌트 텍스트가 있는 태그에 id를 지정하고, 입력 필드에 aria-describedby 를 이용해 입력 필드의 상태 힌트를 암시한다.\n\n * testing-library 이용 시 findBy* 의 description 옵션을 이용해 탐색해야 한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2780135590"
  },
  {
    "pageContent": "[F] 컴포넌트 개발\n\n우리는 React 를 사용하기 때문에 이곳의 하위 페이지들은 React 공식 문서와 목차를 비슷하게 유지하면 원하는 정보를 쉽게 탐색할 수 있을\n것으로 기대된다.\n\nhttps://react.dev/learn [https://react.dev/learn]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/290947459"
  },
  {
    "pageContent": "[F] Control flow\n\nFront-end 와 Back-end 에 적용 되는 control flow 는 다를 수 있다.\n\n * switch\n   * 정해진 값이 있는 경우 default 에서 throw error\n\n\nSWITCH\n\n\n정해진 값이 있는 경우 DEFAULT 에서 THROW ERROR (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nenum Status {\n  Active,\n  Suspended,\n}\n\nconst status = fetchStatusFromServer()\nswitch (status) {\n  case Status.Active: ...\n  case Status.Suspended: ...\n  default: ... // 여기서 throw error (x)\n}\n\nReact 의 경우 렌더링 도중에 에러를 던지면 특별한 처리를 해주지 않은 경우 흰 화면을 보게 되어서 좋지 않다.\n\n정해진 값이 아닌 경우에는 기본값으로 fallback 하거나 그냥 어색하게 보이도록 만들어서 사용자 문의가 접수 되도록한다.\n\n보통은 default 문이 실행될 일이 없지만 정해진 값이 바뀌는 경우 default 문이 실행될 수 있다.\n\nex) 상태값이 추가 되는 경우, 프론트와 백엔드 배포를 완전히 동일한 타이밍에 배포할 수 없기 때문에 default 에서 에러를 던지면 그냥\n흰 화면이 보이게 된다. 이 예시에는 프론트를 먼저 배포하면 해당 현상은 막을 수 있지만 경우에 따라 백엔드를 먼저 배포해야 할수도 있기 때문에\ndefault 에서 에러를 던지는 방식으로 개발하지 않는다.\n\n\n\n참고\n\n[B] Control flow\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390294582/B+Control+flow]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390032449"
  },
  {
    "pageContent": "[H][F] 데이터 모델 개발\n * 데이터 모델 선언\n   * 언제 새로운 모델을 선언해야 하는가?\n   * 타입 매핑\n   * Serializable\n * 컨벤션\n   * Class 이름\n   * Property 이름\n   * Path, 파일명\n   * Export\n * 개발 대상\n   * 웹\n   * 앱\n\n\n데이터 모델 선언\n\nGET 형식의 API 응답값을 데이터 모델(class)로 선언한다.\n\n다음과 같이 API 문서에서 응답값의 형식을 확인하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230719566/image-20191030-051532.png?api=v2]\n\nexport class YourModel {\n  userId!: number;\n  // ...\n}\n\n\n언제 새로운 모델을 선언해야 하는가?\n\nAPI 문서를 보면 다음과 같이 모델을 명시하는 경우가 있다.\n\n(ex - class: HaulerCollection)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230719566/image-20191128-012622.png?api=v2]\n\n해당 모델이 존재하지 않는다면 새로운 모델을 선언해야 한다.\n\nAPI 에 명시 된 모델이 동일한 경우 해당 API 들의 반환값은 동일하다.\n\nAPI 에 모델이 명시되어 있지 않은 경우 서버 개발자와 협의 후 모델을 선언한다.\n\n\n타입 매핑\n\nAPI 문서의 타입은 TS 에서 다음과 같이 매핑해야 한다.\n\nAPI 문서 타입\n\nTS 타입\n\ninteger\n\nnumber\n\nstring\n\nstring\n\nstring <date-time>\n\nstring\n\nrequired\n\n * 서버에서 optional 로 응답값을 주는 경우는 없다.\n\n * optional 을 사용하면 서버가 실수로 값을 안준건지 값이 없는건지 판단할 수 없기 때문.\n\n-\n\nnull\n\nNullable\n\n\n\nex)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230719566/image-20191030-032841.png?api=v2]\n\n\n\nexport class UserModel {\n  userId!: number;\n  serviceAccountId!: string;\n  firstName!: Nullable<string>;\n  lastName!: Nullable<string>;\n  email!: string;\n  phoneNumber!: string;\n  countryCode!: string;\n  timezone!: string;\n  language!: stirng;\n  unitVolume!: string;\n  registeredAt!: string;\n}\n\n\nSERIALIZABLE\n\n데이터 모델은 리듀서에 저장해야 하므로 serializable 하게 개발해야 한다.\n\n * https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state\n   [https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state]\n\n * https://redux.js.org/faq/design-decisions#why-doesnt-redux-support-using-classes-for-actions-and-reducers\n   [https://redux.js.org/faq/design-decisions#why-doesnt-redux-support-using-classes-for-actions-and-reducers]\n\n * serializable 하지 않아도 되지만 그로 인해 사용할 수 없는 debugging feature 가 있으므로 개발 편의를 위해\n   serializable 하게 만들도록 한다.\n\n따라서 데이터 모델 class 에 helper method 같은걸 넣으면 안된다. (POJO 형태로 작성해야 함)\n\n\n컨벤션\n\n\nCLASS 이름\n\n이름은 다른 개발자들과 의논해서 정하도록 한다. (postfix 로 Model 은 붙여야 한다.)\n\nPascalCase.\n\n\nPROPERTY 이름\n\nAPI 문서를 따른다.\n\ncamelCase.\n\n\nPATH, 파일명\n\nkebab-case.\n\n\nEXPORT\n\ndefault export 하지 않고 모두 named export 한다.\n\n\n개발 대상\n\n\n웹\n\nsrc/app/models/your-model.ts\n\n\n앱\n\nsrc/app/models/common/your-model.ts or\n\nsrc/app/models/generator/your-model.ts or\n\nsrc/app/models/hauler/your-model.ts\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230719566"
  },
  {
    "pageContent": "[F] 데이터 조회 및 변경\n * 조회 결과를 상태에 반영\n * 조회, 변경 콜백\n * useQuery\n   * 사용 예시\n   * 예제\n   * Parameter\n   * Result\n   * 갱신\n * useLazyQuery\n   * 사용 예시\n   * 예제\n   * Parameter\n   * Result\n * useMutation\n   * 사용 예시\n   * 예제\n   * Parameter\n   * Result\n * Type\n   * QueryOptions\n   * QueryResult\n * 관련 문서\n\n\n조회 결과를 상태에 반영\n\nuseEffect 를 사용한다.\n\nfunction SomeComponent() {\n  // state hooks\n  const [name, setName] = useState('')\n  \n  // query hooks\n  const { data: user } = useQuery(...)\n  \n  // effects\n  useEffect(() => {\n    if (user) {\n      setName(user.name)\n    }\n  }, [user, setName])\n}\n\nuseQuery 의 onSuccess 를 이용하는 방식은 옵션에 따라 제대로 동작하지 않음\n\nCCNB-6499 [https://ecubelabs.atlassian.net/browse/CCNB-6499] - 이슈 세부사항 가져오는 중...\n상태\n\n\n조회, 변경 콜백\n\nonCompleted := 성공 콜백\n\nonError := 실패 콜백\n\nfunction SomeComponent() {\n  // ...\n  // query hooks\n  const [update] = useMutation(mutation, {\n    onCompleted: (res) => {\n      // do something\n    },\n    onError: (err) => {\n      // handle error\n    }\n  })\n  \n  // ...\n  return (...)\n}\n\n\n\n가독성을 높이기 위해 조회, 변경 콜백은 hook 선언 시 함께 선언한다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nfunction SomeComponent() {\n  // ...\n  // query hooks\n  const [update] = useMutation(mutation, {\n    onCompleted: (res) => {\n      // do something\n    },\n    onError: (err) => {\n      // handle error\n    }\n  })\n  \n  // ...\n  return <button onClick={() => { ... } />\n}\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nfunction SomeComponent() {\n  // ...\n  // query hooks\n  const [update] = useMutation(mutation)\n  \n  // ...\n  return <button onClick={() => {\n    update({\n      variables: { ... },\n      onCompleted: (res) => { /* do something */ },\n      onError: (err) => { /* handle error */ },\n    })\n  }} />\n}\n\n\n\n\n\n=== 아래는 수정 필요\n\n데이터 조회 및 변경은 useQuery, useLazyQuery, useMutation 훅을 이용해 Repository\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033601417/F+Repository]를\n호출하는 방식으로 한다.\n\n\n\n\nUSEQUERY\n\n컴포넌트가 처음 렌더링 될 때, 데이터를 무조건 조회해야 하는 경우 사용한다.\n\n뷰 구성에 꼭 필요한 데이터가 있을 경우 사용하면 된다.\n\n\n사용 예시\n\n * 프로필 화면에서 유저 정보를 조회하는 경우\n\n * 차량 목록에서 차량 리스트를 조회하는 경우\n\n\n예제\n\nimport { useQuery } from '@ceed/core';\n\nfunction Component() {\n  ...\n  // query hooks\n  const { data: vehicles, loading, error, refetch } = useQuery(vehicleRepository.getAll, {\n     variable: { limit: 20 }\n     onCompleted: () => {},\n     onError: () => {},\n  });\n  \n  return (\n    <>\n        {vehicles.map((v) => <>{v.name}</>)}\n    </>\n  )\n}\n\n\nPARAMETER\n\n명칭\n\n타입\n\n필수 여부\n\n설명\n\nquery\n\nObservable<R>\n\nV\n\n조회하려는 데이터의 Observable\n\noptions\n\nQueryOptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryOptions]<T>\n\n\n\n데이터 조회 옵션\n\n\nRESULT\n\n명칭\n\n타입\n\n설명\n\nresult\n\nQueryResult\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryResult]<R>\n\n데이터 조회 결과\n\n\n갱신\n\n조회했던 데이터를 갱신해야 하는 경우가 있다. 이때는 QueryResult\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryResult]의\nrefetch 를 사용하면 된다.\n\nimport { useQuery } from '@ceed/core';\n\nfunction Dashboard({ breed }) {\n  const { loading, error, data, refetch } = useQuery(repository.get, {\n    variables: { id: 1 }\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  return (\n    <div>\n      {data.price}\n      <button onClick={() => refetch()}>Refetch!</button>\n    </div>\n  );\n}\n\n\nUSELAZYQUERY\n\n데이터를 수동으로 조회하는 경우 사용한다.\n\n데이터 조회 시점을 제어해야 하는 경우 사용하면 된다.\n\n\n사용 예시\n\n * 특정 이벤트가 발생한 이후에 데이터를 조회해야 하는 경우\n\n * 데이터를 순차적으로 조회해야 하는 경우\n\n\n예제\n\nimport { useLazyQuery } from '@ceed/core';\n\nfunction Component() {\n  ...\n  // query hooks\n  const [\n    get,\n    { loading, data, error },\n  ] = useLazyQuery(repository.getById);\n  \n  useEffect(() => {\n      // id 유효할 경우 데이터를 불러온다.\n      if (id) {\n        get({\n          variables: { limit: 20 },\n          onCompleted: (data) => {},\n          onError: (error) => {},\n        });\n      }\n  }, [id])\n}\n\n\nPARAMETER\n\n명칭\n\n타입\n\n필수 여부\n\n설명\n\nquery\n\nObservable<R>\n\nV\n\n조회하려는 데이터의 Observable\n\n\nRESULT\n\n명칭\n\n타입\n\n설명\n\ncall\n\n(options?: QueryOptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryOptions]<T>)\n=> void\n\n수동으로 데이터 조회\n\nresult\n\nQueryResult [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3768456/SW]<R>\n\n조회 결과\n\n\nUSEMUTATION\n\n데이터를 변형해야 할 때 사용한다.\n\n\n사용 예시\n\n * 비밀번호 변경\n\n * 수거지점 데이터 변경\n\n\n예제\n\nimport { useMutation } from '@ceed/core';\n\nfunction Component() {\n  ...\n  // query hooks\n  const [changePassword, { loading, data, error }] = useMutation(userService.changePassword);\n  \n  return (\n    <>\n    <button onClick={() => {\n      changePassword({\n        variables: { currentPassword, newPassword },\n        onCompleted: () => {},\n        onError: (error: Error) => {},\n      });\n    }}>\n      Button\n    </button>\n    <>\n  )\n}\n\n\n\nPARAMETER\n\n명칭\n\n타입\n\n필수 여부\n\n설명\n\nquery\n\nObservable<R>\n\nV\n\n조회하려는 데이터의 Observable\n\n\nRESULT\n\n명칭\n\n타입\n\n설명\n\ncall\n\n(options?: QueryOptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryOptions]<T>)\n=> void\n\n수동으로 데이터 변경\n\nresult\n\nQueryResult\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryResult]<R>\n\n변경 결과\n\n\n\n\nTYPE\n\n\nQUERYOPTIONS\n\ntype QueryOptions<T = any> = {\n  variables?: T;\n  onCompleted?: (data?: any) => void;\n  onError?: (error: HooksError) => void;\n  skip?: boolean;\n};\n\n명칭\n\n타입\n\n설명\n\nvariables\n\nT | undefined\n\n데이터 조회 및 변경에 필요한 파라미터\n\nonCompleted\n\n(data?: any) => void\n\n데이터 조회 성공 시 불리는 콜백\n\nonError\n\n(error: HooksError) => void\n\n데이터 조회 과정에서 에러가 발생 시 불리는 콜백\n\nskip\n\nboolean\n\n자동 조회 뛰어넘는 경우\n\n구현되어 있지 않아 사용하지 말아야 한다. useLazyQuery 를 사용하면 된다.\n\n\nQUERYRESULT\n\ntype QueryResult<T> = {\n  loading: boolean;\n  data: T | undefined;\n  error?: HooksError;\n  refetch: () => void;\n};\n\n명칭\n\n타입\n\n설명\n\ndata\n\nT | undefined\n\n데이터 조회 결과, 조회 완료 전까지 undefined\n\nloading\n\nboolean\n\n데이터 조회 중인지 여부\n\nerror\n\nHooksError\n\n데이터 조회 과정에서 에러 발생했는지 여부\n\nrefetch\n\n() => void\n\n데이터 갱신 함수\n\n\n\n\n관련 문서\n\n[F] useQuery, useLazyQuery, useMutation 사용 시 테스트\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1713012767/F+useQuery+useLazyQuery+useMutation]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612"
  },
  {
    "pageContent": "[F] Repository 개발\n\nhttps://codelabs.developers.google.com/codelabs/kotlin-android-training-repository#5\n[https://codelabs.developers.google.com/codelabs/kotlin-android-training-repository#5]\n\nexport const usimRepository = {\n  getAllUsimsWithStatus(): Observable<UsimWithStatus[]> {\n    return from(\n      axios.get<{ usim_idx: number; usim_id: string }[]>(`${BASE_URL_V3}/usims`)\n    );\n  },\n  \n  retrieve({ idx }: { idx: number }): Observable<Usim> {\n    return from(axios.get<Usim>(`${BASE_URL_V3}/usims/${idx}`));\n  },\n};\n\n 1. repository 는 object 로 선언한다. (그래야 테스트할 때 mocking 이 편함)\n\n 2. repository method 의 parameter 는 항상 object type 이어야 한다.\n    \n    1. 위의 예제에서\n       retrieve(idx: number) (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n       retrieve(params: { idx: number }) (tick)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n    \n    2. parameter 가 필요 없을 때 비워두는 건 괜찮다.\n       getAllUsimsWithStatus() (tick)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n\n\nexport const invoiceRepository = {\n  /**\n   * 인보이스 목록 조회\n   */\n  list({\n    page,\n    limit,\n    publishStartOn,\n    publishEndOn,\n    dueStartOn,\n    dueEndOn,\n  }: {\n    page?: number;\n    limit?: number;\n    publishStartOn?: CalendarDate;\n    publishEndOn?: CalendarDate;\n    dueStartOn?: CalendarDate;\n    dueEndOn?: CalendarDate;\n  }): Promise<Paginate<InvoiceModel[]>> {\n    return httpClient\n      .get<Paginate<InvoiceModel[]>>('/invoices', {\n        params: {\n          page,\n          limit,\n          publishStartOn,\n          publishEndOn: publishEndOn && nextCalendarDate(publishEndOn),\n          dueStartOn,\n          dueEndOn: dueEndOn && nextCalendarDate(dueEndOn),\n        },\n      });\n  },\n}\n\nEcube-Labs/haulla-back-office-front#869 (comment)\n[https://github.com/Ecube-Labs/haulla-back-office-front/pull/869#discussion_r926552997]\n\n * API 규칙에 맞게 입력받은 값을 변형해줘야 하는 경우에는 repository에서 대응한다.\n   \n   * ex) ~EndOn은 api에서 미만으로 처리하기 때문에 +1일 해줘야 한다 → 추후 변화에 쉽게 대응하기 위해 API를 사용하는\n     컴포넌트가 아닌 repository에서 일괄 처리한다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033601417"
  },
  {
    "pageContent": "URL(routes) design\n\n\n\n * 프론트엔드에서 경로 설계가 왜 중요할까?\n * 그럼 어떻게 구성해야 좋을까?\n   * Path\n   * Query string (쿼리스트링)\n     * 하나의 페이지가 담고있는 상태를 저장한다.\n     * 필요한 경우가 아니라면 페이지를 이동할 때 쿼리스트링을 비워야 한다.\n     * 단일 페이지에서 상태 저장을 위해 쿼리스트링을 변경하는 경우 History가 추가되면 안된다.\n     * 페이지에 새로 진입한 경우(ex. refresh) 쿼리스트링에 표현된 내용이 모두 반영돼야 한다.\n     * 예시\n   * Fragment identifier\n   * Auxiliary routes\n\n실제 버그 Case\n* 1. GitHub\n\n\n프론트엔드에서 경로 설계가 왜 중요할까?\n\n우리가 사용하는 URL은 보통 아래처럼 구성됩니다.\n\n{protocol}://{host}{path}?{queryString}#{fragmentId}\n\n웹에서의 프로토콜은 보통 http or https를 사용하니 그냥 넘어가고,\n호스트는 특정 서버를 가리키도록 도와주는 별명이니 넘어갑니다.\n\n프론트엔드 개발자인 우리가 지금 중요하게 봐야 할 부분은 \n\n * Path\n\n * Query String\n\n * Fragment identifier [https://en.wikipedia.org/wiki/Fragment_identifier] (우리가\n   종종 보는 http://localhost#blahblah의 해쉬 이후의 모든 값을 포함.)\n\n이 3가지에 있습니다.\n\n우리는 3가지를 적절하게 사용하고 있는지, 목적성과 의미를 두고 잘 사용하고 있는지 확인을 해봐야 합니다.\n\n위에 제공되는 3가지만을 가지고도 웹 페이지에서 많은 표현과 상태를 담고 사용자에게 더 나은 경험을 제공할 수 있습니다.\n\n\n\n\n\n그럼 어떻게 구성해야 좋을까?\n\n\nPATH\n\n경로를 우리가 적절하게 잘 사용하고 있을지 고민을 해본적이 있나요?\n\n제가 Path의 용도에 어울린다고 생각하는 방향은 아래와 같습니다.\n\n 1. Path는 페이지를 구성하는 가장 큰 뼈대로 생각해야 한다.\n    \n    1. 경로는 가장 처음 마주치는 웹 사이트의 상태를 담을수 있는 수단입니다.\n\n 2. Path는 어플리케이션의 Workflow에 영향을 받을 수 있다.\n    \n    * 특정 페이지를 진입하는 순서에 따라 Path가 구성될 수 있습니다.\n    \n    * 그러나 예외는 충분히 있을 수 있습니다.\n\n 3. SEO를 위해 실질적으로 도움되지 않는 정보를 포함할 수 있다.\n    \n    1. 예를들면 게시글의 제목. 아래같은\n       \n       * https://stackoverflow.com/questions/34813740/what-are-auxiliary-routes-in-angular-2-for\n         [https://stackoverflow.com/questions/34813740/what-are-auxiliary-routes-in-angular-2-for]\n       \n       * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118587485/resources\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118587485/resources]\n         \n         * 심지어 위 주소같은 경우는 마지막 path가 없어도 되며, Space 이름이 유효하지 않아도 동작하도록 구성돼있습니다.\n         \n         * https://ecubelabs.atlassian.net/wiki/spaces/가나다라/pages/118587485\n           [https://ecubelabs.atlassian.net/wiki/spaces/가나다라/pages/118587485]\n         \n         * 그러나 위는 SEO를 위한 동작성이며 일반적으로 어플리케이션이 아닌 서버 레벨에서 Rewrite rule을 이용하여\n           redirect 하도록 구성합니다.\n    \n    2. 반대로 SEO가 필요없는 어플리케이션이라면 순수하게 프로그램 측면에서 필요한 URL만 구성해도 된다고 생각합니다.\n       \n       * RESTful API와 다른 시각으로, 프로그램이 동작하기 위한 또 다른 하나의 인터페이싱 수단입니다.\n\n 4. Auxiliary Routes를 포함할 수 있다.\n    \n    * 위에서 설명을 생략했지만, path뒤에는 Auxiliary routes가 포함될 수 있습니다.\n    \n    * 이게 언제 필요한지는 아래에서 설명합니다.\n\n\nQUERY STRING (쿼리스트링)\n\n일반적으로 쿼리스트링으로 부르는 http://localhost/path?key=value&key2=value2 에 해당하는 부분입니다.\n\n쿼리스트링은 아래의 룰을 갖고 다루도록 합니다.\n\n하나의 페이지가 담고있는 상태를 저장한다.\n\n 1. 페이지에서 다루는 입력 정보들\n    \n    1. 보안이 요구되는 경우처럼 특수한 경우를 제외하면 쿼리스트링으로 표현되어야 한다.\n\n 2. Active, focus된 Element의 정보\n\n 3. 보조 정보의 상태 값 (특정 레이어가 띄워진 여부 등 상황에 맞게)\n\n필요한 경우가 아니라면 페이지를 이동할 때 쿼리스트링을 비워야 한다.\n\n * A페이지에서 30개의 쿼리 파라메터를 다루다가 B라는 페이지로 넘어갔을때 해당 쿼리 파라메터를 유지한 채 넘어가면 안된다.\n\n * 다만 상황에 따라 일부 허용되는데, 대부분의 경우는 Child route가 바뀌어 페이지의 일부 컴포넌트만 바뀌는 경우 허용할 수 있다.\n\n단일 페이지에서 상태 저장을 위해 쿼리스트링을 변경하는 경우 HISTORY가 추가되면 안된다.\n\n * 쿼리스트링을 변경한다고 히스토리를 바꾸지 말고, replace해야 합니다.\n\n * 예외 (그러나 룰을 따라 개발한다면 예외가 생길 일은 거의 없다고 생각합니다.)\n   \n   * 쿼리스트링으로 페이지 이동을 표현해야 하는 경우\n   \n   * 기획상 페이지 변경으로 치부해야 하는 경우\n\n페이지에 새로 진입한 경우(EX. REFRESH) 쿼리스트링에 표현된 내용이 모두 반영돼야 한다.\n\n쿼리스트링으로 상태를 저장해놓고 의미가 없는 경우가 없어야겠죠.\n\n * 페이지를 진입했을 경우 단 하나의 쿼리 파라메터도 의미가 없어선 안됩니다.\n\n예시\n\n 1. 페이지에서 다루는 입력 정보 (필터)\n    \n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/118686116/2019-02-18%2018-26-58.2019-02-18%2018_27_54.gif?api=v2]\n\n 2. focus된 element의 정보\n    \n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/118686116/2019-02-18%2018-29-32.2019-02-18%2018_30_56.gif?api=v2]\n\n위 예시처럼 Query string으로 페이지를 제어하는게 아닌, 단순히 해당 페이지의 상태를 담는 하나의 store로 사용하시길 바랍니다.\n\n\n\n\n\nFRAGMENT IDENTIFIER\n\n작성 대기중\n\n\n\n\n\nAUXILIARY ROUTES\n\n작성 대기중\n\n\n\n\n\n\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n실제 버그 CASE\n\n\n1. GITHUB\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/118686116/image2020-3-25_18-54-7.png?api=v2]\n\nq라는 쿼리스트링을 두 컴포넌트가 참조하고 있어서 이런 문제가 생긴다.\n\n원래대로면 두 검색창은 값을 공유하지 않아야 한다.\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118686116"
  },
  {
    "pageContent": "[F] libs/auth\n * FSM\n * 렌더링 블락\n\n\nFSM\n\n[/wiki/download/attachments/1182106025/auth-fsm.drawio.png?api=v2]\n\n\n렌더링 블락\n\n“로그인 필요” 상태 or “사용자 메모리에 탑재” 상태가 되기 전에는 렌더링을 블락 해야 한다. 이때 흰화면이 노출 되어도 어쩔 수 없다.\n\n렌더링을 블락 하지 않으면 하나의 언어만 지원할때는 문제될 게 없는데 다국어를 지원해야 하면 다음과 같은 문제가 발생한다.\n\n * access token 로딩 성공.\n\n * 사용자 조회 호출하고 렌더링을 계속 진행한다.\n\n * 사용자 조회 전이기 때문에 사용자의 언어를 알 수 없으므로 페이지가 영어(혹은 브라우져 default)로 렌더링 되기 시작한다.\n\n * 사용자를 조회했더니 사용자의 언어가 영어가 아니다.\n\n * 그러면 페이지를 다시 사용자의 언어로 렌더링 해야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1182106025/without-rendering-block.gif?api=v2]\n\n위와 같이 사용자가 이상한 언어의 페이지를 보는 것을 막으려면 렌더링 블락이 필요하고 이는 다음과 같이 구현하면 된다.\n\n// auth.tsx\nconst UserContext = createContext({ ... })\n\nfunction AuthProvider(props) {\n  // 시작\n  const [initialized, setInitialized] = useState(false);\n  \n  // access token loading\n  \n  if (access token loaded) {\n    if (user fetched) {\n      UserContext.set(user)\n      setInitialized(true) // 조회 성공 했기 때문에 \"사용자 메모리에 탑재\" 상태가 됨\n    } else {\n      setInitialized(true) // 조회 실패 했기 때문에 \"로그인 필요\" 상태가 됨\n    }\n  } else {\n    setInitialized(true) // 로딩 실패 했기 때문에 \"로그인 필요\" 상태가 됨\n  }\n  \n  if (!initialized) {\n    return null \n  }\n  return <>{ props.children } </>\n}\n\n// App.tsx\n<AuthProvider>\n  <Home /> // \"로그인 필요\" 상태 or \"사용자 메모리에 탑재\" 상태가 아니면 AuthProvider 는 children 을 반환하지 않으므로 렌더링 블락이 구현 됨\n</AuthProvider>\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1182106025"
  },
  {
    "pageContent": "[F] 테스트\n\nhttps://reactjs.org/docs/testing.html [https://reactjs.org/docs/testing.html] 에\n명시 된 Jest [https://jestjs.io/], React Testing Library\n[https://testing-library.com/docs/react-testing-library/intro] 를 이용해 테스트 코드를\n작성한다.\n\n\n\n * 필독 자료\n * 단위 테스트 (Unit test)\n   * 목적\n   * 작성 규칙\n * 상호 작용 테스트 (Interaction test)\n   * 목적\n   * 작성 규칙\n   * 참고\n * 시각적 회귀 테스트 (Visual Regression test)\n   * 목적\n   * UI 변경사항 검토 규칙\n   * 참고\n * 통합 테스트 (Integration test)\n   * 목적\n   * 장점\n   * 작성 규칙\n   * 참고\n\n\n필독 자료\n\n * https://testing-library.com/docs/queries/about/#priority\n   [https://testing-library.com/docs/queries/about/#priority] 쿼리 우선순위\n   \n   * Role(+ name) > Label text > Placeholder > Text > Display value\n\n * https://seongry.github.io/2021/06-20-common-mistakes-with-rty/\n   [https://seongry.github.io/2021/06-20-common-mistakes-with-rty/]\n\n--------------------------------------------------------------------------------\n\n\n단위 테스트 (UNIT TEST)\n\n\n목적\n\n기능의 Output이 의도한 대로 나오는지 검증한다.\n\n\n작성 규칙\n\n * 함수/컴포넌트에 작성한 로직이 잘 동작하는지 테스트한다.\n   \n   * 모킹이 불가능하다고 판단되는 코드는 추상화를 더 해야한다.\n\n * 컴포넌트/화면 구분 없이 모두 작성한다.\n\n--------------------------------------------------------------------------------\n\n\n상호 작용 테스트 (INTERACTION TEST)\n\n\n목적\n\n특정 이벤트가 발생했을때 의도한 동작을 하는지 검증한다.\n\n\n작성 규칙\n\nInteraction Testing\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065/Interaction+Testing]\n\n\n참고\n\n * https://testing-playground.com/ [https://testing-playground.com/]\n\n\n\n--------------------------------------------------------------------------------\n\n\n시각적 회귀 테스트 (VISUAL REGRESSION TEST)\n\n\n목적\n\n회귀 버그가 발생하지 않았는지 검증한다.\n특히 사소한 변경에 의해 바뀌기 쉬운 UI 요소는 시각적 회귀 테스트를 통해 회귀 버그가 발생하지 않는지 검증한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/246317252/image-20211122-040942.png?api=v2]\n\n\nUI 변경사항 검토 규칙\n\n * 현재 발생한 UI 변경이 의도적으로 이루어진게 맞는지 확인한다.\n\n * 스토리북에 작성된 상호 작용 테스트(Interaction test)와 조합해서 사용할 수 있지만 기능적으로 검증하는것이 아닌 UI\n   변경사항에 초점을 맞춰 검토한다.\n\n\n참고\n\n * 단위 테스트, 상호작용 테스트 용도로 작성한 Story를 이용해 자동화한다.\n\n * 웹에서는 다양한 Headless browser를 사용하여 구현한 라이브러리가 많지만,\n   우리는 컴포넌트 개발 시 사용중인 Storybook과 Chromatic을 이용하여 시각적 회귀 테스트를 진행한다.\n\n--------------------------------------------------------------------------------\n\n\n통합 테스트 (INTEGRATION TEST)\n\n\n목적\n\n개발자가 단위 테스트로 테스트 할 수 없는 영역까지 포함하여 의도한대로 동작하는지 검증한다.\n(ex. 라이브러리. mui, ag-grid…)\n\n\n장점\n\n * 통합 테스트는 컴포넌트 내부의 코드가 어떻게 바뀌든 사용 시나리오가 바뀌지 않는다면 유효하기 때문에 리팩토링을 하는 경우 효과적이다.\n\n * 성능에 큰 영향을 끼치는 변화가 있는 경우 알아챌 수 있다.\n\n\n작성 규칙\n\n * 이큐브랩은 통합 테스트와 인수 테스트(Acceptance Test)를 결합하여 작성한다.\n   때문에 실제 사용자 시나리오에 맞춰 통합 테스트를 작성해야 한다.\n\n * 특수하게 검증해야 하는 시나리오가 있다면 별도의 테스트 케이스로 관리한다.\n\n * 모든 레이어를 검증하는 E2E 테스트가 아닌 앱이 제대로 동작하는지 검증한다.\n   (API, Infra layer까지 검증 가능한 E2E 테스트는 별도로 환경을 마련할 예정)\n\n * Interaction Testing\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065/Interaction+Testing]\n   1번을 제외한 모든 규칙을 따른다.\n\n\n참고\n\n * 일반적인 E2E 테스트 도구로 이용되는 Headless browser 라이브러리들(Selenium, WebDriverIO,\n   playwright, …)과 다르게 Cypress는 API 요청을 가로채서 모킹 할 수 있기 때문에 API 개발이 되지 않은 경우에\n   프론트엔드 개발을 보조하는 도구로도 이용할 수 있다.\n   \n   * https://www.testim.io/blog/end-to-end-testing-vs-integration-testing/\n     [https://www.testim.io/blog/end-to-end-testing-vs-integration-testing/]\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/246317252"
  },
  {
    "pageContent": "[H][F] 스토리북\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/598966654"
  },
  {
    "pageContent": "[H][F] 다국어 메시지 개발\n * 다국어 메시지 키 확인\n * 다국어 메시지 적용\n   * 1. 다운로드\n   * 2. 적용\n     * JS 코드에서 사용\n     * React 컴포넌트에서 사용\n     * 변수 전달\n * 주의사항\n\n\n다국어 메시지 키 확인\n\n다음과 같이 화면 설계의 출력 데이터 항목을 보면 다국어 메시지 키를 확인할 수 있다.\n\n결제 수단 등록 화면 (보류)\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/137691689]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/348980028/image-20200205-013021.png?api=v2]\n\n\n다국어 메시지 적용\n\n\n1. 다운로드\n\nhttps://translation.ecubelabs.xyz/en.json\n[https://translation.ecubelabs.xyz/en.json]\n\nhttps://translation.ecubelabs.xyz/ko.json\n[https://translation.ecubelabs.xyz/ko.json]\n\n위의 두 파일은 항상 stable 하게 유지 된다. 필요에 따라 두 파일을 프로젝트의 en.json, ko.json 으로 교체하면 된다.\n\n\n2. 적용\n\n\nJS 코드에서 사용\n\nimport { formattedMessage } from '@libs/intl';\n\nconst title = formattedMessage('mp__modify_generator_fee');\n\n\nREACT 컴포넌트에서 사용\n\nimport { FormattedMessage } from '@libs/intl';\n\nrender() {\n  return <FormattedMessage id=\"mp__modify_generator_fee\" />\n}\n\n\n변수 전달\n\n다국어 메시지에 변수를 전달해야 하는 경우가 있다.\n\nen.json\n{\n  ...\n  \"mp__collected_count\": \"{count} Collections\",\n  ...\n}\n\n그때는 values 를 이용한다.\n\nfunction Component() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <>\n      <FormattedMessage id=\"mp__collected_count\" values={{ count }}/>\n      {formattedMessage('mp__collected_count', { count })}\n    <>\n  )\n}\n\n\n\n주의사항\n\n * @libs/intl 외에 react-intl과 같은 library 를 직접 import 해서 사용하지 않는다.\n\n * 문구는 화면 설계의 출력 데이터에 있는 key + intl component/intl function 으로 출력한다.\n   \n   * 와이어프레임의 문구를 사용하지 않는다.\n   \n   * 제플린의 문구를 사용하지 않는다.\n\nif “화면 설계 출력 데이터”에 key 가 없는 경우 → 기획자에게 문의\n\nelse → 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 문의\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/348980028"
  },
  {
    "pageContent": "[H][F] 환경변수 관리\n\nhttps://github.com/Ecube-Labs/haulla-back-office-front/pull/353\n[https://github.com/Ecube-Labs/haulla-back-office-front/pull/353]\n\n\n환경변수 추가/삭제 후 로컬 테스트\n\n 1. .env 파일에 환경변수를 선언한다.\n\n 2. webpack.config.js 파일에 환경변수를 매핑한다.\n    \n    1. EnvironmentPlugin 의 파라미터 변경 필요.\n\n 3. 로컬 테스트.\n\n\n환경변수 추가/삭제 후 스테이지 테스트\n\n 1. 관리자에게 환경변수 추가를 요청하고 secret id 를 받는다.\n\n 2. Dockerfile 에 ARG 로 환경변수를 선언한다.\n\n 3. Jenkinsfile 에 관리자에게 받은 secret id 와 환경변수를 매핑한다.\n    \n    1. withCredentials 에 환경변수 매핑.\n    \n    2. 매핑 후 dockerBuild 에 build-arg 로 환경변수 전달.\n\n 4. 스테이지 테스트.\n\n\nPULL REQUEST\n\n[OMITTED]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/653033639"
  },
  {
    "pageContent": "성능 최적화\n\nState Colocation will make your React app faster\n[https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster]\n\nBefore You memo() [https://overreacted.io/before-you-memo/]\n\n\n\n\n\n\n\n'When to useMemo and useCallback' 를 읽고\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/196903098/When+to+useMemo+and+useCallback]\n\n(번역) React, Inline Functions, and Performance\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/288981352/React+Inline+Functions+and+Performance]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336953700"
  },
  {
    "pageContent": "[F] CORS\n\n[OJT][FE] CORS\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1116176519/OJT+FE+CORS]\n\n * CORS 에 대한 개념 이해\n\n\n\nhttps://jakearchibald.com/2021/cors/ [https://jakearchibald.com/2021/cors/]\n\n * CORS 적용 방법",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2213543941"
  },
  {
    "pageContent": "[F] Cypress\n\n통합 테스트나 E2E 테스트는 Cypress를 사용한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2297331717"
  },
  {
    "pageContent": "[F] 메일 템플릿 퍼블리싱\n * 반응형\n * 웹폰트\n * 본문을 이미지로?\n * Mouse hover\n * 테스트\n * CSS\n * 기타\n\n\n반응형 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n대부분의 메일 클라이언트에서 modern css 지원 안 한다. 괜히 반응형으로 하려다가 시간 버리지 말고 PC 혹은 모바일 기준으로 통일할\n것.\n\n\n\n모바일 기준으로 통일한 사례 - 넷플릭스\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054123.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054142.png?api=v2]\n\n\n\nPC 기준으로 통일한 사례 - 대부분\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054246.png?api=v2]\n\n\n웹폰트 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nRoboto 만 쓸 것\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054527.png?api=v2]\n\nhttps://www.litmus.com/blog/the-ultimate-guide-to-web-fonts\n[https://www.litmus.com/blog/the-ultimate-guide-to-web-fonts]\n\n\n본문을 이미지로?\n\n아래 사례에 해당하면 메일 본문을 이미지로 만들어 삽입하는 것이 좋다.\n\n * 배치 및 퍼블리싱이 까다롭다.\n\n * 커스텀 폰트 적용하고 싶다.\n\n\nMOUSE HOVER\n\nbutton + a 로 만든다.\n\n그냥 button 만 쓰면 cursor: pointer 가 안 됨\n\nhttps://github.com/Ecube-Labs/haulla-api/blob/a448e28ae611a3cc43a5f0ca400182660c284305/src/services/notification-templates/infrastructure/repository.ts#L769\n[https://github.com/Ecube-Labs/haulla-api/blob/a448e28ae611a3cc43a5f0ca400182660c284305/src/services/notification-templates/infrastructure/repository.ts#L769]\n\n\n테스트\n\n * 개발 후 실제 환경에서 테스트 실시할 것\n\n * 크로스 체크할 것\n   \n   * 구글 메일\n   \n   * OS 내장 메일\n   \n   * 모바일\n   \n   * 기타\n\n\nCSS\n\n * inline 방식 사용\n   \n   * 메일 수신 시 링크된 스타일이 적용되지 않을 수 있음\n   \n   * gmail, naver 등 이메일 서비스 제공자 측에 의해 보안을 위해 메일 내용을 일부 변조될 수 있다. script, style 등\n     기본적으로 head 태그 내부에 정의되는 내용은 배제된다.\n\n * gmail, apple mail, outlook 등의 css 지원 여부 https://www.campaignmonitor.com/css/\n   [https://www.campaignmonitor.com/css/]\n   \n   * display 속성 중에 table은 대부분 지원하지만 flex는 대부분 지원하지 않음\n   \n   * 메일 수신 테스트 환경에 따라 지원하지 않는 부분이 있기 때문에 퍼블리싱이 난해한 건 이미지로 대체\n\n\n기타\n\nhttps://www.caniemail.com/ [https://www.caniemail.com/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2749661534"
  },
  {
    "pageContent": "[H][F] (DEPRECATED) 개발 가이드\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/625312153"
  },
  {
    "pageContent": "[H][M] 폴더 구조 (deprecated)\n\n웹과 모바일 폴더 구조 통합 이전에 논의 되었던 내용을 기록하기 위해 남겨둔다.\n\nsrc\n|-- screens\n|   |-- [도메인]\n|   |   |-- [프로세스]\n|   |   |   |-- [화면]\n|   |   |   |   |-- index.jsx\n|   |   |   |   |-- [SubComponent1]\n|   |   |   |   |   |-- index.jsx\n\n\n\n\n\nSCREENS\n\n\n[ 도메인 ]\n\n[H][M] 도메인 모델\n[/wiki/pages/createpage.action?spaceKey=WIKI&title=%5BH%5D%5BM%5D%20%EB%8F%84%EB%A9%94%EC%9D%B8%20%EB%AA%A8%EB%8D%B8]\n\n\n[ 프로세스 ]\n\n하나의 완전한 프로세스를 정의하는 화면들의 집합.\n\n예를 들어 개별 서비스 추가\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/137789908/G] 프로세스의 경우\n아래의 9개의 화면이 모여 하나의 완전한 프로레스를 정의한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174948357/image2019-7-11_10-9-57.png?api=v2]\n\n\n[ 화면 ]\n\n프로세스를 구성하는 개별 화면.\n\nindex.jsx 가 화면의 root component 를 정의한다.\n\n화면의 sub components 는 root component 와 같은 폴더에 위치한다.\n\nsub components 는 다른 프로세스로 export 되면 안된다.\n\n\n컨벤션\n\n대상컨벤션[ 도메인 ]lowercase[ 프로세스 ]lowercase[ 화면 ]PascalCaseindex.jsxindex.jsxsub\ncomponentsPascalCase",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174948357"
  },
  {
    "pageContent": "[H][O] 폴더 구조 (deprecated)\n\n웹과 모바일 폴더 구조 통합 이전에 논의 되었던 내용을 기록하기 위해 남겨둔다.\n\n\n\n\nsrc/app/\n├── libs/\t\t\t# 라이브러리 관련된 폴더이다. services, config 등이 있다.\n├── configs/\t\t# 설정\n├── models/\t\t# 데이터 모델\n├── routes/\t\t# 앱의 라우팅 구성\n├── repositories/\t# 서비스 개념의 레파지토리\n├── components/\t# 리액트 컴포넌트들이 있는 폴더이다.\n│\t└── collections/\t\t# (예시)'/collections' 페이지에 쓰이는 컴포넌트들이 들어있는 폴더이다.\n│\t\t├── index.tsx\t\t\t\t\t# (예시)\n│\t\t└── CollectionItem.tsx\t\t\t# (예시)\n└── containers/\t# views에 해당하지 않지만 store에 접근해야 하는 작은 단위의 smart components\n└── views/\t\t\t# 화면을 구성하는 컴포넌트들. store에 접근 가능하며, 주로 containers, components를 사용하여 구성된다.\n\t├── _document.tsx\t\t# 전체적으로 영향을 미치는 Global 페이지이다. 생략된 경우 Next.js의 기본 값을 사용한다.\n\t├── _error.tsx\t\t\t# 에러가 났을 때 처리하는 페이지이다. 생략된 경우 Next.js의 기본 값을 사용한다.\n\t├── index.tsx\t\t\t# '/' 경로에 해당하는 페이지이다.\n\t└── collections.tsx\t# (예시)'/collections' 경로에 해당하는 페이지이다.\nsrc/assets/\t\t# 언어 json, 이미지 등의 static 파일들이 있는 폴더이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/180420966"
  },
  {
    "pageContent": "[F] 화면 설계 보는 방법\n    \n\n 1. 요소(Component) 종류\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306/F#%EC%9A%94%EC%86%8C(Component)-%EC%A2%85%EB%A5%98]\n\n 2. 사후조건\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306/F#%EC%82%AC%ED%9B%84-%EC%A1%B0%EA%B1%B4]\n\n 3. 출력데이터\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306/F#%EC%B6%9C%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0]\n\n * 해당 페이지 관리\n * 요소(Component) 종류\n * UX 용어\n * 사후 조건\n * 출력 데이터\n\n\n해당 페이지 관리\n\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n(+PD)\n\n * 변경 및 추가 필요하면 개발, 디자인, 기획 팀 누구나 지라로 이슈 생성하여 요청, 주로 PD 팀\n   GH-621 [https://ecubelabs.atlassian.net/browse/GH-621] - 이슈 세부사항 가져오는 중... 상태\n   에픽 내에 이슈 생성\n\n * 변경 프로세스: 지라 이슈 생성 > 기획 팀에서 변경 후 요청자 멘션 > 요청자 확인 후 확정 (이슈 완료)\n\n\n\n\n요소(COMPONENT) 종류\n\n\n\n 1. 컨테이너 (Container)\n\n * 다른 컴포넌트를 포함할 수 있는 영역\n\n * 컨테이너는 다른 컨테이너를 포함할 수 있음\n\n * https://mui.com/material-ui/react-container/\n   [https://mui.com/material-ui/react-container/]\n\n\n\n\n\n2. 리스트 (List)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/JI8oPguuWXiLYrVqbc1_92S7VboiierKfFbmp-UyR_latTPBtEuwewscY9m47EI6N-OKD-3Bt_vGVqxVPTMFSZArcZwNJgmrzeoCaxVISZvKBGl7LbSgqsJre04Q5seiAAhFhhc2xKgQfkM3lw?api=v2]\n\n * 선택할 수 있는 항목들을 보여주는 요소\n\n * 텍스트와 이미지 모두 가능\n\n * https://mui.com/material-ui/react-list/\n   [https://mui.com/material-ui/react-list/]\n\n\n\n2-1 리스트 아이템 (List Item)\n\n * 리스트의 각 항목\n\n\n\n\n\n3. 테이블 (Table)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/RNlFQ-rxTV6-N_adoVZicYhyc_QY8vuNi5rqQ52dEgk8IAnQISKqdyu999HfzVbeDaEsonSsfyQ0BJ0RDtAM96MtXKZy_1AlLLbXOBHbd076t39e6AsEUfuEHdISgg26JycPWAf7AkhJC-GUtA?api=v2]\n\n * 데이터 테이블 요소\n\n * https://mui.com/material-ui/react-table/\n   [https://mui.com/material-ui/react-table/]\n\n\n\n3-1 테이블 헤더 (Table Header)\n\n * 데이터 테이블의 colum 부분\n\n\n\n3-2 테이블 셀\n\n * colum에 해당하는 데이터 부분\n\n\n\n\n\n4. 텍스트 (Text)\n\n * 문자 (고정 ok, 변수 ok)\n\n\n\n\n\n5. 드롭다운 (Dropdown)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Rnt_a9M7yeVdCpuVL6m9stoyLBoj5l-2VJGALVgsfdGkf0chTFkwefMJEiRN58f7D4-Ukso_C2Fitg6hmSq8WQGjoeXGxnxD6HfZ2cvv6euYAKOS7X2nWMvzBDVYld34dyrnXozGSGrrwUQ68Q?api=v2]\n\n * 사용자가 버튼을 클릭이나 터치하였을 때, 그 버튼 아래로 선택 옵션들이 펼쳐지는 요소\n\n * 보통 상위 옵션만을 노출시키고, 활성화 시에만 하위 옵션들을 표시하는 방식\n\n * *단일 선택\n\n * https://mui.com/material-ui/react-select/\n   [https://mui.com/material-ui/react-select/]\n\n * https://mui.com/material-ui/react-autocomplete/\n   [https://mui.com/material-ui/react-autocomplete/]\n\n\n\n5-1 멀티 셀렉트 드롭다운 (Multi Select Dropdown)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-060845.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-060942.png?api=v2]\n\n * 2개 이상의 옵션을 선택할 수 있는 드롭다운 요소\n\n * *복수 선택\n\n\n\n\n\n6. 버튼 (Button)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Dqa-iKbpwpG6tsVIa5RCOFrhsYBVSeoAFXSDepwRolQrjCvG5H_TE5hJv59rtNxxeId3MiqLfoznSnJHnJAx4K2MGgZXSeWsvWlEqhCkJpcA4SO5JSmnoJ1-aOPQXzJwmt5bUd_fJx01gActoQ?api=v2]\n\n * 클릭 또는 터치를 통해 시스템에 특정한 정보를 전송하는 요소\n\n * https://mui.com/material-ui/react-button/\n   [https://mui.com/material-ui/react-button/]\n\n\n\n6-1 버튼 그룹 (Button Group)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Bfc_rMgmJHD5pRWoI65Q-VStgKlETKel44ifLga6U5zWeRPgRpYY_J0T58rPwQN4L2vkCQ2VnBADaayMzPk6LJoUZUbeV1Uk06yhelXIe0qsLYiJGX8b1XiiNG_cUqNyzZm4s57eAqEDWa1h8Q?api=v2]\n\n * 관련 버튼을 그룹화한 요소\n\n * https://mui.com/material-ui/react-button-group/\n   [https://mui.com/material-ui/react-button-group/]\n\n\n\n\n\n7. 앵커 (Anchor; <a>)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/hTy-OgFuIsTQ9Ci0fMdqTBwAc3MSrcc1uuzl61rcz-1Bx-BJl3_AAZHEcQuATHRTfN_e96eySjzsk00NXr4s6yTJptnt9cyRvelptSNOFWSWK_nBfl-XyOOm2sBRlhI55npnFbvZE1gsYIXBOg?api=v2]\n\n * 웹페이지, 파일, 이메일 또는 같은 페이지의 특정 위치와 같이 URL이 가리킬 수 있는 곳으로 연결하는 하이퍼링크 요소\n\n * https://mui.com/material-ui/react-link/\n   [https://mui.com/material-ui/react-link/]\n\n\n\n\n\n8. 이미지\n\n * 사진 및 로고 이미지\n\n\n\n\n\n9. 체크박스 (Checkbox)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/-VlqSz6R4gLt_1IS8AzRr_XGnheXUNJ26ixKzxoftxbI9ySJgbYh5VTDE4rRg7MBFBVbWsm3O6FnAs7hA-OzgeKuDDclnIFUmHCE9hzh2xYeV1fC8jNr3Or86JWRRLmZW-CeVU7vOmtgliFAFQ?api=v2]\n\n * 클릭하면 선택되고, 다시 클릭하면 선택이 해제되는 사각형 모양의 박스 요소\n\n * 보통 사용자는 1개이상 선택 가능\n\n\n\n\n\n10. 라디오 (Radio)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/VjNvsu69M1l1eoSzXt1VWtDDMyUrOclLKnakfGwPh3sRZOOYq6xZ1VA896mAQf7FGJk8ZkqjsVFLiTIokAbCqBex80PeoS0Mle6NcSKxNpitcAsyJbw275mC5msS6jG6U1zThzHqc0w4Fyurww?api=v2]\n\n * 선택 영역에서 어느 하나를 선택 또는 취소하기 위해 사용하는 요소\n\n * 보통 사용자는 1개만 선택 가능\n\n * https://mui.com/material-ui/react-radio-button/\n   [https://mui.com/material-ui/react-radio-button/]\n\n\n\n\n\n11. 데이트피커(DatePicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/1AzjiOazm5BKNz9r48KRfr9C3ay8h_dVzdEHDP7_jkDhc36yz6uS7E6bBPQYQWRKtxy0weRHN-a5MZ2hSCIFEIDojRWhVJqtgXoWP9lby36A6Jnwgwq09ZlGBUq3jqnqpJ6NgF1_eWoqcvekAA?api=v2]\n\n * 사용자가 날짜 또는 날짜 범위를 선택할 수 있는 요소\n\n * https://mui.com/x/react-date-pickers/getting-started/\n   [https://mui.com/x/react-date-pickers/getting-started/]\n\n\n\n11-1 캘린더데이트피커(CalendarDatePicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/8100aadd-a690-4b21-8d22-b89e7b440ec5%23media-blob-url=true&id=03182083-8588-4ad9-b8ec-844b69deb5a5&contextId=37363&collection=?api=v2]\n\n * 사용자가 특정 년도, 월, 일자를 선택할 수 있는 요소\n\n\n\n11-2 캘린더몬쓰피커(CalendarMonthPicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220718-003354.png?api=v2]\n\n * 사용자가 특정 년도, 월을 선택할 수 있는 요소\n\n\n\n11-3 캘린더레인지피커(DateRangePicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Screen%20Shot%202022-05-17%20at%209.30.35%20AM.png?api=v2]\n\n * 사용자가 특정 년도, 월, 일 날짜의 범위를 선택할 수 있는 요소\n\n\n\n12. 입력폼 (Text Input Field)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/IPxzKEI4xAn5TpsmQEYiE5B-68YFc3qoDJP-QzX_5uUR6JBgdx40NHt2iufefN1OcJD1Jj87cZCH_1oQXPb6o5_p8ElFjRknOhCd1ORVB_qc9WjLyCmDqCychS_Oy7e_X0KG6-3djq4QkKbr2w?api=v2]\n\n * 사용자가 텍스트를 입력하고 편집할 수 있는 요소\n\n * https://mui.com/material-ui/react-text-field/\n   [https://mui.com/material-ui/react-text-field/]\n\n\n\n\n\n13. 지도\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Xuc1ND18Esap7ISHRjC6asCkCu86QYH9xAKzGmwPyawT8EKKwMxaCG6g1cl0qQnv2rqADKIR9g3x96VWsjDZVhSUNFFRM7Smq5v-V0nMkSyvsekOIBvksxOXOWasSTqZm1p1WRYkpGFD6HGbaw?api=v2]\n\n13-1 마커 (Marker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Zva1yeYS9iO8ikL_RzToNHScbMycnWuSxvkCHDRQVZgUP4Fc2MW7HbO3bSP3y4eRL3OBuIS0F-l1hmtgou-RZyQl6XnQFdftZqCaTV_fbP7ReySH0yZYjtvbDKrpNevpZzlDDTB50TpQwoww4w?api=v2]\n\n * 지도에 어떤 부분을 표시하기 위한 요소\n\n\n\n13-2 폴리라인 (Polyline)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/eZkDRKqdWW8-sPqQY8XzVHUZEzU00X-eCZu5ivVv1DqezCeXoGkqwR2XxYFsQmbWx1eAx4pNVs2bNqf-gmqb50Ht2w75ePoaFnIDnCK0-kVRTa7_BpLqV6eoEH7g6MEgC_BPsTlYs_uHs4cOUw?api=v2]\n\n * 지도의 여러 선분이 하나로 이어져 꺾인 선\n\n\n\n13-3 클러스터 (Cluster)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-073020.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-072802.png?api=v2]\n\n * 지도의 배율을 축소 시에, 마커의 개수를 표현하는 요소\n\n\n\n\n\n14. 메뉴 (Menu)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-073657.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20211108-050047.png?api=v2]\n\n * 주로 화면 내의 Header, Footer 또는 Side에 위치하여 특정한 페이지로 이동하는 네비게이션 요소\n\n * 사용자가 클릭 또는 마우스 호버했을 때, 선택할 수 있는 메뉴 목록이 나타나는 네비게이션 요소\n\n * https://mui.com/material-ui/react-menu/\n   [https://mui.com/material-ui/react-menu/]\n\n\n\n14-1 햄버거 메뉴 (Drawer menu)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/6eRiuGBjJSsDNRsF9YXqSTH2Ox_ZOucqV-NUHFHhqVm1b__o3wChyK7VDDYayRANvDNXwVtFtcbeMukHF1Ak8KrZutWrsF7qz4OE7kuo1ituGG8SRGP85r_wnOx0S0sWlsv-8IhfNkx6anO3FQ?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-020150.png?api=v2]\n\n\n\n14-2 케밥 메뉴 (Kebab Menu)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220517-030013.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-043046.png?api=v2]\n\n\n\n14-3 메뉴 항목\n\n * 메뉴의 각 항목\n\n\n\n\n\n15. 아이콘 (Icon)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/D0wKgdNHoVLNsmQKTRO_nPbdMMw6-rwtSP9_vL2UEo6m8PIyfAgo6_KsV2KoO7RgwWqlPKctzolAZgoXKno_8ZCeZu7hbAoOfxGg4AVeAPAhTTFOTXA588rTIb74ec1ee7ugEB2ILxTnu2vhbw?api=v2]\n\n * 사용자가 기능이나 명령을 직관적으로 이해하고 상호작용할 수 있는 요소\n\n * https://mui.com/material-ui/icons/ [https://mui.com/material-ui/icons/]\n\n * https://mui.com/material-ui/material-icons/\n   [https://mui.com/material-ui/material-icons/]\n\n\n\n\n\n16. 칩 (Chip)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20211103-065216.png?api=v2]\n\n * 입력, 속성 또는 작업을 나타내는 간결한 요소\n\n * 사용자는 주로 정보 입력, 선택, 콘텐츠 필터링 등 작업 가능\n\n * https://mui.com/material-ui/react-chip/\n   [https://mui.com/material-ui/react-chip/]\n\n\n\n\n\n17. 게이지 (Gauge)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20211206-100513.png?api=v2]\n\n * 복잡한 데이터를 차트나 게이지의 형태로 표현하여 사용자의 데이터 해석에 도움을 주는 요소\n\n\n\n\n\n18. 아코디언 (Accordion)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/hHidRKl9TgqvUyBE6eEqcL6q3yy9KQODoFAm5k83c07e4sKAiygf9qplE7gmhn7uwusvRI9mCP_mnvbly6QMDuEsaP7fFaxMvzM8Ys2rr_Fegsq2ex3CjqJ8I8Q96ty6iK6BrKztBiDbj1FXGA?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-021102.png?api=v2]\n\n * 관련 콘텐츠를 표시하거나 숨길 수 있는 요소\n\n * https://mui.com/material-ui/react-accordion/\n   [https://mui.com/material-ui/react-accordion/]\n\n\n\n\n\n19. 다이얼로그 (Dialog ≒레이어 팝업)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-044528.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/iQoi78HFQCL-26htoNoxBBlkVVeiKT-H5HSMkyyacq9MZkN3sUkjXf2ZnxU2rJrwpXgwQBsuix7E_WPHRa9_O_4yulQF64YH1x3gAWcB5-twVWYgvmQo2u8ShmAGL5uG4QITmACSvGAjXQVeqA?api=v2]\n\n * 사용자에게 작업 및 중요한 정보를 알리거나 결정을 요구하기 위한 대화상자\n\n * 주로 사용자의 상호작용을 요구하는 일종의 모달 창\n\n * https://mui.com/material-ui/react-dialog/\n   [https://mui.com/material-ui/react-dialog/]\n\n\n\n\n\n20. 팝오버 (Popover)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Screen%20Shot%202022-05-19%20at%2010.26.39%20AM.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220622-044122.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/L9lMXoDEfemJ0SdAWCwu9rsa3xn5yNDnD3r3836BZxWOchJKraOZqJdDCxrm53e0X0ad7zuW5DFEScb3GtSfvSoA8coUtaOvh_2C4eXkRS2WSlYVy8EhfyOjs55knWQYmCQOmFXftWiwKI66IQ?api=v2]\n\n * 사용자가 클릭 또는 마우스 호버 시, 해당 콘텐츠 위에 나타나는 일종의 모달 창\n\n * https://mui.com/material-ui/react-popover/\n   [https://mui.com/material-ui/react-popover/]\n\n\n\n\n\n21. 툴팁 (Tooltip)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-042531.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-042542.png?api=v2]\n\n * 사용자가 특정한 메뉴에 마우스 호버(hover)시 약 1~2초 뒤에 해당 요소에 대한 설명이 나타나는 요소\n\n * 마우스를 올려놓은 Hover 상태에서는 계속 유지\n\n * https://mui.com/material-ui/react-tooltip/\n   [https://mui.com/material-ui/react-tooltip/]\n\n\n\n\n\n22. 토스트\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-045843.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-045808.png?api=v2]\n\n * 사용자와 상호작용 시에 바뀐 상태나 상황을 전달하는 요소\n\n * 텍스트로만 이루어져 닫기 버튼이 없고 일정 시간이 지나면 자동으로 사라짐\n\n\n\n\n\n23. 스텝 (Step)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/8O2BOndhZ8MK6glHPXBGTOPmlfBQF7pDH2JHzgpm7duOt5anEpSPpfYW7Dl7oNfqmWIRsL4o1wST10Ls4lUuJ-im2yHQx27B0sIJeZnxQEbz9ZhKjlR6RM-vDqoFlr0Zgwabzi0BUOBdPt7xqg?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/tMwdX2ukwVJkU-bEuU7gigln7v-QkwAfIupW9yWTPx9hNvQJ-Cw8ikvurI6fVKuXcQG4GF-bpT94rOuzau94FVHmYx_nY6wcp8XluEFmjE6r2Nd0blRDOSbnXcna_LylQun2s-gSvwl2bINj5w?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/M-uBou6nHH2qsmlxbqqqNGZ0tD2zMBxV1vsSJ8hYkvhFSit_poG-5QkxwWEGI3gEg9jCoCAwCh-6nne2MGtXFA0vIOWFt2IqEtvaX2gqKWj-MXHk5_AV5tzXY5B1w-u3739DoAMuAbP5uiULJQ?api=v2]\n\n * 진행단계를 표시하는 요소\n\n * https://mui.com/components/steppers/ [https://mui.com/components/steppers/]\n\n\n\n\n\n24. 슬라이더(Slider)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-043800.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-043643.png?api=v2]\n\n * 사용자가 값을 시각적으로 인지하고 선택할 수 있는 요소\n\n * https://mui.com/material-ui/react-slider/\n   [https://mui.com/material-ui/react-slider/]\n\n\n\n\n\n25. 프로그래스 인디케이터 (Progress Indicator)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-051612.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-051510.png?api=v2]\n\n * 로딩, 양식 제출 또는 업데이트 저장 등 진행 중인 프로세스의 상태를 시각적으로 알리는 요소\n\n * https://mui.com/material-ui/react-progress/\n   [https://mui.com/material-ui/react-progress/]\n\n\n\n26. 페이지네이션 (Pagination)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220622-044803.png?api=v2]\n\n * 페이지 범위를 나타내는 요소로, 사용자가 특정 페이지를 선택하여 이동할 수 있음\n\n * https://mui.com/material-ui/react-pagination/\n   [https://mui.com/material-ui/react-pagination/]\n\n\n\n\n\n27. 파일 업로더 (File uploader)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220627-003814.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220627-004053.png?api=v2]\n\n * 파일을 전송하거나 콘텐츠를 제출할 수 있는 기능 요소\n\n * 파일 업로드 시스템 팝업을 생성하거나 파일 선택 영역에 드래그하여 업로드할 수 있음\n\n\n\n\n\n28. 탭 (Tab)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220718-004544.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220718-004906.png?api=v2]\n\n * 관련된 콘텐츠 그룹을 쉽게 탐색하고 전환할 수 있는 요소\n\n * https://mui.com/material-ui/react-tabs/\n   [https://mui.com/material-ui/react-tabs/]\n\n\n\n29. Transfer List\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20230621-042444.png?api=v2]\n\n * https://mui.com/material-ui/react-transfer-list/\n   [https://mui.com/material-ui/react-transfer-list/]\n\n\n\n30. 뱃지(notification 이라고도 함)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-024657.png?api=v2]\n\n\n\n31. 차트(chart)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231219-004152.png?api=v2]\n\n\n\n*참고:\nhttps://velog.io/@oneook/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-32%EA%B0%80%EC%A7%80%EC%9D%98-UI-%EC%9A%94%EC%86%8C-%EB%B2%88%EC%97%AD\n[https://velog.io/@oneook/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-32%EA%B0%80%EC%A7%80%EC%9D%98-UI-%EC%9A%94%EC%86%8C-%EB%B2%88%EC%97%AD]\n\nTo Do…\n\n\n\n\nUX 용어\n\n 1. 코치마크(Coach Mark): 서비스 앱 초기 실행 시, 인터렉션 가이드나 해당 서비스를 안내하는 화면. 레이어 팝업 형태로 특정 기능\n    혹은 콘텐츠에 대한 추가 안내용으로 사용\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-025057.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-025121.png?api=v2]\n\n 2. 워크쓰루(Walkthroughs): 매뉴얼, 초기세팅에 상세 도움말을 단계별로 제공해주는 페이지 뷰. 코치마크보다 더 많은 정보 제공.\n    이미 알고 있는 사용자를 위해 skip 버튼을 달기도 함\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-025315.png?api=v2]\n\n\n\n\n사후 조건\n\n 1. 이동\n\n * 뒤로 가기 했을 때, 해당 화면이 다시 보이는 경우\n\n * location.href\n\n\n\n2. 돌아가기\n\n * 뒤로 가기 했을 때, 해당 화면이 다시 보이지 않는 경우\n   \n   * ex) 폼 제출 후에 뒤로 가기 누르면 다시 폼이 보이면 안되는 경우\n\n * location.replace\n\n\n\n\n출력 데이터\n\n파란색은 변수\n\n회색으로 감싸면 다국어 적용/글자 그대로 표시\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306"
  },
  {
    "pageContent": "[F] 컴포넌트 명명 규칙\n * List\n * Dialog\n\n\nLIST\n\n * XXXList\n\n * XXXListItem\n\n<UserList>\n  <UserListItem />\n  <UserListItem />\n  <UserListItem />\n</UserList>\n\n\nDIALOG\n\n * Action 을 위한 dialog 는 동사로 시작, action 을 위한 dialog 가 아니면 형용사/부사로 시작할 수 있음.\n\n * Dialog 로 끝남.\n\n * Dialog 의 기능을 잘 설명하는 이름이어야 한다.\n\n * ex)\n   \n   * 수거 요청 dialog → RequestCollectionDialog\n   \n   * 개별서비스 등록 dialog → RegisterIndividualServiceDialog\n   \n   * 인보이스 만료 안내 dialog → PastDueDialog\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2008612944"
  },
  {
    "pageContent": "[F] 컴포넌트 기본 구조\n * Use function component\n   * why?\n * Do not export directly\n   * When using React.memo\n * Props 를 위한 타입 분리 금지\n * Function component 주석\n * Prop naming\n   * boolean prop\n   * Controlled/Uncontrolled value prop\n\n\nUSE FUNCTION COMPONENT\n\nFunction component 를 기본으로 한다.\n\nfunction ThisIsAFunctionComponent() {\n  return ...\n}\n\nclass ThisIsAClassComponent extends React.Component {\n  render() {\n    return ...\n  }\n}\n\n\nWHY?\n\n * this는 mutable이다. 언제든지 변할 수 있다.\n\n * class 컴포넌트에서 arrow method와 method는 다르다.\n   \n   * [ ES6 ] 클래스 내에서 arrow 함수와 메서드의 차이점\n     [https://medium.com/@han7096/%EB%A6%AC%EC%95%A1%ED%8A%B8-arrow-%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-3e81273b028a]\n\n * typescript에서는 function\n   \n   * https://velog.io/@velopert/create-typescript-react-component\n     [https://velog.io/@velopert/create-typescript-react-component]\n\n\nDO NOT EXPORT DIRECTLY\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n// Welcome.tsx\nexport function Welcome () { ... } \n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n// Welcome.tsx\nfunction Welcome () { ... }\n\nexport { Welcome }\n\n선언과 동시에 export 하면 다음과 같이 React devtool 에서 컴포넌트 이름이 Anonymous 로 나오기 때문에 디버깅이\n곤란하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/806355067/image-20200818-035155.png?api=v2]\n\n\nWHEN USING REACT.MEMO\n\nReact.memo 는 class comonent 에서 shouldComponentUpdate 와 비슷한 역할을 한다.\n\n * 불필요한 렌더링을 막아서 성능 최적화.\n\n * 성능이 문제가 되지 않으면 React.memo, shouldComponentUpdate 는 굳이 사용할 필요가 없다. (개발하기 귀찮기\n   때문)\n\n * React.memo 를 사용할 때는 다음과 같이 displayName 을 지정해줘야 원활한 디버깅이 가능하다.\n\nconst Welcome = React.memo(() => { ... })\n\nWelcome.displayName = 'Welcome'\n\nexport { Welcome }\n\n\nPROPS 를 위한 타입 분리 금지\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\ntype Props = {\n  id: number;\n  name: string;\n}\n\nfunction TestComponent(props: Props) {\n  // ...\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/806355067/image-20210208-062743.png?api=v2]\n\nVSCode 에서 props 의 내용을 인텔리센스로 확인할 수 없다. 그래서 prop 을 확인하기 위해 해당 컴포넌트 선언으로 이동해야 하는\n불편함이 있다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nfunction TestComponent(props: {\n  id: number;\n  name: string;\n}) {\n  // ...\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/806355067/image-20210208-062829.png?api=v2]\n\n컴포넌트 선언으로 이동하지 않아도 props 내용 확인 가능.\n\n\nFUNCTION COMPONENT 주석\n\nfunction TestComponent() {\n  // prop destruction\n\n  // lib hooks\n\n  // state, ref, querystring hooks\n\n  // form hooks\n\n  // query hooks\n\n  // calculated values\n  \n  // effects\n\n  // handlers\n  \n  return (\n    <...\n  )\n}\n\n위와 같이 주석을 달고 각 주석 아래에 hook 을 위치 시킨다. 해당 항목이 없더라도(예를 들어 prop이 없더라도) 주석은 그대로 유지한다.\n그래야 코드에 통일성이 생긴다.\n\n\nPROP NAMING\n\n\nBOOLEAN PROP\n\n기본 값이 false인것을 전제로 네이밍한다.\n이름을 보고 기본 값이 무엇인지 추측 할 수 있으며, 단축 표기법을 이용해 더 자연스러운 문법을 만들 수 있다.\n\n단축 표기법이 어떻게 동작하는지 모른다면?\nhttps://stackblitz.com/edit/react-ts-r9qkm4?file=index.tsx\n[https://stackblitz.com/edit/react-ts-r9qkm4?file=index.tsx]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]활성화 상태가\n기본인 입력 컴포넌트\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nBad: 비활성화 시키기 위해서는 아래와 같이 해야 한다.\n\n<Input enabled={false} />\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nGood\n\n<Input disabled /> \n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]열림 상태가\n기본인 모달 컴포넌트\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nBad: 닫기 위해서는 아래와 같이 해야 한다.\n\n<Modal open={false} />\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nGood\n\n<Modal close /> \n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]닫힘 상태가\n기본인 모달 컴포넌트\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nBad: 열기 위해서는 아래와 같이 해야 한다.\n\n<Modal close={false} />\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nGood\n\n<Modal open /> \n\n참고: https://mui.com/guides/api/#prop-naming\n[https://mui.com/guides/api/#prop-naming]\n\n\n\n\nCONTROLLED/UNCONTROLLED VALUE PROP\n\n * Controlled component: value\n\n * Uncontrolled component: initialValue\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/806355067"
  },
  {
    "pageContent": "[F] Props, State\n * Passing ID vs Entity as props\n * ?\n\n\nPASSING ID VS ENTITY AS PROPS\n\nhttps://medium.com/weekly-webtips/passing-id-vs-entity-as-props-in-react-a8f54834a019\n[https://medium.com/weekly-webtips/passing-id-vs-entity-as-props-in-react-a8f54834a019]\n\nhttps://stackoverflow.com/questions/25701168/at-what-nesting-level-should-components-read-entities-from-stores-in-flux\n[https://stackoverflow.com/questions/25701168/at-what-nesting-level-should-components-read-entities-from-stores-in-flux]\n\nDISCLAIMER\n\n아직 우리는 어떻게 하는 게 좋은지 잘 모르겠다. 일단은 갓 Dan 님의 말씀을 따라 가능하면 entity 를 prop 으로 넘기도록 한다.\n\n\n?\n\n * 요구사항에 따라 route 상태(querystring, fragment\n   [https://developer.mozilla.org/ko/docs/Web/API/URL/hash] 등)에 의존하여 관리하는게 적절한지\n   검토한다.\n   \n   * ex) 검색 화면 개발\n     \n     * 요구사항: 새로고침 해도 검색 화면이 그대로 유지되어야 한다.\n     \n     * (tick)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n       \n       const qs = useQueryString();\n       \n       const searchKeyword = qs.get('q');\n     \n     * (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n       \n       const [searchKeyword] = useState('');\n     \n     * 잘못 구현된 사례: 뒤로가기 했을때 쿼리스트링이랑 화면이랑 안맞음\n       쿼리스트링을 상태 저장소로 보고 SSOT\n       [https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%A7%84%EC%8B%A4_%EA%B3%B5%EA%B8%89%EC%9B%90]로서\n       사용하면 이런 일이 발생할 수 없다.\n       \n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2288058516/2021-12-23%2011-22-08.2021-12-23%2011_22_52.gif?api=v2]\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2288058516"
  },
  {
    "pageContent": "[F] Handling Events\n * 이벤트 처리 함수\n   * Prefix for Event handling\n     * on\n     * handle\n       * Bad\n       * Good\n   * Event Handler Naming in React\n * Bubbling and Propagation\n\n\n이벤트 처리 함수\n\n터치, 클릭과 같은 이벤트를 처리하기 위한 함수를 이벤트 처리 함수라 한다. 이벤트 처리 함수는 모든 종류의 컴포넌트에 존재할 수 있다.\n\n컴포넌트에서 발생하는 이벤트를 처리하는 함수가 컴포넌트 내부에 선언 된 경우 prefix = handle을 붙인다.\n컴포넌트에서 발생하는 이벤트를 처리하기 위한 함수를 외부에서 주입 받는 경우 prefix = on을 붙인다.\n\n위와 같이 하면 스크린 컴포넌트에는 대부분 handle…이 정의 되고 디자인 컴포넌트에는 대부분 on…이 정의될 것으로 기대된다.\n\npostfix를 통해 이벤트를 쉽게 식별할 수 있도록 한다.\n\n * handleNameChange\n\n * handleNextButtonClick\n\nex)\n\n/**\n * Page.jsx\n */\nclass Page {\n  /**\n   * 이름 변경 처리\n   * prefix 로 부터 이름이 변경된 경우 이 컴포넌트 내에서 관련 작업이 이루어짐을 유추할 수 있다.\n   * postfix 로 부터 input 과 연결된 핸들러임을 유추할 수 있다.\n   */\n  handleNameChange(name) {\n    // do something ...\n  }\n  \n  handleNextButtonClick() {\n    // do something ...\n  }\n    \n  render() {\n    return (\n      <TextInput label=\"name\" onChange={handleNameChange} />\n      <Button title=\"Next\" onClick={handleNextButtonClick} />\n    )\n  }\n}\n\n/**\n * TextInput.jsx\n * @param onChange prefix 로 부터 이벤트 핸들러를 prop 으로 주입 받는 것을 유추할 수 있다.\n */\nconst TextInput = ({ label, onChange }) => {\n  <>\n    <p>{label}</p>\n    <input onChange={onChange} />\n  </>\n}\n\n\n\nhttps://dmitripavlutin.com/dont-overuse-react-usecallback/\n[https://dmitripavlutin.com/dont-overuse-react-usecallback/]\n\n\nPREFIX FOR EVENT HANDLING\n\n\nON\n\n컴포넌트가 내부의 이벤트를 외부로 전달하기 위해 Props를 통해 주입받는 함수에 붙는 접두사다.\n\n보통 onChange, onBlur 같은 형식의 이름을 가진 함수를 Props를 통해 주입받으며, on 뒤에 컴포넌트 내부에서 발생하는 이벤트의\n이름을 적는게 일반적이다.\n\n\nHANDLE\n\n컴포넌트 내부에서 발생하는 이벤트를 핸들링 하기 위해 만들어진 함수에 붙는 접두어다.\n\n단, 이 접두어가 붙은 함수에서는 컴포넌트의 상태를 변경하는 기능을 포함할 수 있지만 반대로 컴포넌트의 상태만 변경하는 역할의 함수에\nhandle을 붙이는건 허용되지 않는다. (아래 예시 참조)\n\nBAD (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n// bad\nconst [value, handleChange] = useState('');\n\nreturn (\n  <input onChange={(e) => handleChange(e.target.value)} />\n);\n\nGOOD (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n// good\nconst [value, setValue] = useState('');\nconst handleChange = (value) => {\n  setValue(value);\n};\n\nreturn (\n  <input onChange={(e) => handleChange(e.target.value)} />\n);\n\n\nEVENT HANDLER NAMING IN REACT\n\nhandle + 명사 + 동사\n\nex) handleNameChange\n\n참고\nhttps://jaketrent.com/post/naming-event-handlers-react#for-props-more-complicated-naming\n[https://jaketrent.com/post/naming-event-handlers-react#for-props-more-complicated-naming]\n\n\nBUBBLING AND PROPAGATION\n\nhttps://web.dev/eventing-deepdive/ [https://web.dev/eventing-deepdive/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/372638546"
  },
  {
    "pageContent": "[H][F] Table, Section, Cell\n\nTable, Cell, Section 관련 컨벤션은\nhttps://developer.apple.com/documentation/uikit/uitableview\n[https://developer.apple.com/documentation/uikit/uitableview] 를 참고 했다\n\n\n\n * I. Table\n * II. Section\n * III. Cell\n * IV. Summary\n\n\nI. TABLE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083325.png?api=v2]\n\n위와 같은 형태의 view 는 table 이라 한다.\n\n비슷한 성격의 section 끼리 그룹화를 하기 위한 view 를 table 이라 한다.\n\nhttps://github.com/Ecube-Labs/haulla-mobile/pull/543#discussion_r380047885\n[https://github.com/Ecube-Labs/haulla-mobile/pull/543#discussion_r380047885]\n\n\nII. SECTION\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083459.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083440.png?api=v2]\n\n비슷한 성격의 cell 끼리 그룹화를 하기 위한 view 를 section 이라 한다.\n\n> You can configure a table to display a single long list of rows, or you can\n> group related rows into sections to make navigating the content easier.\n\n\n\n\nIII. CELL\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083415.png?api=v2]\n\ntable 에서 하나의 정보를 전달하는 view 를 cell 이라 한다.\n\n> Each row in the table contains one piece of your app’s content.\n\n애플 개발자 문서 [https://developer.apple.com/documentation/uikit/uitableview]에서 설명은\nrow 라고 하고 있지만 이와 매핑된 컴포넌트는 UITableViewCell\n[https://developer.apple.com/documentation/uikit/uitableviewcell]이기 때문에 우리도 cell\n로 명명한다..\n\n\n\n\nIV. SUMMARY\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083659.png?api=v2]\n\n\n\n * section\n   \n   * Collection Request Number, Status, Requested on, Collection Scheduled on\n   \n   * Generator, Hauler\n   \n   * Fill-level when requested, Special request\n\n * cell\n   \n   * Collection Request Number: 275\n   \n   * Status: En Route\n   \n   * Requested on: August 06, 2019\n   \n   * Collection Scheduled on: August 06, 2019\n   \n   * Generator: 17\n   \n   * Hauler: 209\n   \n   * Fill-level when requested: 5%\n   \n   * Special request: sadfs\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/372638296"
  },
  {
    "pageContent": "[F] Lists and Keys\n * 개요\n * 정적인 리스트\n * 동적인 리스트\n\n\n개요\n\nReact는 DOM 트리를 업데이트할 때 key 속성을 활용한 diff 알고리즘을\n[https://reactjs.org/docs/reconciliation.html#recursing-on-children] 통해 렌더링을\n최적화한다.\n\n이말인즉슨 key 활용이 적절치 못할경우 성능 이슈가 발생할 수 있다.이상하게 동작할 수 있다.\n\n자세한 내용은 리스트와 키 문서\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/248381637/T+React]를 참고한다.\n\n\n정적인 리스트\n\nkey 로 사용할 유니크 값이 있으면 사용한다. 없을 경우 배열 index 를 키로 사용한다.\n\n{itmes.map((item, index) => (\n  <Hello\n    key={`${index.toString()}`} // lint에서는 index.toString()도 에러로 판단하기 때문에 template literal로 감싸주면 괜찮다.\n    ...\n  />\n))}\n\n\n동적인 리스트\n\n> 아이템의 순서가 바뀔 수 있는 경우 키에 인덱스를 사용하지 않는 게 좋습니다. 이로 인해 성능이 저하되거나 컴포넌트의 state에 따른\n> 문제가 발생할 수 있습니다. Robin Pokorny가 작성한 아티클인 in-depth explanation on the negative\n> impacts of using an index as a key\n> [https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318] 를\n> 참고하시길 바랍니다. 만약 리스트 아이템에 명시적으로 키를 지정하지 않으면 React는 기본적으로 인덱스를 키로써 사용합니다.\n> \n> https://reactjs-kr.firebaseapp.com/docs/lists-and-keys.html\n> [https://reactjs-kr.firebaseapp.com/docs/lists-and-keys.html]\n\n사용하지 않는 게 좋습니다가 아니고 사용하면 안 됨. 제대로 동작 안 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/349143994/listandkeys.gif?api=v2]\n\n\n\n무조건 아이템의 id를 키로 사용한다. id 가 없으면 임시로 사용할 id 를 만들어야 한다.\n\n{itmes.map((item, index) => (\n  <Hello\n    key={item.id}\n    ...\n  />\n))}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/349143994"
  },
  {
    "pageContent": "[F] Forms\n * I. Form ?\n * II. Rules of Form Development\n * III. Exception Case\n   * 1. ( header위에 submit이 있을 경우)\n\n\n\n\nI. FORM ?\n\n * input 의 집합을 form 이라 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/374341829/image-20200218-084347.png?api=v2]\n\n위의 컴포넌트는 다음과 같이 퍼블리싱 할 수 있다.\n\n// screen.tsx\nclass Screen extends React.Component {\n  handleSubmit = ({ firstName, lastName}) => {\n    // ...\n  }\n  \n  render() {\n    return (\n      <>\n        <Header />\n        <NameForm onSubmit={this.handleSubmit} />\n      </>\n    )\n  }\n}\n\n// header.tsx\n...\n\n// name-form.tsx\n...\n\n\n\n\n\n\nII. RULES OF FORM DEVELOPMENT\n\n * form 은 필요하다면 initial prop 을 받을 수 있다.\n\n * form 은 form 이 완성되었을 때 실행 되는 callback 을 받아야 한다.\n   \n   * callback 의 이름은 form 의 역할에 어울리는 이름을 짓도록 한다.\n     \n     * onSubmit, onConfirm, …\n   \n   * callback 은 form 이 완성되는 시점에 사용자가 입력한 모든 값을 파라미터로 해서 실행 되어야 한다.\n     \n     * 위의 예시에서 onSubmit 은 form 에서 입력 되는 모든 값 (firstName, lastName) 을 한번에 파라미터로\n       받는다.\n\n * form 의 상태는 parent 로 노출하지 않는다.\n   \n   * 위의 예시에서 NEXT를 누르기 전까지 사용자가 입력한 firstName, lastName 은 form 의 state 로 관리하고 이를\n     parent 의 state 와 동기화 시키지 않는다.\n\n * form 의 validation 은 form 이 담당한다. (validation 을 위한 정보를 parent 로 부터 주입 받지 않는다)\n\n\n\n\nIII. EXCEPTION CASE\n\n\n1. ( HEADER위에 SUBMIT이 있을 경우)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/374341829/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-02-19%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.59.32.png?api=v2]\n\n\n\n * forwardRef, useImperativeHandle 를 이용하도록 한다.\n   \n   * ref를 이용해서 submit을 호출할 수 있다.\n   \n   * useImperativeHandle를 이용해서 특정 메소드를 노출시킬 수 있다.\n\n * Class 컴포넌트\n   \n   * \n       constructor(props) {\n         super(props);\n         this.formRef = React.createRef();\n       }\n       \n         return(\n           <UpdateGeneratorUserInformationForm \n           ref={(ref) => {\n                 ref && (this.formRef = ref);\n               }}\n           />\n         )\n     \n\n * Function 컴포넌트\n   \n   *     const formRef = useRef<any>(null);\n         ...\n         ...\n         return(\n           <UpdateGeneratorUserInformationForm ref={formRef}/>\n         )\n     \n     \n     \n\n예 )\n\nexport const Component: React.FC<Props> = forwardRef((props, ref) => {\n...\n...\n\n  const handleSubmit = () => {\n    props.onSubmit(formModel);\n  };\n  \n  useImperativeHandle(ref, () => ({\n    submit: handleSubmit,\n  }));\n  \n...\n...\n\n}\n\n// screen에서 this.formRef.submit(); 을 호출 해주면 된다.\n\n        <CompanyDetailUpdateForm\n          ref={(ref) => {\n            ref && (this.formRef = ref);\n          }}\n          initialHaulerServiceAccount={haulerServiceAccount!}\n          onChangeFormModel={this.handleFormModelChange}\n          onChangeValid={this.handleValidChange}\n          onSubmit={this.handleFormModelSubmit}\n        />\n            \n\n\n\n * 주의)redux랑 사용시 forwardRef 옵션을 줘야 한다.\n\n * export const CompanyDetailUpdateForm = connect(\n     mapStateToProps,\n     mapDispatchToProps,\n     null,\n     { forwardRef: true },\n   )(Component);\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374341829"
  },
  {
    "pageContent": "[H][F] Segmented Component\n * I. Segmented Component?\n * 참고\n\n\nI. SEGMENTED COMPONENT?\n\n * 아래와 같은 형태의 컴포넌트를 XXXSegment 로 네이밍 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/381256598/segmented-control-simulator.png?api=v2]\n\n다음과 같이 퍼블리싱 할 수 있다.\n\nScreen.tsx\n<Screen>\n    ...\n    switch (tab) {\n      case 'A':\n        return <ASegment/>\n      case 'B':\n        return <BSegment/>\n    }\n    ...\n<Screen> \n\nASegment.tsx\n<View>\n  <Text>A</Text>\n</View>\n\nBSegment.tsx\n<View>\n  <Text>B</Text>\n</View>\n\n\n\n\n참고\n\n2020-01-08 회의록 (haulla-mobile, tab, segment, 번역 키 요청)\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/290816095/2020-01-08+haulla-mobile+tab+segment]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/381256598"
  },
  {
    "pageContent": "[F] RTL 지원 컴포넌트 개발\n * RTL 스타일 구현\n   * 프로젝트 환경 구성\n   * 스타일링 가이드\n   * 스토리북 가이드\n * RTL Props\n\n\n\n\nRTL 스타일 구현\n\n\n프로젝트 환경 구성\n\nhttps://mui.com/guides/right-to-left/ [https://mui.com/guides/right-to-left/]\n\n예시: https://stackblitz.com/edit/mui5-single-theme-provider-rtl\n[https://stackblitz.com/edit/mui5-single-theme-provider-rtl]\n\n * rtl plugin을 theme의 direction 값에 따라 사용하도록 한다.\n\n * ThemeProvider에서 direction 제어\n\n * html 태그에 dir 값 지정\n\n\n스타일링 가이드\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2033254606/OJT+FE+Publishing#RTL%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C%EB%8B%A4.\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2033254606/OJT+FE+Publishing#RTL%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C%EB%8B%A4.]\n\n\n스토리북 가이드\n\n[F][스토리북] 스토리 작성 규칙\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964/F]\n\n\n\n\nRTL PROPS\n\n별도의 props(ex. direction)를 구현하지 않고 Provider에 의해 알아서 반전될 수 있도록 구현해야 한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1640235032"
  },
  {
    "pageContent": "[H][F] 퍼블리싱\n\nMATERIAL-UI [https://material-ui.com/] 를 기반으로 한다.\n\n * 콜론\n   * 금액 표시\n   * A11y best practices\n   * Semantic Tags\n\n\n\n\n콜론\n\nMP-1305 [https://ecubelabs.atlassian.net/browse/MP-1305] - 이슈 세부사항 가져오는 중... 상태\n\n콜론은 앞단어와 띄어쓰기하지 않는다.\n\n\n\nStatus : // bad\nStatus:  // good\n\n\n\n\n\n\n금액 표시\n\n * 띄어쓰기(화이트스페이스)가 있어야 한다.\n\n\n\n$10 // bad\n$ 10  // good\n\n\n\n\nA11Y BEST PRACTICES\n\n * Navigation Menu Button\n   [https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html]\n\n\n\n\nSEMANTIC TAGS\n\n아래 태그는 그 자체로 역할/의미를 가지는 태그다.\n\n * a\n   \n   * role=link\n\n * ul / ol\n   \n   * role=list\n\n * li\n   \n   * role=listitem\n\n * button\n   \n   * role=button\n\n * …\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/233340980"
  },
  {
    "pageContent": "[F] MUI\n * Components\n   * Inputs\n     * Button\n   * Data Display\n     * Typography\n * System\n   * Spacing\n\n\nCOMPONENTS\n\n\nINPUTS\n\n\nBUTTON\n\nimport { Button } from '@ceed/core';\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/575635551/image-20200515-010447.png?api=v2]\n\n제플린에서 버튼 컴포넌트는 X/Y/Z/W 4 단계로 구성된다.\n\n * X\n   \n   * 컴포넌트 이름\n   \n   * Button XXX이면 <Button />을 사용하면 된다.\n\n * Y\n   \n   * 크기 (Slim | Default | Large)\n   \n   * size prop 을 사용하면 된다.\n   \n   * <Button size=\"small\" />  // for Slim\n     <Button size=\"medium\" /> // for Default\n     <Button size=\"large\" />  // for Large\n\n * Z\n   \n   * 형태 (Text | Outlined | Contained)\n   \n   * variant prop 을 사용하면 된다.\n   \n   * <Button variant=\"text\" />      // for Text\n     <Button variant=\"outlined\" />  // for Outlined\n     <Button variant=\"contained\" /> // for Contained\n\n * W\n   \n   * 색깔 (inherit | primary | secondary | default | grey)\n   \n   * color prop 을 사용하면 된다.\n   \n   * <Button color=\"primary\" /> // for Primary\n     <Button color=\"grey\" />    // for Grey\n     \n     \n\n * 이 규칙을 따라 개발하면 위의 제플린 예시는 다음과 같이 개발 되어야 한다.\n   \n   * <Button size=\"small\" variant=\"text\" color=\"grey\" />\n\n\nDATA DISPLAY\n\n\nTYPOGRAPHY\n\nTypeface 를 적용하고 싶을 때 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/575635551/image-20200518-014223.png?api=v2]\n\n제플린에서 Typeface는 X/Y/Z/W 4 단계로 구성된다.\n\n * X\n   \n   * 용도\n\n * Y\n   \n   * 형태 (inherit | h1 | h2 | h3 | h4 | h5 | h6 | subtitle1 | subtitle2 | body1 |\n     body2 | caption | button | overline)\n   \n   * variant prop 을 사용하면 된다.\n   \n   * <Typography variant=\"h1\">Apple</Typography>  \n     <Typography variant=\"subtitle1\">Banana</Typography> \n     <Typography variant=\"caption\">Carrot</Typography>  \n\n * Z\n   \n   * 색깔 (initial |inherit | primary | secondary | textPrimary | textSecondary |\n     error)\n   \n   * color prop 을 사용하면 된다.\n   \n   * <Typography color=\"primary\">Apple</Typography>  \n     <Typography color=\"textPrimary\">Banana</Typography> \n     <Typography color=\"error\">Carrot</Typography>  \n\n * W\n   \n   * 정렬 (inherit | left | center | right | justify)\n   \n   * align prop 을 사용하면 된다.\n   \n   * <Typography align=\"left\">Apple</Typography> for Left Aligned \n     <Typography align=\"center\">Banana</Typography> for Centered\n     <Typography align=\"right\">Carrot</Typography> for Right Aligned \n     \n     \n\n * 이 규칙을 따라 개발하면 위의 제플린 예시는 다음과 같이 개발 되어야 한다.\n   \n   * <Typography variant=\"subtitle2\" color=\"primary\" color=\"left\">Hi, Edgar</Typography>  \n\n\nSYSTEM\n\n\nSPACING\n\n우리의 scaling factor = 8px. (Material-UI 기본값)\n\npadding, margin 은 모두 scaling factor 를 기반으로 계산한다.\n\n// (X)\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      paddingLeft: 24px\n    }\n  })\n)\n\n// (O)\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      paddingLeft: theme.spacing(3)\n    }\n  })\n)\n\n * width, height 의 크기는 spacing 과 관계가 없으므로 적용하지 않는다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/575635551"
  },
  {
    "pageContent": "[F] CEEDUI\n * [F][CEEDUI] Performance issues\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810937441/F+CEEDUI+Performance+issues]\n * [F][CEEDUI] Map\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810347530/F+CEEDUI+Map]\n * [F][CEEDUI] MapOverlayView\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811035693/F+CEEDUI+MapOverlayView]\n * [F][CEEDUI] NativeMarker\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265039/F+CEEDUI+NativeMarker]\n * [F][CEEDUI] MapClusters\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265057/F+CEEDUI+MapClusters]\n * [F][CEEDUI] MapSearchBox\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811134023/F+CEEDUI+MapSearchBox]\n * [F][CEEDUI] Polyline & HeatmapLayer\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811199594/F+CEEDUI+Polyline+HeatmapLayer]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810511379"
  },
  {
    "pageContent": "[F] DataGrid\n * Overview\n * DataGrid Props\n   * columns/rows는 반드시 memoized 되어야한다.\n     * 예시\n   * checkbox column의 field는 selection 이다.\n * GridColDef\n   * 예시코드)\n * Height\n * With pagination\n * In BackOffice\n   * Props\n   * 예시코드)\n * In Dash-Board\n   * Props\n   * 예시코드)\n\n\nOVERVIEW\n\n@ceed/ui/DataGrid 는 @mui/x-data-grid [https://mui.com/x/react-data-grid/] 를 대체하는\n것을 목표로 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20221222-024848.png?api=v2]\n\n우리도 좋은 개발자가 많은데 1명당 $444.00 나 주고 저걸 구입할 필요가 없기 때문이다.\n\n@ceed/ui/DataGrid 는 다음의 이유로 가능하면 @mui/x-data-grid\n[https://mui.com/x/react-data-grid/] 와 같은 인터페이스, 기능을 갖도록 유지보수 해야 한다.\n\n 1. 인터페이스, 기능을 고민하는데 걸리는 시간 절약\n    \n    1. MIT license [https://mui.com/x/introduction/licensing/] 이기 때문에 문제 없음\n\n 2. Flex 할 수 있는 날이 오면 @mui/x-data-grid-premium\n    [https://mui.com/x/api/data-grid/data-grid-premium/] 으로 넘어가고 product 개발에 집중\n\n\nDATAGRID PROPS\n\n@ceed/ui/DataGrid 의 props.\n\nprop\n\ntype\n\n설명\n\n제약사항\n\nrows\n\nRowModel[]\n\n\n\n\n\ncolumns\n\nGridColDef<RowModel>\n\n\n\n * Must be memoized\n\ngetRowId?\n\n(row: RowModel) => string\n\nRowModel의 고유값을 얻는 함수.\n\n * Must be memoized\n\n * default (row) => row.id\n\nheaderHeight?\n\nnumber\n\n\n\n * default 56\n\nrowHeight?\n\nnumber\n\n\n\n * default 52\n\ncheckboxSelection?\n\nboolean\n\ntrue 일 경우 1열에 체크박스가 표시된다.\n\n * default false\n\ndisableSelectionOnClick?\n\nboolean\n\ntrue 일 경우 row 클릭 시 체크가 되지 않는다.\n\n * default false\n\ninitialState?\n\n{\n  sorting?: {\n    sortModel: {\n      field: Keyof RowModel;\n      sort: \"desc\" | \"asc\" | null;\n    }[];\n  };\n  columns?: {\n    columnVisibilityModel: Record<string, boolean>;\n  };\n}\n\nDataGrid의 최초 상태를 정할 때 사용된다.\n\n\n\n\n\nonRowClick?\n\n(params: { rowId: string; row: RowModel }, event: React.MouseEvent) => void\n\n\n\n\n\nselectionModel?\n\n(keyof ID)[] // ID === string\n\nonSelectionModelChange와 함께 주입되면 controlled component로 사용할 수 있다.\n\n\n\nonSelectionModelChange?\n\n(selectionModel: ID[]) => void\n\nselectionModel과 함께 주입되면 controlled component로 사용할 수 있다.\n\n\n\ncolumnVisibilityModel?\n\nRecord<string, boolean>\n\n * column을 보이거나 숨길 때 사용한다.\n\n * false 일 때만 숨겨진다.\n\n\n\nonColumnVisibilityModelChange?\n\n(columnVisibilityModel: Record<string, boolean>): void\n\n * GridToolbar 등을 통해서 columnVisibilityModel 가 바뀌었을 때 변경된 값을 받을 콜백 함수.\n\n * columnVisibilityModel과 함께 주입되면 controlled component로 사용할 수 있다.\n\n\n\nloading?\n\nboolean\n\ntrue 일 경우 LoadingOverlay가 나타난다.\n\n\n\nComponents?\n\nRecord<Key, ComponentType>\n\ndefault로 설정된 컴포넌트를 override 할 때 주입한다.\n\nKey: Checkbox, ColumnSortedDescendingIcon, ColumnSortedAscendingIcon,\nColumnUnsortedIcon, ColumnResizeIcon, NoRowsOverlay, LoadingOverlay\n\n * Must be memoized\n\n * deprecated (use slots instead)\n\nslots?\n\nRecord<Key, ComponentType>\n\nKey: baseCheckbox, columnSortedDescendingIcon, columnSortedAscendingIcon,\ncolumnUnsortedIcon, columnResizeIcon, noRowsOverlay, loadingOverlay, toolbar\n\n * DataGrid 내에서 사용되는 컴포넌트를 Override하거나 주입할 때 사용한다.\n\n\n\nlocaleText?\n\n{\n  /**\n   * @default 'Columns'\n   */\n  toolbarColumns: React.ReactNode;\n  /**\n   * @default 'Select columns'\n   */\n  toolbarColumnsLabel: string;\n  /**\n   * @default 'Show/Hide All'\n   */\n  columnsManagementShowHideAllText: string;\n  /**\n   * @default 'Find column'\n   */\n  columnsManagementSearchTitle: string;\n}\n\n * DataGrid 내에서 표시될 텍스트들을 주입한다.\n\n * toolbarColumns: GridToolbarColumnsButton에 보일 텍스트\n\n * toolbarColumnsLabel: GridToolbarColumnsButton에 들어갈 aria-label\n\n * columnsManagementShowHideAllText: GridToolbarColumnsMenu에서 전체 토글에 들어갈 텍스트\n\n * columnsManagementSearchTitle: GridToolbarColumnsMenu에서 컬럼 검색에 들어가는\n   placeholder\n\n\n\n\nCOLUMNS/ROWS는 반드시 MEMOIZED 되어야한다.\n\nDataGrid의 container size에 따라 column width를 계산하는 로직이 columns를 dependency 로 두고 있기\n때문에 memoized되어 있지 않으면 리렌더링 될 때마다 column width가 다시 계산되어 리사이징한 width가 초기화 된다.\n\nrows의 경우 column width와는 관계되지 않지만 다른 데이터를 조회할 시 정렬이 풀리거나 하는 경우가 있어 memoization\n해야한다. (그 외 데이터가 많을 경우 성능상 이점도 있다.)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/%20withoutmemocolumns.gif?api=v2]\n\n이 외 props도 memoized 되어있거나 컴포넌트 밖에서 선언하여 렌더링마다 다른 값을 가지지 않게 하는 것이 좋다.\n\n예시\n\nhttps://github.com/Ecube-Labs/haulla-hauler-front/pull/512\n[https://github.com/Ecube-Labs/haulla-hauler-front/pull/512]\n\nconst dataGridColumns = useMemo<GridColDef<typeof rows[number]>[]>(() => {\n  return [\n    {\n      field: 'id',\n      headerName: 'Id',\n      minWidth: 40,\n      maxWidth: 40,\n      resizable: false,\n    },\n    {\n      field: 'address',\n      headerName: 'Address',\n      width: 150,\n      resizable: false,\n    },\n    ...\n  ];\n}, []);\n\n\nCHECKBOX COLUMN의 FIELD는 SELECTION 이다.\n\ncheckboxSelection === true일 경우 columns에 GRID_CHECKBOX_SELECTION_COL_DEF이 포함되는데 이\ncolumn의 field가 \"selection\"이기 때문에 주입할 columns의 field가 selection 이라면 다른 값으로\n변경해야한다.\n\n\nGRIDCOLDEF\n\nprop\n\ntype\n\n설명\n\n제약사항\n\nfield\n\nkeyof RowModel\n\nColumn identifier\n\nnested한 값의 경우 dot notation으로 사용하면 된다.\n\nex) field: 'compactorSetting.ledSetting'\n\n\n\nheaderName?\n\nstring\n\n없을 경우 field가 표시된다.\n\n\n\ndescription?\n\nstring\n\naria-label, tooltip에 영향을 줄 수 있다.\n\n\n\nwidth?\n\nnumber\n\nflex와 함께 동작하지 않는다.\n\ndefault 100\n\nminWidth?\n\nnumber\n\n\n\ndefault 50\n\nmaxWidth?\n\nnumber\n\n\n\ndefault Infinity\n\nflex?\n\nnumber\n\nwidth와 함께 동작하지 않는다.\n\n\n\nresizable?\n\nboolean\n\n\n\ndefault true\n\nsortable?\n\nboolean\n\n\n\ndefault true\n\nrenderCell?\n\n(parmas: {\n  id: string;\n  value: V;\n  row: RowModel;\n}) => React.ReactElement\n\n스타일을 적용하거나 valueFormatter로는 표현이 불가능한 요소를 렌더링 하기 위해 사용한다.\n\nTODO: ReactNode도 가능하다. null도 리턴가능함\n\ndefault\n\n(props) => <EllipsisCell>{props.value}</EllipsisCell>\n\nrenderHeader?\n\nTODO\n\ncolumn header에 렌더링 될 Element\n\n\n\nvalueFormatter?\n\n(parmas: {\n  id: string;\n  value: V;\n  row: RowModel;\n}) => any\n\n보여지는 값을 가공하기 위해 사용한다.\nex) 0.01 -> 1% , 123.22 -> $ 123.22\n\nTODO\n\nsortComparator?\n\n(\n  v1: V,\n  v2: V,\n  cellParams1: GridSortCellParams<V>,\n  cellParams2: GridSortCellParams<V>,\n) => number\n\n정렬 기준을 설정할 때 사용한다. (Boolean일 경우 정상적으로 정렬되지 않기 때문에 sortComparator를 통해 정렬해줘야 한다.)\n\n\n\n\n예시코드)\n\nfield명을 지정하지 않고 모델의 속성 값을 사용할 수 있다.\n\n{\n  field:\"anything\",\n  headerName: \"ID\",\n  renderCell: ({row, value}) => row.id, // 대신 value는 undefined\n}\n\n\n\n\nHEIGHT\n\nDataGrid의 경우 가상돔에서 랜더링 하기 때문에 table body에 height가 없으면 데이터가 랜더링 되지 않을 수 있다. 이런경우\nDataGrid에 minHeight를 주면 해결된다.\n\n<DataGrid\n  ...\n  css={[dataGridStyle1, { minHeight: '144px' }]} // minHeight로 조절한다.\n/>\n\n\nWITH PAGINATION\n\n페이지네이션을 적용해서 사용하는 경우 컬럼의 정렬 옵션을 끄고 사용하는것을 기본으로 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/2024-02-15%20at%2011.22.59@2x.png?api=v2]\n\n\nIN BACKOFFICE\n\n * 백오피스에서는 @ceed/ui/DataGrid에서 페이지네이션 되어있는 경우 모든 데이터 row를 선택하는 기능이 추가되어있다.\n   \n   * 페이지네이션이 되어있지 않다면 필요없는 기능이니 적용하지 않는다. (페이지네이션이 되어있지 않다면 그냥 바로 전체선택을 하면 되기\n     때문)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20230418-012654.png?api=v2]\n\n * Select all 12,88080 items 를 누르면 12808개 전부 선택이 된다.\n\n\nPROPS\n\nprop\n\ntype\n\n설명\n\n제약사항\n\ncomponents\n\nGuide?: JSXElementConstructor<HTMLAttributes<HTMLDivElement>>\n\n * 헤더, 바디 사이에 위치 시킬 컴포넌트\n\n\n\ncomponentsProps\n\nGuid?: HTMLAttributes<HTMLDivElement>\n\n * 위 Guide 컴포넌트에 대한 props\n\n * style:{ height }가 필수로 있어야한다.\n   \n   * 없는 경우에 공간확보가 되지 않아 데이터그리드 위에 떠있는 괴상한 UI가 나온다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20230418-015914.png?api=v2]\n     \n     \n\n\n예시코드)\n\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/screens/billing/invoices/InvoicesScreen.tsx#L321-L339\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/screens/billing/invoices/InvoicesScreen.tsx#L321-L339]\n\n(자세히 알고싶다면\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/components/SelectAllGuide/SelectAllGuide.tsx#L20\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/components/SelectAllGuide/SelectAllGuide.tsx#L20]\n코드도 참고할 것)\n\nfunction InvoiceScreen(){\n  // prop destruction\n  // lib, style hooks\n  // state hooks\n  ...\n  const [selectedInvoiceIds, setSelectedInvoiceIds] = useState<string[]>([])\n  const [dataGridGuide, setDataGridGuide] = useState<{ isDisplating: boolean; selected: boolean }>({\n    isDisplaying: false, // 가이드를 보여줄 것인지\n    selected: false, // 가이드 내에서 전체선택을 클릭했을 경우 true\n  })\n  ...\n  \n  // effects\n  useEffect(() => {\n    if (invoices) {\n      setDataGridGuide({\n        selected: false,\n        isDisplaying: false,\n      });\n      setSelectedInvoiceIds([]);\n    }\n  }, [invoices]); //refetch 되었을 시에 초기화\n  ...\n  \n  // handlers\n  ...\n  const handleSelectionModelChange = (ids: string[]) => {\n    const isSelectedAllInvoices: boolean = (() => {\n      if (!ids.length) {\n        return false;\n      }\n\n      const selectionModelMap = ids.reduce((map, id) => {\n        map[id] = true;\n        return map;\n      }, {} as Record<string, true>);\n\n      return invoices!.items.every((row) => selectionModelMap[row.id]);\n    })();\n    setSelectedInvoiceIds(ids);\n    setDataGridGuide({\n      selected: false,\n      isDisplaying: isSelectedAllInvoices,\n  }\n  \n  return (\n    ...\n    \n    <Stack flex={1}>\n        <DataGrid\n          ...\n          checkboxSelection\n          disableSelectionOnClick\n          selectionModel={selectedInvoiceIds}\n          getRowId={(row) => String(row.invoiceId)} // 만약 row에 id라는 property가 없다면 selectionModel에서 id를 가져올 수 없기 때문에 getRowId로 설정해주어야한다.\n          onSelectionModelChange={handleSelectionModelChange}\n          components={{\n            Guide: dataGridGuide.isDisplaying\n              ? () => (\n                  <SelectAllGuide\n                    selected={dataGridGuide.selected}\n                    countRow={invoices!.count}\n                    countRowPerPage={invoices!.items.length}\n                    onClick={() => setDataGridGuide({ ...dataGridGuide, selected: !dataGridGuide.selected })}\n                  />\n                )\n              : undefined,\n          }}\n          componentsProps={{\n            Guide: {\n              style: {\n                height: '48px',\n              },\n            },\n          }}\n        />\n        <Pagination\n          ...\n        />\n      </Stack>\n    </Stack>\n  )\n}\n\n\n\n\nIN DASH-BOARD\n\n * Dashboard에서는 백오피스와 같이 페이지네이션 되어있는 경우 모든 데이터 row를 선택하는 기능이 추가되어있다.\n\n * csv 파일을 파싱해서 DataGrid로 만들어주는 CsvDataGrid 가 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20230418-050854.png?api=v2]\n\n\nPROPS\n\nprop\n\ntype\n\n설명\n\n제약사항\n\ncsvFile\n\nFile\n\n * Csv 파일\n\n\n\noptions\n\nheaders: string[]\n\n * header 이름\n\ncsv 파일과 똑같은 header를 입력해야한다.\n\ndescriptions\n\nstring[]\n\n * 데이터그리드 아래 들어갈 설명\n\n\n\nonLoadCsvFile\n\n(rawData: string) => void;\n\n * Csv 파일이 선택되었을 경우 동작하는 함수\n\n\n\nrenderUploadButton\n\n(rows: { [key: string]: string }[] | undefined) => ReactNode;\n\n * 업로드 버튼 랜더링\n\n\n\n\n예시코드)\n\nhttps://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/screens/docusigns/upload/UploadDocusignsScreen.tsx#L176\n[https://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/screens/docusigns/upload/UploadDocusignsScreen.tsx#L176]\n\n(자세히 알고싶다면\nhttps://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/components/DataGrid/CSVDataGrid/CSVDataGrid.tsx#L40\n[https://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/components/DataGrid/CSVDataGrid/CSVDataGrid.tsx#L40]\n코드도 참고할 것)\n\nfunction UploadDocusignsScreen(){\n  ...\n  // state, ref hooks\n  const [files, setFiles] = useState<File[]>([]);\n  const [selectedItem, setSelectedItem] = useState<{ file: File; rawData?: string }>(); // 파일 이름으로 식별한다. 중복이름은 import 금지.\n  ...\n  \n  return (\n    <CSVDataGrid\n      csvFile={selectedItem.file}\n      options={{\n        headers: [\n          'Subject',\n          'Status',\n          'Sender Name',\n          'Recipient Name',\n          'Sent On (Date)',\n          'Sent On (Time)',\n          'Last Activity (Date)',\n          'Last Activity (Time)',\n          'Completed On (Date)',\n          'Completed On (Time)',\n          'Completion Time (DD:HH:MM)',\n          'Signer List',\n          'Envelope ID',\n        ],\n      }}\n      descriptions={[\n        '1. 이미 업로드된 docusign은 제외됩니다.',\n        '2. Signer List에 haulla.com 이메일이 포함된 docusign만 업로드됩니다.',\n      ]}\n      onLoadCsvFile={(rawData) => setSelectedItem((item) => ({ ...item!, rawData }))}\n      renderUploadButton={(rows) => (\n        <Button\n          disabled={!rows?.length}\n          loading={isUploading}\n          css={{ width: '100%', height: '150px', fontSize: '28px', fontWeight: 'bold' }}\n          variant=\"contained\"\n          onClick={handleUpload}\n        >\n          <Stack direction=\"row\" spacing=\"8px\" alignItems=\"center\">\n            {`Upload ${rows?.length || 0} docusigns`}\n            <FileUploadIcon css={{ width: '40px', height: '40px', color: 'color' }} />\n          </Stack>\n        </Button>\n      )}\n    />\n  )\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2476638313"
  },
  {
    "pageContent": "[F] Modal\n\n모달은 어플리케이션과의 상호작용을 차단하고 모달과 상호작용 할 수 있도록 돕는 모든 요소를 모달이라 부를 수 있다.\n\n일반적으로 사용자의 흐름을 차단하고 값을 입력받기 위해 사용하는 Dialog 또한 모달의 일종이므로 헷갈리면 안된다.\n\nhttps://mui.com/components/modal/ [https://mui.com/components/modal/]\n\nhttps://mui.com/components/dialogs/ [https://mui.com/components/dialogs/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2235596803"
  },
  {
    "pageContent": "[F] Charts\n\nhttps://github.com/airbnb/visx [https://github.com/airbnb/visx] 를 이용해 필요한 차트를\n개발한다.\n\nWhy? https://ecubelabs.atlassian.net/browse/CCNB-6072?focusedCommentId=68471\n[https://ecubelabs.atlassian.net/browse/CCNB-6072?focusedCommentId=68471]\n\n * 우리의 요구사항을 다 수용할 수 있으면서 d3보다는 리액트 친화스럽고 개발 자유도가 높은 라이브러리.\n   \n   * 다른 라이브러리들은 훨씬 리액트 친화스러워도 자유도가 매우 낮다. 이런 라이브러리들은 개발된 기능 내에서만 사용이 가능.\n   \n   * visx는 지원하지 않는 기능이면 직접 구현하거나 d3를 갖다 써도 되지만 대부분 지원한다.\n\n * 에어비앤비가 개발을 주도하고 있으며 2021. 8. 20. 시점에서도 꾸준히 유지보수되고 있다.\n\n * 다양한 이용 사례가 있다.\n\n * mock data를 지원해준다.\n\n\nFOR BEGINNERS…\n\n * visx는 svg element 하위에 렌더링되는것을 가정하여 동작한다.\n   \n   * 때문에 반드시 <svg>{visx Components}</svg> 의 양식으로 구현되어 있어야 한다.\n\n * visx는 d3를 비교적 사용하기 쉽게 래핑했기 때문에 d3의 자료도 많이 찾아봐야 한다.\n   \n   * 각종 유틸 함수들을 d3의 모듈을 사용하는게 많다…\n\n * TODO\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109374569"
  },
  {
    "pageContent": "[F] SVG 다루는 방식\n\n\n\n * 1. file-loader\n   * 장점\n   * 단점\n   * 예시\n * 2. webpack/svgr\n   * 장점\n   * 단점\n   * 예시\n * 3. @mui/material SvgIcon\n   * 장점\n   * 단점\n   * 예시\n\n\n1. FILE-LOADER\n\n\n장점\n\n?\n\n\n단점\n\n?\n\n\n예시\n\n * haulla-official\n   [https://github.com/Ecube-Labs/haulla-official/blob/main/src/app/screens/refer-business/ReferBusinessScreen.tsx#L28]\n\n\n2. WEBPACK/SVGR [https://www.npmjs.com/package/@svgr/webpack]\n\n> SVG and transforms it into a React component.\n\n\n장점\n\n1. 리액트 컴포넌트 다루듯이 사용할 수 있다.\n\nimport A from '@assets/images/a.svg';\n\nfunction XXX() {\n  return <A css={css({ width: 20, height: 27, color: ? })} />\n} \n\n\n\n단점\n\n?\n\n\n예시\n\n * haulla-hauler-front 시설 마커\n   [https://github.com/Ecube-Labs/haulla-hauler-front/blob/a8f99bdcb0c0b5971143ce11223e6ed7058e779a/src/app/components/FacilityMarker/index.tsx#L3]\n\n\n3. @MUI/MATERIAL SVGICON [https://mui.com/material-ui/api/svg-icon/]\n\n\n장점\n\n?\n\n\n단점\n\n?\n\n\n예시\n\n * haulla-official\n   [https://github.com/Ecube-Labs/haulla-official/blob/02e6641a59918be3b40b7a17e4b3f53671017544/src/app/components/DropdownMenu/DropdownMenu.tsx#L2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390130691"
  },
  {
    "pageContent": "Layout Component Concept\n\n작업 생산성 향상 및 통일감있는 화면 개발을 위해 전체적인 크기나 위치를 지정해둔 레이아웃 컴포넌트를 이용한다.\n\n\nPRESENTATION TOOLS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.11.18@2x.png?api=v2]\n\n\nGRID LAYOUT\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.25.10@2x.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.25.40@2x.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.25.50@2x.png?api=v2]\n\n\nREF.\n\n * https://joy-treasury.dev/?path=/story/layout-dashboard-curve--curve\n   [https://joy-treasury.dev/?path=/story/layout-dashboard-curve--curve]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2911961505"
  },
  {
    "pageContent": "[F] Date 관리\n * Date 저장\n\n\nDATE 저장\n\nDate 는 항상 ISO format string 형태로 저장한다. (UTC+0)\n\n * 2019-11-26T06:18:32.233Z (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n * 2019-11-26T06:18:32.233Z+09:00 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n절대로 Date 객체로 저장하지 않는다.\n\n * 서버에서 받은 데이터를 클라이언트에서 임의로 변경해서 가지고 않기 위해서.\n   \n   * 서버에서 받은 데이터를 클라이언트에서 임의로 변경하면 서버가 값을 잘못 준 건지 클라이언트가 값을 잘못 변경한 건지 디버깅이 힘들다.\n\n * Date string 을 Date 객체로 인스턴스화 하는 것을 데이터 변경으로 봐야 할지는 논란의 여지가 있지만 일단 Date 는\n   string 으로 저장 한다.\n\n// SomeComponent.tsx\nhandleSomething() {\n  this.setState({ now: new Date() })               // Bad\n  this.setState({ now: new Date().toISOString() }) // Good\n}\n\n// some-reducer.ts\ncase 'SOME_ACTION_FULFILLED':\n  return {\n    ...state,\n    now: new Date(), // Bad\n    now: new Date().toISOString(), // Good\n  }",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/236159132"
  },
  {
    "pageContent": "[F] react-hook-form\n * 등록\n   * number 타입은 valueAsNumber 설정해준다.\n * 검증\n   * 정적인 validation schema 는 컴포넌트 외부에 작성한다.\n * 제출\n   * isSubmitting === true 인 경우 버튼을 비활성화한다.\n   * 변경 사항 없거나 검증에 실패한 경우, 버튼을 비활성화한다.\n * 참고\n\n\n등록\n\n\nNUMBER 타입은 VALUEASNUMBER [https://react-hook-form.com/kr/api/] 설정해준다.\n\n<CurrencyTextField\n  ...\n  {...register('amount', { valueAsNumber: true })}\n  defaultValue={getValues('amount')}\n/>\n\n설정하지 않으면 string 타입을 반환하고, 이에 따라 isDirty는 항상 true가 된다. (10 !== ‘10’)\n\n\n검증\n\n\n정적인 VALIDATION SCHEMA 는 컴포넌트 외부에 작성한다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nfunction SomeComponent {\n  const validationSchema = yup.object({\n    name: yup.string().required()\n  })\n}\n\n\nvalidationSchema 객체는 컴포넌트가 렌더링 될 때마다 다시 생성되는데 정적인 스키마는 컴포넌트 렌더링과 관계없이 항상 같은\n형태이므로 매번 새로 생성할 필요가 없다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nconst validationSchema = yup.object({\n  name: yup.string().required()\n})\n\nfunction SomeComponent {\n  const {\n    ...\n  } = useForm({\n    ...\n    resolver: yupResolver(validationSchema),\n  });\n}\n \n\n\n제출\n\n\nISSUBMITTING === TRUE 인 경우 버튼을 비활성화한다.\n\nconst {\n  formState: { isSubmitting },\n  handleSubmit,\n  ... \n} = useForm({...});\n\n\n<Button\n  ...\n  loading={isSubmitting}\n  onClick={handleSubmit(async ({ name }) => {\n      await submit({\n        variables: {\n          name,\n        },\n      });\n  })}\n/>\n\n\n변경 사항 없거나 검증에 실패한 경우, 버튼을 비활성화한다.\n\nconst {\n  formState: { isDirty, isValid },\n  ... \n} = useForm({...});\n\n<Button\n  ...\n  disabled={!isDirty || !isValid}\n/>\n\n\n참고\n\nMUI + react-hook-form\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2386526223/F+react-hook-form]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2414706698"
  },
  {
    "pageContent": "(deprecated) [F] Formik 사용 가이드\n\n2022.05.17 기준 Formik 은 validation library 로 yup 만 지원해서 react-hook-form 으로 모두 교체할\n예정\n\n\n\n * 정적인 validation schema 는 컴포넌트 외부에 작성한다.\n\n\n정적인 VALIDATION SCHEMA 는 컴포넌트 외부에 작성한다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nfunction SomeComponent {\n  const validationSchema = yup.object({\n    name: yup.string().required()\n  })\n}\n\nvalidationSchema 객체는 컴포넌트가 렌더링 될 때마다 다시 생성되는데 정적인 스키마는 컴포넌트 렌더링과 관계없이 항상 같은\n형태이므로 매번 새로 생성할 필요가 없다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nconst validationSchema = yup.object({\n  name: yup.string().required()\n})\nfunction SomeComponent {\n  useFormik({ validationSchema, ... })\n}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1884520455"
  },
  {
    "pageContent": "[RN] 스크롤뷰에서 버튼 아래로 밀기\n\n<ScrollView>\n  <View>\n    // content goes here\n  </View>\n  <Button>BUTTON</Button>\n</ScrollView>\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1144161094/image-20201228-093500.png?api=v2]\n\n\n\n<ScrollView contentContainerStyle={{ flexGrow: 1, justifyContent: 'space-between' }}>\n  <View>\n    // content goes here\n  </View>\n  <Button>BUTTON</Button>\n</ScrollView>\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1144161094/image-20201228-093555.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1144161094"
  },
  {
    "pageContent": "[F][퍼블리싱] 최적화\n\nhttps://roadmap.sh/best-practices/frontend-performance\n[https://roadmap.sh/best-practices/frontend-performance]\n\n\nTOOLS\n\n\nLIGHTHOUSE\n\n * 크롬 개발자도구에 내장된 성능 측정 도구\n\n * 시크릿 모드 창에서 측정해야 외부 영향(devtool과 같은 크롬 확장 프로그램)을 받지 않을 수 있다.\n   \n   * devtool의 경우 불필요한 리소스를 집어넣어 성능 측정에 적지 않은 영향을 미친다.\n\n * 성능 점수가 측정하는 도구의 성능에 약간의 영향을 미치는것으로 보인다.\n\n아래 사진은 동일한 페이지를 같은 시간에 다른 기기로 측정한 결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2413035521/image-20220510-013505.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2413035521/image-20220510-013520.png?api=v2]\n\n\n\n\nPAGE SPEED\n\nhttps://pagespeed.web.dev/ [https://pagespeed.web.dev/]\n\n * lighthouse 기반의 성능 측정 도구\n   \n   * 그런데 항상 로컬에서 lighthouse만 돌린것보다 점수가 낮게 나온다.\n\n--------------------------------------------------------------------------------\n\n\nMETRICS\n\n\nFCP\n\nhttps://web.dev/i18n/ko/fcp/ [https://web.dev/i18n/ko/fcp/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2413035521/image-20220510-013742.png?api=v2]\n\n * 화면에 처음 렌더링 되기 시작한 시간에 대한 지표\n\n * 웹 폰트도 크게 영향을 미칠 수 있으므로 최적화 해야한다.\n   \n   * 웹 폰트를 사용할 때 설정에 따라 웹 폰트를 불러오는 동안 폰트가 표시되지 않을 수 있다.\n     (fallback font가 표시되는것과 다르게 아무것도 표시되지 않다가 폰트가 보이는것이 FCP에 영향을 미침)\n   \n   * https://stackoverflow.com/questions/19922285/web-font-flickering-on-load\n     [https://stackoverflow.com/questions/19922285/web-font-flickering-on-load]\n\n\nLCP\n\nhttps://web.dev/i18n/ko/optimize-lcp/ [https://web.dev/i18n/ko/optimize-lcp/]\n\n * FCP 이후부터 측정된다.\n\n * 화면에서 가장 큰 이미지나 텍스트가 렌더링 되는 시간에 대해 측정하는 지표\n\n * 화면이 처음 보여질 때 노출될 가능성이 높은 리소스는 preload를 하는것이 FCP, LCP에 도움이 된다. (큰 비중을 차지하는\n   컨텐츠일수록 LCP에 영향이 크다)\n   \n   * preload를 걸면 화면을 띄우기 전에 리소스를 먼저 받아오기 때문에 리소스가 로딩과 함께 표시될 수 있는것이다.\n   \n   * 아무거나 preload 걸면 안된다. 초기 로딩에 더 많은 시간을 쓰게되어 FCP 외에 다양한 지표에 영향을 끼칠수 있다.\n\n\nTTI\n\nhttps://web.dev/i18n/ko/tti/ [https://web.dev/i18n/ko/tti/]\n\n * 페이지가 띄워지고 실행되는 스크립트가 적을수록 TTI가 낮을 가능성이 높다.\n\n * 페이지에 로드되는 스크립트가 많다고 무조건 TTI가 높은것은 아니지만 로드된 스크립트가 아무 일도 하지 않을 경우에만 TTI에 영향이 적게\n   끼친다.\n   \n   * Code splitting, Lazy loading(dynamic import), Partial hydration이 도움이 된다.\n\n\nCLS\n\nhttps://web.dev/i18n/ko/cls/ [https://web.dev/i18n/ko/cls/]\n\n * 화면에 그려지는 요소는 width, height, aspect-ratio 같은 속성을 이용해 요소 크기에 대한 힌트를 줘야 한다.\n\n * 그렇지 않으면 각 요소들이 렌더링 되면서 블록처럼 차곡차곡 쌓여가며 보여지므로 사용자 경험에 저하 요소가 된다.\n\n\n\nTODO\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2413035521"
  },
  {
    "pageContent": "[F][퍼블리싱] Web worker\n\nhttps://web.dev/articles/off-main-thread?hl=ko\n[https://web.dev/articles/off-main-thread?hl=ko]\n\n백엔드가 아닌 브라우저 단에서는 연산에 비용이 많이 드는 로직을 별도의 웹워커에서 수행하는것을 권장한다.\n\n메인 스레드는 부드러운 UI 업데이트를 위해서 리소스를 사용하는게 바람직하고, 성능이 일부 저하되더라도 프레임이 Drop 되는것보다 사용자에게\n더 많은 피드백을 주는것이 좋다.\n\nhttps://www.npmjs.com/package/comlink [https://www.npmjs.com/package/comlink] 조금\n더 편리하게 구현할수 있게 도와주는 도구를 이용해도 좋다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3104145467"
  },
  {
    "pageContent": "[F][Material-UI v4] CSS 렌더링 성능 최적화\n\nMUI v5에서 사용되는 CSS-in-JS 라이브러리(emotion)는 동작 방식이 다르기 때문에 해당 문서의 최적화 규칙이 의미가 없습니다.\n\n이 문서에서는 SSR을 사용하지 않으면서 SPA인 환경을 기준으로 설명하기 때문에 전통적인 HTML 렌더링 성능에 대해 깊게 다루지 않습니다.\n\n전통적인 방식의 렌더링 성능에 대해 궁금하면\nhttps://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=ko\n[https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=ko]\n를 참고하세요.\n\n\n최적화를 위한 규칙\n\n\n가능한 MAKESTYLES, WITHSTYLES를 사용하세요.\n\n두 함수는 JSS를 기반으로 만들어졌기 때문에 캐싱 등 여러 기능을 가지고 있어 비교적 우월한 성능을 자랑합니다.\n\nhttps://cssinjs.org/performance/?v=v10.6.0\n[https://cssinjs.org/performance/?v=v10.6.0]\n\n\nWITHSTYLES보다는 MAKESTYLES를 사용하세요.\n\n환경에 따라 편차가 있지만 makeStyles가 withStyles보다 약 30%정도 빠르다고 보고된 내용이 있습니다.\n\nhttps://github.com/mui-org/material-ui/issues/10778#issuecomment-472840548\n[https://github.com/mui-org/material-ui/issues/10778#issuecomment-472840548]\n\n\n인라인 스타일을 쓰지 마세요.\n\n인라인 스타일을 사용하는 경우 동일한 컴포넌트를 렌더링 할 때 makeStyles, withStyles를 사용하는것보다 훨씬 느립니다.\n이에 대한 내용은 JSS에서 다시 언급됩니다. https://cssinjs.org/performance/?v=v10.6.0\n[https://cssinjs.org/performance/?v=v10.6.0]\n\n게다가, JSS를 통해 이미 생성된 CSSOM은 캐싱이 되어있기 때문에 SPA에서는 새 페이지로 이동해도 CSSOM을 그대로 사용할 수\n있습니다.\n레거시 환경에서 페이지를 이동시킨다면 페이지도 새로 로딩되어야 해서 CSSOM가 다시 생성되기 때문에 JSS를 사용한 SPA는 이 부분에서\n이점으로 작용합니다.\n\n\n가변적인 스타일도 가능하면 MAKESTYLES로 구현하세요.\n\n필요한 CSS만 바꾸기 때문에 CSSOM도 필요한 부분만 재생성되어 렌더링 성능에서 이득을 볼 수 있습니다.\n\n--------------------------------------------------------------------------------\n\n\n🧐 조금 더 알아보기\n\n\n사전 지식\n\n * CSSOM [https://developer.mozilla.org/ko/docs/Web/API/CSS_Object_Model]\n\n * 브라우저의 객체 모델 생성 (DOM, CSSOM)\n   [https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko]\n\n * CSS in JS [https://d0gf00t.tistory.com/22]\n\n\nCSS 제어 방법?\n\n브라우저에서 CSS를 제어하기 위해서는 몇 가지의 방법이 있고, 이 방법들에 대한 장단점을 간단히 나열해보겠습니다.\n\n 1. CSSOM을 제어하는 방법\n    \n    1. 장점: 순수하게 JS로 element의 스타일을 제어할 수 있다.\n    \n    2. 단점: DOM 트리와 CSSOM 트리가 모두 생성된 뒤에야 CSSOM에 접근해 제어가 가능하므로 초기 렌더링 성능에 문제가 있다.\n\n 2. CSS를 문서에 직접 로드한 뒤 element에 classname을 지정하는 방법\n    \n    1. 장점: SASS와 같은 전처리기를 사용할 수 있으며, JS 코드가 필요 없다. 이미 선언된 스타일을 재사용할 수 있다.\n    \n    2. 단점: 개발자가 classname을 모두 알지 않으면 CSS in JS를 이용하는것보다 유지보수가 귀찮고,\n       전처리기나 webpack같은 모듈러를 이용하지 않으면 css를 컴포넌트마다 모듈화 하여 관리하기 어렵다.\n\n 3. CSS in JS 기술을 이용하는 방법 (더 많은 장단점?\n    [https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/])\n    \n    1. 장점: 1번과는 다르게 DOM의 생성여부와는 관계 없이 미리 계산해두고 캐싱해둔 뒤 나중에 적용할 수 있으며,\n       CSS를 JS로 관리하기 때문에 비교적 모듈화가 쉽다.\n       성능에 신경을 많이 쓴 라이브러리들이 많다.\n       2번 방법을 일부 채용했으므로 장점도 일부 취할수 있다.\n    \n    2. 단점: JS가 다 로딩된 뒤 런타임에서 CSS를 만들어내야 하는 문제가 있어 1번처럼 초기 렌더링 성능에 문제가 있다.\n       CSS만 안다고 되는게 아니고 CSS in JS라는게 뭔지도 알아야 한다. (러닝커브 상승)\n\n여기서 과거에 종종 사용하던 1번 방법인 CSSOM을 직접 제어하는 기법은 대체로 3번의 장점으로 커버가 가능하고, 단점도 비슷하므로 이젠 굳이\n사용할 필요가 없어보입니다.\n어차피 대부분의 SSR을 사용하지 않는 SPA 환경에서는 CSS 파일을 html에 링크하는게 아닐테니, 초기 로딩시 CSSOM 트리는 생성되지\n않습니다.\n\n\n당연히 CSS IN JS(EX. JSS)보다는 순수한 CSS가 더 빠릅니다.\n\nSSR을 사용하는 등 여러 경우에, 초기 렌더링에서 더 커다란 성능 개선을 원한다면 CSS 파일을 html에서 바로 로딩될 수 있도록\n구성하세요.\n\n이 경우 맨 처음 링크를 건 렌더링 성능 분석 문서에 의존하여 성능을 개선하길 바랍니다.\n\n이 외에도 여러 리소스에 의해 렌더링이 블락되는 경우가 많지만 여기선 다루지 않습니다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712881854"
  },
  {
    "pageContent": "[F] 반응형 디자인\n * Grid 를 사용한다.\n   * Breakpoints\n   * Container\n   * Item\n   * Nested Grid\n * 반응형 디자인 in Ecube Labs\n * 참고\n\n\nGRID 를 사용한다.\n\n * 예제 [https://material-ui.com/components/grid/]\n\n * API [https://material-ui.com/api/grid/]\n\n\nBREAKPOINTS [https://material-ui.com/customization/breakpoints/#breakpoints]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/image-20210623-011631.png?api=v2]\n\n\nCONTAINER\n\n * flex container\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1346043934/OJT%2BFE%2BFlexbox%2BLayout]\n   의 역할을 한다. container 가 item 들을 감싸는 식으로 사용한다.\n\n\nITEM\n\n * flex item 의 역할을 한다.\n\n * Breakpoints 에 따라 하나의 row(혹은 column)에 사용할 grid의 개수를 정의할 수 있다.\n\n * grid는 기본적으로 12개로 나뉜다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/image-20210618-060125.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/image-20210623-011954.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.44.00.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.45.07.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.45.42.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.46.48.png?api=v2]\n\n\nNESTED GRID\n\n * container와 item 속성을 함께 사용하면 container 이면서 item 으로도 사용할 수 있다.\n\n\n반응형 디자인 IN ECUBE LABS\n\n화면 크기가 변함에 따라 디자인이 변경 되는 진짜 반응형 디자인은 필요 없고 PC/모바일 두 번 퍼블리싱 할 필요가 없도록 생산성을 높이는 데만\n사용한다.\n\ni.e. PC/모바일 두가지 경우만 대응 되면 된다.\n\nconst isMobile = useMediaQuery(theme.breakpoints.down('sm')); // 태블릿은 don't care\n\n\n참고\n\n * iOS Resolution [https://ios-resolution.com/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1935409153"
  },
  {
    "pageContent": "MUI v5 Styling guide\n * emotion 설정 확인\n   * /tsconfig.json\n   * Storybook 설정\n * @mui/styles 를 import하지 않는다.\n * inline-style 대신 css를 사용한다.\n * Box component는 사용하지 않는다.\n * flex 스타일은 Stack 컴포넌트로 대체한다.\n * 반복되지 않는 스타일은 sx보다 css를 사용한다.\n * MUI classname은 MUI의 *Classes 객체를 참조한다.\n   * 이전 (v4):\n     * Case 1\n     * Case 2\n   * 현재 (v5):\n * Unstyled component 사용을 고려한다.\n * 조건부 스타일 적용\n   * Pattern 1: styled + classname\n   * Pattern 2: styled / css\n * styleOverrides만으로 구현이 가능한지 검토한다.\n * Theme 생성시 Theme 객체 참조가 필요한 경우\n * Palette 타입 확장\n * ‘px’ 단위는 생략하지 않는다.\n\nJSS(MUI v4 기본 스타일 엔진) → Emotion(MUI v5 기본 스타일 엔진)에 대한 가이드\n\nhttps://github.com/mui-org/material-ui/issues/22342\n[https://github.com/mui-org/material-ui/issues/22342]\n\n--------------------------------------------------------------------------------\n\n\nEMOTION 설정 확인\n\n아래 가이드를 따라 emotion 이슈를 예방한다.\n\n\n/TSCONFIG.JSON [https://emotion.sh/docs/typescript#emotionreact]\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/e51745972f7cbdc291b28fdbb85b7862db7107ad/tsconfig.json#L18-L19\n[https://github.com/Ecube-Labs/ccnx-front/blob/e51745972f7cbdc291b28fdbb85b7862db7107ad/tsconfig.json#L18-L19]\n\n위 링크를 참고하여 아래와 같은 형태로 설정되어 있어야 css 함수를 사용할 수 있다.\n\n{\n  \"extends\": \"@ecubelabs/tsconfig/react.json\",\n  \"compilerOptions\": {\n    ...\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"@emotion/react\"\n  },\n  ...\n}\n\n\n\nSTORYBOOK 설정\n\n[F][스토리북] 설정 가이드\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302214188/F]\n\n위 페이지를 참고하여 스토리북 설정에 문제가 없는지 우선적으로 확인한다.\n\n\n@MUI/STYLES 를 IMPORT하지 않는다.\n\nv4에 있던 기능을 유지하기 위한 기능들을 제공하지만 우리는 사용하지 않고 모두 v5에 맞게 마이그레이션 하는것을 기본으로 한다.\n\n당연히 createStyles, makeStyles, withStyles 등의 기존 JSS 기반 스타일 관련 함수도 포함된다.\n\n\nINLINE-STYLE 대신 CSS를 사용한다.\n\ninline style과 달리 rtl plugin의 혜택을 받을 수 있으므로 inline-style이 필요한 상황에는 무조건 css 함수를\n사용하는것을 규칙으로 한다.\n\ncss prop를 이용해 스타일을 주입하려면 반드시 Emotion JSX Pragma를 사용해야 한다.\n[OJT][FE] JSX (React/Emotion)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2320171030/OJT+FE+JSX+React+Emotion]\n\n\nBOX COMPONENT는 사용하지 않는다.\n\nBox 컴포넌트에서 지원되는 다양한 유틸리티 함수를 쓰는것보다는 styled로 감싸거나 css로 인라인 스타일처럼 넣는게 성능이 더 낫다고\n한다. (Box가 문젠지 sx가 문젠지 모르겠지만 둘 다 별로니까 사용하지 않는다.)\nhttps://mui.com/system/basics/#performance-tradeoff\n[https://mui.com/system/basics/#performance-tradeoff]\n\nBox 컴포넌트는 전부 div로 대체한다.\n\n\nFLEX 스타일은 STACK 컴포넌트로 대체한다.\n\nStack은 가로 또는 세로로 쌓이는 UI에 사용한다.\nGrid는 반응형 UI를 구현할 때 외에는 사용하지 않는다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nBad\n\n<Container css={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nGood\n\n<Stack component={Container} direction=\"column\" alignItems=\"center\">\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/bd79ec8830be320428294bef29f04fcf7b60afc8/src/app/screens/support/SupportScreen.tsx#L142\n[https://github.com/Ecube-Labs/ccnx-front/blob/bd79ec8830be320428294bef29f04fcf7b60afc8/src/app/screens/support/SupportScreen.tsx#L142]\n\n\n반복되지 않는 스타일은 SX보다 CSS를 사용한다.\n\n * sx보다 뛰어난 성능을 지닌다고 한다. (Box가 문젠지 sx가 문젠지 모르겠지만 둘 다 별로니까 사용하지 않는다.)\n   https://mui.com/system/basics/#performance-tradeoff\n   [https://mui.com/system/basics/#performance-tradeoff]\n\n * shorthand 기능으로 인해 오히려 코드를 읽는것에 불편함이 생긴다.\n   전부 다 sx로 만드는게 아니면 값이 뭘 뜻하는지 고민해야 한다.\n   \n   * sx에서의 marginLeft: 1 → marginLeft: theme.spacing(1)\n   \n   * css에서의 marginLeft: 1 → marginLeft: '1px'\n   \n   * jss(v4의 스타일 엔진)에서의 marginLeft: 1 → marginLeft: '1px'\n\n\nMUI CLASSNAME은 MUI의 *CLASSES 객체를 참조한다.\n\n\n이전 (V4):\n\n\nCASE 1\n\n{\n  color: 'black',\n  '&$selected': {\n    ...\n  },\n}\n\n\nCASE 2\n\nconst classes = useStyles();\n...\n<MuiComponent\n  classes={{\n    root: classes.defaultStyle,\n    selected: classes.selectedStyle,\n  }}\n/>\n\n\n현재 (V5):\n\nstyles, css 모두 적용 가능한 패턴\n\n{\n  color: 'black',\n  [`&.${pickersDayClasses.selected}`]: {\n    ...\n  }\n}\n\nhttps://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L56\n[https://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L56]\n\nhttps://mui.com/guides/understand-mui-packages/#design-system\n[https://mui.com/guides/understand-mui-packages/#design-system]\n\n\nUNSTYLED COMPONENT 사용을 고려한다.\n\nhttps://mui.com/customization/unstyled-components/\n[https://mui.com/customization/unstyled-components/]\n\n불필요한 기능이 훨씬 적고, 버전이 바뀌면서 생길 스타일 변화에도 영향을 덜 받을 수 있다.\n\n\n조건부 스타일 적용\n\n\nPATTERN 1: STYLED + CLASSNAME\n\n성능상의 이점으로 인해 MUI 코드에서 많이 사용되는 방식으로 보인다.\n\ncosnt Div = styled('div')((theme) => ({\n  backgroundColor: 'black',\n  \n  '&.condition1': {\n    backgroundColor: theme.palette.warning.main,\n  },\n  '&.condition2': {\n    backgroundColor: theme.palette.info.dark,\n  },\n  '&.condition1.condition2': {\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n...\n<Div className={mergeClasses({\n  condition1: !!condition1,\n  condition2: !!condition2,\n})}>\n...\n</Div>\n\n참고\n\n * https://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L54-L108\n   [https://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L54-L108]\n\n * https://github.com/mui-org/material-ui/blob/dc3b69664f8c27acbac56e249e81ae8e761363ac/packages/mui-lab/src/PickersDay/PickersDay.tsx#L100-L200\n   [https://github.com/mui-org/material-ui/blob/dc3b69664f8c27acbac56e249e81ae8e761363ac/packages/mui-lab/src/PickersDay/PickersDay.tsx#L100-L200]\n\n\nPATTERN 2: STYLED / CSS\n\n구현 조건이 까다롭지 않다면 아래와 같은 형태로도 구현이 가능하다.\n\n사용되는 위치만 다를 뿐 styled, css 모두 sx 같은 인터페이스로 조건부 스타일링이 가능하다.\n\nconst PrettyBox = styled(Box)<{\n  type: 'primary' | 'sedondary';\n  selected?: boolean;\n}>(({ selected, type, theme }) => [\n  {\n    backgroundColor: 'black',\n  },\n  selected && {\n    borderBottomColor: theme.palette[type].main,\n  },\n]);\n\nimport { css } from '@emotion/react';\n\nconst PrettyBox2 = (props: {\n  type: 'primary' | 'sedondary';\n  selected?: boolean;\n} & BoxProps) => {\n  const { type, selected, ...ownerProps } = props;\n  \n  return <Box css={(theme) => css([\n    { backgroundColor: 'black' },\n    selected && { borderBottomColor: theme.palette[type].main },\n  ])} {...ownerProps} />\n}\n\n\nSTYLEOVERRIDES만으로 구현이 가능한지 검토한다.\n\nprops, style을 덮어 씌우기 위해 styled component 혹은 별도로 컴포넌트를 작성하기 전에 단순히 Theme option으로\n커스텀이 가능한지 검토해야 한다.\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L258-L285\n[https://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L258-L285]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2294841417/image-20211231-052359.png?api=v2]\n\n\nTHEME 생성시 THEME 객체 참조가 필요한 경우\n\n아래와 같은 패턴으로 기본 값으로 사용할 theme 객체를 먼저 생성한 뒤 참조한다.\n\n * https://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L20-L26\n   [https://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L20-L26]\n\n * https://mui.com/customization/theming/#createtheme-options-args-theme\n   [https://mui.com/customization/theming/#createtheme-options-args-theme]\n\nconst defaultTheme = createMuiTheme({\n  direction,\n  spacing,\n  palette,\n});\n\nreturn createMuiTheme({\n  direction,\n  spacing,\n  palette,\n  components: {\n    MuiChip: {\n      styleOverrides: {\n        root: {\n          borderRadius: theme.shape.borderRadius,\n        },\n      },\n    },\n  },\n});\n\n\nPALETTE 타입 확장\n\n기본적으로 emotion 또는 @mui/styles 에 구현된 Theme이 있으며, 이 타입을 참조하는 라이브러리와 충돌할 가능성이 높다.\n때문에 아래와 같이 각 라이브러리에 있는 Theme을 mui의 Theme으로 override한다.\n\n아래는 servicing, collection, event 라는 palette 속성을 추가하는 예시\n\ndeclare module '@mui/styles/defaultTheme' {\n  // NOTE: https://mui.com/guides/migration-v4/#types-property-quot-palette-quot-quot-spacing-quot-does-not-exist-on-type-defaulttheme\n  interface DefaultTheme extends MuiTheme {}\n}\n\ndeclare module '@emotion/react' {\n  interface Theme extends MuiTheme {}\n}\n\n// NOTE: custom palette\ndeclare module '@mui/material/styles' {\n  interface Palette {\n    servicing: Palette['primary'];\n    collection: Palette['primary'];\n    event: Palette['primary'];\n  }\n\n  interface PaletteOptions {\n    servicing: PaletteOptions['primary'];\n    collection: PaletteOptions['primary'];\n    event: PaletteOptions['primary'];\n  }\n}\n\n\n‘PX’ 단위는 생략하지 않는다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nGood\n\n<div css={{ width: '300px' }}>\n<StretchableComponent width=\"300px\" />\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nBad\n\n<div css={{ width: 300 }}>\n<StretchableComponent width={300} />\n<StretchableComponent width=\"300\" />\n\n * 관련 논의:\n   https://github.com/Ecube-Labs/ccnx-front/pull/211#discussion_r802529982\n   [https://github.com/Ecube-Labs/ccnx-front/pull/211#discussion_r802529982]\n\n * 컴포넌트가 수치를 입력받아야 하는 경우 가능한 아래와 같이 한다.\n   \n   * https://www.typescriptlang.org/play?#code/C4TwDgpgBA6glgE2ACygXigAwCQG8B2ArgLYBGEATgL5gAemA3AFBMDGA9vgM7BQDm7dggBcsRCnRQA5AEYATAGY6U5h268BQuaPhJUGHLgCcABhr1mbTjyikAhiLF7JsxSqvrbD7U4kZXChQQxO5qNvYICjri+tLKzEA\n     [https://www.typescriptlang.org/play?#code/C4TwDgpgBA6glgE2ACygXigAwCQG8B2ArgLYBGEATgL5gAemA3AFBMDGA9vgM7BQDm7dggBcsRCnRQA5AEYATAGY6U5h268BQuaPhJUGHLgCcABhr1mbTjyikAhiLF7JsxSqvrbD7U4kZXChQQxO5qNvYICjri+tLKzEA]\n   \n   * props: { width: `${number}px` }\n\n * 0은 px 생략해도 된다.\n   https://github.com/Ecube-Labs/haulla-back-office-front/pull/675#discussion_r829649334\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/675#discussion_r829649334]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2294841417"
  },
  {
    "pageContent": "[F] + react-hook-form\n\nMUI + react-hook-form 을 같이 사용할 때 가이드.\n\nreact-hook-form 자체에 대한 가이드는 [F] react-hook-form\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2414706698/F+react-hook-form]\n\n * Initialize in uncontrolled way\n\n\nINITIALIZE IN UNCONTROLLED WAY\n\nreact-hook-form [https://react-hook-form.com/] 의 register 는 uncontrolled 방식으로\ninput 을 관리하기 위한 method 이다.\n\nMUI [https://mui.com/] 에서 uncontrolled 방식으로 input 을 사용하려면 defaultValue 를 사용해야\n하므로 react-hook-form 과 MUI 를 함께 사용할 때 uncontrolled 방식을 사용하고 싶다면 올바른 초기화 방법은 다음과\n같다.\n\nfunction ComponentA() {\n  const { register, getValues } = useForm({\n    defaultValues: {\n      name: 'Moongchi'\n    }\n  })\n  \n  return (\n    <TextField\n      {...register('name')}\n      defaultValue={getValues('name')}\n    />\n  )\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2386526223"
  },
  {
    "pageContent": "[F][MUI] @mui/icons-material\n\n\nICON MODULE\n\n@mui/icons-material [https://www.npmjs.com/package/@mui/icons-material] 은 우리가\n아이콘을 사용할 때 주로 사용하는 라이브러리이다.\n\nimage-20240108-054247.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-054247.png?api=v2]\n\n\n사용 시 주의점\n\n@mui/icons-material 을 사용할때는 번들사이즈때문에 통째로 가져오면 안되고 세분화하여 가져와야한다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n전체 import\n\nimport { SearchOutlined } from '@mui/icons-material';\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n부분 import\n\nimport SearchOutlined from '@mui/icons-material/SearchOutlined';\n\n\n\n * 전체 import 시\n\nimage-20240108-060011.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-060011.png?api=v2]\n\nimage-20240108-053615.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-053615.png?api=v2]\n\n * 부분 import 시\n\nimage-20240108-060118.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-060118.png?api=v2]image-20240108-060205.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-060205.png?api=v2]\n\n\n참고\n\n * 번들사이즈가 클 경우 chromatic 에 publish가 안되는 오류가 있을 수 있다. (물론 로딩도 오래걸리기때문에 성능적으로도 좋지\n   않다.)\n\nhttps://github.com/Ecube-Labs/haulla/pull/502#issuecomment-1859453005\n[https://github.com/Ecube-Labs/haulla/pull/502#issuecomment-1859453005]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2869297393"
  },
  {
    "pageContent": "[F][MUI] Custom 드롭다운\n\nTODO\n\n어떤 형태여야 하는가\n\n주의 사항",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3090972674"
  },
  {
    "pageContent": "[F][CEEDUI] Performance issues\n\n\n렌더링된 마커의 이미지에 따라 느릴 수 있음\n\n * svg를 이용하는 경우, svg를 복잡하지 않은 파일로 교체하여 성능이 개선되는지 확인\n\n * 혹은 png로 교체하여 성능이 개선되는지 확인\n\n\n마커가 메모이제이션 되었는지, 불필요한 렌더링을 하고 있는지 확인\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810937441"
  },
  {
    "pageContent": "[F][CEEDUI] Map\n\n\n특징\n\n * GoogleMap을 Best practices로 이용할 수 있게 추상화 해둔 구현체.\n\n * Map 컴포넌트는 독립적인 Context가 존재한다.\n\n * @ceed/ui 에서 제공하는 컴포넌트는 반드시 Map 의 children에 렌더링을 해야한다.\n\n\nUSAGE\n\n\nBASIC\n\nimport { Map } from '@ceed/ui/Map';\n\n<Map\n    loaderOptions={{\n      key: 'googlemapkey',\n      libraries: ['places', 'geometry', 'visualization'],\n    }}\n    mapOptions={{\n      defaultCenter: { lat: 37.631272, lng: 126.812099 },\n      defaultZoom: 12,\n      gestureHandling: 'greedy',\n      disableDoubleClickZoom: true,\n    }}\n>\n  // Marker, Polyline, ...\n</Map>\n\n\nWITH MAPAPI\n\nGoogle Map API를 사용하는 로직 중, 재사용성이 높은 코드는 별도 API로 추상화 하여 내보내며, 아래와 같이 이용할 수 있다.\n\n자세한 API 설명은 하단 참조.\n\nimport { Map, MapApi } from '@ceed/ui/Map';\n\nconst mapApiRef = React.useRef<MapApi>(null);\n\n// example\nReact.useEffect(() => {\n  mapApiRef.current?.panTo({ lat: 0, lng: 0 });\n  mapApiRef.current?.setZoom(2);\n}, []);\n\nreturn <Map ... ref={mapApiRef} />;\n\n\n\n\nAPI\n\nGoogle Map 불러오는 시간이 늦어져 실제 Google Map API 객체를 받아오지 못한 경우에 호출하면 API 객체를 받아온 이후\n호출되도록 되어있다.\n\n즉, 언제 호출하더라도 반드시 호출에 성공하도록 개발되어있다.\n타이밍은 보장하지 않는다.\n\n\nSETZOOM\n\n명시적으로 zoom level을 조정하고 싶은 경우 이용한다.\n\n\nGETZOOM\n\n현재 렌더링 되어있는 지도의 zoom level을 얻어온다.\n\n\nGETBOUNDS\n\n현재 렌더링 되어있는 지도의 bounds를 [westLng: number, southLat: number, eastLng: number,\nnorthLat: number] 형식으로 얻어온다.\n\n\nPANTO\n\n원하는 lat, lng 으로 지도의 pan 을 이동시킨다.\n\n\nFITBOUNDS\n\n{ lat, lng }[] 로 fitBounds를 한다.\n\nbounds 객체를 별도로 만들 필요 없도록 추상화 된 API다.\n\n\nGETCENTER\n\n현재 렌더링 되어있는 지도 중심의 lat, lng 를 얻어온다.\n\n\nSETMAPTYPE\n\n현재 렌더링 되어있는 지도의 그림 타입을 반환한다.\n\n아래의 형식중 하나의 값을 반환한다.\n'roadmap' | 'satellite' | 'hybrid' | 'terrain'\n\n\nISBOUNDCONTAINS\n\n인자로 전달한 좌표가 현재 렌더링 된 지도의 bounds에 포함되는지 확인한다.\n\nMapOverlayView 컴포넌트에서도 해당 API를 이용하여 지도 내의 표시 여부를 결정한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810347530"
  },
  {
    "pageContent": "[F][CEEDUI] MapOverlayView\n\n성능 이슈가 있는 경우 [F][CEEDUI] Performance issues\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810937441/F+CEEDUI+Performance+issues]\n를 참고한다.\n\n\n특징\n\n * 클러스터나 마커와 같이 지도 내에 렌더링 할 컴포넌트가 있는 경우 사용된다.\n\n * 지도는 사소한 상호작용으로도 리렌더링이 많이 일어나는데, 불필요한 리렌더링을 최대한 줄이도록 추상화 한 컴포넌트.\n   \n   * GoogleMap의 이벤트 핸들러를 이용하여 필요한 경우에만 렌더링을 할 수 있도록 한다.\n   \n   * 이를 위해 내부적으로는 ref 에 HTMLElement를 넣어 렌더링하도록 개발되어 있다.\n\n * 반드시 Map 컴포넌트 하위에 렌더링되어야 한다.\n\n * 대량으로 렌더링 해야 하는 경우 반드시 컴포넌트 메모이제이션을 해야 성능 저하를 막을수 있다.\n   (Custom Marker 예시 참고)\n\n\nUSAGE\n\n\nBASIC\n\n<Map ...>\n  <MapOverlayView\n    lat={position.lat}\n    lng={position.lng}\n  >\n    <span onClick={onMarkerClick}>\n      예쁜 이미지\n    </span>\n  </MapOverlayView>\n</Map>\n\n\nCUSTOM MARKER\n\n * 메모이제이션은 props로 넘어오는 값 중 이벤트 핸들러를 제외하고 모두 비교한다.\n   \n   * 마커를 렌더링 할 때 이벤트 핸들러는 일반적으로 onClick={() => ...} 처럼 개발하기 때문에 항상 새 레퍼런스로 넘어와서\n     비교해도 의미가 없다.\n   \n   * CCN의 트래커처럼 마커의 좌표가 실시간으로 바뀌는 경우가 아니라면 lat, lng도 비교하지 않아도 된다.\n\nfunction Marker(props: {\n  latitude: number;\n  longitude: number;\n  selected: boolean;\n  className?: string;\n}) {\n  const { latitude, longitude, selected, className } = props;\n\n  return (\n    <MapOverlayView\n      position=\"center\"\n      className={className}\n      lat={item.latitude}\n      lng={item.longitude}\n      ...\n    >\n      이쁜 이미지\n    </MapOverlayView>\n  );\n}\n\nconst CustomMarker = React.memo(Marker, (prev, next) => {\n  return (\n    prev.latitude === next.latitude &&\n    prev.longitude === next.longitude &&\n    prev.selected === next.selected &&\n    prev.className === next.className\n  );\n});\nCustomMarker.displayName = 'CustomMarker';\n\nexport { CustomMarker };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811035693"
  },
  {
    "pageContent": "[F][CEEDUI] NativeMarker\n\n\n특징\n\n * CCN에서 Marker를 드래그해서 옮기는 기능과 같이 GoogleMap이 제공하는 기능을 통해 마커를 직접 다뤄야 하는 경우 이용하기\n   위한 컴포넌트.\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/2811265039/2023-10-06%2015.02.00.gif?api=v2]\n\n * 단순히 지도 위에 원하는것을 그려주는 MapOverlayView 와 비교했을때 성능 차이는 별로 없지만,\n   NativeMarker는 GoogleMap의 Marker 객체를 직접 다뤄야 하므로 추상화의 한계가 있기 때문에 반드시 필요한게 아니라면\n   MapOverlayView 이용을 권장한다.\n\n\nUSAGE\n\nGoogle Map 문서에서 지원하는 기능은 모두 가능하므로 참고할것.\n\n아래는 단순하게 사용할 때의 방법만 예시로 작성.\n\n\nBASIC\n\nconst markerRef = React.useRef<google.maps.Marker>(null);\n\nreturn (\n  <Map ...>\n    <NativeMarker\n      position={{\n        lat: clients[0].latitude,\n        lng: clients[0].longitude\n      }}\n      ref={markerRef}\n    />\n  </Map>\n);\n\n\nCUSTOM ICON\n\nconst markerRef = React.useRef<google.maps.Marker>(null);\n\nuseEffect(() => {\n  markerRef.current.setIcon('url...');\n  markerRef.current.setZIndex(selected ? 1 : 0);\n  markerRef.current.setTitle(`${markerName}_${id}`);\n}, [id, markerName, selected]);\n\nreturn (\n  <Map ...>\n    <NativeMarker\n      position={{\n        lat: clients[0].latitude,\n        lng: clients[0].longitude\n      }}\n      ref={markerRef}\n    />\n  </Map>\n);\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265039"
  },
  {
    "pageContent": "[F][CEEDUI] MapClusters\n\n\n특징\n\n * MapOverlayView와 supercluster [https://www.npmjs.com/package/supercluster] 를\n   기반으로 클러스터를 쉽게 개발할 수 있도록 추상화 한 컴포넌트.\n   \n   * supercluster를 전적으로 믿고 개발된것이므로 성능이 뛰어난 원리는 물어도 모릅니다.\n     궁금하면 찾아보고 남겨주세요\n\n\nUSAGE\n\n\nBASIC\n\n<Map ...>\n  <MapClusters\n    clusterOptions={{ radius: 200, maxZoom: 16 }}\n    items={clients}\n    getPoint={(client) => ({ id: client.id, lat: client.latitude, lng: client.longitude })}\n    Component={CustomCluster}\n    componentProps={{ onClick: handleClusterClick }}\n  />\n</Map>\n\n/////////////////////////////////////////////////////////////\n// CustomCluster Example\nfunction CustomCluster(props: { clusterId: number; items: ClientModel[]; onClick: (props: any) => void }) {\n  return (\n    <div onClick={() => props.onClick(props.items)}>\n      <div>{props.clusterId}</div>\n      cluster count: {props.items.length}\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265057"
  },
  {
    "pageContent": "[F][CEEDUI] MapSearchBox\n\n\n특징\n\n * 구글이 제공하는 SearchBox API를 이용한 커스텀 SearchBox를 쉽게 개발할 수 있게 추상화 한 컴포넌트\n\n * 구글이 제공하는 Native SearchBox와 거의 동일하며, 자동완성 목록의 커스터마이징은 지원하지 않는다.\n\n\nUSAGE\n\n\nBASIC\n\n<Map {...args}>\n  <MapSearchBox\n    css={{ position: 'absolute', top: '10px', left: '10px' }}\n    onChange={...}\n    onPlaceChange={...}\n    Component={React.forwardRef(({ onChange }, ref) => {\n      return (\n        <TextField\n          css={{\n            position: 'absolute',\n            top: 0,\n            backgroundColor: '#f3f4f6',\n            fontSize: '12px',\n            color: '#6b778c',\n            margin: 0,\n          }}\n          variant=\"filled\"\n          onChange={onChange}\n          label=\"Enter Address\"\n          inputRef={ref}\n        />\n      );\n    })}\n  />\n</Map>\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811134023"
  },
  {
    "pageContent": "[F][CEEDUI] Polyline & HeatmapLayer\n\n\n특징\n\n * GoogleMap의 Polyline, HeatmapLayer 를 쉽게 다룰수 있게 추상화 한 컴포넌트.\n\n * HeatmapLayer를 이용하기 위해서는 지도 props loaderOptions.libraries에 visualization 을\n   추가해야한다.\n\n\nUSAGE\n\n\nPOLYLINE\n\n<Map ...>\n  <Polyline\n    coordinates={[{ lat, lng }, { lat, lng }]}\n    strokeColor=\"#607d8b\"\n    strokeOpacity={0.9}\n    strokeWeight={7}\n    icons={[\n      {\n        icon: {\n          path: 'M -3 0 L 0 -6 L 3 0 L 2 0 L 0 -4 L -2 0 z', // svg\n          strokeOpacity: 1,\n          strokeColor: 'white',\n          fillColor: 'white',\n          fillOpacity: 1,\n          scale: 0.6,\n        },\n        offset: '0',\n        repeat: '10px',\n      },\n    ]}\n  />\n</Map>\n\n\nHEATMAPLAYER\n\n<Map ...>\n  <HeatmapLayer data={[{ location, weight }, { location, weight }, ...]} radius={40} opacity={0.75} />\n</Map>\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811199594"
  },
  {
    "pageContent": "[F] Dialog\n * Dialog?\n * 기본 구조\n   * Submit 버튼\n * Open and Close\n   * disableBackdropClick\n * Event handlers\n   * Close handler (required)\n   * Submit handler (required unless filter like dialogs)\n   * TODO 필터 다이얼로그는 어떻게 필터값을 넘겨줄까\n   * Error handler (never)\n   * With Datagrid\n\n\nDIALOG?\n\n팝업의 형태로 컨텐츠를 제공하는 컴포넌트를 다이얼로그(dialog) 라 한다.\n\n다이얼로그는 크게 두가지로 구분된다.\n\n 1. 리소스 조작을 위한 다이얼로그\n    ex) 사용자 계정 등록 다이얼로그\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/1773076779/image-20210508-035514.png?api=v2]\n\n 2. 필터 다이얼로그\n    ex) 제품 필터 다이얼로그\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/1773076779/image-20210508-035554.png?api=v2]\n\n\n기본 구조\n\n<Dialog open={open}>\n  <DialogTitle>\n    프로젝트 내에서 모든 Dialog의 제목은 스타일이 같은 게 자연스럽다.\n    그래서 title에 style을 주는 게 아니라 theme으로 적용하는 게 좋다.\n  </DialogTitle>\n  <DialogContent>\n    <tag css={css({ width: '708px' })}>\n      Theme에서 content의 width=100%로 설정하고 content 내부 element에 width를 주면 된다.\n    </tag>  \n  </DialogContent>\n  <DialogActions>\n    <Button>Cancel/Action도 마찬가지로 모든 Dialog의 스타일이 같은게 자연스럽다.</Button>\n    <Button>Save/Theme을 활용하면 된다</Button>\n  </DialogActions>\n</Dialog>\n\n\nSUBMIT 버튼\n\n사용자의 입력을 반영하기 위해 사용되는 버튼을 submit 버튼이라 부른다.\n\n버튼의 텍스트를 꼭 “Submit” 으로 할 필요는 없다.\n\n\nOPEN AND CLOSE\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDialog 단독 컴포넌트를 만들때는 다음과 같이 하도록 한다.\n\nimport { useState } from 'react'\n\nfunction SomeComponent() {\n  const [open, setOpen] = useState()\n  \n  return (\n    <>\n      {open && <SomeDialog />}\n    </>\n  )\n}\n\nimport { useState } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\n\nfunction SomeDialog() {\n  const [state, setState] = useState()\n\n  return (\n    <Dialog open={true} />\n  )\n}\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nMaterial-UI 공식 문서의 예제 코드 [https://material-ui.com/components/dialogs/#dialog]\n\nimport { useState } from 'react'\n\nfunction SomeComponent() {\n  const [open, setOpen] = useState()\n  \n  return (\n    <>\n      <SomeDialog open={open} />\n    </>\n  )\n}\n\nimport { useState } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\n\nfunction SomeDialog({ open }) {\n  const [state, setState] = useState()\n\n  return (\n    <Dialog open={open} />\n  )\n}\n\nMaterial-UI 공식 문서의 예제 코드는 두가지 문제가 있다.\n\n 1. 사용자가 다이얼로그를 열지 않아도 다이얼로그가 mount 되면서 다이얼로그에 작성한 코드가 실행된다.\n\n 2. 사용자가 다이얼로그를 닫아도 unmount 되지 않기 때문에 state 가 그대로 남아있다. → 다이얼로그 닫을 때 초기화 필요\n\n그래서 Material-UI 예제 코드와 같은 규칙이 아닌 이큐브랩 자체 규칙으로 다이얼로그 open and close 를 작성하도록 한다.\n\nDialog 단독 컴포넌트가 아닌 경우 위의 설명은 유효하지 않으므로 Material-UI 스타일로 작성해도 무방하다.\n\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/6e366784a78848cb5cd567b2b6de5173c483aedf/src/app/components/EditGeneratorAccountHaulerButton/index.tsx#L15\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/6e366784a78848cb5cd567b2b6de5173c483aedf/src/app/components/EditGeneratorAccountHaulerButton/index.tsx#L15]\n\n\nDISABLEBACKDROPCLICK\n\n특별한 이유가 없다면 disableBackdropClick prop 을 설정해서 백그라운드를 클릭했을 때 다이얼로그가 닫히지 않도록 한다.\n\ndisableBackdropClick prop은 deprecate 되었고, onClose의 두번째 인자인 reason 이용해 구현하면 된다고\n함.\n참고: https://github.com/Ecube-Labs/ccnx-front/pull/333#issuecomment-1501483257\n[https://github.com/Ecube-Labs/ccnx-front/pull/333#issuecomment-1501483257]\n\n\nEVENT HANDLERS\n\n\nCLOSE HANDLER (REQUIRED)\n\n사용자가 단순히 다이얼로그를 닫은 경우에만 close handler 가 동작해야 하고 () => void 로 정의한다.\n\nconst [open, setOpen] = useState(false)\n\nreturn (\n  <>\n    {open && <SomeDialog onClose={() => setOpen(false)} />}\n  </>\n)\n\n\nSUBMIT HANDLER (REQUIRED UNLESS FILTER LIKE DIALOGS)\n\n리소스를 조작하는 다이얼로그의 경우 리소스 조작이 완료된 경우에만 submit handler 가 동작해야 하고 () => void 로 정의한다.\n\nfunction Products() {\n  const { data: products, refetch } = useQuery(query)\n  \n  return (\n    <>\n      {products.map(product => (\n        <Product key={product.id} product={product} />\n      ))}\n      <RegisterProduct onSubmit={() => refetch()} />\n    </>\n  )\n}\n\nfunction RegisterProduct({ onSubmit }) {\n  const [registerProduct, { loading }] = useMutation(mutation)\n  \n  const handleSubmit = async () => {\n    await registerProduct()\n    onSubmit()\n  }\n  \n  return (\n    <Dialog open>\n      {loading && <ProgressBar />}\n      <Button>Cancel</Button>\n      <Button onClick={handleSubmit}>Ok</Button>\n    </Dialog>\n  )\n}\n\n리소스 조작 및 리소스를 조작하는 동안 프로그레스 표시는 다이얼로그 안에서 처리가 완료 되어야한다.\n\nsubmit handler 는 다이얼로그를 사용하는 컴포넌트가 다이얼로그 안에서 리소스 조작이 완료된 후 후속 작업 (위의 예시에서는 제품 등록\n후 제품 재조회) 을 할때만 사용해야한다.\n\n * 잠재적인 double progress 문제\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/507#discussion_r620959867]가\n   있긴한데 어쩔 수 없다.\n\n\nTODO 필터 다이얼로그는 어떻게 필터값을 넘겨줄까\n\n\nERROR HANDLER (NEVER)\n\n에러 핸들러는 정의하지 않는다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n<SomeDialog\n  onError={(error) => { /* do something... */}}\n/>\n\n에러는 항상 다이얼로그 안에서 처리할 수 있다.\n\n\n\n\nWITH DATAGRID\n\n * data grid안에서 다이얼로그를 사용할때는 키보드 이벤트에 버블링이 일어나기 때문에 유의하여 개발하여야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1773076779/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202023-10-17%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.06.24.mov?api=v2]\n\n> 데이터그리드에서 스페이스바를 누를때와 데이터그리드 안에있는 다이얼로그에서 스페이스바를 누를때 이벤트 버블링때문에 체크 선택/해제가 일어나는\n> 모습\n\nPortal로 열리는 Dialog는 DataGrid Row의 바깥에 DOM이 존재하지만,\n실제 DOM의 구조와 관계 없이 리액트의 Portal API로 렌더링 했다면 Virtual DOM 상 Dialog의 부모인 DataGrid의\nRow에 이벤트 버블링이 발생하는것이 정상이기 때문에 이와 같은 조치를 취하는것이 최선이다.\nhttps://legacy.reactjs.org/docs/portals.html\n[https://legacy.reactjs.org/docs/portals.html]\n\n * 간단하게 안에서 사용하는 dialog에 onKeyDown={(e) => e.stopPropagation()}를 적용하면 된다\n   \n   * <Dialog open onKeyDown={(e) => e.stopPropagation()}>\n       ...\n     </Dialog>\n\n * DialogButton 컴포넌트가 있다면 아래와 같은 방식으로도 사용 가능하다\n   \n   * //DialogButton.tsx\n        ...\n        // handlers\n        const handleKeyDown = useCallback((e) => {\n         e.stopPropagation();\n        }, []);\n       \n        return (\n         <div\n           ...\n         >\n           {render({ onOpen: handleOpen })}\n           {open && children({ onClose: handleClose, onKeyDown: handleKeyDown })}\n         </div>\n       );\n     \n     // ServiceCoverageScreen.tsx\n     <DialogButton\n       render={({ onOpen }) => (\n         ...\n       )}\n     >\n       {({ onClose, onKeyDown }) => (\n         <EditServiceCoverageDialog\n           onClose={onClose}\n           onKeyDown={onKeyDown} // 데이터그리드가 아닌 다른곳에서도 사용가능 할 수 있으니 optional로 두는것이 좋다.\n           haulers={haulers!}\n           serviceCoverage={serviceCoverage}\n         />\n       )}\n     </DialogButton>",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1773076779"
  },
  {
    "pageContent": "[F] Chart vs Graph?\n\nhttps://www.wallstreetmojo.com/graphs-vs-charts/\n[https://www.wallstreetmojo.com/graphs-vs-charts/]\n\n * Chart: Graph를 포함한 다양한 형태로 정보를 나타낼 수 있다.\n\n * Graph: X, Y축에 플로팅해서 데이터셋을 표시하는데 사용되는 차트의 유형이다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2129133595"
  },
  {
    "pageContent": "[F][SVG] webpack/svgr\n\n> A complete tool box to take advantage of using SVGs in your React\n> applications.\n\n\n설정\n\nwebpack.config.js\n\n{\n  test: /\\.(svg)$/,\n  use: [{ loader: '@svgr/webpack', options: { dimensions: false }}],\n},\n\n\n사용 방법\n\nimport A from '@assets/images/a.svg';\n\nfunction XXX() {\n  return <A css={css({ width: 20, height: 27, color: ? })} />\n} \n\n\n\n이슈\n\n\n1. 색상 적용 안 되는 경우\n\n * 해결법: currentColor 적용\n\n * 예시\n   [https://github.com/Ecube-Labs/haulla-hauler-front/blob/a8f99bdcb0c0b5971143ce11223e6ed7058e779a/src/assets/images/facility-marker/garage.svg?short_path=692f7f5#L27]\n\n\n사용 예시\n\n * haulla-hauler-front 시설 마커\n   [https://github.com/Ecube-Labs/haulla-hauler-front/blob/a8f99bdcb0c0b5971143ce11223e6ed7058e779a/src/app/components/FacilityMarker/index.tsx#L3]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2389934095"
  },
  {
    "pageContent": "API 요청 규칙\n\n\n인증 정보 (AUTHORIZATION)\n\n\"Authorization\" 헤더에 API 서버에서 요구하는 토큰을 양식에 맞게 포함하여 보내는게 일반적입니다.\n\n현재 이큐브랩의 모든 API는 해당 헤더를 포함하여 인증을 하도록 약속했습니다.\n\n\n\n\n\n응답 메세지(RESPONSE BODY) 사용자화\n\n사용자가 사용하고 있는 환경에 알맞은 내용을 보여주기 위한 수단입니다.\n\n이를 위해 일반적으로 \"Accept-Language\" 헤더를 사용하기로 약속했으며, 내용에 포함하는 언어 규칙은 아래의 내용을 따릅니다.\n\n * ${ISO 639-1 (alpha-2)}\n * ${ISO 639-1 (alpha-2)}_${ISO 3166-1 (alpha-2 upper case)}\n\n두가지 경우가 있으며, en, ko, zh_CN 같은 경우가 해당됩니다.\n\n참고 https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#75-standard-request-headers\n[https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#75-standard-request-headers]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783458"
  },
  {
    "pageContent": "[F] useQuery, useLazyQuery, useMutation 사용 시 테스트\n\n\n개요\n\n이 글에서는 데이터 조회 및 변경\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F]에서 소개 된 훅 함수를\n사용 시 테스트 코드를 작성하는 방법을 소개합니다.\n\n\n문제점\n\n만약 테스트 하고자 하는 컴포넌트에서 useQuery를 사용하여 loading, data, refetch와 같은 반환 값들을 사용하고 있다면,\n대부분 undefined 상태인 data 를 화면에 띄우지 않기 위해 관련 된 태그를 조건부 렌더링\n[https://reactjs-kr.firebaseapp.com/docs/conditional-rendering.html] 또는 옵셔널 체이닝\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining]을\n사용하게 됩니다.\n\n그러나 렌더링을 테스트하기 위해 테스트 코드를 실행할 경우, data의 기본 값이 undefined인 상태에서 렌더링 하므로 위에서 언급한\n방식이 적용 된 태그들은 렌더링되지 않거나 undefined인 경우에 해당하는 태그를 렌더링하게 됩니다.\n\n\n해결 방법\n\n아폴로에서 작성한 리액트 컴포넌트 테스팅\n[https://www.apollographql.com/docs/react/development-testing/testing/] 문서에서는\n자신들이 제공하는 MockedProvider 컴포넌트를 통해 테스트에서 실행되는 각 쿼리들에 대한 반환 값을 모킹할 수 있도록 편리한 컴포넌트를\n제공하고 있습니다.\n\n위 방식과 동일하게 구현하기 위해 useQuery 사용을 예로 들어 테스트 코드를 작성하는 방법을 구체적으로 소개합니다.\n\n 1. 테스트 코드에 모킹하고자 하는 훅 함수를 가져옵니다.\n    \n    import { useQuery } from ‘@ceed/core;’\n\n 2. useQuery를 제공하고 있는 모듈 @ceed/core를 모킹합니다.\n    \n    jest.mock('@ceed/core');\n\n 3. ts-jest [https://www.npmjs.com/package/ts-jest] 모듈에서 제공하는 mocked를 통해 가져온 함수를\n    모킹합니다.\n    \n    const mockedUseQuery = mocked(useQuery);\n\n 4. 모킹한 함수에서 mockReturnValue를 호출하여 반환 값을 모킹합니다.\n    \n    mockedUseQuery.mockReturnValue({ \n      loading: false,\n      data: { idx: 4831, … },\n      refetch: jest.fn(),\n    });\n    \n    \n\n이렇게 data만 모킹할 수 있을 뿐만 아니라 loading 또한 모킹이 가능하므로 더욱 다양한 테스트 작성이 가능합니다.\n\n실제 적용 예시를 확인하고 싶은 분들을 위해 참조 2번째 항목에 링크 걸어두었으니 참고하시면 많은 도움 됩니다.\n\n\n참조\n\n * https://www.apollographql.com/docs/react/development-testing/testing/\n   [https://www.apollographql.com/docs/react/development-testing/testing/]\n\n * https://github.com/Ecube-Labs/erp_main/pull/284/commits/653b3332d7f5e82e74fd4149f4bba1e687c06c08\n   [https://github.com/Ecube-Labs/erp_main/pull/284/commits/653b3332d7f5e82e74fd4149f4bba1e687c06c08]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1713012767"
  },
  {
    "pageContent": "Interaction Testing\n\n\n1. 스토리북으로 작성한다.\n\n[F][스토리북] 스토리 작성 규칙\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964/F]\n\n\n2. 반드시 사용자가 파악할 수 있는 조건을 통해 요소를 선택한다.\n\n웹 접근성(a11y) 개발 컨벤션\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2780135590/a11y] 를 준수하면\n된다.\n\n파악할 수 있는 조건의 예시:\n\n * 텍스트 박스인지 아닌지\n\n * 버튼인지 아닌지\n\n * 눈으로 보이는 글자\n\n * …\n\n\n배경 코드\n\n<label for=\"user_id\">User ID</label>\n<input type=\"text\" id=\"user_id\" />\n\n\n❌ DON’T\n\nfindById(\"user_id\")\n\n\n✅ DO\n\nfindByRole('textbox', { name: \"User ID\" });\n\n\n3. TEST ID 는 사용하지 않는다.\n\n다양한 접근성 Attribute를 적절히 활용하면 Test Id가 필요한 상황은 거의 없다.\n\n\n❌ DON’T\n\n<button id=\"modal-open-button\">Open</button>\n<div data-testid=\"test-modal\">\n\t<h2>Modal Title</h2>\n</div>\n\nfindById(\"modal-open-button\").click()\nfindByTestId(\"test-modal\")\n\n\n✅ DO\n\n<button aria-haspopup=\"dialog\" aria-expanded=\"false\">Open</button>\n<div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"test-modal-title\">\n\t<h2 id=\"test-modal-title\">Modal Title</h2>\n</div>\n\nfindByRole(\"button\", { name: \"Open\", expanded: false }).click()\nfindByRole(\"dialog\", { name: \"Modal Title\" })\n\n\n4. 사용자의 입력 또는 이벤트 발생이 없는것은 검증하지 않는다.\n\n * 상호작용이 없는 것을 검증하면 화면의 모든것을 검증 할 수 밖에 없다.\n\n * 단위 테스트 또는 회귀 테스트로 충분히 검증할 수 있으므로 상호작용이 있는것만 검증한다.\n\n\n배경 코드\n\n{!isLoading && <DataGrid items={fetchedItems} />}\n\n\n❌ DON’T\n\nconst dataGrid = findByRole(\"grid\")\nexpect(within(dataGrid).findByRole(\"columnheader\", { name: \"Status\" })).toBeTruthy()\n\n\n✅ DO\n\nexpect(findByRole(\"button\", { name: \"CleanTRACK (150)\" })).toBeTruthy()\nsetFilter(...)\nexpect(findByRole(\"button\", { name: \"CleanTRACK (60)\" })).toBeTruthy()\n\n\n5. API 요청/응답 값은 절대 검증하지 않는다.\n\n * API Request/Response 데이터는 절대 검증하지 않는다.\n   \n   * 상세 스펙을 테스트 코드에 담으면 앱 자체를 검증하는게 아닌, 앱을 작성하는 방식을 테스트하는것이다.\n   \n   * https://mswjs.io/docs/recipes/request-assertions\n     [https://mswjs.io/docs/recipes/request-assertions]\n\n\n6. 이벤트 핸들러 검증은 ACTION ADDON을 이용한다. (LIKE JEST’S SPYON)\n\n스토리북이 제공하는 @storybook/addon-essentials 애드온을 이용하면 바로 사용할 수 있다.\n\n스토리북의 action-addon을 통해 주입되는 이벤트 핸들러는 jest의 spyOn 또는 mock 함수로 감싼것과 거의 동일하게 동작한다.\n\nhttps://github.com/Ecube-Labs/ecubelabs/blob/fe56c36cf39a101927eec51515dfbd6160597c8e/apps/ccnx-front/src/app/components/NotificationLogList/NotificationLogList.stories.tsx#L71\n[https://github.com/Ecube-Labs/ecubelabs/blob/fe56c36cf39a101927eec51515dfbd6160597c8e/apps/ccnx-front/src/app/components/NotificationLogList/NotificationLogList.stories.tsx#L71]\n\n\n7. TESTING-LIBRARY가 제공하는 SCREEN 은 CANVAS 바깥에 DOM이 존재하는 경우에만 사용한다.\n\n일반적으로 Portal 을 이용해 앱의 DOM 바깥에 존재하는 경우에 사용하고, 그 외에는 지양한다. screen을 사용하면 예상치 못한 요소를\n선택할 가능성이 높아진다.\n\n\n8. TESTING-LIBRARY의 FIND* / GET* / QUERY* 메서드는 목적에 맞게 사용해야 한다.\n\n * find*: async로 동작하며, 탐색에 실패해도 n 차례 재시도해서 다시 찾는다.\n   설정된 횟수(기본 3)만큼 시도했을때 찾지 못하면 에러를 던진다.\n   \n   * 테스트코드를 작성하며 기본적으로 사용하길 권장하는 메서드다.\n     실제로 브라우저에서 이루어지는 렌더링은 비동기이기 때문에 DOM이 확실히 존재하는 시점이 아니라면 이 메서드로 탐색해야 테스트를 비교적\n     일관적으로 성공할 수 있다.\n\n * get*: sync로 동작하며, 탐색에 실패하면 곧바로 에러를 던진다.\n   \n   * 이미 렌더링 된 DOM에 탐색해야 하는 DOM이 존재한다고 확신할 수 있는 경우에만 사용한다.\n   \n   * 찾는 DOM이 존재하지 않았을때 테스트가 실패해야 하는 경우 사용해야 한다.\n\n * query*: sync로 동작하며, 탐색에 실패하면 null을 반환한다.\n   \n   * 이미 렌더링 된 DOM에 탐색해야 하는 DOM이 존재한다고 확신할 수 있는 경우에만 사용한다.\n   \n   * 찾는 DOM이 존재하지 않아도 테스트가 실패하지 않아도 되는 경우 사용한다.\n     ex) n개의 role=row DOM중에 특정 값을 지닌 row만 찾아야 하는 경우.\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2308440065/image-20230829-022450.png?api=v2]\n     \n     const manageModal = await screen.findByRole('presentation', { name: 'Manage Bin Profiles' });\n     \n     // NOTE: 셀에 특정 데이터가 있는 row의 DOM을 가져오기 위해 parentElement 같은 DOM API 대신 순수하게 testing-library API로만 탐색하기 위해 아래와 같이 작성한다.\n     // DOM API만 이용하면 DOM의 구조가 바뀌었을때 테스트가 깨지기 때문에 testing-library API를 사용한다.\n     const row = (await within(manageModal).findAllByRole('row')).find(\n       // NOTE: find* 는 비동기고, get*는 동기이지만 탐색에 실패한 경우 에러를 throw 하므로 동기이면서 탐색에 실패했을때 null을 리턴하는 query*를 사용한다.\n       (row) => !!within(row).queryByRole('gridcell', { name: '클린하우스' }),\n     )!;\n\n\n참조\n\n * https://testing-library.com/docs/queries/about/#priority\n   [https://testing-library.com/docs/queries/about/#priority]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065"
  },
  {
    "pageContent": "[F][스토리북] 스토리 작성 규칙\n * CSF v3 사용\n * CSF v3 Properties\n   * component\n   * args\n   * argTypes\n   * parameters\n   * decorators\n * API Mocking\n   * [API Mocking] msw를 사용한다.\n   * [API Mocking] export default 에 있는 mocking만으로 컴포넌트 사용에 문제가 없도록 한다.\n   * [API Mocking] Error mocking은 msw handlers를 override한다.\n   * [API Mocking] msw handlers는 직접 참조한 컴포넌트만 상속받는다.\n * Data mocking\n   * [Data mocking] 직접 참조하지 않는다.\n   * [Data mocking] XXXrepository.mock 에는 모델 타입을 지정해준다.\n   * [Data mocking] 스토리 data.mock 에는 따로 타입을 지정하지 않는다.\n * Date Mocking\n * RTL 지원\n   * [RTL 지원] ex) src/app/components/ThemeProvider.tsx\n   * [RTL 지원] ex) .storybook/preview.tsx\n   * [RTL 지원] RTL 스토리 작성\n * 분자 단위 이상 컴포넌트\n * 화면 스토리\n\n\n\n\nCSF V3 사용\n\nStorybook v6에선 StoryObj 사용을 권장하며 Storybook v7에서는 기존의 방식은 완전 deprecated되므로 미리\n마이그레이션하는게 좋다.\n\ntype ArgTypes = ComponentProps<typeof MyComponent>;\n\nexport default {\n  title: 'components/MyComponent',\n  component: MyComponent,\n  decorators: [],\n  parameters: {},\n  argTypes: {},\n  args: {},\n} as Meta<ArgTypes>;\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L105-L156\n[https://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L105-L156]\n\n\nCSF V3 PROPERTIES\n\n\nCOMPONENT\n\n * 해당 스토리 파일의 모든 스토리에서 기본적으로 렌더링 할때 사용 할 컴포넌트를 넣는다.\n\n * 어떠한 조작 없이 component: MyComponent 처럼 넣는것이 모범 사례.\n\n\nARGS\n\n * component 에 주입한 컴포넌트가 렌더링 될 때 주입될 props와 동일하다.\n\n * export default 로 내보내는 값인 경우 반드시 컴포넌트가 잘 동작할 수 있는 값을 넣어주도록 한다.\n   \n   * 모든 컴포넌트가 해당 값을 병합해서 사용하기 때문에 잘못된 값을 넣는 스토리는 아래와 같이 별도의 값을 넣어 override 한다.\n     \n     export const FailureDisplay: StoryObj<ArgTypes> = {\n       args: {\n         value: Infinity,\n       },\n     };\n\n\nARGTYPES\n\n * 해당 필드를 통해 애드온의 기능을 제어한다.\n\n * 애드온마다 지원하는 인터페이스가 다르니 필요한 애드온의 문서를 찾아서 사용해야 한다.\n\n * ex) actions addon을 이용해 컴포넌트의 args에 이벤트 핸들러를 주입하려는 경우 아래와 같이 한다.\n   \n   * export const EventHandle: StoryObj<ArgTypes> = {\n       argTypes: {\n         onClick: { action: true }, // shortcut. key의 이름과 동일한 이벤트 이름으로 주입한다.\n         onChange: { action: 'event name' },\n       },\n     };\n   \n   * argTypes가 없다면 아래와 같이 해야 한다.\n     \n     import { action } from '@storybook/actions-addon';\n     export const EventHandle: StoryObj<ArgTypes> = {\n       args: {\n         onClick: action('onClick'), // 이벤트 핸들러를 만들어 args를 통해 컴포넌트에 주입한다.\n         onChange: action('onChange'),\n       },\n     };\n\n\nPARAMETERS\n\n * 애드온에 필요한 값(설정 등)을 제공한다.\n\n\nDECORATORS\n\n * 컴포넌트를 렌더링 하기 전에 Wrapping 되는 컴포넌트.\n\n * 미들웨어와 비슷하다고 이해하면 쉽다.\n\n * 컴포넌트가 의존하는 provider 를 주입해야 하거나 컴포넌트가 렌더링 될 캔버스의 크기를 직접 조절 할 때 자주 사용한다.\n\n\nAPI MOCKING\n\n\n[API MOCKING] MSW를 사용한다.\n\n * [OJT][SW] MSW (Mock service worker)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284388447/OJT+SW+MSW+Mock+service+worker]\n\n * https://storybook.js.org/addons/msw-storybook-addon\n   [https://storybook.js.org/addons/msw-storybook-addon]\n\n * msw의 데코레이터는 특별한 경우가 아니라면 무조건 마지막으로 넣는다.\n   \n   * 그렇지 않으면 서비스 워커가 initialize 되기 전에 API mocking에 의존하는 코드가 동작하면 문제가 발생한다.\n     https://github.com/Ecube-Labs/haulla-back-office-front/pull/788#issuecomment-1131406768\n     [https://github.com/Ecube-Labs/haulla-back-office-front/pull/788#issuecomment-1131406768]\n     → 2번 항목에 해당\n\n * 전역에서 사용되는 데코레이터가 API mock에 의존하는 경우 msw handler가 전역에서 처리될 수 있게 preview.tsx에\n   작성한다.\n\n\n[API MOCKING] EXPORT DEFAULT 에 있는 MOCKING만으로 컴포넌트 사용에 문제가 없도록 한다.\n\n * 컴포넌트에서 사용되는 API를 모두 export default 에 모킹한다.\n\n * export default에 모킹된 내용은 컴포넌트를 사용하기 위해 이상적인 동작을 할 수 있는것만 넣는다.\n   (== 테스트가 성공하기 위한 API의 응답 값으로 모킹)\n\n\n[API MOCKING] ERROR MOCKING은 MSW HANDLERS를 OVERRIDE한다.\n\nexport default 에 있는 모킹은 모두 성공하는 시나리오를 위하기 때문에 에러 시뮬레이션을 위해서는 아래처럼 한다.\n\nexport default {\n  parameters: {\n    msw: {\n      handlers: {\n        login: rest.post('~~/auth', (req, res, ctx) => res(ctx.status(201), ctx.json({ token: '🏰⚽️' }))), // 성공\n        otherMocking: rest.get('~~', (req, res, ctx) => res(ctx.json({ ... }))),\n      },\n    },\n  },\n} as Meta<ArgTypes>;\n\nexport const Default: StoryObj<ArgType> = {};\n\nexport const LoginFaile: StoryObj<ArgTypes> = {\n  parameters: {\n    msw: {\n      handlers: {\n        login: rest.post('~~/auth', (req, res, ctx) => res(ctx.status(401), ctx.json({ errorMessage: '🧶패' }))), // 실패\n      },\n    },\n  },\n};\n\n\n[API MOCKING] MSW HANDLERS는 직접 참조한 컴포넌트만 상속받는다.\n\n// Menu.tsx\nfunction Menu() {\n  return (\n    ...\n    <NotificationPopupButton />\n  );\n}\n\n// Menu.stories.tsx\nimport NotificationPopupButtonStories from '../NotificationPopupButton.stories';\n\nexport default {\n  parameters: {\n    msw: {\n      handlers: {\n        ...NotificationPopupButtonStories.parameters.msw.handlers,\n      },\n    },\n  },\n};\n\n// PrivateLayout.tsx\nfunction PrivateLayout() {\n  return (<div>\n    <Menu />\n    ...\n  </div>);\n}\n\n// PrivateLayout.stories.tsx\nimport MenuStories from '../Menu.stories';\n\nexport default {\n  parameters: {\n    msw: {\n      handlers: {\n        ...MenuStories.parameters.msw.handlers,\n      },\n    },\n  },\n};\n\n위와 같이 컴포넌트가 가진 의존 관계와 동일하게 유지한다.\n\n\nDATA MOCKING\n\n\n[DATA MOCKING] 직접 참조하지 않는다.\n\n * 관련 PR\n   https://github.com/Ecube-Labs/haulla-back-office-front/pull/837#discussion_r905724032\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/837#discussion_r905724032]\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/274c.png]\n\nimport { account } from 'app/repositories/account-repository.mock';\n\nexport default {\n  ...\n  args: { account },\n} as Meta<ArgTypes>;\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nimport { account } from './data.mock';\n\nexport default {\n  ...\n  args: { account },\n} as Meta<ArgTypes>;\n\n\n[DATA MOCKING] XXXREPOSITORY.MOCK 에는 모델 타입을 지정해준다.\n\n * 관련 논의\n   https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r913318511\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r913318511]\n\n * https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r914412966\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r914412966]\n\n// invoice-repository.mock.ts\n\nimport { InvoiceModel } from '@models';\n\nexport const invoices: InvoiceModel[] = [\n  {\n    id: '220000203-2205',\n    ...\n  },\n  ...\n]\n\n\n[DATA MOCKING] 스토리 DATA.MOCK 에는 따로 타입을 지정하지 않는다.\n\n// screens/invoices/data.mock.ts\nimport { invoices } from '../../repositories/invoice-repository.mock';\n\nexport { invoiceDetail } from '../../respositories/invoice-repository.mock';\n\nexport const invoicesData = {\n  count: 512,\n  items: invoices,\n};\n\n\nDATE MOCKING\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2049703964/image-20220526-092530.png?api=v2]\n\n비고정 Date 표시하는 컴포넌트는 날짜가 바뀔 때마다 스냅샷이 변경된다. (2022-05-26 → 2022-05-27)\n\n코드 변경이 없는데 changes 잡히는 건 매우 이상함으로 Date를 모킹해준다.\n\n예시\n\n * https://github.com/Ecube-Labs/haulla-back-office-front/commit/3dbda8543fcfc11d2e8bb1d6e8fe2e906d73512b\n   [https://github.com/Ecube-Labs/haulla-back-office-front/commit/3dbda8543fcfc11d2e8bb1d6e8fe2e906d73512b]\n\n * https://github.com/Ecube-Labs/ceed/blob/main/packages/ui/src/PeriodPicker/PeriodPicker.stories.tsx#L12\n   [https://github.com/Ecube-Labs/ceed/blob/main/packages/ui/src/PeriodPicker/PeriodPicker.stories.tsx#L12]\n\n\nRTL 지원\n\n\n[RTL 지원] EX) SRC/APP/COMPONENTS/THEMEPROVIDER.TSX\n\nfunction ThemeProvider({ children }: { children: ReactNode }) {\n  const dir = useDir();\n  const theme = createAppTheme({ direction: dir });\n  const cachedPlugins = useMemo(\n    () =>\n      createCache({\n        key: `mui${theme.direction}`, // key가 바뀌지 않으면 컴포넌트가 다시 마운트 되기 전까지 ltr 스타일이 유지되어버린다.\n        stylisPlugins: theme.direction === 'rtl' ? [rtlPlugin] : [],\n        prepend: true,\n      }),\n    [theme.direction],\n  );\n\n  return (\n    <StyledEngineProvider injectFirst>\n      <CacheProvider value={cachedPlugins}>\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          {children}\n        </MuiThemeProvider>\n      </CacheProvider>\n    </StyledEngineProvider>\n  );\n}\n\nexport { ThemeProvider };\n\n\n[RTL 지원] EX) .STORYBOOK/PREVIEW.TSX\n\nimport { ThemeProvider } from '../src/app/components';\n\nexport const decorators = [\n  (story, { globals }) => {\n    const theme = createAppTheme({ direction: globals.direction });\n    return (\n      <I18nProvider key={globals.locale || 'en'} language={globals.locale || 'en'}>\n        <ThemeProvider>\n          <Router>{story()}</Router>\n        </ThemeProvider>\n      </I18nProvider>\n    );\n  },\n];\n\n\n데코레이터의 context로 주입되는 globals.locale 는\nhttps://storybook.js.org/addons/@ecubelabs/storybook-addon-intl\n[https://storybook.js.org/addons/@ecubelabs/storybook-addon-intl] 를 이용해 주입받는 값으로\n가정한다.\n\n\n[RTL 지원] RTL 스토리 작성\n\nhttps://storybook.js.org/addons/@ecubelabs/storybook-addon-intl/\n[https://storybook.js.org/addons/@ecubelabs/storybook-addon-intl/] 를 사용했다면 상단\n툴바에서 locale을 변경하여 direction이 바뀌는것을 시뮬레이션 할 수 있다.\n일반적인 스토리를 작성하고 나서 아래처럼 direction이 바뀔 수 있는 locale 값으로 파라메터를 넣어준다.\n\n히브리어, 아랍어만 direction을 ‘rtl’ 로 주입한다. 이 외의 언어에서도 rtl을 주입하고 싶다면 애드온의\ndirectionResolver 를 사용하면 된다.\n\nexport const Default: StoryObj<ArgTypes> = {};\n\nexport const RtlDefault: StoryObj<ArgTypes> = {\n  parameters: {\n    intl: { locale: 'he' },\n  },\n};\n\n\n\n\n분자 단위 이상 컴포넌트\n\n구분 없이 모두 작성한다.\n\n원자 단위 컴포넌트에서 mocking된 내용은 반복하여 작성하지 않고 반드시 상속받아 사용한다.\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L22-L34\n[https://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L22-L34]\n\n\n화면 스토리\n\nsrc/screens 에 존재하는 layout은 반드시 fullscreen으로 사용한다.\n\ncentered 를 기본 값으로 사용한다.\n\nexport default {\n  title: 'screens/LoginScreen',\n  component: LoginScreen,\n  parameters: {\n    layout: 'fullscreen',\n  },\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964"
  },
  {
    "pageContent": "[F][스토리북] 설정 가이드\n\n\nESLINT-PLUGIN-STORYBOOK 사용\n\nhttps://github.com/storybookjs/eslint-plugin-storybook#readme\n[https://github.com/storybookjs/eslint-plugin-storybook#readme]\n\n스토리 작성시 deprecated 된 문법이나 함수 사용을 막아주고 interaction test code 작성시 도움을 준다.\n\n\nMUI 5의 EMOTION과의 호환성 문제 해결\n\nhttps://github.com/storybookjs/storybook/blob/next/MIGRATION.md#emotion11-quasi-compatibility\n[https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#emotion11-quasi-compatibility]\n\nStorybook에서 사용하는 emotion은 10이지만 MUI에서 사용하는 emotion은 11이라 MUI+Storybook 조합을 사용하는\n경우 문제가 된다.\n\n.storybook/main.js 에 아래 내용을 추가해서 돌아가게 만들어야 한다.\n\nmodule.exports = {\n  features: {\n    emotionAlias: false,\n  },\n};\n\n\n@TESTING-LIBRARY/JEST-DOM 타입 확장\n\nv7에서는 기본적으로 포함될 수 있다. 정식 릴리즈 이후 확인 필요.\n\nhttps://www.npmjs.com/package/@types/testing-library__jest-dom\n[https://www.npmjs.com/package/@types/testing-library__jest-dom] 를 설치하고 아래와 같은\n타입 파일을 만들면 된다.\n\nimport type { TestingLibraryMatchers } from '@testing-library/jest-dom/matchers';\n\n// FIXME: storybook 7.0으로 업그레이드하면 제거\ndeclare module 'expect/build/types' {\n  export interface Matchers<R = void, T = {}> extends TestingLibraryMatchers<typeof expect.stringContaining, R> {}\n}\n\nhttps://github.com/Ecube-Labs/ccnx-front/pull/250#discussion_r926245115\n[https://github.com/Ecube-Labs/ccnx-front/pull/250#discussion_r926245115]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302214188"
  },
  {
    "pageContent": "Chromatic\n\nhttps://www.chromatic.com/ [https://www.chromatic.com/start] 에 GitHub로 한번 로그인하면\n사용 가능하다.\n\n크로매틱은 시각 테스트를 자동화해주는 도구이다.\n덤으로 스토리북도 배포해준다.\n\nUI Tests는 각 프로젝트의 Code owner가 책임을 갖고 관리한다.\n\n\n사용법\n\nPR을 올리고 좀 기다리면 아래처럼 Chromatic이 상태를 체크한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2093940774/image-20210812-100520.png?api=v2]\n\n좀 기다리면 이렇게 나온다.\n\nStorybook Publish 옆의 Details를 누르면 현재 형상의 스토리북을 들어가서 볼 수 있다.\n\nUI Tests 우측에 Details를 누르면 아래처럼 뜬다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2093940774/image-20210812-100658.png?api=v2]\n\n시각적으로 변경사항이 생겼을때 변경사항이 유효한지에 대한 리뷰를 기다리는 상태다.\n각 컴포넌트의 변경사항을 다 확인하고 승인이 되는 경우에만 PR 머지가 가능하다.\n\n화면마다 리뷰를 할 수 있는데 아래처럼 새로 변경된 화면이 이상하다면 Deny를 눌러 PR이 머지되지 못하게 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2093940774/image-20210820-014549.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2093940774"
  },
  {
    "pageContent": "i18n\n\nInternationalization (= i18n).",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159645697"
  },
  {
    "pageContent": "1. Format\n\n\nICU MESSAGE\n\nhttps://namu.wiki/w/ICU(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)\n[https://namu.wiki/w/ICU(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)]\n\nhttp://userguide.icu-project.org/formatparse/messages\n[http://userguide.icu-project.org/formatparse/messages]\n\nICU 메세지는 전 세계 대부분의 언어를 가능한 native스럽게 번역할 수 있는 많은 기능을 가진 도구입니다.\n\n다양한 pipe를 커스텀해서 사용 가능한 문법이 사용되고 있기 때문에, gettext랑 비교하면 확장성은 좋으나 기본적인 진입장벽이 비교적\n높다고 생각됩니다.\n\n\n사용하는 프로젝트\n\n * CCN Front\n\n\n\n\n\nGETTEXT\n\nhttps://www.gnu.org/software/gettext/manual/html_node/PO-Files.html\n[https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html]\n\nhttps://en.wikipedia.org/wiki/Gettext [https://en.wikipedia.org/wiki/Gettext]\n\nGettext는 GNU에서 공개한 다국어 지원을 위한 도구입니다.\n\ngettext 또한 큰 부족함 없이 다국어를 지원할 수 있습니다.\n\n\n사용하는 프로젝트\n\n * CCN Current",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159809537"
  },
  {
    "pageContent": "2. 번역 파일 작성 규칙\n\n\n준비물\n\n * BabelEdit [https://www.codeandweb.com/babeledit]\n   \n   * 별것 아닌데 생각보다 비싸다.\n\n * modules-lang(@ccn/lang) - GitHub [https://github.com/Ecube-Labs/modules-lang]\n\n\n\n\n\n번역 절차\n\n 1. BabelEdit으로 ./modules-lang/ccn-front/ccn-front.babel 파일을 불러온다.\n\n 2. 작업 내용의 이름으로 브랜치 이름 check out\n\n 3. 적절한(?) 구조 안에 필요한 번역 내용을 수정하고 저장한다.\n    \n    1. key의 컨벤션은 항상 UPPER CASE + kebab-case = UPPER-KEBAB-CASE (적당한 명칭을 못찾겠네요)\n\n 4. master로 PR을 날린다.\n\n 5. PR이 merge되고 나면 master 브랜치에서 아래와 같은 절차를 거친다.\n    \n    git checkout master\n    git pull origin master\n    npm version patch\n    npm publish # 모듈 서버에 배포\n    git push origin master # tag가 붙은 변경사항을 원격 서버에 올린다.\n    \n    \n    \n\n\n적절한 구조를 위한 규칙\n\n지금은 아래의 요구사항을 만족하도록 하고 있습니다.\n필요하면 새로운 규칙을\n\n 1. 특정 워딩을 사용하는 목적에 맞게 namespace를 구성해야 한다.\n    \n    * 아래의 경우, 한국어는 번역된 결과가 같을수 있다. 그러나 언어는 대상에 따라 항상 다를수 있음을 염두에 둬야한다.\n      \n      * 올바른 예 \n        \n        * \"BIN.COUNT\" => \"{count}개\" \n        \n        * \"LIST.ITEM.COUNT\" => \"{count}개\"\n        \n        * \"VEHICLE.COUNT\" => \"{count}대\" → 한글에서도 다를수 있는 예시.\n      \n      * 바람직하지 않은 예\n        \n        * \"COUNT\" => \"{count}개\" → 모든 페이지에서 공통적으로 사용한다면, 특정 언어 사용자에겐 좋지 않은 결과물이\n          제공될수 있다.\n\n 2. 1번의 경우로 인해 같은 번역결과가 있을수 있으며, 이로 인해 중복을 허용한다.\n    \n    \n    * 그러나 우후죽순 늘어나도록 관리하면 안된다. 최대한 많은것을 찾아보고 고려해야 한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159907871"
  },
  {
    "pageContent": "[CC] 번역 절차\n * 번역을 위해 필요한것\n * 번역 키 추가하는 방법\n * 번역 키 수정하는 방법\n   * 1. Poedit을 열어 “번역 편집”을 누른다.\n   * 2. 원하는 언어 파일을 연다.\n * 새 언어 추가하는 방법\n   * 1. Poedit을 열어 “새 번역 만들기”를 누른다.\n   * 2. 원하는 언어의 언어 코드(2-digit) 입력\n   * 3. 다 번역하면 된다.\n\n\n번역을 위해 필요한것\n\n * Poedit https://poedit.net/download [https://poedit.net/download]\n\n * Git\n\n * https://github.com/Ecube-Labs/ccn-current\n   [https://github.com/Ecube-Labs/ccn-current] clone\n\n * https://github.com/Ecube-Labs/modules-lang\n   [https://github.com/Ecube-Labs/modules-lang] clone\n\n\n\n\n번역 키 추가하는 방법\n\nTODO…\n\n\n번역 키 수정하는 방법\n\n\n1. POEDIT을 열어 “번역 편집”을 누른다.\n\n\n2. 원하는 언어 파일을 연다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1397882885/image-20210218-012307.png?api=v2]\n\n여기서 수정하면 된다.\n\n\n새 언어 추가하는 방법\n\n\n1. POEDIT을 열어 “새 번역 만들기”를 누른다.\n\n템플릿은 ccn-current/app/translation/po/template.pot 파일을 선택하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1397882885/image-20210218-005405.png?api=v2]\n\n\n2. 원하는 언어의 언어 코드(2-DIGIT) 입력\n\nhttps://www.sitepoint.com/iso-2-letter-language-codes/\n[https://www.sitepoint.com/iso-2-letter-language-codes/] 이런거 참고해서 원하는 언어 코드 입력\n\n\n3. 다 번역하면 된다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1397882885"
  },
  {
    "pageContent": "[React] React.memo\n\n * https://alexsidorenko.com/blog/react-render-always-rerenders/\n   [https://alexsidorenko.com/blog/react-render-always-rerenders/]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336920909"
  },
  {
    "pageContent": "[React] Profiling\n\n렌더링 할 때 30ms가 넘으면 Frame drop 발생\n\n> If your Javascript is slow it might cause “frames to be dropped” which means\n> computing a frame in more than 30 ms.\n> \n> If a React component update is triggered then the entire sub tree needs to be\n> rendered in less than 30ms.\n> \n> ref: https://nosleepjavascript.com/react-performance/\n> [https://nosleepjavascript.com/react-performance/]\n\n그래서 프레임드랍이 발생한다면 React profiler로 30ms가 넘는 원인을 찾아 해결하는것이 좋다.\n\n\n1. PROFILER로 FRAME DROP 발생하는 부분 캡쳐\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/2021-06-03%2011-28-10.2021-06-03%2011_29_44.gif?api=v2]\n\n이 도구가 없다면\nhttps://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\n[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi]\n을 설치하면 된다.\n\n\n2. 우측 상단에 있는 커밋 확인\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/image-20210603-022139.png?api=v2]\n\n다시 렌더링하지 않는 0.1ms 이하의 회색 커밋이 많아서 찾기 힘들다면 톱니바퀴버튼을 눌러 설정에서 필터링할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/image-20210603-022608.png?api=v2]\n\n\n3. 원인 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/image-20210603-022330.png?api=v2]\n\n위 사진에서는 리렌더링이 불필요한 Table 컴포넌트가 Formik Context 컴포넌트 안에 들어있기 때문에 input에 데이터를\n입력할때마다 다시 렌더링하는 문제가 발생하는것을 볼 수 있다.\n\n한 커밋당 다시 그리는데 17ms정도를 잡아먹는 Table을 Formik 컴포넌트 바깥으로 빼고 나니 문제가 해결됐다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1880621383"
  },
  {
    "pageContent": "[H][F] 언제 Memo를 써야 하는가?\n\n\n\nhttps://stackblitz.com/edit/react-ts-gouykr\n[https://stackblitz.com/edit/react-ts-gouykr]\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./style.css\";\n\nfunction Row(props) {\n  return (\n    <div onClick={() => props.onClick(props.item.id)}>\n      <div> name {props.item.name}</div>\n      <div> message : {props.item.message} </div>\n    </div>\n  );\n}\n\nconst MemoRow = React.memo(Row);\n\nfunction Table(props) {\n  return (\n    <div style={{ color: \"black\" }}>\n      {props.items.map(d => props.renderItem(d))}\n    </div>\n  );\n}\n\nfunction App() {\n  const [count, setCount] = React.useState(0);\n  const [dummy, setDummy] = React.useState([\n    { id: 1, name: \"11111\", message: \"hello\" },\n    { id: 2, name: \"22222\", message: \"world\" },\n    { id: 3, name: \"33333\", message: \"message\" },\n    { id: 4, name: \"44444\", message: \"react\" },\n    { id: 5, name: \"55555\", message: \"component\" }\n  ]);\n\n  const handleOnClick = id => {\n    setDummy(dummy =>\n      dummy.map(d => (d.id !== id ? d : { ...d, message: d.message + \"hello\" }))\n    );\n  };\n\n  const handleCountOnClick = () => setCount(c => c + 1);\n\n  return (\n    <div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <Table\n        items={dummy}\n        renderItem={item => <Row item={item} onClick={handleOnClick} />}\n      />\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n\n\n\n\n위 코드는 Row를 클릭할때마다, 해당 Row의 message 가 변경되어, Row 전체가 리렌더링 되는 코드이다.\n\nRow를 클릭할때마다 부모 컴포넌트인 App 에서 State를 변경하기때문에, Table의 children 컴포넌트들은 모두 리렌더링이 된다.\n왜냐하면, Table의 items 데이터가 변경 되었기 때문이다. 여기서 문제는 변경되지 않은 Row도 리렌더링이 된다는 것이다.\n\n\n\n\n왜 그런거야?? 변경이 안되면 리렌더링이 안되어야 하는 거 아니야???\n\nReact는 DOM을 새로 그릴지 말지, 해당 props 값들을 Shallow Compare를 해서 정한다.\n\n{a :1 } == {a: 1} // false\n[{a :1 } == {a: 1}] === [{a :1 } == {a: 1}] // false\n\nReact에서 위처럼 아무리 값이 같아도 같은 값으로 인식하지 않는다.\n\n\n그럼 같은 값으로 인식하게 어떻게 하는데?\n\nReact.Memo를 사용하면 된다.\n\n <Table\n        items={dummy}\n        renderItem={item => <Row item={item} onClick={handleOnClick} />}\n      />\n에서\n\n<Row item={item} onClick={handleOnClick} />\n부분을\n<MemoRow item={item} onClick={handleOnClick} /> 로 변경해보자.\n\n\n\n\n어떤 원리로 작동하는 거야???\n\nCache를 생각해보자.\n\nfunction Method(value) { \n  return value * 10 / 3 + 2 + 4 + 5 + 6 * {... 복잡한 계산 로직}\n}\n\n위 처럼 함수가 있다고 치자.\n\n만약 Method 에 어떠한 value를 넣으면 어떠한 로직에 의해서 결과를 주는 것이다. 해당 Method에 Cache 기능을 구현하면,\nMethod의 결과값만 받으면 되기에, Method 안에 로직을 거칠 필요가 없다.\n\nReact Memo도 같다. prop가 같으면 같은 Component를 넘기기 때문에 re-render가 되지 않는다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1072267478"
  },
  {
    "pageContent": "[F] HTTP Cache\n * HTTP Caching?\n   * 문제점\n   * 해결방법\n     * Cache Busting with Webpack\n     * http response 헤더 설정\n       * Nginx 예시\n     * 꼼수(?)\n\n\nHTTP CACHING?\n\n웹 사이트에서 네트워크 요청 시 이전에 가져왔던 리소스들을 재사용함으로써 성능을 향상시키기 위해 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2415362049/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202022-05-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.43.55.mov?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2415362049/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202022-05-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.40.39.mov?api=v2]\n\n304: 요청된 리소스를 재전송할 필요가 없으므로 캐싱된 리소스를 사용함\nmemory cache: RAM\ndisk cache: HDD\n\n\n\n\n문제점\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2415362049/image-20220511-034603.png?api=v2]\n\n코드 수정사항을 배포 후 브라우저 캐시 상태에 따라 서로 다른 화면을 보는 경우가 있다.\n원인은 이전 버전의 index.html 이 배포 전의 번들.js 파일을 불러오려고 하기 때문이다.\n\n\n\n\n해결방법\n\n\nCACHE BUSTING WITH WEBPACK\n\n// webpack.config.js\n\noutput: {\n    filename: '[name].[hash].js', // main.2af50ebc6c7e04b7b3e4.js\n},\n\n이렇게 하면 내용이 수정될때마다 빌드 output에 template string\n[https://webpack.js.org/configuration/output/#template-strings]에 따라 해시값이 붙으므로\n브라우저에서는 파일이 변경되었음을 인식하고 새로운 파일을 받는다.\n(웹팩 설정만으로는 Cache Busting이 되지 않는다. index.html이 캐싱되었기 때문인가?)\n\n\nHTTP RESPONSE 헤더\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#controlling_caching]\n설정\n\n캐싱을 disable or 요청 시 항상 revalidate를 하도록 http response에 헤더를 설정한다.\n\n(헷갈리는 헤더 설정에 대한 설명글\n[https://www.zerocho.com/category/HTTP/post/5b594dd3c06fa2001b89feb9])\n\nNGINX 예시\n\nserver {\n    location / {\n        ...\n    \n        # disable cache\n        add_header Cache-Control 'no-store, no-cache, must-revalidate';\n        add_header Pragma 'no-cache';\n        expires off;\n        etag off;\n        \n        # or\n        \n        # revalidate cache whenever using it\n        add_header Cache-Control 'no-cache';\n        add_header Pragma 'no-cache';\n    }\n}\n\n\n꼼수(?)\n\n// 계속 다른 파라미터로 호출해서 캐싱을 방지하는 방법\nconst t = new Date().valueOf()\naxios.get(`/someapi?t=${t}`)\n\n// CDN에 있는 스크립트를 포함시킬 때도 실제로 사용하는 방법이다\n<script src=\"jquery.js?t=1665113597032\" />\n\n// 웹팩 같은 번들러를 사용할 경우 timestamp 가 아니라 번들 hash 를 파라미터로 사용하기도 한다\n<script src=\"app.js?h=commithash\" />\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2415362049"
  },
  {
    "pageContent": "[F][Cypress] 프로젝트 설정\n\n\n1. 필수 설치\n\n * cypress\n\n * eslint-plugin-cypress\n\n * @testing-library/cypress\n   \n   * https://testing-library.com/docs/cypress-testing-library/intro/\n     [https://testing-library.com/docs/cypress-testing-library/intro/]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2297626673"
  },
  {
    "pageContent": "[H][F] 액션 개발 - Deprecated\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n * 액션 선언\n   * 비동기 액션\n * 컨벤션\n * 개발 대상\n   * 웹\n   * 앱\n     * 주의 사항\n     * Snippet\n       * VS code\n\n\n액션 선언\n\ntypesafe-actions [https://github.com/piotrwitek/typesafe-actions] 를 이용한다.\n\n\n비동기 액션\n\ncreateAsyncAction 를 이용해 액션을 선언한다.\n\nex)\n\nimport { createAsyncAction } from 'typesafe-actions';\n\nexport const fetchUserAsync = createAsyncAction(\n  'FETCH_USER_REQUEST',\n  'FETCH_USER_FULFILLED',\n  'FETCH_USER_REJECTED',\n)<number, User, Error>();\n\n * typesafe-actions 를 사용하면 앱애서 string constant 를 사용할 일이 없으므로 그냥 string literal 로\n   선언해도 무방하다.\n\n * https://github.com/piotrwitek/typesafe-actions#constants\n   [https://github.com/piotrwitek/typesafe-actions#constants]\n\n * createAsyncAction 의 generic parameter 는 순서대로 비동기 처리 시작 action payload, 비동기 처리\n   완료 payload 그리고 비동기 처리 실패 payload 의 타입이다.\n\n\n\n\n컨벤션\n\nAsynchronous Action Creator\n\nSynchronous Action Creator\n\nnaming\n\nReference [https://medium.com/@kylpo/redux-best-practices-eef55a20cc72]\n\nReference\n[https://gist.github.com/datchley/4e0d05c526d532d1b05bf9b48b174faf#naming-things-1]\n\nverbNoun\n\nex) addTodo\n\nverbNoun\n\nex) addTodo\n\npostfix\n\n관련 논의\n[https://github.com/Ecube-Labs/haulla-mobile/pull/354#issuecomment-547789069]\n\nAsync\n\nex) addTodoAsync\n\n(none)\n\nex) addTodo\n\ntype\n\nAction Creator 에서 Async postfix 를 제거하고 SCREAMING_SNAKE_CASE + Action Type\npostfix (REQUEST, FULFILLED, REJECTED) 를 붙인다.\n\nex)\n\n * FETCH_USER_REQUEST - 비동기 요청 시작전에 발행\n\n * FETCH_USER_FULFILLED - 비동기 요청이 성공하면 발행\n\n * FETCH_USER_REJECTED - 비동기 요청이 실패하면 발행\n\n\n\n * action creator 의 이름은 self descriptive 해야 한다.\n   \n   * updateUser (bad)\n   \n   * changeUserName (good)\n\n\n개발 대상\n\n\n웹\n\nsrc/app/actions.ts\n\n\n앱\n\nsrc/app/common/actions.ts or\n\nsrc/app/generator/actions.ts or\n\nsrc/app/hauler/actions.ts\n\n\n\n\n주의 사항\n\n\n\n * epic 작성시 아래와 같은 방식으로 하지 않는다.\n\n\n\nNo\n\n map(fetchHaulerUserAsync.success)\n\nOK\n\nmap((data) => fetchHaulerUserAsync.success(data)),\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/231112851/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-12-23%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.08.07.png?api=v2]\n\n * -     \"meta\": undefined,\n   +     \"meta\": 0,\n\n1번째 방식으로 하면 jest에서 위와 같은 오류가 발생한다. (\"typesafe-actions\": \"^4.4.2\", )\n\n\n\n\nSNIPPET\n\n\n\nVS CODE\n\n * User Snippets under File > Preferences (Code > Preferences on macOS) >\n   typescript\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/231112851/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-07%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.55.00.png?api=v2]\n     \n     \n   \n   * 아래를 추가해준다.\n\n{\n\t\"Create Action type ( Fulfilled ,Rejected) \": {\n\t\t\"prefix\": \"createAsyncAction\",\n\t\t\"body\": [\n\t\t\t\"export const $1Async = createAsyncAction(\",\n\t\t\t\"'$2_REQUEST',\",\n\t\t\t\"'$2_FULFILLED',\",\n\t\t\t\"'$2_REJECTED',\",\n\t\t\t\")<{}, {}, Error>();\",\n\t\t],\n\t\t\"description\": \"createAsyncAction\"\n\t},\n}\n\nts파일에서만 가능하다. tab을 누르면 이동이 가능하다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/231112851"
  },
  {
    "pageContent": "[H][F] 에픽 개발 - Deprecated\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n * 명명 규칙\n\n\n명명 규칙\n\n에픽의 의도가 잘 드러나는 이름을 사용한다.\n\n다음과 같은 화면 기획을 보면 수거 요청 편집이 성공한 경우 이전 화면으로 돌아가도록 기획 되어 있다.\n\n이 경우 updateCollection 이 아닌 updateCollectionAndClose 같이 에픽의 의도가 잘 드러나는 이름을 선택해야\n한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/241926160/image-20191213-065446.png?api=v2]\n\n\n\n * filter안에는 isActionOf(xxxxx) 를 사용한다.\n   \n   * isActionOf - action-creator로 만들어진 인스턴스인지 확인한다.\n   \n   * isOfType - type의 constant가 같은지 확인한다.\n     \n     * isOfType(types.WITH_TYPE_ONLY)(typeOnlyAction);\n     \n     * isOfType([types.WITH_TYPE_ONLY, types.WITH_PAYLOAD])(typeOnlyAction);\n   \n   * getType - type의 literal이 같은지 확인한다.\n     \n     * 예)\n       \n       * getType(createAction('CREATE_ACTION')());\n       \n       * getType(createCustomAction('CREATE_CUSTOM_ACTION'));\n\n\n\nex)\n\nexport const fetchIndividualServicesEpic: Epic = (\n  action$: ActionsObservable<Actions>,\n  _,\n  { individualServiceService }: RootDependency,\n) =>\n  action$.pipe(\n    filter(isActionOf(fetchIndividualServicesAsync.request)),\n    map((action) => action.payload),\n    switchMap(({ page, limit, filter }) =>\n      individualServiceService.paginate(page, limit, filter).pipe(\n        map(({ items, count }) => fetchIndividualServicesAsync.success({ items, count, page, limit })),\n        catchError((err) => {\n          const errMsg = errorToMessage(err);\n          return of(fetchIndividualServicesAsync.failure(errMsg), enqueueSnackbar(errMsg, { variant: 'error' }));\n        }),\n      ),\n    ),\n  );",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241926160"
  },
  {
    "pageContent": "[H][F] 리듀서 개발 - Deprecated\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n\n변수명\n\n * XXXReducer로 한다\n   \n   * sensorDetailsReducer\n   \n   * notificationsReducer\n\n\n\n\n\n\n\n\nREDUCER 구조\n\n * 어떤식으로 할지 정해야 한다.\n   \n   * 찰리 선생님이 정해주신다고 합니다.\n\n\n\n\n\n.. TODO\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/235307060"
  },
  {
    "pageContent": "[H][F] 컴포넌트 개발 - deprecated\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/664470139"
  },
  {
    "pageContent": "[F] 서비스 개발\n\nAngular 와 컨벤션을 맞추기 위해 이름을 서비스로 했었는데 Angular 는 사용하지 않을 예정이므로 이 가이드는 폐기한다.\n\n\n\n * 서비스?\n * 서비스 선언\n   * API 호출 서비스\n * 서비스 구현\n * 컨벤션\n   * Class 이름\n   * POJO 이름\n   * Method 이름\n   * Path, 파일명\n   * Export\n\n\n서비스?\n\nhttps://en.wikipedia.org/wiki/Service_(systems_architecture)\n[https://en.wikipedia.org/wiki/Service_(systems_architecture)]\n\n한마디로 정의하기는 힘든것 같다. 그냥 비슷한 기능을 하는 것들을 묶어서 추상화 한 것이라 생각하면 된다.\n\n서비스를 통해 관심사를 분리해서 앱의 응집도를 떨어뜨린다.\n\nex) MessagingService\n\n * 메시지 조회, 메시지 발송 등의 기능을 제공.\n\n * MessagingService 를 사용하는 사람은 실제 구현을 몰라도 서비스를 통해 메시지 관련 기능을 이용할 수 있다.\n\n\n\n웹/앱에서는 주로 API 호출을 서비스로 추상화 한다.\n\n\n서비스 선언\n\nclass POJO 를 이용해 선언한다.\n\nclass POJO 를 이용해야 DI (Dependency Injection) 이 편하다. 다른 이유는 없음.\n\n\nAPI 호출 서비스\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/231702567/image-20191031-034201.png?api=v2]\n\nAPI 문서를 보면 카테고리가 나뉘어 있다.\n\n카테고리마다 서비스가 하나씩 존재해야 한다.\n\n카테고리는 plural 형태이므로 s 는 제거하고 서비스를 만든다.\n\nex)\n\n * UserService\n\n * ServiceAccountService\n\n데이터 모델마다 API 호출 서비스가 존재해야 한다.\n\n언제 새로운 모델을 선언해야 하는가?\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/230719566/H+F#%EC%96%B8%EC%A0%9C-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%84%A0%EC%96%B8%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80]\n참고.\n\n\n서비스 구현\n\n모든 서비스 method 는 observable 을 반환하도록 개발해야 하는데 이는 https://recoiljs.org/\n[https://recoiljs.org/] 의 아이디어를 차용하기 위함이다.\n\n// How Recoil works\nconst xState = atom({ ... })\n\n// Component A\nfunction A() {\n  const x = useRecoilValue(xState)\n  return (<div>{x}</div>)\n}\n\n// Component B\nfunction B() {\n  const x = useRecoilValue(xState)\n  return (<div>{x}</div>)\n}\n\nReact 의 useState 와는 다르게 위의 코드에서 Component A, Component B 는 x 라는 state 를 공유한다.\n그래서 x 가 바뀌면 A, B 모두 다시 렌더링 된다. Observable 을 이용하면 이와 비슷하게 구현이 가능하다.\n\n// Mimic Recoil using Observable\nfunction useX() {\n  const x$: Observable = service.get(); \n  return x$;\n}\n\n// Component A\nfunction A() {\n  const x = useX()\n  return (<div>{x}</div>)\n}\n\n// Component B\nfunction B() {\n  const x = useX()\n  return (<div>{x}</div>)\n}\n\nComponent A와 Component B가 획득한 observable 이 동일한 value 를 push 해준다면 이는 Recoil 과\n개념적으로 동일한 코드가 된다.\n\n\n컨벤션\n\n\nCLASS 이름\n\n이름은 다른 개발자들과 의논해서 정하도록 한다.\n\nPascalCase.\n\n\nPOJO 이름\n\n이름은 다른 개발자들과 의논해서 정하도록 한다.\n\ncamelCase.\n\n\nMETHOD 이름\n\n동사를 이용한다.\n\n서비스의 구체적인 구현 방식을 노출하지 않도록 한다.\n\ncamelCase.\n\napprove(id);     // good\npostApprove(id); // bad. HTTP 요청을 보내는게 method 이름에 노출 된다.\n\n\n\nhttps://cloud.google.com/apis/design/naming_convention\n[https://cloud.google.com/apis/design/naming_convention] 참고해서 작성한다\n\n\n\n\n\n\n\n\nPATH, 파일명\n\nkebab-case.\n\n\nEXPORT\n\ndefault export 하지 않고 모두 named export 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/231702567"
  },
  {
    "pageContent": "[F] UserRepository 개발\n\nUserRepository 는 항상 다음과 같은 형태여야 한다.\n\n단, UserRepository 는 Singleton.\n\ninterface UserRepository {\n  /**\n   * 자기 자신의 정보 조회\n   * 로그인 -> emit UserModel, 로그아웃 -> emit undefined\n   */\n  getSelf(): BehaviorSubject<User | undefined>\n  \n  /**\n   * 로그인\n   */\n  signIn(userId: string, password: string): Observable<void>\n  \n  /**\n   * 자동 로그인.\n   * 토큰이 없거나 만료 되었으면 자동 로그인은 실패한다.\n   * 로그인 -> emit UserModel, 로그아웃 -> emit undefined\n   */\n  autoSignIn(): Observable<User | undefined>\n  \n  /**\n   * 로그아웃\n   */\n  signOut(): Observable<void>\n  \n  /**\n   * 사용자 정보 변경\n   */\n  update(/* 프로젝트마다 다름 */): Observable<User>\n}\n\n\n\n * getSelf\n * signIn\n * autoSignIn\n * signOut\n\n\nGETSELF\n\nBehaviorSubject 이므로 다음과 같이 동작한다.\n\n * getSelf 구독 시 자기 자신의 정보가 있으면(로그인 상태이면) 해당 값이 즉시 구독 됨. 없으면 undefined 가 구독 됨.\n\n\nSIGNIN\n\n로그인 성공하면 레파지토리에 사용자를 추가해야 한다.\n\nuserRepository.getSelf().subscribe(user => console.log('Self': user));\n// Self: undefined\n\nuserRepository.signIn('moongchi', 12345).subscribe();\n// Self: { name: moongchi, ... }\n\n\nAUTOSIGNIN\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/870416409/image-20210111-170335.png?api=v2]\n\n위의 자동로그인을 의미하는게 아니고 페이지 최초 접근 시 토큰/세션/… 이 있으면 자동으로 로그인 시켜야 함을 의미한다.\n\n로그인과 동일하게 자동로그인이 성공하면 레파지토리에 사용자를 추가해야 한다.\n\nautoSignIn 구독 시 유효한 토큰이 존재하면 사용자가 구독되고 유효한 토큰이 존재하지 않으면 undefined 가 구독 되도록 개발해야\n한다.\n\n\nSIGNOUT\n\n로그아웃 성공하면 레파지토리에서 사용자를 제거해야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/870416409"
  },
  {
    "pageContent": "[Deprecated] Flux convention\n\n\n\n * Actioin\n   * Name\n   * Type\n * Epic\n   * Name\n * Reducer\n   * 분리 기준\n\n\n\n\n\n\n\nACTIOIN\n\n\nNAME\n\n동작prefixpostfix규칙예시(인증|조회) 요청fetch\n\n-{prefix}{모델명 | 액션의 목적}{postfix}fetchIndividualServices(인증|조회) 조회\n완료FulfilledfetchIndividualServicesFulfilled(인증|조회) 조회\n실패RejectedfetchIndividualServicesRejected업데이트 요청update\n\n-updateCollectionStatus업데이트 완료FulfilledupdateCollectionStatusFulfilled업데이트\n실패RejectedupdateCollectionStatusRejected아직 다른 액션이 딱히 필요하지 않았음. 그러나 RN과 크게 다르지\n않을것으로 예상\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE\n\nexport const [ACTION_NAME_WITH_SNAKE_UPPER_CASE] = '[ACTION_NAME_WITH_SNAKE_UPPER_CASE]_REQUEST'; // 요청만 예외. why? 그냥 로그 볼때 편의상.\nexport const [ACTION_NAME_WITH_SNAKE_UPPER_CASE] = '[ACTION_NAME_WITH_SNAKE_UPPER_CASE]';\n\n// examples\nexport const FETCH_COLLECTION_REQUEST = 'FETCH_COLLECTION_REQUEST';\nexport const FETCH_COLLECTION_FULFILLED = 'FETCH_COLLECTION_FULFILLED';\nexport const FETCH_COLLECTION_REJECTED = 'FETCH_COLLECTION_REJECTED';\n\n\n\n\n\nEPIC\n\n\nNAME\n\n특별한 이유가 없다면 요청의 액션 이름을 camelCase를 따라서 그대로 작성하여 Epic만 Postfix로 추가한다.\n\nfetchIndividualServiceDetailEpic // fetchIndividualServiceDetail의 에픽\n\n\n\n\n\nREDUCER\n\n\n분리 기준\n\n목록, 상세 정보의 컬렉션으로 나눈다.\n\n레벨 2에 정의해놓은 프로퍼티를 반드시 갖는다.\n다만 아이템을 가져온적이 한번도 없다면 관련 프로퍼티는 다 undefined인것을 허용한다.\n\n * IndividualServices - 목록 아이템\n   * items?\n     * 모델 정보[]\n   * count?\n   * limit?\n   * page?\n   * errMsg\n   * isLoading\n * individualServiceDetails - 상세 정보 컬렉션 { [key: ModelKeyType]: Model }\n   * Id를 키로 갖는 object collection이다.\n     * isLoading\n     * item\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/208306201"
  },
  {
    "pageContent": "[H][F] 스마트 컴포넌트 개발\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n * 서비스 호출\n   * 최초 설계\n   * 두번째 설계\n   * 최종 설계\n * Event Cancellation\n * setState\n   * callback\n * 컨벤션\n   * PropTypes\n\n\n서비스 호출\n\nSmart Components (A.K.A. Containers) 에서는 서비스를 호출해도 된다.\n\n서비스 호출 결과 / 에러를 액션을 통해 스토어로 전달해도 된다.\n\n\n최초 설계\n\nhttps://stackoverflow.com/questions/42985478/react-and-redux-redirect-after-action/42985812#42985812\n[https://stackoverflow.com/questions/42985478/react-and-redux-redirect-after-action/42985812#42985812]\n\n 1. 비동기 action 호출 with screenId\n    \n    1. // component.js\n       handle() {\n         doSomethingAsync(screenId);\n       }\n\n 2. 에픽이 비동기 액션 처리\n    \n    1. 비동기 액션 성공 → fulfilledAction(screenId, result)\n    \n    2. 비동기 액션 실패 → rejectedAction(screenId, error)\n    \n    3. 리듀서에서 FULFILLED, REJECTED 관련 스토어 업데이트\n       \n       // reducer.js\n       switch (action.type) {\n         case 'FULFILLED':\n           results[screenId] = action.payload;\n           break;\n         case 'REJECTED':\n           errors[screenId] = action.payload;\n           break;\n       }\n    \n    4. 컴포넌트에서 스토어에 있는 결과값 or 오류값 바탕으로 후속 작업\n       \n       // component.js\n       // getResult() and getError() are selectors.\n       render() {\n         if (getResult(screenId)) {\n           // publish success related actions\n         }\n         if (getError(screenId)) {\n           // publish error related actions\n         }\n       }\n\nSO 에서 best practice 로 채택된 답변이긴 하지만 이 코드는 전체적인 복잡도를 너무 증가 시킨다.\n\n그래서 이 방식은 사용하지 않는다.\n\n\n두번째 설계\n\n 1. 비동기 액션 호출 with screenId and callback\n    \n    1. callback 에서 액션 호출 결과값 or 오류값 바탕으로 후속 작업\n    \n    2. // component.js\n       handle() {\n         doSomethingAsync(screenId, (error, result) => {\n           if (error) {\n             // publish error related actions\n           }\n           if (result) {\n             // publish success related actions\n           }\n         })\n       }\n\n이 방법은 두가지 문제점이 있다.\n\n 1. redux style guide 위반\n    \n    1. https://redux.js.org/style-guide/style-guide/#do-not-put-non-serializable-values-in-state-or-actions\n       [https://redux.js.org/style-guide/style-guide/#do-not-put-non-serializable-values-in-state-or-actions]\n    \n    2. serializable 하지 않은 것을 액션으로 넘기면 몇몇 유용한 디버깅 기법을 사용할 수 없다.\n\n 2. raw state 를 컴포넌트로 노출\n    \n    1. 리듀서는 비동기 액션 결과값을 그대로 저장하기도 하지만 결과값을 가공해서 저장하기도 한다.\n    \n    2. 그런데 위와 같이 callback 을 parameter 로 넘겨버리면 리듀서가 결과값을 가공하기 전의 raw state 가\n       컴포넌트로 노출될 수 있다.\n       \n       1. redux-observable 을 보면 다음과 같이 에픽에서 state 값을 가져올 수 있다. (다른 비동기 액션 라이브러리도\n          모두 유사함)\n       \n       2. 그러면 액션의 파라미터로 전달 된 callback 을 통해 비동기 액션의 결과를 처리하기 전 state 를 그냥 넘겨버릴\n          위험이 있다.\n          \n          const pingEpic = (action$, state$) => action$.pipe(\n            ofType(PING),\n            map((action) => {\n              action.callback(state$);\n              return pongAction();\n            })\n          );\n    \n    3. 그러면 callback 을 통해 가져온 값과 selector 를 통해 가져온 값의 불일치가 발생할 수 있으므로 위와 같이 하면\n       안된다.\n\n\n최종 설계\n\n 1. 비동기 동작은 서비스가 담당하게 하고 컴포넌트에서 서비스를 호출한다.\n\n 2. 서비스의 결과값 or 오류값을 처리하기 위한 액션을 발행한다.\n    \n    1. // component.js\n       handle() {\n         doSometingService()\n           .then(result => {\n             // publish success related actions\n           })\n           .catch(error => {\n             // publish error related actions\n           });\n       }\n\n위의 코드는 redux-thunk, redux-saga, redux-observable or whatever 에 구현되어야 하는 로직을\nSmart Component 단으로 내린 것이다.\n\n이 방식은 다음의 문제를 해결 한다.\n\n 1. 최초 설계에서 코드 복잡도가 너무 높아지는 문제 해결\n    \n    1. 최초 설계와 비교해보면 reducer.js, component.js::render 에 추가 구현이 필요 없다.\n\n 2. 두번째 설계에서 raw state 를 컴포넌트로 노출하는 문제\n\n\nEVENT CANCELLATION\n\n컴포넌트가 동작하면서 구독됐던 옵저버블을 취소하고 싶다면 아래의 패턴을 따르면 된다.\n\nclass Page {\n  unmountEvent$ = new Subject<void>();\n\n  fetchUsers() {\n    userService.getUsers().pipe(\n      takeUntil(this.unmountEvent$),\n    ).subscribe();\n  }\n\n  componentWillUnmount() {\n    this.unmountEvent$.next();\n  }\n}\n\n\n\nSubject와 takeUntil 오퍼레이터를 통해 원하는 옵저버블의 구독을 끊는 방법이다.\n\n주의할점은, takeUntil 오퍼레이터가 pipeline의 마지막 오퍼레이터가 되어야한다는 점입니다.(특수한 경우를 제외) 그렇지 않으면 일부\n구독이 유지되는 경우가 발생할 수 있습니다.\n\n\nSETSTATE\n\n\nCALLBACK\n\nsetState 함수는 두번째 인자로 callback 을 받는다.\n\nsetState 는 비동기적으로 동작하기 때문에 실제로 state 가 변경된 경우에 callback 이 실행 된다.\n\n다음과 같이 setState 를 동기적으로 사용하면 제대로 동작하지 않는다.\n\nhandleClick = () => {\n  this.setState({ x: 1 })\n  this.state.x === 1; // setState 는 동기적으로 동작하지 않기 때문에 false\n}\n\nstate 가 변경된 뒤 결과를 받아서 뭔가 하려면 다음과 같이 해야 한다.\n\nhandleClick = () => {\n  this.setState({ x: 1 }, () => {\n    this.state.x === 1; // true\n  })\n}\n\n\n컨벤션\n\n\nPROPTYPES\n\n\n\nisXXXX 형태로 사용하지 않는다.\n\nisVisible => visible\n\nisOpen => open\n\nisShow => show\n\n\n\nex)\n\n\n\ntype PropTypes = {\n  title: JSX.Element;\n  handleConfirm: () => void;\n  ...\n  ...\n  open: boolean;\n};\n\nexport const AlertDialog: FC<PropTypes> = (props) => {\n...\n...\n  const isOpen = !!open // 컴포넌트안에서는 써도 된다.\n\n}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/240877569"
  },
  {
    "pageContent": "[B] 도메인 모델 개발\n * Property 설계\n   * Identifier\n   * Text\n   * List\n   * Description, Note and Memo\n   * Period\n   * Optional date\n * Audit Columns\n * Relations\n   * Direction\n   * Declaration\n   * OneToOne\n   * ManyToOne & OneToMany\n * Method\n   * private\n\n\nPROPERTY 설계\n\n\nIDENTIFIER\n\n특별한 이유가 없다면 id 로 네이밍\n\n기본키는 무엇으로 할까 - 자연키, 인조키 [https://multifrontgarden.tistory.com/180]\n\nWhy is NanoID Replacing UUID?\n[https://blog.bitsrc.io/why-is-nanoid-replacing-uuid-1b5100e62ed2]\n\nAuto increment keys vs. UUID\n[https://mareks-082.medium.com/auto-increment-keys-vs-uuid-a74d81f7476a]\n\n * nanoid는 default로 A-Za-z0-9_- 로 생성되는데, PK에 -,_이 오면 어색하므로\n   https://github.com/ai/nanoid#custom-alphabet-or-size\n   [https://github.com/ai/nanoid#custom-alphabet-or-size] 를 사용해 custom하는 것을\n   권장한다.\n\n * 참고\n   \n   * MP-4630 [https://ecubelabs.atlassian.net/browse/MP-4630] - 이슈 세부사항 가져오는\n     중... 상태\n   \n   * GitHub\n     \n     * nanoid 인지는 모르겠지만 length === 8\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/1707475139/image-20210722-013442.png?api=v2]\n       \n       \n   \n   * YouTube\n     \n     * nanoid 인지는 모르겠지만 length === 11\n     \n     * https://www.youtube.com/watch?v=ChtumoDfZXI\n       [https://www.youtube.com/watch?v=ChtumoDfZXI]\n   \n   * 몇가지 채번 방식 [https://youtu.be/KoLObZ9A3Kc?t=888]\n\n\nTEXT\n\nText 는 nullable 로 설계 하지 않는다. 항상 not null 로 하고 필요에 따라 empty string '' 을 허용한다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Nullable\n& Not null 장/단점 비교\n\nnullable\n\nnot null\n\n장점\n\n사용자가 실제로 입력하지 않는 경우(null), 입력했다가 나중에 삭제한 경우 empty string('')을 구분할 수 있다.\n\nempty string 도 string 으므로 별도의 예외처리 없이 데이터를 가져와서 모든 string method 를 사용할 수 있다.\n\n단점\n\n * text? 과 같이 optional chaining 을 계속 사용해야 한다.\n\n * 환경에 따라 null 로 취급해야 할 때도 있고 undefined 로 취급해야 할 때도 있어서 일관성이 없다.\n\n사용자가 실제로 입력하지 않는 경우, 입력했다가 나중에 삭제한 경우를 구분하려면 별도의 bool property 를 추가해야 한다.\n\n * 경험상 사용자가 실제로 입력하지 않은 경우와 나중에 삭제한 경우를 구분해야 하는 경우는 거의 없으므로 not null 로 하는 게 좋다.\n\n@Column2({ nullable: true })\n\nuserId?: string;\n\n다른 모델을 reference 하는 경우 해당 모델 ID 의 type 이 string 이더라도 이것은 Text property 가 아니다. 해당\n값이 없을 수 있다면 '' 로 하면 안되고 nullable 로 만들어야 한다.\n\n\nLIST\n\nList 는 nullable 로 설계 하지 않는다. 값이 없을때는 그냥 empty list 로 취급하면 된다.\n\nclass User {\n  emails?      : string[] (x)\n  phoneNumbers!: string[] (o)\n}\n\nList 는 모나드이고 empty list 는 zero 에 해당하기 때문에 nullable 로 설계할 필요가 없다.\n\n\nDESCRIPTION, NOTE AND MEMO\n\n * Description\n   \n   * 객관적인 설명\n   \n   * ex) 패스트파이브 13층에 위치한 덤스터\n\n * 사용자와 공유해도 되는 모델에 대한 설명은 description\n\n * 관리자만 보는 모델에 대한 설명은 note\n\n * Note, Memo\n   \n   * TODO: 어떻게 구분해야 하지?\n\n\nPERIOD\n\n기간은 start / end 로 관리한다.\n\n * 시각 정보를 포함하는 경우 → startAt endAt\n\n * 날짜 정보만 포함하는 경우 → startOn endOn\n\n * MP-4409 [https://ecubelabs.atlassian.net/browse/MP-4409] - 이슈 세부사항 가져오는 중...\n   상태\n\n\nOPTIONAL DATE\n\nclass Article {\n  deletedAt?: Date\n}\n\n * deletedAt?: Date | null 로 선언하지 않는다.\n   \n   * Why?\n     \n     * deletedAt? 에 optional 의미가 내포되어 있기 때문\n     \n     * Date | null 로 하면 null 로 평가 되는 경우가 있기 때문에 Date library 를 사용할 때 귀찮아지기도 하고\n       deletedAt!: Date | null 로 하는 게 맞다.\n\n * 문제 상황\n   \n   * deletedAt 을 초기화 해야 하는 경우\n\n * 해결\n   \n   * // @ts-expect-error\n     deletedAt = null\n   \n   * 꼼수같지만 Date | null 로 선언하지 않으면서 초기화를 하려면 이 방법밖에 없다.\n\n * 존재 확인\n   \n   * !deletedAt\n     \n     * deletedAt === null deletedAt !== undefined 와 같이 하면 의도하지 않은 오류가 발생할 수 있으므로\n       !deletedAt 으로 비교한다.\n       \n       * new Article() 했다면 deletedAt === undefined ,\n         repository 를 이용해 조회했다면 deletedAt === null 임\n\n\nAUDIT COLUMNS\n\nORM 을 사용할 때는 모든 audit columns (createdAt, createdBy, updatedAt, updatedBy) 를 도메인\n모델에 직접 선언해야 한다.\n\n이 properties 는 모두 private 으로 선언하고 audit 목적으로만 사용해야 한다. (= 이 column 에 있는 값을 사용하면\n안 됨)\n\n비즈니스 로직상 기록해야 하는 날짜는 별도의 property 로 선언한다.\n\n\nRELATIONS\n\ntypeorm #relations [https://typeorm.io/#/relations]\n\n각 entity간 관계를 정의할 수 있다. (ex/ 1:1, 1:N, N:N…)\n\n\nDIRECTION\n\nUnidirectional. Bidirecional 로 설계했다면 [OJT] DDD (Domain-driven design)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882844/OJT+DDD+Domain-driven+design]\n규칙에 맞지 않게 설계한 것이다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nBidirectional\n\n@Entity()\nclass User {\n  id: UserID\n  \n  @OneToMany(() => Group, (group) => group.user)\n  groups: Group[]\n}\n\n@Entity()\nclass Group {\n  id: GroupID\n  \n  @ManyToOne(() => User, (user) => user.groups)\n  user: User\n}\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nUnidirectional\n\n@Entity()\nclass User {\n  id: UserID\n  \n  @OneToMany(() => Group, (group) => group.user)\n  groups: Group[]\n}\n\n@Entity()\nclass Group {\n  id: GroupID\n  \n  @ManyToOne(() => User, (user) => user.groups)\n  user: never\n  // NOTE: 이 property는 ORM을 위해서만 존재하므로 never로 선언하면 다른 코드에서 이 property를 사용하지 못하도록 할 수 있다.\n  //       참조하지 않는 property 이기 때문에 user? user! 중 아무거나 해도 된다.\n}\n\n\nDECLARATION\n\n참조 하는 class 를 먼저 선언한다.\n\nTODO: 참조 하는 class 를 먼저 선언 했을 때 특정 옵션을 사용하면 ReferenceError: Cannot access 'XXX'\nbefore initialization 와 같은 오류가 발생하는데 이때는 참조 되는 class 를 먼저 선언해야 한다. 어떤 옵션이었는지 기억이\n안 남 😞\n\n\nONETOONE\n\n@JoinColumn 을 사용하면 FK를 가질 수 있다.\n\nOneToOne 공식 문서 [https://orkhan.gitbook.io/typeorm/docs/one-to-one-relations]에는 한\n쪽 entity에만 OneToOne을 붙이는 예시를 들고 있는데, 둘다 붙여서 더 적절한 쪽에 FK를 붙이는 것도 가능하다. (ref.\nhttps://github.com/typeorm/typeorm/issues/4553#issuecomment-634716902\n[https://github.com/typeorm/typeorm/issues/4553#issuecomment-634716902] )\n\n// 아래의 경우 incumbent.id\n\n@Entity()\nexport class Incumbent {\n  @PrimaryColumn()\n  id: string;\n \n  @OneToOne(() => ServiceAccount, (account) => account.incumbent)\n  @JoinColumn({ name:'id', referencedColumnName:'serviceAccountId' }) // default = Account.PK\n  account!: never;\n}\n\n@Entity()\nexport class Account {\n  @PrimaryColumn()\n  serviceAccountId!: string;\n  \n  @OneToOne(() => Incumbent, (incumbent) => incumbent.account)\n  incumbent: Incumbent;\n}\n\n\nMANYTOONE & ONETOMANY\n\n아래에서 Dumpster : Part = 1 : N 관계가 된다.\n\n@Entity()\nexport class Part {\n  ...\n  @ManyToOne(() => Dumpster, dumpster.parts)\n  dumpster?: never;\n}\n\n@Entity()\nexport class Dumpster {\n  ...\n  @OneToMany(() => Part, part.dumpster)\n  parts: Part[];\n\n}\n\n\nMETHOD\n\n\nPRIVATE\n\n * 클래스 내에서만 사용하고 있다면 private로 선언한다.\n   \n   * 추후 클래스 외부에서도 사용하게 된다면 private → public으로 바꾼다.\n   \n   * method 테스트는 그걸 사용하는 method를 테스트하면 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139"
  },
  {
    "pageContent": "[H][B] 도메인 이벤트 개발\n\n서로 다른 aggregate 간의 consistency 를 보장하고 싶을 때는 transaction 을 사용하면 안된다.\n\n도메인 이벤트를 이용해 eventual consistency 를 구현하도록 한다.\n\n\n\n * 필요성\n * 발행과 구독\n * 장점\n * 단점\n * 용도\n   * 1. 트리거\n   * 2. 데이터 동기화\n * 멱등성\n * 영속 관계\n\n\n필요성\n\ncollection.approve()되면 Bidding이 생성되는 로직이 있는 경우를 살펴보자.\n\nDDD에서 서로 다른 aggregate를 하나의 transaction으로 처리하는 것을 강결합(high coupling) 때문에 지양한다.\n\nclass Collection {\n    approve() {\n        // ... Collection.approve의 비즈니스 로직 처리 \n\n        const { collectionId, servicePrice, collectionExpectedAt } = collectionRequestedEvent;\n        const bidding = new Bidding({ collectionId, servicePrice, collectionExpectedAt });\n        return bidding;   \n    }\n}\n\nclass CollectionService {\n\n    @Transactional()\n    async approveCollectionRequest(collectionId: number, adminUser: User) {\n        const collection = await this.collectionRepository.findOneOrFail(collectionId);\n        const bidding = collection.approve(adminUser);\n        await this.collectionRepository.save([collection]);\n        await this.biddingRepository.save([bidding]);\n    }\n}\n\n게다가, collection.approve()되면 Notification 도 생성되도록 비즈니스 로직을 추가해야 한다면? 이렇게\nnotification이 collection의 도메인 모델 로직에 속하는 것이 맞을까?\n\n예를 들어,\n\nnotification.save()가 실패했을 경우, transaction은 전체를 rollback하게 될텐데 맞게 동작하는\n것일까?notification만 재실행 해야하지 않을까?\n\nnotification.save()가 만약 1분이 걸린다면 collection.approve()도 함께 1분을 기다리는 것이 합리적인가?\n\nclass Collection {\n    approve() {\n        // ... Collection.approve의 비즈니스 로직 처리 \n\n        const { collectionId, servicePrice, collectionExpectedAt } = collectionRequestedEvent;\n        const bidding = new Bidding({ collectionId, servicePrice, collectionExpectedAt });\n        return bidding;   \n    }\n}\n\nclass CollectionService {\n\n    @Transactional()\n    async approveCollectionRequest(collectionId: number, adminUser: User) {\n        const collection = await this.collectionRepository.findOneOrFail(collectionId);\n        const bidding = collection.approve(adminUser);\n        await this.collectionRepository.save([collection]);\n        await this.biddingRepository.save([bidding]);\n        const notification = new Notification(/* ... 생략 */);\n        // notification.save()가 실패할 경우, 로직 전체가 rollback된다.\n        await this.notificationRepository.save([notification]); \n    }\n}\n\n\n\n\n발행과 구독\n\n[/wiki/download/attachments/303169645/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8.drawio.png?api=v2]\n\n\n\n * bidding-service, notification-service각각은 EventHandler를 통해\n   CollectionRequestEvent를 구독하고 있는 상태이다.\n\n * collection.approve()가 호출될 때, CollectionRequestEvent를 발행한다.\n\n * 발행된 CollectionRequestEvent를 각각의 service에 등록된 EventHandler에서 받아서 로직을 처리한다.\n   bidding-service는 ‘입찰 시작’, notification-service는 ‘푸시 알림’을 한다.\n\n * 이런식으로 이벤트 구독을 통해 다른 로직에 영향을 미치지 않으면서 도메인 로직을 비교적 쉽게 추가할 수 있다.\n\n\n\n\n장점\n\n * 도메인 로직이 강하게 결합(high coupling)되는 것을 방지해, 서로 다른 도메인 로직이 섞이는 것을 방지할 수 있다.\n\n * 비즈니스 로직을 추가해야 하는 경우 발행되는 이벤트만 구독하면 되기 때문에, 확장성이 좋아진다.\n\n\n\n\n단점\n\n * 발행과 구독의 로직이 분리되어 있어 디버깅이 어려울 수 있다.\n\n * 비동기적으로 처리되기 때문에, 순서가 보장되지 않을 수 있다.\n\n * 발행과 구독이 반드시 한 번만 일어나지 않는다. 따라서 이벤트 핸들러는 요청에 대해 멱등성을 가져야 한다.\n\n * 이벤트 dispatcher, handler, 저장소 등을 직접 구현, 관리하는 것이 부담이 될 수 있다.\n\n\n\n\n용도\n\n아래와 같이 트리거, 데이터 동기화 두 가지 경우에 이벤트를 사용할 수 있다.\n\n\n1. 트리거\n\n도메인 상태가 바뀐 후, 후처리를 할 때 사용한다. 예를 들어, 수거 완료가 되었을 때 수거 완료가 된 것을 고객에게 알리기 위해 사용할 수\n있다.\n\n\n2. 데이터 동기화\n\n서로 다른 시스템간 동기화를 할 때 사용할 수 있다.\n\n예를 들어, 명령 모델은 트랜잭션을 지원하는 RDBMS를, 조회 모델은 조회 성능이 좋은 NoSQL을 사용하도록 시스템을 설계한 경우이다. 명령\n모델과 조회 모델을 분리하는 것에 대한 내용은 여기 내용 범위에 벗어나므로, 관련해서는 CQRS(Command Query\nResponsibility Segregation) [https://martinfowler.com/bliki/CQRS.html]을 읽어보도록\n한다.\nhttps://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs\n[https://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/303169645/image-20200326-081658.png?api=v2]\n\n[DDD start 책 p.316에 있는 그림]\n\n\n멱등성\n\n메시지 큐를 통해 같은 이벤트는 반드시 한 번 구독되는 것을 보장하지 않는다. 이런 경우를 대비해 이벤트 핸들러는 멱등성을 갖도록 구현돼야\n한다.\n\n멱등성을 갖도록 이벤트를 발행할 때 필요한 데이터를 모두 갖는 것이 좋다. 객체 ID로 데이터를 조회할 수 있겠지만 객체가 수정될 수 있기\n때문이다.\n\n * 참고\n   \n   * 동일한 트랜잭션에 대해 메일이 두번 발송된 모습. 분산 시스템에서 멱등성을 보장하는건 결코 쉽지 않다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/303169645/image-20200824-003528.png?api=v2]\n\n\n\n\n영속 관계\n\n도메인 모델의 변경으로 인한 도메인 이벤트 발행 시, 이 둘은 transaction 으로 묶여야 한다. 이벤트 메시지 발행을 보장하기\n위해서이다. (도메인 주도 설계 구현 책 398p. 메시징 인프라의 일관성 참고)\n\n우리는 아래의 방법을 사용한다.\n\nhttps://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#the-deferred-approach-to-raise-and-dispatch-events\n[https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#the-deferred-approach-to-raise-and-dispatch-events]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/303169645"
  },
  {
    "pageContent": "[B] 도메인 명세 (spec) 개발\n\n/**\n * 어카운트 등록 후 첫 인보이스에만 부과되는 요금(ex/ prorate, dumpster delivery fee)을 생성할 때 대상이 되는 어카운트를 조회한다.\n */\nexport class FirstMonthChargeableAccountSpec extends AccountSpec {\n  ...\n}\n\n * 주석에 있어야 하는 내용\n   \n   * 명세의 사용 목적\n   \n   * 파라미터 설명",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2654502913"
  },
  {
    "pageContent": "[B] 레파지토리 개발\n * 구조\n * 컨벤션\n   * 레파지토리 이름\n   * Base class\n   * CU (Create, Update)\n   * find(…)\n     * Time intervals\n       * Naming\n   * findXXX(…)\n   * D (Delete)\n * 관심사 분리\n   * 문제점\n   * 해결 방안\n\nimport { DddRepository, VersionedDddRepository } from '../../../lib/ddd';\n\nclass ModelRepository extends DddRepository<Model> {\n}\n\nor\n\nclass ModelRepository extends DddRepository<Model, string> {\n}\n\n * 첫번째 generic parameter: 모델 타입 (required)\n\n * 두번째 generic parameter: 모델의 ID 타입 (optional. 생략하면 ID 를 number 타입으로 간주)\n\n\n구조\n\n[/wiki/download/attachments/291635906/ddd-repository.png?api=v2]\n\n원칙적으로는 repository interface 가 domain 영역에 위치하고 repository interface 의 구현체가\ninfrastructure 영역에 위치해야 한다. 하지만 우리는 repository interface 를 사용하지 않고\ninfrastructure 영역에 직접 repository 구현체를 위치 시킨다.\n\n[/wiki/download/attachments/291635906/ddd-repositoy-in-practice.png?api=v2]\n\n이렇게 하는 이유는 두가지가 있다.\n\n 1. TS 에서는 interface type 에 대해 DI 가 불가능.\n    \n    1. TS 에서 interface 는 트랜스파일 시 사라지는 정보이다. 따라서 interface 를 참조해서 DI 할 수 없고\n       interface 이름이나 interface 토큰 등 다른 방법을 이용해야 하는데 번거롭다.\n    \n    2. 추상 클래스를 인터페이스처럼 쓰면 DI가 가능 하지만 아래 이유 때문에 지금은 굳이 필요 없다.\n\n 2. 프로토타입 언어의 특성 상 런타임에 method 교체가 가능.\n    \n    1. 이미 생성 된 객체에 대해서 런타임에 호출하는 method 교체가 가능하다. 따라서 interface 를 분리하지 않아도 테스트\n       코드를 쉽게 작성할 수 있다.\n    \n    2. 물론 런타임에서 상황에 따라 다른 repository 구현체를 사용해야 하는 상황이 생기면 interface 를 분리하는 게 좋지만\n       아직 그런 경우는 없다.\n\n\n컨벤션\n\n\n레파지토리 이름\n\n모델 이름 + Repository\n\n\nBASE CLASS\n\noptimistic lock 을 사용하는 경우 VersionedDddRepository, 그렇지 않으면 DddRepository 를 상속해야\n한다.\n\nDddRepository, VersionedDddRepository 에는 save(), findAll(), countAll()이 구현되어 있다.\n\n따라서 위의 코드처럼 base class 를 상속받기만 해도 save(), findAll(), countAll()을 호출할 수 있다.\n\n\nCU (CREATE, UPDATE)\n\n모델을 생성, 업데이트 하기 위한 함수는 절대로 구현하지 않는다. save() 로 모두 처리 가능하다.\n\n\nFIND(…)\n\n조건에 따라 모델을 조회하기 위한 함수는 find(...) 로 구현한다.\n\n도메인 명세에서 find(...) 를 호출하고 조건에 따라 올바른 parameter 로 find(...) 를 호출하는지 테스트를 작성한다.\n\n * find(...) 는 항상 도메인 명세에서 호출되어야 한다. 어플리케이션 서비스 레벨에서 find(...) 를 호출하면 올바른\n   parameter 로 find(...) 를 호출하는지 확인하는 테스트 코드를 작성하기 위해 mocking 해야할 것들이 많아진다.\n\nfind(...) 의 리턴 타입은 Promise<Model> 혹은 Promise<Model[]> 이어야 한다.\n\nfind(...) 는 항상 완전한 aggregate를 반환해야 한다. 따라서 QueryBuilder\n[https://typeorm.io/#/select-query-builder] + join 으로 직접 쿼리를 만들게 되면 실수할 가능성이 있기\n때문에 되도록 join의 사용을 지양한다. (ref. Eager Loading을 사용하지 않고 N+1 Problem 해결하기\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/652968156/OJT+RDB+N+1+Query+Problem#%ED%95%98%EC%A7%80%EB%A7%8C-Eager-Loading%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C%3F])\n\n * 하지만 현재 TypeORM은 join 대상 테이블에 검색 조건을 거는 것이 구현되어 있지 않으므로 join 대상 테이블에 조건을 걸어야\n   하는 경우에만 예외적으로 join을 사용하도록 한다. (ref. haulla-api.biddingRepository\n   [https://github.com/Ecube-Labs/haulla-api/blob/47b23ceb5bf47900c28a8dee3df6eea035e5eb47/src/services/biddings/infrastructure/repository.ts#L44-L56]\n   )\n\n\nTIME INTERVALS\n\nNAMING\n\n특정 interval 에 somethingOn 이 속하는지 찾기 위한 API 인 경우,\n\nfind({\n  somethingOnStart: '2022-06-14',\n  somethingOnEnd  : '2022-07-13',\n})\n// => somethingOn 이 2022-06-13 ~ 2022-07-12 인 데이터를 찾는다 \n\n * Postfix 는 [B] 도메인 모델 개발 | Period\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Period] 와\n   동일.\n   \n   * 예시\n   \n   * dueOnStart / dueOnEnd\n   \n   * sentAtStart / sentAtEnd\n\n\nFINDXXX(…)\n\nfind(…) 로 처리하기 곤란한 경우에만 예외적으로 findXXX(…) 를 개발한다.\n\n조건에 따라 모델을 조회하기 위한 함수는 findXXX() 으로 구현한다.\n\nimport { DddRepository } from '../../../lib/ddd';\n\nclass ModelRepository extends DddRepository<Model> {\n  async findById(id: number): Promise<Model> {\n    return this.getManager().find(...)\n  }\n}\n\n * this.getManager().findXXX 함수를 사용한다.\n   \n   * https://typeorm.io/index.html#/entity-manager-api\n     [https://typeorm.io/index.html#/entity-manager-api] 참고\n\n * 이름은\n   https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html\n   [https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html]\n   2.3 section 을 참고해서 짓는다.\n\n조건에 따라 모델을 조회하기 위한 함수에서 where 절의 In 을 사용하는 경우는 findXXXIn() 으로 명명한다.\n\nasync findByServiceProfileIn(serviceProfile: string[]) { \n  return this.entityManager.find(Usim, { where: { serviceProfile: In(serviceProfile) } });\n}\n\nhttps://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html\n[https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html]\n\n\nD (DELETE)\n\n문제가 발생할 경우 과거의 데이터가 필요할 수도 있기 때문에, DB 에서 실제로 데이터를 삭제하는 경우는 거의 없다.\n\n현재 typeORM의 @deleteDateColumn\n[https://typeorm.io/#/decorator-reference/deletedatecolumn] + softDelete()\n[https://typeorm.io/#/delete-query-builder/soft-delete] 조합으로 실제 데이터를 삭제하는 것이 아니라\n삭제된 효과를 주고 있다. (ref. MP-4663 [https://ecubelabs.atlassian.net/browse/MP-4663] -\n이슈 세부사항 가져오는 중... 상태 )\n\n\n\n\n관심사 분리\n\n\n문제점\n\n// dispute-tickets/repository.ts\nasync save(tickets: DisputeTicket[]) {\n  const [reporter, assignee] = await Promise.all(\n      ['id.kim@ecubelabs.com', IS_PRODUCTION ? 'je.song@ecubelabs.com' : 'id.kim@ecubelabs.com'].map((email) =>\n          this.atlassianClient.users.retrieve({ email }),\n      ),\n  );\n\n  await Promise.all(\n      tickets.map(async (ticket) => {\n          const {\n              issues: [issue],\n          } = await this.atlassianClient.issues.search({ id: ticket.id });\n\n          if (issue) {\n              const jiraIssue = ticket.toJiraIssue({\n                  reporterId: reporter.accountId,\n                  assigneeId: assignee.accountId,\n                  issueKey: issue.key,\n              });\n  ...\n}\n                    \n// dispute-tickets/model.ts\nexport class DisputeTicket {\n  ...\n  \n  toJiraIssue({ assigneeId, reporterId, issueKey }: { assigneeId: string; reporterId: string; issueKey?: string }) {\n        return JiraIssue.paymentDisputeFrom({\n            assigneeId,\n            reporterId,\n            key: issueKey,\n            disputeTicketId: this.id,\n            email: this.email,\n            paymentIntentId: this.paymentIntentId,\n            status: this.status,\n            reason: this.reason,\n            comment: this.prevStatus && `${this.prevStatus} -> ${this.status}`,\n        });\n    }\n\n * 레포지토리는 엔터티 객체를 저장, 조회, 수정, 삭제하는 역할을 하며 이를 도메인 모델에 노출하는 것은 적절하지 못 하다.\n   \n   * 어떤 방식으로 데이터를 관리하고 저장할지는 도메인 영역의 관심사가 아니다.\n   \n   * 레포지토리의 구현 방식이 변경되었을 때(ex 저장소 변경) 도메인 영역의 비즈니스 로직에 영향을 줘서는 안 된다.\n\n * 위의 코드의 경우 지라 이슈를 저장소로 사용하고 있지만 만약 저장소를 허브스팟으로 변경한다면 도메인 모델까지 수정해줘야 한다.\n   \n   * 비슷한 예시 -\n     https://github.com/Ecube-Labs/haulla/blob/3f76c87d25e59d47218489f6970a32d0bdfdea09/apps/core-api/src/services/balances/domain/model.ts#L252\n     [https://github.com/Ecube-Labs/haulla/blob/3f76c87d25e59d47218489f6970a32d0bdfdea09/apps/core-api/src/services/balances/domain/model.ts#L252]\n\n\n해결 방안\n\n// dispute-tickets/repository.ts\nasync save(tickets: DisputeTicket[]) {\n  const [reporter, assignee] = await Promise.all(\n      ['id.kim@ecubelabs.com', IS_PRODUCTION ? 'je.song@ecubelabs.com' : 'id.kim@ecubelabs.com'].map((email) =>\n          this.atlassianClient.users.retrieve({ email }),\n      ),\n  );\n\n  await Promise.all(\n      tickets.map(async (ticket) => {\n          const {\n              issues: [issue],\n          } = await this.atlassianClient.issues.search({ id: ticket.id });\n\n          if (issue) {\n              const jiraIssue = toJiraIssue(ticket, reporter.accountId, assignee.accountId);\n  ...\n}\n\nprivate toJiraIssue(ticket: DisputeTicket, reporterId: string, assigneeId: string) {\n  return {\n    ...\n  }\n}\n\n * 위와 같이 entity를 저장소에 저장할 수 있도록 가공하는 작업은 레포지토리 내부에서 한다.\n\n * 레포지토리의 구현 방식이 변경되어도 다른 레이어를 의존하지 않고 있기 때문에 수정에 어려움이 적어진다.\n\n * 참고 -\n   https://github.com/Ecube-Labs/CCN-API/blob/bf97cb49fad7f5c874f454b8cb10751893203253/src/queryModels/models/client.ts#L206\n   [https://github.com/Ecube-Labs/CCN-API/blob/bf97cb49fad7f5c874f454b8cb10751893203253/src/queryModels/models/client.ts#L206]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/291635906"
  },
  {
    "pageContent": "[B] 어플리케이션 서비스 개발\n * list\n * retrieve\n\n\nLIST\n\n리소스를 단순히 필터링 해서 목록을 조회하는 method 인 경우 이름을 list 로 한다.\n\nhttps://stripe.com/docs/api/invoices [https://stripe.com/docs/api/invoices] 참고\n\n\nRETRIEVE\n\n리소스의 ID 로 리소스를 조회하는 method 인 경우 이름을 retrieve 로 한다.\n\nhttps://stripe.com/docs/api/invoices [https://stripe.com/docs/api/invoices] 참고\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1755119845"
  },
  {
    "pageContent": "[B] API 개발\n * 통합 API 명세서 (prod)\n * 통합 API 명세서 (stage)\n * API header\n * API input\n   * Paging\n     * Naming\n   * Time intervals\n     * Naming\n   * Sorting\n   * EditInputSchema\n * API output\n   * Response<void>\n   * 동일한 리소스에 대한 응답 스키마는 동일해야 한다.\n * 하위 호환성 유지\n * deprecated\n\n\n통합 API 명세서 (PROD) [https://docs.ecubelabs.xyz/]\n\n\n통합 API 명세서 (STAGE) [https://docs-stage.ecubelabs.xyz/]\n\n\nAPI HEADER\n\n\nAPI INPUT\n\n\nPAGING\n\n\nNAMING\n\npage + limit\n\nhttps://github.com/Ecube-Labs/haulla-api/pull/29#discussion_r305167486\n[https://github.com/Ecube-Labs/haulla-api/pull/29#discussion_r305167486]\n\n\nTIME INTERVALS\n\n[A, B) - Start is inclusive and end is exclusive\n\nhttps://stackoverflow.com/questions/9795391/is-there-a-standard-for-inclusive-exclusive-ends-of-time-intervals\n[https://stackoverflow.com/questions/9795391/is-there-a-standard-for-inclusive-exclusive-ends-of-time-intervals]\n\n관련 논의\n\nhttps://github.com/Ecube-Labs/haulla-api/pull/1238#discussion_r864492243\n[https://github.com/Ecube-Labs/haulla-api/pull/1238#discussion_r864492243]\n\n\nNAMING\n\n특정 interval 에 somethingOn 이 속하는지 찾기 위한 API 인 경우,\n\nparams = {\n  somethingOnStart = 2022-06-14\n  somethingOnEnd   = 2022-07-13\n}\n// => somethingOn 이 2022-06-13 ~ 2022-07-12 인 데이터를 찾는다 \n\n * Postfix 는\n   https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Period\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Period] 와\n   동일.\n\n\nSORTING\n\nhttps://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/sort-pagination.html#sort-using-2-fields\n[https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/sort-pagination.html#sort-using-2-fields]\n\n\nEDITINPUTSCHEMA\n\nJoi 로 수정/변경 서비스 스키마를 디자인 할 경우 아래의 조건들을 지켜야 한다.\n\n * 모든 property 는 optional 이어야 한다.\n   \n   * key 가 존재하면 해당 property 를 업데이트 하면 됨.\n   \n   * key 가 존재하지 않으면 해당 property 는 업데이트 안하면 됨.\n\n * 비즈니스 규칙상 지우는게 허용된 값은 null 을 허용해야 한다.\n\n// 비즈니스 요구사항\n// 1. 이름은 필수값\n// 2. 나이, 몸무게는 선택값\n// 3. 나이는 일단 입력되면 지울 수 없다\n// 4. 몸무게는 언제든지 지울 수 있다\n\nclass User {\n  name: string;\n  age?: number;\n  weight?: number;\n}\n\nconst editInputSchema = {\n  name: Joi.string().optional(),\n  age: Joi.number().optional(),\n  weight: Joi.number().allow(null).optional(),\n}\n\n\nAPI OUTPUT\n\n\nRESPONSE<VOID>\n\n응답값이 없는 void API 인 경우 empty object 를 'Ok' message 로 사용한다.\n\nMP-288 [https://ecubelabs.atlassian.net/browse/MP-288] - 이슈 세부사항 가져오는 중... 상태\n\n\n동일한 리소스에 대한 응답 스키마는 동일해야 한다.\n\n리소스를 제거하는 DELETE 메서드를 제외한 동일한 리소스에 대한 GET, PUT, PATCH, POST 등은 모두 output으로 동일한\n스키마를 내보내야 한다.\n\n백엔드 개발자 입장에서는 생성, 수정과 같은 요청에 대해 ‘Ok’ 메세지만 던져줘도 별 다른 상관이 없다.\n\n하지만 만약 프론트엔드 개발자가 게시글 생성, 수정 요청 후 최종적으로 저장 된 데이터를 화면에 나타내줘야하는 등 필요로 하게 된다면 그게\nresponse에 담겨서 오면 참 편하겠지만 ‘Ok’ 메세지만 돌아오게 되면 그것을 얻기 위해 무조건 GET을 해줘야만 한다.\n\n해당 컨벤션 관련 대화 내용:\nhttps://github.com/Ecube-Labs/CCN-API/pull/542#issuecomment-819226180\n[https://github.com/Ecube-Labs/CCN-API/pull/542#issuecomment-819226180]\n\n\n하위 호환성 유지\n\nconst validate = {\n  body: Joi.object({\n    x: Joi.number().required(),\n  }),\n} as const;\n\nexport default {\n  path: ...,\n  method: ...,\n  meta: ...,\n  validate,\n  output: ...\n}\n\n위와 같은 route spec이 있을 때 y가 required 항목으로 추가해야 하는 경우, required 대신 optional 이면서\ndefault 를 지정하여 기본 값을 입력받도록 한다.\n\nconst validate = {\n  body: Joi.object({\n    x: Joi.number().required(),\n    y: Joi.number().default(88),\n  }),\n} as const;\n\nexport default {\n  path: ...,\n  method: ...,\n  meta: ...,\n  validate,\n  output: ...\n}\n\nkoa-joi-router와 다르게 koa-x-router는 pre 같이 validation 이전에 미들웨어가 실행되도록 하는 기능은 지원하지\n않는다.\n\n기존(koa-joi-router)처럼 pre 로 기본 값을 채워넣게 되는 경우 문서에서는 required로 나오지만 실제로 API를 호출하면\n값을 누락해서 보내도 실행이 되는 마법같은 현상이 발생하기 때문에 스키마는 항상 문서와 일치하도록 관리한다.\n\n\n\n--------------------------------------------------------------------------------\n\n\nDEPRECATED\n\n위와 같은 route spec 이 있을 때 y 가 required 항목으로 추가 되었다면 다음과 같이 pre 를 사용하면 된다.\n\nexport default {\n  path: ...,\n  method: ...,\n  meta: ...,\n  pre: async (ctx, next) => {\n    ctx.request.body.y = 88;\n    return next();\n  },\n  validate: {\n    body: Joi.object({\n      x: Joi.number().required(),\n      y: Joi.number().required(),\n    }),\n  }\n  output: ...\n}\n\n * pre 를 사용하지 않고 y: Joi.number().required()만 추가하게 되면 업데이트 되지 않은 클라이언트에서 들어오는 요청이\n   모두 실패하게 된다. (업데이트 되지 않는 클라이언트는 body 에 y 를 보내지 않으므로)\n\n * 신규 항목이 required 로 추가 되는 경우에는 반드시 기본값이 존재해야 하기 때문에 위와 같이 pre 에서 기본값을 할당해줄 수\n   있다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/298778912"
  },
  {
    "pageContent": "[B] 다국어 메세지 개발\n\n프론트에서 사용하는 react-intl를 개발한 Format.js가 만든 intl-messageformat\n[https://formatjs.io/docs/intl-messageformat/]를 사용합니다.\n\nhttps://formatjs.io/docs/intl-messageformat/\n[https://formatjs.io/docs/intl-messageformat/] 에서 Live Editor 기능을 제공하기 때문에 필요할때\n코드를 수정해서 바로 테스트할수 있습니다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1210449947"
  },
  {
    "pageContent": "[B] Control flow\n\nFront-end 와 Back-end 에 적용 되는 control flow 는 다를 수 있다.\n\n * switch\n   * 정해진 값이 있는 경우 default 에서 throw error\n\n\nSWITCH\n\n\n정해진 값이 있는 경우 DEFAULT 에서 THROW ERROR\n\nenum Status {\n  Active,\n  Suspended,\n}\n\nfunction logic(status) {\n  switch (status) {\n    case Status.Active: ...\n    case Status.Suspended: ...\n    default: throw new Error('???')\n  }\n}\n\n알 수 없는 값을 처리하면 안 된다.\n\n\n\n참고\n\n[F] Control flow\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390032449/F+Control+flow]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390294582"
  },
  {
    "pageContent": "Signal 처리\n\nkubernetes를 이용한 서비스 무중단 배포 [http://tech.kakao.com/2018/12/24/kubernetes-deploy/]\n\nTL;DR\n\nSIGTERM 에서 cleanup 과정을 반드시 수행해야 한다\n\ninfra 관리자에게 특별히 요청하지 않았다면 쿠버네티스에 앱 배포 시 SIGTERM signal 발생 후 30 초 뒤에 SIGKILL\nsignal 이 발생한다\n\n\n\n\nEx) express cleanup\n\nconst express = require('express')\nconst app = express()\nconst server = app.listen(3000)\n\nprocess.on('SIGTERM', () => {\n  // 30초(기본 값) 뒤에는 server.close 가 실행중이라도 쿠버네티스가 SIGKILL 로 프로세스를 종료시킨다\n  // 따라서 cleanup 에 30초 이상 필요하다면 infra 관리자에게 요청\n  server.close(() => {\n    // SIGKILL 을 기다리지 말고 cleanup 이 완료되면 process.exit 해도 무방하다\n    process.exit()\n  })\n})",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/111083526"
  },
  {
    "pageContent": "NODE_ENV\n\nNODE_ENV환경production운영stagestage 테스트\n\ndevelopment\n\nlocalundefinedlocal",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/117080149"
  },
  {
    "pageContent": "Map library 사용 (지도)\n\nMap library 를 사용할 때는 어플리케이션 코드에서 직접 map library 를 호출하지 않고 다음의 signature 를 갖는\nmapClient 를 구현해서 사용한다.\n\ninterface createMapClient {\n  (options: { key: string }): {\n    /**\n     *\n     */\n    timezone: (lat: number, lng: number, timestamp?: number) => Promise<string>;\n    /**\n     *\n     */\n    reverseGeocode: (\n      lat: number,\n      lng: number,\n      language: string\n    ) => Promise<string>;\n    /**\n     *\n     */\n    placesAutoComplete: (query: {\n        input: string;\n        sessiontoken: string;\n    }) => Promise<{\n        status: 'OK' | 'ZERO_RESULTS' | 'OVER_QUERY_LIMIT' | 'REQUEST_DENIED' | 'INVALID_REQUEST' | 'UNKNOWN_ERROR';\n        errorMessage: string;\n        predictions: {\n            description: string;\n            placeId: string;\n        }[];\n    }>;\n  };\n}\n\n\nMAPCLIENT INTERFACE 필요성\n\n어플리케이션 계층 혹은 도메인 계층에서 직접 map library 를 호출하면 map library 를 교체해야 할때 이를 사용하는 모든 코드를\n고쳐야 하므로 비용이 너무 크다.\n\nmapClient 로 map library 계층을 추상화 하면 map library 를 교체해야 할 때 mapClient 만 고치고 테스트하면\n되므로 안전하고 빠르게 작업할 수 있다.\n\n\nMAPCLIENT INTERFACE 결정\n\nmapClient 추상화가 map library 교체를 염두에 둔 목적이라면 모든 map library 를 검토한 뒤 interface 를\n결정해야 한다.\n\n하지만 그럴 시간이 없기 때문에 (누군가 해주셔도 됨) 그냥 갓글맵 interface\n[https://googlemaps.github.io/google-maps-services-js/docs/GoogleMapsClient.html]\n를 따라가는 게 속 편하다\n\n\n참고\n\nmapClient in CCN-API\n[https://github.com/Ecube-Labs/CCN-API/blob/master/src/ts/lib/%40ccn/maps.ts]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882982"
  },
  {
    "pageContent": "Async / Await 가이드\n\n\nASYNC/AWAIT\n\nJavaScript ES8에 정의된 async function과 await syntax는 비동기 함수 처리를 마치 동기 함수를 다루듯 쉽게\n처리할 수 있는 방법입니다. Node.js 8부터 완전히 지원합니다.\n\n\n과거에는..\n\n비동기 처리를 할 때 ES6의 Promise와 함께 bluebird.js같은 Promise 라이브러리를 사용하거나, async.js와 같은 흐름\n제어 라이브러리를 이용했습니다.\n\n이큐브랩의 레거시 코드에서 async.js를 쉽게 찾아볼 수 있습니다.\n\n이런 방법들은 callback function을 차곡차곡 쌓아서 callback hell을 만드는 것보다는 나았지만, indent가 깊어지고\n에러 발생 시 stack trace를 제대로 추적할 수 없다는 문제가 있었습니다.\n\n왜냐면 기본적으로 비동기 함수는 별도의 콜 스택에서 실행되기 때문입니다.\n\n\nASYNC FUNCTION 알아둘 점\n\n * a = async function () {} 일 때 typeof a === 'function' 이며 a.constructor.name\n   === 'AsyncFunction' 입니다.\n * AsyncFunction는 리턴값을 단순히 Promise로 감싸는 것이라고 이해하기 쉬우나, 실제 동작은 리턴값을 암묵적으로\n   Promise.resolve\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve]로\n   감싸는 것입니다.\n   Promise.resolve의 특징에 따라, AsyncFunction에서 Promise를 반환해도 Promise가 중첩되지는 않습니다.\n * Node.js 12부터 async function에서 발생한 에러에 대해서 stack trace를 제공합니다.\n\n\nAWAIT 알아둘 점\n\n * async function 내에서만 사용할 수 있습니다.\n * 동기 코드와 동일하게 try catch로 에러 핸들링을 해야 합니다.\n * await 뒤에 오는 expression이 Promise가 아니어도 됩니다. resolved Promise에서 나온 값으로 취급됩니다.\n\n\n바람직한 비동기 처리\n\n * 중첩된 비동기 처리를 할 때 불필요한 blocking 및 오버헤드를 방지하기 위해 await은 실질적으로 대기가 필요한 최상위 로직에서만\n   사용하세요.\n   \n   * async function에서 Promise를 await해서 리턴하지 말고 그냥 리턴하세요.\n   * await이 evaluation되는 지점에서 blocking됨을 유의하세요.\n     * Promise.all([await a(), await b(), await c()])는 병렬 실행되지 않습니다.\n       병렬 실행하고자 한다면 await Promise.all([a(), b(), c()])와 같이 사용하세요.\n     * 다수의 async function이 순차적으로 실행되어야 하는 경우가 아니라면 for loop 안에 await를 사용하지 마세요.\n       (eslint rule: no-await-in-loop\n       [https://eslint.org/docs/rules/no-await-in-loop])\n * Promise.all, Promise.race, ...등 Promise 내장 메소드를 통해 간단한 흐름 제어를 할 수 있습니다.\n * Job간에 복잡한 의존 관계가 얽혀 있는 비동기 작업의 흐름 제어를 할 때\n   * 퍼포먼스가 중요하지 않은 작업이라면 불필요한 blocking을 감수하고 그냥 async / await, Promise 내장 메소드만을\n     활용하세요. (코드 가독성과 유지보수를 위해)\n   * 그 외의 경우 async.js 혹은 기타 라이브러리를 활용하세요.\n * Promise를 리턴하는 function은 사실상 async function과 동일하기 때문에 선언 시 async를 안 붙여도 되지만,\n   비동기 함수라는 것을 쉽게 알아볼 수 있도록 async function으로 선언해 주세요.\n\n\n참고\n\n * Mozilla MDN Web Docs\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function]\n * 자바스크립트의 Async/Await 가 Promises를 사라지게 만들 수 있는 6가지 이유\n   [https://medium.com/@constell99/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-async-await-%EA%B0%80-promises%EB%A5%BC-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%9E%88%EB%8A%94-6%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0-c5fe0add656c]\n * https://medium.com/@kiwanjung/번역-async-await-를-사용하기-전에-promise를-이해하기-955dbac2c4a4\n   [https://medium.com/@kiwanjung/%EB%B2%88%EC%97%AD-async-await-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-promise%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-955dbac2c4a4]\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/205127740"
  },
  {
    "pageContent": "GraphQL\n\nhttps://www.udemy.com/course/graphql-by-example\n[https://www.udemy.com/course/graphql-by-example]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436633885"
  },
  {
    "pageContent": "에러 던지기\n\nboom [https://hapi.dev/module/boom/api/?v=9.1.1] 을 이용한다.\n\n\n\n * 4xx Errors\n * 5xx Errors\n * 4xx, 5xx 의 구분\n * 에러 메시지 구분\n   * 보안 관련 에러 메시지\n * 참고\n\n\n4XX ERRORS\n\nhttps://hapi.dev/module/boom/api/?v=9.1.1#http-4xx-errors\n[https://hapi.dev/module/boom/api/?v=9.1.1#http-4xx-errors]\n\n\n5XX ERRORS\n\nhttps://hapi.dev/module/boom/api/?v=9.1.1#http-5xx-errors\n[https://hapi.dev/module/boom/api/?v=9.1.1#http-5xx-errors]\n\n\n4XX, 5XX 의 구분\n\n클라이언트에서 받은 값에 문제가 있을때는 4xx, 서버의 로직에 문제가 있을때는 5xx 오류를 던지면 된다. 그런데 사실 클라이언트에서\n에러코드를 보고 뭔가 하지 않기 때문에 (unauthorized 는 가끔 처리하긴 하지만) 에러코드는 크게 중요하지 않다. boom 을 사용하는\n주된 이유는 다른 개발자에게 의미있는 오류 메시지를 전달하기 위함이다.\n\nthrow forbidden('something went wrong')\n\n위와 같은 코드를 짰다면 내가 아닌 다른 개발자가 봤을 때 사용자가 뭔가 허용되지 않은 작업을 하려고 했구나 하는 의미를 전달할 수 있다.\n\n\n에러 메시지 구분\n\n개발자들이 보는 에러 메시지와 사용자가 보는 에러 메시지는 구분 되어야 한다.\n\n그렇지 않으면 다음과 같은 참사가 발생한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1163264020/image-20210106-080213.png?api=v2]카카오\n선물하기\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1163264020/image-20210401-031347.png?api=v2]\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nconst error = throw forbidden('something went wrong')\n\n// error.message === 'something went wrong'\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nconst error = throw forbidden('왜그러니?', { errorMessage: 'something went wrong' })\n\n// error.message === '왜그러니?'\n// error.data.errorMessage === 'something went wrong'\n\n이렇게 한다고 카카오뱅크와 같은 참사를 막을수 있는건 아니고 서버의 에러 핸들러에서 error.message 는 로깅용으로,\nerror.data.errorMessage 는 클라이언트에 반환하는용으로 사용하는 코드가 있어야 한다. - 현재는 errorMessage가 아닌\nerrorCode를 이용해서 사용자에게 보내는 메세지를 컨트롤한다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nconst error = throw forbiddne('왜그러니?', { errorCode: 'ERROR000' });\n\n// @packages/error-message/language/en\n{\n  \"ERROR000\": \"something went wrong\"\n}\n\n이렇게 하면 proxy간의 에러메세지를 통일할 수 있어 (기존에는 proxy에러를 제대로 전달하지 못하고있었음) 클라이언트로 제대로 에러메세지를\n전달할 수 있다. https://github.com/Ecube-Labs/haulla/pull/705\n[https://github.com/Ecube-Labs/haulla/pull/705]\n\n\n\n\n보안 관련 에러 메시지\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#incorrect-and-correct-response-examples\n[https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#incorrect-and-correct-response-examples]\n\n보안 관련 에러가 발생했을 때 에러의 구체적인 원인을 알려주는 것은 좋지 않다. 해커에게 공격의 단서를 제공하기 때문.\n\n\n참고\n\n[OJT][Node.js] Error Handling in Koa\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/710738065/OJT+Node.js+Error+Handling+in+Koa]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1163264020"
  },
  {
    "pageContent": "Pagination 구현\n\n페이지네이션은 보통 두가지 유형의 뷰에서 사용되며 이에 따른 두가지 방식의 페이지네이션이 생겼다.\n\n\n오프셋 기반 페이지네이션 (OFFSET-BASED PAGINATION)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1193214030/image-20210115-034042.png?api=v2]\n\n대부분의 API가 이런 형태로 만들어져 있다.\n\nparams: { offset, limit } | { page, limit }\nresponse: { data: [...] }\n\n이 방법은 특정 구간에 있는 데이터를 정해진 개수만큼 가져오는것으로, 데이터가 새로 생성되거나 제거되는 경우 방금 보았던 데이터를\n이전/다음페이지에서 다시 보거나 새로 생긴 데이터가 다른 페이지로 넘어가 못보게 될수도 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1193214030/image-20210118-080908.png?api=v2]\n\n(위에서 빨간색이 중복되어 조회되는 데이터. 덕분에 회색 데이터는 조회하지 못했다.)\n\n사용자가 직접 페이지를 지정해서 조회하는 형태로 제공하는 뷰는 위의 현상이 그리 어색하지 않았다.\n\n\n커서 기반 페이지네이션 (CURSOR-BASED PAGINATION)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1193214030/image-20210115-033838.png?api=v2]\n\n이건 오프셋 기반 페이지네이션과는 조금 다르게 구현해야한다.\n보통 실시간성 데이터를 보여주는 뷰에서 이런 형태의 페이지네이션을 요구한다.\n\n위같은 뷰에서 오프셋 기반 페이지네이션처럼 구현하게 되면 위에서 말한 문제인\n\n> 데이터가 새로 생성되거나 제거되는 경우 방금 보았던 데이터를 이전/다음페이지에서 다시 보거나 새로 생긴 데이터가 다른 페이지로 넘어가 못보게\n> 될수도 있다.\n\n이같은 현상이 발생하게 되는데, 실제 사용자가 보는 화면에서 중복/생략된 데이터가 발생하는것은 치명적인 문제다.\n아래처럼 구현하면 이런 문제가 생기는것을 예방할 수 있다.\n\nparams: { offset, limit } | { page, limit }\nresponse: {\n    data: [ ... ],\n    pagingUrl: {\n        next: string | null,\n        prev?: string | null,\n        first?: string | null,\n        last?: string | null,\n    }\n}\n\n위의 인터페이스처럼 구현하면 서버에서 다음 데이터를 조회하는 주소를 만들어서 주므로 클라이언트는 아무것도 신경쓰지 않고 다음 페이지를 불러올 수\n있다.\n\n\n서버 구현 방법\n\n서버쪽에서 URL에 어떤 파라메터를 붙여서 문제 없이 불러올 수 있게 구현하는지는 다양한것 같다.\n어떻게 구현하든 위의 인터페이스만 지키면 클라이언트는 일관적으로 동작할 수 있다.\n\n 1. 페이스북은 timestamp를 서버로 넘겨서 해당 timestamp 이전/이후의 데이터를 불러올 수 있는 URL을 만들어서 준다\n    http://api.example.com/foo?since=TIMESTAMP1\n\n 2. 지라는 응답 값에 조회했던 아이디를 넘겨준다.\n    \"pageInfo\":{\"firstId\":\"1610504639447-jJ3A9AxtTr9YYgvM\",\"lastId\":\"1610334599658-Q-tJZp8wUfqCf80J\"}\n    다음 페이지를 조회할 땐\n    https://ecubelabs.atlassian.net/gateway/api/notification-log/api/2/notifications?after=1610334599658-Q-tJZp8wUfqCf80J&limit=12\n    처럼 after에 lastId를 넘겨서 이후의 데이터를 조회하는것으로 보인다.\n\n 3. 트위터도 커서라는 이름으로 비슷하게 관리한다.\n    https://api.twitter.com/1.1/followers/ids.json?screen_name=theSeanCook&cursor=1374004777531007833\n\n 4. MinMax라는곳에서 작성한 api-paging-built-the-right-way\n    [https://www.mixmax.com/engineering/api-paging-built-the-right-way/] 글처럼 구현한\n    https://github.com/mixmaxhq/mongo-cursor-pagination\n    [https://github.com/mixmaxhq/mongo-cursor-pagination] 패키지도 있다.\n\n데이터의 순서가 바뀌는 환경에서는 이 방법도 무용지물이다.\n\n만약 데이터 순서를 바꾸려고 한다면, 그렇게 관리하는게 적절한 방법인지 다시 한번 고민해보면 좋다.\n알림같은 데이터는 그냥 데이터를 하나 더 만들고, 마지막에 발행한 알림만 보여줘도 되기 때문이다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1193214030"
  },
  {
    "pageContent": "KafkaJS\n * 주의사항\n   * Consumer fromBeginning 옵션 사용시 주의사항\n     * fromBeginning: false\n     * fromBeginning: true\n\n\n주의사항\n\n\nCONSUMER FROMBEGINNING 옵션 사용시 주의사항\n\n[/wiki/download/attachments/2869494083/frombeginning.drawio.png?api=v2]\n\n\nFROMBEGINNING: FALSE\n\nfalse로 설정하면 해당 ConsumerGroupId로 처음 구독한 시점 이후로 발생한 메세지만 consume 받을 수 있다.\n\n이후 동일한 ConsumerGroupId로 구독을 하면 Consume을 하다가 중단된 이후의 메세지를 받을수 있다.\n\n\nFROMBEGINNING: TRUE\n\ntrue로 설정하고 한번도 구독하지 않았던 ConsumeGroupId로 구독을 하게 되면 토픽에 produce 되었던 가장 낮은 offset의\n데이터부터 consume한다.\n\n동일한 ConsumerGroupId로 다시 구독하면 consume하지 못한 offset부터 받아오는것은 동일하다.\n\nawait consumer.subscribe({ topic, fromBeginning: true });\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2869494083"
  },
  {
    "pageContent": "Prometheus Metrics 개발 가이드Prometheus\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/491815122/Prometheus]\n\n프로메테우스가 우리 서버 프로그램의 지정된 경로에서 데이터를 스크래핑 해가는 Pulling 방식이기 때문에 아래의 조건을 만족하는 API를\n개발해야 한다.\n\n\nAPI\n\n\nLISTENING PORT: PROMETHEUS_MONITORING_PORT\n\nAPI를 제공하는 포트는 환경변수로 주입되는 PROMETHEUS_MONITORING_PORT 를 따라 별도로 listening 해야 한다.\nex) 9113\n\n\nPATH: GET /METRICS\n\n우리의 Scraper는 지정된 포트로 제공되는 GET /metrics 를 요청해서 응답으로 받아간 데이터를 저장하므로 다른 경로를 사용해서는\n안된다.\n\n\nRESPONSE\n\nhttps://www.npmjs.com/package/prom-client\n[https://www.npmjs.com/package/prom-client] 를 이용해 응답 데이터를 생성한다.\n\nMetrics 유형은 아래의 기준을 따라 선택한다.\n\n\nCOUNTER\n\n * 단순히 증가하기만 하거나 지속적으로 누적되는 메트릭에 적합하다.\n\n * 서버가 처리 성공/실패와 같이 누적된 횟수를 추적하는 데 사용될 수 있다.\n\n * 항상 0 이상의 값을 가지며, 증가만 할 수 있고 감소하지 않는다.\n\n * 사용 예:\n   \n   * 총 요청 통계\n   \n   * 서버 오류 발생 통계\n   \n   * 서버 업타임 통계\n\n\nGAUGE\n\n * 어떤 순간의 값을 나타내며, 증가/감소 할 수 있다.\n\n * 서버의 현재 상태나 수치를 나타낼 수 있다.\n\n * 사용 예:\n   \n   * 서버의 리소스 사용량\n   \n   * 일정 기간동안의 요청 평균 처리량\n   \n   * 현재 연결된 connection 수\n\n\nMETRICS NAMING\n\n아래의 네이밍 컨벤션을 준수하는것을 권장한다.\nhttps://prometheus.io/docs/practices/naming/\n[https://prometheus.io/docs/practices/naming/]\n\nprefix는 어플리케이션 이름으로 표현하는게 일반적이다.\n(아래 예제는 prefix 생략)\n\n * not_allowed_destination_requests (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   → not_allowed_destination_requests_total (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n * callback_failed_count (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   → callback_failed_total (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(아래 예제는 prefix 적용)\n\n * hubspot_adapter_api_current_usage_total\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2879127630"
  },
  {
    "pageContent": "[B] ORM 컬럼 매핑\n * BigInt\n * Decimal\n * Float\n * Date\n\n\nBIGINT\n\nBigInt 는 사용하지 않는다.\n\n * BigInt 로 선언한 컬럼의 값은 mysqljs 로 select 했을 때 string 으로 변환 된다.\n\n * https://github.com/mysqljs/mysql/issues/625\n   [https://github.com/mysqljs/mysql/issues/625]\n\n * supportBigNumbers, bigNumberStrings 같은 옵션을 사용할 수 있지만 이 옵션들은 BigInt 뿐만 아니라\n   Decimal 과도 관계가 있어서 개발할 때 까다로운 점이 많다.\n\n * 그래서 BigInt 는 사용하지 않도록 한다. BigInt 를 사용해야 하면 Node.js 로 다루기 적합하지 않은 도메인이다.\n\n * https://github.com/Ecube-Labs/haulla-api/pull/287#discussion_r371576738\n   [https://github.com/Ecube-Labs/haulla-api/pull/287#discussion_r371576738]\n\n\nDECIMAL\n\n * 컬럼 크기 계산\n   \n   * https://www.mysqltutorial.org/basic-mysql-tutorial-aspx/mysql-decimal/\n     [https://www.mysqltutorial.org/basic-mysql-tutorial-aspx/mysql-decimal/]\n\n * Precision, Scale\n   \n   * 달러 (13, 2)\n     \n     * 센트까지 저장해야 하기 때문에 scale은 2로 해야 한다.\n     \n     * precision은 예상되는 최대값과 컬럼 사이즈를 고려해 결정하면 된다.\n     \n     * (13, 2) 는 $ 99,999,999,999.99 까지 저장할 수 있다. (signed)\n\n\nFLOAT\n\n * Precision, Scale\n   \n   * 위도 (8, 6)\n   \n   * 경도 (9, 6)\n   \n   * CCN DB 에 위와 같이 되어 있긴 한데… 왜 이렇게 하지?\n\n\nDATE\n\nyyyy-mm-dd 형식의 날짜는 어플리케이션에서는 string 으로 처리, DB 에서는 date 로 처리\n\n@Property()\n@Column({ type: 'date' })\ncontractOn!: string;",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/330465394"
  },
  {
    "pageContent": "[H][B] 도메인 이벤트 개발 컨벤션\n * 1. 이벤트 클래스\n   * a. 이름 짓기\n   * b. 위치\n   * c. 데이터\n * 2. 도메인 이벤트 개발\n   * a. 발행(publish)\n     * i. model\n     * ii. service\n   * b. 구독(subscribe)\n\n\n\n\n1. 이벤트 클래스\n\n\nA. 이름 짓기\n\n이벤트는 과거에 벌어진 상태 변화나 사건을 의미하기 때문에 이름을 결정할 때 {대상 객체/사건}+{과거 시제}+'Event' 로 한다.\n\n예) CollectionRequestedEvent(수거 요청됨 이벤트), CollectionFinishedEvent(수거 완료됨 이벤트)\n\n\nB. 위치\n\n클래스 파일 위치는 ~/src/services/…/domain/events/하위에 둔다.\n\n예) bidding-closed-event.ts의 경우,\n~/rc/services/biddings/domain/events/bidding-closed-event.ts에 위치한다.\n\n\nC. 데이터\n\n이벤트는 해당 도메인 모델의 가능한 모든 property를 포함하도록 한다.\n\n\n2. 도메인 이벤트 개발\n\n\nA. 발행(PUBLISH)\n\n * 이벤트를 발행하기 위해서는 각각 model,service, 계층에서 작업이 필요하다\n\n\nI. MODEL\n\n * 도메인 모델에서 이벤트를 발행된다.\n\n * 이벤트를 발행하기 위해 DddModel에서 구현된 publishEvent메소드를 사용\n   [https://github.com/Ecube-Labs/haulla-api/blob/master/src/lib/ddd/ddd-model.ts#L90]한다.\n   그러면 DddModel이 갖고 있다가 repository.save 될 때 이벤트 저장소에 영속되고 transaction이 끝나고\n   event가 발행된다.\n\nimport { Entity } from '../../../lib/orm';\n// other imports ...\n\n// model.ts\n@Entity()\nclass Collection extends VersionedDddModel<Collection> {\n\n    // ...\n\n    approve(user: User) {\n        // 이벤트 발행\n        this.publishEvent(\n            new CollectionRequestedEvent(\n                this.collectionId,\n                this.generatorId,\n                this.servicePrice,\n                this.collectionExpectedAt,\n            ),\n        );\n    }\n    \n    // ...\n}\n\n\n\nII. SERVICE\n\n * 이벤트를 발행하는 service의 method는 @Transactional() decorator를 사용해야 이벤트를 consume할 수\n   있다. 그렇지 않으면 이벤트 테이블에 영속만 된다. ddd-service\n   [https://github.com/Ecube-Labs/haulla-api/blob/master/src/lib/ddd/ddd-service.ts#L25]\n   소스코드를 보면 알겠지만 transaction이 commit 된 후( @Transactional()이 붙은 메소드가 종료된 후) 현재\n   context의 handleEvents()가 동작하기 때문이다.\n\nimport { Service } from 'typedi';\nimport { DddService, Transactional } from '../../../lib/ddd';\n// other imports ...\n\n//service.ts\n@Service()\nclass AdminCollectionService extends DddService {\n    \n    // ...\n    \n    // service가 event를 발행하는 domain model의 method를 포함한다면  \n    // @Transactional() decorator에 event를 발행하는 로직이 있어서\n    // **반드시 decorator로 선언**해줘야 이벤트를 발행한다. \n    @Transactional()  \n    async approveCollectionRequest(collectionId: number, adminUser: User) {\n        const collection = await this.collectionRepository.findOneOrFail(collectionId);\n        collection.approve(adminUser);\n        await this.collectionRepository.save([collection]);\n    }\n    \n    // ...\n}\n\n\nB. 구독(SUBSCRIBE)\n\n * 이벤트를 구독하기 위해서는 @EventHander({eventName})decorator를 등록해 이벤트 핸들러로써 동작하게 하면 된다.\n   만약 어디에서도 이 service 파일이 import되지 않을 경우 server.ts에서 require해서 건드려 주도록 한다.\n\n * 이벤트 핸들러의 이름은 on + 이벤트 이름으로 한다.\n   \n   * https://haulla-domain.ecubelabs.xyz/events\n     [https://haulla-domain.ecubelabs.xyz/events] 에서 이벤트 구독현황을 확인할 수 있다.\n\n * 메서드의 첫번째 인자는 이벤트로 구독 중인 모든 이벤트의 타입을 선언해줘야 한다.\n   \n   * 참고 - https://github.com/Ecube-Labs/haulla/pull/930#discussion_r1623815363\n     [https://github.com/Ecube-Labs/haulla/pull/930#discussion_r1623815363]\n\nimport { DddService, Transactional, EventHandler } from '../../../lib/ddd';\n// other imports ...\n\n// event를 등록하기 위해서는 service가 **DddService를 상속**받아야 한다\nclass NotificationService extends DddService {\n\n    // ...\n    \n    @EventHandler(CollectionRequestedEvent) // 이벤트 핸들러 등록\n    @EventHandler(CollectionUpdatedEvent) // 이벤트 핸들러 등록\n    @Transactional()\n    async onCollectionRequestedEvent(collectionRequestedEvent: CollectionRequestedEvent | CollectionUpdatedEvent): Promise<void> {\n        const { collectionId, servicePrice, collectionExpectedAt } = collectionRequestedEvent;\n        const bidding = new Bidding({ collectionId, servicePrice, collectionExpectedAt });\n        await this.biddingRepository.save([bidding]);\n    }\n    \n    // ...\n    \n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/476381321"
  },
  {
    "pageContent": "[H][B] 특정한 시점에 실행 되어야 하는 로직 개발\n * 모델에 실행 시점 명시\n * Job 개발\n * Event handler 개발\n\n\n모델에 실행 시점 명시\n\n모델에 xxxScheduledAt property 를 추가하고 이 property 에 로직이 실행 되어야 하는 시각을 기록한다.\n\n[H][B][도메인 모델] 입찰\n[/wiki/pages/createpage.action?spaceKey=WIKI&title=%5BH%5D%5BB%5D%5B%EB%8F%84%EB%A9%94%EC%9D%B8%20%EB%AA%A8%EB%8D%B8%5D%20%EC%9E%85%EC%B0%B0%20%28Bidding%29]\n\n\nJOB 개발\n\n|-- src\n|-- |-- routes\n|   |-- |-- jobs\n|   |   |-- |-- jobA\n|   |   |-- |-- jobB\n\n * Job 은 여러 종류가 있고 특정한 시점에 실행 되어야 하는 로직을 처리하기 위한 job 만 있는 게 아니다. 특정한 시점에 실행 되어야\n   하는 로직을 처리하기 위한 job 과 다른 목적의 job 은 컨벤션이 다르므로 헷갈리지 말 것.\n\n * Job 은 실행 시점이 도달한 객체들에 대해 XXXScheduledEvent 발행 외의 다른 동작을 수행하면 안된다.\n   \n   @Transactional()\n   async closeBiddings(): Promise<void> {\n       const biddings = await this.biddingRepository.findByScheduledFinishAtLessThanAndFinishedAtIsNull(new Date());\n       handleEvents(biddings.map((bidding) => new CloseBiddingScheduledEvent(bidding.biddingId).withTxId(uuid())));\n   }\n\n\nEVENT HANDLER 개발\n\nEvent handler 는 XXXScheduledEvent 가 발행 되었을 때, 즉 특정한 시점에 도달 했을 때 실행해야 할 로직을 구현한다.\n\n@EventHandler(CloseBiddingScheduledEvent)\n@Transactional()\nasync onCloseBiddingScheduledEvent(closeBiddingScheduledEvent: CloseBiddingScheduledEvent): Promise<void> {\n    const bidding = await this.biddingRepository.findOneOrFail(biddingExpiredEvent.biddingId, {\n        lock: { mode: 'pessimistic_write' },\n    });\n    \n    if (bidding.finishedAt) {\n        logger.info(\n            `Another hauler:${bidding.winnerId} has already secured the collection:${bidding.referenceId}.`,\n        );\n        return;\n    }\n    bidding.close();\n    await this.biddingRepository.save([bidding]);\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/485720282"
  },
  {
    "pageContent": "[H][B] 외부 이벤트 개발 컨벤션\n * 1. 클래스 인스턴스 넘기지 않는다.\n\n\n1. 클래스 인스턴스 넘기지 않는다.\n\n아래 예시를 보면 실제 클래스 인스턴스 아니기 때문에 에러가 발생한다.\n\nclass Car extends DddEvent {\n    ...\n    startEngine() {\n    \n    }\n    ...\n}\n\nclass DddEvent extends DddEvent {\n    constructor(\n        ...\n        public car: Car\n    ) \n    ...\n}\n\n@EventHandler(DddEvent)\n@Transactional()\nasync handle(event: DddEvent, roles: EventHandlerRole[]) {\n    // 에러\n    event.startEngine()\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3035856902"
  },
  {
    "pageContent": "RouterSpec Type\n\nctx 타입을 더 편리하게 사용하기 위해 프로젝트에서 아래와 같이 타입을 확장할 수 있다.\n\n이 타입은 koa-x-router에 내장할 예정이 없다.\nwhy? → only joi만을 위한 코드는 JoiAdaptor로 충분하고 프로젝트마다 타입에 대한 구성이 조금씩 다를수 있어서 포함할 이유가\n없다.\n\nimport type { Context } from '@ecubelabs/seed';\nimport type * as Joi from 'joi';\nimport type { RouteLayerSpec } from 'koa-x-router';\n\nexport type RouterSpec<\n    V extends {\n        query?: Joi.mappedSchema;\n        params?: Joi.mappedSchema;\n        body?: Joi.mappedSchema;\n        output?: { [statusCode: string | number]: { body?: Joi.mappedSchema; header?: Joi.mappedSchema } };\n    } = unknown,\n> = RouteLayerSpec<\n    { context: Context },\n    {\n        query: V extends { query?: Joi.mappedSchema } ? Joi.extractType<V['query']> : unknown;\n        params: V extends { params?: Joi.mappedSchema } ? Joi.extractType<V['params']> : unknown;\n        // FIXME: koa-body가 any로 오버라이딩하는데 강제로 오버라이딩 할 방법이 없다. https://github.com/microsoft/TypeScript/issues/36146\n        // request: { body?: V extends { body?: Joi.mappedSchema } ? Joi.extractType<V['body']> : unknown };\n        body: Joi.extractType<V['output'][keyof V['output']]['body']>;\n    }\n>;\n\ndeclare module 'koa-x-router' {\n    interface Router {\n        add(\n            spec:\n                | RouterSpec<unknown>\n                | RouterSpec<unknown>[]\n                | RouteLayerSpec<unknown, unknown>\n                | RouteLayerSpec<unknown, unknown>[],\n        ): void;\n    }\n}\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2804252692"
  },
  {
    "pageContent": "[B] Endpoint 컨벤션\n\n\nREST\n\n가능하면 REST API 원칙을 충실하게 따른다.\n\n단, FSM (Finite State Machine) 의 상태를 변경하기 위한 API 의 경우 REST 원칙을 충실하게 지키려고 했을때 문제가\n좀 있다.\n\nPUT /plans/:id/status\n{ value: 'canceled' }\n\n * 클라이언트가 원하는 것: plan 취소\n\n * 위의 API 는 plan 의 상태를 canceled 로 변경하는 것일테니 클라이언트의 목적을 달성할 수 있다.\n\n * 그런데 plan 취소 시 상태 변경 뿐 아니라 다른 작업도 같이 해야하는 경우가 있다. ex - plan 을 취소하면 상태도 변경하지만\n   관련된 푸시 알림도 발송\n\n * 따라서 다음과 같이 API 이름을 짓는게 좀 더 자연스러워 보인다.\n\n\n\nPOST /plans/:id/cancel\n\n * REST API 에서 action 은 HTTP verb 로 처리하고 endpoint 는 명사로 이름을 짓는게 관례.\n\n * 하지만 HTTP verb 중에 cancel 같은 것은 없기 때문에 FSM 을 다루는 API 는 REST 원칙에 따라서 이름을 짓는게\n   애매하다.\n\n * 따라서 FSM 을 다루는 API 는 그냥 endpoint 에 action(동사)를 포함시켜서 이름을 짓도록 한다.\n\n * 우리만 이렇게 하는건 아니다. 참고 https://stripe.com/docs/api/invoices\n   [https://stripe.com/docs/api/invoices]\n\n\n\n\n\n\nURL 네이밍\n\nkebab-case를 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]카더라 썰1\n\nhttp://test.com/test_test_test [http://test.com/test_test_test]\n\n위 링크를 보면 이 페이지에서는 자세히 보면 살짝 보이지만 underscore(_)가 공백처럼 보일수 있어서 -를 쓰기 시작했다는 썰을\n주워들었는데, 옛날 인터넷 환경을 생각하면 신빙성이 있다. (그냥 클릭하면 되는거 아닌가 싶은데 (파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f611.png]\n프린트하거나 다른 환경을 고려한건진 모르겠다.)\n\n이 외에도 의미적으로 -가 단어의 분리를 잘 나타내기 때문이라는 말도 많다.\n\n아래 글들을 보면 케밥 케이스를 사용해야 할 이유가 많이 있다.\n\n * https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Why-you-should-make-kebab-case-a-URL-naming-convention-best-practice\n   [https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Why-you-should-make-kebab-case-a-URL-naming-convention-best-practice]\n\n * https://www.javacodegeeks.com/2018/12/whats-case-api.html\n   [https://www.javacodegeeks.com/2018/12/whats-case-api.html]\n\n * https://github.com/microsoft/api-guidelines/issues/67\n   [https://github.com/microsoft/api-guidelines/issues/67]\n\n * https://ux.stackexchange.com/questions/41595/what-is-the-casing-convention-for-url-routes\n   [https://ux.stackexchange.com/questions/41595/what-is-the-casing-convention-for-url-routes]\n\n\n\n\n\n\n참고\n\n[OJT] REST API\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1390084114/OJT+REST+API]\n\n[OJT] REST의 멱등성(Idempotence in REST)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173670455/OJT+REST+Idempotence+in+REST]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/225018068"
  },
  {
    "pageContent": "[B] 폴더 구조\n * 폴더 구조\n * index.ts\n * ${httpMethod}.ts\n * HEAD method 구현시 주의사항\n\n\n폴더 구조\n\n 1. API endpoint가 폴더 구조와 일치해야 한다.\n\n 2. API endpoint에 리소스 id 가 포함 된 경우 폴더 이름은 _ + id 로 한다.\n    \n    1. 리소스 id 외에 query string, body 는 폴더 구조에 포함될 수 없다.\n\n 3. HTTP method 단위로 route spec 을 생성 하고 이름은 lowercase 로 한다.\n\n// example \n// 수거(id=3) 조회\n// GET /generators/collections/3\n\n|-- routes\n|   |-- generators\n|   |   |-- collections\n|   |   |   |-- _collectionId\n|   |   |   |   |-- get.ts\n|   |   |   |   `-- index.ts\n\n// example\n// 개별서비스 생성\n// POST /generators/individual-services\n\n|-- routes\n|   |-- generators\n|   |   |-- individual-services\n|   |   |   |-- post.ts\n|   |   |   `-- index.ts\n\n\nINDEX.TS\n\n 1. 각 폴더에는 index.ts 가 존재해야 한다.\n\n 2. index.ts 는 폴더 내에 존재하는 route spec 을 모아서 spec array 로 반환 한다.\n\n 3. spec array 의 이름은 (public|private)폴더이름routes (camelCase)\n    \n    1. 토큰 없이 호출 가능한 API 면 public prefix 사용\n    \n    2. 토큰이 있어야 호출 가능한 API 면 private prefix 사용\n    \n    3. public 인지 private 인지는 폴더 내의 개별 route spec 을 봐야 알 수 있다.\n       \n       1. 아직 폴더 내에 public 과 private 이 섞여 있는 경우는 없었지만 섞여 있는 경우가 생기면 index.ts 가\n          public route spec 을 모은 spec array, private route spec 을 모은 spec array\n          두개를 export 하면 된다.\n\n// example\n// 폴더 구조가 아래와 같은 경우\n|-- routes\n|   |-- generators\n|   |   |-- individual-services\n|   |   |   |-- get.ts\n|   |   |   |-- post.ts\n|   |   |   `-- index.ts\n\n// index.ts 는 다음과 같이 작성한다\n\nimport { RouterSpec } from '~/@types/router';\nimport get from './get';\nimport post from './post';\n\nexport const privateIndividualServicesRoutes: RouterSpec<any>[] = [get, post];\n\nRouterSpec 타입은 RouterSpec Type\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2804252692/RouterSpec+Type]\n를 참조하면 된다.\n\n\n${HTTPMETHOD}.TS\n\n// example\n// 폴더 구조가 아래와 같은 경우\n|-- routes\n|   |-- generators\n|   |   |-- individual-services\n|   |   |   |-- get.ts\n|   |   |   |-- post.ts\n|   |   |   `-- index.ts\n\n * get.ts\n   \n   * GET 요청을 처리하는 라우트 핸들러가 포함 된 파일\n\n * post.ts\n   \n   * POST 요청을 처리하는 라우트 핸들러가 포함 된 파일\n\n\nHEAD METHOD 구현시 주의사항\n\n// someRoute/index.ts\nimport get from './get';\nimport head from './head';\n\n/** 주의! head spec을 get spec 이전에 두어야 함**/\nexport const anyResourceRoutes = [head, get];\n\n// someRoute/get.ts\nexport default {\n    path: '/samePath',\n    method: 'get',\n\n    handler: async (ctx) => {\n        ctx.body = { data };\n    },\n} as Spec;\n\n// someRoute/head.ts\nexport default {\n    path: '/samePath',\n    method: 'head',\n\n    handler: async (ctx) => {\n        ctx.status = 200;\n    },\n} as Spec;\n\nhttps://www.rfc-editor.org/rfc/rfc9110#HEAD:~:text=The%20HEAD%20method%20is%20identical%20to%20GET%20except%20that%20the%20server%20MUST%20NOT%20send%20content%20in%20the%20response.%20HEAD%20is%20used%20to%20obtain%20metadata%20about%20the%20selected%20representation%20without%20transferring%20its%20representation%20data%2C%20often%20for%20the%20sake%20of%20testing%20hypertext%20links%20or%20finding%20recent%20modifications.\n[https://www.rfc-editor.org/rfc/rfc9110#HEAD:~:text=The%20HEAD%20method%20is%20identical%20to%20GET%20except%20that%20the%20server%20MUST%20NOT%20send%20content%20in%20the%20response.%20HEAD%20is%20used%20to%20obtain%20metadata%20about%20the%20selected%20representation%20without%20transferring%20its%20representation%20data%2C%20often%20for%20the%20sake%20of%20testing%20hypertext%20links%20or%20finding%20recent%20modifications.]\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD]\n\n * HEAD method 는 GET method 와 동일하지만, body에 return 값이 포함되지 않음\n\n * 대부분 routing system 에서 GET request 에 대한 구현만 해놓으면, HEAD request handler는 구현하지\n   않아도 GET handler에 의해 처리되고 response에 body만 없음.\n\n * 주로 대용량의 body content를 요청하기 전에 해당 리소스에 대해 간단히 맛? 보는 정도의 method verb (정확히는\n   Content-Length나 metainformation에 대한 정보를 받기 위해 요청하는 용도라고 함 )\n\n * 다만 Koa router 에서 주의할 사항은 route middleware 등록할때, 배열에서 HEAD route spec을 항상 GET\n   route spec 앞에 배치해야함 (그렇지 않으면, GET/HEAD 두요청 모두 GET handler에서 intercept 됨)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/427786600"
  },
  {
    "pageContent": "[H][B] Route spec\n * path\n * method\n * meta\n * validate\n   * header\n   * query\n   * type\n   * params\n   * body\n   * output\n\nRoute spec 은 다음의 형식으로 작성한다.\n\nimport { RouterSpec } from '~/@types/router';\n\nconst validate = {\n    header: Joi.object({\n        ...\n    }),\n    query: Joi.object({\n        ...\n    }),\n    type: 'json',\n    params: Joi.object({\n        ...\n    }),\n    body: Joi.object({\n        ...\n    }),\n    output: {\n        200: {\n            body: Joi.object({\n              ...\n            }),\n        },\n        '400-599': {\n            body: Joi.object({\n              ...\n            }),\n        },\n    },\n} as const;\n\nexport default {\n    path:,\n    method:,\n    meta: {\n        document: {\n            summary:,\n            description:,\n            tags: [],\n        },\n    },\n    validate,\n    handler: async (ctx) => {\n        ctx.body = ...\n    },\n} as RouterSpec<typeof validate>;\n\n\nPATH\n\n\nMETHOD\n\nHTTP method\n\n\nMETA\n\n\nVALIDATE\n\n별도 변수로 작성하여 RouterSpec 제네릭에서 스키마 타입을 알수 있도록 하여 ctx 타입을 더 정확하게 사용한다.\n\n\nHEADER\n\nHTTP header.\n\npublic API 인 경우 header 를 선언하지 않는다.\n\nprivate API 인 경우 다음과 같이 header 를 선언한다.\n\nheader: Joi.object({\n    authorization: Joi.string()\n        .required()\n        .description('Bearer {token} 양식'),\n}).options({\n    allowUnknown: true,\n}),\n\n\nQUERY\n\nquery string.\n\nGET API 인 경우에 query string 으로 받는 input parameter 를 선언한다.\n\ninput parameter 가 없으면 선언하지 않아도 된다.\n\n\nTYPE\n\nPOST, PATCH, PUT API 인 경우에 type: 'json' 으로 선언한다.\n\n그 외의 경우에는 선언하지 않는다.\n\nkoa-joi-router 에서 koa-x-router로 전환되면서 이제 사용되지 않는다.\n기존에 필요했던 이유는 koa-joi-router가 body parser 기능을 내장하고 있었기 때문이다.\n\n\nPARAMS\n\nurl parameter 를 받는 경우에만 선언한다.\n\n\nBODY\n\nPOST, PATCH, PUT API 인 경우에 API 의 input parameter 를 선언한다.\n\n\nOUTPUT\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/458391553"
  },
  {
    "pageContent": "[B] 스키마 정의\n * Joi\n   * Presence\n     * required\n     * optional\n     * and\n     * 스키마 정의\n   * 스키마 선언 위치\n   * 스키마 네이밍\n   * Input 스키마\n     * Text\n       * POST\n       * PATCH\n   * output 스키마\n     * description\n * 스키마 테스트\n * In Haulla\n   * Phone Number\n     * POST, PATCH\n     * GET\n\n\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/458391553/H+B+Route+spec\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/458391553/H+B+Route+spec]\n에서 사용하는 스키마는 joi [https://hapi.dev/module/joi/] 를 이용해 정의한다.\n\njoi 를 사용하는 이유는 다음과 같다.\n\n * joi 스키마를 기반으로 swagger 문서 [https://docs-stage.ecubelabs.xyz]가 자동으로 생성된다.\n\n * input 또는 output 의 유효성을 검사할 수 있다.\n   \n   * 필수값이 누락 되지 않았는가.\n   \n   * 정의 된 스키마와 같은 타입의 값을 입력 받는가/반환 하는가.\n   \n   * 유효성은 값 자체의 유효성 (타입, 형식, …)을 의미하며 비즈니스 로직에 의한 유효성은 joi 로 검사하지 않는다.\n     \n     * number 스키마라면 1, 2, 3, … 이런 값을 받았는지 검사.\n     \n     * 주문 API 라면 결제 시각이 주문 시각보다 나중이어야 하는데 이런 검사는 joi 로 하지 않는다.\n\n\nJOI\n\n\nPRESENCE\n\nJoi schema 는 required / optional 을 지원한다.\n\nuser: Joi.object({\n  name: Joi.string().required(),\n  age: Joi.number().optional(),\n})\n\n\nREQUIRED\n\n해당 key 값을 반드시 필요로 함\n\n위의 예제에서 user = { age: 30 } 으로 보내면 오류\n\n\nOPTIONAL\n\n해당 key 값 없어도 됨\n\n위의 예제에서 user = { name: 'EcubeLabs' } 로 보내도 ok\n\n\nAND\n\nkeys가 같이 존재하거나 없음\n\nconst schema = Joi.object({\n    id: Joi.number().optional(),\n    name: Joi.string().optional(),\n}).and('id', 'name').required();\n\nschema.validate({ id: 1, name: 'John' });\nschema.validate({ name: 'John' }); // Error [ValidationError]: \"value\" contains [name] without its required peers [id]\nschema.validate({ id: 1 }); // Error [ValidationError]: \"value\" contains [id] without its required peers [name]\nschema.validate({ });\n\n\n스키마 정의\n\n\n스키마 선언 위치\n\n스키마는 라우터 영역에 구현한다.\n\n * API 의 결과값은 어플리케이션 서비스 리턴값의 부분집합이 된다.\n   \n   * 하나의 어플리케이션 서비스만 호출해서 이를 API 의 결과값으로 사용하는 경우 API 의 결과값은 어플리케이션 서비스 리턴값의\n     부분집합.\n     \n     * validate: {\n         output: Joi.object({\n           name: Joi.string().required(),\n         }).options({ stripUnknown: true }),\n       },\n       handler: async (ctx) => {\n         const resultA = await serviceA.get(); // { name: string; age: number; }\n         ctx.body = { data }\n       }\n   \n   * 여러개의 어플리케이션 서비스를 호출해서 이를 API 의 결과값으로 사용하는 경우 API 의 결과값은 어플리케이션 서비스 리턴값들의\n     합집합의 부분집합.\n     \n     * validate: {\n         output: Joi.object({\n           name: Joi.string().required(),\n           team: Joi.string().required(),\n         }).options({ stripUnknown: true }),\n       },\n       handler: async (ctx) => {\n         const resultA = await serviceA.get(); // { name: string; age: number; }\n         const resultB = await serviceB.get(); // { team: string; }\n         ctx.body = { data: { ...resultA, ...resultB } }\n       }\n\n * Joi.options.stripUnknown = true 옵션을 사용하면 Joi 가 서비스 결과값을 API 결과값으로 map 해준다.\n   (서비스의 결과값중 스키마에 정의된 값만 API 결과값으로 사용 됨)\n\n\n스키마 네이밍\n\nheaderSchema, paramsSchema, inputSchema, outputSchema\n\n\nINPUT 스키마\n\n * Input 은 API 에서 query string (GET 요청의 경우), body (POST, PUT, PATCH 요청의 경우), url\n   parameter (모든 요청에서 가능)에 해당한다.\n\n * 필수로 받아야 하는 값은 Joi.required(), 그렇지 않으면 Joi.optional()로 선언한다.\n\n * 스키마를 서비스의 메소드 이름 + inputSchema로 이름 짓는다.\n\n * schema로 부터 받은 값들의 type을 정의하기 위해 Joi.extractType<typeof someSchema>를 사용한다.\n\n * body, query, params 그리고 header등을 조합 해 service method를 호출하기 위한 method params\n   정의한다. method params를 정의하기 위해 Parameters<SomeClass['anyMethod']>를 사용한다.\n\n\nTEXT\n\nPOST\n\n필수 값: joi.string().required()\n\n * 필수 값인데 '' 를 허용 하는건 말이 안 된다. 그건 필수가 아님.\n\n * ex) address1: joi.string().required()\n\n선택 값: joi.string().allow('')\n\n * ex) address2: joi.string().allow('')\n   \n   * address2: '' 로 보내도 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n   \n   * address2 보내지 않아도 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nPATCH\n\n필수 값: joi.string()\n\n선택 값: joi.string().allow('')\n\n * Property 가 없으면 업데이트 하지 않겠다는 의미 → PATCH 에서는 required() 가 사용 되면 안 된다.\n\n\nOUTPUT 스키마\n\n * 다음과 같이 작성 되어야 한다.\n   \n   * output: {\n         200: {\n             body: Joi.object({\n                 data: outputSchema\n             }),\n         },\n     },\n   \n   * body는 반드시 스키마가 들어가도록 한다.\n\n * 스키마를 서비스의 메소드 이름 + outputSchema로 이름 짓는다.\n\n * 가능하면 PATCH /resources/:id 와 /resources/:id 는 같은 output 으로 정의한다.\n   \n   * 그렇지 않으면 Optimistic update\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1269235768/Optimistic+update]\n     전략을 사용할 수 밖에 없다.\n\n * 가능하면 GET /resources 와 /resources/:id 는 같은 output 으로 정의한다.\n   \n   * Over-fetch 에 따른 최적화는 진짜 문제가 있는 경우에 다시 고민하면 된다.\n\n * output 스키마의 prop 들은 항상 required() 여야 한다. 데이터가 없는 경우 required().allow(null) 로\n   선언 한다.\n   \n   * optional 로 선언하면 개발자의 실수를 테스트 코드로 걸러낼 수가 없다.\n   \n   * // outputSchema = Joi.object({\n     //   id: Joi.number().required(),\n     //   name: Joi.string().optional(),\n     // });\n     \n     test('testA', () => {\n       const body = Spec.validate!.output!['200'].body as Joi.SchemaLike;\n     \n       const { error } = body.validate(\n         { id: 1, name: 'haulla' },\n       );\n     \n       expect(error.message).toBe('...');\n     });\n     \n     test('testB', () => {\n       const body = Spec.validate!.output!['200'].body as Joi.SchemaLike;\n     \n       const { error } = body.validate(\n         { id: 1 },\n       );\n     \n       expect(error.message).toBe('...');\n     });\n     \n     // class Service {\n     //   async doSomething() {\n     //     return { id }; // 개발자가 실수로 id 만 리턴하도록 개발\n     //   }\n     // }\n     \n     * name 이 스키마에 optional 로 선언 되었기 때문에 testA, testB 는 모두 성공한다.\n     \n     * 이 경우 위와 같이 실수를 하면 테스트 단계에서는 발견이 불가능하고 런타임에 오류가 발생한다.\n     \n     * name 을 required().allow(null) 로 선언하면 [H][B] 라우트 핸들러 개발\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/591200604/H+B] #2.3\n       에 의해 개발 단계에서 오류 발견이 가능하다.\n\n * options.stripUnknown\n   \n   * 객체를 조회한 결과를 리턴 하는 경우 stripUnknown: true를 한다. 보통 라우터 영역이 서비스 영역에 의존하는데 라우터는\n     서비스로 부터 가져온 데이터를 사용해 유저에게 보여줘야 하기 때문이다. 현재 Joi 스키마가 구현의 편리를 위해 서비스 영역에 구현되어\n     있기는 하지만, output 스키마가 동작하는 곳은 라우터 영역이라 볼 수 있다.\n   \n   * 따라서,striptUnkown: true는 라우터 영역이 요청자에게 약속된 결과를 리턴하는 과정이다. 우리는 json format만\n     리턴하고 있기 때문에 json의 key, value를 map하는 과정이라 보면 된다.\n   \n   * 참고: https://github.com/Ecube-Labs/haulla-api/pull/397#discussion_r429000776\n     [https://github.com/Ecube-Labs/haulla-api/pull/397#discussion_r429000776]\n\n\nDESCRIPTION\n\ndescription에 class: X를 추가해서 front-end 개발자가 모델을 쉽게 인식할 수 있도록 한다.\n\n예를 들어 GET /admins/individual-services/:individualServiceId와 PATCH\n/admins/individual-services/:individualServiceId는 output 스키마가 동일한데 스웨거 문서만 보고서는\n두 API의 output 스키마가 같은지 확인이 힘들다. 그래서 description('class:\nIndividualServiceDetail')과 같이 명시적으로 API의 output 스키마를 알려주는 게 좋다.\n\n[H][F] 데이터 모델 개발\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230719566/H+F]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/458522695/image-20201021-081100.png?api=v2]\n\n\n스키마 테스트\n\n다음과 같이 단순한 형태라도 작성하도록 한다.\n\n * API 응답값이 바뀌는 것을 인지하기 위한 최소한의 안전 장치. API 응답값이 바뀔때는 하위 호환성을 유지해 주거나 프론트엔드와 함께\n   변경해야 한다.\n\nimport * as Joi from 'joi';\nimport Spec from './get';\n\ndescribe('GET /v2/sites 테스트', () => {\n    test('정상적인 output', () => {\n        const body = Spec.validate!.output!['200'].body as Joi.SchemaLike;\n\n        const { error } = body.validate(\n            [\n                {\n                    id: 80,\n                    name: '두비원 차고지1',\n                },\n                {\n                    id: 119,\n                    name: '고양바이오매스',\n                },\n            ],\n        );\n        expect(error).toBeUndefined();\n    });\n});\n\n\n\n\nIN HAULLA\n\n\nPHONE NUMBER\n\n * 하울라에서 사용하는 핸드폰 번호는 2가지가 있다.\n   \n   * 미국 번호 - 111-222-3333\n   \n   * 테스트용 한국 번호 - +8210-1234-5678\n\n// schema.ts\n\nexport const phoneNumberSchema = (args?: { shouldFormatted?: boolean; allowEmpty?: boolean }) => {\n    const { shouldFormatted = false, allowEmpty = false } = args || {};\n\n    let valueSchema = Joi.string().required().description('번호');\n    if (shouldFormatted) {\n        valueSchema = valueSchema.regex(/^[1-9]\\d{2}-\\d{3}-\\d{4}$|^\\+8210-\\d{4}-\\d{4}$/);\n    }\n    if (allowEmpty) {\n        valueSchema = valueSchema.allow('');\n    }\n\n    return Joi.object({\n        label: Joi.string().required().description('라벨'),\n        value: valueSchema,\n    });\n};\n\n\nPOST, PATCH\n\n * post, patch의 경우 우리가 현재 받는 포맷이 정해져있으므로 regex를 적용해야하기 위해 shouldFormatted: true를\n   줘야한다.\n\nbillingPhoneNumbers: Joi.array()\n        .items(phoneNumberSchema({ shouldFormatted: true }))\n        .description('청구 휴대폰번호[]'),\n\n\nGET\n\n * get의 경우 기존의 핸드폰 포맷이 바뀌었을 수 있고, empty string인 경우가 있다.\n\nphoneNumbers: Joi.array()\n        .items(phoneNumberSchema({ shouldFormatted: false, allowEmpty: true }))\n        .min(0)\n        .required()\n        .description('휴대폰 번호[]'),\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/458522695"
  },
  {
    "pageContent": "[H][B] 라우트 핸들러 개발\n\n\n\n * 1. ctx destructuring\n * 2. 서비스 호출\n   * 2.1. 서비스 객체 획득\n   * 2.2. 서비스 params 선언\n   * 2.3. 서비스 호출\n * 3. 서비스 결과값 body 로 설정\n\nconst validate = { ... } as const;\n\nexport default {\n  path: 'API endpoint goes here',\n  method: 'get' | 'post' | 'put' | 'patch' | 'delete',\n  meta: {\n    ...\n  },\n  validate,\n  handler: async (ctx) => {\n    // 1. ctx destructuring\n    const { context, user } = ctx.state as { context: DddContext, user: User };\n    \n    // 2. 서비스 호출\n    \n    // 2.1. 서비스 객체 획득\n    const service = context.get(Service);\n    // 2.2. 서비스 params 선언\n    const { a, b, c }: Joi.extractType<typeof paramsSchema> = ctx.request.params;\n    const { x, y, z }: Joi.extractType<typeof inputSchema> = ctx.request.query; (or ctx.request.body)\n    const serviceParams: Parameters<Service['doSomething']> = [a, b, c, x, y, z];\n    // 2.3. 서비스 호출\n    const data: Joi.extractType<typeof outputSchema> = await service.doSomething(...serviceParams); \n    \n    // 3. 서비스 결과값 body 로 설정\n    ctx.body = { data };\n  }\n} as RouterSpec<typeof validate>;\n\n주석도 동일하게 작성합니다.\n[https://github.com/Ecube-Labs/haulla-api/blob/e98e34c6f7399e22bf69a0b505fc42557ea7bc6d/src/routes/generators/payment-methods/post/post.ts#L41]\n\n\n1. CTX DESTRUCTURING\n\n\n2. 서비스 호출\n\n\n2.1. 서비스 객체 획득\n\n1. ddd-context\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270004/1.+ddd-context]\n의 이유로 아래와 같이 라우트 핸들러에서 context를 사용해 어플리케이션 서비스 객체를 획득하도록 한다.\n\n// ...\nimport { DddContext } from '../../../../lib/ddd';\nimport { QueryIndividualServiceService } from '../../../../services/individual-services/application/service';\n\nexport default {\n  // ...\n  handler: async (ctx) => {\n    // ...\n\n    const queryIndividualServiceService = context.get(QueryIndividualServiceService);\n\n    // ...\n  },\n} as RouterSpec<typeof validate>;\n\n\n2.2. 서비스 PARAMS 선언\n\n다음과 같이 하면 개발 단계에서는 오류를 발견할 수 없고 runtime 에 id 의 타입 불일치로 인한 오류가 발생한다. (스키마에는\nnumber 로 선언했는데 실제 서비스가 요구하는 건 string)\n\nconst inputSchema = Joi.object({\n  id: Joi.number().required(),\n});\n\nconst validate = {\n  body: inputSchema,\n} as const;\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    const { id } = ctx.request.body;\n    // ...\n    const data = await service.doSomething(id); \n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string) {\n    // ...\n  }\n}\n\n이는 ctx.request.body, query, params 는 Record<string, string> 이거나 any type 이기\n때문이다.\n\n번거롭지만 다음과 같이 해야 typesafe 하게 개발할 수 있다.\n\nconst inputSchema = Joi.object({\n  id: Joi.number().required(),\n});\n\nconst validate = {\n  body: inputSchema,\n} as const;\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    const { id } = ctx.request.body;\n    // ...\n    const { id }: Joi.extractType<typeof inputSchema> = ctx.request.body;\n    // 여기서 타입 오류 발생\n    // id 는 inputSchema 에서 추출했으므로 number type.\n    // Parameters<Service['doSomething']>은 [string]이므로 [number]를 [string]에 할당할 수 없다.\n    const doSomethingParams: Parameters<Service['doSomething']> = [id];\n    \n    const data = await service.doSomething(...doSomethingParams); \n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string) {\n    // ...\n  }\n}\n\n\n2.3. 서비스 호출\n\nctx.body 는 any type 이기 때문에 다음과 같이 하면 2.2 와 똑같은 문제가 있다.\n\nconst outSchema = Joi.object({\n  name: Joi.number().required(),\n});\n\nconst validate = {\n  output: {\n    200: { body: Joi.object({ data: outputSchema }) }\n  }\n} as const;\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    // ...\n    const data = await service.doSomething(...doSomethingParams);\n    ctx.body = { data };\n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string): Promise<string> {\n    // ...\n    return 'sw';\n  }\n}\n\n번거롭지만 다음과 같이 해야 typesafe 하게 개발할 수 있다.\n\nconst outSchema = Joi.object({\n  name: Joi.number().required(),\n});\n\nconst validate = {\n  output: {\n    200: { body: Joi.object({ data: outputSchema }) }\n  }\n};\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    // ...\n    // 여기서 타입 오류 발생\n    // data 는 outputSchema 에서 추출했으므로 type { name: number; }.\n    // 서비스의 리턴 type 은 { name: string } 이므로 서비스의 리턴값을 data 에 할당할 수 없다.\n    const data: Joi.extractType<typeof outputSchema> = await service.doSomething(...serviceParams); \n    ctx.body = { data };\n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string): Promise<{ name: string }> {\n    // ...\n    return { name: 'sw' };\n  }\n}\n\n\n3. 서비스 결과값 BODY 로 설정",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/591200604"
  },
  {
    "pageContent": "[B] HTTP Headers\n\n비표준 헤더(X-*)는 가능한 사용하지 않는다. IANA 레지스트리에 등록된 헤더중 적합한 헤더를 찾아 사용한다.\n\n[H][O] Timezone\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/244416588/H+O+Timezone]\n에서 사용하는 The-Timezone-IANA 도 같은 맥락으로 채택된 헤더.\n\n\n참조\n\n * https://developer.mozilla.org/ko/docs/Web/HTTP/Headers\n   [https://developer.mozilla.org/ko/docs/Web/HTTP/Headers]\n\n * https://www.iana.org/assignments/message-headers/message-headers.xhtml\n   [https://www.iana.org/assignments/message-headers/message-headers.xhtml]\n\n\n\n\nRESPONSE MESSAGE TRANSLATION(INTERNATIONALIZATION)\n\n서버에서 응답하는 메세지를 그대로 화면에 보여줘야 하는 경우 클라이언트는 Accept-Language를 헤더로 포함해 원하는 언어를 서버에게\n표현한다\n\nhttps://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Accept-Language\n[https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Accept-Language]\n\n서버는 이 헤더에 있는 값을 우선적으로 참조하여 번역된 메세지를 반환하면 된다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2029879329"
  },
  {
    "pageContent": "[B] CSV Export API 개발\n\n\n기본 컨벤션\n\n * 모든 CSV 파일은 서버에서 데이터를 생성하여 응답하도록 한다.\n\n * 응답 헤더는 Content-type: text/csv 를 반드시 포함한다.\n\n * 응답 데이터는 ctx.body = { data: '<csv data>' }; 처럼 data key에 담아서 응답한다.\n   \n   * 프론트엔드에서는 정상적인 모든 API 응답 값이 data 에 들어있다고 가정하고 작성되어 있기 때문이다.\n\n\n대용량 CSV 응답 데이터 컨벤션\n\n제품 통신 로그와 같이 기본적으로 10MB 이상의 데이터를 추출하는 일이 잦은 요청에 적용 할 컨벤션입니다.\n\n * 모든 CSV 파일은 서버에서 데이터를 생성하여 응답하도록 한다.\n\n * 응답 헤더는 Content-type: text/csv 를 반드시 포함한다.\n\n * 데이터를 DB에서 가져오는 경우 Stream으로 가져와야 한다.\n   \n   * async findByClientIdsDateBetweenStream(params: { clientIds: number[]; from: Date; to: Date }) {\n         const { clientIds, from, to } = params;\n     \n         const queryBuilder = this.entityManager.createQueryBuilder(this.entityClass, 'clientLogRaw');\n         return queryBuilder\n             .select([...])\n             .where('clientIdx IN (:...clientIds) AND date >= :from AND date < :to', {\n                 clientIds,\n                 from,\n                 to,\n             })\n             .stream();\n     }\n   \n   * TODO: TypeORM은 query builder가 아니면 Stream으로 받아올수가 없다…\n\n * CSV 변환 또한 Stream pipe를 이용해야 하며, 서비스의 return 값도 Stream으로 내보내야 한다.\n   \n   * import { Transform } from '@json2csv/node';\n     ...\n     async getCsv(params: { clientIds: number[]; from: Date; to: Date }) {\n         const { clientIds, from, to } = params;\n     \n         const clientLogRawsInput = await this.clientLogRawRepository.findByClientIdsDateBetweenStream({\n             clientIds,\n             from,\n             to,\n         });\n         const parser = new Transform(\n             {\n                 fields: [...],\n             },\n             undefined,\n             { objectMode: true },\n         );\n     \n         return clientLogRawsInput.pipe(parser);\n     }\n\n * 응답 데이터 또한 ctx.body = logsStream; 처럼 Stream을 그대로 반환한다.\n\n * 프론트엔드 또한 기존과 다르게 처리해줘야 한다.\n   TODO: code 적용된 permalink\n\n위와 같이 하는 경우 아래와 같은 이점이 있다.\n\n 1. DB에서 가져온 데이터의 chunk+@ 만큼만 메모리를 사용한다.\n\n 2. DB에서 데이터를 전부 가져오기 전에 CSV 변환을 수행할 수 있다.\n\n 3. CSV 변환된 데이터는 즉각 요청자에게 전달되어 빠른 응답의 시작을 기대할 수 있다.\n    \n    1. 단, 데이터를 전부 받아가는 시간이 더 빠르다는 말은 아님. 대체로 약간 더 느릴수밖에 없다.\n    \n    2. 그럼 빠르게 응답을 시작하면 어떤 이점이 있는가?\n       \n       1. 데이터를 받기 시작하면 timeout 에러는 발생하지 않으므로 최종적인 데이터 변환에 오래걸린다고 해도 사용자 입장에서\n          timeout 에러가 발생할 확률이 훨씬 낮아진다.\n       \n       2. 서버에서 모든 데이터를 변환할 때 까지 DB에서 받아온 데이터와 변환중인 데이터를 메모리에 모두 들고 있을 필요가 없다.\n          위와 같이 스트리밍하지 않는 경우 DB에서 가져온 데이터를 전부 변환했다 하더라도, 전부 응답 데이터로 내려주기 전까지는 변환\n          데이터도 모두 메모리에 들고있어야 하므로 가용 리소스에 손해를 본다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2832334896"
  },
  {
    "pageContent": "ICU Message Syntax\n\nhttps://unicode-org.github.io/icu/userguide/format_parse/messages/\n[https://unicode-org.github.io/icu/userguide/format_parse/messages/]\n\n보통 확장 가능한 형태로 지원하니 직접 구현해서 아래와 같은 표준 형태로 쓰면 좋습니다.\n\n테스트는 이 사이트 [https://formatjs.io/docs/intl-messageformat/]에서 가능합니다.\n\n\nNUMBER\n\n\nNUMBER > CURRENCY\n\n{amount, number, currency=USD} # 120 => US$120.00\n{amount, number, currency=KRW} # 120 => ₩120\n\n위 형식이 표준 문법이지만 우리가 사용하는 intl-messageformat은 아래처럼 사용해야한다.\n\n{amount, number, ::currency/EUR} # 100 => €100.00\n{amount, number, ::currency/KRW} # 100 => ₩100\n{amount, number, ::currency/USD} # 100 => US$100.00\n\n\nNUMBER > PERCENTAGE\n\n터키어(lang: tr)은 %가 앞으로 붙는다.\n\n{amount, number, percent} # 1 => 10%, %10\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142"
  },
  {
    "pageContent": "TypeORM + TypeGraphQL 가이드\n\nWIP\n\n\nTYPEORM + TYPEGRAPHQL 조합\n\n\n장점\n\n\n단점\n\n\n\n\nTYPEGRAPHQL\n\nGitHub: https://github.com/MichalLytek/type-graphql\n[https://github.com/MichalLytek/type-graphql]\nHome: https://typegraphql.ml/ [https://typegraphql.ml/]\nGetting started: https://typegraphql.ml/docs/getting-started.html\n[https://typegraphql.ml/docs/getting-started.html]\n\n\n기본적인 사용법\n\n클래스와 데코레이터만 사용해서 GraphQL 객체 타입과 그 필드를 선언할 수 있습니다.\n\nhttps://github.com/MichalLytek/type-graphql/blob/master/docs/types-and-fields.md\n[https://github.com/MichalLytek/type-graphql/blob/master/docs/types-and-fields.md]\n\n@ObjectType()\nclass Recipe {\n  @Field(type => ID) // GraphQLID 스칼라 타입\n  id: string;\n  \n  @Field() // 간단한 타입은 이렇게 선언할 수 있다\n  title: string;\n\n  // Array, Promise같은 제네릭 타입인 경우 이렇게 명시해줘야 한다.\n  // 감싸는 []는 배열의 깊이를 의미한다.\n  // 함수 형식으로 타입을 넘기는 이유는 순환 참조를 막기 위해서라고 한다.\n  @Field(type => [Rate])\n  ratings: Rate[];\n\n  // optional 필드는 nullable 프로퍼티를 지정해야 합니다.\n  @Field({ nullable: true })\n  averageRating?: number;\n}\n\n\n\n\nTYPEORM\n\n\nENTITY\n\nhttps://typeorm.io/#/entities [https://typeorm.io/#/entities] 필독\n\n\nRELATIONS\n\nhttps://typeorm.io/#/relations [https://typeorm.io/#/relations] 필독",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374210603"
  },
  {
    "pageContent": "[gql] Server Error handling\n\n\n현재 문제\n\n 1. 아폴로는 실행중에 에러가 발생한 위치에 따라 핸들링 가능한 위치가 다름\n\n 2. 아폴로는 에러가 발생하면 동시에 요청한 쿼리들도 중단됨\n    \n    1. 부분적으로 성공한 payload라도 받기 위해 전부 성공처럼 처리해서 응답을 하면 에러가 사라져서 클라이언트는 어떤 문제가 발생한지\n       알수 없음\n\n 3. 아폴로가 기본적으로 제공해주는 에러 양식은 프로덕션에서 사용하기 적합하지 않음\n\n여기서 언급한 아폴로의 문제들은 아폴로만의 문제인지, GraphQL 스펙의 한계인지 아직 잘 모름.\n\n\n오류 발생 가능한 위치\n\n 1. 인프라\n    \n    * 서버가 정상적으로 연결되지 않거나 하여 API 서버로 도달하지 못함\n\n 2. 구문 분석\n    \n    * 클라이언트가 잘못된 쿼리를 요청함 → 정확히 잘못된 쿼리의 정의가 명확하지 않음 (파란별)\n      [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f611.png]\n\n 3. 검증\n    \n    * 유효한 쿼리를 보냈지만, 스키마가 맞지 않는 등 gql validation 과정에서 검증이 실패함\n\n 4. 실행\n    \n    * 클라이언트가 잘못된 입력 값을 보냈거나 리소스를 찾을수 없는 등, 여러 비즈니스 로직에 의한 의도적인 동작\n    \n    * 코드상의 에러로 개발자가 핸들링 하지 않음\n\n\nGRAPHQL 서버 에러 발생 유형\n\n앞에 있는것은 오류가 발생하는 단계입니다.\n\n 1. [인프라] 서버 에러 (흔히 HTTP status 5xx, … 처럼 다룸)\n\n 2. [구문 분석] 클라이언트/요청 에러 (흔히 HTTP status 4xx, 사용자 인증 실패, … 처럼 다룸)\n\n 3. [구문 분석]존재하지 않거나 의도하지 않은 양식의 쿼리를 보낸 경우\n\n 4. [검증] 문법, 스키마 등을 잘못 보내 쿼리의 검증이 실패하는 경우\n\n 5. [실행] 예외처리에 의해 개발자가 의도적으로 오류를 발생시킨 경우\n\n 6. [실행] resolver나 subscription에서 호출하는 코드에서 핸들링하지 않은 에러가 발생한 경우 (개발자 오류)\n\n\n해결을 위한 방법\n\n 1. 실행 단계에서 발생하는 에러는 실제론 발생시키지 않고 스키마에 에러 내용을 포함하여 내보냅니다.\n    \n    1. [https://ecubelabs.atlassian.net/wiki/download/attachments/436699342/image-20200317-054317.png?api=v2]\n       \n       이런 느낌;\n\n 2. 그 외에 구문 분석, 검증 단계에서 발생하는 에러는 사용자에게 디테일하게 주지 않고 추상적으로 줍니다.\n\n 3. … 더 없나?\n\n\n\n--------------------------------------------------------------------------------\n\n\n보안 에러 처리\n\nDB나 다른 여러 민감한 정보가 노출될 가능성이 있는 에러는 미리 잡아서 노출하지 않도록 하는것이 중요합니다.\n그리고 우리가 사용하는 Apollo server는 2~6번에 해당하는 에러를 rewrite할 수 있도록 기능을 지원하기 때문에 이것을 사용하면\n됩니다.\n\nhttps://www.apollographql.com/docs/apollo-server/data/errors/#redacting-the-error-message\n[https://www.apollographql.com/docs/apollo-server/data/errors/#redacting-the-error-message]\n\n\n\n--------------------------------------------------------------------------------\n\n\nREFERENCES\n\n * https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1\n   [https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1]\n\n * https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210\n   [https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210]\n\n * https://www.apollographql.com/docs/apollo-server/data/errors/\n   [https://www.apollographql.com/docs/apollo-server/data/errors/#redacting-the-error-message]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436699342"
  },
  {
    "pageContent": "[gql] Client Error handling\n\nhttps://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210\n[https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601236/image-20200317-073401.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436601236"
  },
  {
    "pageContent": "How to create Custom Error\n\n\n새로운 에러 타입 생성\n\n * ES6 이상의 문법을 지원하는 환경인 경우 → 클래스 상속 이용\n   \n   \n   class CustomError extends Error {\n       constructor(message, info) {\n           super(message);\n           this.name = this.constructor.name; // 에러 출력 시 보통 ${this.name}: ${this.message}\\n${this.stack}의 형태가 됨\n           this.info = info;\n       }\n   }\n\n * 클래스 문법을 사용하지 못하는 경우 → 프로토타입 상속 이용 (혹은 Node의 경우 util.inherits() 이용)\n   \n   function CustomError(message, info) {\n       this.name = 'CustomError';\n       this.info = info;\n       this.message = message;\n       if (Error.captureStackTrace) {\n           Error.captureStackTrace(this, CustomError);\n       }\n   }\n   CustomError.prototype = Error.prototype; // 혹은 Node인 경우 require('util').inherits(CustomError, Error);\n\n\n\n\n\nSTACK TRACE 제어\n\n 1. 일부 브라우저(Firefox 66.0.5)나 Node 이전 버전(< 7)에서 Error 서브 클래스 객체의 stack trace에\n    생성자가 추가되지 않도록 할 때\n    \n    class CustomError extends Error {\n        constructor(message) {\n            super(message);\n            this.name = this.constructor.name;\n            // 아래 코드를 추가하지 않으면 stack trace에 CustomError가 추가되게 됩니다.\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n            }\n        }\n    }\n\n 2. function과 util.inherits() (혹은 prototype 상속) 을 이용해 새로운 Error 서브 클래스 객체에 stack\n    trace를 추가하고 싶을 때\n    \n    function CustomError (message) {\n        this.name = 'CustomError';\n        // 아래 코드를 추가하지 않으면 new CustomError()에 stack 프로퍼티가 존재하지 않게 됩니다.\n        // 두 번째 파라미터로 CustomError를 전달해서 CustomError 함수가 stack trace에 추가되지 않도록 합니다.\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, CustomError);\n        }\n    }\n    \n    CustomError.prototype = Error.prototype; // 혹은 Node의 경우 require('util').inherits(CustomError, Error)\n\n 3. 그 외 에러를 throw한 함수가 stack trace에 추가되지 않길 바랄 때\n    \n    function throwError(type) {\n        switch (type) {\n            case 'database':\n                const err = new Error('database error');\n                Error.captureStackTrace(err, throwError);\n                throw err;\n        }\n    }\n\n\n\n\n\nSTACKTRACELIMIT 설정\n\nclass CustomError extends Error {\n    constructor(message, info) {\n        const prevStackTraceLimit = Error.stackTraceLimit;\n        Error.stackTraceLimit = 3;\n        super(message);\n        Error.stackTraceLimit = prevStackTraceLimit;\n        this.name = this.constructor.name;\n        this.info = info;\n    }\n}\n\n\n\n\n\n\n\n\nREFERENCES\n\n * https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript\n   [https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript]\n * https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Error\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Error]\n * https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt\n   [https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/154305331"
  },
  {
    "pageContent": "에러 코드 (Error Code)\n\n\n개요\n\nimage-20240306-085825.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2927394962/image-20240306-085825.png?api=v2]\n\n다른 서버로 요청을 했을 때 해당 서버에서 에러가 나면 axios 에러를 그대로 뱉어 Internal Error 가 뱉어진다.\n\n→ 클라이언트는 500 error일때 something went wrong 오류를 보기때문에 실제 에러가 어떤 에러인지 명확하게 알 수\n없기때문에 클라이언트 메세지를 제대로 넘겨줄 필요성을 느껴 변경한다.\n\n\n구조\n\n우리는 기본적으로 모노레포이기 때문에 모노레포에서 공통적으로 사용하는 패키지는 @pakcages 에서 관리한다.\n\npackages\n|-- error-message\n|   |-- src\n|   |   |-- languages\n|   |   |   |-- en.json\n|   |   |-- index.ts\n|   |   |-- package.json\n|   |   |-- tsconfig.json\n\n\nLANGUAGES\n\n * 에러코드를 해당 언어에 맞도록 에러코드: 해당 언어로 저장되어있는 에러메세지 로 구성된 Json 파일이 모여있다.\n\n\nINDEX.TS\n\n * 에러코드를 해당 언어에 맞는 에러메세지로 변환시켜주는 함수가 있다. (default: english)\n\n\n기대효과\n\n * proxy간의 에러메세지를 통합하여 한곳에서 관리할 수 있다.\n\n * 서버에서 주는 에러메세지도 각 언어에 맞게 번역된 에러메세지로 반환해줄 수 있다.\n\n\n적용\n\n * proxy 되는 서버에서 사용하는 에러메세지\n   \n   * client → server 1 → server 2 의 flow일때 server2에서 에러가 나면 기존 errorMessage는\n     client에게 전달해줄 수 없기 때문에 errorCode를 사용한다.\n\n * hauler web에서 write관련 동작?\n   \n   * hauler web에서 정보 수정, 추가 등이 일어날때 보통 hauler web → tenant server → core api 형태로\n     흘러가기 때문에 core에서 에러가 나면 hauler web에서 알 수 있도록 errorCode를 사용한다.\n     \n     * 테넌트와 core의 통신의 경우 kafka를 활용하지 않고 axios 를 활용하여 동기적으로 처리한다. (core가 실패하면\n       tenant도 실패하도록. → 현재 우리는 이벤트의 실패는 산정하지 않음. 보상 트랜잭션 x)\n\n\n사용 방법\n\n\n에러코드 작성\n\n{\n  \"AAA000\": \"something went wrong\"\n}\n\n\n에러 던지기\n\nif (quote.channel !== 'Online') {\n    throw badRequest(`only online channel quote can be calculated.`, {\n        errorCode: `AAA007`,\n    });\n}\n\n\n에러 핸들러\n\nimport { getErrorMessage } from '@packages/error-message'\n\nif (isBoom(err)) {\n    const { statusCode } = err.output;\n    const { errorMessage, level, errorCode } = err.data ?? ({} as any);\n    rs.status = statusCode;\n    const message = errorCode ? getErrorMessage(errorCode) : errorMessage;\n    rs.body = {\n        errorMessage: message ?? `Something went wrong and we couldn't complete your request.`, // TODO: 메시지 정리\n        errorCode,\n        level,\n    };\n} \n\n * 현재는 Boom 객체일 때만 errorCode를 다루고 있다. ( client message를 제대로 통제하고 있는건 boom 에러일때만\n   하고 있기 때문에)\n\n\nERROR CODE CONVENTION\n\n * 총 길이 6인 문자열로 알파벳 3자리 + 숫자 3자리 로 이루어져있다. (17,576,000개 작성가능)\n\n * 에러코드를 작성할때는 1씩 증가하며 999가 되면 알파벳을 하나 올린다.\n\n * \"AAA000\":\"something went wrong\"\n   \"AAA001\":\"something went wrong\"\n   ...\n   \"AAA999\":\"something went wrong\"\n   \"AAB000\":\"something went wrong\"\n   ...\n   \"DTA451\":\"something went wrong\"\n   ...\n   \"ZZZ998\":\"something went wrong\"\n   \"ZZZ999\":\"something went wrong\"\n\n * 관련 논의 [https://github.com/Ecube-Labs/haulla/pull/705#discussion_r1515355180]\n\n\n변수 사용\n\n * json의 경우 따로 js처럼 template literal을 지원하지 않아 따로 구현한다.\n\n * {{변수}}로 json value에 지정해두고 에러를 던질때 variables에 Record<string,string> 타입으로 치환하고\n   싶은 변수를 key값을 맞춰서 넣으면 된다.\n\n * // error-message/en.json\n   'AAA000': 'hello world {{name}}'\n   \n   // index.js\n   throw badRequest('hello world error',{\n     errorCode: 'AAA000',\n     variables: {\n       name: 'arthur'\n     }\n   })\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2927394962"
  },
  {
    "pageContent": "React Native 개발 가이드",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217383194"
  },
  {
    "pageContent": "iOS 개발 가이드\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34242640"
  },
  {
    "pageContent": "Android 개발 가이드\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34144356"
  },
  {
    "pageContent": "iOS/Android 공통",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/184516907"
  },
  {
    "pageContent": "Firebase?\n * 1. Firebase ?\n * 2. 어떤 기능들이 있는가?\n   * 2.1. Build\n        * Cloud Functions\n        * Authentication\n        * Hosting\n        * Cloud Storage\n        * Realtime Database\n     \n     * Cloud Firestore vs Realtime Database\n   * 2.2. Release & Monitor\n     * Analytics\n     * Remote Config\n   * 2.3. Engage\n     * Predictions\n     * Cloud Messaging\n     * 동적 링크 + 초대\n * 3. 가격은?\n * 4. 언제 유용한가?\n   * 4.1 비정상 로그 분석 및 성능 모니터링 (Crashlytics)\n     * Crashlytics 을 사용하면 비정상 로그를 모니터링을 할 수 있다.\n     * 다른 도입 후보로는 Sentry, Flurry 등이 거론된다. (여러 제품을 동시에 사용하는 경우도 있다.)\n   * 4.2 사용자 행동 패턴 분석 (Analytics, Predictions, A/B Testing)\n     * Analytics 를 사용하면 사용자 행동 패턴을 분석할 수 있다.\n     * 도입하면 아래와 같은 이점을 얻을 수 있다.\n     * 다른 도입 후보로는 AppsFlyer, Facebook analyst, Amplitude 등이 거론된다.\n   * 4.3 노티피케이션\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-014413.png?api=v2]\n\n\n1. FIREBASE ?\n\n파이어베이스는 구글이 소유하고 있는 애플리케이션 개발 플랫폼이다.\n\n앱에 필요한 여러가지 기능을 클라우드 서비스 형태로 제공해준다. 간단한 앱의 경우 파이어베이스 만으로 개발할 수 있어서 BaaS(Backend\nas a Service) 라고 불리기도 한다.\n\n14년 구글이 인수 후 서비스를 대폭 강화하고 있다.\n\n\n2. 어떤 기능들이 있는가?\n\n앱 개발, 마케팅, 테스트 제품 등 다양한 서비스들이 파이어베이스에 속해있다.\n\n용도와 관심사에 따라 3가지 그룹으로 분류되며, 한 제품이 다중 그룹에 속하는 경우도 있다. (자세한 내용은\nhttps://firebase.google.com/docs [https://firebase.google.com/docs] 참고)\n\n * Build [https://firebase.google.com/docs/build]: 앱 개발\n\n * Release & Monitor [https://firebase.google.com/docs/release]: 앱 품질 유지\n\n * Engage [https://firebase.google.com/docs/engage]: 비즈니스 성장\n\n\n2.1. BUILD [https://firebase.google.com/docs/build]\n\n백엔드 기능을 클라우드 형태로 제공하는 제품 그룹\n\n제품\n\n설명\n\n장점\n\nCloud Firestore [https://firebase.google.com/docs/firestore]\n\n * 클라우드 기반 NoSQL 데이터베이스 제공\n\n * 공간 부족시 자동으로 스케일업\n\n * 데이터 실시간 동기화 지원\n\nML Kit [https://firebase.google.com/docs/ml-kit] (Beta)\n\n * 구글 머신러닝 SDK 제공\n   \n   * High, Low 레벨 API 각각 지원\n\n * 커스텀 모델 사용 가능\n\n * 구글의 머신러닝 지식 활용 가능\n\n * 다양한 기능(텍스트  인식, 얼굴 인식, 언어 식별, 번역 등) 제공\n   (https://firebase.google.com/docs/ml-kit\n   [https://firebase.google.com/docs/ml-kit] )\n\nCLOUD FUNCTIONS [https://firebase.google.com/docs/functions]\n\n * 서버 사이드 개발 도구 제공\n\n * RESTful 형태로 API 오픈 가능\n\n * NodeJS 런타임 환경\n\n * 인증, 분석, 실시간 데이터 베이스 등과 연동 가능\n   \n   * e.g. 특정 데이터 처리 후 푸시 자동 발송\n\nAUTHENTICATION [https://firebase.google.com/docs/auth]\n\n * 인증 서비스 제공\n\n * 소셜 로그인(Google, Facebook, Twitter, Github) 지원\n\n * 이메일, 비밀번호 인증 지원\n\n * 전화번호 인증 지원\n\n * 익명 인증 지원\n\n * 안전한 인증 시스템을 빠르게 구현 가능\n\nHOSTING [https://firebase.google.com/docs/hosting]\n\n * GCP 기반 클라우드 호스팅 제공\n\n * 구글 CDN 서버에 캐싱\n\n * CLI 배포 가능\n\n * 커스텀 도메인 지원\n\n * REST API 지원\n\n * 글로벌 서비스의 접속 속도 이슈에서 자유로움\n\n * GCP 기반의 빠르고 안전한 웹 호스팅\n\n * SSL 인증서 무료 제공\n\nCLOUD STORAGE [https://firebase.google.com/docs/storage]\n\n * 파일 스토리지\n\n * GCP 제품\n\n * 엑사바이트 급 규모까지 확장 가능\n\n * 클라이언트에서 업로드 하기 쉬움\n\nREALTIME DATABASE [https://firebase.google.com/docs/database]\n\n * 클라우드 기반 NoSQL 데이터베이스\n\n * JSON 포멧으로 저장\n\n * Node, Python, Go, and Java server SDKs 지원\n\n * 클라이언트 온/오프라인 변화에 최적화되어 있음\n\n * 실시간 데이터 동기화 지원\n\n\nCLOUD FIRESTORE VS  REALTIME DATABASE\n\nhttps://firebase.google.com/docs/firestore/rtdb-vs-firestore\n[https://firebase.google.com/docs/firestore/rtdb-vs-firestore]\n\n\n\n\n2.2. RELEASE & MONITOR [https://firebase.google.com/docs/release]\n\n품질 향상을 목적으로 하는 제품 그룹\n\n모바일 앱에 많이 사용되는 Analytics, Crashlytics 가 여기 속한다. 적절히 활용하면 성능 이슈를 조기에 찾을 수 있고, 비정상\n종료 발생 여부와 예측 결과를 이메일로 보고 받을 수 있다.\n\n제품\n\n설명\n\n장점\n\nANALYTICS [https://firebase.google.com/docs/analytics]\n\n * 사용자 분석 도구 제공\n\n * 사용자 유입, 기능 사용 통계 제공\n\n * 커스텀 이벤트 등록 지원\n   \n   * ex) 장바구니 등록, 경로 안내 시작\n\n * 확장성과 연계성이 뛰어남\n   \n   * 푸시, 원격 구성, 광고, 비정상 사용자 분석\n\n * 가장 성숙한 분석도구 (GoogleAnalytics + FirebaseAnalytics 통합 버전임)\n\nTest Labs [https://firebase.google.com/products/test-lab]\n\n+\n\nA/B 테스트\n\n * 앱 테스트 환경 제공\n\n * 실제 기기를 클라우드 환경으로 제공\n\n * Expresso, XCTest 지원\n\n * Robo 이용한 지능형 테스트\n\n * 클라우드에 호스팅 된 기기에서 다양한 규모로 앱 테스트를 자동화할 수 있음\n\n * 구글 플레이 알파, 테스트 트랙에 새로운 버전 등록 시, 자동 테스트 가능\n\n * 로그, 스크린샷, 동영상이 포함된 보고서를 받을 수 있음\n\nCrashlytics\n[https://firebase.google.com/products/crashlytics?gclid=CjwKCAjw7--KBhAMEiwAxfpkWPkCC27oZ1GqP5GQjuO2dnAya7YgKPXGfy4bSVHGSorPHAUaT72CQRoCXZ0QAvD_BwE&gclsrc=aw.ds]\n\n * 비정상 종료 분석 도구 제공\n\n * 로그 그룹화 기능 제공\n   \n   * 버전별, 기기별, etc…\n\n * 실시간 보고 기능(Slack, Jira)\n\n * 분석 도구와 연동 가능\n\n * 성숙한 분석도구\n\nPerformance Monitoring [https://firebase.google.com/docs/perf-mon]\n\n * 앱 성능 모니터링 도구 제공\n\n * HTTP 요청, 실행 시간 등을 측정하여, 앱 성능 관련 이슈를 먼저 보고받을 수 있음\n\nAppDistribution [https://firebase.google.com/docs/app-distribution] (Beta)\n\n * 테스트 앱 배포 서비스\n\n * 테스트 앱 배포 방식을 통합할 수 있음 (AppStore 테스트 플라이트, PlayStore 내부 테스트 트랙을 대체함)\n\nREMOTE CONFIG [https://firebase.google.com/docs/remote-config]\n\n * 앱 원격 제어 도구 제공\n\n * 키-값 자료구조 형태의 저장소 제공\n\n * 앱 심사 거치지 않고 동작, 모습을 동적으로 바꿀 수 있음\n\n * 다양한 요소를 기준으로 개인화 설정 가능\n   \n   * 기기, 유형, 국가, 사용자 패턴\n\n\n\n\n2.3. ENGAGE [https://firebase.google.com/docs/engage]\n\n비즈니스의 성장을 돕는 제품 그룹\n\n사용자 데이터를 기반으로 사용 타겟층을 분석하고, 예측하여 발전 방향을 잡을 수 있게 도와준다.\n\n제품\n\n설명\n\n장점\n\nPREDICTIONS [https://firebase.google.com/docs/predictions]\n\n * 수집 데이터 기반으로 다양한 예측 지표 제공\n\n * 수집한 데이터들을 기반으로 앱 사용자 분석\n   \n   * 누가 이탈할 가능성이 있는가?\n   \n   * 누가 주로 비용을 지출하는가?\n\n * 머신러닝 킷 활용해 더 다양한 예측 가능\n\nCLOUD MESSAGING [https://firebase.google.com/docs/cloud-messaging]\n\n * 추상화된 푸시 발송 기능 제공\n\n * 고급 타겟팅 가능 제공\n   \n   * 인구, 행동…\n\n * 현지시간 발송 기능 제공\n\n * 분석, 예측 도구와 연동하여 푸시 자동화 가능\n\n * 멀티 플랫폼 지원\n\nIn-App Messaging (Beta)\n\n * 개별 사용자들 맞춤 타깃 메시지 발송기능 제공\n\n * 예측 제품과 연계\n\n * 개별 사용자 행동 패턴에 밀접한 푸시 발송이 가능해진다.\n\n동적 링크 [https://firebase.google.com/docs/dynamic-links] + 초대\n[https://firebase.google.com/docs/invites]\n\n * \n\n\n\n\n\n\n\n3. 가격은?\n\n제품이 너무 많고 변동도 심해서\nhttps://firebase.google.com/pricing/?gclid=CjwKCAiA-_L9BRBQEiwA-bm5fpCPMi2xOC-UgxPZ8BAU09l9k5LGv-lWaaVKufL-ncqs6FhpH94RwBoCRngQAvD_BwE\n[https://firebase.google.com/pricing/?gclid=CjwKCAiA-_L9BRBQEiwA-bm5fpCPMi2xOC-UgxPZ8BAU09l9k5LGv-lWaaVKufL-ncqs6FhpH94RwBoCRngQAvD_BwE]\n참고하자.\n\n\n4. 언제 유용한가?\n\n\n4.1 비정상 로그 분석 및 성능 모니터링 (CRASHLYTICS)\n\n모바일 앱이 궤도에 오르면 비정상 종료 모니터링은 필수이다. 특히 배포 주기가 짧은 경우 중요성은 더 높아진다.\n\nCRASHLYTICS 을 사용하면 비정상 로그를 모니터링을 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-023743.png?api=v2]\n\n도입하면 아래와 같은 이점을 얻을 수 있다.\n\n * 오류 선제 보고: 치명적 이거나, 지속적으로 발생하는 오류에 대해 지속적으로 보고 받을 수 있다. (Slack, Jira 연동 가능)\n\n * 정교한 에러 분석: 앱 버전, 유저 운영체제, 디바이스 종류와 같은 요소로 에러를 정교하게 분석할 수 있다.\n\n\n\n다른 도입 후보로는 SENTRY, FLURRY 등이 거론된다. (여러 제품을 동시에 사용하는 경우도 있다.)\n\n회사\n\n개발 환경\n\n도구\n\n관련 링크\n\n카카오뱅크\n\nNative\n\n * Sentry(On-premise)\n\n * Firebase Crashlytics\n\n\n\n리디\n\nReact Native\n\n * Firebase Crashlytics\n\nhttps://velog.io/@velopert/react-native-1year-review\n[https://velog.io/@velopert/react-native-1year-review]\n\n올리브영\n\nReact Native\n\n * Firebase Crashlytics\n\nhttps://tech.oliveyoung.co.kr/tech/2101052132/\n[https://tech.oliveyoung.co.kr/tech/2101052132/]\n\n우아한형제들(띠잉)\n\nNative\n\n * Firebase Crashlytics\n\nhttps://techblog.woowahan.com/2688/ [https://techblog.woowahan.com/2688/]\n\n\n\n\n4.2 사용자 행동 패턴 분석 (ANALYTICS, PREDICTIONS, A/B TESTING)\n\n비즈니스를 성장 시키려면 사용자에 대한 지속적인 분석이 병행되어야 한다.\n\nANALYTICS 를 사용하면 사용자 행동 패턴을 분석할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211008-061851.png?api=v2]\n\n\n\n도입하면 아래와 같은 이점을 얻을 수 있다.\n\n * 잠재고객 특징 파악 : 인구통계, 지역, 관심분야, 행동, 모바일, 교차기기\n\n * 실시간 분석: 위치, 트래픽소스, 콘텐츠, 이벤트, 전환 수\n\n * 고객 정보 분석 : 소스/매체, 채널\n\n * 구글 광고와 연동\n\n * 뛰어난 연동성\n   \n   * Predictions, A/B Testing과 연계 → 사용자 참여도 높일 수 있음, 데이터에 근거한 제품 개선이 가능\n   \n   * 비정상 종료 분석과 연계 → 품질 향상\n\n\n\n다른 도입 후보로는 APPSFLYER, FACEBOOK ANALYST, AMPLITUDE 등이 거론된다.\n\n * 분석도구는 마케팅 팀의 요청에 의해 도입하는 경우가 많다. 그래서 마케터가 어떤 도구를 잘 다루냐에 따라 도입이 결정된다.\n\n * 참고로\n   https://www.e-nor.com/blog/general/google-analytics-and-google-tag-manager-dominate-fortune-500-in-2015\n   [https://www.e-nor.com/blog/general/google-analytics-and-google-tag-manager-dominate-fortune-500-in-2015]\n   설문 결과에 따르면 GA 가 압도적이다.\n\n * 다양한 분석을 위해 2개 이상 제품을 동시에 적용하는 경우도 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-035033.png?api=v2]\n\n회사\n\n개발 환경\n\n도구\n\n관련 링크\n\n카카오뱅크\n\nNative\n\n * Sentry(On-premise)\n\n\n\n직방\n\nReact Native\n\n * AppsFlyer\n\n\n\n숨고\n\nReact Native\n\n * Sentry\n\n\n\n올리브영\n\nReact Native\n\n * Facebook Pixel [https://www.facebook.com/business/learn/facebook-ads-pixel]\n\n * Google Tag Manager\n   [https://marketingplatform.google.com/intl/ko/about/tag-manager/]\n\nhttps://tech.oliveyoung.co.kr/tech/2101052132/\n[https://tech.oliveyoung.co.kr/tech/2101052132/]\n\n\n\n\n4.3 노티피케이션\n\n푸시 알림 도입을 고려하고 있는가? 그냥 사용하자.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-033745.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2137063435"
  },
  {
    "pageContent": "AppCenter?\n\n\n1. APPCENTER? [https://visualstudio.microsoft.com/ko/app-center/faq/]\n\n모바일 및 데스크톱 앱을 지속적으로 빌드, 테스트, 릴리즈, 모니터링 할 수 있도록 도와주는 서비스이다.\n\n마이크로소프트 제품으로 다양한 운영체제, 플랫폼을 지원하고 있다.\n\nOS\n\nPlatform\n\niOS\n\n * Object-C / Swift\n\n * React Native\n\n * Cordova\n\n * Xamarin\n\n * Unity\n\nAndroid\n\n * Java / Kotlin\n\n * React Native\n\n * CordovaPreview\n\n * Xamarin\n\n * Unity\n\nWindows\n\n * UWP\n\n * WPF\n\n * WinForms\n\n * Unity\n\nmacOS\n\n * Objective-C / Swift\n\ntvOS\n\n * Objective-C / Swift\n\nCustom\n\n\n\n\n2. 가격은?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-035628.png?api=v2]\n\n\n\n기본 기능들은 무료이다.\n\n테스트 기능을 사용하려고 하거나, 빌드 규모를 키우려고 할 때 유료 모델을 구독하면 된다.\n\n가격은 https://azure.microsoft.com/ko-kr/pricing/details/app-center/\n[https://azure.microsoft.com/ko-kr/pricing/details/app-center/] 에서 확인 가능하다.\n\n\n3. 기능은?\n\n기능\n\n세부 기능\n\n설명\n\nBuild [https://docs.microsoft.com/en-us/appcenter/build/]\n\nBuild\n\n * 앱 빌드\n   \n   * 저장소: Azure DevOps, GitHub, Bitbucket, Gitlab\n   \n   * 타입: 수동 , 자동\n\nTest [https://docs.microsoft.com/en-us/appcenter/test-cloud/] (유료, Only mobile)\n\nTest runs\n\n * 앱 테스트\n   \n   * Appium, Calabash, Espresso, XCUIText 지원\n\n * 방식\n   \n   * Appcenter CLI\n   \n   * REST API\n\nDevice sets\n\n * 테스트 그룹 생성 및 관리\n\n * 실제 장치를 클라우드 형태로 대여\n   \n   * iOS - iPhone 12, SE, 7, etc…\n   \n   * Android - Pixel 5, Galaxy S21, Note, etc…\n\nDistribute [https://docs.microsoft.com/en-us/appcenter/distribution/]\n\nReleases\n\n * 앱 배포\n   \n   * 내부 테스트\n   \n   * AppStore 배포\n\n * 방식\n   \n   * 콘솔\n   \n   * CLI\n   \n   * API\n     [https://github.com/microsoft/appcenter-Xamarin.UITest-Demo/blob/main/ac-distribute.sh]\n\nGroups\n\n * 테스터 그룹 생성 및 관리\n\n * 테스터 초대 방식\n   \n   * 이메일\n\nStores\n\n * 앱 스토어(PlayStore, AppStore) 연동\n\n * 권한 획득 방식\n   \n   * AppStore: 애플 계정 로그인\n   \n   * PlayStore: GCP OAuth\n\nCodePush (Only react-native)\n\n * JS 번들 호스팅\n   \n   * 심사 없이 앱 업데이트가 가능해짐\n\nDiagnostics [https://docs.microsoft.com/en-us/appcenter/diagnostics/]\n\nIssues\n\n * Crash 로그 수집\n\nSymbols\n\n * 에러 원인을 상세하게 파악하기 위한 Symbol file 관리\n   \n   * dSYMs\n   \n   * appxsym\n   \n   * abit.so\n\nAnalytics [https://docs.microsoft.com/en-us/appcenter/analytics/]\n\nOverview\n\n * 앱 통계 제공\n   \n   * 활성 유저\n   \n   * 세션 횟수, 유지 시간\n   \n   * 디바이스 종류\n   \n   * 나라, 언어\n\nEvents\n\n * 이벤트 조회\n\n * 앱에서 커스텀 이벤트 발생시키면 이곳에 표시됨\n\nLog flow\n\n * 실시간 로그 확인\n\nSetting\n\nData management\n\n * 데이터 관리\n\n * Diagostics 데이터 유지 기간 설정\n\nServices\n\n * 외부 연동 관리\n\n * 버그 자동 티켓 생성 연동\n   \n   * Github issues\n   \n   * Jira\n\nWebhooks\n\n * 웹훅 관리\n\n * 트리거 종류\n   \n   * 빌드 성공, 실패\n   \n   * 앱 배포\n   \n   * 에러 발생\n\nExport\n\n * 데이터 Azure service 로 추출\n\nEmail notifications\n\n * 이메일 알림 관리\n\n * 트리거 종류\n   \n   * 빌드\n   \n   * 배포\n   \n   * 에러\n   \n   * 테스트\n\n * 발송 옵션\n   \n   * 받지 않음\n   \n   * 즉각\n   \n   * 하루\n\nApp API Tokens\n\n * API Token 발급 및 관리\n   \n   * Full Access, Read Only\n\n * REST-API [https://openapi.appcenter.ms/#/distribute/devices_deviceDetails] 에서\n   사용 가능함\n\n\n4. 언제 유용한가?\n\n\n4.1 REACTNATIVE 앱을 빠르게 업데이트 하고 싶다면 (CODE PUSH)\n\n코드 푸시는 RN 플랫폼만 사용할 수 있는 기능으로 JS Bundle을 원격지(AppCenter)에 호스팅해 사용하는 개념이다.\n\n컨셉은 대략적으로 아래와 같다.\n\n일반적인 앱 동작\n\n코드 푸시 적용한 앱의 동작\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-035702.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-035715.png?api=v2]\n\n\n\n앱 심사는 자칫하면 굉장히 매우 긴 시간이 소요될 수 있는 과정이다. 빨라도 하루 정도는 생각해야 한다.\n\n하지만 코드 푸시를 사용하면 이런 과정 없이 곧바로 업데이트할 수 있다. 사용자는 재실행만 하면 곧바로 최신 앱을 사용할 수 있게된다. (굉장히\n굉장히 굉장히 대단히 큰 이점이다)\n\n일반적인 앱 배포 플로우\n\n코드 푸시를 적용한 앱 배포 플로우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/a80486b2-d1ca-4152-a00b-0becde8a814b.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/1978630b-567a-4d25-81fa-dcb86b75f6a3.png?api=v2]\n\n\n\n\n사용하는 회사들을 알아보자\n\n궁금해서 찾아봤는데 리액트 네이티브를 도입한 대부분의 회사들이 코드 푸시를 사용하고 있는 것을 확인할 수 있었다. 코드 푸시 쓰고 있는 회사만\n찾은 것은 절때 아니다.\n\n서비스\n\n플랫폼\n\nAppCenter\n\nCodePush\n\n비고\n\n올리브영\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://tech.oliveyoung.co.kr/tech/2101052132/\n[https://tech.oliveyoung.co.kr/tech/2101052132/]\n\n리디북스\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://ridicorp.com/story/react-native-1year-review/\n[https://ridicorp.com/story/react-native-1year-review/]\n\n제로카\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://seokjun.kim/react-native-in-production-2/\n[https://seokjun.kim/react-native-in-production-2/] 서비스 중지함\n\n직방\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://www.wanted.co.kr/wd/78116 [https://www.wanted.co.kr/wd/78116]\n\n클라썸\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://www.wanted.co.kr/wd/31020 [https://www.wanted.co.kr/wd/31020]\n\n숨고\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nhttps://medium.com/soomgo-tech/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%95%B1-%EB%A7%A4%EC%A3%BC-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0-90e4e3d243ff\n[https://medium.com/soomgo-tech/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%95%B1-%EB%A7%A4%EC%A3%BC-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0-90e4e3d243ff]\n\n\n\n\n4.2 비정상 종료 모니터링이 필요할 때 (DIAGNOSTICS)\n\n앱 센터는 비정상 종료 모니터링 기능을 제공한다.\n\n * 왜 죽었는지\n\n * 언제 발생했는지\n\n * 어디서 발생했는지\n\n * 몇번 발생했는지\n\n * 어느 환경(버전, 디바이스) 에서 발생했는지\n\n지라, 깃허브 연동해서 이슈 티켓을 자동으로 생성할 수도 있다.\n\n비정상 종료 발생 목록\n\n종료 이슈 상세\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/0b2b8b97-e587-450c-80ce-55f82414dd5c.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/94711219-e132-4ae3-9263-06cabf2bc7d3.png?api=v2]\n\n\n\n\n\n\n4.3 사용자에 대한 분석이 필요할 때 (ANALYTICS)\n\n\n4.3.1 인구 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/c17c8b15-3211-49aa-95e8-a11b806b0c7e.png?api=v2]\n\n * 활성유저 수\n\n * 세션 수, 유지 기간\n\n * 디바이스 종류\n\n * 사용자 나라, 언어\n\n * 버전 별 설치 수\n\n\n4.3.2 실시간 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-040318.png?api=v2]\n\n\n4.3.3 행동 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-040109.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2204991524"
  },
  {
    "pageContent": "[RN] 스플래시 화면\n\n\n스플래시 화면?\n\n앱 실행 후 1~2초 정도 잠깐 노출되는 화면을 의미한다.\n\n목적은 다양하지만 본래의 목적은 앱이 로딩되기까지 나타나는 화면 공백을 개선하기 위함이다.\n\n * 로딩 중 발생하는 화면 공백 개선\n\n * 브랜드나 앱 이미지 각인\n\n * 로딩화면에서 로직 처리\n\n\n\n\n구현\n\n스플래시 화면은 플랫폼별로 각각 추가해야 한다. RN 으로 스플래시 화면을 만들면 앱 구동 시 흰 화면이 잠깐 보이다가 RN 스플래시 화면이\n렌더링 된다.\n\n\nIOS\n\nLaunchScreen.storyboard 에서 작업하면 된다.\n\n이미지, 텍스트, … 등의 iOS 컴포넌트를 사용할 수 있다.\n\n\nANDROID\n\n2021.11.22 기준 안드로이드 스플래시는 통 이미지로 받아야 한다.\n\niOS 처럼 네이티브 컴포넌트로 스플래시 화면을 만들 수 없다.\n\n\n1. ANDROID/APP/SRC/MAIN/RES/VALUES/DRAWABLE/SPLASH.XML 와 같이 XML 파일을 만들고 스플래시 화면\n설정\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:drawable=\"@color/colorBlack\" />\n    <item>\n        <bitmap\n            android:gravity=\"center\"\n            android:src=\"@drawable/download\" />\n    </item>\n</layer-list>\n\n\n2. ANDROID/APP/SRC/MAIN/RES/VALUES/THEMES.XML 에 SPLASHTHEME 를 추가\n\n <!-- Base application theme. -->\n    <style name=\"ThemeXXX\">\n...\n\n<style name=\"SplashTheme\" parent=\"Theme.AppCompat.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/background_splash</item>\n</style>\n\n\n3. ANDROIDMANIFEST.XML 에서 최초 실행되는 액티비티의 테마로 SPLASHTHEME를 설정\n\n<activity\n    android:name=\".MainActivity\"\n    android:label=\"@string/app_name\"\n    android:theme=\"@style/SplashTheme\"> // 이곳\n...\n\n\n\n\n결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1934295069/ezgif.com-gif-maker%20(2).gif?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1934295069"
  },
  {
    "pageContent": "[RN] 이미지 관리\n\n이미지는 번들에 포함시키거나 앱 리소스에 포함되어야 한다.\n\n번들에 포함되면 번들 사이즈가 커지기 때문에 1) 코드 푸시할 때 불리 2) 초기화 오래 걸림\n\n앱 리소스에 포함 되면 1) 코드 푸시로 이미지 수정 불가\n\n장단점을 고려해서 선택하면 된다.\n\n * 번들에 이미지 추가\n * 앱 리소스에 이미지 추가\n   * iOS\n   * Android\n * 참고\n\n\n번들에 이미지 추가\n\nsrc/assets 에 놔두면 된다. easy.\n\n\n앱 리소스에 이미지 추가\n\niOS 에서 image set 이름, Android 에서 파일 이름이 동일해야 한다.\n\n\nIOS\n\nXcode > $Proejct > Images.xcassets\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2009759749/image-20210706-074827.png?api=v2]\n\n\nANDROID\n\n|-- android\n| | -- app\n| | | -- src\n| | | | -- main\n| | | | | -- res\n| | | | | | -- drawable-mdpi\n| | | | | | | -- logo.png\n| | | | | | -- drawable-xhdpi\n| | | | | | | -- logo.png\n| | | | | | -- drawable-xxhdpi\n| | | | | | | -- logo.png\n\n안드로이드에서 drawble 에 들어가는 파일 이름은 대문자를 허용하지 않는다.\n\n * drawable-mdpi\n   \n   * iOS image set 1x 이미지에 대응\n\n * drawable-xhdpi\n   \n   * iOS image set 2x 이미지에 대응\n\n * drawable-xxhdpi\n   \n   * iOS image set 3x 이미지에 대응\n\n\n참고\n\nhttps://reactnative.dev/docs/images [https://reactnative.dev/docs/images]\n\nhttps://mesign.tistory.com/11 [https://mesign.tistory.com/11]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2009759749"
  },
  {
    "pageContent": "[RN] 이미지 피커 선택\n\n\n# IMAGEPICKER?\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/ezgif.com-gif-maker.gif?api=v2]\n\n앱이 사용자로부터 이미지를 전달받을 수 있는 수단.\n\n\n\n\n# TL;DR\n\n--------------------------------------------------------------------------------\n\n * 가장 인기있는 이미지 피커는 react-native-image-picker 이다.\n\n * 가장 성숙한 이미지 피커는 react-native-image-picker 이다.\n\n * 비디오 길이 제한이 필요한 경우는 react-native-image-picker를 사용해야한다.\n\n * 단순 이미지 피커가 필요한 경우는 react-native-image-picker 사용하면 된다\n\n * 이미지 편집(crop, rotation) 기능이 필요한 경우는 react-native-image-crop-picker 를 사용해도 좋다\n   \n   * react-native-image-picker 와 이미지 편집 라이브러리의 조합으로도 구현할 수는 있다.\n     \n     * (ex react-native-image-picker + react-native-image-crop-picker)\n\n\n\n\n# 이미지 피커 라이브러리 비교\n\n--------------------------------------------------------------------------------\n\n\n1. 기능 비교\n\n기능\n\nreact-native-image-picker\n\nreact-native-image-crop-picker\n\n카메라 촬영\n\n✅\n\n✅\n\n전면 카메라\n\n✅\n\n✅\n\n후면 카메라\n\n✅\n\n✅\n\n갤러리 선택\n\n✅\n\n✅\n\n이미지 최대 크기\n\n✅\n\n✅\n\n이미지 퀄리티 조정\n\n✅\n\n✅\n\n이미지 base64 반환\n\n✅\n\n✅\n\n비디오\n\n✅\n\n✅\n\n비디오 길이 제한\n\n✅\n\n❌\n\n이미지 편집(crop, rotation)\n\n❌\n\n✅\n\n여러 이미지 선택\n\n✅\n\n✅\n\n이미지 개수 제한\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/26a0.png]\n(Only iOS)\n\n❌\n\n이미지 초기값\n\n❌\n\n❌\n\n\n2. 구현 모습 비교\n\n플랫폼\n\n\nREACT-NATIVE-IMAGE-PICKER\n\n\nREACT-NATIVE-IMAGE-CROP-PICKER\n\nreact-native-image-crop-picker crop\n\nIOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-065243.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070016.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070244.png?api=v2]\n\n\n\nAOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-065907.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070047.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070212.png?api=v2]\n\n\n\n\n3. 인기 비교\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070709.png?api=v2]\n\n\n4. 성숙정도 비교\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070721.png?api=v2]\n\n\n5. 라이브러리 용량(UNPACK) 비교\n\n * react-native-image-picker: 143 kb\n\n * react-native-image-crop-picker: 2.17 mb\n\n * @baronha/react-native-multiple-image-picker: 129 kb\n\n\n# 결론\n\n단순 이미지 피커 기능만 필요한 경우에는 react-native-image-picker 를 사용하면 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302967835"
  },
  {
    "pageContent": "[RN] 버전 업그레이드\n\nhttps://reactnative.dev/docs/upgrading [https://reactnative.dev/docs/upgrading]\n\nhttps://react-native-community.github.io/upgrade-helper/\n[https://react-native-community.github.io/upgrade-helper/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2337243155"
  },
  {
    "pageContent": "abc\n\nStep1\n\nhttps://reactnative.dev/docs/native-components-ios#ios-mapview-example\n[https://reactnative.dev/docs/native-components-ios#ios-mapview-example]\n\n// RNTMapboxNavigationManager.m\n#import <MapKit/MapKit.h>\n\n#import <React/RCTViewManager.h>\n\n@interface RNTMapboxNavigationManager : RCTViewManager\n@end\n\n@implementation RNTMapboxNavigationManager\n\nRCT_EXPORT_MODULE(RNTMapboxNavigation)\n\n- (UIView *)view\n{\n  return [[MKMapView alloc] init];\n}\n\n@end\n\n// MapView.ts\n\nimport { requireNativeComponent } from 'react-native';\n\n// requireNativeComponent automatically resolves 'RNTMapboxNavigation' to 'RNTMapboxNavigationManager'\nconst MapView = requireNativeComponent('RNTMapboxNavigation');\n\nexport { MapView };\n\n\n\nStep2\n\nhttps://reactnative.dev/docs/native-modules-ios#exporting-swift\n[https://reactnative.dev/docs/native-modules-ios#exporting-swift]\n\n// RNTMapboxNavigationManager.m\n#import \"React/RCTViewManager.h\"\n\n@interface RCT_EXTERN_MODULE(RNTMapboxNavigationManager, RCTViewManager)\n@end\n\n// RNTMapboxNavigationManager.swift\nimport MapKit\nimport React\n\n@objc(RNTMapboxNavigationManager)\nclass RNTMapboxNavigationManager: RCTViewManager {\n  // https://github.com/facebook/react-native/blob/051082117059e461f340f0fb7b0bde3db835e5dd/React/Views/RCTViewManager.h#L40\n  override func view() -> UIView! {\n    return MKMapView();\n  }\n}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1838645266"
  },
  {
    "pageContent": "[DEPRECATED] 네이티브 리소스 교체(이미지)\n\n\n\n * 제플린 - 이미지 EXPORT\n\n덤스터 이미지 교체\n* iOS\n* Android\n* 네이밍 컨벤션\n\n\n\n\n\n\n\n\n\n\n\n\n\n제플린 - 이미지 EXPORT\n\n\n\n\n * 현재 제플린 프로젝트가 안드로이드 프로젝트로 셋팅 되어 있기 때문에 Android aseet에 맞게 export된다. ( 제플린에서\n   ios, android 둘다 설정은 현재 안된다. )\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-03-12%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.33.47.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n * iOS Asset에 맞게 이미지 넣는 방법\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/messageImage_1583991119930.jpg?api=v2]\n\n * 이렇게 매칭 시켜주면 된다.\n   * 1x = hdpi\n   * 2x = xhdpi\n   * 3x = xxhdpi\n\n\n\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n덤스터 이미지 교체\n\n\n\n\n\nIOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/image2019-10-23_18-56-58.png?api=v2]\n\n * Xcode 에서 Images.xcassets 내에 있는 이미지를 교체하면 된다.\n * Drag & Drop 방식으로 1x, 2x, 3x 모두 교체.\n * iOS 는 image set 이름으로 이미지를 찾기 때문에 변경된 이미지 이름이 기존 이미지 이름과 달라도 무방하다.\n\n\n\n\n\nANDROID\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/image2019-10-23_19-5-50.png?api=v2]\n\n * File system 에서 android > app > src > main > res > drawable 내에 있는 이미지를 교체하면\n   된다.\n * 전달받은 이미지 중 1x 이미지만 사용한다.\n * Android 에서는 파일 이름으로 이미지를 찾기 때문에 파일 이름이 변경 되면 안된다.\n\n\n\n\n\n\n\n\n 네이밍 컨벤션\n\n\n\n\n * snake를 이미 쓰고 있으므로.. snake로 하기로 한다\n   * google_map\n   * yard_2\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227115287"
  },
  {
    "pageContent": "사용자별 가이드\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/203751783"
  },
  {
    "pageContent": "Test Flight\n\n\n\n * App Store Connect 사용자 등록\n * Test Flight 테스터 등록\n\n\n\n\n\n\n\nAPP STORE CONNECT 사용자 등록\n\nApp Store Connect [https://appstoreconnect.apple.com] > Users and Access\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/193200168/image2019-8-9_11-10-52.png?api=v2]\n\n\n\n\n+ 버튼\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/193200168/image2019-8-9_11-11-25.png?api=v2]\n\n\n\n\n항목값First Name이름Last Name성Email반드시 애플 아이디여야 한다Roles상황에 따라 다른데 단순 테스터는 Marketing\n으로 충분함Apps앱\n\n사용자를 추가하면 초대장이 메일로 발송되고 사용자가 이를 승낙해야 App Store Connect 사용자 등록이 완료 된다.\n\n\nTEST FLIGHT 테스터 등록\n\nApp Store Connect 등록이 완료된 사용자만 테스터로 추가가 가능하다.\n\nApp Store Connect > My Apps > 테스트 하려는 앱 > App Store Connect Users 에서 테스터 추가하면\n된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/193200168/image2019-8-9_11-16-28.png?api=v2]\n\n테스터를 추가하면 다시 한번 초대장이 메일로 발송되고 사용자가 이를 승낙해야 Test Flight 테스터 등록이 완료 된다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/193200168"
  },
  {
    "pageContent": "[iOS] 버전 별 이슈",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227115091"
  },
  {
    "pageContent": "[iOS] 푸시 인증서\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/228655107"
  },
  {
    "pageContent": "[iOS] 시행착오\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/271188637"
  },
  {
    "pageContent": "[iOS] Swift\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696008"
  },
  {
    "pageContent": "[iOS] Xcode\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/291078172"
  },
  {
    "pageContent": "[iOS] 배포\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374210650"
  },
  {
    "pageContent": "[iOS] URL\nSchemes[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/11.gif?api=v2]\n * 작업\n   * 1. 프로젝트 Info 탭 이동\n   * 2. URL Types 설정 (Identifier, URL Schemes)\n * 기타\n   * 1. 호출 방법\n   * 2. 앱에서 URL Scheme parameter 확인 및 사용\n\n테스트 화면\n\n외부링크를 통해 앱이 열려야 하는 경우 URL Scheme를 사용합니다. 주로 결제, 소셜 로그인 연동 시 사용합니다.\n\n\n작업\n\n\n1. 프로젝트 INFO 탭 이동\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/image-20200317-180950.png?api=v2]\n\n\n2. URL TYPES 설정 (IDENTIFIER, URL SCHEMES)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/image-20200317-180938.png?api=v2]\n\n\n\n\n기타\n\n\n1. 호출 방법\n\n * 웹에서 호출\n\nhaulla://?token=ABCD\n\n\n2. 앱에서 URL SCHEME PARAMETER 확인 및 사용\n\nfunc application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    print(\"test: url=\\(url.absoluteString)\")\n    return true\n}\n\n * SceneDelegate 를 사용할 경우 \n\nfunc scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n    if let url = URLContexts.first?.url {\n        print(\"test: url=\\(url.absoluteString)\")\n    }\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/image-20200317-180925.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436961681"
  },
  {
    "pageContent": "[iOS] 빌드 환경 별 키 관리\n * Build Settings > User-Defined\n * Info.plist\n * AppDelegate.m\n\n\nBUILD SETTINGS > USER-DEFINED\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141487123/image-20210910-054031.png?api=v2]\n\n\nINFO.PLIST\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141487123/image-20210910-054136.png?api=v2]\n\n\nAPPDELEGATE.M\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n#ifdef FB_SONARKIT_ENABLED\n  InitializeFlipper(application);\n#endif\n\n  [GMSServices provideAPIKey:[[NSBundle mainBundle] objectForInfoDictionaryKey:@\"GoogleMapApiKey\"]]; // add this line using the api key obtained from Google Console",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2141487123"
  },
  {
    "pageContent": "[iOS] AutoFill 구현\n * 1. iOS 프로젝트 구성\n   * 1.1 Associated Domains 활성화 및 도메인 명시\n   * 1.2 AutoFill Credential Provider 활성화\n * 2. Associated Domains 구성\n   * 2.1 apple-app-site-association 파일 생성 및 앱 정보 기입\n   * 2.2 apple-app-site-association 호스팅\n     * 예시\n     * 예시 PR\n * 3. 앱에 AutoFill 적용\n   * 3.1 인증정보 힌트 활성화\n   * 3.2 인증정보를 아이클라우드 키체인에 저장\n * 4. 테스트\n\nAutoFill은 Shared web credentials\n[https://developer.apple.com/documentation/security/shared_web_credentials] 방식의\n브릿지를 통해 인증정보를 공유하는 방식을 사용합니다.\n\n예시코드\n\n앱: https://github.com/Ecube-Labs/haulla-hauler-mobile/pull/85\n[https://github.com/Ecube-Labs/haulla-hauler-mobile/pull/85]\n\n웹: https://github.com/Ecube-Labs/haulla-hauler-front/pull/353\n[https://github.com/Ecube-Labs/haulla-hauler-front/pull/353]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-081542.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-081356.png?api=v2]\n\n\n1. IOS 프로젝트 구성\n\n\n1.1 ASSOCIATED DOMAINS 활성화 및 도메인 명시\n\n앱을 설치하면 Associated Domains 목록에 적혀있는 도메인에 접근하여 권한을 검증을 시도합니다.\n\nXcode -> Capabilites -> Associated Domains 을 활성화합니다.\n\nAssociated Domains 목록이 활성화되면 apple-app-site-association 파일 호스팅 도메인(2번 참고)을\nwebcredentials:{domain} 형식으로 추가해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-084848.png?api=v2]\n\n\n1.2 AUTOFILL CREDENTIAL PROVIDER 활성화\n\nCapabilites -> AutoFill Credential Provider 를 활성화합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-085447.png?api=v2]\n\n\n2. ASSOCIATED DOMAINS 구성\n\nAssociated Domains 도메인 검증에 사용되는 apple-app-site-association 파일 만들고 호스팅하는 작업이\n필요합니다.\n\n\n2.1 APPLE-APP-SITE-ASSOCIATION 파일 생성 및 앱 정보 기입\n\n확장자 없는 apple-app-site-association 파일을 만들고 webcredentials 을 적어줍니다.\n\n이때 앱은 TeamID + BundleID 조합으로 적어주면 되고 배열 형태로 작성하면 됩니다.\n\n{\n    \"webcredentials\": {\n        \"apps\": [\n            \"LH6YCFHD6W.com.haulla.hauler\",\n            \"LH6YCFHD6W.com.haulla.haulerdebug\",\n            \"LH6YCFHD6W.com.haulla.haulerstage\"\n        ]\n    }\n}\n\n\n2.2 APPLE-APP-SITE-ASSOCIATION 호스팅\n\n2.1에서 만든 apple-app-site-association 파일을, 호스팅 서버 /.well-known 경로에 위치시킵니다.\n\n꼭 /.well-known 디렉터리에 위치시켜야 합니다.\nhttps://developer.apple.com/documentation/xcode/supporting-associated-domains\n[https://developer.apple.com/documentation/xcode/supporting-associated-domains]\n\n예시\n\n * https://sample.com/apple-app-site-association\n\n * https://hauler-stage.haulla.com/apple-app-site-association\n   [https://hauler-stage.haulla.com/apple-app-site-association]\n\n * https://google.com/apple-app-site-association\n   [https://google.com/apple-app-site-association]\n\n * https://cleancitynetworks.com/.well-known/apple-app-site-association\n   [https://cleancitynetworks.com/.well-known/apple-app-site-association]\n\n예시 PR\n\nhttps://github.com/Ecube-Labs/haulla-hauler-front/pull/353\n[https://github.com/Ecube-Labs/haulla-hauler-front/pull/353]\n\n\n3. 앱에 AUTOFILL 적용\n\n웹에서 저장한 인증정보를 앱에서 사용하려면 3.1, 앱에서 저장한 인증정보를 웹에서 사용하려면 3.2 적용\n\n\n3.1 인증정보 힌트 활성화\n\nAutoFill 힌트는 조건을 만족하는 입력 필드가 포커싱되면 자동으로 노출됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-091438.png?api=v2]\n\nRN 에서는 TextInput의 textContentType 속성을 username 나 password 로 설정해주면 됩니다.\n\n( 참고 https://reactnative.dev/docs/0.65/textinput#textcontenttype-ios\n[https://reactnative.dev/docs/0.65/textinput#textcontenttype-ios] )\n\n <View>\n  <TextInput ... textContentType=\"username\" />\n  <TextInput ... textContentType=\"password\" />\n</View>\n\n\n3.2 인증정보를 아이클라우드 키체인에 저장\n\nhttps://www.npmjs.com/package/react-native-keychain\n[https://www.npmjs.com/package/react-native-keychain] 라이브러리를 사용해 구현합니다.\n\n로그인 이후 setSharedWebCredentials 을 호출해주면 디바이스인증 이후 아이클라우드 키체인에 저장됩니다.\n\nimport { useCallback } from 'react';\nimport { setSharedWebCredentials } from 'react-native-keychain';\n\n// apple-app-site-association 파일 호스팅서버 url.\nASSOCIATED_DOMAIN = 'hauler.haulla.com';\n\nsetSharedWebCredentials(ASSOCIATED_DOMAIN, username, password);\n\n\n4. 테스트\n\n1~3번 작업을 모두 완료했다면 실제 기기에 앱을 설치해서 테스트하면 됩니다.\n\niOS 12 미만 기기는 지원하지 않습니다.\n\niCloud 키체인 비활성화 상태라면 동작하지 않습니다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2257977420"
  },
  {
    "pageContent": "개발자 가이드\n * 애플 계정 생성\n * 개발자 초대 요청\n * Xcode 에 애플 계정 등록\n\n\n애플 계정 생성\n\nhttps://appleid.apple.com/ [https://appleid.apple.com/]\n\n회사 이메일로 애플 계정 생성.\n\n아이폰 사용자의 경우 이미 애플 계정이 있겠지만 추가로 계정을 생성해서 Xcode 에는 회사 계정 애플 아이디를 등록할 수 있도록 한다.\n\n\n개발자 초대 요청\n\n관리자김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]에게\n개발자 초대 해달라고 요청.\n\n\nXCODE 에 애플 계정 등록\n\nXcode > Preferences > Accounts\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204505203/image2019-9-3_14-43-34.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/204505203/image2019-9-3_14-43-49.png?api=v2]\n\n\n\n\n관리자에게 초대를 받았다면 로그인 했을 때 다음과 같이 나온다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204505203/image2019-9-3_14-55-34.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204505203"
  },
  {
    "pageContent": "배포 담당자 가이드\n\niOS 앱 배포 담당자만 진행하면 된다\n\n * I. 배포인증서 발급\n * II. keychain 설정\n * III. Xcode signing 셋팅\n\n\nI. 배포인증서 발급\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/image2019-10-18_19-15-30.png?api=v2]\n\n * Keychain Access > Certificate Assistant > Request a Certificate From a\n   Certificate Authority...\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/image2019-10-18_19-16-21.png?api=v2]\n\n * User Email Address: 애플 계정\n\n * Common Name: 이건 뭔지 잘 모르겠다\n\n * CA Email Address: (empty)\n\n * Check \"Saved to disk\"\n\n * Check \"Let me specify key pair information\"\n\n * 나머지는 그냥 계속 Next Next 하면 CertificateSigningRequest.certSigningRequest 파일을 다운\n   받게 되는데 이를 관리자 [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/overview]에게\n   전달하면(라인으로) 관리자가 배포 인증서를 다시 전달해준다(라인으로).\n\n\n\n\n\n\n\n\nII. KEYCHAIN 설정\n\n * 관리자에게 전달받은 cer파일을  Keychain Access 에 드래그한다.\n\n * 그러면 비밀번호 입력창이 나오는데, 비밀번호를 입력해준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.49.42.png?api=v2]\n\n * 이런 문구가 나오게 되면  '항상 허용'을 눌러야 합니다. 안그러면 계속 뜹니다\n\n\n\n\n\nIII. XCODE SIGNING 셋팅\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.29.07.png?api=v2]\n\n * release에 Automatically 체크 되어 있는지 확인한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2250702869"
  },
  {
    "pageContent": "관리자 가이드\n\n\n\n * 신규 개발자 등록\n\n\n\n\n\n\n\n신규 개발자 등록\n\nApp Store Connect > Users and Access [https://itunesconnect.apple.com]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204374162/image2019-9-3_14-32-7.png?api=v2]\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204374162/image2019-9-3_15-0-43.png?api=v2]\n\n * First Name: 어차피 사용자 애플 계정을 따르게 되기 때문에 적당히 입력해도 된다\n * Last Name: 어차피 사용자 애플 계정을 따르게 되기 때문에 적당히 입력해도 된다\n * Email: 사용자 애플 계정. 그냥 이메일이 아니다.\n * Roles: Developer\n * Apps: 개발하려는 앱 list. 신규 프로젝트를 위한 개발자라 아직 개발할 앱이 없는 상태라면 앱을 지정 안해도 된다.\n * Developer Resources\n   * Access to Certificates, Identifiers & Profiles: check\n\n\n\n\nInvite 버튼을 누르면 다음과 같이 사용자에게 초대 메일이 간다.\n\n사용자가 Accept invitation 하면 신규 개발자 등록 완료.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204374162/image2019-9-3_14-38-14.png?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374162"
  },
  {
    "pageContent": "배포 인증서 등록\n * Step 1. Certificates 옆의 (+) 버튼 클릭\n * Step 2. Apple Distribution 선택\n * Step 3. 개발자에게 전달 받은 CSR 파일 업로드\n * Step 4. 인증서 다운로드\n\nApple Developer > Certificates, Identifiers & Profiles\n[https://developer.apple.com/account/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-18_19-47-27.png%3Fversion=1&modificationDate=1580448220846&cacheVersion=1&api=v2&width=250?api=v2]\n\n\n\n\nSTEP 1. CERTIFICATES 옆의 (+) 버튼 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-18_19-48-15.png%3Fversion=1&modificationDate=1580448220565&cacheVersion=1&api=v2&width=350?api=v2]\n\n\n\n\nSTEP 2. APPLE DISTRIBUTION 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-24_15-34-3.png%3Fversion=1&modificationDate=1580448220282&cacheVersion=1&api=v2&width=550?api=v2]\n\n\n\n\nSTEP 3. 개발자에게 전달 받은 CSR 파일 업로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-24_15-34-33.png%3Fversion=1&modificationDate=1580448220028&cacheVersion=1&api=v2&width=550?api=v2]\n\n\n\n\nSTEP 4. 인증서 다운로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2020-1-31_14-17-7.png%3Fversion=1&modificationDate=1580448219777&cacheVersion=1&api=v2&width=700?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336724144"
  },
  {
    "pageContent": "개발자 계정 갱신\n * 메일 수신\n * 개발자 사이트 접속\n * 결제 정보 검토\n * 결제\n\n\n메일 수신\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-015243.png?api=v2]\n\n때가 되면 애플에서 돈을 내라고 메일이 온다.\n\n(해마다 갱신이므로 보통 8월 즈음)\n\n\n개발자 사이트 접속\n\n메일의 Renew now > 링크를 타고 가서 sw@ecubelabs.com으로 로그인 하면 다음과 같이 돈을 내라는 배너가 보인다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-015428.png?api=v2]\n\n\n결제 정보 검토\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-015514.png?api=v2]\n\n바뀐 내용이 있으면 수정하고 그렇지 않으면 주문 검토 버튼을 누른다.\n\n\n결제\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-020121.png?api=v2]\n\n결제하고 법인카드 영수증 처리 하면 끝.\n\n * 사업자 번호 201-86-22009\n\n * 영수증은 이메일로 오는데 과거의 영수증을 확인할 수 있는 페이지는 따로 없는듯 하니 이 페이지의 첨부 파일로 영수증을 모아 놓는다.\n   \n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-021211.png?api=v2]\n   \n   \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/812711965"
  },
  {
    "pageContent": "iOS 13\n\n최근 iOS 13 [https://www.apple.com/ios/ios-13/features/]이 출시 되면서 다양한 기능이 추가되고\n변경사항이 생겼습니다. \n\n업데이트를 통해 더 풍부한, 개선된 기능을 제공받을 수 있는건 좋은 일입니다.\n\n하지만 개발자들은 개발 시 주의해야할 이슈들이 생겼습니다. 한번씩 읽어보시는 걸 추천드립니다.\n\n* 이 문서에서 iOS 13 변경사항을 모두 다룰 예정이나 개발에 필요한 주요 업데이트 중심으로 작성해나갈 예정입니다. 지속적으로 업데이트\n하겠습니다. \n\n* 시간 나시면 공식 사이트에서 자세히 보시길 추천드립니다.\n\n\n소개\n\n\n\n\n항목내용최초 공개일2019.06.03 (WWDC)정식 배포일2019.09.20공식\n사이트https://www.apple.com/ios/ios-13/ [https://www.apple.com/ios/ios-13/]기능\n소개https://www.apple.com/ios/ios-13/features/\n[https://www.apple.com/ios/ios-13/features/]\n\niOS 13은 2019년 9월 업데이트 되었습니다. 주요 업데이트 내용으로는 다크모드, 애플 아케이드(오락실)\n[https://www.apple.com/kr/apple-arcade/], 사진앱 변경, 사파리 다운로드 관리자, 애플 맵 3D 지원이\n있습니다. \n\n\n\n\n\n목차\n\n\n\n * 소개\n * 목차\n * 0. 대응이 필요한 변경사항\n * 1. 다크모드\n   * 대응\n     * 1) 직접적 대응\n     * 2) 다크모드 비활성화\n     * info.plist 설정을 통한 비활성화\n     * 코드를 통한 비활성화\n   * StatusBar Style 스타일 변경\n   * 대응 하지 않을 경우 (CCNx)\n * 2. 위치 요청 정책 변경\n   * 위치 권한 한 번만 허용 추가\n * * '항상 허용' 정책 변경\n   * 위치 트래킹 알림\n * 3. 개인정보 보호 및 보안\n * 4. Apple 로그인\n * 5. 애플 아케이드\n * 6. 사진 앱\n * 7. 비디오 편집\n * 8. 애플 지도\n * 9. Siri\n * 10. 미리 알림\n * 11. 성능 향상\n * 12. iPad\n * 13. ARKit3\n * 14. 그 외 개발 시 주의해야 할 점\n   * 1) StatusBar 색상 변경 방식\n   * 2) View Controller Presentation 동작 변경\n     * 대응\n * 15. 기타\n   * Swift UI\n * 16. 참고 사이트\n\n\n\n\n0. 대응이 필요한 변경사항\n\n 1. 다크모드\n 2. 위치 요청 정책 변경\n 3. StatusBar 색상 수정 방식 변경\n 4. View Controller Presentation 동작 방식 변경\n\n\n1. 다크모드\n[https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode/]\n\n다크 모드는 Mac OS 모하비에서 처음 선보인 기능이며, iOS13 부터 지원합니다.\n\n요약해서 설명하자면 \"UI 컬러를 전반적으로 어둡게 바꾸는 기능\"입니다. 물론 사용자가 제어센터에서 사용여부를 선택할 수 있습니다.\n\n이로인해 앱이 다크모드를 지원해야 한다면, 기획, 디자인, 개발, QA 단계에서 다크모드에 대응해야 합니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_13-18-34.png?api=v2]\n\n\n\n\n\n대응\n\n현재 배포되어 있거나 iOS 13에 따로 대응하지 않은 앱은 무조건 대응이 필요합니다. 다크모드에서는 Color 값을 별도로 적용하지 않은\n뷰들은 다크모드의 Default 값을 따르게 됩니다.\n\n대응되지 않은 앱은 아래와 같은 문제들이 발생합니다.\n\n * 텍스트 가독성이 저하될 수 있습니다.\n   * 다크모드에서 텍스트는 밝은 색, 배경 색상은 어두운 색이 Default 입니다.\n   * 따로 백그라운드의 색깔을 변경해주지 않은 뷰들이 다크 모드를 준수하게 됩니다. 이 때 제일 문제가 되는 경우는 UITextView\n     입니다. 보통 텍스트 컬러는 직접 지정해주는데 백그라운드 색상은 지정하지 않는 경우가 많기 때문입니다.\n     이렇게 될 경우 다크 모드로 전환하면 백그라운드는 다크모드의 Default 값을 따라서 어두운 색깔로 변경되는 반면 텍스트 컬러는\n     그대로 검은색이라 가독성이 심각하게 떨어집니다. (보이지 않는 수준이라고 봐도 무방할 듯)\n\n * UIStatusBarStyle.default 로 지정되었던 StatusBar 색깔이 일괄적으로 흰색으로 바뀌게 됩니다.\n   \n   * Status 색상을 밝은 계열로 지정한 경우, 가독성이 심각하게 떨어집니다. 이에 대응해\n     UIStatusBarStyle.darkContent 가 새로 제공됩니다. UIStatusBarStyle.darkContent로 지정할\n     경우, 다크 모드일 경우에도 StatusBar 컨텐츠 색깔이 검은색으로 유지됩니다.\n\n해결 방법으로는 직접적으로 대응, 다크모드를 미 지원 두 가지가 있습니다.\n\n\n1) 직접적 대응\n\n네이티브 방식에서는 iOS 13, 다크모드를 설정한 디바이스에서 앱을 설치하고, 가독성이 떨어지는 텍스트, 괴리감이 발생하는 UI 색상 등을\n하나하나 수정해주는 방법이 있습니다.\n\n대응 가이드가 필요하다고 여겨지면 추후 별도로 작성해보겠습니다. \n\n\n2) 다크모드 비활성화\n\n적용이 불필요하다고 판단되면 무시할 수 있는 방법이 있습니다. \n\n\nINFO.PLIST 설정을 통한 비활성화\n\n프로젝트 info.plist에 아래와 같이 설정해주면 됩니다.\n\n[https://k.kakaocdn.net/dn/dGfhZf/btqyu9rljWZ/8phyp9MX0sUmJ9SLQviEm0/img.png]\n\n\n코드를 통한 비활성화\n\nCCNx iOS Commit\n[https://github.com/Ecube-Labs/ccn-fm-ios/commit/11f500497830e8f3523a9771525e66c76fe6b049]\n을 참고해주세요\n\n\n\n\n참고로 애플 개발 문서\n[https://developer.apple.com/documentation/xcode/supporting_dark_mode_in_your_interface/choosing_a_specific_interface_style_for_your_ios_app]에\n따르면 애플은 다크모드를 지원할 것을 추천합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-20-19.png?api=v2]\n\n\nSTATUSBAR STYLE 스타일 변경\n\nXcode - Project Setting General - Deployment Info 에서 해당 설정을 바꾸어 주면 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/%E1%84%83%E1%85%A1%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%85%E1%85%A9%E1%84%83%E1%85%B3.png?api=v2]\n\n\n\n\n\n대응 하지 않을 경우 (CCNX)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/f47c4f27-0000-46c0-9e91-5a56467df9cd.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/f0535c8b-e83f-4aa4-b308-640d73945039.png?api=v2]\n\n\n2. 위치 요청 정책 변경\n\n\n위치 권한 한 번만 허용 추가\n\n위치 접근 허용 권한에 \"다음번에 묻기\" 가 추가됐습니다.\n\n권한 허용 팝업에서 \"한 번 허용\"을 누르면 CLLocationManager.authorizationStatus 값이\nauthorizedWhenInUse 로 변경됩니다.\n\n이 권한은 유저가 앱을 사용 중일 때만 유지되며, 백그라운드에 돌아갔다가 다시 오거나, 앱을 재 실행할경우 다시 notdetermined로\n변경됩니다.\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-0-42.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-3-28.png?api=v2]\n\n\n'항상 허용' 정책 변경\n\nCLLocationManager.requestalwaysAuthorization()을 콜할 경우 기존에는 왼쪽과 같이 '항상 허용' 창이\n있었습니다. 하지만 이 선택지는 iOS 13에서 사라졌습니다. 대신 한 번 허용이 추가된 걸 확인할 수 있습니다.\n\n단 항상 허용할지 물어보는 Alert는 아래 조건에 부합하면 별도로 사용자에게 노출됩니다.\n\n * 백그라운드에서 위치 탐색을 시도하는 경우\n * 위치 권한이 \"사용하는 동안\"(authorizedAlways) 으로 설정된 사용자일 경우\n * CLLocationManager의 allowBackgroundLocationupdates가 True인 경우\n * 위 조건을 만족하고 startUpdatingLocation() 함수를 호출할 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-7-37.png?api=v2]\n\n유저가 '사용하는 동안 유지'를 선택할 경우 'authorizedWhenInUse로 권한이 변경된다. 반면 '항상 허용'을 누르면 영구적으로\n'authorizedAlways'로 유지된다.\n\n\n\n\n결과적으로 '항상 허용'을 직접적으로 요청하는 방법은 사라졌지만, 설정에서 유저가 '항상' 을 선택할 경우 이전 로직이 그대로 돌아갑니다. 항상\n허용 권한이 필요하다면 아래와 같은 안내 화면을 사용자에게 보여주는 것을 추천합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-14-40.png?api=v2]\n\n\n위치 트래킹 알림\n\n백그라운드에서 위치 탐색 시 어디에서 위치를 취득했는지 시스템 Alert을 주기적으로 띄워 경고합니다.\n\n\n3. 개인정보 보호 및 보안\n\n업데이트 예정\n\n\n4. APPLE 로그인\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_12-32-43.png?api=v2]\n\n트위터, 페이스북, 구글 들이 제공하는 OAuth 로그인 기능이 추가된 것으로 보인다.\n\n업데이트 예정\n\n\n5. 애플 아케이드 [https://www.apple.com/kr/apple-arcade/]\n\n재미를 선물하는 업데이트입니다. \n\n업데이트 예정\n\n\n6. 사진 앱\n\n * 일, 월, 연도별로 최고의 사진을 자동으로 엄선해서 보여주는 기능\n * 새롭게 마련된 사진 편집 기능\n * 강력한 동영상 편집\n\n업데이트 예정\n\n\n7. 비디오 편집\n\n업데이트 예정\n\n\n8. 애플 지도\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_13-42-57.png?api=v2]\n\n3D 지도 탐색 기능이 추가 됨. (미국 에서 우선 적용)\n\n업데이트 예정\n\n\n9. SIRI [https://developer.apple.com/siri/]\n\n업데이트 예정\n\n\n10. 미리 알림\n\n업데이트 예정\n\n\n11. 성능 향상\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_13-44-28.png?api=v2]\n\n * Face ID 잠금 해제 속도 30% 향상\n * 앱 실행 속도가 2배 향상\n\n자세한 벤치마킹 데이터는 추후 업데이트 예정\n\n\n12. IPAD [https://developer.apple.com/kr/ipad/]\n\n업데이트 예정\n\n\n\n\n\n13. ARKIT3\n\n업데이트 예정\n\n\n14. 그 외 개발 시 주의해야 할 점\n\n\n1) STATUSBAR 색상 변경 방식\n\nNative 개발 방식에서 앱의 StatusBar 색상을 변경할 때 사용했던 보편적인 방법은 iOS 13 환경에서는 허용되지 않으며, 만약\n코드에 존재한다면 Crash가 발생해 앱이 죽습니다.\n\n애플은\n[StatusBarManager|https://developer.apple.com/documentation/uikit/uistatusbarmanager]\n[https://developer.apple.com/documentation/uikit/uistatusbarmanager%5D%EB%A5%BC] 를\n제공하나, BackgroundColor는 변경할 수 없습니다. Background Color를 변경해야 하는 경우 아래 대응 커밋을\n참고해주세요.\n\nCCNx 대응\n[https://github.com/Ecube-Labs/ccn-fm-ios/commit/13484f1481d980b9ec79187977f0c3930a815476]\n\n\n2) VIEW CONTROLLER PRESENTATION 동작 변경\n\nView controller presentation의 동작이 변경됐습니다. Presentation의 Default 속성은 이제 PageSheet\n입니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_15-35-45.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_15-38-34.png?api=v2]\n\niOS 13 전 / 후 CCNx 사이드바 동작 방식\n\n\n대응\n\n모달을 호출할 때, UIViewController 객체의 'modalPresentatonStyle' 속성을 조절해주면 됩니다\n\n기존과 같은 모달 방식을 사용하고 싶다면 '.fullScreen' 설정을 주면 됩니다.\n\n대응법은 테스트 후 업데이트 하겠습니다.\n\n\n15. 기타\n\n\nSWIFT UI [https://developer.apple.com/xcode/swiftui/]\n\n업데이트 중\n\n\n16. 참고 사이트\n\nhttps://www.apple.com/kr/ios/ios-13/ [https://www.apple.com/kr/ios/ios-13/]\n\nhttps://www.apple.com/kr/ios/ios-13/features/\n[https://www.apple.com/kr/ios/ios-13/features/]\n\nhttps://www.apple.com/kr/newsroom/2019/06/apple-previews-ios-13/\n[https://www.apple.com/kr/newsroom/2019/06/apple-previews-ios-13/]\n\nhttps://developer.apple.com/kr/ios/ [https://developer.apple.com/kr/ios/]\n\nhttps://g-y-e-o-m.tistory.com/150 [https://g-y-e-o-m.tistory.com/150]\n\nhttps://sesang06.tistory.com/138 [https://sesang06.tistory.com/138]\n\nhttps://brunch.co.kr/@genkino/169 [https://brunch.co.kr/@genkino/169]\n\nhttps://medium.com/@hacknicity/view-controller-presentation-changes-in-ios-13-ac8c901ebc4e\n[https://medium.com/@hacknicity/view-controller-presentation-changes-in-ios-13-ac8c901ebc4e]\n\nhttps://sarunw.com/posts/modality-changes-in-ios13/\n[https://sarunw.com/posts/modality-changes-in-ios13/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227213328"
  },
  {
    "pageContent": "UIWebView 지원 중단\n\n\n개요\n\niOS 앱에 웹을 표시해야 하는 경우 UIWebView, WKWebView 두 가지 중 하나를 선택해 개발하면 됐습니다.\n\n그러나 애플은 2019년 부터 UIWebView deprecated 소식을 알려왔으며, 이제 UIWebView\n[https://developer.apple.com/documentation/uikit/uiwebview] 지원이 중단되었습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/556924929/image-20200506-013854.png?api=v2]\n\nUIWEBVIEW를 사용하고 있는 프로젝트를 업로드 할 경우 받을 수 있는 이메일\n\n\n문제점\n\nUIWebView 사용하는 프로젝트는 앱을 업로드할 수 없습니다. (업로드 성공 후 처리 중 단계에서 검수되어 취소 됨)\n\n * 신규 앱이라면 2020년 4월부터 업로드 할 수 없습니다. (직접 확인 함)\n\n * 이미 등록된 앱이라면 2020년 12월부터 업로드 할 수 없습니다. (확인 못함)\n\n아직 UIWebView 를 사용하고 있는 프로젝트가 많을 것으로 예상되며, 직접적으로 사용하지 않더라도 사용 라이브러리가 이를 사용하고 있다면\n문제가 됩니다.\n\n라이브러리 버전이 최신이 아닌 경우 UIWebView를 간접적으로 사용하고 있을 가능성이 있습니다.\n\n\n대안\n\n * WKWebView [https://developer.apple.com/documentation/webkit/wkwebview] 으로\n   마이그레이션 해야합니다.\n\n * 사용하는 라이브러리가 UIWebView 사용하는 경우, 버전을 높이거나 다른 라이브러리로 대체하는 것을 생각해보아야 합니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/556924929"
  },
  {
    "pageContent": "[iOS][푸시 인증서] 1. 개별 인증서 발급 및 Push Services 인증서 등록\n\n이 페이지는 푸시 인증서를 통한 방식에 대한 설명입니다. key를 이용한 방식은 해당 문서\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/223183054/2.+APN]를 참고해주세요\n\n * 1. 개별 인증서 발급\n * 2. Push Services 인증서 등록\n\n\n1. 개별 인증서 발급\n\n인증서를 발급 받아야합니다. “키체인 접근” 앱을 킵니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045023.png?api=v2]\n\n상단 메뉴에서 인증서 지원 - 인증 기관에서 인증서 요청 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045126.png?api=v2]\n\n사용자 이메일을 입력하고 디스크에 저장하기 체크한 뒤 계속을 눌러 저장합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045259.png?api=v2]\n\n인증서 발급을 완료했습니다.\n\n\n2. PUSH SERVICES 인증서 등록\n\nhttps://developer.apple.com/account/resources/identifiers/list\n[https://developer.apple.com/account/resources/identifiers/list] 에 접속합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045618.png?api=v2]\n\n\n\ncertificates 등록할 앱을 선택합니다.\n\n예시에서는 Clean City Networks 에 대한 푸시 certificates 를 등록합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045645.png?api=v2]\n\n\n\n항목 중 “Push Notification” 항목의 Edit 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045749.png?api=v2]\n\n * Development SSL Certificate: 개발용 푸시 인증서\n\n * Production SSL Certificate: 배포용 푸시 인증서\n\n“Create Certificate” 버튼을 클릭한 뒤 앞서 발급 받은 인증서를 선택합니다.\n\n선택을 완료했다면 “Complete” 버튼을 클릭해주세요.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045851.png?api=v2]\n\n\n\ncertificate 등록 완료됐습니다. 다운로드 합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045938.png?api=v2]\n\n다운로드한 certificate 을 실행하면, 키체인 앱에 추가된 것을 확인할 수 있습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-050404.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/228687958"
  },
  {
    "pageContent": "[iOS][푸시 인증서] 2. APNs pem 생성 및 전달\n\nCCN 에서 아직 APNs 방식을 사용 중입니다.\n\n혹시 [iOS][푸시 인증서] 1. 개별 인증서 발급 및 Push Services 인증서 등록\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/228687958/iOS+1.+Push+Services]을\n읽지 않으셨다면 해당 문서 내용을 먼저 확인해주세요. (필수)\n\n본 문서는 APNs 푸시 인증서(cert.pem, apns.pem)를 생성하고 전달해야 방법을 다루고 있습니다.\n\n * 1. Certificate, Key 추출\n   * 1.1. Certificate 내보내기\n     * 1) 전달하고자 하는 프로젝트 푸시 Certificate를 선택하고 내보내기 버튼을 클릭합니다.\n     * 2) 저장할 파일 경로를 선택하고 저장합니다. 이름은 cert.p12 로 적습니다.\n     * 3) 암호를 설정합니다.\n   * 1.2. Key 추출\n     * 1) Key를 선택하고 내보내기 버튼을 클릭합니다.\n     * 2) 저장할 파일 경로를 선택하고 이름을 정합니다. 이름은 key.p12로 적습니다.\n     * 3) 암호를 설정합니다.\n * 2. 푸시 인증서 p12 → pem 변환\n   * 2.1. cert.p12 → cert.pem\n   * 2.2. key.p12 → key.pem\n   * 2.3. key.pem → key.unencrypted.pem\n   * 2.4. cert.pem + key.unencrypted.pem → apns.pem\n * 3.전달\n   * 전달 방법\n   * 최종 전달물\n   * 주의사항\n\n\n1. CERTIFICATE, KEY 추출\n\n먼저 키체인 접근에 등록되어 있는 푸시 인증서와 키를 추출 해야 합니다.\n\n\n1.1. CERTIFICATE 내보내기\n\n\n1) 전달하고자 하는 프로젝트 푸시 CERTIFICATE를 선택하고 내보내기 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-063841.png?api=v2]\n\n\n2) 저장할 파일 경로를 선택하고 저장합니다. 이름은 CERT.P12 로 적습니다.\n\n\n3) 암호를 설정합니다.\n\n공백도 되나 비밀번호를 되도록이면 설정해주시고, 이걸 메모합니다.\n\np12 파일을 pem 파일로 변환하는 과정에서 필요합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064127.png?api=v2]\n\n\n\n\n\n\n1.2. KEY 추출\n\n\n1) KEY를 선택하고 내보내기 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-063937.png?api=v2]\n\n\n2) 저장할 파일 경로를 선택하고 이름을 정합니다. 이름은 KEY.P12로 적습니다.\n\n\n3) 암호를 설정합니다.\n\n공백도 되나 비밀번호를 되도록이면 설정하고 이걸 메모합니다.\n\np12 파일을 pem 파일로 변환하는 과정에서 필요합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064127.png?api=v2]\n\n\n\n\n2. 푸시 인증서 P12 → PEM 변환\n\n푸시 발송 시 사용하는 푸시 인증서는 apns.pem과, cert.pem 두 가지입니다.\n\np12 파일을 pem 파일로 변환하는 과정을 거쳐야 합니다 .\n\n\n2.1. CERT.P12 → CERT.PEM\n\n아래와 같이 터미널에 입력하면 아까 인증서를 저장할 때 입력했던 비밀번호를 요구합니다. 입력해주세요\n\nopenssl pkcs12 -clcerts -nokeys -out cert.pem -in cert.p12\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064810.png?api=v2]\n\n\n2.2. KEY.P12 → KEY.PEM\n\n아래와 같이 터미널에 입력하면 아까 인증서를 저장할 때 입력했던 비밀번호를 요구합니다. 입력해주세요\n\nopenssl pkcs12 -nocerts -out key.pem -in key.p12\n\ncert 파일 변환때와는 다르게 pem에 비밀번호를 지정해주어야 합니다. 지정해주세요.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064911.png?api=v2]\n\n\n2.3. KEY.PEM → KEY.UNENCRYPTED.PEM\n\n아래와 같이 터미널에 입력하면 아까 key.pem 파일을 생성할 때 입력했던 비밀번호를 요구합니다. 입력해주세요\n\nopenssl rsa -in key.pem -out key.unencrypted.pem\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-065002.png?api=v2]\n\n\n2.4. CERT.PEM + KEY.UNENCRYPTED.PEM → APNS.PEM\n\ncat cert.pem key.unencrypted.pem > apns.pem\n\n\n\n\n3.전달\n\n\n전달 방법\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]에게\n전달.\n\n\n최종 전달물\n\n * apns.pem\n\n * cert.pem\n\n\n주의사항\n\n * 테스트\n   \n   * 인증서 교체 후 작동하는지 확인하면 됩니다.\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230720127"
  },
  {
    "pageContent": "앱을 삭제하고 같은 Bundle ID로 재 등록할 수 없다.\n\n같은 Bundle ID로 재 등록이 필요한 경우는 현재까지 없습니다.\n\n이 테스트는 잘못된 상식으로 비롯됐다. 기록을 위해 적는다.\n\n\n\niOS 앱은 각각 고유한 Bundle Identifier를 지니는데, 앱을 삭제하고 같은 번들 ID를 재 등록하려는 경우가 만일하나 있을 수\n있다. 결론부터 말하면 불가능한것으로 보인다.\n\nex) CCN iOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/272761460/image-20191231-004409.png?api=v2]\n\n\n\nBundle ID 등록 ~ 앱 생성 까지 진행한 후 테스트를 진행했다. 배포는 하지 않았다.\n\n우선 Itunes connect 에서 앱을 삭제해보았는데, 한달이 지난 지금도 삭제한 앱 목록에 계속 유지된다.\n\nBundle ID 삭제를 시도하면 아래와 같은 알림창이 뜨며 실패한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/272761460/image-20191231-005016.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/272761460/image-20191231-005038.png?api=v2]\n\n결론적으로 앱은 마켓에서 삭제할 수 있지만 한번 등록되면 Bundle ID를 삭제할 수 없는 것으로 보인다.\n\n\n\nApple에 직접 문의해보지 않았다. 추후 필요하면 진행할 예정이다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272761460"
  },
  {
    "pageContent": "Cannot inherit from non-open class '{Module}' outside of its defining module\n\n\n원인\n\nSwift 3부터 override 하려면 대상 클래스 메서드의 access level이 open으로 지정되어야 합니다. 그렇지 않을 경우\n발생합니다. 오래된 패키지를 사용하다보면 발생할 수 있습니다.\n\n\n해결방법\n\n\n1. 모듈 버전 업데이트\n\n모듈을 최신 버전으로 업데이트 하면 됩니다.\n\n단 업데이트로 인해 기능 동작이 기존과 상이할 수 있으니 유의해야 하며, 대응된 모듈이 아니면 시도할 수 없습니다.\n\n\n2. 기존 설치 모듈의 코드 변경\n\n가급적 피해야 하는 방법입니다.\n\n마땅이 대안이 없는 경우, 모듈이 오래됐거나 프로젝트를 보수적으로 운영해야 하는 경우 해당 방법을 사용할 수 있습니다.\n\n> Cannot inherit from non-open class '{Module}' outside of its defining module\n\n문제가 발생한 class 앞에 open 명시해주면 됩니다.\n\n> Overriding non-open instance method outside of its defining module\n\n문제가 발생한 method 앞에 open 명시해주면 됩니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/271188726"
  },
  {
    "pageContent": "[iOS][Swift] Access levels\n\nSwift 3 is bringing significant changes to access control.\n\nSwift 2 only had 3 access levels:\n\n * private: entities are available only from within the source file where they\n   are defined.\n\n * internal: entities are available to the entire module that includes the\n   definition.\n\n * public: entities are intended for use as API, and can be accessed by any file\n   that imports the module.\n\nSwift 3 is adding 2 more access levels (open and fileprivate) and changing the\nmeaning of private:\n\n * private: symbol visible within the current declaration only.\n\n * fileprivate: symbol visible within the current file.\n\n * internal: symbol visible within the current module.\n\n * public: symbol visible outside the current module.\n\n * open: for class or function to be subclassed or overridden outside the\n   current module.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696018"
  },
  {
    "pageContent": "[iOS][Swift] 버전 주요 변경점\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696039"
  },
  {
    "pageContent": "Swift 5\n\nTODO\n\nhttps://developer.apple.com/kr/swift/#introducing\n[https://developer.apple.com/kr/swift/#introducing]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696057"
  },
  {
    "pageContent": "SwiftUI\n\nXcode 11, macOS 10.15 이상 버전부터 사용가능합니다.\n\n\nSWIFTUI 란?\n\n> Swift 구문을 통해 SwiftUI는 새로운 Xcode 디자인 도구와 매끄럽게 연동되면서 코드와 디자인이 완벽하게 동기화되도록 합니다.\n> 또한 유동적 글자 크기 조절, 다크 모드, 현지화 및 손쉬운 사용을 자동 지원하므로 SwiftUI 코딩 첫 줄부터 가장 강력한 UI 코드를\n> 작성할 수 있습니다.\n\nSwift UI는 Apple 플랫폼의 사용자 인터페이스를 코드를 통해 쉽게 구축할 수 있도록 Xcode 에서 제공되는 기능입니다. Xcode\n11 부터 사용 가능합니다. \n\n\n특징\n\n\n1) 높은 가독성\n\n코드 기반으로 화면을 그립니다. 즉 더 이상 스토리보드 AutoLayout을 사용할 필요가 없습니다. 물론 코드로 화면을 그리는 방식은 이전부터\n있었습니다. 하지만 보편적이지 않고, 가독성이 떨어졌습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/330858675/image-20200128-231100.png?api=v2]\n\n사진) SwiftUI - Developer Apple Tutorials\n\nSwiftUI는 코드가 굉장히 간결하고, 읽기 쉽습니다. AutoLayout은 H/VStack, Groups 과 같은 새로운 방식으로\n대체됩니다.개발 시간 및 유지보수 비용을 줄일 수 있습니다. \n\n\n2) 멀티 플랫폼\n\nSwiftUI는 멀티 플랫폼을 지원합니다. Apple 플랫폼(macOS, watchOS, ipadOS, tvOS iOS) 앱 개발에 활용할 수\n있습니다. Flutter, React Native 처럼 하나의 코드가 여러 플랫폼(Android, iOS) 에서 공통된 의미로 작동되는 의미는\n아닙니다. 멀티 플랫폼을 지원해야하는 경우 시간을 줄일 수 있습니다.\n\n> 플러터는 안드로이드 앱을 함께 개발할 수 있다. 만약 모바일용 앱만 개발할 계획이라면, 플러터가 더 나은 선택일 테고, 스위프트 UI는\n> 고려하지 않을 것이다. 단지 소규모 개발을 넘어선 문제에서 보면 얘기가 달라진다.\n> \n> 만약 맥 앱을 개발하길 원하면, iOS 그룹이 맡는 게 아니라 새로운 그룹을 만들어야 한다. 수익에 큰 영향을 끼치지 않는다면 굳이 새로운\n> 그룹을 만들어서 맥 앱을 개발할 이유가 없다는 거다. 프로젝트 카탈리스트는 기존의 iOS 개발 그룹이 맥 앱도 개발할 수 있게 지원한다.\n> 회사로서는 새로운 그룹을 만들지 않아도 되고, 비용도 절감되며, 시간조차 오래 걸리지 않는다. 아이패드 앱을 맥 앱으로 출시하는 게 큰일이\n> 아니게 된 것이다. 그리고 이 얘기는 맥만 아니라 모든 애플 기기에 적용된다.\n> \n> https://m.post.naver.com/viewer/postView.nhn?volumeNo=21490246&memberNo=6384148\n> [https://m.post.naver.com/viewer/postView.nhn?volumeNo=21490246&memberNo=6384148]\n\n\n\n\n3) 라이브 코딩\n\n코드 수정을 통해 변경되는 레이아웃을 실시간으로 미리보기 할 수 있습니다. 개발 속도를 향상시킵니다.\n\nCanvas는 macOS 10.15 이상 버전부터 지원합니다.\n\n라이브 코딩을 사용하려면 Canvas를 활성화합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/330858675/image-20200128-231119.png?api=v2]\n\n사진) Xcode 상단 - Adjust Editor Options\n\n\n4) 컴포넌트 재사용\n\n코드로 컴포넌트를 작성하고, 컴포넌트를 조합하는 형태이기 때문에 재사용 가능한 특징을 갖습니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/330858675/image-20200128-231131.png?api=v2]\n\n사진) SwiftUI - Developer Apple Tutorials\n\n\n기타\n\n\n1) 추후에 UIKIT는 없어지는가?\n\n→ SwiftUI 로 작성된 코드는 컴파일 시점에서 UiKit 컴포넌트로 변환돼 컴파일된다.\n\n\n2) SWIFTUI 완벽 대체 가능한가?\n\n→ 완벽 대체 불가능하다.\n\n * UiKit 컴포넌트와 100% 1:1 대응되지 않는다. 대표적으로 UICollectionView 는 SwiftUI 에서 제공되지 않는다.\n\n * UiKit 는 에러사항들을 해결하는 수 많은 라이브러리들이 존재한다. SwiftUi 는 그렇지 않다. 당장 무리가 있다. 이는 시간이\n   해결해줄 것으로 보인다.\n\n\n3) SWIFTUI, UIKIT 동시 사용\n\n→ 동시에 사용하길 원한다면 UIHostingController 를 사용하면 된다.\n\n\n참고 링크\n\nIntroducing SwiftUI: Building Your First App\n[https://www.youtube.com/watch?v=_1_XkeFUUME]\n\nXcode Swift UI [https://developer.apple.com/kr/xcode/swiftui/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/330858675"
  },
  {
    "pageContent": "[iOS] 심사 리젝 주의사항 및 대응법\n\n\n\n\n\n\n\n\n???\n\n * 같은 사유로 리젝을 3번 정도 걸리면, 아주 자세하게 설명해주기도 합니다… (???)\n   \n   * 구독 관련 문구를 제대로 표시 안 했을 때\n     \n     * 예) 너는 그저 저 문구를 화면에 그대로 넣어주면 돼!, 어떤 행동을 해서 보여야 하는 것이 아니라 해당 화면을 보자마자 보여야 돼\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/330858734"
  },
  {
    "pageContent": "[iOS] Changelog\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374145114"
  },
  {
    "pageContent": "Apple extends deadline for developers to update their apps to iOS 13\n\nhttps://developer.apple.com/news/?id=03262020b\n[https://developer.apple.com/news/?id=03262020b]\n\n\n\n애플의 앱 스토어 가이드 라인 정책이 업그레이드 됐습니다.\n\n원래는 April 20, 2020 시행 될 예정이었으나, June 30th 으로 데드라인이 확장 됐습니다.\n\n\n\n1. Apps for iPhone or iPad must be built with the iOS 13 SDK or later and use an\nXcode storyboard to provide the app's launch screen.\n\n아이폰과 아이패드 전용 앱은 iOS 13 SDK 이상 버전을 사용해야 한다는 조항입니다.\n\n이는 Target version 과 무관하고 Xcode, OS 버전의 업데이트가 필요할 수 있습니다. 확인은 아래 명령어를 터미널에 입력해보시면\n됩니다.\n\nxcodebuild -showsdks\n\n...\niOS SDKs:\n\tiOS 13.2                      \t-sdk iphoneos13.2\n\n\n\n2. iPhone apps must support all iPhone screens and all iPad apps must support\nall iPad screens.\n\n아이폰 앱은 모든 아이폰 스크린을 지원해야하고, 아이패드 앱은 모든 아이패드 스크린을 지원해야 한다는 조항입니다.(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png]\n\n모든 기기 스크린에서 기능이 잘 작동하고, UI가 유연해야 한다는 이야기인지.. 백프로 이해 못했습니다.. 다른분들이 도와주실 거라 믿습니다.\n\n\n\n3. Apps for Apple Watch must be built with the watchOS 6 SDK or later.\n\n우리는 해당하는 앱이 아직 없습니다.\n\n애플 워치를 위한 앱은 watchOS 6 SDK 이상을 사용해야 한다는 조항입니다.\n\n\n\n4. Apps that authenticate or set up user accounts must support Sign in with\nApple if required by guideline 4.8 of the App Store Review Guidelines.\n\n우리는 해당하는 앱이 아직 없습니다.\n\nGuideline 4.8 - Design - Sign in with Apple\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/365330581/Guideline+4.8+-+Design+-+Sign+in+with+Apple]\n\n\n\n5. Apps in the Kids category must be in full compliance with guideline 1.3 and\nguideline 5.1.4. of the App Store Review Guidelines.\n\n우리는 해당하는 앱이 아직 없습니다.\n\n간략한 설명\n\n키즈 카테고리의 앱들은 가이드라인 1.3과 5.1.4 를 충족해야 한다는 조항입니다\n\n1. 가이드 라인 1.3\n\n * 링크, 구매 또는 어린이를 위한 기타 방해 요소가 포함되어서는 안된다.\n\n * 온라인에서 아동의 데이터 수집과 관련하여 전 세계에서 적용 가능한 개인 정보 보호법을 준수해야합니다\n\n2. 가이드 라인 5.1.4\n\n * 어린이의 개인 데이터는 COPPA(Children’s Online Privacy Protection Act) 법률을 준수 해야한다.\n\n * 광고 분석, 광고가 포함되어서는 안된다. (이름, 생년월일, 전자 메일 주소, 위치 또는 장치를 수집하거나 전송하지 않는 경우 제한적인\n   경우 타사 분석이 허용 될 수 있습니다.)\n\n * 위치 기반 API 사용시 몇 가지 주의해야 할 것들이 있다.\n\n\n\n6. Apps using HTML 5 must be in full compliance with guideline 4.7 sections 4,\n5, and 6 of the App Store Review Guidelines.\n\n우리는 해당하는 앱이 아직 없습니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/468025521"
  },
  {
    "pageContent": "Guideline 4.8 - Design - Sign in with Apple\n * 원인\n * 대응법\n * 기타\n\n\n원인\n\n앱에 소셜 로그인 기능이 있는데, Sign in with Apple 기능을 제공하지 않은 경우입니다.\n\n[https://developers.naver.com/inc/devcenter/images/cont/img_naverid01.png]\n\n많은 유명 서비스들을 보면 소셜 로그인 기능을 제공하는 경우가 많습니다. 사용자는 이를 통해 손쉽게 회원가입 및 로그인을 할 수 있습니다.\n\n네이버, 카카오톡, 구글 로그인 등이 여기에 해당합니다.\n\n\n\n[https://support.apple.com/library/content/dam/edam/applecare/images/en_US/appleid/ios13-iphone-xs-sign-in-with-apple-hide-my-email.jpg]\n\n문제는 앱 스토어 릴리즈 계획을 갖고있고, 그 앱이 소셜로그인 기능이 제공한다면 애플 로그인을 필수로 고려해야합니다.\n\n그 이유는 소셜 로그인 기능이 포함된 앱이 애플 로그인을 제공하지 않을경우 무조건 리젝이기 때문입니다. (애플 양아치)\n\n\n대응법\n\nSign in with Apple 기능을 다른 소셜 로그인과 동일한 레벨로 구현하면됩니다.\n\nImplementing User Authentication with Sign in with Apple\n[https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple]\n\n\n기타\n\nSign in with Apple [https://support.apple.com/ko-kr/HT210318]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/365330581"
  },
  {
    "pageContent": "Guideline 5.1.1 - Account deletion requirement\n\n\nTL;DR\n\n * 앱에 계정 등록 기능이 있는 경우, 계정 삭제 기능을 반드시 포함해야 합니다. 2022.06.30일부터 적용됩니다.\n   https://developer.apple.com/news/?id=12m75xbj\n   [https://developer.apple.com/news/?id=12m75xbj]\n\n\n가이드라인\n\nhttps://developer.apple.com/app-store/review/guidelines/#5.1.1v\n[https://developer.apple.com/app-store/review/guidelines/#5.1.1v]\n\n> If your app supports account creation, you must also offer account deletion\n> within the app.\n\n * 계정 삭제 옵션은 앱에서 쉽게 찾을 수 있어야 합니다.\n\n * 앱에서 Apple로 로그인을 제공하는 경우 계정을 삭제할 때 Apple로 로그인 REST API를 사용하여 사용자 토큰을 취소해야 합니다.\n\n * 계정을 일시적으로 비활성화하거나 비활성화하는 기능만 제공하는 것만으로는 충분하지 않습니다. 사람들은 개인 데이터와 함께 계정을 삭제할 수\n   있어야 합니다.\n\n * 규제가 심한 산업의 앱은 계정 삭제 프로세스를 확인하고 용이하게 하기 위해 추가 고객 서비스 흐름을 제공할 수 있습니다.\n\n * 사용자 계정 정보를 저장 및 유지하고 계정 삭제를 처리하기 위해 적용 가능한 법적 요구 사항을 따르십시오. 여기에는 여러 국가 또는 지역의\n   현지 법률 준수가 포함됩니다. 항상 그렇듯이 법률 고문에게 문의하십시오.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2439708677"
  },
  {
    "pageContent": "[iOS][Changelog] CCN\n\n각 버전에서 어떤 수정사항이 있었는지 추적이 안되는 것 같아서 만들었습니다. 문제가 되면 삭제하겠습니다.\n\n(커밋메시지를 더 상세히 쓰겠습니다.)\n\n\n\n * Release note convention\n * Logs\n   * [v1.2.4]\n     * Release Notes\n     * Changes\n\n\nRELEASE NOTE CONVENTION\n\n> 너무 많은 신경을 쓰지 말자. note 준비하고 번역하고, … etc. 많은 공수를 들이기엔 기회 비용이 아깝다.\n> \n> 사용자에게 유의미한(확실히 고지가 되어야만 하는) 업데이트(e.g. 기능 추가/변경/삭제 등)가 아닌 이상, 해당 업데이트는 다음과 같은\n> 류의 문구 하나로 충분하다.\n> \n> - 속도와 안정성 개선\n\n * Release note convention\n   [/wiki/pages/createpage.action?spaceKey=SW&title=Release%20note%20convention&linkCreation=true&fromPageId=374145123]\n   문서 카카오톡 형식(Bullet)을 따른다.\n\n\n\n\n\n\nLOGS\n\n\n[V1.2.4] \n\n\nRELEASE NOTES\n\n국가\n\n변경 내용\n\n제출 문구\n\n한국\n\n * 속도와 안정성 개선\n\n * 속도와 안정성 개선\n\n미국\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n중국\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n일본\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n그외\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n\nCHANGES\n\n * iOS 13 다크모드 비활성화\n\n * iOS 13 Slide menu 동작 방식을 이전과 동일하게 수정\n\n * 검색 수치 동적으로 표시되도록 수정\n\n * 버튼, 배경 이미지 깨지던 문제 해결\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374145123"
  },
  {
    "pageContent": "Architecture\n\n\nMVVM [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35192856/MVVM]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35323936"
  },
  {
    "pageContent": "Issue\n * 위치 정보 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27295761]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27426838"
  },
  {
    "pageContent": "CCNx (FM)\n\n\n구조\n\n├─java                                  \n│  └─com                                \n│      └─ecubelabs                      \n│          └─fm                         \n│              ├─binding// 데이터 바인딩 어댑터                \n│              ├─data// 데이터                   \n│              │  ├─event// 이벤트 버스용 클래스               \n│              │  ├─local// 로컬 데이터 소스               \n│              │  │  └─pref// SharedPreferences 데이터 관련             \n│              │  ├─model// 데이터 모델               \n│              │  ├─remote// 원격 데이터 소스              \n│              │  │  └─network// 네트워크 데이터 소스          \n│              │  │      ├─interceptor// 통신 인터셉터  \n│              │  │      ├─request// api request시 사용 클래스      \n│              │  │      ├─response// api response받을때 사용 클래스     \n│              │  │      └─service// api spec 관리      \n│              │  └─repository// api를 이용하여 비즈니스 로직 처리하는 repository          \n│              ├─di// DI 관련 클래스                     \n│              │  └─annotation// DI시 사용 커스텀 어노테이션          \n│              ├─service// 커스텀 서비스                \n│              ├─ui// UI 관련                     \n│              │  ├─appnavigation// 앱 좌측 슬라이드 네비게이션 메뉴       \n│              │  ├─base// 베이스 UI                \n│              │  ├─collection// 수거 관련          \n│              │  │  ├─issue// 특이사항 페이지           \n│              │  │  ├─skip// 건너뛰기 페이지             \n│              │  │  └─volume// 수거하기 페이지           \n│              │  ├─common// 일반 UI              \n│              │  │  ├─button// 일반 버튼            \n│              │  │  ├─dialog// 일반 다이얼로그           \n│              │  │  │  └─message// 일반 메시지 다이얼로그       \n│              │  │  └─view// 일반 뷰             \n│              │  ├─intro// 인트로 페이지               \n│              │  ├─password// 비밀번호 관련            \n│              │  │  ├─auth// 비밀번호 수정 전 인증 페이지             \n│              │  │  └─update// 비밀번호 수정 페이지           \n│              │  ├─route// 경로 관련               \n│              │  │  ├─detail// 경로 상세 페이지           \n│              │  │  ├─list// 경로 리스트 페이지(Fragment)             \n│              │  │  │  └─tab// 경로 리스트 탭           \n│              │  │  ├─navigation// 경로 운행 페이지        \n│              │  │  │  └─info// 경로 운행 하단 정보 창          \n│              │  │  ├─result// 경로 결과            \n│              │  │  │  ├─detail// 경로 결과 상세 페이지        \n│              │  │  │  └─popup// 경로 결과 팝업         \n│              │  │  └─select// 경로 리스트 페이지(Activity)           \n│              │  ├─signin// 로그인 페이지              \n│              │  ├─test// 테스트 페이지(필요없음)                \n│              │  └─vehicle// 차량 관련             \n│              │      └─list// 차량 목록 페이지\n│              └─util// 유틸 클래스                   \n│                  ├─mapbox// 맵 박스 유틸             \n│                  │  └─replay// 맵 박스 경로 시뮬레이션 유틸          \n│                  └─notification// 노티피케이션 유틸       \n└─res// 리소스                                   \n    ├─anim                              \n    ├─drawable                          \n    ├─drawable-hdpi                     \n    ├─drawable-mdpi                     \n    ├─drawable-v24                      \n    ├─drawable-xhdpi                    \n    ├─drawable-xxhdpi                   \n    ├─drawable-xxxhdpi                  \n    ├─font                              \n    ├─layout                            \n    ├─menu                              \n    ├─mipmap-hdpi                       \n    ├─mipmap-mdpi                       \n    ├─mipmap-xhdpi                      \n    ├─mipmap-xxhdpi                     \n    ├─mipmap-xxxhdpi                    \n    ├─values                            \n    ├─values-en                         \n    └─xml                               \n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/113705010"
  },
  {
    "pageContent": "Device\n\n\n1. TABLET\n\n--------------------------------------------------------------------------------\n\n\nFM 단말기 적합 최소 필요 조건\n\n * S-GPS 기능 (A-GPS는 Optional)\n * Bluetooth 기능\n * 4G 네트워크 통신 지원 (Usim 슬롯 필요)\n * 안드로이드 6.0 이상\n * RAM 2G 이상\n * CPU: Snapdragon 425급 이상 (가능하면 Snapdragon 617급 이상)\n\n\n1.1. FM이 구동될 태블릿 후보군\n\nBold: 1차 후보군\n\nGreen 배경: 최종 후보군\n\n제조사제품명 OS화면 (\")CPURAM (GB)Storage (GB)배터리 (mAh)BluetoothGPSWiFi3G4G가격\n(KRW)판매링크적합여부\n\n네트워크 제외 적합여부\n\n비고아이뮤즈A108.110.1 (1920 * 1200)Rockchip Rk33994643000OXOXX239,000판매처\n[https://smartstore.naver.com/imuz/products/4204397819]\n\nX\n\n\n3G, 4G, GPS 동작필요아이뮤즈T78.17 (600 * 1024)MT816318 or 162600OOOXX\n\n89,000 or 109,000\n\n판매처 [https://smartstore.naver.com/imuz/products/3746813925]XX (RAM 부족)3G, 4G\n동작필요아이뮤즈T107.010.1 (1280 * 800)Cortex-A531 or 28 or 165800OOOXX129,000 or\n169,000판매처 [https://smartstore.naver.com/twostarshop/products/2613464076]XO (RAM\n2GB 모델만)3G, 4G 동작필요아이뮤즈A87.18 (1200 * 1920)Rockchip\nRK33994324000O확인불가OXX198,000판매처\n[https://smartstore.naver.com/twostarshop/products/3040363406]XO (GPS 가능할 경우)3G,\n4G, GPS 동작필요아이뮤즈컨버터85.18 (800 * 1280)Intel Z3735F232 or 644000O확인불가OXX139,000 or\n159,000판매처 [https://smartstore.naver.com/twostarshop/products/2020329917]XO (GPS\n가능할 경우)3G, 4G, GPS 동작필요, 듀얼 OS라는점이 마음에 걸림.엠피지오ATHENA TAB78.17 (1024 *\n600)Cortex-A7182500O확인불가OXX68,930판매처\n[http://shopping.interpark.com/product/productInfo.do?prdNo=6388246815&dispNo=016001&bizCd=P01397&NaPm=ct%3Dju0s6nuo%7Cci%3Dc903e52f1b23efc37a26260622a3f48ccf53e147%7Ctr%3Dslc%7Csn%3D3%7Chk%3Da57ee35369fce94a328351fc65612edbbf692206&utm_medium=affiliate&utm_source=naver&utm_campaign=shop_p11714_p01397&utm_content=price_comparison]XX\n(RAM 부족)3G, 4G, GPS 동작필요엠피지오ATHENA TAB88.18 (1280 *\n800)MTK81631163600OOOXX98,840\nXX (RAM 부족)3G, 4G 동작필요엠피지오ATHENA Queen7.07.85 (2048 *\n1536)MT81763324900OOOXX198,720\nXO3G, 4G 동작필요엠피지오레전드 N78.17 (1024 * 600)MTK81631162500O확인불가OXX63,000\nXX (RAM 부족)3G, 4G 동작필요엠피지오ATHENA Octa Plus6.010.1 (1280 *\n800)Cortex-A71165000O확인불가OXX132,000\nXX (RAM 부족)3G, 4G 동작필요ZTETrek 2 hd k886.08 (1280 * 800)Snapdragon\n6172164600OOOOO119,000판매처\n[https://smartstore.naver.com/wholesalestore/products/2200880453?NaPm=ct%3Dju0tfb3s%7Cci%3D2814bc46b667e73edafc12f082006b7f3c036a50%7Ctr%3Dslsl%7Csn%3D272741%7Cic%3D%7Chk%3D1beff825fa4dd55464544f70cc98e100d97dfdf8]O\nAS 불가능하다는 에릭의 피드백, 모바일팀에서 실제 단말기 테스트 도중 전원 버튼 불량 경험Teclast98 Octa core 4G6.010.1\n(1920 * 1200)MTK67532324900OOOOO198,000판매처\n[http://beauty.ontheway.co.kr/shop/ProdDetail.php?PMInc=14581703&NaPm=ct%3Dju0tfxhc%7Cci%3D00e66a0eee73a0b4a97e3dff8c4650b285bc6285%7Ctr%3Dslsl%7Csn%3D562305%7Chk%3Dbe942844dbbd9505e64998ac8d36f75a094de434]O\n테스트 결과 ZTE Trek2 대비 버벅임, 단말 동작 테스트 및 버그 디버깅 필요. AS 가능(한국 총판?에서 가능하다고\n표시되어있음)BDFKT1076.010 (1280 * 800)MTK65802165000OOOOO88 USD판매처1\n[https://www.gearbest.com/tablet-pcs/pp_694673.html], 판매처2\n[https://ko.aliexpress.com/item/4-3-Inch-KIDS-Android-Tablets-PC-WiFi-Dual-camera-tab-gift-for-baby-and-kids/32719790879.html?spm=a2g12.search0103.3.1.62c9179fCQcT5h&ws_ab_test=searchweb0_0,searchweb201602_1_10152_10151_10065_10068_10344_10342_10325_10546_10343_10340_10548_10341_10696_10084_10083_10618_10307_10712_10059_100031_10103_10624_10623_10622_10621_10620,searchweb201603_54,ppcSwitch_5&algo_expid=32fcd02f-e154-4522-8af0-76ac009d5d13-0&algo_pvid=32fcd02f-e154-4522-8af0-76ac009d5d13&priceBeautifyAB=0]O\n어떤 제품인지 알려진 정보가 별로없음. AS 어려워 보임.TeclastT207.010.1 (2560 *\n1600)MT6797T4648000OOO확인불가확인불가299,000판매처\n[https://www.coupang.com/vp/products/167775412?isAddedCart=]?O한국사이트에는 미기재. 중국\n사이트에는 된다고 적혀있음.\n(에릭 전화문의 결과 펌웨어 다운받아 설치할 경우 한국에서도 유심 원활히 사용가능하다고 함.)TeclastA10S7.010.1 (1920 *\n1200)MT81632326000OOOXX159,000판매처\n[https://www.coupang.com/vp/products/145902356?isAddedCart=]XO\nTeclastP80 PRO7.08.0 (1920 * 1200)MT81633165300OOOXX\n\n133,900\n\n판매처\n[http://deal.11st.co.kr/product/SellerProductDetail.tmall?method=getSellerProductDetail&prdNo=2087383022]XO\nTeclastM208.010.1 (2560 * 1600)MT67974646350OOOOO160 USD (190,000)판매처\n[https://ko.aliexpress.com/item/10-1-inch-2560-1600-Tablet-PC-Teclast-M20-MT6797-X23-Deca-Core-8-0/32902714934.html?spm=a2g12.search0104.3.9.b4d463c7xeeYGF&transAbTest=ae803_3&ws_ab_test=searchweb0_0%2Csearchweb201602_2_10065_10068_319_10059_10884_317_10887_10696_321_322_10084_453_10083_454_10103_10618_10307_10712_537_536_10713%2Csearchweb201603_35%2CppcSwitch_0&algo_pvid=9c50c8f0-9178-41ba-8496-9868c7de5111&algo_expid=9c50c8f0-9178-41ba-8496-9868c7de5111-1]O\n테클라스트 코리아에서 판매하지 않는것으로 보임. 알리익스프레스 판매.\n리뷰 [https://rgy0409.tistory.com/2930]\nTeclastP10 4G8.110.1 (1280 * 800)MTK67372164850OOOOO104.99 USD (130,000)판매처\n[https://ko.aliexpress.com/item/Teclast-P10-4G-LTE-10-1-Inch-1280-800-Android-8-1-OS-MTK6737-Quad/32954804244.html?spm=a2g12.search0104.3.9.384d675an9An4F&transAbTest=ae803_3&ws_ab_test=searchweb0_0%2Csearchweb201602_2_10065_10068_319_10059_10884_317_10887_10696_321_322_10084_453_10083_454_10103_10618_10307_10712_537_536_10713%2Csearchweb201603_35%2CppcSwitch_0&algo_pvid=c9eea23d-0066-4dec-85af-dc8c92fd020e&algo_expid=c9eea23d-0066-4dec-85af-dc8c92fd020e-1]O\n테클라스트 코리아에서 판매하지 않는것으로 보임. 알리익스프레스 판매.화웨이MediaPad M3 Lite7.08 (1920 *\n1200)MSM89403324800\nOO?O240,000판매처O\n\n화웨이MediaPad M36.08.4 (2560 * 1600)Kirin octa-core processor 4325100OOOOO\n\n\n\n\n화웨이MediaPad T58.010.1 (1920 * 1200)Kirin 6593325100OOOXX268,000\n\n\n\n화웨이M5 10 Lite LTE 32G\n\n\n\n\n\n\n\n\n\n\n375,000\n\n\n\n화웨이MediaPad M5 8.4\n\n\n\n\n\n\n\n\n\n\n378,000\n\n\n\n\n\n\n삼성\n\n\n갤럭시탭A 8.0 LTE (2017) 32G\n\n\n8.1\n\n\n8 (1280 * 800) \n\n\nSNAPDRAGON 425\n\n\n2\n\n\n32\n\n\n5000\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\n205,000\n\n\n판매처\n[https://search.shopping.naver.com/detail/detail.nhn?nv_mid=16952340701&cat_id=50000152&frm=NVSHATC&query=%EA%B0%A4%EB%9F%AD%EC%8B%9C+%ED%83%AD+a+lte&NaPm=ct%3Djwu78rgg%7Cci%3Ddca11e2cb4194e5bce30fbf1c3545128f47b38d0%7Ctr%3Dslsl%7Csn%3D95694%7Chk%3Dc8acdd8631cddffa765e0afe0fc7eb21f288d312]\n\n\nO\n\n\nO\n\n\n\n삼성\n\n\n갤럭시탭A 10.5 LTE (2018) 32G\n\n\n8.1\n\n\n10.5 (1920 * 1200)\n\n\nSNAPDRAGON 450\n\n\n3\n\n\n32\n\n\n7300\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\n328,000\n\n\n판매처\n[https://search.shopping.naver.com/detail/detail.nhn?nv_mid=14979417904&cat_id=50000152&frm=NVSHATC&query=%EA%B0%A4%EB%9F%AD%EC%8B%9C+%ED%83%AD+a+lte&NaPm=ct%3Djwu71gc8%7Cci%3D1d8858439c70fdc8e6aa489921860c640bbf7c92%7Ctr%3Dslsl%7Csn%3D95694%7Chk%3Da370f4df24f0050f7daef59055cc5d1e0df202bf]\n\n\nO\n\n\nO\n\n\n\n삼성\n\n\n갤럭시탭A 10.1 2019 LTE+WIFI (SM-T515)\n\n\n9.0\n\n\n10.1(1920 * 1200)\n\n\n엑시노스 7904\n\n\n3\n\n\n32\n\n\n6150\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\n274,000\n\n\n판매처\n[https://smartstore.naver.com/upsystem5884/products/4537827210?NaPm=ct%3Djwuh9hkg%7Cci%3D7b0c89dab2f3b358fbdd013adbc8aa1867085b98%7Ctr%3Dslsl%7Csn%3D877652%7Cic%3D%7Chk%3D36abc37b7f00fd2d26a206ba442adccd25b5d516]\n\n\nO\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2. 태블릿 제조사\n\n\n1.2.1. TECLAST\n\n1.2.1.1. 공식 홈페이지\n\nhttp://www.teclast.com/en/ [http://www.teclast.com/en/]\n\n1.2.1.2. 태블릿 제품군\n\nhttp://www.teclast.com/en/tablet.html [http://www.teclast.com/en/tablet.html]\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/133333220"
  },
  {
    "pageContent": "[Android] URL\nScheme[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/android.gif?api=v2]\n\n\n\n\n * 작업\n   * 1. AndroidManifest intent filter 설정\n * 기타\n   * 1. 호출 방법\n   * 2. 앱에서 URL Scheme parameter 확인 및 사용\n\n\n\n\n작업\n\n\n1. ANDROIDMANIFEST INTENT FILTER \n[https://developer.android.com/training/basics/intents/filters?hl=ko]설정\n\n연결을 원하는 Activity 에 scheme 설정해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/image-20200317-185033.png?api=v2]\n\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\"/>\n\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n\n    <data android:host=\"test\" android:scheme=\"haulla\" />\n</intent-filter>\n\n\n\n\n기타\n\n\n1. 호출 방법\n\n * 웹에서 호출\n\n<a href=\"haulla://test?token=ABCD\"><h1>테스트</h1></a>\n\n위 방법을 따라하면 외부링크를 통해 앱이 잘 띄워지는 걸 확인할 수 있다.\n\n토큰도 로그에 잘 찍히는걸 확인할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/image-20200317-185109.png?api=v2]\n\n\n2. 앱에서 URL SCHEME PARAMETER 확인 및 사용\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/image-20200317-185132.png?api=v2]\n\nif (Intent.ACTION_VIEW == intent.action) {\n    val uri = intent.data\n    if (uri != null) {\n        val token = uri.getQueryParameter(\"token\")\n        Log.d(\"TEST\", \"token=$token\")\n    }\n\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436601306"
  },
  {
    "pageContent": "[Android] 빌드 환경 이해\n\n자세하게 알고싶으면 https://developer.android.com/studio/build/build-variants?hl=ko\n[https://developer.android.com/studio/build/build-variants?hl=ko] 읽는것이 좋습니다.\n\n\n\n앱을 개발하다 보면, 요구 환경에 따라 구성을 다르게 해줘야 하는 경우가 있다. 이때 안드로이드는 buildTypes +\nproductFlavors 조합을 이용한다.\n\n버전\n\n앱 이름\n\n패키지명\n\nAPI Url\n\n아이콘 이미지\n\nProduction 버전\n\nProduction App\n\ncom.app\n\nhttps//a.com/\n\nicon.png\n\nStage 버전\n\nStage App\n\ncom.app.stage\n\nhttps//test.a.com/\n\nicon.stage.png\n\n\n\n\nBUILDTYPES\n\n * 빌드 모드에 따라 바꿔줘야 하는 설정(난독화, Signing)을 이곳에서 해준다.\n\n * 예\n   \n   * release ↔︎ debug\n\n\nPRODUCTFLAVORS\n\n * 동일한 앱에 여러 버전을 구성할때 사용한다.\n\n * 예\n   \n   * 제공 환경: production ↔︎ stage\n   \n   * 결제 정책: free ↔︎ paid\n   \n   * 배포 환경: oneStore ↔︎ playStore\n\n\nBUILD VARIANT\n\n * 최종적으로 buildType+flavor 형태의 빌드 조합(Build Variant)이 가능해진다.\n\n예시\n\n * stageDebug\n\n * stageRelease\n\n * productionDebug\n\n * productionRelease\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2144272434"
  },
  {
    "pageContent": "[Android] 빌드 환경 별 키 관리\n\n\n[ANDROID] 빌드 환경 이해\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2144272434/Android] 필독\n\n\nANDROIDPROJECT/APP/BUILD.GRADLE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-041120.png?api=v2]\n\n\nPRODUCTFLAVORS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-041601.png?api=v2]\n\n\nMAINACTIVITY\n\npublic class MainActivity extends ReactActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        Log.d(\"log test\", getString(R.string.CodePushDeploymentKey));\n        ...\n    }\n...\n\n\nSTAGEDEBUG 빌드 결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-045737.png?api=v2]\n\n\nSTAGEPRODUCTION 빌드 결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-045727.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2141257766"
  },
  {
    "pageContent": "MVVM\n\n\nFM ANDROID APPLICATION 설계\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/35192856/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8%20(2).png?api=v2]\n\n\n\n\n\nREFERENCES\n\n--------------------------------------------------------------------------------\n\n\nIMPLEMENTING MVVM USING LIVEDATA, RXJAVA, DAGGER ANDROID\n[https://proandroiddev.com/mvvm-architecture-using-livedata-rxjava-and-new-dagger-android-injection-639837b1eb6c]\n\n * Stack: MVVM + LiveData + RxJava2 + Dagger2\n\n\nOFFLINE FIRST ANDROID APP WITH MVVM, DAGGER2, RXJAVA, LIVEDATA AND ROOM\n[https://medium.com/@cdmunoz/offline-first-android-app-with-mvvm-dagger2-rxjava-livedata-and-room-25de4e1ada14]\n\n * Stack: MVVM + LiveData + RxJava2 + Dagger2 + Room + Repository\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35192856"
  },
  {
    "pageContent": "키스토어 & 업로드 키 분실\n\nGoogle에서 앱 서명 키를 관리 및 보호하도록 허용(권장) 사항에 동의했을 경우만 키 복구가 가능합니다.\n\n업로드 키 교체는 구글에 변경 요청 후 2~3 일 정도 소요됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200805-024318.png?api=v2]\n\n\n\n배포된 안드로이드 앱을 업데이트하려면 4가지 정보가 필요합니다. (keystore file, keystore password, key\nalias, key password)\n\n잊어버릴 경우 앱을 새로 올려야 하는 상황이 올 수 있습니다. 주의해서 보관해야 합니다.\n\n\n\n키스토어를 잃어버렸는데, 구글 앱 서명키에 동의했다면\nhttps://support.google.com/googleplay/android-developer/answer/7384423#create\n[https://support.google.com/googleplay/android-developer/answer/7384423#create]\n문서를 따라 하시면 됩니다.\n\n\n1. 키 저장소 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200804-062805.png?api=v2]\n\n * https://developer.android.com/studio/publish/app-signing#generate-key\n   [https://developer.android.com/studio/publish/app-signing#generate-key]\n\n\n2. 업로드 인증서 생성\n\nhttps://developer.android.com/studio/publish/app-signing#register_upload_key\n[https://developer.android.com/studio/publish/app-signing#register_upload_key]\n\n keytool -export -rfc -keystore scale-keystore.jks -alias ecubelabs -file scale-certificatie.pem\n\n\n3. 문의 넣기\n\n문의 넣을때 관리자 계정으로 문의를 넣는것이 좋습니다.\n\nhttps://support.google.com/googleplay/android-developer/contact/otherbugs\n[https://support.google.com/googleplay/android-developer/contact/otherbugs]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200804-063417.png?api=v2]\n\n\n\n * pem 파일을 같이 전달 해야합니다.\n\n * 답변은 하루 정도 소요됩니다.\n\n\n\n\n4. 교체 완료\n\n시간이 지나면 교체 완료 메일이 도착합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200805-024616.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/774045780"
  },
  {
    "pageContent": "FM 단말기 Mobile data 사용 문제\n\n\n1. 상황\n\n--------------------------------------------------------------------------------\n\n고객에게 FM 운전자용 단말기를 제공하게 되었을 경우 모바일 데이터 통신비용을 우리가 지불하게 되는데,\n이때 유저가 이큐브랩의 Application을 사용하는데 있어 불필요한 데이터 통신을 일으키는 사용(유튜브 시청 등)을 할 경우 발생되는 모바일\n데이터 통신 비용이 문제가 될 수 있습니다.\n\n\n2. 원인\n\n--------------------------------------------------------------------------------\n\n 1. 이큐브랩에서 유저의 모바일 데이터 통신 비용을 부담합니다.\n 2. 유저는 착하지 않습니다.\n\n\n3. 대응 가능 방법 후보군\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]폐기된 후보\n\n\n3.1. 안드로이드 디바이스 OEM 의뢰\n\n--------------------------------------------------------------------------------\n\nOEM 전문 제조업체에게 단말기의 제조를 의뢰하는 방법입니다.\n\n\n3.1.1. 예상되는 OEM 요구사항\n\n * 구글플레이스토어앱의 설치가 되어있어야합니다.(구글플레이 서비스를 통한 이큐브랩 Application의 OTA 업데이트를 위해)\n * 구글플레이스토어앱을 유저가 접근할 수 없어야 합니다. (불필요한 어플리케이션 설치 방지 차원)\n * White list에 포함된 Application만이 Internet permission을 가지게 해야합니다.(다른 어플리케이션을 통해\n   모바일 데이터를 사용하는것을 막기 위해)\n * Launcher Application을 사용자가 변경할 수 없도록 해야 합니다.\n\n\n3.1.2. 예상 필요 작업\n\n * Launcher Application 개발\n   (디바이스 부팅시 실행되는 Application)\n\n\n3.1.3. 발생가능한 문제점\n\n * 구글플레이스토어의 접근을 막는것이 가능하더라도 유저가 APK파일을 수동 설치할 수 있습니다.\n * Rooting된 단말기의 경우 위에 명시된 White list를 무시하고 유저가 수동 설치한 Application이 모바일 데이터를 사용할\n   수 있습니다.\n * 사용자가 공장초기화를 하거나 OS 펌웨어를 변경할 경우 모바일데이터의 사용을 막을 방법이 없습니다.\n\n\n3.2. OEM없이 LAUNCHER APPLICATION 개발\n\n--------------------------------------------------------------------------------\n\n디바이스 부팅시 실행되는 Application입니다. 종료되지않는 특성을 가지고 있습니다.\n\n\n3.2.1. 예상 필요 작업\n\n * Launcher Application 개발\n   (디바이스 부팅시 실행되는 Application)\n\nFM APPLICATION자체가 LAUNCHER APPLICATION이 되는 경우\n\n디바이스 부팅시 FM Application이 곧바로 실행되게 됩니다.\n\nFM APPLICATION, LAUNCHER APPLICATION 개별 개발 하는 경우\n\n디바이스 부팅시 Launcher Application이 실행되게 되며, 유저에게 FM Application이 아닌 다른 Application도\n실행할 수 있는 선택지(Shortcut)를 제공할 수 있습니다.\n\n\n3.2.2. 발생가능한 문제점\n\n유저가 런처앱을 변경하는것을 막지 못하므로 다른 Application을 이용하여 불필요한 모바일 데이터 사용이 가능합니다.\n\n\n3.3. CORPORATE-OWNED, SINGLE-USE (COSU) APPLICATION 개발\n\n--------------------------------------------------------------------------------\n\n단말기 자체를 특정 어플리케이션만이 구동되도록 제한하는 방법입니다. 우리 서버에서 원격으로 고객들의 단말기를 관리할 수 있으며 사용자가 단말기를\n임의로 조작할 수 없도록 제한할 수 있습니다.\n\n\n가능한 것\n\n * 사용자가 임의로 단말기의 공장초기화(=리셋)를 하지 못하도록 제한\n * 관리자가 지정한 어플리케이션만 접근할 수 있도록 제한\n * 단말기 부팅시 홈화면, Lock Screen 등 거치지않고 바로 지정 어플리케이션 실행\n * 지정 어플리케이션만 실행되도록 제한 및 사용자가 해당 어플리케이션을 종료하지 못하도록 제한\n * 사용자가 단말기의 설정에 접근할 수 없도록 제한\n * 원격으로 사용자들의 단말기의 설정 변경\n * 단말기 초기 설정방법은 공장초기화후 QR코드 스캔하는것만으로 완료\n * 마켓에 앱이 업데이트 되었을경우 특정시간대에 자동 업데이트 시도하도록 설정\n * 원격으로 단말기 잠금, 재부팅 등 명령\n\n\n단말기 배포 방법\n\n 1. Android 6.0이상이 구동가능한 단말기를 구입합니다.\n\nFOR DEVICES RUNNING ANDROID 7.0 OR ABOVE:\n\n 1. Turn on a new or factory-reset device.\n 2. Tap the same spot on the welcome screen six times to enter QR code mode.\n 3. Connect to a WiFi network.\n 4. Scan the QR code.\n\nFOR DEVICES RUNNING ANDROID 6.0:\n\n 1. Turn on a new or factory-reset device.\n 2. Follow the setup wizard and enter your Wi-Fi details.\n 3. When prompted to sign in, enter afw#setup.\n 4. Tap Next, and then accept the installation of Android Device Policy.\n 5. Scan the QR code.\n\n\n제약사항\n\n단말기의 Android OS version이 '6.0 Marshmallow' 이상이어야 합니다.\n[https://developer.android.com/work/guide#prerequisites]\n\n\n필요사항\n\n단말기 설정, 관리 및 어플리케이션 배포를 위해 Android Management API 사용이 필요합니다.\n\n\n개발 참조\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]참조문서\n\nhttps://developer.android.com/work/cosu\n[https://developer.android.com/work/cosu]\n\nhttps://stackoverflow.com/questions/44828745/how-to-implement-single-application-mode-cosu-in-android\n[https://stackoverflow.com/questions/44828745/how-to-implement-single-application-mode-cosu-in-android]\n\nhttps://codelabs.developers.google.com/codelabs/cosu/index.html?index=..%2F..%2Findex#0\n[https://codelabs.developers.google.com/codelabs/cosu/index.html?index=..%2F..%2Findex#0]\n\nhttps://github.com/googlecodelabs/cosu [https://github.com/googlecodelabs/cosu]\n\n\n4. 하드웨어\n\n--------------------------------------------------------------------------------\n\n\n4.1. 요구사항\n\n--------------------------------------------------------------------------------\n\n\n4.1.1. 필수 기능\n\n * 블루투스\n * GPS\n\n\n4.1.2. 최소 요구사항\n\n램\n\n1GB\n\nCPU\n\n퀄컴 스냅드래곤/4XX 라인업\n\n\n4.1.3. 권장 요구사항\n\n램\n\n2GB\n\nCPU\n\n퀄컴 스냅드래곤/6XX 라인업\n\n\n4.2. 적격 단말\n\n--------------------------------------------------------------------------------\n\n제품명가격(소매가)BrandCPUStorageRAMOSDisplayBattery\n\n구입링크\n\nzte trek 2 hd k8899,000원ZTE퀄컴 스냅드래곤 617 MSM895216GB2GBAndroid 6.0 8.0인치 (1280 x\n800) 4600mAh링크1\n[http://itempage3.auction.co.kr/DetailView.aspx?ItemNo=B551418097&frm3=V2]Teclast\n98 Octa core 4G130,000원TeclastMTK 675332GB 2GB Android 6.0 10.1인치 (1920 x\n1200)4900mAh링크1\n[http://item.gmarket.co.kr/DetailView/Item.asp?goodscode=1453036037&GoodsSale=Y&jaehuid=200001169&NaPm=ct%3Djkhlz5u8%7Cci%3D7b71ca6ce8cb2e27d7d2cbc11f14fa4581aa2452%7Ctr%3Dslsl%7Csn%3D24%7Chk%3D34d9637e7cab6747624775caa486b4114b71e2ad]BDF\ntablet pc\n\n90,500 ~ 113,500원\n\nBDFMTK 658016GB2GB Android 6.0 10인치 (1280 x 800)5000mAh링크1\n[https://ko.aliexpress.com/item/4-3-Inch-KIDS-Android-Tablets-PC-WiFi-Dual-camera-tab-gift-for-baby-and-kids/32719790879.html?spm=a2g12.search0103.3.1.62c9179fCQcT5h&ws_ab_test=searchweb0_0,searchweb201602_1_10152_10151_10065_10068_10344_10342_10325_10546_10343_10340_10548_10341_10696_10084_10083_10618_10307_10712_10059_100031_10103_10624_10623_10622_10621_10620,searchweb201603_54,ppcSwitch_5&algo_expid=32fcd02f-e154-4522-8af0-76ac009d5d13-0&algo_pvid=32fcd02f-e154-4522-8af0-76ac009d5d13&priceBeautifyAB=0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2.1. ZTE TREK 2 HD K88\n\n\n4.2.2. TECLAST 98 OCTA CORE 4G\n\n원래 목표였던.. '공장초기화 혹은 신제품 부팅시 설정'에서 진입해야하는것이 불가능함을 확인했습니다.\n이 제품으로 가능한 방법에는\n\n * 커스텀 롬을 씌우는 방법\n\n * 서드파티 EMM 솔루션을 사용하는 방법\n\n이 있겠습니다.\n\n각 방법 구현에는 리서치가 필요하겠지만, 우선 각 예상되는 단점으로는\n\n커스텀롬의 경우 모든 단말기에 커스텀롬을 배포하는 단계가 추가되어야합니다.\n\n서드파티 EMM 솔루션을 사용하는 방법은 Android Management API를 사용하는것이아닌, EMM API를 사용하는것이며, 하나의\n단말기를 설정하는 절차가 꽤 길것으로 보입니다. 숙달되면 약 5 ~ 10분으로 단축할 수 있을것으로 기대하고있습니다.\n\n우선 현재 아직 배송이 오지않은 ZTE사의 단말기가 공장초기화시 초기설정 진입이 가능하기를 기대하고있으며, 가능할경우\n\n * 직접 QR코드 생성하여 배포\n\n * 서드파티 솔루션으로 QR코드 생성하여 배포\n\n위 2가지 방법이 가능하겠습니다.\n\n다만 솔루션 이용시 subscription방식으로 결제를 해야하며, 단말기 1개당 월 3 ~ 7USD 정도의 비용이 들것으로 예상됩니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/52724289"
  },
  {
    "pageContent": "Minimum support OS version\n\n\n선택지\n\nAndroid 앱 개발시 지원할 플랫폼의 최소 버전을 선택해야하며 크게는 아래 3가지 경우가 있습니다.\n\n\nAPI LEVEL 16\n\n * 이름 : 젤리빈\n * 출시일 : 2012년 06월 28일\n * 마켓쉐어 : 4%\n\n\nAPI LEVEL 19\n\n * 이름 : 킷캣\n * 출시일 : 2013년 10월 31일\n * 마켓쉐어 : 10.3%\n\n\nAPI LEVEL 21\n\n * 이름 : 롤리팝\n * 출시일 : 2014년 10월 16일\n * 마켓쉐어: 85%\n\n--------------------------------------------------------------------------------\n\n\nMARKET SHARE\n\n * https://www.statista.com/statistics/271774/share-of-android-platforms-on-mobile-devices-with-android-os/\n   [https://www.statista.com/statistics/271774/share-of-android-platforms-on-mobile-devices-with-android-os/]\n * https://developer.android.com/about/dashboards/?hl=ko\n   [https://developer.android.com/about/dashboards/?hl=ko]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/51281921/dkjdsldsldsl.PNG?api=v2]\n\n\nCCN ANDROID 유저 통계\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/51281921/djksfjlkdsldsl.PNG?api=v2]\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n선택\n\nAPI Level 19부터 지원하는걸로..",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51281921"
  },
  {
    "pageContent": "개발환경\n\n\nJIMMY 데스크탑 (회사)\n\n--------------------------------------------------------------------------------\n\n\nANDROID DEBUG\n\n * MD5: 41:98:42:8B:12:E6:D4:42:06:51:7C:54:B3:BC:21:D0\n * SHA1: 13:E0:FF:A9:1D:90:BA:B1:30:8D:1C:8C:A8:BF:E9:D4:28:89:7A:82\n * SHA256:\n   D6:FF:B3:34:6E:73:CF:D8:9B:2B:AB:70:A7:19:8B:D3:EA:BE:2A:6B:B4:D6:AE:C5:97:F8:4A:82:7E:1E:A2:F0\n\n\nANDROID RELEASE\n\n\nCCN\n\n * MD5: A6:F6:F7:60:F0:BB:32:63:07:A0:A5:96:08:BE:76:61\n * SHA1: 94:F0:4D:15:64:80:2A:45:57:2A:47:62:D6:60:AB:F1:BD:85:F8:F7\n * SHA256:\n   03:E3:C5:9D:C2:46:32:9E:59:42:6F:FF:A5:8C:F0:12:5A:9B:4E:FE:53:CE:06:41:75:23:C6:94:C2:08:DA:5D",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35160092"
  },
  {
    "pageContent": "위치 정보\n\n참조\n\n--------------------------------------------------------------------------------\n\nhttps://developer.android.com/guide/topics/location/battery?hl=ko\n[https://developer.android.com/guide/topics/location/battery?hl=ko]\n\n\nANDROID 8.0 (API LEVEL 26) 변경점\n\n--------------------------------------------------------------------------------\n\n * Background location gathering is throttled and location is computed, and\n   delivered only a few times an hour.\n * Wi-Fi scans are more conservative, and location updates aren't computed when\n   the device stays connected to the same static access point.\n * Geofencing responsiveness changes from tens of seconds to approximately two\n   minutes. This change noticeably improves battery performance—up to 10 times\n   better on some devices.\n\n\n주요 변경점\n\n--------------------------------------------------------------------------------\n\n백그라운드에서 더이상 위치정보를 실시간으로 수집할 수 없습니다.\n\n\n전원 소모 주요 원인\n\n--------------------------------------------------------------------------------\n\n * Accuracy: The precision of the location data. In general, the higher the\n   accuracy, the higher the battery drain.\n * Frequency: How often location is computed. The more frequent location is\n   computed, the more battery is used.\n * Latency: How quickly location data is delivered. Less latency usually\n   requires more battery.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27295761"
  },
  {
    "pageContent": "SMS\n\n\nSMS 파싱 이슈\n\n--------------------------------------------------------------------------------\n\n2019년 1월 9일 시행된 정책으로, SMS 파싱이 크게 제한되었습니다. 이제 SMS 파싱은 원칙적으로 안드로이드에서 제공하는 SMS\nRetriever API [https://developers.google.com/identity/sms-retriever/overview] 를\n통해서만 가능해졌습니다.\n\n\n관련 링크\n\n * https://proandroiddev.com/no-more-sms-call-log-permissions-now-what-9b8226de7827\n   [https://proandroiddev.com/no-more-sms-call-log-permissions-now-what-9b8226de7827]\n * https://developers.google.com/identity/sms-retriever/overview\n   [https://developers.google.com/identity/sms-retriever/overview]\n * https://play.google.com/about/privacy-security-deception/permissions/\n   [https://play.google.com/about/privacy-security-deception/permissions/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/125567580"
  },
  {
    "pageContent": "권한\n\n안드로이드 클라이언트 프로그램은 특정 기능을 수행하기 위해서는 권한이 필요하고, 때에 따라 유저에게 이를 요청해야합니다.\n\n\n마시멜로우(6.0) 이전\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/165052966/image2019-6-17_17-44-33.png?api=v2]\n\n앱이 설치되기직전에 안드로이드 OS단에서 권한을 유저에게 요청하게됩니다. 이 권한이 승인되지 않을경우 앱은 설치되지 않습니다. 앱이 설치될경우\n이후로는 권한을 취소할 수 없습니다.\n\n앱이 설치된 이후로는 앱이 필요한 모든 권한이 있다고 간주해도됩니다.\n\n\n마시멜로우(6.0)및 그 이후\n\n앱이 설치되기전에 권한을 요청하지 않습니다. 앱이 실행중일때 권한을 요청하게 됩니다. 권한을 요청하는 위치나 순서는 개발자가 결정할 수\n있습니다.\n\n권한을 유저가 거부할 경우 해당 권한이 필요한 기능을 수행할 수 없습니다.\n\n유저는 이 권한을 승인한뒤에도 언제든지 기기 설정에서 이 권한 승인을 취소할 수 있습니다. 이 경우 해당 앱은 다시 그 권한이 승인되기 이전까지\n해당 권한이 필요한 기능을 수행할 수 없습니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165052966"
  },
  {
    "pageContent": "네비게이션\n\n\n경로 노드\n\n--------------------------------------------------------------------------------\n\n\n수정\n\n--------------------------------------------------------------------------------\n\n\n기존 업로드된 이미지의 표시\n\n--------------------------------------------------------------------------------\n\n[/wiki/download/attachments/125633047/Untitled%20Diagram.drawio.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/125633047"
  },
  {
    "pageContent": "LTE 주파수 대역\n\n\nDISCLAIMER\n\n이 문서에서 사용한 데이터 소스는 다음과 같습니다. 틀린 정보일 수 있습니다.\n\n * https://www.gsmarena.com [https://www.gsmarena.com/]\n * https://www.frequencycheck.com [https://www.frequencycheck.com/]\n\n\nLTE 주파수 대역 목록\n\nhttp://niviuk.free.fr/lte_band.php [http://niviuk.free.fr/lte_band.php]\n\n\n\n\n\n통신사\n\n--------------------------------------------------------------------------------\n\n\nAT&T\n\nhttps://www.frequencycheck.com/carriers/at-t-united-states\n[https://www.frequencycheck.com/carriers/at-t-united-states]\n\n\nLTE 주파수 대역\n\n * B2 (1900 PCS)\n * B4 (1700/2100 AWS 1)\n * B17 (700 bc)\n * B30 (2300 WCS)\n\n\nVERIZON\n\nhttps://www.frequencycheck.com/carriers/verizon-wireless-united-states\n[https://www.frequencycheck.com/carriers/verizon-wireless-united-states]\n\n\n주의사항\n\nThis carrier only accepts approved devices on its network.\nEven if a device supports some or all of the required frequencies for this\ncarrier, it will not be able to connect unless the device is approved for this\nnetwork. Check with the network operator to confirm whether a device is approved\nor not.\n\n\nT-MOBILE\n\nhttps://www.frequencycheck.com/carriers/t-mobile-united-states\n[https://www.frequencycheck.com/carriers/t-mobile-united-states]\n\n\nLTE 주파수 대역\n\n * B2 (1900 PCS)\n * B4 (1700/2100 AWS 1)\n * B12 (700 ac)\n * B66 (1700/2100)\n * B71 (600)\n   \n   \n\n\n태블릿\n\n--------------------------------------------------------------------------------\n\n\nHUAWEI MEDIAPAD T5\n\n\n지원 주파수 대역\n\nLTE band 1(2100), 3(1800), 5(850), 7(2600), 8(900), 20(800)\n\n참조 [https://www.gsmarena.com/huawei_mediapad_t5-9412.php]\n\n\n\n\n\nSAMSUNG GALAXY TAB A 10.5 (SM-T595)\n\n\n지원 주파수 대역\n\nLTE band 1(2100), 2(1900), 3(1800), 4(1700/2100), 5(850), 7(2600), 8(900),\n12(700), 17(700), 20(800), 28(700), 38(2600), 40(2300), 66(1700/2100)\n\n참조 [https://www.gsmarena.com/samsung_galaxy_tab_a_10_5-9263.php]\n\n\nSAMSUNG GALAXY TAB A 8.0 (2018) (SM-T387V (VERIZON))\n\n참조 [https://www.gsmarena.com/samsung_galaxy_tab_a_8_0_(2018)-9665.php]\n\n\n3G BANDS\n\nHSDPA 850 / 900 / 1900 / 2100 - Verizon\n\n\n4G BANDS\n\nLTE band 2(1900), 3(1800), 4(1700/2100), 5(850), 7(2600), 13(700) - Verizon\n\n\n\n\n\n통신사 & 태블릿 LTE 주파수 대역 호환\n\n--------------------------------------------------------------------------------\n\n주파수 대역/태블릿\n\nSM-T387V\n\nSM-T595TB-8704VAT&T - B2 (1900 PCS)OOOAT&T - B4 (1700/2100 AWS 1)OOOAT&T - B17\n(700 bc)\nO\nAT&T - B30 (2300 WCS)\n\n\nVerizon - B2 (1900 PCS)OOOVerizon - B4 (1700/2100 AWS 1)OOOVerizon - B13 (700\nc)O\n\nT-Mobile - B2 (1900 PCS)OOOT-Mobile - B4 (1700/2100 AWS 1)OOOT-Mobile - B12 (700\nac)\nO\nT-Mobile - B66 (1700/2100)\nO\nT-Mobile - B71 (600)\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/172261775"
  },
  {
    "pageContent": "API 호출",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/184582433"
  },
  {
    "pageContent": "User Agent\n\nCustom user agent 로 앱, 기기 식별이 가능해야 한다.\n\nCustom user agent 설정이 불가능한 http client 는 사용하면 안된다.\n\n\n\n\n\n\n * 형식\n   * Android\n   * iOS\n * 사례\n\n\n\n\n\n\n\n형식\n\n\nANDROID\n\n<app id>/<app version name>:<app version code> (Linux; U; Android <android version code>; Android API <android sdk version code>; <support abi>; <manufacturer> <device model name>; Build/<os build name>)\n\nex) com.ecubelabs.fm/1.1.14-beta:26\n[http://com.ecubelabs.fm/1.1.14-beta:26] (Linux; U; Android 9; Android API 28;\narm64-v8a; Google PixelXL; Build/PQ3A.190505.001)\n\n\nIOS\n\n<app id>/<app version name>:<app version code> (iOS <iOS version code>; <support abi>; <manufacturer> <device model name>; Build/<os build name>)\n\nex) org.reactjs.native.example.haulla/1.0.1:1 (iOS 12.4; Intel x86-64h Haswell;\nApple iPhone X; Build/18G84)\n\n\n사례\n\nAppUser Agent파파고aceApps (Android OS 9; samsung SM-G975N; papago_android;\n1.4.3)니코동Niconico/1.0 (Linux, U; Android 9; ja-jp; nicoandroid SM-G975N)\nVersion/5.09.0구글홈com.google.android.apps.chromecast.app/2.10.1.13 (Linux; U;\nAndroid 9; SM-G975N Build/PPR1.180610.011)메가박스Dalvik/2.1.0 (Linux; U; Android 9;\nSM-G975N Build/PPR1.180610.011)\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/184778986"
  },
  {
    "pageContent": "모바일 앱 버전 관리\n\n\n버전 형식\n\nx.y.z 형식\n\n * x: major. 사업팀 요구가 있을 때 변경한다. 신규 프로젝트는 모두 1로 설정하고 기존 프로젝트는 기존 major 를 유지한다.\n\n * y: year - 2020\n\n * z: week number\n\nex) 2021.01.13 에 배포를 해야 하는 경우 버전은 1.1.3\n\n\n\n * Q. 같은 주에 배포를 여러번 해야 하면?\n\n * A. build number 만 올린다.\n\n\n\n * Q. 왜 이렇게 하나?\n\n * A. 모바일 앱 특성상 여러개의 작업을 모아서 배포하기 때문에 semantic versioning 을 따르기도 힘들고 지금까지 경험으로 앱\n   개발 초기를 제외하면 한 주에 여러번 배포하는 일은 없었다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1150189733"
  },
  {
    "pageContent": "모바일앱 배포 절차\n * 1. 업데이트 브랜치 생성\n * 2. 프로젝트 버전 업데이트\n * 3. PR 제출\n * 4. 앱 업로드 및 심사 제출\n\n\n1. 업데이트 브랜치 생성\n\nmain 기준으로 업데이트 브랜치를 새로 만든다. (예: MP-4556)\n\n상황에 따라 작업중이던 브랜치를 그대로 사용하는 경우도 있다. (hotfix 처럼 머지 후 바로 배포 하는 경우)\n\n\n2. 프로젝트 버전 업데이트\n\n업데이트 명령어를 터미널에 입력한다. \n\n// major 버전 업데이트 경우\nnpm version major\n\n// minor 버전 업데이트 경우\nnpm version minor\n\n// patch 버전 업데이트 경우\nnpm version patch\n\nmajor, minor, patch  중 무엇을 업데이트해야 하는지 모른다면  김일두(Charlie)\n[http://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 물어본다. \n\n대부분 patch 버전을 업데이트 하면 된다.\n\n\n3. PR 제출\n\n예시: https://github.com/Ecube-Labs/haulla-mobile/pull/753/files\n[https://github.com/Ecube-Labs/haulla-mobile/pull/753/files]\n\n\n4. 앱 업로드 및 심사 제출\n\nPR이 완료되면 아래 문서를 참고해 앱을 업로드하고, 심사 요청을 넣는다. 만약 배포 권한이 없다면 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 문의한다.\n\n애플 앱스토어 배포 [http://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224133169]\n\n구글 플레이스토어 배포 [http://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1947795474]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1948319760"
  },
  {
    "pageContent": "애플 앱스토어 배포\n\n \n\n * 1. 배포 브랜치로 체크아웃\n * 2. 타겟 디바이스 지정\n * 3. Archive\n * 4. Upload App\n * 5. 배포 버전 생성\n * 6. 심사 요청\n * 7. 리젝 당한 경우 재심사 요청\n\n\n1. 배포 브랜치로 체크아웃\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.07.44%E2%80%AFPM.png?api=v2]\n\nPR 완료 후 배포하므로 주로 메인 브랜치일 것이다. 현재 어디 브랜치에 있는지는 xcode 상단에서도 확인이 가능하다.\n\n\n2. 타겟 디바이스 지정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.06.31%E2%80%AFPM.png?api=v2]\n\n타겟 디바이스를 Any iOS Device (arm64) 로 지정한다.\nAny iOS Simulator Device (x86_64)는 이름에서도 알 수 있듯이 simulator용이다\n\n\n3. ARCHIVE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.11.16%E2%80%AFPM.png?api=v2]\n\n * Product > Archive\n\n * 오래 걸릴 수도 있다\n\n\n4. UPLOAD APP\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.11.59%E2%80%AFPM.png?api=v2]\n\n * Archive 가 완료되면 위와 같은 창이 뜬다.\n\n * 버전을 확인하고 Distribute App 클릭.\n   \n   * 이름이 왜 Distribute 인지 모르겠다.\n   \n   * 이걸 눌러도 앱이 앱스토어에 배포 되는게 아니고 App Store Connect 에 업로드 되므로 안심하고 눌러도 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.12.34%E2%80%AFPM.png?api=v2]\n\n * Default로 선택되어 있는 TestFlight & App Store 옵션으로 Distribute를 눌러준다.\n\n\n\n * 업로드 후 App Store Connect 에 뜰 때 까지 오래 걸린다. (~30분)\n\n * App Store Connect 에 준비가 되면 애플에서 메일이 온다.\n\n\n5. 배포 버전 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20210108-105650.png?api=v2]\n\n * App Store Connect [https://appstoreconnect.apple.com/] 에서 앱에 들어가면 왼쪽 상단 iOS\n   App 오른쪽에 (더하기)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n   아이콘이 보인다.\n\n * (더하기)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n   버튼을 눌러서 배포하려는 앱 버전을 추가한다.\n\n * 추가할 앱 버전은 Xcode 에 있는 버전과 같아야 한다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20210108-105855.png?api=v2]\n\n * (더하기)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/add.png]\n   아이콘이 보이지 않으면 아마 심사중인 상태일 것. 심사가 진행중일 때 추가로 심사를 요청할 수 없다.\n\n\n6. 심사 요청\n\n * What's New in This Version\n   \n   * 새로운 버전에 포함된 내용. 반드시 작성해야 한다.\n\n * Build\n   \n   * 4에서 업로드 한 바이너리를 선택하면 된다.\n   \n   * 나머지는 이전 버전과 동일하게 설정되므로 변경 사항이 있을때만 수정해주면 된다.\n\n\n7. 리젝 당한 경우 재심사 요청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20201231-062534.png?api=v2]\n\n앱 바이너리에 마우스를 올려보면 위와 같이 (빼기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/forbidden.png]\n아이콘이 나타난다.\n\n(빼기)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/forbidden.png]\n를 클릭해서 리젝당한 바이너리를 제거.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20201231-062628.png?api=v2]\n\n문제점을 수정한 바이너리를 선택하자.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20201231-062733.png?api=v2]\n\n우측의 Save 를 누르면 심사 상태가 Rejected → Prepare for Submission 으로 바뀌었고 Submit for\nReview 버튼이 활성화 된 것을 볼 수 있다.\n\nSubmit for Review 를 눌러서 재심사 요청.\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224133169"
  },
  {
    "pageContent": "구글 플레이스토어 업데이트\n\n \n\n * 1. 배포 브랜치로 체크아웃\n * 2. AAB 파일 생성\n * 3. 플레이스토어 콘솔에 접속\n * 4. 업데이트 하고자하는 앱 선택\n * 5. Production 메뉴 선택\n * 6. 새로운 버전 생성\n * 7. AAB or APK 파일 업로드\n * 8. Release 정보 입력\n * 7. 리뷰 버튼 클릭\n * 8. 심사 제출\n * 8. 심사 상태 확인\n\n스토어 정보(앱 이름, 설명, 스크린샷)만 업데이트 하는 경우 새로운 버전을 꼭 업로드 하지 않아도 됩니다.\n\n\n1. 배포 브랜치로 체크아웃\n\nPR 완료 후 배포하므로 주로 메인 브랜치일 것이다.\n\n\n2. AAB 파일 생성\n\n아래 문서를 참고해 AAB 파일을 생성한다.\n\n[H][M][배포] 안드로이드 APK, AAB 파일 빌드\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/298549959/H+M+APK+AAB]\n\n\n3. 플레이스토어 콘솔에 접속\n\nhttps://play.google.com/console/ [https://play.google.com/console/]\n\n\n4. 업데이트 하고자하는 앱 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051458.png?api=v2]\n\n\n5. PRODUCTION 메뉴 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051531.png?api=v2]\n\n\n6. 새로운 버전 생성\n\nCreate new release 버튼을 눌러서 새로운 버전을 생성한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051553.png?api=v2]\n\n\n\n\n7. AAB OR APK 파일 업로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051713.png?api=v2]\n\n\n8. RELEASE 정보 입력\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083127.png?api=v2]\n\n\n\n항목\n\n설명\n\n비고\n\nRelease name\n\n1.0.1 과 같이 스토어에 표시되는 앱 버전\n\n가만히 있으면 업로드 파일을 분석해 자동으로 기입된다. 따로 건들지 말자.\n\nRelease note\n\n업데이트 내용\n\n다른 요청이 없다면 아래 내용을 복사한다.\n\n<en-US>\nBug fixes and performance improvements.\n</en-US>\n<ko-KR>\n서비스 개선 및 안정화\n</ko-KR>\n\n\n7. 리뷰 버튼 클릭\n\nSave 버튼과 Review release 버튼을 차레대로 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083143.png?api=v2]\n\n\n\n\n8. 심사 제출\n\nStart rollout to Production 버튼을 눌러 심사 제출한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083218.png?api=v2]\n\n\n\n\n8. 심사 상태 확인\n\nUpdate status 가 In review 상태로 바뀐것을 확인한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083444.png?api=v2]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1947795474"
  },
  {
    "pageContent": "Slow query 확인\n * 로그 확인: CloudWatch slow query logs\n * 쿼리 점검: Explain ...\n * 개선\n   * Index\n     * Key\n     * 조건문 확인\n\n일반적으로 slowquery 확인 후 optimizer피셜 쿼리 성능검사 후 성능 개선 순으로 진행한다.\n\n\n로그 확인: CLOUDWATCH SLOW QUERY LOGS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3015934024/Screenshot%202024-05-24%20at%2011.04.58%E2%80%AFAM.png?api=v2]\n\nAWS의 CloudWatch / Logs / Log groups 에서 slowquery키워드로 검색하면 클러스터별 slowquery에 대한\n기록을 확인할 수 있다.\n\nRDS for slow query log\n[https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.MySQL.LogFileSize.html#USER_LogAccess.MySQL.Generallog]\n\n\n쿼리 점검: EXPLAIN ...\n\nMySQL에서 Explain문을 사용해서 실행하고자 하는 쿼리가 어떤 식으로 돌아갈 지 짐작할 수 있다. 다만, 무조건 Explain문의 결과와\n같이 실행되는 건 아니고, 내장 optimizer에 의해 추정된 결과이다.\n\nhttps://dev.mysql.com/doc/refman/8.0/en/using-explain.html\n[https://dev.mysql.com/doc/refman/8.0/en/using-explain.html]\n\n\n\n\n개선\n\n\nINDEX\n\n개선 가능성이 있는 부분은 일반적으로 Index와 관련된 경우가 많다.\n\nIndex를 통한 성능 개선 예시\n\n2024-04-12\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2967011406/2024-04-12]\n\nSlow Query 개선기\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query]\n\n\nKEY\n\n대표적으로 조건절에 사용하는 column이 key로 생성되어있지 않아서 index를 못타고 풀스캔을 하는 경우가 많다.\n\n\n조건문 확인\n\nindex를 사용한 검색은 binary search를 이용하는데, binary search의 특성상 특정 조건들은 index를 태우기가 어렵다.\n\nIN vs NOT IN\n\nkey로 설정되어있는 column이더라도 IN구문이 NOT IN구문 보다 index를 탈 확률이 높다.\n\nhttps://stackoverflow.com/questions/16891668/sql-in-vs-not-in\n[https://stackoverflow.com/questions/16891668/sql-in-vs-not-in]\n\nUNION instead of OR statement\n\n테이블 조인 시 사용되는 조건으로 OR을 사용하면 테이블을 풀스캔 한다. OR을 UNION으로 바꿔서 사용하면 쿼리문은 좀 복잡해질지언정\nindex를 태울 수 있다.\n\nhttps://towardsdatascience.com/why-you-should-stop-using-or-in-sql-joins-right-now-d5b6e83464cf\n[https://towardsdatascience.com/why-you-should-stop-using-or-in-sql-joins-right-now-d5b6e83464cf]\n\nhttps://stackoverflow.com/questions/19725014/sql-server-left-join-with-or-operator\n[https://stackoverflow.com/questions/19725014/sql-server-left-join-with-or-operator]\n\nhttps://dba.stackexchange.com/questions/227238/speed-up-left-join-with-or-operator-in-on-clause\n[https://dba.stackexchange.com/questions/227238/speed-up-left-join-with-or-operator-in-on-clause]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3015934024"
  },
  {
    "pageContent": "쿼리 작성 가이드\n\n어플리케이션에서 실행하는 adhoc 쿼리가 아닌 운영하면서 데이터를 변경하기 위한 쿼리\n\n * 0. Sample query\n * 1. PK 혹은 인덱스로 업데이트 한다.\n * 2. Audit column 이 있는 경우 근거를 남겨둔다.\n\n\n0. SAMPLE QUERY\n\nUPDATE haulla.city\nSET lateFeeRate = 5,\n    updatedBy   = 'MP-6993',\n    updatedAt   = CURRENT_TIMESTAMP\nWHERE id = 24;\n\n\n1. PK 혹은 인덱스로 업데이트 한다.\n\n그렇지 않으면 테이블 락 발생할 수 있음\n\n\n2. AUDIT COLUMN 이 있는 경우 근거를 남겨둔다.\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Audit-Columns\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Audit-Columns]\n\nsample 에서 updatedBy, updatedAt 에 해당",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2905145351"
  },
  {
    "pageContent": "DB schema 무중단 업데이트\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]검색용 키워드\n\n * 다운타임\n\n * 무중단\n\n * DB 스키마 마이그레이션\n\n * DB schema migration\n\n * 스키마 업데이트\n\n * 스키마 변경\n\n * 스키마 수정\n\n * online DLL\n\n * percona-toolkit\n\n * pt-online-schema-change\n\n * gh-ost\n\n\n개요\n\nDB 스키마를 운영 환경에서 실제로 변경하고자 할 땐 어떻게 해야 할까요? 서비스를 잠시 중단하고 할 수 있다면 별 문제가 없지만 우리는\n다운타임 없이 스키마를 변경해야 합니다. 왜냐면\n\n * 수천~수만대의 활성화된 기기가 통신하고 있습니다. 현재 우리 서버는 DB가 사용 불가하면 기기에 적절한 응답을 할 수 없는 구조이고 기기는\n   통신을 계속 재시도하면서 배터리를 크게 소모합니다.\n\n * 현재 정립된 ‘서버 점검’ 절차가 없습니다. (고객에게 미리 통보, 점검을 알리는 페이지 등)\n\n다운타임 없이 DB 스키마를 변경하는 방법을 알아봅시다.\n\n\nSTEP-BY-STEP 가이드\n\n\n내가 실행하고자 하는 DDL [https://cbw1030.tistory.com/71]이 ONLINE DDL인가?\n\n참고 1: MySQL 5.6\n[https://dev.mysql.com/doc/refman/5.6/en/innodb-online-ddl-operations.html] 참고\n2: MySQL 5.7\n[https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html]\n\nMySQL 5.6부터는 online DDL을 지원합니다. 테이블 스키마를 수정하는 동안 DML(insert, update, delete)가\n가능한 것입니다. 하지만 모든 DDL이 지원되는 것은 아닙니다. operation 마다 조금씩 다릅니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/745505248/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-07-24%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.34.05.png?api=v2]\n\n위 이미지는 Column Operation들의 online DDL 지원 여부를 나타내는 표입니다(위 ‘참고’ 링크에서 볼 수 있음). 컬럼\n데이터 타입을 변경하는 경우 5.6 이전과 동일하게 동작합니다. 그냥 alter table … 쿼리를 날리면 테이블 수정이 완료되기까지 억겁의\n시간동안 기다려야 하고 그동안 그 테이블은 insert, update, delete가 안 됩니다. 미친듯이 쏟아지는 에러 메시지를 받게 될\n것입니다..\n\n\nSTAGE 환경에서 시험해보기\n\nonline DDL이 지원되는 DDL이라고 해서 운영에 전혀 영향을 안 미치지는 않습니다. 수 초 ~ 수십 초 가량의 높은 부하와 그에 따른\n장애가 있을 수 있습니다. production 환경에서 저지르기 전에 stage 환경에서 먼저 해봅시다.\n\n\n너무 느리면\n\n다운타임이 예상된다면 고전적인 방법을 사용하는 수밖에 없습니다.\n\n 1. dump & change schema: 새 스키마로 빈 테이블을 생성하고 데이터를 새 테이블에 옮긴다. 또는 테이블을 복제한 후 스키마를\n    바꾼다.\n\n 2. sync: 구 테이블의 데이터의 변경사항을 실시간으로 새 테이블에도 반영한다.\n\n 3. replace: 두 테이블의 데이터가 완전히 동기화되면 새 테이블로 구 테이블을 교체한다.\n\n하지만 이걸 직접 하거나 스크립트를 짜는 과정은 매우 번거롭고 예상하기 어려운 문제도 많습니다.\n\n다행히도, 이런 절차를 자동화해주는 소프트웨어가 여럿 있습니다.\n\npercona의 percona-toolkit에 포함된 pt-online-schema-change가 유명하지만 비교적 나중에 등장한 GitHub의\ngh-ost [https://github.com/github/gh-ost]가 여러 설계상 이점이 있어서 더 좋아 보입니다. Trigger 대신\nbinlog를 사용한다는 점에서 좀 더 안정적일 거라고 기대가 됩니다. (gh-ost에 대한 포스트\n[https://m.blog.naver.com/sory1008/221131621433])\n\n\nGH-OST 가이드\n\nTODO\n\nAWS RDS에서는 확인할 게 많다. → 참고\n[https://github.com/github/gh-ost/blob/master/doc/rds.md]\n\n\nPT-ONLINE-SCHEMA-CHANGE\n\n→ [DB] pt-online-schema-change 가이드\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/964198492/DB+pt-online-schema-change]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/745505248"
  },
  {
    "pageContent": "[DB] Index convention\n\n\nNAMING\n\n인덱스 이름은 아래의 양식을 따른다.\n\n\nINDEX KEY\n\n * 단일 인덱스 (Single index): IX_{Source Table}_{Source Column}\n\n * 복합 인덱스 (Composite index): IX_{Soruce Table}_{Source Column1}_{Source\n   Column2}_...\n\n\nFOREIGN KEY\n\n * FK_{Referencing table}_{Referenced table}\n\n\nINDEX COLUMN ORDER\n\n인덱스 순서는 성능에 영향을 미치기 때문에 아무렇게나 지정하면 안된다.\n\nCardinality가 높은 순으로 컬럼을 둬야 비교적 안정적인 퍼포먼스를 보여준다.\n그렇지 않은 경우 엄청난 성능 저하가 발생할 수 있다.\n\n참고: https://github.com/Ecube-Labs/db-schema/pull/98#discussion_r703267040\n[https://github.com/Ecube-Labs/db-schema/pull/98#discussion_r703267040]\n\n만약 기존 테이블에 인덱스를 추가하려고 한다면 How to start pt-online-schema-change\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2151448592/How+to+start+pt-online-schema-change]\n를 사용해야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/866123786"
  },
  {
    "pageContent": "[DB] Column convention\n\n\nPK의 이름은 ID 로 한다.\n\n반복되는 단어는 넣지 않는다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDo\n\nCREATE TABLE `voltage` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT,\n  ...\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nDon’t\n\nCREATE TABLE `voltage` (\n  `voltageId` bigint unsigned NOT NULL AUTO_INCREMENT,\n  ...\n\n\nTRANSACTION ID를 넣는 컬럼의 길이는 36이 아닌 72로 한다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDo\n\n`created_by` varchar(72) NOT NULL\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nDon’t\n\n`created_by` varchar(36) NOT NULL\n\n참고: https://github.com/Ecube-Labs/db-schema/pull/50#discussion_r489196699\n[https://github.com/Ecube-Labs/db-schema/pull/50#discussion_r489196699]\n\n\nDATE만 저장하는 컬럼의 타입은 DATE가 아닌 DATETIME으로 통일한다.\n\n값은 사용자의 타임존을 반영한 UTC를 기준으로 저장한다.\nex) 2021-01-01 12:30:00(KST) → 2021-01-01 03:30:00(UTC)\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\nDo\n\n`joinedAt` DATETIME NOT NUL\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\nDon’t\n\n`joinedAt` DATE NOT NULL\n`joinedAt` TIMESTAMP NOT NULL\n\n참고: https://github.com/Ecube-Labs/db-schema/pull/82#discussion_r629011525\n[https://github.com/Ecube-Labs/db-schema/pull/82#discussion_r629011525]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/880279900"
  },
  {
    "pageContent": "Transaction\n\nhttps://nesoy.github.io/articles/2018-06/DDD-Transcation\n[https://nesoy.github.io/articles/2018-06/DDD-Transcation]\n\n\n\nSQL 트랜잭션 - 믿는 도끼에 발등 찍힌다\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/175964416/SQL+-]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/236879899"
  },
  {
    "pageContent": "MySQL\n\n\nMYSQL CLIENT MODULES\n\nNode.js에서 MySQL client로 사용되는 모듈은 몇 가지가 있습니다. TypeORM 등 ORM을 사용하는 경우 직접적으로 사용할 일은\n없지만 드라이버로 사용되는 모듈이 동작하는 방식이나 자세한 옵션을 알아둘 필요가 있습니다.\n\n\nMYSQL [https://github.com/mysqljs/mysql] (NODE-MYSQL)\n\n가장 널리 쓰입니다. TypeORM 등 다른 라이브러리들도 이 모듈을 MySQL 드라이버로 사용합니다.\n직접 사용할 경우 문서를 꼼꼼히 모두 읽어보는 것을 권장합니다. DB 관련 지식을 요합니다. 그렇지 않으면 문제 발생 시 디버깅하기 어렵습니다.\n\n\nMYSQL2 [https://github.com/sidorares/node-mysql2] (NODE-MYSQL2)\n\nnode-mysql과 호환을 추구하는 더 빠른 모듈입니다. 사용자 수는 node-mysql에 비하면 적은 편이며, 실제로 좋은 성능을 보여주나\n항상 100% 호환되지는 않습니다. 그래서 문제 발생 시 디버깅하기 어렵습니다.\n\n\n@CCN/MYSQL [https://github.com/Ecube-Labs/modules-mysql] (MODULES-MYSQL) →\nDEPRECATED\n\nmysql, mysql2에 기반한 내부 라이브러리입니다. 몇몇 편의 기능을 제공하지만 2020년 3월 30일 기준으로 대부분 필요 없게\n되었습니다. node-mysql에서 논의가 진행중이지만 아직 지원되지 않는 initialConnections,\nidleConnectionTimeout과 같은 옵션이 구현되어 있습니다.\n\n\nTIPS\n\n\nPOOL DOES NOT EXIST\n\nPool Cluster는 커넥션에서 fatal 에러(주로 mysql 서버와의 연결과 관련된 문제) 발생 시 연결을 재시도합니다. 재시도에\n실패하면 해당 커넥션을 포함하는 노드(커넥션 풀)을 삭제합니다. 그래서 그 이후의 쿼리는 Pool Does Not Exist에러를 발생시킵니다.\n\n관련 옵션: [https://github.com/mysqljs/mysql#poolcluster-options]\nremoveNodeCount: 지정한 횟수 이상 에러 발생 시 노드 삭제 (에러 없이 쿼리될 때는 카운트 1씩 감소)\nrestoreNodeTimeout: 노드 삭제 후 지정한 ms동안 노드를 offline으로 취급하고 이후에 다시 연결 시도. (offline\n상태에서 쿼리 시 에러 발생합니다.)\n\n해결책:\n\n * fatal 에러가 드물게 발생하는 경우 removeNodeCount를 충분히 높게 설정해서 계속 재시도하도록 해도 괜찮습니다.\n\n * restoreNodeTimeout 설정을 제대로 사용하려면 offline 상태에서의 쿼리 대기 처리를 직접 구현해야 합니다.\n\n * 고전적인 방법으로 껐다 켜기가 있습니다. 다수의 서버가 로드밸런서를 통해 서비스되고 있어서 괜찮다면 서버가 커넥션 에러를 listen해서\n   곧바로 종료시키는 것도 방법입니다. → 적용 사례\n   [https://github.com/Ecube-Labs/iot-server/blob/master/src/infrastructure/setup-infrastructure.ts#L25-L29]\n\n * 가장 근본적인 해결책은 커넥션이 불안정한 원인을 찾는 것입니다. (DB 클러스터가 Scale Down되면서 연결중이던 DB 인스턴스가\n   사라지는 것도 원인일 수 있으나 확실하지는 않습니다)\n\n\nTIMEZONE\n\n\n커넥션 관련 TIMEOUT 옵션들\n\n\nSTREAMING\n\n\nTYPECAST\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/461799743"
  },
  {
    "pageContent": "TypeORM\n * Decorators\n   * @UpdateDateColumn()\n   * @Index()\n * TypeORM과 Transaction per request와 Continuation Local Storage(CLS)\n * Date type(datetime) 사용시 소수점 반올림 현상\n\n\n\n\n\nDECORATORS\n\n\n@UPDATEDATECOLUMN()\n\n이 decorator 를 사용하면 save() 호출 시 해당 property 는 자동으로 업데이트 된다.\n\nclass User {\n  @Column()\n  name: string;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\nconst user = new User();\nuser.name = 'Ecube';\n\nentityManager.save(user);\n// update user set name = ?, updatedAt = current_timestamp ... 라는 쿼리를 생성한다.\n// user 테이블의 updatedAt 컬럼이 on update ... 로 생성 되는게 아니다.\n\n\n\n\n주의 사항\n\nEntity 내에서 이 decorator 를 두 번 사용하면 하나의 property 만 업데이트 된다. (2019.09.04 기준)\n\nclass User {\n  @Column()\n  name: string;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @UpdateDateColumn()\n  modifiedAt: Date;\n}\n// update user set name = ?, updatedAt = current_timestamp, modifiedAt = current_timestamp ... 라는 쿼리가 생성되어야 할 것 같지만\n// update user set name = ?, updatedAt = current_timestamp ... 라는 쿼리가 생성 된다.\n\nTypeORM 코드 UpdateQueryBuilder.prototype.createUpdateExpression 함수 참고\n\n\n\n\n@INDEX()\n\n기존 테이블에 인덱스를 추가하는 경우, TypeORM decorator 보다는 pt-online-schema-change\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2151448592/How+to+start+pt-online-schema-change]\n를 사용해 무중단 업데이트 하는 것을 권장한다.\n\n하지만 생성한 인덱스에 대해 { synchronize: false } 설정을 해주지 않으면 매번 빌드할 때 마다 생성한 인덱스가 drop 되므로\n주의해야 한다.\n\n@Entity()\n@Index('pt-online-schema-change로 생성한 indexName', { synchronize: false })\nexport class modelName {\n... \n}\n\nref. https://typeorm.io/#/indices/disabling-synchronization\n[https://typeorm.io/#/indices/disabling-synchronization]\n\n\nTYPEORM과 TRANSACTION PER REQUEST와 CONTINUATION LOCAL STORAGE(CLS)\n\n비즈니스 로직을 담은 코드를 복잡하게 만들지 않으면서 transaction per request를 구현하기 위해, TypeORM을 사용하지 않는\n이큐브랩의 다른 서비스들은 mysql.js 등 DB 드라이버를 추상화하지 않고 직접 사용하거나 커넥션 바인딩을 쉽게 만든 자체 라이브러리를\n사용하곤 했습니다.\n\n하지만 TypeORM의 transaction\n[https://github.com/typeorm/typeorm/blob/master/docs/transactions.md]은 단순히 트랜잭션\n안에서 실행할 코드를 콜백에 넣는 정도밖에 지원해주지 않습니다. transaction per request를 TypeORM으로 어떻게 구현할 수\n있을까요?\nTypeORM을 사용하지 않는 ccn-api처럼 request가 올 때마다 미들웨어에서 transaction을 만들어서 scoped\ncontainer에 넣어주고 서비스나 Repository에 DI 할 수도 있지만, TypeORM을 사용하면서 그렇게 하면 TypeORM\nRepository 클래스를 그대로 사용할 수 없고 모두 Custom Repository로 구현하고 그 안에서 scoped container\n안의 트랜잭션을 사용하도록 일일히 지정해야 합니다. 사실 그렇게 어려운 것도 아니지만 더 좋은 방법이 있습니다.\n\nodavid/typeorm-transactional-cls-hooked\n[https://github.com/odavid/typeorm-transactional-cls-hooked] \n\n이 패키지는 continuation local storage를 이용해 transaction connection을 전달하고 TypeORM\nRepository가 그것을 사용할 수 있게 합니다. 트랜잭션을 사용할 메소드에 @Transactional() 데코레이터를 달아서 그\n메소드로부터 연쇄적으로 호출되는 모든 함수/메소드를 트랜잭션의 내부에 넣을 수 있습니다. propagation, isolation level과\n같은 transaction 전략도 지정할 수 있습니다.\n\nKoa의 ctx(Context), Express의 req/res, ctx.locals, req.locals, scoped container같은\n것을 local storage 라고 부릅니다. Web API의 localStorage와는 다릅니다.\n\ncls-hooked [https://www.npmjs.com/package/cls-hooked] 패키지의 설명에 더 잘 나와있지만\ncontinuation local storage는 일련의 함수 호출 체인이 하나의 스코프를 공유하고 그 안에서는 인자를 넘기거나 하지 않아도\n변수를 공유할 수 있는 local storage입니다. typeorm-transactional-cls-hooked는 이것을 이용해서 트랜잭션을\n공유하고 TypeORM이 그 트랜잭션을 사용하도록 합니다.\n\n@Transactional()\nasync addCommandSet(deviceId: number, commandSet: DeviceCommandSet) {\n    // start transaction\n    const shadow = await this.getShadow(deviceId);\n    shadow.addCommand(commandSet);\n    await this.deviceRepository.saveShadow(shadow)\n    return shadow.commandSet;\n    // end transaction\n}\n\n\n\n\n\nDATE TYPE(DATETIME) 사용시 소수점 반올림 현상\n\n  @Column()\n  updatedAt!: DateTime;\n\n  @Column()\n  lastModifiedAt!: Date;\n\n    const nowTime = new Date();\n    this.lastModifiedAt = nowTime;\n    const updatedAt = nowTime.toISOString();\n    this.updatedAt = updatedAt;\n\nDate type인 lastModifiedAt에 new Date(), DateTime(string) type인 updatedAt에 new\nDate().toISOstring()을 넣을 경우\nupdatedAt에는 그대로 날짜가 들어가고 lastModifiedAt 에는 소수점이 반올림 되어 들어가게 된다.\n\nex)\n\nlastModifiedAt : 2024-07-01 09:45:46\nupdatedAt : ‘2024-07-01T09:45:45.714Z’\n\n범위 검색시 문제가 생길수 있어 소수점을 모두 제거하여 사용\n\nex)\n\nconst nowTime = new Date(Math.trunc(new Date().getTime() / 1000) * 1000);\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204996771"
  },
  {
    "pageContent": "[DB] Data archiving (pt-archiver)\n\npt-archiver는 너무 느려서 권장하지 않습니다\n\n제가 잘못썼거나, 우리 DB Scheme이 pt-archiver와 맞지 않을수도 있습니다.\n\n\n개요\n\n특정 대용량 테이블에 있는 데이터를 아카이빙하려고 한다.\n도구는 이것저것 있고 코드를 직접 짜서 마이그레이션하거나, 손수 데이터 덤프떠서 아카이빙하고 기존 테이블에 있는 데이터를 직접 제거해야한다.\n이렇게 마이그레이션 하는 도구는 다양하게 존재하는데, Percona toolkit중 하나인 pt-archiver\n[https://www.percona.com/doc/percona-toolkit/LATEST/pt-archiver.html]로 진행해볼\n예정이다.\n\n\n아카이빙 절차\n\n 1. 아카이빙 할 데이터의 분류를 정한다. (where 문으로)\n\n 2. 원본 데이터베이스와 옮길 대상 데이터베이스 정보를 파악해둔다.\n\n 3. pt-archiver를 이용해 하위 테이블부터 상위 테이블 순서대로 아카이빙한다.\n\n\nPT-ARCHIVER DRY-RUN\n\n아래는 dry-run으로 돌려본 예시다.\n(ccnetworks_archive 데이터베이스와 각 테이블은 이미 생성되어 있는것으로 가정하고 진행.)\n\n$ pt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=myusername,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccb,A=utf8mb4 \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--dry-run\n\n# printed\nSELECT /*!40001 SQL_NO_CACHE */ `raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date` FROM `ccnetworks`.`client_log_raw_parsing_ccb` FORCE INDEX(`PRIMARY`) WHERE (raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)) ORDER BY `raw_idx` LIMIT 1\nSELECT /*!40001 SQL_NO_CACHE */ `raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date` FROM `ccnetworks`.`client_log_raw_parsing_ccb` FORCE INDEX(`PRIMARY`) WHERE (raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)) AND ((`raw_idx` >= ?)) ORDER BY `raw_idx` LIMIT 1\nDELETE FROM `ccnetworks`.`client_log_raw_parsing_ccb` WHERE (`raw_idx` = ?)\nINSERT INTO `ccnetworks_archive`.`client_log_raw_parsing_ccb`(`raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\n\n\n출력된 쿼리를 보면 select ~~ limit 1; 로 된것을 볼 수 있다.\nhtypt-archiver는 select로 가져온 데이터를 가지고 위 쿼리를 반복하며 아카이빙을 수행하는것으로 보인다.\n문서\n[https://www.percona.com/doc/percona-toolkit/LATEST/pt-archiver.html#cmdoption-pt-archiver-dry-run]에서도\n비슷하게 언급하는듯 하다.\n\n이 값은 --limit 플래그로 조절할 수 있는데, --for-update 같은 플래그를 붙이거나 스토리지 엔진에 따라 문제가 발생할 가능성이\n있으니 1을 권장한다고 한다. 기본 값도 1이다.\n\n\n실습\n\n1개씩 실제로 돌려보니 너무너무 오래걸렸다.\n\n그래서 결심했다. 안전하지는 않지만 limit을 1000으로 올리기로.\n--commit-each 플래그를 같이 걸어주면 트랜잭션 크기를 제어해준다고 하는데, 그냥 조금 더 안정적으로 아카이빙 할 수 있게 도와준다고\n생각했다.\n\n\n실습 2\n\n퇴근 전에 limit 1000으로 돌려놓고 갔다. 아래는 10000개를 넣을때마다 출력하도록 설정한 결과다.\n\nTIME                ELAPSED   COUNT\n2020-11-25T16:52:05       0       0\n2020-11-25T17:51:50    3585   10000\n2020-11-25T18:46:56    6890   20000\n2020-11-25T19:42:14   10209   30000\n2020-11-25T20:37:36   13530   40000\n2020-11-25T21:32:13   16808   50000\n2020-11-25T22:26:16   20050   60000\n2020-11-25T23:20:07   23281   70000\n2020-11-26T00:13:58   26512   80000\n2020-11-26T01:09:02   29816   90000\n2020-11-26T02:02:46   33040  100000\n2020-11-26T02:58:02   36356  110000\nDBD::mysql::st execute failed: Lost connection to MySQL server during query [for Statement \"INSERT INTO `ccnetworks_archive`.`client_log_raw_parsing_ccb`(`raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\" with ParamValues: 0=9710071, 1=1728, 2='3', 3='8982068597006415074F', 4=undef, 5=undef, 6='00012', 7='1.108', 8='0', 9='12.9', 10='1', 11='0000000000000000', 12='0000000000000000', 13='0', 14=148, 15=3, 16=321, 17=324, 18=7, 19=0, 20=0, 21=2500, 22='3199', 23='000000', 24=0, 25='1', 26='9', 27=255, 28=171, 29=255, 30='2018-01-16 11:17:48'] at /usr/local/Cellar/percona-toolkit/3.2.1/libexec/bin/pt-archiver line 6771.\n\n\n우리 회사는 매일 새벽에 공유기 재부팅이 예약되어 있다고 한다.\n그 결과 위처럼 중간에 실패한것으로 보인다.\n\n게다가 이 속도로 2000만개 이상의 데이터를 옮기는건 너무너무 오래걸릴듯 하다.\n다른 방법을 찾아야겠다.\n\n\n실습 3\n\npt-archiver에는 bulk-insert라는 옵션이 있었다.\n사실 존재는 이미 알고 있었는데 이렇게 느릴 줄 몰라서 딱히 필요할 줄 몰랐다.\n\nbulk-insert 플래그를 사용하려고 하니 LOAD DATA LOCAL INFILE라는 에러가 발생했는데, 공식 문서에도 써있었다.\n이런 문제가 발생하는 환경이 있다곤 하는데, 자세히 알아보지 않았다.\n\n어쨌든 내 상황에서 bulk-insert를 사용하려면 DSN에 L=yes를 추가해주면 된다고 해서 그렇게 해봤다.\n효과는 엄청났다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw_parsing_ccbu\n\nTIME                ELAPSED   COUNT\n2020-11-26T10:35:12       0       0\n2020-11-26T10:35:16       3    1000\n2020-11-26T10:35:22       9    2000\n2020-11-26T10:35:27      14    3000\n2020-11-26T10:35:31      19    4000\n2020-11-26T10:35:36      23    5000\n2020-11-26T10:35:41      28    6000\n2020-11-26T10:35:45      32    7000\n2020-11-26T10:35:49      36    8000\n2020-11-26T10:35:53      41    9000\n2020-11-26T10:35:57      45   10000\n2020-11-26T10:36:01      48   11000\n...\n2020-11-26T10:39:32     260   67000\n2020-11-26T10:39:36     264   68000\n2020-11-26T10:39:40     268   69000\n2020-11-26T10:39:44     272   70000\n2020-11-26T10:39:48     276   71000\n2020-11-26T10:39:52     280   72000\n2020-11-26T10:39:56     284   73000\n2020-11-26T10:39:59     287   73673\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw_parsing_ccb\n\nTIME                ELAPSED   COUNT\n2020-11-26T10:45:49       0       0\n2020-11-26T10:50:50     301    1000\n2020-11-26T10:51:00     311    2000\n2020-11-26T10:51:05     316    3000\n2020-11-26T10:51:10     321    4000\n2020-11-26T10:51:15     326    5000\n2020-11-26T10:51:19     330    6000\n2020-11-26T10:51:23     334    7000\n2020-11-26T10:51:28     339    8000\n2020-11-26T10:51:32     343    9000\n2020-11-26T10:51:36     347   10000\n2020-11-26T10:51:40     351   11000\n2020-11-26T10:51:44     355   12000\n2020-11-26T10:51:48     359   13000\n2020-11-26T10:51:52     363   14000\n...\n# 자잘한 트러블이 있어 여러번 끊겼지만 결국 성공...\n2020-11-27T17:39:50   13115 3247000\n2020-11-27T17:39:53   13118 3248000\n2020-11-27T17:39:57   13121 3249000\n2020-11-27T17:40:00   13124 3250000\n2020-11-27T17:40:03   13127 3251000\n2020-11-27T17:40:06   13131 3252000\n2020-11-27T17:40:09   13134 3253000\n2020-11-27T17:40:12   13137 3254000\n2020-11-27T17:40:15   13140 3255000\n2020-11-27T17:40:18   13143 3256000\n2020-11-27T17:40:22   13146 3257000\n2020-11-27T17:40:25   13149 3258000\n2020-11-27T17:40:28   13153 3259000\n2020-11-27T17:40:31   13156 3260000\n2020-11-27T17:40:34   13159 3261000\n2020-11-27T17:40:37   13162 3262000\n2020-11-27T17:42:46   13290 3262608\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw_parsing_ccp\n\nTIME                ELAPSED   COUNT\n2020-11-30T10:09:55       0       0\n2020-11-30T10:18:16     500    1000\n2020-11-30T10:18:24     508    2000\n2020-11-30T10:18:31     515    3000\n2020-11-30T10:18:38     522    4000\n2020-11-30T10:18:43     527    5000\n2020-11-30T10:18:46     531    6000\n2020-11-30T10:18:50     534    7000\n2020-11-30T10:18:54     538    8000\n2020-11-30T10:18:57     542    9000\n2020-11-30T10:19:01     545   10000\n2020-11-30T10:19:05     549   11000\n...\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw\n\n너무 느려서 pt-archiver로 안함 -_-\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log\n\n너무 느려서 pt-archiver로 안함 -_-\n\nclient_log_raw_parsing_ccbu 결과를 보면 테이블 하나에 있는 데이터를 약 3~7초마다 1000개씩 옮긴 것이다.\n10분도 안되는 시간동안 73673개의 데이터를 아카이빙했다. 몰라서 삽질한것만 빼면 아주 쉽게 누구나 할수 있는것이다.\n\n단 주의할 점이 있다.\n데이터가 많을수록 처음에 대기하는 시간이 길어진다.\nclient_log_raw_parsing_ccb 결과를 보면 처음 시작과 다음 텀이 약 5분의 간격이 있는 것을 볼 수 있다.\n그 뒤로는 최대 10초 이상 걸리지 않은 채 데이터를 정상적으로 삽입하는것을 볼 수 있다.\n\n\n최종\n\n아래 스크립트는 내가 최종적으로 사용한 명령어다.\n\n## client_log_raw_parsing_ccb\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccb,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log_raw_parsing_ccbu\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccbu,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log_raw_parsing_ccp\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccp,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log_raw\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'idx > 75317601 and idx <= 91300226' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n\n\nTROUBLESHOOTING\n\n\nERROR: WIDE CHARACTER IN PRINT ~~~\n\n처리할 수 없는 문자열이 아카이빙 할 데이터에 포함된 경우다.\n난 내 환경에서 utf8 문자열을 정상적으로 처리할 수 없는것으로 생각하고 perl(pt-archiver가 perl script로 짜인\n프로그램이다)을 utf8 문자열을 사용해도 문제가 없게 모듈이나 여러 플래그를 붙여서 실행해봤다.\n\n결과는 똑같았다.\n때문에 어떤 문자가 utf8에 포함이 안되는건가 싶어 찾아봤다.\n\n� 이러한 replacement character가 존재했다.\n모든 컬럼에 테이블을 풀스캔 해서 다 찾아야 한다.\n\nupdate문으로 대체문자를 전부 바꿔주면 된다.\n어차피 문제가 있는 데이터로 판단하고 대충 0으로 다 바꿔주면 일단 아카이빙은 가능하다.\n\n아래는 내가 대체문자를 제거할 때 사용한 쿼리다.\n엄청 느리지만 일단 문제 없이 돌아가긴 한다.\n\n# client_log_raw_parsing_ccb\nUPDATE client_log_raw_parsing_ccb\nSET reporting_period = REPLACE(reporting_period, '�', '0'), photo_sensor_period = REPLACE(photo_sensor_period, '�', '0')\nwhere raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)\nand '�' in (reporting_period, photo_sensor_period)\n;\n\n# client_log_raw_parsing_ccp\nUPDATE client_log_raw_parsing_ccp\nSET ultra_sonic_wave = REPLACE(ultra_sonic_wave, '�', '9'), company = REPLACE(company, '�', '0'), accelerometer = REPLACE(accelerometer, '�', '0')\nwhere raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)\nand (ultra_sonic_wave like \"%�%\" or company like \"%�%\" or accelerometer like \"%�%\")\n;\n\n# client_log_raw\nUPDATE client_log_raw\nSET receive_raw = REPLACE(receive_raw, '�', '0'), send_raw = REPLACE(send_raw, '�', '0')\nwhere idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)\nand (receive_raw like \"%�%\" or send_raw like \"%�%\")\n;\n\n\n\n\n\n\n\n결론\n\n편하게 옮길수 있긴 한데 데이터가 많으면 엄청 오래걸린다…\n\n내가 잘못쓴건가 싶지만 일단 이대로는 못쓰겠다…\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1069842437"
  },
  {
    "pageContent": "DB 에 저장 된 값 변경 요청이 들어왔을 때 check list\n * 도메인 모델에 주의사항 없는지 확인\n   ex)\n   https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B+Account#ContractOn-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B3%B3\n   [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B+Account#ContractOn-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B3%B3]\n * TODO",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048734845"
  },
  {
    "pageContent": "How to start pt-online-schema-change\n\n\n1. 왜 필요한가\n\nDB schema 무중단 업데이트\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/745505248/DB+schema]\n위 문서를 통해 무중단 업데이트를 어떻게 해야 하는지, 이 도구가 왜 필요한지 이해한다.\n\n스키마 변경시 Online DDL에 해당하지 않는 경우 테이블에 락이 걸려 해당 테이블을 사용하는 기능이 정상적으로 동작하지 않으므로\npt-online-schema-change를 사용한다.\n\n\n2. 개념\n\n[DB] 자식 테이블에 CUD 있는 테이블 무중단 업데이트\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/883327112/DB+CUD]\n위 문서를 통해 pt-online-schema-change가 어떻게 가능한지에 대한 동작 원리를 이해한다.\n\n\n3. 사용\n\n[DB] pt-online-schema-change 가이드\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/964198492/DB+pt-online-schema-change]\n위 문서를 따라 설치하고 사용한다.\n\n--execute 플래그 없이 테스트 후, 마이그레이션에 문제가 없다고 판단될 때 Stage DB에 우선적으로 --execute 플래그를 사용해\n마이그레이션 하는것을 원칙으로 해야한다.\n\n예시) 테이블에 인덱스 추가하는 경우\n\npt-online-schema-change \\\n--alter \"ADD INDEX IX_client_log_date_client_idx (date, client_idx)\" \\\n--preserve-triggers \\\n--charset=utf8 \\\n--progress=time,30 \\\n--chunk-index=PRIMARY \\\n--chunk-time=0.3 \\\n--chunk-size=5000 \\\n--password=비밀 \\\n--alter-foreign-keys-method=auto \\\n--no-drop-old-table \\\n--set-vars innodb_strict_mode=0 \\\n--execute \\\nD=데이터베이스이름,t=테이블이름,h=스테이지디비호스트,u=사용자\n\n\nTIPS.\n\n * 해당 데이터베이스의 root 권한을 가진 계정 정보를 넣지 않으면 스크립트 실행에 실패할 수 있다.\n\n * 마이그레이션 도중 기존 테이블에서 발생하는 CUD에 대한건 pt-online-schema-change가 알아서 관리하므로 걱정하지 않아도\n   된다.\n   \n   * 기존 테이블에 트리거를 걸어 마이그레이션을 하고 있는 데이터베이스에도 문제 없이 반영될 수 있게 해준다.\n\n * 마이그레이션 도중에는 테이블이름_new 가 생성되어 있으며, 만약 --no-drop-old-table플래그를 사용했다면 마이그레이션을 했던\n   원본 테이블이 테이블이름_old 라는 이름으로 보존된다.\n\n * 마이그레이션이 도중에 실패하는 경우 _new postfix가 붙은 테이블이 그대로 보존되며, 원본 테이블에 걸린 trigger를 제거해야\n   다시 마이그레이션을 시작할 수 있다.\n\n * pt-online-schema-change 는 bastion 을 통한 접근을 지원하지 않아서 스테이지 db를 변경해야 된다면 직접 ssh\n   터널 구성하고 실행해야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2151448592"
  },
  {
    "pageContent": "[DB] 자식 테이블에 CUD 있는 테이블 무중단 업데이트\n\nMySQL에서 Alter문은 기본적으로 테이블락을 건다.\n\n그리고 락이 걸린 테이블이 자식 테이블이 많고 트랜잭션이 많은 경우 오랜 시간(어쩌면 데드락) 잠금이 풀리지 않아 문제가 발생한다.\n(실제로 이 문제가 발생했을때는 모든 제품이 통신하지 못하는 상황이 발생했기 때문에 분석할 시간이 없었기 때문에 추측만으로 리서치를 해야했다)\n\n가장 비슷한 상황으로 추측하건데, https://blog.naver.com/parkjy76/220639066476\n[https://blog.naver.com/parkjy76/220639066476] 에서 서술한대로 부모-자식 간 테이블의 공유 잠금때문으로\n보인다.\n\n자식 테이블이 아무리 많아도 자식 테이블에 CUD가 없으면 MySQL에 내장된 alter 구문만으로도 문제 없이 수정되는것을 확인했다.\n\n\nSOLUTION 1:\n\n외래키를 검사하지 않도록 설정해둔 뒤, table alter를 한다.\n\nSET FOREIGN_KEY_CHECKS = 0;\n\n위와 같은 구문을 실행하면 외래키를 검사하지 않아서 부모-자식간에 테이블 잠금이 걸리지 않는다.\n\n물론 이 설정을 계속 꺼두면 외래키를 건 의미가 없기 때문에 아래 쿼리로 다시 켜야한다.\n(계속 꺼둘거면 차라리 외래키를 걸지 말고 써라)\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n\nSOLUTION 2:\n\nMySQL을 조금 써봤다면 익숙할법 한 pt-online-schema-change 라는 도구를 사용하면 된다.\n\n외래키가 걸린 테이블이기 때문에 --alter-foreign-keys-method 옵션을 써야하는데, “auto”를 값으로 주면 적당히 알아서\n잘 해준다.\n\npt-online-schema-change \\\n--alter \"add column tested_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\" \\\n--preserve-triggers \\\n--charset=UTF8MB4 \\   # 지정 안하면 한글이 들어간 테이블에 있던 정보가 깨질수도 있다고 한다.\n--progress=time,30 \\  # 이 옵션을 걸면 30초가 지날때 마다 남은 시간을 보여준다.\n--chunk-size=500 \\    # 마이그레이션 할 때 한번에 마이그레이션 할 chunk의 사이즈를 지정한다.\n--password=secret \\\n--alter-foreign-keys-method=auto \\ # 외래키 있으면 걸어야한다.\n--dry-run \\\nD=DBNAME,t=TABLENAME,h=DBHOST,u=USERNAME\n\n단, 이 도구는 새로 만든 테이블에 마이그레이션을 끝내고 old ↔︎ new 테이블을 스왑하는 도구이기 때문에,\n스왑하는 아주 짧은 시간 동안 select를 하면 에러가 날 수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/883327112"
  },
  {
    "pageContent": "[DB] pt-online-schema-change 가이드\n\n\n개요\n\npt-online-schema-change는 DB 스키마 마이그레이션을 위한 커맨드라인 도구입니다. Percona Toolkit\n[https://www.percona.com/doc/percona-toolkit/3.0/index.html]에 포함되어 있습니다.\n\n * 디비 파라메터 log_bin_trust_function_creators = 1 로 설정 필요\n   \n   * 이전에 설정한적이 있더라도 테라폼에 의해 이 파라메터 설정은 사라질 수 있으므로 작업 전에 항상 확인해야 한다.\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/964198492/image-20231016-014249.png?api=v2]\n\n\n설치\n\n$ brew install percona-toolkit\n\nbrew를 통한 설치가 실패하면 로컬에 설치된 MySQL 버전을 5.6으로 낮춰보세요. 참고\n[https://github.com/Homebrew/legacy-homebrew/issues/46051]\n\nhttps://gist.github.com/takatoshiono/ea84371dfa2ae4529c5f5ba6427b711d\n[https://gist.github.com/takatoshiono/ea84371dfa2ae4529c5f5ba6427b711d] 와 비슷하게\n나오면 설치에 성공한 것입니다.\n\n\n예시\n\n$ pt-online-schema-change --ask-pass \\\n --charset=utf8 \\\n --alter-foreign-keys-method=auto \\\n --recursion-method=none \\\n --execute \\\n --alter=\"add column `product_code` varchar(128) DEFAULT NULL COMMENT '품번'\" \\\n --user=json \\\n --host=ccn-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com \\\n --chunk-time=0.3 \\ \n --chunk-size=10000 \\\n D=ccnetworks,t=client # Database, Table 지정\n\n\n유의할 파라미터\n\n * execute: 이 파라미터를 명시하지 않으면 실행되지 않습니다. 반대로, 절대 실행하지 않는 옵션은 dry-run 입니다.\n\n * alter: 변경할 내용을 나열합니다. MySQL의 ALTER TABLE Statement\n   [https://dev.mysql.com/doc/refman/5.6/en/alter-table.html]에서 [alter_option [,\n   alter_option] ...]에 해당하는 부분을 입력하면 됩니다.\n\n * charset: 스키마를 변경하는 테이블의 charset을 커버할 수 있는 charset으로 지정해주어야 합니다.\n\n * ask-pass: 보안을 위해, password를 파라미터로 넘기는 것보다 명령어 실행 후 입력하는 것을 추천합니다.\n\n * alter-foreign-keys-method: 외래키 제약조건이 있는 테이블의 경우 이 옵션이 필요할 수 있습니다.\n\n * chunk-time, chunk-size: 큰 마이그레이션을 하는 경우 마이그레이션 부하로 인한 DB 장애를 방지하기 위해 적은 처리량에서\n   먼저 테스트해봐야 합니다.\n\n * recursion-method: 복제 지연(replication lag)을 체크해서 최소화하기 위한 옵션인데 이 옵션 관련 에러가 뜨면\n   그냥 none으로 지정해주면 됩니다. 어차피 우리는 복제 지연이 생길 정도로 큰 부하를 주면 안 됩니다.\n\n * host, database, table, user 등 접속 정보: --host 처럼 파라미터로 넘기거나 파라미터 뒤에 DSN\n   [https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html#dsn-options]\n   형식으로 넘기면 됩니다.\n\n\n더 자세한 옵션\n\nhttps://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html\n[https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html]\n또는 $ pt-online-schema-change --help 또는 $ man pt-online-schema-change 로 볼 수 있습니다.\n\n\n실제 예시\n\n * CCNB-4957 [https://ecubelabs.atlassian.net/browse/CCNB-4957?src=confmacro] 댓글\n   참고\n\n * [DB] 자식 테이블에 CUD 있는 테이블 무중단 업데이트\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/883327112/DB+CUD]\n\n * CCNB-5297 [https://ecubelabs.atlassian.net/browse/CCNB-5297?src=confmacro] 댓글\n   참고\n\n * SW-10059 [https://ecubelabs.atlassian.net/browse/SW-10059?src=confmacro]\n\n\n원리\n\nhttp://small-dbtalk.blogspot.com/2014/02/mysql-table-schema.html\n[http://small-dbtalk.blogspot.com/2014/02/mysql-table-schema.html] 참고\n\n\nCHEATSHEET\n\n<Table name> was not altered (...) execute failed: Lost connection to MySQL\nserver during query [for Statement \"EXPLAIN SELECT (...)\n\n→ --nocheck-plan\n\nTable storage engine for <Table name> doesn't have this option (...)\n\n→ --set-vars innodb_strict_mode=0\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/964198492"
  },
  {
    "pageContent": "[RxJS] debounceTime vs throttleTime operator\n\n개발자가 debounceTime과 throttleTime Operator를 사용하는 가장 큰 이유는 대부분 앱의 성능을 올리거나, 부하를 줄이기\n위해서입니다.\n물론 사용자의 실수를 줄이거나 사용성 개선 등을 목적으로도 사용됩니다.\n\n그리고 겉으로 보기에 두 Operator를 거친 뒤 나오는 결과물은 크게 달라보이지 않기 때문에 두개중에 어떤것을 사용해야 적당한지 모르는\n개발자를 위해 작성한 글입니다.\n\n두 Operator가 어떻게 동작하는지 모른다면 아래 링크를 참고하세요.\n\n * https://reactive.how/throttletime [https://reactive.how/throttletime]\n\n * https://rxmarbles.com/#debounceTime [https://rxmarbles.com/#debounceTime]\n\n * https://rxmarbles.com/#throttleTime [https://rxmarbles.com/#throttleTime]\n\n\nDEBOUNCETIME\n\n연속적으로 입력받는 element의 마지막 element만 사용하면 되는 경우.\n경험상 text value처럼 입력받는 element를 예측할 수 없는 경우 적합했습니다.\n\n예시\n\n * 검색어 자동완성: 성능이나 부하 방지를 위해 입력받은 텍스트 값의 변경이 0.5초 이상 없는 경우만 자동완성 데이터 불러와야 하는 경우\n\n * 실시간 검색: 성능이나 부하 방지를 위해 입력받은 텍스트 값의 변경이 0.5초 이상 없는 경우만 검색 API 호출해야 하는 경우\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/334266437/fast.gif?api=v2]\n   \n   [Fast]\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/334266437/normal.gif?api=v2]\n   \n   [Normal]\n   \n   위는 실제로 구현된 사례입니다. 사진의 오른쪽 로딩 인디케이터가 생길때마다 데이터를 불러온다고 볼 수 있는데, 입력을 마친 뒤 일정 시간이\n   지나야 데이터를 다시 불러오는것을 확인할 수 있습니다.\n   물론 Normal처럼 지정된 시간이 지나자 마자 입력을 하면 사진에 나온것처럼 동작하는건 막을수 없습니다, 기본적인 부하는 막을수\n   있습니다.\n\n\nTHROTTLETIME\n\n일정 시간동안 입력받는 element의 첫 element만 사용하면 되는 경우.\n경험상 입력받는 element의 형태가 단순한 이벤트인 경우 적합했습니다.\n\n예시\n\n * 버튼 클릭 중복 방지: 버튼이 항상 활성화 되어있어야 하고, 버튼을 눌렀을때 바로 반응해야 하고, 연속적으로 버튼을 눌러도 이벤트를 한번만\n   발생시켜야 하는 경우\n\n\n\n\n결론\n\n요구사항과 사용성을 고려하여 적합한 연산자를 선택하면 됩니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334266437"
  },
  {
    "pageContent": "[개발 가이드][rxjs] Side effect를 발생시키고 싶을때\n\nobservable을 만들때 아이템을 변경하는것이 아닌, 부작용을 일으켜야하는 경우가 있습니다. 보통은 console에 로그를 표시하거나, 어떤\n조건을 만족할때 어떠한 함수를 실행하는등의 경우가 있습니다.\n\n이때, *map operator를 사용하여 부작용을 일으키고 upstream을 그대로 downstream으로 내려보내주게됩니다.\n\n이런경우 *map 대신 tap operator [https://rxjs-dev.firebaseapp.com/api/operators/tap]를\n사용하면 좋습니다.\n\ntap operator는 인자로받은 observer를 실행하고, upstream을 그대로 downstream으로 반환합니다. 개발자가 명시적으로\n작업하던부분을 수행해주기때문에 실수할일이 적고, 이 operator를 사용하는 부분은 무조건 부작용을 일으키는것임을 선언적으로 나타낼 수\n있기때문에 읽기에도 더 좋은 코드가 됩니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334692490"
  },
  {
    "pageContent": "[rxjs] axios-observable\n\naxios-observable을 사용해서 http request를 observable로 쉽게 변환시킬 수 있어 사용된다.\n\n\n\n보통 subscribe()한 후 memory leak이 발생하기 때문에 unsubscribe()해줘야 한다. 자동으로\nunsubscribe()되게 하기 위해 retry(3), take(1)등의 operator를 추가 하는 방법도 있다.\n\n\n\n하지만 axios-observable은 request 한 후 complete()되므로 unsubscribe()를 호출할 필요가 없다.\nhttps://github.com/zhaosiyang/axios-observable/blob/master/lib/create-observable.ts#L25\n[https://github.com/zhaosiyang/axios-observable/blob/master/lib/create-observable.ts#L25]\n\n\n\n단, API request를 취소하고 싶을 때는 unsubscribe()를 사용하면 된다.\nhttps://www.npmjs.com/package/axios-observable#cancellation-big-win-for-axios-observable\n[https://www.npmjs.com/package/axios-observable#cancellation-big-win-for-axios-observable]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334332196"
  },
  {
    "pageContent": "[개발 가이드][rxjs] 에러핸들링\n\n\nERROR가 발생하면 해당 OBSERVABLE은 COMPLETE됩니다.\n\n예외는 없습니다. 어떠한 방법도 Error가 발생한 Observable이 Complete되는것을 막지 못합니다. (단, 손수 해당 Error\n발생 코드를 try~catch하는 경우를 제외합니다. 이 경우는 Error가 발생하지 않는 경우로 간주합니다.)\n\n\nCATCHERROR\n\ncatchError 오퍼레이터를 사용하면 Error 발생시 해당 Observable이 Error를 downstream으로 전달하는 대신 어떠한\nObservable을 전달할지를 선택할 수 있습니다. 또는 또다른 Error를 발생시킬 수 있습니다. 주의해야할 점은, catchError를\n사용한다할지라도 Error가 발생한 Observable은 complete 된다는 점 입니다.\n\n따라서, 어떠한 Observable을 구독해서 어떠한 작업을 수행할때, Error가 발생하더라도 구독이 끊기지않도록 하기위해서는 구독하고있는\nmain stream에서 catchError 오퍼레이터를 사용하지않고, Error가 발생하리라 예측되는 작업을 sub stream으로 분리하여\n해당 stream에서 catchError 오퍼레이터를 사용하여 error를 캐치하여야합니다.\n\n\n\n// Error가 발생하여 main stream이 complete 되는경우 = 구독이 종료되는경우\nevent$.pipe(\n  map( () => { /*ERROR*/ }),\n  catchError( (error) => { return EMPTY; }), // main stream에서 catchError를 수행하고 있습니다.\n).subscribe(\n  () => { console.log('next!'); }, // catchError에서 EMPTY를 반환했으므로 아무 아이템이 발행되지않아 next는 호출되지 않습니다.\n  () => { console.log('error!'); }, // error는 위에서 consume했으므로 여기에서는 catch되지 않습니다.\n  () => { console.log('complete!'); }, // main stream에서 error가 발생하여 complete되었으므로 이 핸들러가 호출됩니다. 동시에 구독이 종료됩니다.\n);\n\n// Error가 발생하여 sub stream이 complete 되는경우 = 구독이 종료되지 않는경우\nevent$.pipe(\n  concatMap( () => { \n    failingObservable$.pipe(\n      catchError( (error) => { return EMPTY; }), // sub stream에서 catchError를 수행하고 있습니다.\n      // error를 캐치하여 아무 아이템도 반환하지 않는 observable을 down stream으로 보냅니다. error는 보내지 않습니다.\n      // error를 캐치하고 난뒤에 이 failingObservable$은 complete 됩니다.\n    )\n  }),\n).subscribe(\n  () => { console.log('next!'); }, // catchError에서 EMPTY를 반환했으므로 아무 아이템이 발행되지않아 next는 호출되지 않습니다.\n  () => { console.log('error!'); }, // error는 위에서 consume했으므로 여기에서는 catch되지 않습니다.\n  () => { console.log('complete!'); }, // main stream에서 error가 발생하지 않았으므로 complete되지않아 이 핸들러가 호출되지않습니다. 구독이 유지됩니다.\n);\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/342327538"
  },
  {
    "pageContent": "Tips > RxJS > Rx onError Guidelines\n\n\n원문\n\nhttps://netflixtechblog.com/android-rx-onerror-guidelines-e68e8dc7383f\n[https://netflixtechblog.com/android-rx-onerror-guidelines-e68e8dc7383f]\n\n\nOBSERVABLE이 ERROR를 발행하는일은 FATAL ERROR에 한해서만 일어나야 합니다.\n\nObservable이 error를 발행하게되면, 해당 Observable의 구독은 종료됩니다. 그러므로 Observable이 error를\n발행하는 경우는 더이상 아이템을 발행해서는 안되는 fatal error의 경우에 한해서만 이루어져야하며, 아닐경우 error를 발행하지 않도록\n해야합니다.\n\n\nDETERMINISTIC ERROR와 NON-DETERMINISTIC ERROR를 함께 내보내지 마세요.\n\nDeterministic error는 동일한 input이 있을경우 항상 동일하게 발생하는 error이고 Non-deterministic\nerror는 때에따라 발생하는 error입니다. (예를들면 network error가 있습니다.) Non-deterministic error의\n경우 retry operator를 사용하는것이 자연스럽지만, deterministic error일 경우 retry는 쓸모가 없습니다.\nObservable이 항상 일관된 error를 발생시키도록 하세요. 위 두 타입의 error가 함께 발생하는 경우가 생겼다면, 관심사의 분리를\n적절히하여 두개의 observable로 분리할 수 있는지 고려해보세요.\n\n\n다른 API를 WRAPPING하는 OBSERVABLE의 경우 API의 ERROR HANDLING을 존중하세요.\n\n감싸려는 Api(touch event 등)에서 error를 발생시키는 경우 이를 임의로 핸들링하지말고 해당 Observable을 사용하는곳에서\n핸들링하도록 하세요.\n\n\n아이템에 따라 ERROR를 발생시키는 비즈니스 로직을 추가하지 마세요.\n\n그런 경우, 해당 아이템을 생성하는 위치에서 error로 변환하도록 해야합니다. 드문경우지만 그럴 수 없다면, observable에서\nerror를 발생시키지 말고 error와 일반 아이템을 추상화한 아이템을 반환하도록 해야합니다.\n\n\nERROR를 발생시킬경우 자세한 내용을 입력하세요.\n\nError를 발생시켜야 하는경우, 해당 error의 원인과 적절한 핸들링 방법을 error에 담아서 발생시키세요.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/408944714"
  },
  {
    "pageContent": "[RxJS] Operators\n * [RxJS] switchMap\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635516427/RxJS+switchMap]\n * [RxJS] withLatestFrom\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635287068/RxJS+withLatestFrom]\n * [RxJS] mergeMap\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635745800/RxJS+mergeMap]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635450885"
  },
  {
    "pageContent": "[RxJS] switchMap\n\n\n특징\n\n * Target 옵저버블을 구독한다.\n\n * Source 옵저버블에 새 엘리먼트가 fire된 경우 기존 Target 옵저버블의 구독을 취소한다.\n\n * Source 옵저버블이 fire 될 때 마다 Target 옵저버블의 모든 엘리먼트를 반복한다.\n\n\n주의사항\n\n * Target 옵저버블에 엘리먼트가 많이 쌓일수록 성능에 문제가 생길 수 있다.\n   \n   * 한번만 fire하고 구독을 취소하는 형태의 옵저버블을 사용하는게 적합하다.\n     (last, first, skip* 계열의 filtering operator를 사용한 옵저버블도 좋다.)\n\n\n주 용도\n\n * HTTP Request cancellation 구현시 아주 편리함\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635516427"
  },
  {
    "pageContent": "[RxJS] withLatestFrom\n\n\n특징\n\n * 특정 옵저버블을 Target으로서 구독한다.\n\n * Target 옵저버블의 최근 엘리먼트만 받아온다.\n\n * Target 옵저버블에서 fire되는 엘리먼트가 하나도 없는 경우 구독해도 동작하지 않는다.\n\n * Source 옵저버블을 기준으로 데이터를 전달받는다.\n\n\n주 용도\n\n * Source 옵저버블의 데이터를 가공할 때 다른 옵저버블에 있는 데이터가 필요한 경우\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635287068"
  },
  {
    "pageContent": "[RxJS] mergeMap\n\n\n특징\n\n * Target 옵저버블을 구독한다.\n\n * Source 옵저버블에 새 엘리먼트가 fire되어도 Target을 구독 취소하지 않는다.\n\n\n주 용도\n\n * 비동기 처리나 동시 작업 필요한 옵저버블을 동시에 구독하기 좋다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635745800"
  },
  {
    "pageContent": "0. 프로젝트 준비\n\n\nGITHUB REPOSITORY 생성\n\n첫걸음!\n\n깃헙에 프로젝트를 생성한 뒤엔 권한 설정을 해줘야 다른 사람들이 접근할 수 있다.\n\nSW팀을 writer로 허용해주자.\n\n\nTRANSPILER & BUNDLER & FRAMEWORK & LIBS 설정\n\n * TypeScript\n * Webpack\n * React.js\n * Angular\n * ...\n\n뭐든 자신이 필요한 도구를 설치하고 셋팅한다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204308569"
  },
  {
    "pageContent": "1. 개발 환경(Lint & Prettify) 설정\n\n\nPRETTIER & CONFIG 설치\n\nhttps://www.npmjs.com/package/@ecubelabs/prettier-config\n[https://www.npmjs.com/package/@ecubelabs/prettier-config]\n\nnpm i eslint prettier eslint-config-prettier eslint-plugin-prettier @ecubelabs/prettier-config -D\n\n위 패키지들을 설치합니다.\n\n그리고 아래 파일을 프로젝트 최상단에 만들어줍니다.\n\n// .prettierrc.js\nmodule.exports = {\n  ...require('@ecubelabs/prettier-config/back-end'), // front-end도 있습니다. jsx 호환.\n  ...require('@ecubelabs/prettier-config'),\n};\n\n\nESLINT 설정\n\nCode formatting 에 대한 설정은 온전히 프리티어에게 맡기기 위해 eslint에 추가 설정이 필요합니다.\n아래 가이드를 따라하게 되면 eslint에서의 code formatting 을 위한 규칙은 무시되고, 프리티어의 규칙을 따르게 됩니다.\n\nprettier 설정을 .eslintrc.js 에 추가해줍니다.\n\n// .eslintrc.js\nmodule.exports = {\n  extends: ['ecubelabs', 'plugin:prettier/recommended'], // 반드시 prettier를 가장 마지막에 extends해야 합니다.\n  plugins: [..., 'prettier'], // 순서 상관 없습니다.\n  rules: {\n    ...,\n    'prettier/prettier': 'error', // 프리티어를 지키지 않으면 에러로 처리해야 합니다.\n  },\n  ...\n};\n\n\nTSCONFIG 설정\n\nhttps://github.com/Ecube-Labs/tsconfig [https://github.com/Ecube-Labs/tsconfig]\n\n{\n    \"include\": [\"src\"],\n    \"extends\": \"@ecubelabs/tsconfig/node14.json\", // NOTE: https://github.com/Ecube-Labs/tsconfig/blob/main/node14.json\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"baseUrl\": \"./src\",\n        \"outDir\": \"./dist\",\n    },\n}\n\n\nESLINT 동작 확인\n\nnpx eslint src/**/*.ts --fix\n\n프로젝트에서 위 명령어를 돌렸을 때 변경사항이 없고 에러가 없어야 정상적으로 설정된것이다.\n\n\n.NVMRC 파일 추가\n\n아래의 내용으로 파일을 추가한다.\n\n14\n\n이 버전은 Dockerfile에서 사용하는 node 버전과 일치하도록 한다.\n개발 환경은 nvm use 자동화\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109702171/nvm+use] 를 이용해\n일관적인 개발 환경을 이용할수 있도록 구성한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374073"
  },
  {
    "pageContent": "iOS 프로젝트\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221053004"
  },
  {
    "pageContent": "Android 앱\n등록[https://ecubelabs.atlassian.net/wiki/download/attachments/221118525/image-20210103-132102.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221118525/image-20210103-132155.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221118525/image-20210103-140313.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221118525"
  },
  {
    "pageContent": "App Center\n\nMS AppCenter 를 통해 Code Push 를 사용한다.\n\n * App Center, App 초대 요청\n * Management CLI 설치\n * RN 프로젝트에 Code Push 적용\n * Release\n   * CCN-iOS 배포\n   * CCN-Android 배포\n   * Trouble Shooting\n     * digital envelope routines::unsupported\n * 관련문서\n\n\nAPP CENTER, APP 초대 요청\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA/overview?homepageId=38731850\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA]\n\nApp Center 관리자에게 요청해서 App Center에 초대를 받는다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221578718/Screenshot%202024-02-22%20at%202.50.24%E2%80%AFPM.png?api=v2]\n\n배포하고자 하는 App의 팀에도 초대가 되어야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221578718/Screenshot%202024-02-22%20at%202.52.35%E2%80%AFPM.png?api=v2]\n\n\nMANAGEMENT CLI 설치\n\nnpm install -g appcenter-cli\n\nappcenter login\n\n정상적으로 설치, 로그인 됐다면 appcenter codepush deployment list --app Ecube-Labs/앱 이름 명령어를\n입력했을 때 배포 현황을 확인할 수 있다.\n\nex)\n\nappcenter codepush deployment list --app Ecube-Labs/CCN-iOS\n\n\n\n--displayKeys 옵션을 통해 key가 제대로 들어있는지 확인할 수도 있다.\n\n\nRN 프로젝트에 CODE PUSH 적용\n\n이미 적용된 프로젝트라면 해당 과정은 넘어가도 된다.\n\nnpm install react-native-code-push --save\n\nApp.tsx\n\nexport default codePush({\n  checkFrequency: codePush.CheckFrequency.ON_APP_RESUME,\n  installMode: codePush.InstallMode.ON_NEXT_RESUME,\n})(App);\n\n\nRELEASE\n\nappcenter codepush release-react -a Ecube-Labs/{앱 이름} -d Production -m  --description \"{이슈 번호 or 설명}\" --target-binary-version \"{Codepush하고자 하는 프로젝트의 현 버전}\"\n\n\n\nCCN 앱 배포 예시\n\n\nCCN-IOS 배포\n\nappcenter codepush release-react -a Ecube-Labs/CCN-iOS -d Production -m  --description \"SW-7003\" --target-binary-version \"2.1.7\"\n\n\nCCN-ANDROID 배포\n\nappcenter codepush release-react -a Ecube-Labs/CCN-Android -d Production -m  --description \"SW-7003\" --target-binary-version \"2.1.7\"\n\n\nTROUBLE SHOOTING\n\n\nDIGITAL ENVELOPE ROUTINES::UNSUPPORTED\n\nFailed to construct transformer:  Error: error:0308010C:digital envelope routines::unsupported\n...\nerror Cannot read properties of undefined (reading 'transformFile').\nTypeError: Cannot read properties of undefined (reading 'transformFile')\n\n위와 같은 에러가 발생한다면 NODE_OPTIONS 환경 변수의 값을 --openssl-legacy-provider 로 설정하고 배포 커맨드를\n실행해주면 된다.\n\nex)\n\nNODE_OPTIONS=--openssl-legacy-provider appcenter codepush release-react -a Ecube-Labs/CCN-iOS -d Production -m  --description \"SW-7003\" --target-binary-version \"2.1.7\"\n\n\n관련문서\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2204991524?search_id=f8ffce47-e28b-4c6c-81a8-9155d4ef3cc5\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2204991524?search_id=f8ffce47-e28b-4c6c-81a8-9155d4ef3cc5]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221578718"
  },
  {
    "pageContent": "Firebase\n\n앱을 production, stage 환경으로 분리해 관리한다는 가정하에 문서를 작성했습니다.\n\n\n관련문서\n\nFirebase?\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2137063435/Firebase]\n\n\n목차\n\n * 관련문서\n * 목차\n * 프로젝트 구성 방법\n   * 1. Firebase 콘솔 접속 (https://console.firebase.google.com/)\n   * 2. 프로젝트 생성\n     * 2.1 프로젝트명 기입\n     * 2.2 GA 활성화 여부 설정\n     * 2.3 GA Account 선택 (GA 설정하는 경우만)\n   * 3. RN 프로젝트 설정\n\n\n\n\n프로젝트 구성 방법\n\n--------------------------------------------------------------------------------\n\n\n1. FIREBASE 콘솔 접속 (HTTPS://CONSOLE.FIREBASE.GOOGLE.COM/\n[https://console.firebase.google.com/])\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-022824.png?api=v2]\n\n\n2. 프로젝트 생성\n\n이전에 프로젝트를 생성한 이력이 있다면 3번부터 시작하면 된다.\n\n프로젝트 생성 기준 [https://ecubelabs.atlassian.net/browse/CCNB-6306]\n\nFirebase 는 2단계 계층 구조를 갖는다. (Project - App)\n\n * Project: haulla\n\n * Apps\n   \n   * com.haulla (Android)\n   \n   * com.haulla.stage (Android)\n   \n   * com.haulla (iOS)\n   \n   * com.haulla.stage (iOS)\n\n\n2.1 프로젝트명 기입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-023041.png?api=v2]\n\n\n2.2 GA 활성화 여부 설정\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA] Firebase 관리자 혹은 프로젝트 리더에게 GA\n활성 여부를 물어봐서 설정하면 된다. (물론 나중에 활성화 할 수 있다.)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-023107.png?api=v2]\n\n\n2.3 GA ACCOUNT 선택 (GA 설정하는 경우만)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-024359.png?api=v2]\n\n\n3. RN 프로젝트 설정\n\n[Firebase] iOS 세팅\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217776156/Firebase+iOS]\n\n[Firebase] Android 세팅\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2226290771/Firebase+Android]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2225995796"
  },
  {
    "pageContent": "제플린에 컴포넌트 연결\n\n\n\n * I. 설정\n   * 1. CLI 설정\n     * I. Token 받아오기\n     * II. 토큰 셋팅하기\n     * III. 프로젝트 및 스타일가이드 셋팅\n   * 2. VS code 설정\n * II. 제플린에 컴포넌트 연결하기\n   * I. 플러그인 추가\n   * II. 연결할 컴포넌트 지정\n   * III. 스타일 가이드에 해당 컴포넌트 있는지 확인하기\n   * 예시\n * III. 제플린에 스토리북 연결\n   * I. 플러그인 추가\n   * II. 연결할 컴포넌트 지정\n * IV. 배포\n   * 주의: 토큰 셋팅 확인\n   * 최종 완성본 - 예) ListItemText\n\n\n\n\nI. 설정\n\n\n\n\n1. CLI 설정\n\n참고: https://github.com/zeplin/cli [https://github.com/zeplin/cli]\n\nI. TOKEN 받아오기\n\nhttps://app.zeplin.io/profile/connected-apps\n[https://app.zeplin.io/profile/connected-apps]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.12.30.png?api=v2]\n\n\n\nII. 토큰 셋팅하기\n\nSet ZEPLIN_ACCESS_TOKEN environment variable in your CI.\n\nex) ZEPLIN_ACCESS_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6Ind\n\n\n\nIII. 프로젝트 및 스타일가이드 셋팅\n\n./zeplin/components.json\n\nMP_Web : 5eb2499ef962ccb1b82e7fb8 (projects)\n\nCEED Web Design System : 5ea7d6a0b472cbbc68219de1 ( styleguides )\n\n  \"projects\": [\"5eb2499ef962ccb1b82e7fb8\"],\n  \"styleguides\": [\"5ea7d6a0b472cbbc68219de1\"],\n\n\n\n\n2. VS CODE 설정\n\n * VS 익스텐션 : https://marketplace.visualstudio.com/items?itemName=zeplin.zeplin\n   [https://marketplace.visualstudio.com/items?itemName=zeplin.zeplin]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.24.11.png?api=v2]\n\nCommand에서 Login to Zeplin 을 클릭하여, 연결해준다.\n\n\n\n사이드바 하단에 제플린 아이콘을 눌러서 프로젝트, 스타일 가이드를 연결해준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-26%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.19.24.png?api=v2]\n\n\n\n\nII. 제플린에 컴포넌트 연결하기\n\n\n\n참고: https://github.com/zeplin/cli-connect-react-plugin\n[https://github.com/zeplin/cli-connect-react-plugin] ( 플러그인 설치 )\n\n\nI. 플러그인 추가\n\n./package.json\n\n  \"plugins\": [\n    {\n      \"name\": \"@zeplin/cli-connect-react-plugin\"\n    }\n  ],\n\n\n\n\nII. 연결할 컴포넌트 지정\n\n./zeplin/component.json\n\n\"components\": [\n    {\n      \"path\": \"src/app/ceed/core/ListItemText/ListItemText.tsx\", // 컴포넌트 명\n      \"zeplinNames\": [ \"Lists/Default/Default/Text\",\n        \"Lists/Default/with Secondary/Text\",\n        \"Lists/Default/with Caption/Text\"\n        ] // 스타일가이드에 있는 컴포넌트 명\n    }\n  ]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.10.37.png?api=v2]\n\n\n\n\nIII. 스타일 가이드에 해당 컴포넌트 있는지 확인하기\n\n\n\n * 마우스를 올려두면 해당 컴포넌트가 없는지 확인 가능하다.\n\n\n\n * 해당 컴포넌트가 있을 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.20.45.png?api=v2]\n\n\n\n * 없을 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.07.43.png?api=v2]\n\n\n예시\n\n\n\n위치: .zeplin/components.json\n\n{\n  \"plugins\": [\n    {\n      \"name\": \"@zeplin/cli-connect-react-plugin\"\n    }\n  ],\n  \"projects\": [\"5eb2499ef962ccb1b82e7fb8\"],\n  \"styleguides\": [\"5ea7d6a0b472cbbc68219de1\"],\n  \"components\": [\n    {\n      \"path\": \"src/app/ceed/core/ListItemText/ListItemText.tsx\",\n      \"zeplinNames\": [\n        \"Lists/Default/Default/Text\",\n        \"Lists/Default/with Secondary/Text\",\n        \"Lists/Default/with Caption/Text\"\n      ],\n    }\n  ]\n}\n\n\n\n\n\nIII. 제플린에 스토리북 연결\n\n\n\n참고: https://github.com/zeplin/cli-connect-storybook-plugin\n[https://github.com/zeplin/cli-connect-storybook-plugin] ( 플러그인 설치 )\n\n\n\n\nI. 플러그인 추가\n\n  \"plugins\": [\n     {\n      \"name\": \"@zeplin/cli-connect-storybook-plugin\",\n      \"config\": {\n        \"url\": \"http://localhost:64557\",\n        \"startScript\": \"storybook\"\n      }\n    }\n  ],\n\n\n\n\nII. 연결할 컴포넌트 지정\n\n\n\n스토리북에 작성된 컴포넌트 이름을 입력하면 된다.\n\n\nstoriesOf('@ceed/core/ListItemText', module).add('Lists/Default/Default/Text', () => (\n  <ListItemText primary=\"List item\" />\n));\n\n\n\n      \"storybook\": {\n        \"kind\": \"@ceed/core/ListItemText\",\n        \"stories\": [\n          \"Lists/Default/Default/Text\",\n          \"Lists/Default/with Secondary/Text\",\n          \"Lists/Default/with Caption/Text\"\n        ]\n      }\n\n\n\nkind 에는 storiefOf의 값을 넣는다\n\nstories 에는 add로 추가한 컴포넌트를 넣어주면 된다.\n\n\nIV. 배포\n\n\n\n주의: 토큰 셋팅 확인\n\n zeplin connect\n\n\n\n\n\n최종 완성본 - 예) LISTITEMTEXT\n\n{\n  \"components\": [\n    {\n      \"path\": \"src/app/ceed/core/ListItemText/ListItemText.tsx\",\n      \"zeplinNames\": [\n        \"Lists/Default/Default/Text\",\n        \"Lists/Default/with Secondary/Text\",\n        \"Lists/Default/with Caption/Text\"\n      ],\n      \"storybook\": {\n        \"kind\": \"@ceed/core/ListItemText\",\n        \"stories\": [\n          \"Lists/Default/Default/Text\",\n          \"Lists/Default/with Secondary/Text\",\n          \"Lists/Default/with Caption/Text\"\n        ]\n      }\n    }\n  ],\n}\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/82852620-5caf4300-9f3e-11ea-9d9b-5e048682a01f.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/599359651"
  },
  {
    "pageContent": "tsconfig 관리\n\n아래 코드는 이해를 돕기 위한 tsconfig 예시이므로 반드시 똑같이 관리하지 않아도 되지만, 보통 비슷하게 구성된다.\n\n * tsconfig.base.json: 모든 tsconfig에서 상속받아서 사용하는 용도로 관리한다.\n   \n   * compilerOptions, paths 등의 설정을 공통으로 구성하기 위한 목적이다.\n   \n   * {\n         \"extends\": \"@ecubelabs/tsconfig/node18.json\", // NOTE: https://github.com/Ecube-Labs/tsconfig/blob/main/node18.json\n         \"compilerOptions\": {\n             \"module\": \"commonjs\",\n             \"baseUrl\": \"./src\",\n             \"outDir\": \"./dist\",\n             \"useUnknownInCatchVariables\": false,\n             \"esModuleInterop\": true,\n             \"paths\": {\n                 \"~types/*\": [\"@types/*\"]\n             }\n         }\n     }\n\n * tsconfig.json: TS Language server / ESLint에서 참조하는 tsconfig\n   \n   * tsconfig에서 exclude 하게 되면 VSCode Extension에 의해 실행되는 TS Language server가\n     tsconfig를 참조하지 못해서 exclude에 포함된 파일(ex. test file)을 대상으로 IDE(인텔리센스)가 정상적으로\n     동작하지 않는다.\n     안타깝게도 VSCode tsconfig를 별도로 지정할 수 없으므로 tsconfig.json 파일은 개발용으로만 사용한다.\n   \n   * 자세한것은 아래 커밋메세지 참고.\n     https://github.com/Ecube-Labs/ecubelabs/commit/73095fb82558d186f31f9f56fe34e8a4739d001a\n     [https://github.com/Ecube-Labs/ecubelabs/commit/73095fb82558d186f31f9f56fe34e8a4739d001a]\n     https://github.com/Ecube-Labs/ecubelabs/commit/aae1f7442068df1d88b9c5772bf3bc0c65f8e64d\n     [https://github.com/Ecube-Labs/ecubelabs/commit/aae1f7442068df1d88b9c5772bf3bc0c65f8e64d]\n   \n   * {\n         \"include\": [\"src\"],\n         \"exclude\": [\"node_modules\"],\n         \"extends\": \"./tsconfig.base.json\"\n     }\n\n * tsconfig.test.json: 테스트를 돌릴때 참조하는 tsconfig\n   \n   * 테스트를 실행할 때에도 exclude에 포함시킨 파일은 읽어들이지 못한다.\n     테스트 관련 파일을 exclude에 포함시키는 경우 테스트가 정상적으로 실행될 수 없으므로 별도로 분리해서 관리한다.\n   \n   * {\n         \"include\": [\"src\", \"test\"],\n         \"extends\": \"./tsconfig.base.json\",\n         \"compilerOptions\": {\n             \"types\": [\"jest\"]\n         }\n     }\n\n * tsconfig.build.json: 빌드할 때 사용하는 tsconfig\n   \n   * 앱 실행에 불필요한 파일을 제외하고 전부 exclude에 포함시킨다.\n   \n   * {\n         \"include\": [\"src\"],\n         \"exclude\": [\"**/*.spec.ts\", \"**/*.test.ts\", \"*.d.ts\", \"node_modules\", \"test\"],\n         \"extends\": \"./tsconfig.base.json\"\n     }\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2779054141"
  },
  {
    "pageContent": "[GitHub] Code Owners\n\nGitHub는 오픈소스 생태계를 지키기 위해 Code Owners\n[https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners]라는\n기능이 존재합니다.\n\n# /.github/CODEOWNERS\n\n* @github_username1 @github_username2\n/src/services @selenehyun\n/Dockerfile @ecube_infra_admin\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/243138599/image-20191128-052253.png?api=v2]\n\n자세한 포맷은\nhttps://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners\n[https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners]\n를 참고하면 되고, 위 처럼 정의를 해두면 누군가 PR을 올렸을때, 위 규칙에 해당하는 GitHub 사용자는 자동으로 Reviewer로 지정되며\n아래 사진과 같이 아이콘이 뜹니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/243138599/image-20191128-051944.png?api=v2]\n\n어떠한 설계나 변경사항이 있을 때 반드시 알아야 하는 경우 유용하게 쓰일수 있으며, 지금 이큐브랩에서는 프로젝트의 방향이나 설계하는 리더를 모든\n파일의 코드 오너로 지정하는것을 권장합니다. (1~2명)\n\n--------------------------------------------------------------------------------\n\n추가적으로, 코드 오너가 승인하지 않으면 머지를 못하도록 레파지토리 설정을 변경할 수 있습니다. (GitHub 관리자\n[https://ecubelabs.atlassian.net/browse/CCNB-2520]에게 요청)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243138599"
  },
  {
    "pageContent": "1. 앱 등록\n * App ID 생성\n   * Step 1. Apple Developer > Certificates, Identifiers & Profiles\n   * Step 2. Identifiers 옆에 + 버튼 클릭\n   * Step 3. App IDs 선택\n   * Step 4. 값을 채워 넣는다. 번들 ID 는 교체할 수 없기 때문에 주의\n   * Step 5. 푸시를 사용하는 앱이라면 Capabilities 에서 Push Notifications 을 체크\n * App 생성\n\n\nAPP ID 생성\n\n\nSTEP 1. APPLE DEVELOPER [https://developer.apple.com] > CERTIFICATES,\nIDENTIFIERS & PROFILES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_12-16-0.png?api=v2]\n\n\n\n\nSTEP 2. IDENTIFIERS 옆에 + 버튼 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-16_15-51-58.png?api=v2]\n\n\n\n\nSTEP 3. APP IDS 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_12-18-57.png?api=v2]\n\n\n\n\nSTEP 4. 값을 채워 넣는다. 번들 ID 는 교체할 수 없기 때문에 주의\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_12-22-51.png?api=v2]\n\n * Bundle ID 영어 소문자, . 만 포함하도록 한다.\n   \n   * 안드로이드의 applicationId 와 일치시키기 위함인데 안드로이드의 applicationId 는 -, _ 를 허용하지 않는다.\n   \n   * 안드로이드의 applicationId 와 iOS bundle ID 를 반드시 일치시킬 필요는 없지만 각 플랫폼에서 어플리케이션의\n     identifier 를 다르게 할 이유도 없으니 특별한 사유가 없다면 일치시키도록 한다.\n\n * Description 은 나중에 수정할 수 있다.\n\n\n\n\nSTEP 5. 푸시를 사용하는 앱이라면 CAPABILITIES 에서 PUSH NOTIFICATIONS 을 체크\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-16_15-50-23.png?api=v2]\n\n\nAPP 생성\n\nApp Store Connect [https://appstoreconnect.apple.com]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_13-47-24.png?api=v2]\n\n * 이전 과정에서 생성한 번들 ID 를 선택해야 하는 것 외에 특이사항은 없다.\n\n * SKU 는 뭔지 모르겠는데 그냥 번들 ID 랑 같은 값을 입력해도 된다.\n\n\n\n\n프리뷰 이미지 준비\n\nhttps://ecubelabs.atlassian.net/browse/MP-767\n[https://ecubelabs.atlassian.net/browse/MP-767]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image-20210103-131031.png?api=v2]\n\n\n\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image-20210103-133001.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image-20210103-133328.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/215449605"
  },
  {
    "pageContent": "2. APN 인증 키 생성\n\n푸시를 사용하는 앱은 APN 인증 키가 필요하다.\n\nAPN 인증 키는 앱마다 발급해야 하는 것이 아니다.\n\n실제로 APN 인증 키를 만들때 앱 관련 어떠한 정보도 입력하지 않는다.\n\n3. Firebase iOS 생성\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219515085/3.+Firebase+iOS]에서\nAPN 인증 키를 업로드할 때 번들 아이디를 입력하는데 이것으로 충분하다.\n\n(하나의 APN 키로 복수개의 앱에서 푸시 전송하는 것 확인 완료. 2020.01.16)\n\n\n\n\nApple Developer [https://developer.apple.com]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-2_12-16-0.png?api=v2]\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-16_16-29-4.png?api=v2]\n\n * Keys 옆에 + 버튼 클릭\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-16_16-30-50.png?api=v2]\n\n * Key Name 입력\n * Apple Push Notifications service 체크\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-16_16-31-53.png?api=v2]\n\n * APNs key 다운로드 (AuthKey_YOUR_KEY_ID.p8)\n * 다시 다운로드 불가능하므로 잘 보관해야 한다\n   * 보유자 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence] 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/223183054"
  },
  {
    "pageContent": "3. Firebase iOS 생성\n\nFirebase 프로젝트가 미리 생성되어 있어야 한다.\n\n\n\n * Firebase iOS 앱 생성\n * APN 인증 키 등록\n\n\n\n\n\n\n\nFIREBASE IOS 앱 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_15-57-33.png?api=v2]\n\n * Firebase 프로젝트에서 iOS 앱 추가\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_15-58-18.png?api=v2]\n\n * iOS 번들 ID 입력\n\n\n\n\n\nAPN 인증 키 등록\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_16-7-56.png?api=v2]\n\n * Project Overview > Project settings > Cloud Messaging\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_16-9-15.png?api=v2]\n\n * APNs Authentication Key 항목에 p8 형식의 인증키를 업로드한다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_16-38-25.png?api=v2]\n\n * Key ID 는 AuthKey 에 있는데 없다면 Apple Developer > Certificates, Identifiers &\n   Profiles [https://developer.apple.com/] 에서 확인할 수 있다.\n * Team ID 는 Membership [https://developer.apple.com/account/#/membership] 에서\n   확인할 수 있다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219515085"
  },
  {
    "pageContent": "4. Xcode 프로젝트 생성\n * For React Native\n * For iOS Native\n\n\nFOR REACT NATIVE\n\n$ npx react-native init MyApp --template react-native-template-typescript\n\n\nFOR IOS NATIVE\n\n특별한 규칙은 없다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221151311"
  },
  {
    "pageContent": "5. QA build 설정\n * QA configuration 생성\n * QA scheme 생성\n * Customize QA configuration\n   * Product Bundle Identifier\n   * Entry file for TypeScript\n   * Different App icons\n\n\nQA CONFIGURATION 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/QA%20configuration.gif?api=v2]\n\nQA 앱은 metro bundler 없이 standalone 으로 동작해야 하기 때문에 Release 를 duplicate 해서 생성한다.\n\n\nQA SCHEME 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/QA%20scheme.gif?api=v2]\n\nQA 스킴은 Run(Xcode 에서 실행) 혹은 Archive(Test Flight 로 배포)할 때 QA configuration 을 사용하도록\n생성.\n\n\nCUSTOMIZE QA CONFIGURATION\n\n\nPRODUCT BUNDLE IDENTIFIER\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-083546.png?api=v2]\n\nProduct bundle identifier 는 앱을 구분하는 값으로 bundle identifier 가 같은 앱은 두개 존재할 수 없다.\n그래서 Release 와 Debug 의 bundle identifier 가 같은 경우, 앱스토어에서 설치한 앱이 있을 때 Xcode 를 이용해\n해당 앱을 아이폰에서 디버깅 하려고 하는 경우 앱스토어에서 설치한 앱을 지워버린다.\n\n\nENTRY FILE FOR TYPESCRIPT\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-091318.png?api=v2]\n\n\nDIFFERENT APP ICONS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-101314.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-101343.png?api=v2]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221053011"
  },
  {
    "pageContent": "배포 키스토어 생성 및 설정\n\n배포 secret 은 앱 당 하나만 존재한다.\n\n배포자가 여러명인 경우 모종의 방법을 통해 secret 을 공유해야 하며 절대로 형상 관리하지 않는다.\n\n\n\n * 1. Keystore 비밀번호 생성\n * 2. Keystore 생성\n * 3. Keystore 설정 파일 생성\n * 4. 프로젝트에 secret 복사\n\n\n1. KEYSTORE 비밀번호 생성\n\n> openssl rand -base64 32\n\n\n2. KEYSTORE 생성\n\n> keytool -genkeypair -v -keystore $YOUR_KEYSTORE_NAME -alias $YOUR_KEY_ALIAS\n-keyalg RSA -keysize 2048 -validity 100000 -storetype pkcs12\n\n$YOUR_KEYSTORE_NAME 은 ***.keystore 형식으로 한다.\n\n그러면 다음과 같이 interaction 이 진행 된다.\n\n키 저장소 비밀번호 입력: // 여기에 1 에서 생성한 비밀번호 입력\n새 비밀번호 다시 입력:\n이름과 성을 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\n조직 단위 이름을 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\n조직 이름을 입력하십시오.\n  [Unknown]: Ecube Labs\n구/군/시 이름을 입력하십시오?\n  [Unknown]: // 아무값도 입력하지 않고 enter\n시/도 이름을 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\n이 조직의 두 자리 국가 코드를 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\nCN=Unknown, OU=Unknown, O=Ecubelabs, L=Unknown, ST=Unknown, C=Unknown이(가) 맞습니까?\n  [아니오]: y\n\n다음에 대해 유효 기간이 100,000일인 2,048비트 RSA 키 쌍 및 자체 서명된 인증서(SHA256withRSA)를 생성하는 중\n        : CN=Unknown, OU=Unknown, O=Ecubelabs, L=Unknown, ST=Unknown, C=Unknown\n[$YOUR_KEYSTORE_NAME을(를) 저장하는 중]\n\n\n3. KEYSTORE 설정 파일 생성\n\n다음과 같이 Keystore 설정 파일 keystore.properties 를 생성한다.\n\nRELEASE_KEY_ALIAS=$YOUR_KEY_ALIAS\nRELEASE_KEY_PASSWORD=$(1에서 생성한 비밀번호)\nRELEASE_KEYSTORE_FILE_PATH=../secrets/$YOUR_KEYSTORE_NAME\nRELEASE_KEYSTORE_PASSWORD=$(1에서 생성한 비밀번호)\n\n\n4. 프로젝트에 SECRET 복사\n\nYOUR_PROJECT/android/app/secrets 하위로 2, 3 에서 생성한 ***.keystore,\nkeystore.properties 를 옮긴다.\n\n/android/app/secrets는 gitignore 에 추가하고 절대로 형상관리 되지 않도록 하며\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122225385\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122225385] 에 기록한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/245202952"
  },
  {
    "pageContent": "[Firebase] iOS 세팅\n * 1. 앱 등록\n   * 1.1 프로젝트 상세 진입\n   * 1.2 앱 등록 페이지 진입\n   * 1.3 메타데이터 입력\n   * 1.4 GoogleService-Info.plist 파일 다운로드\n   * 1.5 완료\n * 2. 프로젝트에 Firebase 구성\n   * 2.1 react-native-firebase/app 패키지 설치\n   * 2.2 Pod install\n   * 2.2 AppDelegate.m 설정\n   * 2.3 Firebase 구성 파일들을 위치시킬 폴더 생성\n   * 2.4 firebase 폴더에 GoogleService-Info.plist 파일 추가\n   * 2.5 Target Membership 해제\n   * 2.6 Build Phases 에 Firebase 스크립트 추가\n\n\n1. 앱 등록\n\n--------------------------------------------------------------------------------\n\n\n1.1 프로젝트 상세 진입\n\n콘솔에서 프로젝트를 눌러 상세에 진입한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-030535.png?api=v2]\n\n\n1.2 앱 등록 페이지 진입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-051332.png?api=v2]\n\n프로젝트명 아래에 있는 + 버튼을 누르고, iOS 을 선택해서 앱 등록 페이지에 진입한다.\n\n\n1.3 메타데이터 입력\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-030757.png?api=v2]\n\n\n1.4 GOOGLESERVICE-INFO.PLIST 파일 다운로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-030945.png?api=v2]\n\n\n1.5 완료\n\n3, 4 번 설정은 추후 프로젝트 구성할 때 진행할 거라 그냥 Next 눌러서 패스하면 된다.\n\nContinue to console 눌러서 앱 등록을 마무리한다.\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-031119.png?api=v2]\n\n\n\n\n2. 프로젝트에 FIREBASE 구성\n\n--------------------------------------------------------------------------------\n\nhttps://rnfirebase.io/ [https://rnfirebase.io/] 문서를 기반으로 한다.\n\n\n2.1 REACT-NATIVE-FIREBASE/APP 패키지 설치\n\nnpm install --save @react-native-firebase/app\n\n\n2.2 POD INSTALL\n\npod install\n\n\n2.2 APPDELEGATE.M 설정\n\n#import <Firebase.h>\n\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  ...\n  \n  // Firebase\n  [FIRApp configure];\n\n  ...\n}\n\n...\n\n\n2.3 FIREBASE 구성 파일들을 위치시킬 폴더 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-095950.png?api=v2]\n\n\n\n\n2.4 FIREBASE 폴더에 GOOGLESERVICE-INFO.PLIST 파일 추가\n\n3번에서 다운로드 했던 GoogleService-Info.plist 를 각 폴더에 추가해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-100016.png?api=v2]\n\n\n\n\n2.5 TARGET MEMBERSHIP 해제\n\n방금 추가한 GoogleService-Info.plist 파일들을 선택하고 Target Membership 을 모두 해제해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-043712.png?api=v2]\n\n\n2.6 BUILD PHASES 에 FIREBASE 스크립트 추가\n\n순서는 Link Binary With Libraries 다음에 두면 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-043931.png?api=v2]\n\n# Name of the resource we're selectively copying\nGOOGLESERVICE_INFO_PLIST=GoogleService-Info.plist\n\n# Get references to dev and prod versions of the GoogleService-Info.plist\n# NOTE: These should only live on the file system and should NOT be part of the target (since we'll be adding them to the target manually)\nGOOGLESERVICE_INFO_PRODUCTION=${PROJECT_DIR}/firebase/production/${GOOGLESERVICE_INFO_PLIST}\nGOOGLESERVICE_INFO_STAGE=${PROJECT_DIR}/firebase/stage/${GOOGLESERVICE_INFO_PLIST}\nGOOGLESERVICE_INFO_DEBUG=${PROJECT_DIR}/firebase/debug/${GOOGLESERVICE_INFO_PLIST}\n\necho \"CONFIGURATION ${CONFIGURATION}\"\n\nif [[ $CONFIGURATION == \"Release\" && ! -f $GOOGLESERVICE_INFO_PRODUCTION ]]\nthen\n    echo \"Production GoogleService-Info.plist is not found. Please ensure it's in the proper directory.\"\n    exit 1\nfi\n\nif [[ $CONFIGURATION == \"Stage\" && ! -f $GOOGLESERVICE_INFO_STAGE ]]\nthen\n    echo \"Stage GoogleService-Info.plist is not found. Please ensure it's in the proper directory.\"\n    exit 1\nfi\n\nif [[ $CONFIGURATION == \"Debug\" && ! -f $GOOGLESERVICE_INFO_DEBUG ]]\nthen\n    echo \"Debug GoogleService-Info.plist is not found. Please ensure it's in the proper directory.\"\n    exit 1\nfi\n\n# Get a reference to the destination location for the GoogleService-Info.plist\nPLIST_DESTINATION=${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app\n\n# Copy over the prod GoogleService-Info.plist for Release builds\nif [ $CONFIGURATION == \"Release\" ]\nthen\n    echo \"cp ${GOOGLESERVICE_INFO_PRODUCTION} to ${PLIST_DESTINATION}\"\n    cp \"${GOOGLESERVICE_INFO_PRODUCTION}\" \"${PLIST_DESTINATION}\"\nelif [ $CONFIGURATION == \"Stage\" ]\nthen\n    echo \"cp ${GOOGLESERVICE_INFO_STAGE} to ${PLIST_DESTINATION}\"\n    cp \"${GOOGLESERVICE_INFO_STAGE}\" \"${PLIST_DESTINATION}\"\nelse\n    echo \"cp ${GOOGLESERVICE_INFO_DEBUG} to ${PLIST_DESTINATION}\"\n    cp \"${GOOGLESERVICE_INFO_DEBUG}\" \"${PLIST_DESTINATION}\"\nfi\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217776156"
  },
  {
    "pageContent": "[Firebase] Android 세팅\n * 1. 앱 등록\n   * 1.1 프로젝트 상세 진입\n   * 1.2 앱 등록 페이지 진입\n   * 1.3 메타데이터 입력\n   * 1.4 google-services.json 파일 다운로드\n   * 1.5 등록 완료\n * 2. 프로젝트에 Firebase 구성\n   * 2.1 react-native-firebase/app 패키지 설치\n   * 2.2 google-services.json 구성\n   * 2.3 빌드 설정\n\n\n1. 앱 등록\n\n--------------------------------------------------------------------------------\n\n\n1.1 프로젝트 상세 진입\n\n콘솔에서 프로젝트를 눌러 상세에 진입한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-030535.png?api=v2]\n\n\n1.2 앱 등록 페이지 진입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-051332.png?api=v2]\n\n프로젝트명 아래에 있는 + 버튼을 누르고, Android 선택해서 앱 등록 페이지에 진입한다.\n\n\n1.3 메타데이터 입력\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-111012.png?api=v2]\n\n\n1.4 GOOGLE-SERVICES.JSON 파일 다운로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-111027.png?api=v2]\n\n\n1.5 등록 완료\n\n나머지 단계는 모두 건너 뛰어서 등록을 완료한다.\n\n\n\n\n2. 프로젝트에 FIREBASE 구성\n\n--------------------------------------------------------------------------------\n\nhttps://rnfirebase.io/ [https://rnfirebase.io/] 문서를 기반으로 한다.필수 설정\n\n\n2.1 REACT-NATIVE-FIREBASE/APP 패키지 설치\n\nnpm install --save @react-native-firebase/app\n\n\n2.2 GOOGLE-SERVICES.JSON 구성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211029-022459.png?api=v2]\n\n\n2.3 빌드 설정\n\n/android/build.gradle 의  dependencies 속에 google-services 플러그인 을 추가한다.\n\nbuildscript {\n  dependencies {\n    ...\n    classpath 'com.google.gms:google-services:4.3.10'\n  }\n}\n\n\n\n/android/app/build.gradle 최상단에 플러그인 실행 코드를 추가한다.\n\napply plugin: 'com.android.application'\napply plugin: 'com.google.gms.google-services' // <- 요기\n\n...\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2226290771"
  },
  {
    "pageContent": "[Firebase] Analytics\n\n\n\n * 1. 프로젝트 설정\n   * 1.1 패키지 다운로드\n   * 1.2 Pod install\n * 2. 활동 추적\n   * 2.1 로그인 추적 예시\n   * 2.2 화면 이동 추적 예시\n   * 2.3 사용자 정보 추적 예시\n * DebugView\n   * iOS\n   * Android\n\n\n1. 프로젝트 설정\n\n--------------------------------------------------------------------------------\n\n\n1.1 패키지 다운로드\n\nnpm install @react-native-firebase/analytics\n\n\n1.2 POD INSTALL\n\n\n\n\n2. 활동 추적\n\n--------------------------------------------------------------------------------\n\n사용자 행동을 추적할 수 있는 다양한 메소드들이 존재한다.\nhttps://rnfirebase.io/reference/analytics#methods\n[https://rnfirebase.io/reference/analytics#methods] 참고\n\n\n2.1 로그인 추적 예시\n\nfirebaseAnalytics().logLogin({ method: 'social' });\nfirebaseAnalytics().setUserId(userId);\n\n디바이스에 유저 아이디를 매핑시킬 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-043432.png?api=v2]\n\n\n2.2 화면 이동 추적 예시\n\nfirebaseAnalytics().logScreenView({\n  screen_name: routeName, \n  screen_class: routeName,\n});\n\n화면 호출 횟수를 파악할 수 있고, 이를 통한 퍼널 분석도 가능하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-043940.png?api=v2]\n\n\n2.3 사용자 정보 추적 예시\n\nfirebaseAnalytics().setUserProperties({ \n    language,\n    timezone,\n}),\n\n사용자 환경을 같이 기록할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-043155.png?api=v2]\n\n\n\n\nDEBUGVIEW\n\nFirebase 콘솔에는 로그를 실시간으로 확인할 수 있는 DebugView 페이지가 존재한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-041835.png?api=v2]\n\n사용 방법을 아래에 간단히 적어놓았지만 궁금하다면\nhttps://firebase.google.com/docs/analytics/debugview#ios\n[https://firebase.google.com/docs/analytics/debugview#ios] 문서를 참고하면 된다.\n\n\nIOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-042200.png?api=v2]\n\nEdit Scheme 을 누르고, Arguments 탭에서 -FIRDebugEnabled -FIRAnalyticsDebugEnabled 값을\n추가한다.\n\n\nANDROID\n\n아래 명령어를 터미널에 입력한다.\n\n# 예시 adb shell setprop debug.firebase.analytics.app com.ecubelabs.ccnstage\nadb shell setprop debug.firebase.analytics.app {package_name}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227634289"
  },
  {
    "pageContent": "[Firebase]\nCrashlytics[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211029-065100.png?api=v2]\n\nCrashlytics 이용하면 에러와 비정상 종료 상태를 확인할 수 있다.\n\n\n\n * 1. 프로젝트 설정\n   * 1.1 패키지 다운로드\n   * 1.2 빌드 구성\n   * 1.3 Pod install or Gradle sync\n * 2. 에러 관리\n   * 2.1 발생 흐름 추적\n * 3. 테스트\n * 4. 알림\n   * 4.1 이메일\n   * 4.2 기타\n\n\n\n\n1. 프로젝트 설정\n\n--------------------------------------------------------------------------------\n\n\n1.1 패키지 다운로드\n\nnpm install @react-native-firebase/crashlytics\n\n\n\n\n1.2 빌드 구성\n\nAndroid\n\niOS\n\nproject/build.gradle 에 클래스 경로를 지정한다.\n\nbuildscript {\n    dependencies {\n        // ...\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'\n    }\n\n\n /android/app/build.gradle 파일 상단에 플러그인 적용 코드를 추가한다.\n\napply plugin: 'com.android.application'\napply plugin: 'com.google.firebase.firebase-crashlytics'\n\n\nx\n\n\n1.3 POD INSTALL OR GRADLE SYNC\n\n\n\n\n2. 에러 관리\n\n--------------------------------------------------------------------------------\n\n\n2.1 발생 흐름 추적\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211029-095205.png?api=v2]\n\nlog 메서드를 이용하면 에러 발생 흐름을 만들 수 있다.\n\nfirebaseCrashlytics().log(\"test errors log!!!\")\n\ncrash()\n\n\n\n\n3. 테스트\n\n--------------------------------------------------------------------------------\n\nhttps://firebase.google.com/docs/crashlytics/test-implementation?platform=android\n[https://firebase.google.com/docs/crashlytics/test-implementation?platform=android]\n\nAndroid\n\niOS\n\nadb shell setprop log.tag.FirebaseCrashlytics DEBUG\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211029-042200.png?api=v2]\n\nEdit Scheme 을 누르고, Arguments 탭에서 -FIRDebugEnabled -FIRAnalyticsDebugEnabled 값을\n추가한다.\n\n\n4. 알림\n\n--------------------------------------------------------------------------------\n\n\n4.1 이메일\n\nhttps://console.firebase.google.com/subscriptions/overview\n[https://console.firebase.google.com/subscriptions/overview] 에 접속하면 개인 알림 설정이\n가능하다. (프로젝트 확인이 안 된다면 권한 문서 확인\nhttps://support.google.com/firebase/answer/7276542\n[https://support.google.com/firebase/answer/7276542] )\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211102-023920.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211102-024127.png?api=v2]\n\n\n\n\n4.2 기타\n\n슬랙, 지라와 연동이 가능하다. (Project Settings - Integrations 탭에서 설정 가능)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211102-023529.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227863697"
  },
  {
    "pageContent": "[Firebase] Performance\nMonitoring[https://ecubelabs.atlassian.net/wiki/download/attachments/2227830944/image-20211029-064351.png?api=v2]\n\nPerformance Monitoring 이용하면 앱의 네트워크 속도, 렌더링 성능 등을 측정할 수 있다.\n\n\n1. 프로젝트 설정\n\n--------------------------------------------------------------------------------\n\n\n1.1 패키지 다운로드\n\nnpm i @react-native-firebase/perf\n\n\n1.2 빌드 구성\n\nAndroid\n\niOS\n\nproject/build.gradle 에 클래스 경로를 지정한다.\n\nbuildscript {\n    dependencies {\n        // ...\n        classpath 'com.google.firebase:perf-plugin:1.4.0'\n    }\n\n\n /android/app/build.gradle 파일 상단에 플러그인 적용 코드를 추가한다.\n\napply plugin: 'com.android.application'\napply plugin: 'com.google.firebase.firebase-perf'\n\n\nx\n\n\n1.3 POD INSTALL OR GRADLE SYNC\n\n\n2. 커스텀 성능 측정\n\n--------------------------------------------------------------------------------\n\n1번 프로젝트 설정만 하더라도 기본적인 성능 측정은 시작된다. (네트워크 통신, 렌더링 성능)\n\n이 외의 커스텀 메소드( https://rnfirebase.io/reference/perf#methods\n[https://rnfirebase.io/reference/perf#methods] ) 를 활용하면 특정 기능이나 흐름에 대해서도 성능 측정이\n가능하다.\n\nimport perf from '@react-native-firebase/perf';\n\nasync function getRequest(url) {\n  // Define the network metric\n  const metric = await perf().newHttpMetric(url, 'GET');\n\n  // Define meta details\n  metric.putAttribute('user', 'abcd');\n\n  // Start the metric\n  await metric.start();\n\n  // Perform a HTTP request and provide response information\n  const response = await fetch(url);\n  metric.setHttpResponseCode(response.status);\n  metric.setResponseContentType(response.headers.get('Content-Type'));\n  metric.setResponsePayloadSize(response.headers.get('Content-Length'));\n\n  // Stop the metric\n  await metric.stop();\n\n  return response.json();\n}\n\n// Call API\ngetRequest('https://api.com').then(json => {\n  console.log(json);\n});\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227830944"
  },
  {
    "pageContent": "[Firebase] Jira 통합 설정\n\n\n1. FIREBASE CONSOLE 접속 후 PROJECT SETTINGS 페이지 진입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-022527.png?api=v2]\n\n\n2. 통합탭에서 JIRA 설치 버튼 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-022544.png?api=v2]\n\n\n3. 프로젝트 구성\n\n\n3.1 프로젝트 URL 입력\n\nhttps://[workspace-name].atlassian.net/projects/[project-key]의 포맷에 workspace 이름과\nproject 키 명칭만 맞춰서 넣으면 된다.\n\n예시: https://ecubelabs.atlassian.net/projects/CCNB\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-024244.png?api=v2]\n\n\n\n\n3.2 JIRA API 토큰 입력 및 인증\n\n이메일에는 이슈를 생성할 계정의 이메일과 API 토큰을 적으면 되는데, 이슈 요청자나\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA] 의 Atlassian Cloud\n[https://ecubelabs.atlassian.net/] 담당자에게 API 토큰을 요청하면 된다.\n\n\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]토큰 발급하는\n방법\n\n토큰은 최초 1회만 보여지기에 잘 복사를 해두는 것이 좋다.\n\nhttps://id.atlassian.com/manage-profile/security/api-tokens\n[https://id.atlassian.com/manage-profile/security/api-tokens] 로 이동해서 API 토큰을\n발급한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023532.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023704.png?api=v2]\n\n\n3.3. CRASHLYTICS 알림 설정\n\n프로덕션앱만 활성화 시키면 될 듯?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023340.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023359.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2249129989"
  },
  {
    "pageContent": "Pseudolocalization\n\n\n이게 무엇인가?\n\nLocalization을 적용한 앱들을 보면 가끔 특정 언어에서 레이아웃이 무너지는 경우가 발생한다.\n\n이런 문제가 발생하는 이유는 같은 문장이어도 언어마다 길이가 달라지기 때문인데,\n영어와 독일어를 비교하면 일반적으로 독일어가 영어보다 30%정도 더 길다고 한다.\n\nPseudolocalization는 Localization를 적용하는 과정에서 발생하는 이런 문제를 예방하기 위해 사용되는 테스트 방법이다.\n\n\n장점?\n\n * 개발자는 번역 담당자가 번역을 해주기 전에도 Pseudolocalization를 키로 사용하여 미리 작업을 해둘 수 있다.\n\n * 길이가 긴 다른 언어가 있어도 레이아웃이 무너지지 않도록 예방할 수 있다.\n\n * 언어에 따라 번역이 같기도 하고 다르기도 한 경우 Pseudolocalization를 키로 잡으면 된다.\n\n키\n\n영어\n\n한글\n\nÀççôûñţ Šéţţîñĝš\n\nAccount Settings\n\n계정 설정\n\nÀççôûñţ Šeţtîñĝš\n\nAccount Settings\n\n사용자 설정\n\n\n단점?\n\n * Pseudolocalization를 키로 사용하면 직접 입력하기가 너무 힘들다.\n\n * 프로그램의 도움 없이는 Pseudolocalization를 만들기 어렵다.\n\n * 원문이 뭔지 약간 알아보기 어렵다... (아래는 예시)\n   \n   Account Settings => [!!! Àççôûñţ Šéţţîñĝš !!!]\n\n\n참고\n\n * https://docs.lokalise.com/en/articles/2348943-pseudolocalization\n   [https://docs.lokalise.com/en/articles/2348943-pseudolocalization]\n\n * https://en.wikipedia.org/wiki/Pseudolocalization\n   [https://en.wikipedia.org/wiki/Pseudolocalization]\n\n * https://netflixtechblog.com/pseudo-localization-netflix-12fff76fbcbe\n   [https://netflixtechblog.com/pseudo-localization-netflix-12fff76fbcbe]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1702428891"
  },
  {
    "pageContent": "Localization\n\nl10n, 현지화라고 부르기도 한다.\n\n현지화가 제대로 하려면 국제화(Internationalization, i18n)\n[http://www.terms.co.kr/internationalization.htm]가 선행되어야 하며 개발하는 제품이 특정 언어나 문화,\n정서에 맞추는 과정이다.\n완벽하게 현지화가 된 제품은 해당 국가에서 개발된 제품처럼 이질감이 전혀 없다.\n\n\n고려해야 할 주제\n\n현지화를 제대로 하기 위해서는 이 외에도 매우 많은데, 그중 제일 일반적으로 다루는 부분들만 정리했다.\n\n * Translation\n\n * Timezone\n\n * 통화 표기\n   \n   * ex) 미국의 통화(USD)는 소수점 둘째 자리까지 표기하지만 한국의 통화(KRW)는 소수점 표기가 없다.\n   \n   * ICU Message Syntax\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142/ICU+Message+Syntax]\n     > Currency 참고\n\n * 숫자 표기\n   \n   * ICU Message Syntax\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142/ICU+Message+Syntax]\n     > Percentage 참고\n\n * 해당 국가의 휴일\n   \n   * ex) 이번주 수요일은 한글날인데 지라는 평일로 인식해서 스프린트 일수에 포함되는 문제가 있다.\n\n * 서비스 이름\n   \n   * ex) 한국 사람들이 영어 간판만 보다가 인사동에 있는 한글 간판을 보면 좋아한다. (지역/국가 정서 반영)\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210510-022010.png?api=v2]\n\n * 종교/정서적 문제\n   \n   * 개발자보다 기획자, 마케터, 번역가가 더 잘 알아야 하기 때문에 당장 중요하진 않다\n\n * 아이콘 사용\n   \n   * 특정 국가는 👌 제스쳐가 심한 욕으로 받아들여지므로 제품 내에서는 함부로 이모지/아이콘을 사용하면 안된다.\n     나무위키 참고 [https://namu.wiki/w/OK#s-4]\n\n\n잘못 적용된 예\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210510-020611.png?api=v2]\n\n컨플루언스에서 댓글을 작성하다 취소를 누르면 뜨는 황당한 모달.\n어떤게 댓글 작성을 취소하는 버튼인지 헷갈린다.\n\n물론 아틀라시안은 디자인 가이드를 잘 만든 편이라 주황색 버튼이 내가 목적으로 했던 동작댓글작성 취소을 Confirm해주는 버튼으로 자연스럽게\n인식하는 사람도 더러 있을수 있지만, 이것은 UI/UX가 열일했다고 보는게 맞다.\n이 예시는 현지화가 제대로 되었다고 보기 어렵다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210511-083950.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210511-084028.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20220120-022246.png?api=v2]\n\n아틀라시안은 한결같이 l10n을 엄청나게 못한다.\n잊을만하면 참신하고 새로운 이상한 번역 메세지를 보여준다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1784053767"
  },
  {
    "pageContent": "[Monorepo] 기본 구성 가이드\n\n\n개발 준비\n\n최신버전의 yarn만 설치되어 있으면 됩니다.\n\nnpm i -g yarn\n\n이미 yarn 2 환경설정된 프로젝트라면 바로 사용이 가능합니다.\n\n--------------------------------------------------------------------------------\n\n\n용어 설명\n\n\nYARN WORKSPACES 용어\n\n * workspace: 작업 공간이라 부르는 한 패키지의 최소 단위라고 보면 된다.\n\n * worktree: 작업 공간을 묶는 패키지들의 최상위 저장소. worktree를 선언해야 yarn workspaces 기능을 사용할 수\n   있다.\n\n--------------------------------------------------------------------------------\n\n\n새 프로젝트 설정\n\n새 프로젝트를 사용하기 위한 기본 설정은 이미 다 되어있다고 가정합니다.\n(프로젝트 폴더 생성 및 npm init 등..)\n\n\n0. YARN 2 설정\n\n모든 도구는 모든 개발자가 똑같은 동작을 보장받기 위해 프로젝트에만 설치하세요. (yarn 1 제외)\n\n * 의존성 관리: yarn 2+\n   \n   * yarn이 가진 workspaces 기능은 의존성을 버그 없이 잘 관리해주고 상당히 편합니다.\n   \n   * # 참고: https://yarnpkg.com/getting-started/install#per-project-install\n     yarn --version # 1.22.0 나와도 정상임\n     cd ~/path/to/project\n     yarn set version berry\n     yarn plugin import workspace-tools\n     yarn --version # 2.* 나와야함\n     git add .\n     git commit -m \"chore: Set to yarn version 2\"\n\n위 절차를 따른다면 특정 프로젝트에서만 yarn 2를 사용할 수 있게 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]기록용\n\n * 모듈 버전 관리 및 배포: yarn 2+\n   \n   * 후보군…\n     \n     * yarn workspaces ← 기능으로 당장은 충분히 커버 가능\n     \n     * https://docs.bit.dev/ [https://docs.bit.dev/] → ??\n     \n     * https://rushjs.io/pages/intro/welcome/\n       [https://rushjs.io/pages/intro/welcome/] → 마소 오피스팀이 개발함. 프로덕션에서 쓰고 있어 기능은\n       부족함 없겠지만 도입에 허들이 좀 있어보임\n     \n     * https://github.com/boltpkg/bolt [https://github.com/boltpkg/bolt] → 순수하게\n       yarn을 기반으로 동작한다고 하니 허들이 매우 낮겠지만 그만큼 기능이 부족할것으로 예상됨\n     \n     * https://bazel.build/ [https://bazel.build/] → 빡셀것같은데..\n     \n     * 이런저런 조사..? [https://github.com/SAP/luigi/issues/1105]\n   \n   * 이 문서 작성 도중 lerna는 사용하지 않기로 결정했습니다.\n     → 관리되지 않고 있음 [https://github.com/lerna/lerna/issues/2703] + yarn 2가 출시한지\n     1년이 넘었는데 lerna 최신버전과 사용할 수 없는 문제\n     [https://github.com/lerna/lerna/issues/2449#issuecomment-799814907]\n     \n     * 일부 유명 레포들은 lerna를 버리고 yarn만 사용하기도 합니다. (ex. babel\n       [https://github.com/babel/babel])\n     \n     * 의존성 관리를 제외하면 나머지 기능은 lerna가 더 강력합니다.\n     \n     * lerna와 yarn은 서로 충돌하지 않고 동작할 수 있도록 개발되어 있어 문제가 되지 않으며, 오히려 같이 사용하는것을\n       권장합니다. (Yarn Workspaces vs Lerna 참고\n       [https://yarnpkg.com/features/workspaces#yarn-workspaces-vs-lerna]) (How\n       does it compare to Lerna? 참고\n       [https://classic.yarnpkg.com/en/docs/workspaces/#toc-how-does-it-compare-to-lerna])\n\n\n1. WORKTREE 선언\n\nyarn workspaces 기능을 사용하기 위해 package.json에 workspaces 프로퍼티를 추가합니다.\n\n{\n  \"workspaces\": [\"packages/*\"]\n}\n\nyarn 2 버전부터 private을 true로 하지 않아도 됩니다.\n버전 1까지는 워크스페이스를 publish하지 않으므로 private 속성을 true로 하는것이 강제되었습니다.\n\n하지만 워크트리의 private을 true로 지정하지 않으면 워크트리 또한 워크스페이스처럼 취급될 수 있습니다.\n\nnode_modules 폴더가 생성되지 않나요?\nyarn에 새로 추가된 pnp 기능을 사용하지 않도록 해야합니다. →\nhttps://yarnpkg.com/configuration/yarnrc#nodeLinker\n[https://yarnpkg.com/configuration/yarnrc#nodeLinker]\n\n\n2. 워크트리에 새 패키지 추가\n\nmkdir packages/new-package\ncd packages/new-package\nyarn init\ncd ../../\n\n\nREFERENCES\n\n * https://classic.yarnpkg.com/en/docs/workspaces/\n   [https://classic.yarnpkg.com/en/docs/workspaces/]\n\n * https://yarnpkg.com/cli/workspace [https://yarnpkg.com/cli/workspace]\n\n * https://blog.heroku.com/building-a-monorepo-with-yarn-2\n   [https://blog.heroku.com/building-a-monorepo-with-yarn-2]\n\n * https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h\n   [https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h]\n\n * https://www.smashingmagazine.com/2019/07/yarn-workspaces-organize-project-codebase-pro/\n   [https://www.smashingmagazine.com/2019/07/yarn-workspaces-organize-project-codebase-pro/]\n\n\n\n\n관련된 글\n\n * [Monorepo] 관리 명령어\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712849032/Monorepo]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712717929"
  },
  {
    "pageContent": "[Monorepo] 관리 명령어\n * yarn berry (yarn 2+)\n   * 워크트리에서 모든 패키지 설치\n   * 워크스페이스에 워크스페이스 링크\n   * 워크스페이스에 워크스페이스 링크 제거\n   * 워크스페이스에 외부 패키지(npm 등) 설치\n   * 모든 워크스페이스에 패키지 설치\n   * 워크스페이스에 외부 패키지(npm 등) 제거\n   * 워크트리에 패키지 설치\n   * 패키지 배포\n * turbo\n   * 특징\n   * 명령어\n * 관련된 글\n\n\n\n--------------------------------------------------------------------------------\n\n\nYARN BERRY (YARN 2+)\n\nnpm을 대신하여 패키지를 관리하기 위해 사용한다.\n공통 모듈은 호이스팅하여 설치할 수 있기 때문에 node_modules를 최대한 가볍게 관리해줄수 있다.\n\n\n워크트리에서 모든 패키지 설치\n\nyarn install\n\nnpm i 하는것과 비슷하지만 워크스페이스에 있는 모듈도 전부 설치해줍니다.\n\n\n워크스페이스에 워크스페이스 링크\n\n원격 레지스트리에 의존하지 않는것을 원하는 경우 사용합니다.\n\n외부 패키지와 동일하게 워크스페이스에 있는 이름을 설치하면 됩니다.\n\nyarn workspace @ceed/ui add @ceed/core\n\n\n\n워크스페이스를 링크했을때 package.json에 나오는 workspace: 는 yarn 2부터 지원되는 프로토콜이며, yarn npm\npublish 스크립트가 실행 될 때 동적으로 바뀝니다.\nhttps://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n[https://yarnpkg.com/features/workspaces#workspace-ranges-workspace]\n(배포하는 패키지의 경우에만 필요하고, 모노레포 안에서 사용할 땐 변환될 필요도 없고 변환되지 않음.)\n\n\n워크스페이스에 워크스페이스 링크 제거\n\nyarn workspace @ceed/ui remove @ceed/core\n\n\n워크스페이스에 외부 패키지(NPM 등) 설치\n\nn개의 워크스페이스 중 일부에만 설치하려면 아래처럼 명령어를 여러번 실행해야 한다.\n\nyarn workspace @ceed/ui add lodash\nyarn workspace @ceed/query add lodash\n\n설치하는 패키지가 이미 다른 패키지에서 사용중이라면 가능한 같은 버전을 명시적으로 설치하세요.\n동일한 패키지를 2개 이상 설치한다면 워크트리에 있는 package.json에 추가하는것을 고려하세요.\n워크트리에 명시된 패키지는 hoisting됩니다.\n\n단, 이미 루트에 있는 package.json에 명시된 패키지라면 해당 버전을 따릅니다. (설치 시 버전을 명시하지 않으면)\n\n\n모든 워크스페이스에 패키지 설치\n\nyarn workspaces foreach add lodash\n\n이렇게 설치하는 경우 설치하는 패키지는 hoisting되어 워크트리의 node_modules에서 관리됩니다.\n\n만약 개발 의존성(devDependencies)을 추가하려는 경우 가능한 워크트리에 추가하세요.\n개발 환경에서 사용되는 패키지의 버전을 통일하도록 도와줍니다.\n\nnpm bash(scripts)에서 사용되는 cli가 아니라면 워크트리에만 추가해도 참조가 가능합니다.\n\n\n워크스페이스에 외부 패키지(NPM 등) 제거\n\nyarn workspace @ceed/ui remove lodash\n\n\n워크트리에 패키지 설치\n\n그냥 workspace 명령어 안쓰고 설치하면 된다.\n\nyarn add lodash\n\n\n패키지 배포\n\nyarn workspaces foreach run build && yarn workspaces foreach npm publish --access public --tolerate-republish\n\n위 스크립트를 워크트리의 package.json에 넣어두면 편하다.\n\n당연히 yarn npm login 을 통해 로그인이 되어 있으면서, 해당 패키지의 publish 권한이 있어야 합니다.\n\n--------------------------------------------------------------------------------\n\n\nTURBO\n\n\n특징\n\n * monorepo의 단점이나 문제점을 상쇄 해준다.\n   \n   * monorepo로 구성하면 장점도 많지만 여러 문제점을 만날 수 있는데, 이러한 문제점을 해결하기 위해 스크립팅/파이프라인을 구성하여\n     사용할 수 있게 해준다.\n   \n   * 각 프로젝트마다 다른 린팅/테스트/빌드 등의 명령어나 관리에 필요한 과정을 turbo.json 및 package.json 파일을 통해\n     일관적으로 관리할 수 있게 도와준다.\n   \n   * Remote cache 기능을 통해 중복되는 과정을 최대한 줄여 최적화 해준다.\n\n * npm/yarn 과 같은 패키지 매니저와 역할이 겹치지 않는다.\n   \n   * 단순히 작업을 제어하고 실행해주는 역할로서 존재하기 때문에 어떠한 간섭도 발생하지 않는다.\n\n * vercel이 인수하고 유지관리를 하고 있기 때문에 Next.js와도 궁합이 나쁘지 않으며 점점 더 좋아질것으로 기대된다.\n\n\n명령어\n\nturbo.json 파일에 있는 내용을 기준으로 명령어 파이프라인이 구성된다.\n\n파이프라인에 없는 경우 turbo cli를 통해 명령어를 실행할 수 없으므로 주의해야 한다.\n\n--------------------------------------------------------------------------------\n\n\n관련된 글\n\n * [Monorepo] 기본 가이드\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712717929/Monorepo]\n\n * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756771953/Monorepo+Pipeline+Lifecycle\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756771953/Monorepo+Pipeline+Lifecycle]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712849032"
  },
  {
    "pageContent": "[Monorepo] 이미 존재하는 프로젝트 병합\n * Regenerate package-lock.json\n * ⭐️ Upgrade modules, Node.js 🔔\n * Merge exists repository\n * Setting eslint, lint-staged\n   * eslint\n   * lint-staged\n * Edit Dockerfile , docker-compose.yml\n   * Dockerfile\n     * for Front-end\n     * for Back-end\n   * docker-compose\n     * docker-compose.yml\n     * Dockerfile.* (for Development dockerfile)\n * Edit GitHub Actions workflow\n * Edit Jenkinsfile for deploy\n * Edit Monorepo pipeline\n * Setting chromatic\n * Move cypress test code & clean up\n\n\n\n--------------------------------------------------------------------------------\n\n\nREGENERATE PACKAGE-LOCK.JSON\n\n재생성하고 빌드, 개발환경 실행, 배포 등 모두 잘 동작해야 현재 명시된 버전 표시자의 최신버전으로도 잘 돌아가는것을 확신할 수 있다.\npackage-lock 파일을 그대로 yarn.lock 파일로 합칠 수 없기 때문에 모노레포로 합치면서 최신버전을 사용하면 문제가 발생하는\n경우가 잦다.\n\n이 과정을 먼저 진행해서 동작을 확인한 뒤 아래 작업을 따르는것이 좋다.\n\n\n⭐️ UPGRADE MODULES, NODE.JS 🔔\n\n주로 개발 도구들이나 의존하는 패키지가 많은 핵심 도구들의 버전이 다르면 다른 버전의 타입이나 잘못된 버전의 패키지를 참조하기 때문에 정신건강에\n매우매우 좋지 않다. 🫠\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]여담\n\nYarn PnP 기능을 이용하면 이 문제가 상당히 개선될 수 있지만 ghost dependency가 있는 패키지를 사용하는 경우 직접 정리해줘야\n하고, 예전 버전의 개발 도구들을 사용하는 프로젝트의 경우 PnP를 지원하지 않는게 대부분이라 패키지를 업그레이드 해야하는건 매한가지다…\n\n아래 패키지 외에도 Major 버전이 다른 패키지끼리는 언제든지 문제가 발생할 수 있으므로 가능한 버전을 맞춰주는게 좋다.\n심한 경우 Minor or Patch 버전이 달라졌다고 동작하지 않는 경우도 있다.\n\n아래 도구는 무조건 모노레포에 합칠 앱들과 맞춰야 한다.\n그렇지 않으면 지옥이 펼쳐진다.\n\nMonorepo의 yarn.lock 파일에 명시된 패키지 버전에 호환된다면 그대로 옮겨도 된다.\n그렇지 않다면 다른 버전의 패키지가 설치돼서 다른 어플리케이션에 영향을 미칠수도 있다.\n\n * Node.js\n   \n   * 가장 먼저 업그레이드 해서 아무것도 안바꿨는데도 에러가 나지는 않는지 확인해야 한다.\n\n * TypeScript\n\n * react, @types/react\n\n * react-dom, @types/react-dom\n\n * jest, ts-jest, @types/jest\n\n * @storybook/*\n\n * webpack, webpack plugins…\n\n * eslint, eslint plugins\n\n\nMERGE EXISTS REPOSITORY\n\n 1. Add remote to Monorepo\n    \n    1. cd ~/Projects/haulla\n    \n    2. git remote add ha git@github.com:Ecube-Labs/hubspot-adapter.git\n\n 2. (Optional) Remove submodule from Monorepo\n    \n    1. git rm -f apps/hubspot-adapter\n    \n    2. git gc\n\n 3. ⚠️ Important ⚠️ Before following the next steps, ensure your Monorepo has no\n    Git changes.\n\n 4. Merge with history into Monorepo\n    \n    1. git fetch --all\n    \n    2. git merge -s ours --no-commit --allow-unrelated-histories ha/main\n    \n    3. git read-tree --prefix=apps/hubspot-adapter -u ha/main\n    \n    4. git commit -m \"some commit message\"\n\n 5. Include in workspace\n    \n    1. Delete package-lock.json, .nvmrc , .huskyrc .dockerignore in your app\n    \n    2. Edit package.json\n       \n       ...\n         \"workspaces\": [\n           \"packages/*\",\n           \"apps/generator-front\",\n           \"apps/hauler-front\",\n       +   \"apps/hubspot-adapter\"\n         ],\n    \n    3. Update yarn.lock file\n       yarn install\n\n 6. Remove remote\n    \n    1. git remote remove ha\n\n 7. Run\n    \n    1. yarn turbo lint --filter=<workspace-name>\n    \n    2. yarn turbo test --filter=<workspace-name>\n    \n    3. yarn turbo build --filter=<workspace-name>\n    \n    4. yarn turbo start --filter=<workspace-name>\n    \n    5. yarn turbo build-storybook --filter=<workspace-name>\n    \n    6. yarn turbo storybook --filter=<workspace-name>\n\n\nSETTING ESLINT, LINT-STAGED\n\n\nESLINT\n\nTODO\n\n\nLINT-STAGED\n\n{\n  \"**/*.{js,ts,jsx,tsx}\": [\"eslint --fix\", \"jest --bail --findRelatedTests\"]\n}\n\n\nEDIT DOCKERFILE , DOCKER-COMPOSE.YML\n\n\nDOCKERFILE\n\n\nFOR FRONT-END\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Monorepo\nDockerfile Template (Front-end)\n\n# NOTE: Build context must be specified as the root path.\n#######################\n## 1. Prune packages ##\n#######################\nFROM node:18-alpine AS builder\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN yarn global add turbo\nCOPY . .\nRUN turbo prune --scope=<package-name> --docker\n\n#################################\n## 2. Packages install & Build ##\n#################################\nFROM node:18-alpine AS installer\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN corepack enable\nRUN corepack prepare yarn@3.5.1 --activate\n\n# First install the dependencies (as they change less often)\n# COPY .gitignore .gitignore\nCOPY ./.yarn/ ./.yarn\nCOPY ./.yarnrc.yml .\nCOPY --from=builder /app/out/json/ .\nCOPY --from=builder /app/out/yarn.lock ./yarn.lock\nRUN yarn install\n\n# Build the project\nARG NODE_ENV\n# ARG HAULLA_API_HOST # FIXME: Example\n# ARG GOOGLE_MAP_API_KEY\n# ARG ENABLED_MENUS\n\nCOPY --from=builder /app/out/full/ .\nRUN yarn turbo run build --filter=<package-name>\n\n############\n## 3. Run ##\n############\nFROM nginx:1.18-alpine\n\nCOPY ./apps/<package-name>/nginx/default.conf /etc/nginx/conf.d/default.conf\n\nCOPY --from=installer /app/apps/<package-name>/dist /usr/share/nginx/html\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n\n\n\n\nFOR BACK-END\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Monorepo\nDockerfile Template (Back-end)\n\n# NOTE: Build context must be specified as the root path.\n#######################\n## 1. Prune packages ##\n#######################\nFROM node:18-alpine AS builder\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN yarn global add turbo\nCOPY . .\nRUN turbo prune --scope=<package-name> --docker\n\n#######################################\n## 2. Packages install & Build & Run ##\n#######################################\nFROM node:18-alpine AS installer\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN corepack enable\nRUN corepack prepare yarn@3.5.1 --activate\n\n# First install the dependencies (as they change less often)\nCOPY ./.yarn/ ./.yarn\nCOPY ./.yarnrc.yml .\nCOPY --from=builder /app/out/json/ .\nCOPY --from=builder /app/out/yarn.lock ./yarn.lock\nRUN yarn install\n\n# Build the project\nARG NODE_ENV\n# ARG COMMIT_HASH # FIXME: Example\n\nCOPY --from=builder /app/out/full/ .\nRUN yarn turbo run build --filter=<package-name>\n\nCMD [\"yarn\", \"workspace\", \"<package-name>\", \"start\"]\n\n\nnode 이미지는 https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md\n[https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md] 를 따라\nnode로 실행\n\n\nDOCKER-COMPOSE\n\n\nDOCKER-COMPOSE.YML\n\n    build:\n-     context: ./hubspot-adapter\n+     context: ./\n-     dockerfile: ../Dockerfile.hsa\n+     dockerfile: Dockerfile.hsa\n\n\n\n\nDOCKERFILE.* (FOR DEVELOPMENT DOCKERFILE)\n\nFROM node:18-alpine\n\nWORKDIR /hubspot-adapter\n\nCOPY package.json \\\n    yarn.lock \\\n    turbo.json \\\n    .yarnrc.yml \\\n    ./\nCOPY .yarn ./.yarn\nCOPY packages ./packages\nCOPY apps/hubspot-adapter ./apps/hubspot-adapter\n\nRUN yarn install\n\nCMD [\"yarn\", \"turbo\", \"start:dev\", \"--filter=hubspot-adapter\"]\n\n\nEDIT GITHUB ACTIONS WORKFLOW\n\nTODO…\n\n\nEDIT JENKINSFILE FOR DEPLOY\n\n * https://github.com/Ecube-Labs/haulla/commit/e2206a3bc7f236bb58c5beb2373cc2b4f81917de\n   [https://github.com/Ecube-Labs/haulla/commit/e2206a3bc7f236bb58c5beb2373cc2b4f81917de]\n   \n   * // Jenkinsfile\n     ...\n                 if (!prevCommitHash || isChange(prevCommitHash, \"hubspot-adapter\")) {\n                     echo \"Queuing hubspot-adapter\"\n                     buildStages[\"hubspot-adapter\"] = {\n                         stage(\"hubspot-adapter\") {\n                             build job: env.PIPELINE_NAME_HUBSPOT_ADAPTER, wait: false\n                         }\n                     }\n                 }\n\n * Specify the Dockerfile path\n   \n   * // apps/hubspot-adapter/Jenkinsfile\n     ...\n     - dockerBuild(imageName, env.IMAGE_TAG, \"--build-arg NODE_ENV=${env.NODE_ENV} --build-arg COMMIT_HASH=${commitHash} .\")\n     + dockerBuild(imageName, env.IMAGE_TAG, \"-f 'apps/hubspot-adapter/Dockerfile' --build-arg NODE_ENV=${env.NODE_ENV} --build-arg COMMIT_HASH=${commitHash} .\")\n\n\nEDIT MONOREPO PIPELINE\n\n인프라 관리자에게 문의…\n\n 1. Add new config to monorepo pipeline\n    \n    https://github.com/Ecube-Labs/infrastructure/pull/708\n    [https://github.com/Ecube-Labs/infrastructure/pull/708]\n\n 2. Remove app’s pipeline trigger\n    https://github.com/Ecube-Labs/infrastructure/pull/708\n    [https://github.com/Ecube-Labs/infrastructure/pull/708]\n\n 3. Change app’s pipeline repository\n    \n    1. https://github.com/Ecube-Labs/infrastructure/pull/709\n       [https://github.com/Ecube-Labs/infrastructure/pull/709]\n\n\nSETTING CHROMATIC\n\n프론트 앱만\n\n\nMOVE CYPRESS TEST CODE & CLEAN UP\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2686943559"
  },
  {
    "pageContent": "[Monorepo] \bPipeline / Lifecycle 관리\n\n\n모노레포 전환 후 문제점\n\n * 내부 모듈 참조\n   \n   * 앱을 빌드할 때 의존하는 내부 패키지가 빌드되어 있지 않은 경우 에러가 발생한다.\n\n\n개선 방안\n\n * turbo의 turbo.json 필요한 파이프라인을 실행하기 전에 의존하는 패키지의 특정 명령어를 실행하도록 라이프사이클을 구성한다.\n\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"pipeline\": {\n    \"start\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"start:dev\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"dist/**\"]\n    },\n    \"lint\": {},\n    \"test\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"storybook\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"build-storybook\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"storybook-static/**\"]\n    }\n  }\n}\n\n\n주의사항\n\n * 앞으로 개발시 명령어는 turbo로 실행해야 한다.\n   \n   * yarn turbo run lint --filter=haulla-hauler-front\n     yarn turbo run test --filter=haulla-generator-front\n     yarn turbo run build --filter=haulla-generator-front\n\n * 무지성으로 파이프라인을 추가하거나 라이프사이클을 수정하면 여러 어플리케이션에 영향을 미치므로 주의해야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2756771953/g.svg?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756771953"
  },
  {
    "pageContent": "[Monorepo] Tools\n\n모노레포는 모놀리식처럼 동작하지 않지만 모놀리식처럼 덩치가 크기 때문에 멀티레포처럼 단순하게 관리하면 여러 작업을 수행하는 속도가 느려진다.\n쾌적한 모노레포의 관리 및 개선을 위해 사용되는 도구나 기술을 정리한다.\n\n\nHUSKY [https://github.com/typicode/husky]\n\n * AS-IS\n   \n   * git hook을 쉽게 관리하기 위해 만들어진 husky는 하나의 Git repo에 하나의 구성만 정상적으로 동작한다.\n     git이 자체적으로 지원하는 hook을 기반으로 단순하게 동작하기 때문에 당연하다.\n   \n   * 그러므로 모노레포의 각 워크스페이스별로 git hook을 다르게 설정하는것이 불가능하다.\n\n * TO-BE\n   \n   * husky는 모노레포 루트에만 구성하고 아래의 lint-staged와 결합하여 사용한다.\n   \n   * 이러한 조합은 모노레포가 아니어도 husky에 의해 둔해지는 작업 속도를 높이는데 기여할 수 있다.\n\n\nLINT-STAGED [https://github.com/okonet/lint-staged]\n\n * Git stage에 있는 파일들을 인수로 받아 스크립트로 실행할 수 있게 돕는 cli다.\n\n * husky를 이용해 pre-commit hook에서 lint-staged로 각 워크스페이스에 설정된 eslint, jest를 실행하도록\n   구성 할 수 있다.\n\n\nJEST --FINDRELATEDTESTS\n\n * AS-IS\n   \n   * jest는 인수로 받은 glob에 해당하는 파일을 의존하는 테스트코드의 테스트를 수행할 수 있지만 해당 파일을 직접적으로 의존하는\n     테스트코드만 수행하고, 이 외에 영향을 미치게 되는 코드들의 테스트를 수행하지는 않는다.\n   \n   * 위와 같이 검사하면 a.ts를 의존하는 b.ts 가 있을때, a.ts를 수정한 경우 a.test.ts 만 테스트 코드를 수행하고\n     b.test.ts를 수행하지 않아 b.ts 가 정상적으로 동작하는지 확인하지 못한다.\n\n * TO-BE\n   \n   * lint-staged와 --findRelatedTests 플래그를 이용해 해당 테스트 파일의 의존성을 검사해 연관된 테스트 코드까지\n     포함하여 테스트를 수행한다.\n   \n   * https://thesametech.com/under-the-hood-jest-related-tests/\n     [https://thesametech.com/under-the-hood-jest-related-tests/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756804811"
  },
  {
    "pageContent": "Jest\n\n\n\n * Mock Functions\n   * mockReturnValue / mockReturnValueOnce\n   * mockImplementation / mockImplementationOnce\n\n\n\n\n\n\njest mocking에 관하여\n\nhttps://medium.com/@rickhanlonii/understanding-jest-mocks-f0046c68e53c\n[https://medium.com/@rickhanlonii/understanding-jest-mocks-f0046c68e53c]\n\n\n\n\n\nMOCK FUNCTIONS [https://jestjs.io/docs/en/mock-function-api.html]\n\n * mockReturnValue 는 mockReturnValueOnce 와 함께 사용한다.\n * mockImplementation 는 mockImplementationOnce 와 함께 사용한다.\n * 관련 이슈 [https://github.com/facebook/jest/issues/4474]\n   * TL;DR\n   * mockReturn 과 mockImplementation 을 섞어서 사용하면 제대로 동작 안한다.\n\n\nMOCKRETURNVALUE / MOCKRETURNVALUEONCE\n\n함수의 반환값을 단순히 mocking 하고 싶을때 사용하면 된다.\n\nconst f = jest.fn();\n\nf.mockReturnValue(1);\nf.mockReturnValueOnce(2);\n\nexpect(f()).toBe(2); // pass\nexpect(f()).toBe(1); // pass\n\n\nMOCKIMPLEMENTATION / MOCKIMPLEMENTATIONONCE\n\n함수의 구현체를 mocking 하고 싶을때 사용하면 된다.\n\nconst x = 5;\n\nconst f = jest.fn();\n\nf.mockImplementation(() => x + 1);\nf.mockImplementationOnce(() => x + 2);\n\nexpect(f()).toBe(7);\nexpect(f()).toBe(6);",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51806209"
  },
  {
    "pageContent": "[B] 테스트\n * 파일명은 *.test.ts\n\n\n파일명은 *.TEST.TS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2478997578/image-20220715-070927.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2478997578"
  },
  {
    "pageContent": "Jest error - Warning: React.createElement: type is invalid\n\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\n\nCheck the render method of `ServiceDetailScreen`.\n    in ServiceDetailScreen (created by ConnectFunction)\n    in ConnectFunction\n    in Provider\n\n\n\n\n\n\n\n\nCASES\n\n \n\n\nCASE 1\n\nMP 모바일에서는\n\n * BaseScreen.Header actions에 넘길때 Icon도 같이 넘기는데 Icon 문제였다.\n\n * 해당문제가 발생해도 테스트 코드는 실패하지 않는다. ( 무시해도 된다. )\n\nimport MoreIcon from 'app/../assets/img/ic_more_horiz.svg';\n\nactions={[\n            new MainTopBarAction({\n              icon: <MoreIcon />,\n              // onClick: () => {\n              //   const onClickButtonMore = this.props.navigation.getParam('onClickButtonMore');\n              //   onClickButtonMore();\n              // },\n            }),\n          ]}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/242876442"
  },
  {
    "pageContent": "Jest error - TypeError: Super expression must either be null or a function\n\n\n\nTypeError: Super expression must either be null or a function\n...\n...\n...\n\n  at _inherits (node_modules/@babel/runtime/helpers/inherits.js:5:11)\n  at src/app/screens/generator/service-detail/ServiceDetailScreen/ServiceDetailScreen.tsx:98:26\n  at Object.<anonymous> (src/app/screens/generator/service-detail/ServiceDetailScreen/ServiceDetailScreen.tsx:452:2)\n  at Object.<anonymous> (src/app/screens/generator/service-detail/ServiceDetailScreen/ServiceDetailScreen.spec.tsx:10:1)\n\n\n\n\n\n\n\n\nCASES\n\n \n\n\nCASE 1\n\n// jest.mock('app/components/BaseScreen', () => 'BaseScreen'); // X\n\n\n\nBaseScreen를 mock 처리 해버려서 생긴문제... ( header, body 등이 있으니…)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/242941993"
  },
  {
    "pageContent": "Jest error - Invariant Violation: Element type is invalid: expected a string\n(for built-in components) or a class/function\n\n\n\n Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named \nimports.\n\n    Check the render method of `ServiceDetailScreen`.\n\n      at invariant (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:55:15)\n      at createFiberFromTypeAndProps (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2056:11)\n      at createFiberFromElement (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2077:15)\n      at reconcileSingleElement (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:4629:23)\n      at reconcileChildFibers (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:4686:35)\n      at reconcileChildren (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6500:28)\n      at updateHostComponent (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6961:3)\n      at beginWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:7747:14)\n      at performUnitOfWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11413:12)\n      at workLoop (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11445:24)\n\n  console.error node_modules/react/cjs/react.development.js:188\n    Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and nam\ned imports.\n    \n    Check the render method of `ServiceDetailScreen`.\n        in ServiceDetailScreen (created by ConnectFunction)\n        in ConnectFunction\n\n\n\n\n\n * 모듈중에서 destructuring 해서 가져오고 있다면 전체를 mock하기 바란다. (에러표시가 제대로 안된다.)\n\n예)\n\nimport\n\nimport { TabBar, TabView } from 'react-native-tab-view';\n\nmock\n\njest.mock('react-native-tab-view', () => ({\n  TabView: 'TabView',\n  TabBar: 'TabBar',\n}));\n\n\n\n\nCASES\n\n\n\n\nCASE 1\n\n원인: TabView 컴포넌트\n\n * ServiceDetailScreen → TabView 컴포넌트 때문에 발생한다.\n\n수정:\n\njest.mock('react-native-tab-view', () => ({\n  TabView: 'TabView',\n  TabBar: 'TabBar',\n}));\n\n\n\n\nCASE 2\n\n원인: LoadableContainer 컴포넌트\n\n * LoadableContainer export 방식때문에 발생.\n\n * default가 아닌 export *로 내보내기 때문에 발생\n   \n   * class는 default로 보내는게 일반적이다.\n   \n   * default를 하면 import 하는 쪽에서 변경이 안되는 문제가 있어서 ecube에서는 안쓰는 쪽으로 가고있다.\n\n수정:\n\njest.mock('app/components/LoadableContainer', () => 'LoadableContainer'); // X\n\njest.mock('app/components/LoadableContainer', () => ({\n  LoadableContainer: 'LoadableContainer',\n})); // O\n\n\n\n\n\nCASE 3\n\n\n\njest.mock('react-native', () => ({\n  TouchableOpacity: 'TouchableOpacity',\n}));\n\n\n\njest.mock('app/components/KeyboardAccessorySubmitButton/KeyboardAccessorySubmitButton', () => ({\n  KeyboardAccessorySubmitButton: 'KeyboardAccessorySubmitButton',\n}));\n\n\n\n\n\nCASE 4\n\n원인: MainTopBar or MainTopBar assets mocking 필요.\n\n로그\n\nInvariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.\n\nCheck the render method of `MainTopBar`.\n\n해결책\n\njest.mock('app/components/MainTopBar', () => ({\n  MainTopBar: 'MainTopBar',\n  MainTopBarAction: jest.fn().mockReturnValue({}),\n}));\n\nor\n\nMainTopBar 버튼 테스트 필요한 케이스 아래 방법을 사용.\n\njest.mock('assets/img/ic_navigation_back.svg', () => 'NavigationBackIcon');\n\njest.mock('assets/img/ic_close_line.svg', () => 'CloseLineIcon');\n\njest.mock('@ceeds', () => ({\n  Divider: 'Divider',\n  ...\n});",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243073056"
  },
  {
    "pageContent": "Jest error - ReferenceError: React is not defined\n\n  console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9215\n    The above error occurred in the <MyServiceScreen> component:\n        in MyServiceScreen (created by ConnectFunction)\n        in ConnectFunction\n        in Provider\n    \n    Consider adding an error boundary to your tree to customize error handling behavior.\n    Visit https://fb.me/react-error-boundaries to learn more about error boundaries.\n\n\nReferenceError: React is not defined\n\n    at MyServiceScreen.render (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/src/app/screens/generator/my-service/MyServiceScreen/MyServiceScreen.tsx:206:5)\n    at finishClassComponent (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6839:31)\n    at updateClassComponent (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6794:24)\n    at beginWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:7742:16)\n    at performUnitOfWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11413:12)\n    at workLoop (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11445:24)\n    at renderRoot (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11528:7)\n    at performWorkOnRoot (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:12416:7)\n    at performWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:12328:7)\n    at performSyncWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:12302:3)\n\n\n\nCASE 1\n\n원인: 정확한 원인은 모르겠으나 react를 default 임포트로 읽어오면 발생한다.\n\n\n해결\n\n\nBEFORE:\n\nimport React from 'react';\n\n\nAFTER:\n\nimport * as React from 'react';\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/253198541"
  },
  {
    "pageContent": "Jest 최적화\n\nhttps://dev.to/vantanev/make-your-jest-tests-up-to-20-faster-by-changing-a-single-setting-i36\n[https://dev.to/vantanev/make-your-jest-tests-up-to-20-faster-by-changing-a-single-setting-i36]\n\nArticle TL;DR\n\n * \"test\": \"jest --maxWorkers=50%\",\n\n * \"test:ci\": \"jest --runInBand\",\n\nIn practice in Ecube-Labs\n\n * jest --maxWorkers=50% 옵션은 아이맥에서 별다른 성능 차이를 보이지 않았다\n\n * 테스트가 적은 건 잘 모르겠고 haulla-api 의 경우 runInBand 옵션이 없으면 테스트 돌다가 죽어버린다\n   \n   * 2, 3 은 runInBand 옵션 없이 죽은 경우\n   \n   * 4 는 runInBand 로 실행 됨\n     \n     * TODO\n       \n       * runInBand 가 없을때 thread 를 10개 정도 만들던데 runInBand 말고 worker thread 를 적당히\n         제한해도 될 듯…\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2767159415/image-20230731-085217.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2767159415"
  },
  {
    "pageContent": "[OAuth2] GCP OAuth2 Client 연동\n\n상위 페이지에 명시된 OAuth 2.0에 대한 내용을 숙지해야 한다.\n\nGoogle API를 사용하기 위해서는 GCP 콘솔에서 OAuth 2 client를 생성\n[https://developers.google.com/workspace/guides/create-credentials]해야 하는데, 유의할\n점이 있다.\n\n\nREFRESH TOKEN은 첫 인증(권한 승인)시에만 준다.\n\nOAuth 2에서의 Refresh token은 Access token의 만료 기한과 상관 없이 언제든 새 Access token을 발급할 수\n있는 마스터키와 같은 존재다.\n\n만약 과거에 인증을 해서 Refresh token을 알 수 없다면 인증을 했던 google 계정 설정의 permissions 페이지로 이동해서\n인증 했던 앱을 사용 중지한 뒤, 다시 권한 허용을 해야한다.\n\n이렇게 받아온 토큰 데이터는 잘 보관해둬야 나중에 언제든지 새로운 액세스 토큰을 발급할 수 있다.\n\nERP는 아주 오래 전부터 이렇게 구현하여 사용하고 있다.\nhttps://github.com/Ecube-Labs/erp-api/pull/305#discussion_r646221688\n[https://github.com/Ecube-Labs/erp-api/pull/305#discussion_r646221688]\n\n구글은 첫 인증 데이터를 파일로 저장하는 코드를 가이드로 제공하고 있다. →\nhttps://developers.google.com/calendar/quickstart/nodejs\n[https://developers.google.com/calendar/quickstart/nodejs]\n굳이 가이드를 따르지 않고 하드코딩을 해도 상관 없다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1891172498"
  },
  {
    "pageContent": "[통합 개발 가이드] ecubelabs\n\n\nROUTING\n\n[/wiki/download/attachments/1913913505/ccn-router.drawio.png?api=v2]\n\n아래에는 라우트와 관련된 설명이며, 각 프로젝트에 대한 설명은 소프트웨어\n[https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/119406640] 참고\n\n * CCN Router\n   \n   * 요청이 들어올 경우 정해진 경로\n     [https://github.com/Ecube-Labs/ecubelabs/blob/main/ccn-router/nginx.conf]에\n     따라 위 다이어그램과 같이 셋 중 하나로 전달\n   \n   * 실제 운영 환경과 동일하게 프록시 하도록 구현된 웹서버\n\n * CCN Current\n   \n   * 아래 모든 경우에 해당하지 않는 경우 해당 서버로 연결됨\n\n * CCN Front\n   \n   * 경로가 /v2로 시작하는 경우 연결됨\n\n * CCNx Front\n   \n   * 경로가 /v3로 시작하는 경우 연결됨\n\nCCN Current, CCNx Front 간 경로 차이는 /, /v3 차이 외에도 존재하는 경우가 있으므로 정확한 경로를 확인하기 위해서는\n라우트를 하고 있는 소스 코드를 참고해야 합니다.\n\n\nERP 제품 등록 및 CCN 업로드\n\n * ea, em, cb, iot 서비스가 켜져있어야 한다.\n   \n   * 제품 등록시 iot를 통해 device id를 생성하기 때문이다.\n\n * 절차\n   \n   1. ERP(http://localhost:9000 [http://localhost:9000])로 들어간다.\n   \n   2. 유심을 생성한다. Upload USIMs 기능을 이용하면 개발 환경에서 사용할 유심을 편하게 만들수 있다.\n      \n      [https://ecubelabs.atlassian.net/wiki/download/attachments/1913913505/image-20210611-071534.png?api=v2]\n   \n   3. 원하는 타입의 Product를 생성한다.\n   \n   4. 생성한 Product에 Device DB ID가 지정되어있는지 확인한다.\n      (만약 비어있다면 iot가 꺼져있거나 버그가 있는것이다.)\n   \n   5. 생성한 Product를 목록에서 체크해서 CCN Upload 버튼을 누른다.\n   \n   6. 제품 정보에 CCN DB ID가 채워져 있다면 업로드가 정상적으로 된것이다.\n      (만약 에러가 났다면 cb가 꺼져있거나 버그가 있는것이다.)\n\n\n통신 테스트\n\n위에 설명된 ERP 제품 등록 가이드를 따라 정상적인 제품을 등록을 먼저 해야한다.\n\n * ea, em, cb, iot, is 서비스가 켜져있어야 한다.\n\n * 절차\n   \n   * 원하는 제품의 UsimID, Device DB ID를 확인하고 기억해둔다.\n   \n   * 시뮬레이터(http://localhost:9090 [http://localhost:9090])로 들어간다.\n   \n   * 통신을 테스트 할 제품 유형에 맞는 페이지로 이동해서 USIM ID 또는 DEVICE DB ID를 입력한다.\n   \n   * 원하는 값을 입력해서 테스트한다.\n\n * 통신 테스트는 identifier(Device DB ID or UsimID) 외에 특정 값이 비어있다고 실패하면 문제가 있는것이다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1913913505"
  },
  {
    "pageContent": "Google Tag Manager\n * 마케팅/트래킹 스크립트 주입\n   * 1. Tags > New\n   * 2. Tag Configuration\n   * 3. Trigger\n   * 4. Submit\n   * 5. 스크립트 실제로 주입 되었는지 사이트에서 확인\n\n\n마케팅/트래킹 스크립트 주입\n\n\n1. TAGS > NEW\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095105.png?api=v2]\n\n\n2. TAG CONFIGURATION\n\nCustom HTML 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095153.png?api=v2]\n\n\n\nHTML 영역에 스크립트 추가\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095256.png?api=v2]\n\n\n3. TRIGGER\n\nAll Pages 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095406.png?api=v2]\n\n\n\n태그 이름은 봤을 때 뭐하는 태그인지 파악하기 쉽도록 작성한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095613.png?api=v2]\n\n\n4. SUBMIT\n\n우측 상단 Submit 버튼\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095733.png?api=v2]\n\n작업 내용 작성하고 Publish\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095914.png?api=v2]\n\n\n5. 스크립트 실제로 주입 되었는지 사이트에서 확인",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2604892470"
  },
  {
    "pageContent": "Google Analytics\n\nGA 가 포함된 웹사이트에 utm parameter 를 query string 으로 달고 들어가기만 하면 됨\n\nhttps://github.com/Ecube-Labs/haulla/blob/811022572c062c9b28ac904c035ef8a14ab86d99/apps/core-api/src/services/verifications/application/service.ts#L134\n[https://github.com/Ecube-Labs/haulla/blob/811022572c062c9b28ac904c035ef8a14ab86d99/apps/core-api/src/services/verifications/application/service.ts#L134]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2817098063/image-20231017-072407.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2817098063"
  },
  {
    "pageContent": "GTM 트리거 생성\n방법[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-082443.png?api=v2]\n\nhttp://www.haulla.com/support [http://www.haulla.com/support] 에서\nClick Here to start a chat 버튼 클릭 시 동작하는 트리거를 만든다는 가정 하에 작성하였습니다.\n\n\n\n트리거는 웹페이지 또는 모바일 앱에서 양식 제출, 버튼 클릭, 페이지뷰와 같은 특정 유형의 이벤트를 수신합니다. 해당 유형의 이벤트가 감지되면\n트리거가 태그를 실행하도록 알려 줍니다.\n\n\n1. 트리거 새로 생성\n\n구글 태그 관리자에서 트리거 → 새로 만들기 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-082936.png?api=v2]\n\n\n2. 트리거 유형 선택\n\n트리거 이름을 지정한 후 트리거 유형 선택 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-083155.png?api=v2]\n\n버튼 ‘클릭’ 시 동작하는 트리거를 생성해야 하므로\n클릭 -> 모든 요소 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-083440.png?api=v2]\n\n이 외에도 다른 유형을 선택하면 주어진 상황에 맞는 트리거를 만들 수 있다.\n(트리거 유형 [https://support.google.com/tagmanager/topic/7679108])\n\n\n3. 트리거 조건 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-085504.png?api=v2]\n\n위와 같은 상태에서는 사이트의 화면 아무데나 클릭해도 트리거가 동작한다.\n요구사항은 특정 URL에서 특정 텍스트를 포함한 버튼을 클릭했을때 동작하는 것이므로\n다음과 같이 설정할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20221004-004552.png?api=v2]\n\n\n\n이 외에도 조건을 추가해서 상황에 맞는 트리거 조건을 설정할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-090244.png?api=v2]\n\n사이트 안에 있는 어떤 요소(ex. <button 속성=값>) 를 찾아서 해당 요소의 속성 값이 특정 조건을 만족할 때 라는 트리거 조건을\n설정하고 싶다면 Click Classes, Click Element 같은 기본 제공 변수\n[https://support.google.com/tagmanager/answer/7182738?hl=ko&ref_topic=7182737] 을\n적절히 사용하면 된다.\n필요하다면 사용자 정의 변수 [https://support.google.com/tagmanager/answer/7683362?hl=ko]를 직접\n만들어서 원하는 값을 추적하는 것도 가능하다.\n\n\n4. 태그에 트리거 연결\n\n위에서 생성한 트리거를 태그에 연결\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20221004-010532.png?api=v2]\n\n\n5. 잘 동작하는지 확인\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2510520345/GTM#1.-Tag-Assistant%5BhardBreak%5D\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2510520345/GTM#1.-Tag-Assistant%5BhardBreak%5D]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2551153097"
  },
  {
    "pageContent": "GTM 링크 클릭\n트리거[https://ecubelabs.atlassian.net/wiki/download/attachments/2614951990/image-20230106-063443.png?api=v2]\n\n\n\n링크(<a/>)를 클릭했을 때 트리거가 동작하도록 만들려면 Just Links 로 만들면 된다.\n\n어떤 링크를 클릭했을 때 트리거가 동작할지도 지정할 수 있다.\n\n\n\nex)\n\n<Stack\n  direction=\"row\"\n  spacing={2}\n  component={Link}\n  href=\"/for-businesses/services\"\n>\n  <Typography variant=\"subtitle2\" css={{ display: 'flex', alignItems: 'center' }}>\n    LEARN MORE\n  </Typography>\n  <ArrowForward fontSize=\"small\" />\n</Stack>\n\n위와 같이 링크를 퍼블리싱 했을때 링크 클릭 트리거가 동작하게 하고 싶으면 다음과 같이 하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2614951990/image-20230106-064145.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2614951990"
  },
  {
    "pageContent": "GTM 폼 제출 트리거\n * 1. Form id 확인\n * 2. Form Submission 트리거 생성\n   * 2.1. 트리거가 동작하지 않는 경우\n\n\n1. FORM ID 확인\n\nform 에 id 가 없으면 개발자가 추가 해줘야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2439020578/image-20230214-045517.png?api=v2]\n\n공홈 quote request form 의 id 는 generatorLeadForm\n\n\n2. FORM SUBMISSION 트리거 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2439020578/image-20230214-045714.png?api=v2]\n\n\n2.1. 트리거가 동작하지 않는 경우\n\n개발자에게 폼 제출 버튼이 type=submit 으로 되어 있는지 문의\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2439020578"
  },
  {
    "pageContent": "Go/Operator SDK 개발 환경 설정\n\n\n1. GVM [https://github.com/moovweb/gvm] 설치\n\nxcode-select --install\nbrew update\nbrew install mercurial\nbash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n\n\n2. GO CLI 설치\n\ngo 바이너리는 1.4 버전 이전까지 C 로 컴파일 되어서 바로 사용할 수 있었지만, 1.5부터는 go 로 go cli를 컴파일 하기 때문에\n1.5 이상을 설치하기 위해서는 go 가 필요하다.\n\n그리고 1.20 이상 버전은 1.17.3 이상의 버전이 필요하므로 최신 버전 바이너리가 필요한 경우 다음과 같은 순서로 설치해야 한다.\n\n1.4 → 1.17.3 → 1.22\n\ngvm install go1.4 -B\ngvm use go1.4\nexport GOROOT_BOOTSTRAP=$GOROOT\ngvm install go1.17.13\ngvm use go1.17.13\nexport GOROOT_BOOTSTRAP=$GOROOT\ngvm install go1.22\ngvm use go1.22\n\n\n3. GO OPERATOR SDK 설치\n\nhttps://sdk.operatorframework.io/docs/installation/\n[https://sdk.operatorframework.io/docs/installation/]\n\nbrew install operator-sdk\n\n\n4. VSCODE GO EXTENSION 설치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3020783793/2024-05-28%20at%2019.02.48@2x.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3020783793"
  },
  {
    "pageContent": "Prompt Engineering\n\n * https://www.promptingguide.ai/kr/introduction/tips\n   [https://www.promptingguide.ai/kr/introduction/tips]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3068821564"
  },
  {
    "pageContent": "HuggingFace\n\n주소\n\nhttps://huggingface.co/ [https://huggingface.co/]\n\n특징\n\n * 배포된 LLM을 무료로 로컬 환경에서 import, run\n\n * FM(Foundation Model)의 깃허브\n\n * Open source AI Model을 사용할 수 있도록 SDK를 지원한다.\n   https://huggingface.co/docs/huggingface.js/index\n   [https://huggingface.co/docs/huggingface.js/index]\n   https://huggingface.co/docs/transformers.js/index\n   [https://huggingface.co/docs/transformers.js/index]\n\n * HuggingFace에서 모델들의 역할을 분류해 놓은 페이지\n   https://huggingface.co/tasks [https://huggingface.co/tasks]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069018135"
  },
  {
    "pageContent": "Audio-To-Text (Automatic Speech Recognition, ASR)\n\n자연어 음성을 자연어 문자로 변환하는 과정.\n\n * ASR LLM 모델들은 주로 .wav 확장자, sample-rate 16000으로 수행한다.\n\n * 처리량이 많은 작업이므로 빠른 응답속도가 필요하다면,\n   30초 이내의 Chunking을 통해 Streaming 방식으로 받을 수 있다.\n\n\n\n직접 구현하기 ( TRAMSFORMER.JS )\n\nHuggingFace의 ASR 모델 중 distil-whisper/distil-large-v3 을 가지고 수행하는 코드.\nGPU 가속 없이 구동하면 3분 이상의 시간이 걸린다. (M1 Pro 기준)\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]예시 코드\n\nyarn add @xenova/transformers axios wavfile\n\nimport {\n  AutomaticSpeechRecognitionOutput,\n  pipeline,\n} from \"@xenova/transformers\";\nimport axios from \"axios\";\nimport wavefile from \"wavefile\";\n\nconst getWavFile = async (url: string) => {\n  const response = await axios.get(url, {\n    responseType: \"arraybuffer\",\n  });\n  const buffer = Buffer.from(response.data);\n  const wav = new wavefile.WaveFile(buffer);\n  wav.toBitDepth(\"32f\");\n  wav.toSampleRate(16000);\n\n  let audioData = wav.getSamples();\n  if (Array.isArray(audioData)) {\n    if (audioData.length > 1) {\n      const SCALING_FACTOR = Math.sqrt(2);\n\n      for (let i = 0; i < audioData[0].length; ++i) {\n        audioData[0][i] =\n          (SCALING_FACTOR * (audioData[0][i] + audioData[1][i])) / 2;\n      }\n    }\n\n    audioData = audioData[0];\n  }\n\n  return Float32Array.from(audioData);\n};\n\nconst splitArrayBuffer = (\n  buffer: Float32Array,\n  chunkSize: number\n): Float32Array[] => {\n  const chunks = [];\n  const totalSize = buffer.length;\n  let start = 0;\n\n  while (start < totalSize) {\n    const end = Math.min(start + chunkSize, totalSize);\n    const chunk = buffer.slice(start, end);\n    chunks.push(chunk);\n    start = end;\n  }\n\n  return chunks;\n};\n\nconst audioToText = async (buffer: Float32Array) => {\n  const transcriber = await pipeline(\n    \"automatic-speech-recognition\",\n    \"distil-whisper/distil-large-v3\"\n  );\n  return transcriber(buffer, {\n    chunk_length_s: 30,\n    stride_length_s: 5,\n  }) as Promise<AutomaticSpeechRecognitionOutput>;\n};\n\nconst chunksToText = async (chunks: Float32Array[]) => {\n  console.log(\"transcribing chunks start\");\n  const transcriber = await pipeline(\n    \"automatic-speech-recognition\",\n    \"distil-whisper/distil-large-v3\"\n  );\n  let transcription = \"\";\n  for (const chunk of chunks) {\n    const result = await transcriber(chunk, {\n      chunk_length_s: 30,\n      stride_length_s: 5,\n    });\n    if (!(result instanceof Array)) {\n      transcription += result.text;\n      process.stdout.write(result.text);\n    }\n  }\n  return transcription;\n};\n\nexport const fileTotext = async (url: string) => {\n  const buffer = await getWavFile(url);\n  const chunks = splitArrayBuffer(buffer, (1024 * 1024) / 2);\n  console.time(\"transcription\");\n  const transcription = await chunksToText(chunks);\n  // const transcription = await audioToText(buffer);\n  console.log(transcription);\n  console.timeEnd(\"transcription\");\n  return transcription;\n};\n\nfileTotext(\n  \"example.wav\"\n);\n\n\n\n\n\n관련 SAAS 기술 스택 정리\n\n공급사\n\nAWS\n\nAssembly AI\n\nOpenAI\n\nAutomatic Speech Recognition(ASR)\n\nTranscribe\nhttps://aws.amazon.com/ko/pm/transcribe/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE&trk=3d9da6a1-603c-47a2-8832-148f358f6974&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE:G:s&s_kwcid=AL!4422!3!652835845611!e!!g!!amazon%20audio%20transcription!19910625295!147224435643\n[https://aws.amazon.com/ko/pm/transcribe/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE&trk=3d9da6a1-603c-47a2-8832-148f358f6974&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE:G:s&s_kwcid=AL!4422!3!652835845611!e!!g!!amazon%20audio%20transcription!19910625295!147224435643]\n\nSpeech-to-Text\nhttps://www.assemblyai.com/products/speech-to-text\n[https://www.assemblyai.com/products/speech-to-text]\n\nWhisper\nhttps://openai.com/index/whisper/ [https://openai.com/index/whisper/]\n\n * 속도 (5분 음성)\n\n60 seconds\n\n15 seconds\n\n15 seconds\n\n * 정확도\n\nGood\n\nGood\n\nGood\n\n * 비용\n\n1.44$ / h\n(free tier, 1h / month)\n\n0.12$ / h\n(free tier, 100h / month)\n\n0.36 $ / h\n(no free tier)\n\n * API 제공\n\nO\n\nO\n\nO\n\nLLM for Text Summarization (cloud computing 방식)\n\nBedrock\nhttps://aws.amazon.com/ko/bedrock/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE&trk=24a8f13a-f5db-4127-bcb7-8b2876aa4265&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE:G:s&s_kwcid=AL!4422!3!692062155749!e!!g!!aws%20bedrock!21058131112!157173586057\n[https://aws.amazon.com/ko/bedrock/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE&trk=24a8f13a-f5db-4127-bcb7-8b2876aa4265&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE:G:s&s_kwcid=AL!4422!3!692062155749!e!!g!!aws%20bedrock!21058131112!157173586057]\n\nLeMUR\n\ngpt-3.5-turbo-0125\n\n * 속도\n\n5~10 seconds\n\n * not yet to try\n\n5~10 seconds\n\n * 정확도\n\nGood\n\n * not yet to try\n\nGood\n\n * 비용\n\n0.0003$ / 1 api call\n(Claude-3-Haiku 기준)\n\n입력토큰\n0.00025$ / 1K tokens\n출력토큰\n0.00125$ / 1K tokens\n\n\n\napi call 1회당 평균\n입력토큰 1,000개,\n출력토큰 300개\n\nfree\n(유료 요금제 사용 기준)\n\nAPI 호출 시 summary까지 연속 적용 가능.\n\n0.0010$ / 1 api call\n(gpt-3.5-turbo 기준)\n\n입력토큰\n0.0005$ / 1K tokens\n출력토큰\n0.0015$ / 1K tokens\n\n\n\napi call 1회당 평균\n입력토큰 1,000개,\n출력토큰 300개\n\n\n\n * API 제공\n\nO\n\nO\n\nO\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3072524301"
  },
  {
    "pageContent": "Helm -> Terraform\n\nhttp://claude.ai [http://claude.ai] 로 작업 함.\n\nI'm an infrastructure engineer.\n\nHere's operator.yaml:\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]operator.yaml\n복사\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/component: operator\n    app.kubernetes.io/instance: percona-postgresql-operator\n    app.kubernetes.io/name: percona-postgresql-operator\n    app.kubernetes.io/part-of: percona-postgresql-operator\n    pgv2.percona.com/control-plane: postgres-operator\n  name: percona-postgresql-operator\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: operator\n      app.kubernetes.io/instance: percona-postgresql-operator\n      app.kubernetes.io/name: percona-postgresql-operator\n      app.kubernetes.io/part-of: percona-postgresql-operator\n      pgv2.percona.com/control-plane: postgres-operator\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: operator\n        app.kubernetes.io/instance: percona-postgresql-operator\n        app.kubernetes.io/name: percona-postgresql-operator\n        app.kubernetes.io/part-of: percona-postgresql-operator\n        pgv2.percona.com/control-plane: postgres-operator\n    spec:\n      containers:\n      - env:\n        - name: WATCH_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: PGO_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: LOG_STRUCTURED\n          value: \"false\"\n        - name: LOG_LEVEL\n          value: INFO\n        - name: DISABLE_TELEMETRY\n          value: \"false\"\n        image: perconalab/percona-postgresql-operator:main\n        imagePullPolicy: Always\n        livenessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /metrics\n            port: metrics\n            scheme: HTTP\n        name: operator\n        ports:\n        - containerPort: 8080\n          name: metrics\n          protocol: TCP\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n      serviceAccountName: percona-postgresql-operator\n\nHere's rbac.yaml:\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]rbac.yaml\n복사\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: percona-postgresql-operator\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: percona-postgresql-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - configmaps\n  - persistentvolumeclaims\n  - secrets\n  - services\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - endpoints\n  verbs:\n  - create\n  - delete\n  - deletecollection\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - endpoints/restricted\n  - pods/exec\n  verbs:\n  - create\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n  - patch\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - serviceaccounts\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - apps\n  resources:\n  - deployments\n  - replicasets\n  - statefulsets\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - batch\n  resources:\n  - cronjobs\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - batch\n  resources:\n  - jobs\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgbackups\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - update\n  - watch\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgbackups/finalizers\n  - perconapgclusters/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgbackups/status\n  verbs:\n  - create\n  - patch\n  - update\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgclusters\n  - perconapgupgrades\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgclusters/status\n  - perconapgrestores/status\n  - perconapgupgrades/status\n  verbs:\n  - patch\n  - update\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgrestores\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - policy\n  resources:\n  - poddisruptionbudgets\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - crunchybridgeclusters\n  verbs:\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - crunchybridgeclusters/finalizers\n  - crunchybridgeclusters/status\n  verbs:\n  - patch\n  - update\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgadmins\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgadmins/finalizers\n  - pgupgrades/finalizers\n  - postgresclusters/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgadmins/status\n  - pgupgrades/status\n  - postgresclusters/status\n  verbs:\n  - patch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgupgrades\n  - postgresclusters\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - rolebindings\n  - roles\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: service-account-percona-postgresql-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: percona-postgresql-operator\nsubjects:\n- kind: ServiceAccount\n  name: percona-postgresql-operator\n\nConvert these to Terraform resources.\n\n--------------------------------------------------------------------------------\n\nOutput\n\n# Deployment\nresource \"kubernetes_deployment\" \"percona_postgresql_operator\" {\n  metadata {\n    name = \"percona-postgresql-operator\"\n    labels = {\n      \"app.kubernetes.io/component\"    = \"operator\"\n      \"app.kubernetes.io/instance\"     = \"percona-postgresql-operator\"\n      \"app.kubernetes.io/name\"         = \"percona-postgresql-operator\"\n      \"app.kubernetes.io/part-of\"      = \"percona-postgresql-operator\"\n      \"pgv2.percona.com/control-plane\" = \"postgres-operator\"\n    }\n  }\n\n  spec {\n    replicas = 1\n\n    selector {\n      match_labels = {\n        \"app.kubernetes.io/component\"    = \"operator\"\n        \"app.kubernetes.io/instance\"     = \"percona-postgresql-operator\"\n        \"app.kubernetes.io/name\"         = \"percona-postgresql-operator\"\n        \"app.kubernetes.io/part-of\"      = \"percona-postgresql-operator\"\n        \"pgv2.percona.com/control-plane\" = \"postgres-operator\"\n      }\n    }\n\n    strategy {\n      type = \"Recreate\"\n    }\n\n    template {\n      metadata {\n        labels = {\n          \"app.kubernetes.io/component\"    = \"operator\"\n          \"app.kubernetes.io/instance\"     = \"percona-postgresql-operator\"\n          \"app.kubernetes.io/name\"         = \"percona-postgresql-operator\"\n          \"app.kubernetes.io/part-of\"      = \"percona-postgresql-operator\"\n          \"pgv2.percona.com/control-plane\" = \"postgres-operator\"\n        }\n      }\n\n      spec {\n        service_account_name = \"percona-postgresql-operator\"\n\n        container {\n          name  = \"operator\"\n          image = \"perconalab/percona-postgresql-operator:main\"\n\n          env {\n            name = \"WATCH_NAMESPACE\"\n            value_from {\n              field_ref {\n                field_path = \"metadata.namespace\"\n              }\n            }\n          }\n\n          env {\n            name = \"PGO_NAMESPACE\"\n            value_from {\n              field_ref {\n                field_path = \"metadata.namespace\"\n              }\n            }\n          }\n\n          env {\n            name  = \"LOG_STRUCTURED\"\n            value = \"false\"\n          }\n\n          env {\n            name  = \"LOG_LEVEL\"\n            value = \"INFO\"\n          }\n\n          env {\n            name  = \"DISABLE_TELEMETRY\"\n            value = \"false\"\n          }\n\n          image_pull_policy = \"Always\"\n\n          liveness_probe {\n            http_get {\n              path = \"/metrics\"\n              port = \"metrics\"\n            }\n            failure_threshold = 3\n          }\n\n          port {\n            container_port = 8080\n            name           = \"metrics\"\n            protocol       = \"TCP\"\n          }\n\n          security_context {\n            allow_privilege_escalation = false\n            capabilities {\n              drop = [\"ALL\"]\n            }\n            read_only_root_filesystem = true\n            run_as_non_root           = true\n          }\n        }\n      }\n    }\n  }\n}\n\n# ServiceAccount\nresource \"kubernetes_service_account\" \"percona_postgresql_operator\" {\n  metadata {\n    name = \"percona-postgresql-operator\"\n  }\n}\n\n# Role\nresource \"kubernetes_role\" \"percona_postgresql_operator\" {\n  metadata {\n    name = \"percona-postgresql-operator\"\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"configmaps\", \"persistentvolumeclaims\", \"secrets\", \"services\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"endpoints\"]\n    verbs      = [\"create\", \"delete\", \"deletecollection\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"endpoints/restricted\", \"pods/exec\"]\n    verbs      = [\"create\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"events\"]\n    verbs      = [\"create\", \"patch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"pods\"]\n    verbs      = [\"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"serviceaccounts\"]\n    verbs      = [\"create\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"apps\"]\n    resources  = [\"deployments\", \"replicasets\", \"statefulsets\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"batch\"]\n    resources  = [\"cronjobs\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"batch\"]\n    resources  = [\"jobs\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgbackups\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgbackups/finalizers\", \"perconapgclusters/finalizers\"]\n    verbs      = [\"update\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgbackups/status\"]\n    verbs      = [\"create\", \"patch\", \"update\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgclusters\", \"perconapgupgrades\"]\n    verbs      = [\"create\", \"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgclusters/status\", \"perconapgrestores/status\", \"perconapgupgrades/status\"]\n    verbs      = [\"patch\", \"update\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgrestores\"]\n    verbs      = [\"get\", \"list\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"policy\"]\n    resources  = [\"poddisruptionbudgets\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"crunchybridgeclusters\"]\n    verbs      = [\"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"crunchybridgeclusters/finalizers\", \"crunchybridgeclusters/status\"]\n    verbs      = [\"patch\", \"update\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgadmins\"]\n    verbs      = [\"get\", \"list\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgadmins/finalizers\", \"pgupgrades/finalizers\", \"postgresclusters/finalizers\"]\n    verbs      = [\"update\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgadmins/status\", \"pgupgrades/status\", \"postgresclusters/status\"]\n    verbs      = [\"patch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgupgrades\", \"postgresclusters\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"rbac.authorization.k8s.io\"]\n    resources  = [\"rolebindings\", \"roles\"]\n    verbs      = [\"create\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n}\n\n# RoleBinding\nresource \"kubernetes_role_binding\" \"service_account_percona_postgresql_operator\" {\n  metadata {\n    name = \"service-account-percona-postgresql-operator\"\n  }\n\n  role_ref {\n    api_group = \"rbac.authorization.k8s.io\"\n    kind      = \"Role\"\n    name      = kubernetes_role.percona_postgresql_operator.metadata[0].name\n  }\n\n  subject {\n    kind = \"ServiceAccount\"\n    name = kubernetes_service_account.percona_postgresql_operator.metadata[0].name\n  }\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069444097"
  },
  {
    "pageContent": "Hugginface.js\n\n타입스크립트 기반 SDK, serverless API로 웹 앱을 구축하게 해준다.\n\nTransformers.js은 지원 가능한 모델으로만 앱을 구축할 수 있지만,\nHuggingface.js는 서버리스로 모든 모델에 추론을 요청할 수 있다.\n\n\n\nHUB, RESPOSITORY 관련\n\nyarn add @huggingface/hub\n\n * HuggingFace 레포지토리의 생성, 삭제, 그리고 커밋을 할 수 있다.\n\n\n\nMODEL INFERENCE 관련\n\nyarn add @huggingface/inference\n\n * Hub의 Model을 이용한 추론 Serverless API\n\n * Rate Limit이 존재하지만, 정확한 값을 공개하고 있지 않다.\n\n * API Token이 필요하다.\n   https://huggingface.co/settings/tokens\n   [https://huggingface.co/settings/tokens]\n\n\n\nLLM CHATCOMPLETION 예시 코드\n\nimport { HfInference } from \"@huggingface/inference\";\n\nconst HF_TOKEN = process.env.HF_ACCESS_TOKEN;\n\nconst inference = new HfInference(HF_TOKEN);\n\nconst chat = async (input: string) => {\n  const out = await inference.chatCompletion({\n    model: \"mistralai/Mistral-7B-Instruct-v0.2\", // 기본적인 챗봇\n    messages: [\n      {\n        role: \"user\",\n        content: input,\n      },\n    ],\n    max_tokens: 100,\n  });\n  console.log(\"=\".repeat(50));\n  console.log(\"answer:\" + out.choices[0].message.content);\n\n  return out.choices[0].message.content;\n};\n\nchat('where is the capital of France')\n\nThe capital city of France is Paris.\nParis is one of the most renowned cities in the world,\nknown for its history, art, fashion, and cuisine\n\n\n\n * 시스템 프롬프트를 추가하고 싶으면, input과 함께 입력한다.\n   예시 코드에서는 이모지를 사용하는 교사 역할을 부여했다.\n\n * n-Shot Prompt Engineering을 추가해서 입력 형태와 맥락을 추가 제공할 수 있다.\n\n...\n  ...\n  const out = await inference.chatCompletion({\n    model: \"mistralai/Mistral-7B-Instruct-v0.2\", // 기본적인 챗봇\n    messages: [\n      {\n        role: \"user\",\n        content: \"Where is the capital of South Korea\",\n      },\n      {\n        role: \"assistant\",\n        content: \"Seoul.\"\n      },\n      // 1-Shot Prompt Engineering\n      {\n        role: \"user\",\n        content: \"you are a cool teacher. and you like face emoji. and please tell me simple 3 sentences.\" + input,\n      },\n    ],\n    max_tokens: 100,\n  });\n  ...\n  ...\n\n1. The capital city of France is Paris.\n ✨👏 (Paris is known as the \"City of Light\" and is famous for its beauty, art, and culture.)\n\n2. Paris is located in the northern part of France, along the Seine River.\n🇫🇷🔴 (\"France\" is the name of both the country and the people who live there.)\n\n3. Paris is home to many famous landmarks, such as the Eiffel Tower, the Louvre Museum, and Notre-Dame Cathedral.\n🥇😍 (These places attract millions of tourists every year.)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069837318"
  },
  {
    "pageContent": "Transformer.js\n\n * Huggingface.js는 serverless API로 모델을 이용한다면,\n   Transformer.js는 모델을 직접 구동한다.\n\n * Hub에서 필요한 모델을 다운로드하여, 브라우저 또는 Node.js 환경에서 모델 추론을 시작할 수 있다.\n   그렇기 때문에, 사용자 또는 구동 환경의 성능에 따라 추론 속도가 달라진다.\n\n * 또한, 지원하는 모델만 사용할 수 있다.\n   대신 지원하는 모델에 대해서는 옵션 설정이 가능하다. Huggingface.js은 불가.\n\n\n\n기본적인 사용 방식(PIPELINE)\n\nconst model = await pipeline(\n  \"${TASK_NAME}\", // hf.com/tasks에서 지원하는 추론 기능, 리터럴 타입을 Ctrl+Space로 확인 가능\n  \"${MODEL_NAME}\" // 입력하지 않으면 Default Model이 있음.\n)\n\nconst result = await model(input, options)\n\n\n\nAUDIO-TO-TEXT 예시코드\n\nimport {\n  AutomaticSpeechRecognitionOutput,\n  pipeline,\n} from \"@xenova/transformers\";\nimport axios from \"axios\";\nimport wavefile from \"wavefile\";\n\nconst getWavFile = async (url: string) => {\n  const response = await axios.get(url, {\n    responseType: \"arraybuffer\",\n  });\n  const buffer = Buffer.from(respotnse.data);\n  const wav = new wavefile.WaveFile(buffer);\n  wav.toBitDepth(\"32f\");\n  wav.toSampleRate(16000);\n\n  let audioData = wav.getSamples();\n  if (Array.isArray(audioData)) {\n    if (audioData.length > 1) {\n      const SCALING_FACTOR = Math.sqrt(2);\n\n      for (let i = 0; i < audioData[0].length; ++i) {\n        audioData[0][i] =\n          (SCALING_FACTOR * (audioData[0][i] + audioData[1][i])) / 2;\n      }\n    }\n\n    audioData = audioData[0];\n  }\n\n  return audioData;\n};\n\nconst audioToText = async (buffer: Float32Array) => {\n  const transcriber = await pipeline(\n    \"automatic-speech-recognition\",\n    \"distil-whisper/distil-large-v3\"\n  );\n  return transcriber(buffer, {\n    chunk_length_s: 30,\n    stride_length_s: 5,\n  }) as Promise<AutomaticSpeechRecognitionOutput>;\n};\n\nexport const fileTotext = async (url: string) => {\n  const buffer = await getWavFile(url);\n  console.time(\"transcription\");\n  const transcription = await audioToText(buffer as unknown as Float32Array);\n  console.log(transcription);\n  console.timeEnd(\"transcription\");\n  return transcription;\n};\n\nfileTotext(\n  \"https://public-testdrive.s3.us-west-2.amazonaws.com/n3wpEJb35Bk1wvtAZ351WBENFlkKlMfMqnckxY89kk5W.wav\"\n);\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3070099470"
  },
  {
    "pageContent": "반차 사용 Q&A\n\n팀\n\n점심 시간\n\nHaulla\n\n12:00 - 13:00\n\nSW\n\n12:50 - 13:50\n\nOthers\n\n12:30 - 13:30\n\n팀\n\n출근 시간\n\n퇴근 시간\n\nHaulla\n\n08:00\n\n * 반차 사용 시 13:00\n\n17:00\n\n * 반차 사용 시 13:00\n\nOthers\n\n09:00\n\n * 반차 사용 시 14:00\n\n18:00\n\n * 반차 사용 시 14:00\n\nOthers\n\n10:00\n\n * 반차 사용 시 15:00\n\n19:00\n\n * 반차 사용 시 15:00\n\n * 점심 시간 근무는 근로기준법상 허용되지 않습니다.\n\n * 예외의 사항으로 일찍 들어가셔야 한다면, 각 팀장님께 공유 및 승인 받으신 후 유연하게 퇴근하시면 됩니다. (휴게시간 30분)\n\n * 변경된 시간으로 사용하시다가 이슈 있으면 전달 주세요. (ex. 커먼스페이스 시간 책정이 이상한 것 같아요!)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2437283852"
  },
  {
    "pageContent": "CCN DB 계정별 권한\n\n\n예) 프로젝트명\n\nUsernameTableGranted Privileges예) ccnetworksccnetworks.*예) delete, execute,\ninsert, select, update\n\ncreate user 'ccn-current'@'%' identified by 'Our API is so crazy and nice';\ngrant insert, update, delete, select, execute on ccnetworks.* to 'ccn-current'@'%';\n\n\n\n\n\n\n\n\n\n\n\nCCN API\n\n * 적용\n\nUsernameTableGranted Privilegesccn-apiccnetworks.*delete, execute, insert,\nselect, update\n\n\nCCN CURRENT\n\n * 적용\n\nUsernameTableGranted Privilegesccn-currentccnetworks.*delete, execute, insert,\nselect, update\n\n\nCCN NOTI\n\n * 적용\n\nUsernameTableGranted Privilegesccn-noticcnetworks.*delete, execute, insert,\nselect, update\n\n\nCCN PROTOCOL\n\n * 적용\n\nUsernameTableGranted Privilegesccn-protocolccnetworks.*delete, execute, insert,\nselect, update\n\n\nCCN TRACKER PROTOCOL\n\n * 적용\n\nUsernameTableGranted Privilegestracker-protocolccnetworks.*execute, insert,\nselect, update\n\n\nERP API\n\n * 적용\n\nUsernameTableGranted Privilegeserpccnetworks.*delete, execute, insert, select,\nupdate\n\n\nPARTNER API\n\n * 적용\n\nUsernameTableGranted Privilegespartner-apiccnetworks.*execute, insert, select,\nupdate\n\n\nRELAY SERVICE SERVER\n\n * 적용\n\nUsernameTableGranted Privilegesrelay-serviceccnetworks.*select\n\n\nVOLUME CURVE SERVER\n\n * 적용\n\nUsernameTableGranted Privilegesccn-volume-logccnetworks.*delete, execute,\ninsert, select, update\n\n\nROUTE OPTIMIZER (JAMES MODULE)\n\n * 적용\n\nUsernameTableGranted Privilegesjames-moduleccnetworks.*delete, execute, insert,\nselect, update\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/36044865"
  },
  {
    "pageContent": "Medium: Tech blog 로그인 방법\n\n\n1. 미디움에 들어간다.\n\nhttps://medium.com/ [https://medium.com/]\n\n\n2. 사이트 우측 상단에 있는 SIGN IN 버튼을 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/123437456/image2019-3-18_13-44-51.png?api=v2]\n\n\n3. 이메일로 로그인을 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/123437456/image2019-3-18_13-45-21.png?api=v2]\n\n계정: sw@ecubelabs.com [sw@ecubelabs.com]\n\n\n4. 메일 박스를 확인한다.\n\n로그인을 할 수 있는 링크가 메일로 온다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/123437456/image2019-3-18_13-46-23.png?api=v2]\n\n\n5. 퀄리티 높은 글을 쓴다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/123437456/image2019-3-18_13-49-8.png?api=v2]\n\n끄읏.\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/123437456"
  },
  {
    "pageContent": "DB 접근 정보\n\n\n\n\n\nDBS\n\nDB server\n\nSubnet type\n\nSSH Host\n\nDB endpoint\n\ndatabase\n\nccn-cluster\n\npublic\n\nX\n\nccn-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com]\n\nccn-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com] (read\nonly)\n\nccnetworks\n\nccn-stage-cluster\n\npublic\n\nX\n\nccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com]\n\nccn-stage-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com] (read\nonly)\n\nccnetworks\n\necubelabs\n\npublic\n\nX\n\necubelabs.cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ecubelabs.cstvquklpixk.us-west-2.rds.amazonaws.com]\n\nproduct_db(A.K.A ERP 디비), ecubelabs, ...(질문)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/help_16.png]\n\necubelabs2\n\nprivate\n\nbastion-ecubelabs2-k8s-lo-j8dskm-5da00e4fd9deda49.elb.us-west-2.amazonaws.com\n[http://bastion-ecubelabs2-k8s-lo-j8dskm-5da00e4fd9deda49.elb.us-west-2.amazonaws.com]\n\necubelabs2.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com (writer)\n\necubelabs2.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com (reader)\n\n * haulla\n\n * payment\n\n * gt\n\n * device\n\n * dialpad\n\n * notification\n\n * link\n\necubelabs2-stage\n\nprivate\n\nbastion-ecubelabs2-stage--g9rupm-cf377f479d2be8f3.elb.us-west-2.amazonaws.com\n[http://bastion-ecubelabs2-stage--g9rupm-cf377f479d2be8f3.elb.us-west-2.amazonaws.com]\n\necubelabs2-stage.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com (writer)\n\necubelabs2-stage.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com (reader)\n\n * gt\n\n * haulla\n\n * payment\n\n * simulator\n\n * storage\n\n * tycoon\n\n * webhook\n\n * notification\n\n * link\n\nccn2-cluster\n\nprivate\n\nbastion-ecubelabs2-k8s-lo-j8dskm-5da00e4fd9deda49.elb.us-west-2.amazonaws.com\n[http://bastion-ecubelabs2-k8s-lo-j8dskm-5da00e4fd9deda49.elb.us-west-2.amazonaws.com]\n\nccn2-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn2-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com] (writer)\n\nccn2-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn2-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com]\n(reader)\n\n * ccnetworks\n\n * product_db\n\nccn2--cluster-stage\n\nprivate\n\nbastion-ecubelabs2-stage--g9rupm-cf377f479d2be8f3.elb.us-west-2.amazonaws.com\n[http://bastion-ecubelabs2-stage--g9rupm-cf377f479d2be8f3.elb.us-west-2.amazonaws.com]\n\nccn2-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn2-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com] (writer)\n\nccn2-stage-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com\n[http://ccn2-stage-cluster.cluster-ro-cstvquklpixk.us-west-2.rds.amazonaws.com] (reader)\n\n * ccnetworks\n\n * product_db\n\n * 신규로 생성하는 DB 는 보안을 위해 private subnet 에 위치해야 합니다\n\n\n\n\n\nDB 접근\n\nSSH host 값이 있는 DB 는 퍼블릭 접근이 제한되어 있고 SSH 터널링을 통해 접근합니다\n\n[/wiki/download/attachments/120783771/db-ssh-tunneling.xml.png?api=v2]\n\n\nDB 계정 생성 요청\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]에게\n요청하세요\n\n\nSSH PUBLIC KEY 등록 요청\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]에게\n요청하세요\n\n\nSEQUEL PRO 예시\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/120783771/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-06-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.33.54.png?api=v2]\n\n * MySQL Host: DB endpoint (위의 테이블 참고)\n\n * Username: DB user name\n\n * Password: DB user password\n\n * SSH Host: SSH Host (위의 테이블 참고)\n\n * SSH User: dev\n\n\nTROUBLESHOOTING\n\n\nSSH CONNECTION FAILED (SEQUEL PRO) 또는 WARNING: REMOTE HOST IDENTIFICATION HAS\nCHANGED!\n\nSSH Host로 사용되는 서버의 인증 정보가 로컬에 저장되어있던 인증 정보와 다른 것으로 변경되었을 수 있습니다.\n\n *  ~/.ssh/known_hosts 에서 해당 host를 삭제\n\n * 또는 ssh-keygen -R bastion-......com (IP 또는 도메인) \n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783771"
  },
  {
    "pageContent": "Bastion SSH key 등록\n\n신규로 생성한 DB들은 보안을 위해 private subnet에 위치해서 AWS의 같은 서브넷에 위치한 네트워크가 아니라면 연결이 불가능하다.\n\n그래서 터널링이 필요한데, 터널링을 위해서는 bastion ec2에 ssh public key를 추가해야 한다.\n\n그리고 이것을 원한다면 DB 접근 정보\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783771/DB] 에 나와있듯이\n관리자에게 요청해서 추가해야 한다.\n\n--------------------------------------------------------------------------------\n\n기억력이 나쁜 관리자를 위해 SSH key 추가 방법을 적어두자면,\n\n 1. bastion ec2에 접속한다.\n\n 2. ssh public key를 추가한다.\n\n아주 간단 😐",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243269778"
  },
  {
    "pageContent": "MySQL 최초 로그인시, 비밀번호 변경\n\n본인 이외에 그 누구도 본인 계정으로 로그인 할 수 없도록, 반드시 최초 로그인시 비밀번호를 새로 설정해주세요.\n\nGUI로 최초 로그인시 비밀번호 변경을 지원하는 MySQL GUI Client는 MySQL WorkBench 등이 있다.\n\n(warning)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/warning.png]\nSequel Pro는 현재 최초 로그인시 비밀번호 변경을 GUI로 지원하지 않는다. 쿼리로 비밀번호를 변경하자.\n\n--------------------------------------------------------------------------------\n\n\n직접 SQL 쿼리하여 비밀번호 변경\n\nSET PASSWORD = PASSWORD('new password 1234');\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f646-200d-2642-fe0f.png]\nSo easy\n\n\nMYSQL WORKBENCH를 이용하여 비밀번호 변경\n\n\n\nmysql workbench가 최초 로그인시 비밀번호 변경을 지원은 하지만 IDE가 깨진다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/303202340/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-01-15%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.16.05.png?api=v2]\n\n이 상태에서 변경하는 방법을 설명하겠습니다.\n\n현재화면은 input 박스가 3개가 겹친 화면이다.\n\n 1. 현재 비밀번호\n\n 2. 새로운 비밀번호\n\n 3. 새로운 비밀번호 확인\n\n\n\ninput 박스를 누르면 3번째 input 박스를 누르게 된다. input에 파랑색으로 불빛이 들어 올것이다.\n\n * 이 상태에서 Shift+ Tab 을 2번 누르도록 하자. ( 여전히 파랑색 불빛이 들어와야 한다. )\n\n * 이 상태에서 현재 비밀번호를 입력하고 Tab을 누른다.\n\n * 이 상태에서 새로운 비밀번호를 입력하고 Tab을 누른다.\n\n * 이 상태에서 새로운 비밀번호를 한번 더 입력하고 Enter를 누른다. ( 해당 input창이 최상단에 있는 거라서, input창에 *\n   이런식으로 비밀번호가 들어가는 것이 보인다.)\n\n\n\n\n다른 방법\n\n * 추가 부탁드립니다…ㅎ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/303202340"
  },
  {
    "pageContent": "단말 관리대장\n\n\nAPPLE\n\nApple 기기에서 Apple ID 변경 금지\n\niOS 메이저 업그레이드 금지\n\n * 옛날 버전에서도 문제 없는지 확인하기 위함\n\n기종\n\n애플 ID\n\n버전\n\n용도\n\n사용자\n\niPhone 7\n\nsw@ecubelabs.com\n\n15.7\n\n이큐브랩 Apple 관리자 인증\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\niPhone SE\n\nsw@ecubelabs.com\n\n14.0\n\n이큐브랩 Apple 관리자 인증\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\niPhone 5S\n\nmoongchi@ecubelabs.com\n\n * 미국 앱스토어\n\n12.5.2\n\n테스트\n\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\niPad 5세대\n\nmoongchi@ecubelabs.com\n\n * 미국 앱스토어\n\n13.6\n\n테스트\n\n * Legacy CCN 앱 (1.2.6)\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\nANDROID\n\n단말 관련 사항\n\n사용관리\n\n비고\n\n기종\n\n제조사\n\n버전\n\nUSIM Serial NO.\n\n대여일\n\n용도\n\n사용자\n\nPixel XL\n\nGoogle\n\n10.0\n\n\n\n\n\n단말 QA 검증용\n\n\n\n\n\nGalaxy Tab A 8.0\"(SM-T387V)\n\nSamsung\n\n9.0\n\n1808400687013F (NFCN2-U04)\n\n\n\n단말 QA 검증용\n\n\n\n\n\nGalaxy A10\n\nSamsung\n\n9.0\n\n\n\n\n\n개발용\n\n\n\n\n\nTrek 2 HD(k88)\n\nZTE\n\n7.1.1\n\n\n\n\n\n개발용\n\n\n\n\n\nG Pad 7.0 (LG-V400)\n\nLG\n\n4.4.2\n\n\n\n\n\n개발용\n\n\n\n\n\nRedmi 4A\n\nXiaomi\n\n6.0.1\n\n\n\n\n\n개발용\n\n\n\n\n\n98 (M1E4)\n\nTECLAST\n\n6.0\n\n\n\n\n\n개발용\n\n\n\n\n\nP10_4G\n\nTECLAST\n\n8.1.0\n\n\n\n\n\n개발용\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/428245615"
  },
  {
    "pageContent": "지리 좌표계\n\n\nWGS-84\n\n--------------------------------------------------------------------------------\n\n세계 지구 좌표 시스템. 국제 표준 입니다.\n\n * 글로벌하게 가장 많이 이용하는 좌표계: gps 센서값 등\n * 우리 DB 상 모든 좌표 수치는 이 좌표계를 따릅니다.\n * google/baidu map 모두 중국 지역을 제외하고는 이 좌표계를 따릅니다.\n\n\nGCJ-02\n\n--------------------------------------------------------------------------------\n\nGCJ-02는 WGS-84에 기초한 중국 측량국에 의해 공식화 된 측지 자료입니다. 위도와 경도에 명백하게 랜덤 한 오프셋을 추가하는 난독화\n알고리즘을 사용합니다.\n\n * google map 이 중국 지역(홍콩 제외)에서 이용하는 예외적인 좌표계.\n * 우리 제품 좌표 등이 중국 지역에 있고, google map 에 표시하는 경우, wgs2gcj converting 하여 도출된 좌표값으로\n   표시해야됨.\n\n\nBD-09\n\n--------------------------------------------------------------------------------\n\nBD-09는 Baidu Maps에서 사용되는 지리 좌표 시스템으로 GCJ-02에 \"사용자의 개인 정보를보다 잘 보호하기 위해\"난독 화를\n추가합니다. Baidu는 Google 또는 GPS (WGS-84) 좌표를 Baidu 좌표로 변환하는 API 호출을 제공합니다.\n\n * baidu map 이 중국-홍콩/마카오/대만 포함- 지역에서 이용하는 독자적인 좌표계.\n * 우리 제품 좌표 등이 중국 지역에 있고, baidu map 에 표시하는 경우, wgs2bd converting 하여 도출된 좌표값으로\n   표시해야됨.\n * 특이점은, baidu map 이라고해서 전세계 지역 좌표를 모두 이 좌표계로 따르게 하지는 않음. 중국-홍콩/마카오/대만 포함- 외 지역은\n   WGS-84 좌표계를 따름.\n\n\n클라이언트 구현시 \"중국 지역\"의 경우 필요 고려사항\n\n--------------------------------------------------------------------------------\n\n\nDB에서 좌표를 받아올 때\n\n * google map 에 표시하는 경우: 홍콩 제외. wgs2gcj converting 필요.\n * baidu map 에 표시하는 경우: 홍콩/마카오/대만 포함. wgs2bd converting 필요.\n * 예시: 제품 마커 표시 등.\n\n\n클라이언트 상에서 취한 좌표를 이용하여 DB에 갱신/삽입할 때\n\n * google map 이용의 경우: gcj2wgs converting 필요.\n * baidu map 이용의 경우: bd2wgs converting 필요.\n * 예시: 제품 마커 수동 이동 후 업데이트, 수거 경로 최적화에서 waypoint(특히 시작점) 설정 후 요청 상황 등.\n\n\n맵 프로바이더 <-> 지역간 사용해야 하는 좌표계\n\n맵중국(홍콩/마카오/대만 제외)홍콩/마카오/대만이외의 모든 지역Google\n\nGCJ-02\n\n(마카오/대만은 확인 필요. 이호준 (Jimmy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence])\n\nWGS-84\n\n(마카오/대만은 확인 필요. 이호준 (Jimmy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence])\n\nWGS-84BaiduBD-09BD-09WGS-84\n\n\n정리\n\n * DB 상에서는 무조건 WGS-84.\n * Google map 은 GCJ-02(중국-홍콩 제외- 내), WGS-84(중국-홍콩 제외- 외).\n * Baidu map 은 BD-09(중국-홍콩/마카오/대만 포함- 내), WGS-84(중국-홍콩/마카오/대만 포함- 외).\n * 좌표를 DB에서 가져와 표시할 때, DB에 갱신/삽입할 때, 중국 지역이라면 적절한 converting 과정이 필요.\n\n\n모바일 클라이언트 구현시 특이사항\n\nBaidu에서 제공하는 모바일 클라이언트용 SDK(Android SDK v4.3~, iOS SDK v3.3~ 기준)의 경우,\n중국-홍콩/마카오/대만 포함- 지역에서 BD-09 좌표계 대신 GCJ-02 좌표계를 기준하여 입/출력하여 사용하도록 되어있습니다.\n\n참조\n\n * http://lbsyun.baidu.com/index.php?title=androidsdk/guide/coordtrans\n   [http://lbsyun.baidu.com/index.php?title=androidsdk/guide/coordtrans]\n * http://lbsyun.baidu.com/index.php?title=iossdk/guide/coordtrans\n   [http://lbsyun.baidu.com/index.php?title=iossdk/guide/coordtrans]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122356038"
  },
  {
    "pageContent": "중국\n\n\n행정 구역 경계 데이터\n\n--------------------------------------------------------------------------------\n\n홍콩을 포함하고 있는 데이터 입니다.\n\n\nLEVEL 0 (COUNTRY)\n\nSHAPEFILE (WGS-84)\n\n출처 : https://data.humdata.org/dataset/china-administrative-boundaries\n[https://data.humdata.org/dataset/china-administrative-boundaries]\n\nchn_admbnda_adm0_ocha.zip\n[/wiki/spaces/SW/pages/122520073?preview=%2F122520073%2F122257909%2Fchn_admbnda_adm0_ocha.zip]\n\nKML (WGS-84)\n\n출처 : https://data.humdata.org/dataset/china-administrative-boundaries\n[https://data.humdata.org/dataset/china-administrative-boundaries]\n\nchn_admbnda_adm0_ocha.kmz\n[/wiki/spaces/SW/pages/122520073?preview=%2F122520073%2F122421811%2Fchn_admbnda_adm0_ocha.kmz]\n\nGEOJSON (WGS-84)\n\n출처 : 위의 KML파일로부터 convert된 데이터 입니다.\n\nConverter : https://mygeodata.cloud/converter/\n[https://mygeodata.cloud/converter/]\n\nchn_admbnda_adm0_ocha.ge…\n[/wiki/spaces/SW/pages/122520073?preview=%2F122520073%2F122225127%2Fchn_admbnda_adm0_ocha.geojson]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122520073"
  },
  {
    "pageContent": "지구 표면의 두 지점간 거리 구하기(haversine)\n\n프로젝트 마다 두 지점간 거리를 위경도로 계산해야 하는 경우가 많은 것 같아서 정리합니다.\n(https://github.com/Ecube-Labs/haulla-api/pull/333#discussion_r390764356\n[https://github.com/Ecube-Labs/haulla-api/pull/333#discussion_r390764356])\n\n더 좋은 모듈이 있다면 수정 부탁드립니다 :)\n\n\n\n지구 표면에 있는 두 지점간 거리를 위도, 경도로 계산하기 위해\nhaversine(https://en.wikipedia.org/wiki/Haversine_formula\n[https://en.wikipedia.org/wiki/Haversine_formula]) 계산 공식이 흔하게 사용 되는 것 같다. 계산 공식은\n링크에 있으니 참고하면 될 것 같다. 계산 공식을 보고 계산식을 직접 구현할 필요는 없을 것 같고, 이와 관련해 많은 npm 모듈이 있는데\n상황에 따라\n적절한(https://github.com/Ecube-Labs/haulla-api/pull/333#discussion_r390767714\n[https://github.com/Ecube-Labs/haulla-api/pull/333#discussion_r390767714]) 모듈을\n찾아서 사용하면 될 것 같다.\n\n\n1. CHEAP-RULER\n\n * how to use: https://www.npmjs.com/package/cheap-ruler\n   [https://www.npmjs.com/package/cheap-ruler]\n\n * 두 지점간 거리를 계산할 때 매우 정확하지는 않지만 빠르게 계산한다고 설명하고 있다. 설명대로 매우 정확히 거리를 측정할 필요가 없지만\n   성능이 중요한 경우 사용하면 좋을 것 같다. 아마 대부분의 경우 이 모듈이 사용될 것 같다.\n\n\n2. HAVERSINE\n\n * how to use: https://www.npmjs.com/package/haversine\n   [https://www.npmjs.com/package/haversine]\n\n * cheap-ruler 보다는 정확한 결과를 계산하지만, 더 좋지 않은 성능을 낸다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/428376488"
  },
  {
    "pageContent": "MapBox\n\n\n1. 실시간 교통량 정보\n\n--------------------------------------------------------------------------------\n\n * 제공되는 국가 목록\n   [https://www.mapbox.com/api-documentation/pages/traffic-countries.html] (한국\n   포함되어있습니다.)\n\n * 약 5 ~ 8분 주기로 정보 업데이트 됩니다.\n   (https://www.mapbox.com/vector-tiles/mapbox-traffic-v1/\n   [https://www.mapbox.com/vector-tiles/mapbox-traffic-v1/])\n\n * 데이터 소스 : 익명 센서 데이터, (Road geometries: based on OpenStreetMap) 도로형상?\n\n * MapBox Navigation SDK 에서 길찾기 API 호출시, 이 실시간 교통정보가 반영된 경로를 반환합니다.\n\n\n1.1. 익명 센서 데이터(HTTPS://WWW.MAPBOX.COM/TELEMETRY/\n[https://www.mapbox.com/telemetry/])\n\n--------------------------------------------------------------------------------\n\n보아하니 MapBox를 사용하는 유저들(MapBox를 사용하는 우버, 인스타 카트 등 앱을 사용하는 유저 포함으로 보입니다.)의 데이터(실시간\n위치데이터 등)을 익명으로 수집하여 이를 통해 실시간 교통량 정보에 반영하는것으로 보입니다.\n\n\n2. API\n\n--------------------------------------------------------------------------------\n\n\n2.1. DIRECTIONS\n\n--------------------------------------------------------------------------------\n\n\n2.1.1. PRICING\n\n--------------------------------------------------------------------------------\n\n1000건당 0.5 USD 입니다.\n\n\n2.1.2. 제한\n\n--------------------------------------------------------------------------------\n\n근거 : https://www.mapbox.com/api-documentation/#directions\n[https://www.mapbox.com/api-documentation/#directions]\n\n * 요청 한번에 최대 24개의 경유지(목적지 포함)를 설정할 수 있습니다. (실시간 교통량 미반영)\n\n * 요청 한번에 최대 3개의 경유지(목적지 포함)를 설정할 수 있습니다. (실시간 교통량 반영)\n\n * 분당 최대 300번 경로 조회할 수 있습니다. (유저별이 아닌, 모든 유저로부터의 요청갯수 총합임을 이해해야 합니다.)\n\n * 경유지 갯수에따라 요금이 달라지지 않는것으로 보입니다. (거의 확실해보이나 만전을 기하기 위해 sales 팀에 문의해두었습니다.)\n\n\n3. SDK\n\n\nPRICING\n\nMAU (Monthly active user) 는 매달 0으로 초기화 됨.\n\nNavigation SDK 를 포함하는 앱을 실행하면 MAU 집계 됨.\n\n출처: https://docs.mapbox.com/ios/navigation/guides/pricing/\n[https://docs.mapbox.com/ios/navigation/guides/pricing/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/62095504/image-20210723-074542.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/62095504"
  },
  {
    "pageContent": "구글 Ridesharing SDK (가제)\n\nhttps://mapsplatform.google.com/solutions/transportation-and-logistics/\n[https://mapsplatform.google.com/solutions/transportation-and-logistics/]\n\n\n\n\n\n유트브 영상(21초)를 보면 turn-by-turn navigation 을 제공하는 것으로 보인다.\n\n아직(2022.01.28) 일부 기업에게만 제공한다고 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2323513347/image-20220128-044420.png?api=v2]\n\n2022. 11. 15.\n\n퀵하게 다시 서치하고 자료 공유\n\nhttps://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution?_gl=1*1wd8j7j*_ga*NzQwNzE5MjQ1LjE2Njg0OTAwNTM.*_ga_NRWSTWS78N*MTY2ODQ5MDA1Mi4xLjEuMTY2ODQ5MDI3Ny4wLjAuMA..\n[https://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution?_gl=1*1wd8j7j*_ga*NzQwNzE5MjQ1LjE2Njg0OTAwNTM.*_ga_NRWSTWS78N*MTY2ODQ5MDA1Mi4xLjEuMTY2ODQ5MDI3Ny4wLjAuMA..]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2323513347/image-20221115-053658.png?api=v2]\n\nhttps://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution/route-optimization\n[https://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution/route-optimization]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2323513347/image-20221115-053711.png?api=v2]\n\n2022. 11. 22.\n\nhttps://mapsplatform.google.com/pricing/\n[https://mapsplatform.google.com/pricing/]\n\nhttps://cloud.google.com/blog/products/maps-platform/introducing-last-mile-fleet-solution-maximize-what-your-fleet-can-do-start-finish?utm_campaign=6160b3c7abaada00010a9e17&utm_content=62334597d14ff50001bbf790&utm_medium=smarpshare&utm_source=linkedin&hl=en\n[https://cloud.google.com/blog/products/maps-platform/introducing-last-mile-fleet-solution-maximize-what-your-fleet-can-do-start-finish?utm_campaign=6160b3c7abaada00010a9e17&utm_content=62334597d14ff50001bbf790&utm_medium=smarpshare&utm_source=linkedin&hl=en]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2323513347"
  },
  {
    "pageContent": "[MapBox] 경로 시뮬레이션\n\n이 문서를 어디에 위치시키면 좋을지 모르겠다. (파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f61e.png]\n\n\n\n맵박스는 시뮬레이션 모드를 제공한다. 이 모드를 통해 차를 직접 운행하지 않고도 내비게이션을 테스트할 수 있다.\n\n\n1. NAVIGATIONVIEW.TSX 파일 오픈\n\n\n\n\n2. SHOULDSIMULATEROUTE TRUE 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2295365635/image-20220103-085922.png?api=v2]\n\n\n3. 출발지 위치 설정\n\n> 볼티모어 차고지=[39.382777, -76.977718], 대륭포스트타워 7차=[37.481401, 126.884122]\n\n테스트하고자 하는 경로의 출발지를 지정한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2295365635/image-20220103-090121.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2295365635"
  },
  {
    "pageContent": "Intro\n\n\nAI VS ML VS DL\n\nhttps://velog.io/@idnnbi/AI-ML-DL-차이\n[https://velog.io/@idnnbi/AI-ML-DL-%EC%B0%A8%EC%9D%B4]\n\n인공지능, Artificial Intelligence은 인간의 지능을 ‘인공적’으로 컴퓨터로 구현해놓은 모든 것\n\n요즘 주목받고 있는 인공지능은 주로 딥러닝 기반\n\n사실 인공지능을 그리 새로운 개념은 아님 1950년대부터 인공지능이 시작되었지만, 지금에 와서야 각광받게되는 이유는 GPU와 메모리 등\n인공지능에 필요한 물리적 자원들이 지금 시대에 와서야 충분히 활용할 수 있는 정도까지 발전되었기 때문\n\n머신러닝과 딥러닝 모두 인공지능에 속하지만 약간의 차이가 있음\n\nimage-20240613-033317.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3054567446/image-20240613-033317.png?api=v2]\n\n\n\n위 그림처럼 머신러닝은 프로그래밍 알고리즘과 같이 명확한 의사결정 플로우를 프로그래밍 하지 않고도 알고리즘 및 통계적 모델을 통해 주어진\n데이터를 기반으로 학습하여 의사결정을 하는 방법을 말함\n\n딥러닝은 구체적으로 ‘뉴럴네트워크’, ‘인공신경망’을 사용하는 방법\n\n머신러닝은 주로 정형 데이터, 딥러닝은 주로 비정형 데이터를 처리한다고 생각할 수도 있음 (진짜 모든 경우에 그런 것은 아님)\n\n\nDEEP LEARNING TASK\n\n딥러닝으로 할 수 있는 태스크는 매우 다양하지만 크게 두 가지로 나눌 수 있다.\n\n * 컴퓨터 비전\n\n * 자연어 처리\n\n컴퓨터 비전 태스크는 이미지와 같은 다차원 데이터를 가지고 분류, 인식 등을 하는 것.\n\n음성 데이터도 굳이 둘 중 하나에 포함시키라고 한다면 컴퓨터 비전에 가까움\n\n자연어 처리 분야는 텍스트를 가지고 요약, 감정 분석 등 다양한 태스크를 처리하는 분야로 언어별로 특성이 다 다르게 존재하므로 처리하고자하는\n언어의 특성을 잘 파악하는 것이 필요하다. 특히 한국어의 경우에는 형태소, 조사 등 다른 언어에 존재하지 않는 개념들이 많아 전처리가 까다로운\n편\n\n\nDATA\n\n인공지능을 구성하는데 빼놓을 수 없는 요소는 바로 데이터. 데이터가 없다면 아무리 좋은 알고리즘이 있다고해도 성능 좋은 인공지능 모델을 만들 수\n없음\n\nData Centric AI라는 패러다임이 나올만큼 데이터가 중요성이 강조되고 있음.\n\n질 좋고, 풍부한 데이터가 인공지능의 필요조건\n\nhttps://www.content.upstage.ai/blog/tech/data-centric-ai-in-the-real-world\n[https://www.content.upstage.ai/blog/tech/data-centric-ai-in-the-real-world]\n\nTips\n\n * 지도학습에 사용할 데이터들은 클래스별로 균형을 맞추는 것이 좋다.\n   \n   * 0-class 10만개, 1-class 4만개 x → 0-class 7만개, 1-class 7만개 ㅇ\n   \n   * 클래스별 균형이 맞지 않다면 augmentation 이나 under sampling.. 등 기법으로 밸런스를 맞춰주는 과정이 필요할 수\n     있다.\n\n * 보통 dataset은 train, test, valid set 3세트로 구성해야한다.\n   데이터가 부족한 경우에는 train, test set을 번갈아가면서 사용하는 k-fold 기법을 사용할 수 있다.\n   \n   * train set : 학습용\n   \n   * valid set : 학습과정에서 검증용으로 사용\n   \n   * test set : 학습 완료 후 검증용으로 사용\n\nimage-20240613-054058.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3054567446/image-20240613-054058.png?api=v2]\n\n\n기타\n\n * 논문 찾는 사이트\n   \n   인공지능 관련 태스크와 관련 논문을 찾을 때 가장 많이 사용하는 사이트\n   \n   https://paperswithcode.com/ [https://paperswithcode.com/]\n\n * hugging face\n   \n   다양한 인공지능 태스크에 대한 모델, 도구, 라이브러리 등을 제공하는 오픈소스\n   \n   https://huggingface.co/ [https://huggingface.co/]\n\n * Kaggle, Dacon\n   \n   인공지능 학습 자료를 제공하고, 각종 경진대회가 열림\n   \n   데이콘은 케글의 한글판 사이트라고 생각하면 됨\n   \n   https://www.kaggle.com/ [https://www.kaggle.com/]\n   \n   https://dacon.io/ [https://dacon.io/]\n\n * 지도학습 vs 비지도학습 vs 강화학습\n   \n   * 인공지능 학습 방법론\n   \n   * https://blogs.nvidia.co.kr/blog/supervised-unsupervised-learning/\n     [https://blogs.nvidia.co.kr/blog/supervised-unsupervised-learning/]\n\n * 최적화\n   \n   * 인공지능 모델을 더 빠르고 가볍게 배포하기 위해서 최적화가 필요하다\n     \n     https://blog-ko.superb-ai.com/how-to-optimize-deep-learning-models/\n     [https://blog-ko.superb-ai.com/how-to-optimize-deep-learning-models/]\n   \n   * Quantization\n     \n     https://huggingface.co/docs/optimum/concept_guides/quantization#quantization\n     [https://huggingface.co/docs/optimum/concept_guides/quantization#quantization]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3054567446"
  },
  {
    "pageContent": "환경 설정\n\n\nCONDA\n\nConda는 데이터 과학, 머신러닝, 과학 계산 등의 작업을 위해 널리 사용되는 패키지 관리자이자 환경 관리 도구.\n\nConda는 특히 Python 패키지의 관리와 설치를 용이하게 해 주며, 복잡한 종속성을 자동으로 해결 - 해주지만 안되는 것도 많다.\n\n머신러닝 태스크 진행시 Conda 가상환경을 만들거나 도커로 환경을 구성해서 진행하는 것이 좋다.\n\n(nvidia gpu를 사용하는 경우에는 도커에서 gpu를 사용하기 위해서는 nvidia docker를 설치해야 한다.)\n\nbrew install miniconda\n\nconda init zsh\n\nsource ~/.zshrc\n\nimage-20240613-033556.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055517725/image-20240613-033556.png?api=v2]\n\n\n\n맨 앞에 (base)가 출력되면 설치 성공\n\nbase 는 base 가상환경이 activate 되었음을 의미하는데, conda의 기본 설정으로 현재 상태로는 매번 터미널을 열때마다 base\n환경이 활성화된다.\n\n항상 파이썬 개발만 한다면 상관없지만 필요하지 않은 상황이 더 많으므로 conda 자동 activate 를 꺼줌\n\nconda config --set auto_activate_base false\n \nsource ~/.zshrc\n\n위의 설정으로 자동 activate 옵션을 해제할 수 있고 conda 환경을 실행하려면 conda activate 를 입력해주면 된다.\n\n반대로 conda deactivate 로 가상환경을 해제할 수 있다.\n\nimage-20240613-033614.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055517725/image-20240613-033614.png?api=v2]\n\n\nTENSORFLOW\n\ntensorflow는 2.16버전부터 mac gpu를 정식 지원하게되어 별도의 apple 개발자 패키지 없이도 gpu활용이 가능해졌다.\n대신 2.16버전부터 keras버전이 3점대로 올라가서 이전 버전들과 호환성이 떨어진다.\n\n참고) tensorflow는 1.x → 2.x 업그레이드에서 keras를 포함하게 되면서 완전히 달라지게 되었다. 1.x 버전은 거의 사용하지\n않지만 몇몇 오픈소스에서 tensorflow 1.x로 작동하는 것들이 있다.\n\n * 2.16 버전으로 학습하면서 발생했던 오류\n   \n   * mps가 fp64를 지원하지 않음 - 애초에 fp64를 지원하지 않아서 학습단계에서부터 fp32를 이용해야한다.\n   \n   * error: 'anec.gain_offset_control' op result #0 must be 4D/5D memref of\n     16-bit float or 8-bit signed integer or 8-bit unsigned integer values, but\n     got 'memref<1x50x1x1xi1>'\n     \n     https://discuss.tensorflow.org/t/mac-os-sonoma-not-compatible-with-latest-tensorflow-metal-libraries/19858/21\n     [https://discuss.tensorflow.org/t/mac-os-sonoma-not-compatible-with-latest-tensorflow-metal-libraries/19858/21]\n     \n     → Sonoma로 넘어오면서 생기는 오류\n\n\nTENSORFLOW == 2.9\n\n공식지원되기 이전 버전은 필요한 패키지별 dependency를 잘 맞춰주어야하고 작동을 확인한 버전은 아래 버전이다.\n\nzsh -i py39tf29.zsh py39tf29\n\n#!/bin/zsh\n# py39tf29.zsh\nif [ -z \"$1\" ]; then\n    echo \"Error: input virtual env name\"\n    exit 1\nfi\n\nconda create -n $1 python=3.9 -y\nconda activate $1\nconda info --envs\nconda install -c apple tensorflow-deps==2.9.0 -y\npip install tensorflow-macos==2.9.0\npip install tensorflow-metal==0.5.0\nconda install chardet -y\n\n위의 쉘 스크립트로 가상환경 생성\n\n# test.py\nimport tensorflow as tf\n\n# Check for tensorflow GPU acess\nprint(\"TensorFlow has access to the following devices:\", tf.config.list_physical_devices())\n\n# See TensorFlow version\nprint(\"TensorFlow version:\", tf.__version__)\n\ntf를 임포트하고 GPU access를 실행하고 출력이 되면 성공\n\nTensorFlow has access to the following devices: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n\ngpu까지 설정된 것을 확인할 수 있다.\n\n\nTENSORFLOW ≥ 2.16\n\npython3 -m pip install tensorflow\n\n\nPYTORCH\n\n파이토치는 비교적 환경구성이 쉽다.\n\n아래 사이트에서 올바른 명령어를 찾아서 콘다 환경에 설치해주면 된다.\n\nStart Locally [https://pytorch.org/get-started/locally/]\n\ngpu 확인\n\nimport torch\n\n# GPU 사용 가능 -> True, GPU 사용 불가 -> False\nprint(torch.cuda.is_available()) # cuda\nprint(torch.backends.mps.is_available()) # apple sillicon",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055517725"
  },
  {
    "pageContent": "Image Classification\n\n이미지 분류는 이미지 내 특정 사물을 분류하는 것으로 대표적인 딥러닝 컴퓨터 비전 태스크이다.\n\n기본 중에 기본. 보통 컴퓨터 비전을 처음 시작할 때 개, 고양이 분류 문제로 시작하곤한다.\n\n> 다른 컴퓨터 비전 태스크로는 object detection, segmentation, tracking, ocr, image\n> generation, key point extraction 등이 있다\n\n\nBINARY CLASSIFICATION\n\n예측을 0 또는 1로 (두 개의 클래스) 결과를 내는 것\n\nex) 이 이미지는 고양이 인가요? yes or no\n\n\nMULTI CLASS CLASSIFICATION\n\n예측 결과를 나타내는 클래스가 여러 개인 경우를 말한다.\n\nex) 개, 고양이, 코끼지를 분류하는 모델에서, 이 이미지는 어떤 클래스인가요 → 개\n\n두 모델을 구성하는 것에는 차이가 없고 가중치를 계산한 후 마지막 출력층만 달리 해주면 된다.\n\n\nPRETRAINED MODEL & TRANSFER LEARNING\n\nhttps://dacon.io/en/forum/405988 [https://dacon.io/en/forum/405988]\n\n딥러닝 모델 학습에는 굉장히 많은 데이터와 리소스가 필요하다. 모델 구조는 갈수록 복잡해지고 있고 요구하는 계산량도 많아진다.\n\n그래서 요즘은 모델을 학습할 때 처음 모델 구성해서부터 시작하지 않고 이미 유명한 공개 데이터 셋(ImageNet, CoCo)으로 학습한 사전\n정의, 사전 학습된 모델을 사용한다.\n\nTire Detection에서 사용한 모델은 Inception Resnet이다.\n\n사전 학습 모델을 가져와 구성하고자 하는 모델의 백본으로 설정하고 입출력층을 커스텀해서 모델을 구성할 수 있다. 이미 학습된 가중치를 이용해서\n하고자하는 태스크에 이용할 수 있는 것을 Transfer Learning 이라고 한다.\n\n해당 커스텀 모델을 나의 데이터로 학습하고 대부분의 레이어의 가중치 업데이트를 막고 말단 층(대부분 커스텀 레이어)만을 낮은 learning\nrate로 학습하는 경우가 있다. 이를 finetuning(미세 조정)이라고 하며 모델의 성능 향상을 기대해볼 수 있다.\n\nimage-20240613-033843.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055845389/image-20240613-033843.png?api=v2]\n\n\nHYPER PARAMETER TUNING\n\n모델 학습에는 사용자가 설정해야하는 다양한 하이퍼파라미터가 존재한다.\n\n하이퍼파라미터에 따라 모델 성능이 좌우되지만 어떤 값이 모델의 최고 성능을 만들어낼 지 누구도 알 수 없어서 하이퍼파라미터 튜닝과정을 거친다.\n\n튜닝을 진행하면서 하이퍼파라미터 정보, 각 실행마다의 metrics(loss, accuracy..) 등을 기록해두는 것이 매우 중요하고 이때\nMLflow tracking을 활용할 수 있다.\n\n아래 사진은 Wandb에서 Sweep(hyperparameter tuning)을 진행하며 실험들이 트래킹 된 결과이다.\n\nimage-20240613-051807.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055845389/image-20240613-051807.png?api=v2]image-20240613-051625.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055845389/image-20240613-051625.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055845389"
  },
  {
    "pageContent": "MLOps\n\n\nMLOPS란?\n\nimage-20240613-035044.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-035044.png?api=v2]\n\n\n\n출처 : databricks https://www.databricks.com/kr/glossary/mlops\n[https://www.databricks.com/kr/glossary/mlops]\n\n> MLOps란 머신 러닝(Machine Learning)과 운영(Operations)을 합친 용어로 프로덕션 환경에서 머신 러닝(ML) 모델이\n> 지속적이고 안정적으로 배포되도록 유지, 관리, 모니터링 해주는 것입니다. MLOps는 머신러닝 모델 개발과 운영을 통합해 ML 시스템을\n> 자동으로 유지, 관리, 운영합니다. MLOps의 대상은 머신 러닝 모델을 개발하는 것뿐만 아니라 데이터를 수집하고 분석하는 단계와 학습하여\n> 배포하는 과정, 즉 전체 AI 생애 주기가 포함됩니다. 출처 : elice\n> https://elice.io/ko/newsroom/whats_mlops\n> [https://elice.io/ko/newsroom/whats_mlops]\n\n개발에도 DevOps가 있듯이 머신러닝 개발에도 MLOps가 있다.\n\n인공지능 개발에는 데이터 전처리, 학습, 평가, 추론, 모니터링 등 복잡한 단계가 필요하고 MLOp를 통해 자동화 할 수 있다. 인공지능 모델\n개발의 생명주기들을 자동화하여 데이터 과학자, 데이터 엔지니어, SW 엔지니어간 협업에 필요한 비용을 낮출 수 있다.\n\n인공지능 모델을 한 번이라도 개발해 본 사람이라면 알겠지만, 모델 학습시 데이터 전처리, 학습, 튜닝, 추론을 로컬 머신에서 관리하게 되면 그\n복잡성이 너무 크다. 또, git과 같은 코드 형상관리 프로그램으로 커버하기 어려운 부분이 있다.\n\n프로덕션 환경에서 이를 자동화하고 데이터를 더 잘 관리할 수 있게 하는 것이 MLOps라고 이해하고 있다.\n\nimage-20240613-035059.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-035059.png?api=v2]\n\n\n\n보통의 시스템과 ML 시스템의 차이는 데이터에 있다.\n\n전통적인 시스템은 코드가 있고, 그 코드가 작동하는 환경으로 구성되는 반면 오른쪽 그림에서 처럼 ML기반 시스템은 그 중간에 모델 학습의 단계가\n추가적으로 필요하고 각 단계별로 데이터가 추가된다. 데이터를 검증하는 로직도 필요하고, 데이터를 이용해서 모델을 재학습하거나 결과를 얻는다.\n\n\nML 서비스의 기본\n\nMLOps에 대해서 알아보기 전에 ML을 서비스하기 위해 기본적으로 필요한 요소를 알아볼 필요가 있다.\n\n토스 ML팀의 고석현님의 발표에서 ML 서비스의 기본을 다음과 같이 정의했다.\n\nOps를 위해 여러 기술들이 추가되어도 ML서비스가 기본으로 갖추어야할 요소는 다음의 세 가지이다.\n\nimage-20240613-035127.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-035127.png?api=v2]\n\n모델 저장소는 말그대로 학습한 모델을 저장하는 곳으로 S3, RDB, 나스가 될 수 있다.\n\n\nMLOPS 아키텍처\n\n구글은 2015년부터 MLOps의 필요성을 이야기했다. 그리고 0~2단계, 총 3단계로 나누어 MLOps 아키텍처를 설명한다.\n\nAWS나 Azure에서 각자의 MLOps 아키텍처를 가지고 있지만 크게 다르지 않다.\n\nhttps://mlops-for-all.github.io/docs/introduction/levels/\n[https://mlops-for-all.github.io/docs/introduction/levels/]\n\n\nLEVEL 0 : 수동\n\n모든 단계를 수동으로 하는 것을 말한다.\n\nCI/CD, 성능 모니터링이 이루어지지 않고, 존재하는 데이터도 offline data로 배치성 데이터이다. 데이터 과학자와 엔지니어의 영역이\n나뉘어있다.\n\n데이터 과학자가 학습한 모델을 모델 레지스트리에 저장하면 엔지니어가 서빙하는 구조이다.\n\nimage-20240613-045207.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045207.png?api=v2]\n\n이 단계에서는 자동화 된 것이 없기 때문에 학습환경과 서빙환경이 달라서 ‘안되는데요?’ ‘저는 됐는데요?’ 상황이 발생할 수 있고, 그 환경을\na to z 까지 맞추기위해 노력해야한다.\n\n\nLEVEL 1 : 파이프라인 자동화, CT\n\nLevel 1에서는 파이프라인이 자동화 된다. 데이터 과학자가 모델 개발에 사용한 프로세스 및 환경을 동일하게 제공한다.\n\n또한 여기에 새로운 데이터를 사용하여 프로덕션 모델이 자동으로 학습하는 CT(Continuous Training)개념이 추가된다.\n\nLevel 0에서는 학습된 모델만을 배포했다면 Level 1에서는 전체 파이프라인이 배포된다.\n\nimage-20240613-045223.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045223.png?api=v2]\n\n\n\n * 특징 (출처 :\n   https://jaemunbro.medium.com/mlops%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B3%A0-84f68e4690be\n   [https://jaemunbro.medium.com/mlops%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B3%A0-84f68e4690be]\n   )\n   \n   * Rapid experiment : 실험을 빠르게 반복하고, 전체 파이프라인을 프로덕션으로 빠르게 배포\n   \n   * 개발 환경에서 쓰인 파이프라인이 운영 환경에도 그대로 쓰임. DevOps의 MLOps 통합에 있어 핵심적인 요소\n   \n   * 포로덕션 모델의 CT(Continuous Training) : 새로운 데이터를 사용하여 프로덕션 모델이 자동으로 학습\n   \n   * CD: 새로운 데이터로 학습되고 검증된 모델이 지속적으로 배포됨.\n   \n   * Level 0에서는 학습된 모델만을 배포했다면 Level 1에서는 전체 파이프라인이 배포\n\n\nLEVEL 2: CI/CD의 자동화\n\n학습 파이프라인의 소스코드 CI/CD 자동화까지 이루어지는 단계이다. 실험과 배포의 통합으로 데이터 과학자가 바로 실험 결과를 배포 가능하다.\n\nimage-20240613-045238.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045238.png?api=v2]\n\n\n\n> (출처 :\n> https://jaemunbro.medium.com/mlops%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B3%A0-84f68e4690be\n> [https://jaemunbro.medium.com/mlops%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B3%A0-84f68e4690be]\n> )\n> \n> Continuous Integration\n> \n> 파이프라인과 구성요소는 커밋되거나 소스 레포지토리로 푸시될 때 빌드, 테스트, 패키징된다. 아래와 같은 테스트가 포함될 수 있다.\n> \n>  * 특성 추출 로직을 테스트\n> \n>  * 모델에 구현된 메소드를 단위 테스트\n> \n>  * 모델 학습이 수렴하는지 테스트\n> \n>  * 모델 학습에서 0으로 나누거나 작은 값 또는 큰 값을 조작하여 NaN 값을 생성하지 않는지 테스트\n> \n>  * 파이프라인의 각 구성요소가 예상된 아티팩트를 생성하는지 테스트\n> \n>  * 파이프라인 구성요소간 통합 테스트\n> \n> Continuous Delivery\n> \n>  * 모델 배포 전 모델과 대상 인프라 호환성 확인. (패키지 호환 여부/메모리/컴퓨팅 자원등)\n> \n>  * 서비스 API 호출 테스트\n> \n>  * QPS 및 지연 시간과 같은 서비스 부하 테스트\n\n\n\n위 글에서 정리된 2단계 mlops의 CI/CD 단계이다. 1단계에서는 모델을 재학습하고 빠르게 배포하는 로직에 집중되어있었던 반면 2단계에서는\n코드단까지의 CI/CD가 이루어지는 것을 알 수 있다. DevOps에서 처럼 각 요소들을 테스트한다.\n\nimage-20240613-045319.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045319.png?api=v2]\n\n\n\n\nMLOPS를 제공하는 오픈 소스\n\nMLOps를 제공하는 플랫폼은 매우 다양한다. AWS sagemaker, Airflow 등\n\n그 중 오픈소스 중 두 가지(MLflow, kubeflow)에 대해서 알아보았다.\n\n\nMLFLOW\n\n데이터 브릭스에서 개발한 End to End로 머신러닝 라이프 사이클을 관리할 수 있는 오픈소스이다.\n\nDocs: https://mlflow.org/docs/latest/index.html\n[https://mlflow.org/docs/latest/index.html]\n\nml에 필요한 4가지 기능을 제공한다.\n\nimage-20240613-045340.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045340.png?api=v2]\n\n\n\n제공하는 주요 기능\n\n * tracking : record and query experiments : code, data, config, results 코드,\n   데이터, 설정, 결과 등의 실험 기록 및 조회\n\n * projects : packaging format for reproducible runs on any platform 어떤 플랫폼에서도\n   재현 가능한 실행을 위한 패키징 형식\n\n * models : general format that standardizes deployment paths 배포 경로를 표준화하는 일반적인\n   형식\n\n * model registry : centralized and collaboartive model lifecycle management 중앙\n   집중화되고 협력적인 모델 생명주기 관리\n\n특징\n\n * 설치와 사용이 쉽다.\n\n * 다양한 integration을 제공해서 프레임워크에 종속되지 않고 이용할 수 있다.\n\n * Databricks, Azure, Docker, AWS 등에서 배포가 가능하다.\n\n * 하나의 host에서 하나의 모델만 배포할 수 있다. (추론용 endpoint가 /invocations 이다.)\n\n\n\nex)\n\n# local server on\nmlflow server --host 127.0.0.1 --port 8080\n\n# model serving\nmlflow models serve -m models:/sk-learn-random-forest-reg-model/2 -h 0.0.0.0 -p 8081\n\n# response inference\ncurl <http://127.0.0.1:8081/invocations> -H \"Content-Type:application/json\" --data '{\"inputs\" : [[-0.955945  , -0.34598178, -0.46359597,  0.48148147]]}'\n\nmlflow.set_tracking_uri(uri=\"<http://127.0.0.1:8080>\")\n\nMLFLOW_AUTH_CONFIG_PATH=/path/to/config.ini mlflow server \\\\ \n--backend-store-uri mysql+pymysql://root:admin@localhost:3306/mlflow \\\\\n--host 127.0.0.1 --port 5000 --artifacts-destination s3://bucketname/mlflow/ \\\\\n--app-name basic-auth\n\n\nKUBEFLOW\n\n머신러닝 워크플로우의 머신러닝 모델 학습부터 배포 단계까지 모든 작업에 필요한 도구와 환경을 쿠버네티스(Kubernetes) 위에서 쿠브플로우\n컴포넌트로 제공한다.\n\n쿠버네티스가 이미 동작하고 있는 시스템이라면 도입을 고려해볼만 하다.\n\nDocs : https://www.kubeflow.org/docs/ [https://www.kubeflow.org/docs/]\n\nAnywhere you are running Kubernetes, you should be able to run Kubeflow.\n\nimage-20240613-045448.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045448.png?api=v2]\n\n\n\nkubeflow 또한 mlflow와 같이 다양한 ml 프레임워크에 대한 integration을 제공한다.\n\n특징\n\n * 쿠버네티스를 알아야 도입이 가능하다\n\n * 쿠버네티스 Ingress 설정으로 호스트 하나에 다중 엔드포인트로 복수의 모델을 서빙할 수 있다.\n\n쿠버네티스 파드를 띄우는 것처럼 모델을 yaml파일에 설정하고 서빙하는 형식\n\n\nAPACHE AIRFLOW\n\npython 기반 워크플로우 오픈소스 플랫폼으로 데이터 과학자에게 자유로운 분석환경 제공하고 데이터 과학자가 ML 파이프라인 직접 개발할 수\n있게 한다. 워크플로우를 DAG 구조로 정의한다.\n\n * 스케쥴링 job을 실행하는 것에는 적절하나 실시간성 데이터 처리에는 적절하지 않음\n\n * 다양한 플러그인을 지원하고 지원하지 않는 플러그인이라도 직접 개발해서 이용할 수 있다.\n\n * ETL 성격이 강한 워크플로우\n\n * 대쉬보드에서 DAG를 관리할 수 있다.\n\n * celery 를 worker로 redis를 메시지 브로커로 사용. 각 워크플로우가 서로 다른 워커에서 실행되기 때문에 xcom이라는 구조를\n   통해서 서로 상호작용한다.\n\nimage-20240613-045502.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055255581/image-20240613-045502.png?api=v2]\n\n\n\n\nMLOPS FRAMEWORK 기업 활용 사례\n\nNAVER | AiSuite : Kubeflow를 통해 더 나은 AI 모델 서빙과 MLOps 실현하기\n[https://tv.naver.com/v/23650093]\n\nKurly만의 MLOps 구축하기 - 쿠브플로우 도입기 [https://helloworld.kurly.com/blog/second-mlops/]\n\n토스 | SLASH 22 - 물 흐르듯 자연스러운 ML 서비스 만들기\n[https://www.youtube.com/watch?v=EEsYbiqqcc0]\n\n→ 자체 라이브러리로 제작\n\n카카오뱅크의 MLOps / if(kakao)dev2022 [https://www.youtube.com/watch?v=Fj0MOkzCECA]\n\n→ airflow, 이미 개발자들이 airflow 개발 경험이 있음\n\nLINE의 엔드 투 엔드 MLOps 플랫폼, MLU\n[https://engineering.linecorp.com/ko/blog/line-end-to-end-mlops-platform-mlu]\n\n→ 자체 플랫폼 제작\n\nhttps://medium.com/daria-blog/airflow%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-mlops-%EA%B5%AC%EC%84%B1%EB%B0%A9%EB%B2%95-a4fc9aa0d3ba\n[https://medium.com/daria-blog/airflow%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-mlops-%EA%B5%AC%EC%84%B1%EB%B0%A9%EB%B2%95-a4fc9aa0d3ba]\n\n--------------------------------------------------------------------------------\n\n\nMLOPS 학습 소스\n\nhttps://speakerdeck.com/mlopskr/mlops-cuncu-jeongug-sidae-jeongri-byeonseongyun?slide=45\n[https://speakerdeck.com/mlopskr/mlops-cuncu-jeongug-sidae-jeongri-byeonseongyun?slide=45]\n\nhttps://fullstackdeeplearning.com/march2019\n[https://fullstackdeeplearning.com/march2019]\n\nAndrew Ng | Machine Learning Engineering for Production MLOps\n[https://www.coursera.org/specializations/machine-learning-engineering-for-production-mlops#courses]\n\nhttps://mercari.github.io/ml-system-design-pattern/README_ko.html\n[https://mercari.github.io/ml-system-design-pattern/README_ko.html]\n\nhttps://github.com/EthicalML/awesome-production-machine-learning\n[https://github.com/EthicalML/awesome-production-machine-learning]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055255581"
  },
  {
    "pageContent": "OCR\n\n\nOCR, 광학문자인식\n\n이미지 내의 문자를 인식하는 태스크를 말하며 CRNN의 등장으로 OCR도 딥러닝 베이스로 발전하기 시작했다.\n\n컴퓨터 비전 태스크로서의 OCR은 크게 두 가지 단계로 이루어져있다.\n\nOCR = Text Detection + Text Recognition\n\nText Detection : 이미지에서 어디에 텍스트가 존재하는지 찾음\n\nText Recognition : 찾은 텍스트를 인식함\n\nimage-20240613-045631.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055484974/image-20240613-045631.png?api=v2]\n\n\n\n\nOCR DOWNSTREAM TASK : KEY INFORMATION EXTRACTION\n\n이미지에서 텍스트를 인식한 다음에 어떻게 할 건데?에 대한 해답\n\n> DownStream Task란? 구체적으로 풀어야 할 문제를 말한다. LLM 모델을 예로 들면 BERT, GPT 등 pretrained\n> model이 있고 이 모델들 구체적으로 해야할 태스크, 예를 들면 텍스트 분류, 요약, 감정분석 등을 말한다.\n\nPaper Check에서 OCR을 통해서 글자를 읽었다면 그 글자들이 서로 어떤 의미를 가지고 있는지 KIE 통해 파악할 수 있다.\n\n * 개체명 인식(Named Entity Recognition), NER\n   \n   * SER(Sementic Entity Recognition)\n\n개체명 인식(Named Entity Recognition)이란 말 그대로 **이름을 가진 개체(named entity)**를 인식하겠다는 것을\n의미합니다. 좀 더 쉽게 설명하면, 어떤 이름을 의미하는 단어를 보고는 그 단어가 어떤 유형인지를 인식하는 것을 말합니다.\n\n * RE (Relationship Extraction)\n\n비구조적인 문장에서 구조적인 트리플(triple)를 추출하는 태스크이다. 트리플이란 두 개체 간의 관계(relation)를 <주어, 관계,\n목적어>으로 나타낸 구조이다.\n\n * KIE Guide :\n   \n   https://github.com/PaddlePaddle/PaddleOCR/blob/main/ppstructure/kie/README.md\n   [https://github.com/PaddlePaddle/PaddleOCR/blob/main/ppstructure/kie/README.md]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055484974"
  },
  {
    "pageContent": "Paper Check - Open Source\n\n 1. EasyOCR\n\nGitHub - JaidedAI/EasyOCR: Ready-to-use OCR with 80+ supported languages and all\npopular writing scripts including Latin, Chinese, Arabic, Devanagari, Cyrillic\nand etc. [https://github.com/JaidedAI/EasyOCR/tree/master]\n\nEasyOCR의 기본 모델\n\n * Text Detection : CRAFT\n\n * Text Recognition : None-VGG-BiLSTM-CTC\n\nimage-20240613-050818.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055681601/image-20240613-050818.png?api=v2]\n\n\n\n 2. deep-text-recognition-benchmark (text recognition only)\n\nhttps://github.com/clovaai/deep-text-recognition-benchmark\n[https://github.com/clovaai/deep-text-recognition-benchmark]\n\n * CLOVA AI의 text recognition 오픈소스, ICCV 2019\n\n * Best Accuracy Model : TPS-ResNet-BiLSTM-CTC ⭐️\n\n * python 3.6, torch 1.3.1에서 빌딩\n   \n   * torch 1.3.1 not support apple sillicon\n   \n   * docker pull python:3.6.15\n\n * lmdb 데이터 셋 만드는 util 제공\n\n\n\n 3. PaddleOCR\n\nhttps://github.com/PaddlePaddle/PaddleOCR\n[https://github.com/PaddlePaddle/PaddleOCR]\n\n * 바이두(Baidu)의 PaddlePaddle 팀의 오픈소스\n\n * 커스텀시 5000장 이상 권장, 실제 데이터, 합성 데이터 및 일반 데이터의 비율 1:1:1\n\n * DownSteam Task 포함\n   \n   * ppstructure - LayoutAnalysis, Table Recognition, Key Information Extraction\n     출시\n   \n   * 특정 형식 당 50장있어야 인식가능\n   \n   * guide :\n     https://github.com/PaddlePaddle/PaddleOCR/blob/main/ppstructure/kie/how_to_do_kie_en.md\n     [https://github.com/PaddlePaddle/PaddleOCR/blob/main/ppstructure/kie/how_to_do_kie_en.md]\n   \n   * paper : PP-StructureV2: A Stronger Document Analysis System\n     [https://arxiv.org/pdf/2210.05391v2], ArXiv'2022\n     \n     * Semantic Entity Recognition and relationship Extraction are two subtasks\n       in Key Information Extaction.\n     \n     * LayoutLMv2(Xu et al. 2020b) and LayoutXLM(Xuet al. 2021) to extract\n       visual features and combine with subsequent text embedding as multi-modal\n       input embedding.\n     \n     * TB-YX: Threshold-Based YX sorting algorithm : 텍스트를 순서대로 읽음. from top to\n       bottom and left to right\n\n * 라벨링 툴을 제공 : https://github.com/PFCCLab/PPOCRLabel/blob/main/README.md\n   [https://github.com/PFCCLab/PPOCRLabel/blob/main/README.md]\n\n * output\n   \n   프린트된 글씨는 인식률이 좋지만 손글씨는 인식하지 못한다 (finetuning 필요)\n\nimage-20240613-051028.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055681601/image-20240613-051028.png?api=v2]\n\n 4. MMOCR\n\nhttps://github.com/open-mmlab/mmocr [https://github.com/open-mmlab/mmocr]\n\n * OpenMMLab의 pytorch, mmdetection 기반 오픈소스로 text detection, recognition, key\n   information extaction 모두 제공\n\n * pytorch 1.6 이상, 다양한 SOTA model 제공\n\n * documentation이 자세함\n   \n   Installation — MMOCR 1.0.1 documentation\n   [https://mmocr.readthedocs.io/en/dev-1.x/get_started/install.html]\n\n * paper(KIE) : SDMG-R [https://arxiv.org/pdf/2103.14470], ArXiv'2021\n\n\n\n 5. Parseq\n\nhttps://github.com/baudm/parseq [https://github.com/baudm/parseq]\n\n * Scene Text Recognition with Permuted Autoregressive Sequence Models (ECCV\n   2022)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055681601"
  },
  {
    "pageContent": "LLM2\n\nLarge Language Model\n\n방대한 데이터를 학습하고 매우 많은 파라미터를 가진 “대규모” 언어 모델\n\n언어모델은 RNN 기반으로 구성되다가 “Attention is all you need” 논문에서 트랜스포머의 등장으로 완전히 새로워졌고\n발전속도가 빨라졌다.\n\nLLM은 BERT, GET, Bard, Llama 등 다양한 모델이 있고, 다양한 다운스트림 태스크를 수행할 수 있다. (요약, 번역,\n감성분석, 텍스트 생성, 분류…)\n\n\n\nLLM 자체를 ChatGPT로 자체로 인식하는 경우도 많은데 ChatGPT는 LLM을 생성형 AI로 활용하는 사례이다.\n\n * Open Source LLM\n   \n   https://github.com/eugeneyan/open-llms\n   [https://github.com/eugeneyan/open-llms]\n\n\n\nhttps://www.cloudflare.com/ko-kr/learning/ai/what-is-large-language-model/\n[https://www.cloudflare.com/ko-kr/learning/ai/what-is-large-language-model/]\n\nhttps://www.datacamp.com/blog/top-open-source-llms\n[https://www.datacamp.com/blog/top-open-source-llms]\n\nhttps://news.hada.io/topic?id=15268 [https://news.hada.io/topic?id=15268]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055583262"
  },
  {
    "pageContent": "Closed LLM vs. Open LLM\n\nClosed Source LLM + Prompt Engineering(or RAG)를 이용해서 어플리케이션을 구축하는 것이 비용이 낮고 개발\n속도가 빠를 것으로 보입니다.\n\nRAG를 위해서 VectorDB를 구축해놓으면 이후에 벡터 데이터를 통해서 학습 시킬 수 있는 옵션도 있습니다.\n→ AWS SageMaker JumpStart, TensorFlow.js 등등\n\nClosed Source LLM\n\nOpen Source LLM\n\n구동 방식\n\nAPI call\n\nlocal/cloud GPU server\n\n장점\n\n * 빠른 속도\n\n * GPU 비용 절감\n\n * 낮은 러닝커브\n   기존 개발인력 활용 가능\n\n * 높은 보안\n\n * 아키텍처 커스터마이징\n\n단점\n\n * 기밀 유출 위험\n\n * API call 비용\n\n * 높은 하드웨어 비용\n\n * 높은 러닝커브\n   전문인력 필요\n\n예시 모델\n\n * GPT, Whisper (OpenAI)\n\n * Claude (Anthropic)\n\n * Titan (Amazon)\n\n * Solar (Upstage)\n\n * LLaMa (Meta)\n\n * BERT (Google)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3075833924"
  },
  {
    "pageContent": "Tire Detection\n\ncfx의 사진에서 쓰레기에 타이어가 포함되어있는지 분류하는 태스크\n\nbinary classificaiton은 사진 속 타이어 유무를 분리하고\n\nmulti class classification은 타이어가 없음, 잘린 타이어가 있음, 잘리지 않은 타이어가 있음 클래스로 분리\n\n\n\n백본으로 torch hub에서 제공하는 Inception Resnet을 사용\n\n\n\n * Inception Resnet\n\nhttps://gaussian37.github.io/dl-concept-inception/\n[https://gaussian37.github.io/dl-concept-inception/]\n\nimage-20240613-034019.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3054305314/image-20240613-034019.png?api=v2]\n\n\n\n\n모델 정의 (TORCH)\n\nimport torch.nn as nn\nfrom torchvision import models\nimport torch\n\nclass InceptionClassifier(nn.Module):\n    def __init__(self, num_classes=3, drop_prob=0.3, hidden_layer=1024):\n        super(InceptionClassifier, self).__init__()\n        ## from torch hub\n        self.pretrained_model = models.inception_v3(pretrained=True) \n        \n        ## custom layer\n        self.pretrained_model.fc = nn.Linear(\n            self.pretrained_model.fc.in_features, hidden_layer)\n        self.dropout = nn.Dropout(drop_prob)\n        self.liner = nn.Linear(\n            hidden_layer, num_classes\n        )\n\n    def forward(self, x):\n        result = self.pretrained_model(x)\n        if hasattr(result, 'aux_logits'):\n            x, aux_x = result  # only train phase\n        else:\n            x = result\n        x = self.dropout(x)\n        x = self.liner(x)\n        return x\n\n\n\nMulti Class Tire Detection에 대해 하이퍼파라미터 튜닝 결과\n\nOptimizer Param : {\n\t\t\"BATCH_SIZE\": 16, \n\t\t\"DROPOUT\": 0.31100406475126285, \n\t\t\"FREEZE_RATE\": 0.5, \n\t\t\"HIDDEN_LAYER\": 512,\n\t\t \"LR\": 0.0001, \n\t\t \"OPTIM\": \"adam\"\n\t\t }\nBackbone : Inception v3\nplatform : pytorch\ninput shape : (batch, 3, 299, 299)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3054305314"
  },
  {
    "pageContent": "Tire Detection - BenchMark Test\n\n\n추론 속도 비교\n\n\n로컬, GPU X, 8코어, 32GB 메모리, M1 PRO\n\n\n단일 이미지 추론\n\nsimple python code\n\n1개 추론 → 0.072946 s\n\n * code\n   \n   start = time.time()\n   inferencer.inference(test_df['path'][0])\n   print(time.time() - start)\n\ntorch serve\n\n1개 요청 → 0.173826 s\n\n * bash\n   \n   # torch serve 1 image\n   curl <http://localhost:8080/predictions/tire> -T \"/Users/hklee/jupyter/tire_detection/data/sliced-tire/21958-1694538277295.jpg\" -w %{time_total}\n   {\n     \"1\": 0.9999979734420776\n   }\n   # => 0.173826ms\n\n\n복수 이미지 추론 (학습시 배치사이즈 16)\n\nbatch 처리 - 8개 한 번에 추론\n\nsimple python code\n\nbatch size\n\ntime\n\n8개\n\n0.3435 s\n\n12개\n\n0.5178 s\n\n15개\n\n0.6394 s\n\n16개\n\n3.3868 s\n\n * code\n   \n   import time\n   import torch\n   from torchvision.transforms import v2\n   from PIL import Image\n   \n   transform = v2.Compose([\n               v2.Resize((299,299)),\n               v2.ToImage(),\n               v2.ToDtype(torch.float32, scale=True),\n           ])\n   def read_image(path):\n       img = Image.open(path)\n       img = img.convert('RGB')  # png -> jpg\n       return transform(img)\n   \n   imgs = test_df['path'][:8].to_list()\n   tensor_imgs = torch.stack(list(map(read_image, imgs)))\n   \n   trainer.model.to('cpu')\n   start = time.time()\n   result = trainer.model(tensor_imgs)\n   print(time.time() - start)\n\ntorch serve\n\nbatch size\n\ntime\n\n8개\n\n0.3844 s\n\n12개\n\n0.6480 s\n\n15개\n\n0.7617 s\n\n16개\n\n3.5182 s\n\n * code\n   \n   import requests\n   from concurrent.futures import ThreadPoolExecutor\n   url = \"<http://localhost:8080/predictions/tire>\"\n   file_paths = [\"/Users/hklee/jupyter/tire_detection/data/sliced-tire/21958-1694538277295.jpg\" ] * 8\n   \n   def send_request(file_path):\n       with open(file_path, \"rb\") as file:\n           files = {\"data\": file}\n           response = requests.post(url, files=files)\n           if response.status_code == 200:\n               print(f\"파일 {file_path}에 대한 예측 결과: {response.text}\")\n           else:\n               print(f\"파일 {file_path} 전송 실패. 응답 코드: {response.status_code}\")\n   \n   start = time.time()\n   # 멀티스레딩을 사용하여 요청 보내기\n   with ThreadPoolExecutor(max_workers=8) as executor:\n       executor.map(send_request, file_paths)\n   print(time.time() - start)\n\n1개씩 처리 - 8개 하나씩 추론 (단순 for문)\n\nsimple python code\n\nimage num\n\ntime\n\n8개\n\n0.6015 s\n\n12개\n\n0.8785 s\n\n16개\n\n1.2121 s\n\n * code\n   \n   start = time.time()\n   inferencer.validate(test_df[:8])\n   print(time.time() - start)\n   \n   def validate(self, test_df):\n       answer = torch.Tensor(test_df['label'].to_list())\n       results = []\n       for _, (path, label) in tqdm(test_df.iterrows()):\n           result = self.inference(path)\n           results.append(result)\n\ntorch serve\n\nimage num\n\ntime\n\n8개\n\n1.3631 s\n\n12개\n\n2.190 s\n\n16개\n\n3.023 s\n\n * code\n   \n   start = time.time()\n   for file_path in file_paths:\\\n       with open(file_path, \"rb\") as file:\\\n           files = {\"data\": file}\n           response = requests.post(url, files=files)\n           \n           if response.status_code == 200:\n               print(f\"파일 {file_path}에 대한 예측 결과: {response.text}\")\n           else:\n               print(f\"파일 {file_path} 전송 실패. 응답 코드: {response.status_code}\")\n   print(time.time() - start)\n\n\n\n--------------------------------------------------------------------------------\n\n\n컴퓨팅 자원 비교 / DOCKER로 CPU 제한\n\n복수 이미지는 배치처리, cpu only, 이미지 도커내부에서 로드\n\ndocker image size - 3GB ⬆️\n\n\nCPU 1\n\nsimple python code\n\nbatch num\n\ntime\n\n1개\n\n1.7162 s\n\n8개\n\n11.5957 s\n\n12개\n\n16.809 s\n\n15개\n\n19.8933 s\n\n16개\n\n20.9935 s\n\ntorch serve\n\nbatch num\n\ntime\n\n1개\n\n11.9849 s\n\n8개\n\n30.8795 s\n\n12개\n\n36.5025 s\n\n15개\n\n52.2086 s\n\n16개\n\n56.0175 s\n\n\nCPU 2\n\nsimple python code\n\nbatch num\n\ntime\n\n1개\n\n1.2549 s\n\n8개\n\n8.1981 s\n\n12개\n\n11.9171 s\n\n15개\n\n13.7109 s\n\n16개\n\n13.614 s\n\ntorch serve\n\nbatch num\n\ntime\n\n1개\n\n2.4569 s\n\n8개\n\n9.4986 s\n\n12개\n\n12.2164 s\n\n15개\n\n14.7986 s\n\n16개\n\n18.2974 s\n\n\nCPU 4\n\nsimple python code\n\nbatch num\n\ntime\n\n1개\n\n0.5284 s\n\n8개\n\n2.9433 s\n\n12개\n\n4.6164 s\n\n15개\n\n4.5574 s\n\n16개\n\n4.4061 s\n\ntorch serve\n\nbatch num\n\ntime\n\n1개\n\n0.7814 s\n\n8개\n\n3.5942 s\n\n12개\n\n5.0870 s\n\n15개\n\n6.2039 s\n\n16개\n\n6.5113 s\n\n\nCPU 8\n\nsimple python code\n\nbatch num\n\ntime\n\n1개\n\n0.1779 s\n\n8개\n\n1.1370 s\n\n12개\n\n1.2512 s\n\n15개\n\n1.6787 s\n\n16개\n\n1.9344 s\n\ntorch serve\n\nbatch num\n\ntime\n\n1개\n\n0.5080 s\n\n8개\n\n2.1915 s\n\n12개\n\n2.3911 s\n\n15개\n\n2.8091 s\n\n16개\n\n2.9223 s",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055452184"
  },
  {
    "pageContent": "Amazon Rekognition Custom Labels\n\nAWS에서 제공하는 이미지 분류, 객체 탐지 서비스\n\n\n\n라벨 설정한 사진을 올리면 학습해서 모델 만들어 주고 바로 배포가 가능하다.\n\nS3에 저장된 이미지를 바탕으로 추론을 함.\n\n * api로 사용가능\n\n * 요금\n   \n   * 추론 : 시간당 4 USD\n   \n   * 훈련 : 시간당 1.14USD\n\nhttps://aws.amazon.com/ko/rekognition/custom-labels-features/\n[https://aws.amazon.com/ko/rekognition/custom-labels-features/]\n\nex)\n\naws rekognition detect-custom-labels \\\\\n  --project-version-arn \"arn:aws:rekognition:us-east-1:724663060328:project/sample-tire/version/sample-tire.2024-05-07T11.24.54/1715048694221\" \\\\\n  --image '{\"S3Object\": {\"Bucket\": \"custom-labels-console-us-east-1-17a7346ae2\",\"Name\": \"21958-1698357330764.jpg\"}}' \\\\\n  --region us-east-1\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055386676"
  },
  {
    "pageContent": "Paper Check - Multi modal\n\ngoogle gemini multi modal 모델로 paper check에서 정보를 추출해 봄.\n\n> 멀티모달?\n> \n> 기존 딥러닝 모델은 텍스트나 이미지 등 정해진 하나의 형태(모달)만 처리할 수 있었음 (이미지 모델은 이미지만, 텍스트모델은 텍스트만)\n> 멀티모달은 이미지나 텍스트, 음성 등 다양한 모달리티를 이해하고 처리할 수 있는 모델\n> \n> 이미지 모델은 시각, 텍스트 모델는 언어, 음성모델은 청각을 각각 담당했다고 비유하면 점점 다양한 감각을 갖추어서 복합적인 판단을 할 수\n> 있는 모델의 방향으로 발전 중\n\n\n\nprompt\n\nQuestion: For the given image, return a JSON object that has the fields amount, check-number, date and is-hand-written. \nDate should be follow the format yyyy-mm-dd.\nis-hand-written should be boolean type which means whether text in the image hand written or not.\n\nanswer\n\n{\"amount\": \"2349\", \"check-number\": \"9351\", \"date\": \"2004-02-24\", \"is-hand-written\": true}\n\nGemini 똑똑하지만 완벽하진 못함 → 이유는 사람이 사진을 봐도 뭔 말인지 모르겠는 것도 있음\n\n * Vertex AI\n   \n   const { VertexAI } = require(\"@google-cloud/vertexai\");\n   const fs = require(\"fs\");\n   const pattern = /```json\\\\n(.*?)\\\\n```/s;\n   \n   function readImageAsBase64(filePath) {\n     const buffer = fs.readFileSync(filePath);\n     const base64Image = buffer.toString(\"base64\");\n     return base64Image;\n   }\n   \n   const vertex_ai = new VertexAI({\n     project: \"neat-dryad-422803-k0\",\n     location: \"us-central1\",\n   });\n   const model = \"gemini-1.5-pro-preview-0409\";\n   \n   // Instantiate the models\n   const generativeModel = vertex_ai.preview.getGenerativeModel({\n     model: model,\n     generationConfig: {\n       maxOutputTokens: 8192,\n       temperature: 1,\n       topP: 0.95,\n       response_mime_type: \"application/json\", // this option only support in gemini 1.5\n     },\n     safetySettings: [\n       {\n         category: \"HARM_CATEGORY_HATE_SPEECH\",\n         threshold: \"BLOCK_ONLY_HIGH\",\n       },\n       {\n         category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n         threshold: \"BLOCK_ONLY_HIGH\",\n       },\n       {\n         category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n         threshold: \"BLOCK_ONLY_HIGH\",\n       },\n       {\n         category: \"HARM_CATEGORY_HARASSMENT\",\n         threshold: \"BLOCK_ONLY_HIGH\",\n       },\n     ],\n   });\n   \n   async function generate(image, text) {\n     const req = {\n       contents: [{ role: \"user\", parts: [image, text] }],\n     };\n   \n     const result = await generativeModel.generateContent(req);\n     const message = result.response.candidates[0].content.parts[0].text;\n     return message;\n   }\n   \n   const base64Image = readImageAsBase64(\n     \"paperCheck.png\"\n   );\n   \n   const image = {\n     inlineData: {\n       mimeType: \"image/png\",\n       data: base64Image,\n     },\n   };\n   \n   const prompt = {\n     text: `Question: For the given image, return a JSON object that has the fields amount, check-number, date and is-hand-written. \n     Date should be follow the format yyyy-mm-dd.\n     is-hand-written should be boolean type which means whether text in the image hand written or not.`,\n   };\n   \n   generate(image, prompt).then(console.log);\n\n\n\n가격 책정  |  Vertex AI의 생성형 AI  |  Google Cloud\n[https://cloud.google.com/vertex-ai/generative-ai/pricing?hl=ko]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3054305358"
  },
  {
    "pageContent": "RAG\n\nRetrieval-Augmented Generation, 검색증강 생성\n\n신뢰할 수 있는 외부 지식베이스를 참조하도록 하여 LLM의 할루시네이션 현상을 줄일 수 있는 방법론\n\n> 할루시네이션 현상, hallucination\n> \n> 인공지능이 정보를 처리하는 과정에서 발생하는 오류\n> \n> \n> ex)\n> ChatGPT가 사실이 아닌 내용을 사실처럼 말하는 것.\n> 세종대왕이 맥북을 언제 만들었어?\n> -> 요즘은 사실이 아니라고 하지만 ChatGPT 초창기에는 그럴 듯한 거짓말을 내놓았다\n\n\n\n작동 방식\n\n 1. 사용자 질문 입력\n\n 2. 벡터DB에서 관련 정보 검색\n\n 3. 검색결과 기반으로 LLM이 답변 생성\n\nimage-20240613-054800.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055288398/image-20240613-054800.png?api=v2]\n\nhttps://www.ncloud-forums.com/topic/277\n[https://www.ncloud-forums.com/topic/277]\n\nhttps://huggingface.co/learn/cookbook/en/advanced_rag\n[https://huggingface.co/learn/cookbook/en/advanced_rag]\n\n\nRAG WITH AWS\n\nhttps://aws.amazon.com/ko/blogs/big-data/build-scalable-and-serverless-rag-workflows-with-a-vector-engine-for-amazon-opensearch-serverless-and-amazon-bedrock-claude-models/\n[https://aws.amazon.com/ko/blogs/big-data/build-scalable-and-serverless-rag-workflows-with-a-vector-engine-for-amazon-opensearch-serverless-and-amazon-bedrock-claude-models/]\n\nhttps://medium.com/@nuatmochoi/%EC%89%BD%EA%B3%A0-%EA%B2%BD%EC%A0%9C%EC%A0%81%EC%9D%B8-rag-%EA%B5%AC%EC%B6%95%EC%9D%84-%EC%9C%84%ED%95%9C-knowledge-bases-for-amazon-bedrock-%EC%95%88%EB%82%B4%EC%84%9C-181cadb85689\n[https://medium.com/@nuatmochoi/%EC%89%BD%EA%B3%A0-%EA%B2%BD%EC%A0%9C%EC%A0%81%EC%9D%B8-rag-%EA%B5%AC%EC%B6%95%EC%9D%84-%EC%9C%84%ED%95%9C-knowledge-bases-for-amazon-bedrock-%EC%95%88%EB%82%B4%EC%84%9C-181cadb85689]\n\nhttps://aws.amazon.com/ko/blogs/aws/knowledge-bases-now-delivers-fully-managed-rag-experience-in-amazon-bedrock/\n[https://aws.amazon.com/ko/blogs/aws/knowledge-bases-now-delivers-fully-managed-rag-experience-in-amazon-bedrock/]\n\n\nVECTORDB\n\n벡터데이터 베이스는 정보를 벡터로 저장하는 데이터 베이스\n\n벡터 임베딩은 단어, 문장 또는 문서를 고차원의 벡터 공간에 매핑하는 기술.\n\n비정형 데이터를 AI 모델을 통해서 임베딩해서 벡터 임베딩으로 저장\n\n * mongodb, elasticSearch, openSearch, pinecone, faiss 등에서 벡터데이터베이스를 지원\n\n * 벡터로 데이터를 저장하고 검색시 벡터를 Knn으로 가장 유사도가 높은 K개 이하의 검색결과를 돌려주는 방식\n\n\n\n검색엔진 안쓰고 왜 VectorDB를 사용하는가?\n\n * 엘라스틱서치와 같은 전통적인 검색 엔진은 효율적으로 문서를 검색할 수 있지만, 이러한 방식은 주로 문서의 키워드나 일치하는 텍스트를\n   기반으로 함.\n\n * 벡터 임베딩은 단어나 문서 간의 의미적 유사성을 측정하는 데 사용할 수 있음\n\n\n\nex) opensearch에 vectordb 생성 → 조회 결과\n\nembedding이 content를 sentence embedding한 것.\n\n{'_index': 'chatbot',\n  '_id': 'jyRXBZABQop7lg6ApIxE',\n  '_score': 0.09192312,\n  '_source': {\n        'path': '/spaces/WIKI/pages/2996994099/Haulla+OJT+-+Manual+for+Data+Export',\n        'id': '2996994099',\n        'embedding': [\n            -0.41898674,\n            0.23327686,\n            1.1309109,\n            -0.0903966,\n            0.20218901,\n            0.31693187,\n            -0.02412281,\n            -0.18002847,\n        ...\n            0.12306907,\n            0.49376306,\n            0.5167257],\n        'title': 'AM 보너스 정책',\n        'content': \"haulla의 목표와 보너스 기준(측정 항목)은 명확히 연관성이 있어야 한다. 보너스 기준에 대한 달성 현황을 am들이 실시간으로 알 수 있어야 한다. ......\"\n    }\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055288398"
  },
  {
    "pageContent": "WIKI Chatbot\n\n사내 위키를 지식 베이스로 한 RAG 기반 챗봇\n\nGenAI도 중요하지만 Vector DB에서 원하는 내용이 잘 검색되게 하는 것이 더 중요하다.\n\n(프롬프트로 검색 결과를 제공하는데 검색 결과가 잘못되면 LLM이 올바를 대답을 할 수가 없음)\n\n위키문서를 어떻게 전처리할 것인가가 중요!\n\n\n\nOpen Search의 Ingest pipelines에 sentence transformer를 등록하여 벡터로 검색\n\n * pros\n   \n   * 벡터 DB 생성 시 & 유저 질문시 코드로 작성해야하는 파이프라인 단계 하나 감소\n\n * cons\n   \n   * 오픈서치에서 제공하지 않는 모델을 올리려면 별도의 변환과정이 필요함\n\nhttps://opensearch.isharkfly.com/search-plugins/neural-search-tutorial/\n[https://opensearch.isharkfly.com/search-plugins/neural-search-tutorial/]\n\n\n\n\nTO BE\n\nimage-20240613-090848.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3055616045/image-20240613-090848.png?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3055616045"
  },
  {
    "pageContent": "2024-07-19\n\n\n동시성 VS 병렬성\n\nhttps://www.youtube.com/watch?v=R9-pQ83iSr0\n[https://www.youtube.com/watch?v=R9-pQ83iSr0]https://www.youtube.com/watch?v=RlM9AfWf1WU\n[https://www.youtube.com/watch?v=RlM9AfWf1WU]\n\n\n동시성\n\n * 하나의 작업자가 여러개를 동시에 하는 것\n   \n   * ex) 셰프 1명이 여러 요리를 한번에 함\n\n\n장점\n\n * 하나의 코어가 여러개의 작업을 거의 동시에 할 수 있다.\n   \n   * 자원의 효율적인 사용과 빠른 응답시간 때문에 I/O 가 많은 작업에 유리하다.\n\n\n단점\n\n * 하나의 작업자가 여러작업을 빠르게 바꿔가면서 하기 때문에 작업자가 뻗으면 전체가 죽어버림\n\n * cpu 집약적인 일 (복잡한 연산, 대규모 데이터 처리)에서 성능이 좋지 않을 수 있다.\n\n * context switch로 인한 오버헤드가 있을 수 있다. (싱글코어 - 멀티프로세스 / 멀티스레드)\n\n\nIN NODE.JS\n\n * node.js의 런타임인 v8 engine에서 사용하는 event-loop는 single thread이다. 그렇기 때문에 기본적으로는\n   병렬성을 가지지 않고 동시성이라고 생각해야한다. (async/await, setInterval 등도 병렬처럼 보이지만 실제로는 일하는건\n   thread 하나라서 병렬성 처럼 보이는 것이다.)\n\n\n병렬성\n\n * 여러명의 작업자가 여러개의 작업을 하나씩 맡아서 하는것\n\nhttps://youtu.be/-P28LKWTzrI?si=1QRWSFEzMFy_v60J&t=59\n[https://youtu.be/-P28LKWTzrI?si=1QRWSFEzMFy_v60J&t=59]\n\n\n장점\n\n * CPU 집약적인 일에 대한 성능이 좋다.\n   \n   * 하나의 코어가 일을 하고있으면 다른 코어가 다른일을 하면 되기 때문\n\n * 작업자가 뻗어도 다른 작업자에 영향을 주지 않음\n   \n   * 하나의 프로세스가 죽어도 다른 프로세스에 영향을 주지 않음\n\n\n단점\n\n * 리소스 사용량 증가\n   \n   * 프로세스, 스레드가 독립적인 메모리 공간을 사용하기 때문에 전체적인 사용량 증가\n\n * 동기화, 데이터 공유등의 문제로 복잡성 증가\n\nKakaoTalk_Photo_2024-07-17-12-48-54.gif\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3093200969/KakaoTalk_Photo_2024-07-17-12-48-54.gif?api=v2]\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\n[https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API]\n\nhttps://nodejs.org/api/worker_threads.html\n[https://nodejs.org/api/worker_threads.html]\n\nhttps://nodejs.org/api/cluster.html [https://nodejs.org/api/cluster.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3093200969"
  },
  {
    "pageContent": "2024-07-05\n\n * CA (Certification Authority)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048702079/CA+Certification+Authority]\n\n * SSL/TLS Certificate\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048636456/SSL+TLS+Certificate]\n\n * [K8s][CM] Certificate\n   [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/3048800387/K8s+CM+Certificate]\n\n * [K8s][CM] ClusterIssuer/Issuer\n   [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/3048538301/K8s+CM+ClusterIssuer+Issuer]\n\n * [K8s][CM] CA Injector\n   [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/3048898705/K8s+CM+CA+Injector]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3057254438"
  },
  {
    "pageContent": "2024-06-07\n\n\nPROMETHEUS\n\nMetrics 를 저장하고 쿼리 할 수 있는 DB\n\nPromQL 어려움. 공부 ㄱㄱ\n\nThanos 사용할수 있음\n\n\nEXPORTER\n\nSource(Metrics) → Metrics Export\n\n * EC2(Node) → Exporter → Prometheus\n\n * DB(MySQL) → Exporter → Prometheus\n\n * Custom App → Exporter → Prometheus\n\n * CloudWatch → Exporter → Prometheus\n\n * …\n\n\nPULL/PUSH\n\n * pull 방식이 기본적임\n\n * push 방식은 잘 안씀\n   \n   * 아주 잠깐동안 실행되는 작업에 대해서 metrics를 수집할 수 없을때\n   \n   * 외부에서 직접적으로 metrics를 주입해줘야 할 때\n\n\nPUSHGATEWAY (== EXPORTER)\n\n * API로 보고하는 정보를 export 해주는것\n\n\nGRAFANA\n\n * 저장된 Metrics 데이터를 시각화 해서 볼 수 있음\n\n * == 운영 할 때 도움을 받을수 있음\n\n\n\n--------------------------------------------------------------------------------\n\n\nELASTICSEARCH(== OPENSEARCH)\n\nJSON 을 저장하고 쿼리할 수 있는 DB\n\n\nFILEBEAT\n\nSource(Logs) → Output stream\n\n\nLOGSTASH\n\nInput을 가공하는 과정을 거칠수 있음 (== pre-processor)\n\n\nKIBANA(== OPENSEARCH DASHBOARD)\n\n * 로그 시각화\n\n * == 디버깅/운영 시 도움을 받을수 있음\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3043983389"
  },
  {
    "pageContent": "2024-05-31\n * 스팸 메일?\n * Spoofing\n * 메일 발송 원리\n * SPF\n * DKIM\n * DMARC\n * 참고\n\n--------------------------------------------------------------------------------\n\n\n스팸 메일?\n\n왜 존재하는가?\n\n * 사용자가 원치 않는 내용을 보여주지 않기 위해\n   (광고, 관심 없는 내용)\n\n * 도메인 소유주가 아닌 집단에서 도메인 소유주인것 처럼 메일을 보내는 경우\n   (악의적인 내용, 사칭 등)\n\n어떻게 구분하는가?\n\n * 도메인을 소유하지 않은 사람이 보냈다고 판단될 때 (== 사칭)\n\n * 많은 집단이 악의적인 메일을 보내는 도메인으로 판단될 때 (== Blackhole List)\n\n\n\n\nSPOOFING\n\nimage-20240527-044743.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/image-20240527-044743.png?api=v2]\n\n표준만 지켜서 데이터를 보내면 From 도메인을 사칭해서 보내는건 일도 아니다.\n\nimage-20240527-044348.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/image-20240527-044348.png?api=v2]\n\n실제로 불과 10년 전쯤만 해도 다른 사람이 내 도메인으로 사칭하여 메일을 보낼수가 있었다.\n심지어 네이버 메일이 막 런칭된 시점에도 From 의 도메인을 아무렇게나 수정해서 보낼수 있던 시절이 존재했다.\n\n이제는 거의 모든 메일 서버에서 사칭 및 데이터 변조를 막기 위해 오늘 설명할 많은 인증 체계를 도입했다.\n\n\n\n\n메일 발송 원리\n\nimage-20240527-044140.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/image-20240527-044140.png?api=v2]\n\n메일을 발송하기 위한 과정은 실제로 너무 간단하기 때문에 가능한 일.\n\n위 그림에서 설명하는 “이메일”을 보낸다는건 위에서 보았던 데이터를 보내는것이다.\n\n\n\n\nSPF\n\n위와 같은 취약점을 보안하기 위해 SPF 인증과 같은 절차가 추가되었다.\nSPF 인증을 통해 도메인 소유주는 원하는 메일 서버에서만 발송된 메일을 의도적으로 발송한 메일로 취급할 수 있다.\n\n발신 도메인의 소유주는 DNS 레코드에 아래와 같이 허용할 발신 메일 서버를 나열할 수 있다.\nSPF 인증은 이메일을 수신하는 메일서버에서 DNS 레코드를 쿼리하여 허용된 메일서버와 일치하는지 확인한다.\n\nv=spf1 include:_spf.google.com include:amazonses.com ~all\n\nimage-20240527-045739.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/image-20240527-045739.png?api=v2]\n\n이것을 이해한다면 왜 SES 와 Google Workspace 를 별도로 허용해야 하는지 이해할 수 있다.\n\n\n\n\nDKIM\n\nSPF는 도메인 소유주가 메일서버를 허용하기 위한 목록이었다면,\nDKIM은 이메일을 수신한 메일서버가 발신 메일서버를 신뢰하기 위한 인증 수단이다.\n\n이론상 아무나 메일서버를 구축해서 변조된 이메일 데이터를 보낼수 있기 때문에, 메일 발송 서비스를 제공하는 업체에 대해서도 검증을 하는것이다.\n때문에 저렴하다고 이상한 메일 서비스를 쓰면 스팸 처리되는 경우도 허다하다.\n\nimage-20240527-050447.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/image-20240527-050447.png?api=v2]\n\n 1. 메일 서버 제공 업체는 도메인 소유주에게 메일 서버를 신뢰하기 위한 Public key를 전달한다.\n\n 2. 도메인 소유주는 지정된 TXT 레코드에 지정된 값을 등록한다. 이 값에는 Public key가 포함된다.\n\n 3. 도메인 소유주가 발신 메일서버를 통해 메일을 발송하면 메일 서버는 private key 를 서명하여 이메일 헤더에 포함해서 수신\n    메일서버로 전달한다.\n\n 4. 이메일을 수신한 메일 서버는 발신 메일서버에 대한 인증을 수행하기 위해 발신 도메인의 DNS 서버에 질의를 하여 DKIM public\n    key와 이메일 헤더에 있는 서명된 private key 를 이용해 validation 을 진행한다.\n\n 5. 수신 메일 서버에서 검증이 성공하면 받은 편지함으로 보내고, 실패하면 DMARC 정책에 따라 스팸함으로 보내거나 반송 처리를 수행한다.\n\n이것을 이해한다면 왜 SES DKIM과 Google Workspace DKIM을 별도로 등록해야 하는지 이해할 수 있다.\n\n\n\n\nDMARC\n\nDMARC(Domain-based Message Authentication, Reporting and Conformance) 란,\n이메일 수신 서버가 SPF/DKIM 인증에 실패한 메세지를 처리하는 방법을 지정하고, 처리 결과를 보고하는 주소를 지정하기 위한 인증 수단이다.\n\nDMARC 인증은 비교적 간단하지만, DMARC 인증에 실패하면 수신 메일서버는 반송처리 할 가능성이 매우 높아진다.\n\n정책에 따라 인증에 실패한 메일을 무조건 반송하거나, 스팸 메일함에 넣도록 할 수 있으며 해당 처리 결과를 지정된 “보고서 주소” 로 전송한다.\n\nimage-20240527-051555.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/image-20240527-051555.png?api=v2]\n\nDMARC는 (제대로 구현된)모든 메일서버에서 수행 되므로, 어떤 발신 메일서버를 통해 메일을 발송하던 관계 없이 모든 메일에 대해 처리 결과를\n알수 있다.\n\n아래와 같은 형식으로 레코드를 지정해두면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358850/2024-05-27%20at%2014.53.40@2x.png?api=v2]\n\n\n\n\n참고\n\n * [ENS] DKIM/SPF/DMARC\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3005939835/ENS+DKIM+SPF+DMARC]\n\n * [ENS] IP Reputation 관리\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3018358789/ENS+IP+Reputation]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3018358850"
  },
  {
    "pageContent": "2024-05-24",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3015966750"
  },
  {
    "pageContent": "2024-05-10\n\n\nJENKINS ISSUES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2996961284/2024-05-10%20at%2011.03.30@2x.png?api=v2]\n\n * 디스크 용량 부족해서\n\n * why?\n   \n   * monorepo 용량이 많이 먹음\n   \n   * 각 파이프라인마다 monorepo 받아와서 yarn install 같은 행위를 하기 때문에\n\n * 15~30분 정도 아무도 빌드 안하면 젠킨스 노드 정리될것 → 이후에 다시 빌드하면 됨\n\n\n\n\nSLACK BOT 메세지 폭탄\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2996961284/2024-05-10%20at%2011.12.09@2x.png?api=v2]\n\n * 왜 계속 뜨는가?\n   \n   * filebeat?\n   \n   * slack buffer pool?\n\n * EC2 instance → container 여러개 → stdout / stderr 로그를 파일로 남김\n\n * EC2 instance 에 filebeat 컨테이너가 떠있음\n\n * filebeat -> logstash -> elasticsearch ↔︎ kibana 에서 조회가 가능함\n   \n   * 갑자기 30000개 로그 1초만에 발생 → 전부 한번에 보고하면 죽음 → filebeat 내부적으로 buffer 가지고 있음 ==\n     완충제 역할\n\n * filebeat → logstash → slack HTTP API\n   \n   * slack도 내부적으로 buffer를 가지고 있다.\n\n\nHUBSPOT SYNC DELAY ISSUE\n\n * 문제1. Hubspot Webhook이 대량으로 들어옴\n   \n   * 최대 10000개씩 묶어서 처리를 하고 있기 때문에 이 묶음이 처리되기 전까지 다른 데이터의 동기화 Block\n   \n   * 처리가 늦어질수는 있지만 AM들의 영업에 있어 영향이 커서 컴플레인 들어옴\n   \n   * 웹훅 대량 발생 원인: 많은 Calls을 가진 AM들의 팀 변경\n     \n     * 퇴사자가 발생하는 경우에도 Exited 팀으로 변경한다고 함.\n\n * 문제2. Hubspot Adapter가 웹훅을 처리하는데 걸리는 시간이 매우 오래걸림\n   (최소 1초)\n   \n   * 가설1. Hubspot 에서 속도 조절용으로 일부러 늦게 준다.\n     → 1분당 150번 제한과 같은게 있지만 지금은 해당하지 않음\n     → 들어오는 웹훅을 쌓아뒀다가 1초마다 처리하도록 실행하는 로직이 최소 1초가 걸리는 원인\n     → 허브스팟은 잘못 없었음\n   \n   * 가설2. 배치로 처리하면 전체적으로 봤을때 빨리 끝날것이다.\n     → 1개씩 요청하던것을 50개씩 요청하도록 변경\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2996961284/2024-05-09%20at%2019.19.31@2x.png?api=v2]\n     \n     → 전체적인 처리 속도는 조금 빨라졌지만 API 응답 속도가 기하급수적으로 느려짐\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2996961284/2024-05-09%20at%2019.13.40@2x.png?api=v2]\n     \n     → 로직이 매우 단순해서 성능이 느릴 이유가 없으므로 정상이 아님 [코드]\n     [https://github.com/Ecube-Labs/haulla/blob/5d6efa4a9ecc97e66890af821e80e99f51b429a2/apps/hubspot-adapter/src/services/calls/application/service.ts#L30-L46]\n   \n   * 가설3. Hubspot Adapter 로직 어딘가에서 병목이 생기고 있다.\n     → 로직만 보면 병목이 생길 이유가 없음\n     → APM을 통해 커넥션이 부족할때 발생할수 있는 증상 관측\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2996961284/2024-05-10%20at%2011.23.05@2x.png?api=v2]\n     \n     → Connection Pool 늘려서 테스트\n     → 확연히 개선됨\n     \n     image-20240510-023306.png\n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2996961284/image-20240510-023306.png?api=v2]\n\n아직 완전히 해결된것은 아니지만 성능 개선 / 동기화 주기 단축으로 임시 조치된 상태\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2996961284"
  },
  {
    "pageContent": "2024-04-26\n * Quote Calculator\n * Quote\n * Quote Request Flow with code\n   * 검증 1. - 서비스 스펙에 맞는 price table이 하나인가?\n   * 검증2. Haulla Rate를 계산 할 수 있는가?\n   * 계산\n     * 경우에 따른 total haulla rate 계산\n       (https://github.com/Ecube-Labs/haulla/pull/818 )\n     * 실제로 적용되는 total haulla rate (target final rate와 비교)\n   * 검증 3. 상태판단\n     * Quoted인가?\n     * Drop인가?\n * Re-Quote Flow with code\n   * 검증1. 구시대의 유물 검증\n   * 검증2. Haulla Rate를 계산 할 수 있는가?\n\n\nQUOTE CALCULATOR\n\n * 고객에게 영업할때 필요한 견적을 계산해주고 Deal을 관리하는 프로세스\n\n\nQUOTE\n\n * 견적서\n\n[H][B][도메인 모델] Quote\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2804547585/H+B+Quote]\n\n\n\n\nQUOTE REQUEST FLOW WITH CODE\n\n[/wiki/download/attachments/2979758091/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8-1713249033064.drawio.png?api=v2]\n\n\n\n\n검증 1. - 서비스 스펙에 맞는 PRICE TABLE이 하나인가?\n\nimage-20240423-034342.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240423-034342.png?api=v2]image-20240423-034514.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240423-034514.png?api=v2]\n\n * 2024년 04월 23일, 현재 정책상 price table은 서비스 스펙마다 하나씩만 존재할 수 있다. (추후 하울러마다 다르게 가격을\n   책정하여 비교하는 로직이 추가될 예정)\n\n\n검증2. HAULLA RATE를 계산 할 수 있는가?\n\nimage-20240423-034852.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240423-034852.png?api=v2]image-20240423-050535.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240423-050535.png?api=v2]image-20240423-050845.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240423-050845.png?api=v2]\n\n * service가 전부 Regular Service이고 해당 zipcode의 service coverage가 Serviceable이면\n   price table이 있다고 간주한다.\n\n\n계산\n\nimage-20240424-025301.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-025301.png?api=v2]\n\n경우에 따른 TOTAL HAULLA RATE 계산 (HTTPS://GITHUB.COM/ECUBE-LABS/HAULLA/PULL/818\n[https://github.com/Ecube-Labs/haulla/pull/818] )\n\nimage-20240424-025418.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-025418.png?api=v2]image-20240424-025519.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-025519.png?api=v2]\n\n * No incumbent\n   \n   * Limit ROI 기반으로 margin을 추가하여 계산\n\n * Incumbent\n   \n   * service spec 이 incumbent와 같을 때\n     \n     * min(previous rate * ( 1 - default discount rate) , ROI 24기반으로 계산)\n   \n   * service spec 이 incumbent와 다를 때\n     \n     * ROI 24기반으로 계산\n\n실제로 적용되는 TOTAL HAULLA RATE (TARGET FINAL RATE와 비교)\n\nimage-20240424-025826.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-025826.png?api=v2]image-20240424-025809.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-025809.png?api=v2]\n\n * 위에서 계산된 haulla rate와 target final rate 중 큰 값을 total haulla rate로 둔다.\n\nimage-20240424-025915.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-025915.png?api=v2]\n\n * 그 후 roi 계산, discount rate 계산, service에 haulla rate 분배 등을 진행한다.\n\n\n검증 3. 상태판단\n\nQUOTED인가?\n\nimage-20240424-031130.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-031130.png?api=v2]\n\nimage-20240424-031203.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-031203.png?api=v2]image-20240424-031342.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-031342.png?api=v2]\n\n\n\n * Quoted 조건에 부합하면 quoted로 업데이트 및 계산된 값 적용\n\n * 부합하지 않는다면 Limit ROI로 계산된 값 적용 (Quoted가 아니라면 최소값을 보여줘야함)\n\nDROP인가?\n\nimage-20240424-031550.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-031550.png?api=v2]\n\nimage-20240424-031620.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-031620.png?api=v2]\n\n * 우리가 줄 수 있는 최소값이 incumbent보다 싸게줄 수 없다면 drop\n\n\nRE-QUOTE FLOW WITH CODE\n\n[/wiki/download/attachments/2979758091/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8-1713242390731.drawio.png?api=v2]\n\n\n검증1. 구시대의 유물 검증\n\nimage-20240424-051148.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-051148.png?api=v2]image-20240424-051330.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-051330.png?api=v2]\n\n * 처음 설계 시 quote 1개에 location이 여러개로 설계되었지만 현재는 정책으로 인해 quote 1개에 location 1개만\n   하도록 되어있다.\n\n * 그래서 구시대의 유물은 re-quote하지 않고 새로 만든다.\n\n\n검증2. HAULLA RATE를 계산 할 수 있는가?\n\nimage-20240424-051824.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-051824.png?api=v2]image-20240424-051622.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2979758091/image-20240424-051622.png?api=v2]\n\n * haulla rate가 계산 가능하면 Limit ROI 기반으로 계산한 값으로, 아니라면 기존 quote의 값으로 새로운 쿼트를\n   만들어준다.\n\n * price table 검증은 현재 구현이 되지 않았다. (https://github.com/Ecube-Labs/haulla/pull/806\n   [https://github.com/Ecube-Labs/haulla/pull/806] 에서 로직 변경 예정)\n\nhttps://github.com/vasanthk/react-bits/blob/master/patterns/1.conditionals-in-jsx.md\n[https://github.com/vasanthk/react-bits/blob/master/patterns/1.conditionals-in-jsx.md]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2979758091"
  },
  {
    "pageContent": "2024-04-12\n * 인덱스로 인보이스 발행 개선\n   * 맥락 공유\n     * 상황\n     * 결론 (인덱스 적용 후)\n   * 1. 쿼리 성능 저하 원인\n     * 쿼리 느린 이유 -> 디스크 I/O\n     * 성능 저하 원인 -> 디스크 I/O 부하 증가\n     * 성능 개선 방법\n   * 2. Index?\n     * 구조와 동작\n     * 장점\n   * 3. 음? 그럼 Index는 만능인가?\n     * 단점\n     * 인덱스를 이용한 테이블 액세스는 고비용이다.\n   * 4. Index 설계\n   * 5. Index 적용 사례\n     * 1. 쿼리 분석 (RDS Performance Insight)\n     * 2. 인덱스 컬럼 후보 리스트업\n     * 3. 인덱스 기준 컬럼, 순서 결정 (카디널리티, 선택도 고려)\n     * 4. 테스트 (accountId)\n     * 4. 테스트 (accountId, publishOn)\n     * 5. 결과\n   * 결론\n\n\n인덱스로 인보이스 발행 개선\n\n\n맥락 공유\n\n\n상황\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/D1z-jbHAItMD8PC7hxEQrJRZL8hrBkt7eCzOKuoOxgSnVr-GYUI7gm_tBYrqRyGv-lFY9HnF6pGMKTslJfjrmCenQW_CXbimDemgdwzyYDGPkqwvU44e4v21cy-PFt36Q8YjTk1ahgKhdCK0RNQdULsXXQ=nw?api=v2]\n\n * 4월 인보이스 발행 과정에서 DB에 부하가 발생하고 있는 것을 확인함.\n\n * AWS Performance Insight [https://aws.amazon.com/rds/performance-insights/] 라는\n   모니터링도구를 통해 문제되는 쿼리를 발견함. (과거 인보이스 조회하는 쿼리)\n\n * 인보이스에 인덱스 추가하여 부하 문제 해결하고 성능 개선하는 이슈를 진행함. SW-10406\n   [https://ecubelabs.atlassian.net/browse/SW-10406] - 이슈 세부사항 가져오는 중... 상태\n\n\n결론 (인덱스 적용 후)\n\nimage-20240412-071015.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-071015.png?api=v2]\n\n * DB 부하 문제 해결.\n\n * 13분 넘게 걸리던 인보이스 발행 성능을 1분 30초 정도로 개선.\n\n\n\n\n1. 쿼리 성능 저하 원인\n\n\n쿼리 느린 이유 -> 디스크 I/O\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/7K_invX0wUBUljtOBRzumsaN0RZ4_vvE4ZXhdLsrVmqA1H_t2YIKpj6wguE6Wxtydao7Kir49RnBNzLduw_p7fvos2db8x25d2pNspDeY2olW0nSQRC0-sYJ7JzVR7Vspbo5o7S8gOV8JpM8E4cXCzFmYg=nw?api=v2]\n\n * 디스크에서 파일을 가져오는 건 매우 비효율적이고 느린 작업.\n\n * 병목으로 작용하는 디스크 I/O를 개선하기 위해 활용하는 것이 캐시나 인메모리 DB\n\n\n성능 저하 원인 -> 디스크 I/O 부하 증가\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/uxSH8LYmMVkfcA8GDHvfGmdqD_gLXLjCS71GgeilJkOPZxPmVHcq-zlc2Iu-y4bDX2sYH3lYdqqUZ2oM5lVb9nhu6RbQtz3HBBXKzkxz2OPSiC2Hs3P1lt5kdb6pSMH1py4BhshlSpH4l8VwDhjEotn7UQ=nw?api=v2]\n\n * Block(Page): 데이터 읽고 쓰는 단위 \n\n * 블록 늘어날수록 디스크 I/O 부하 증가 -> 디스크 경합 심화 -> 급격한 성능 저하 \n\n * Table Full Scan: 모든 블록 읽어 데이터 찾는 방식\n\n\n성능 개선 방법\n\n * 고성능 장비 구매\n\n * 캐시 늘리기\n\n * 파티셔닝\n\n * 인덱스\n\n\n\n\n2. INDEX?\n\n대용량 테이블에서 필요한 데이터를 빠르고 효율적으로 액세스하기 위해 사용하는 오브젝트, 자료구조\n\n\n\n\n구조와 동작\n\nimage-20240412-082247.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-082247.png?api=v2]\n\n * 주로 B+, B* 트리 인덱스\n   \n   * 모든 데이터는 리프 노드에 존재한다. \n   \n   * Double Linked List 구조로 양쪽으로 수평 탐색이 가능하다.\n   \n   * 리프 노드까지 수직 탐색하여 시작 지점을 찾고, 수평 탐색을 통해 테이블 블록을 찾는다.\n   \n   * 검색, 삽입, 삭제 시간복잡도 모두 O(log n)\n\n * 리프 블록에서 얻은 주소 정보로 테이블 블록에 액세스해 데이터 읽는 방식 -> 논리적, 물리적 I/O 부하가 감소\n\n\n장점\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/6-GwTq6T79EAWmEKumd2QsB5gbsBdCYCJXKSUhttwr6skKtpPjr4DpBxKyTfUew5ucAjsG45HNNXeTIfxE18Kisjd9Bkqs-6n14dlcbzPzkwMUsJD4rJ_6DoCcct6EXw81O3eyk_0zxfuSpqXRP7DrEL0w=nw?api=v2]\n\n * (인덱스 설계가 잘 되어 있다면) 데이터 검색 속도가 개선된다.\n\n * (인덱스 설계가 잘 되어 있다면) 데이터양이 증가해도 쿼리 성능에 크게 영향을 받지 않는다.\n\n\n\n\n3. 음? 그럼 INDEX는 만능인가?\n\n\n단점\n\n * DML(Insert, Update, Delete) 성능 저하 (인덱스 업데이트)\n\n * 데이터베이스 사이즈 증가 (디스크 낭비 가능성)\n\n * 데이터베이스 관리 및 운영 비용 상승\n\n * 잘못 설계하면 오히려 Table Full Scan 방식보다 성능이 떨어질 수 있음.\n\n\n인덱스를 이용한 테이블 액세스는 고비용이다.\n\nimage-20240412-082610.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-082610.png?api=v2]\n\n * 인덱스 ROWID 이용한 테이블 액세스는 생각보다 고비용이다.\n   \n   * 한 번에 하나의 블록만 읽어옴. (캐시 x)\n   \n   * 물리적, 논리적으로 떨어져 있는 블록을 읽을 가능성이 높다.\n\n * Table Full Scan 은 효율적인 액세스 방식을 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/9_4LcM9wSGgQqEbUDNbeH5jX-Aqs5CZHrLy4sx8FF_yiBShrTzKcSsmwgQboB38H24nwKFyx_y1VGHYPVkFsl05690Sf4Ebhv4SjNwCNRY8Zkay0MMrfgDgW98DQy1A16qFW1S4w8-7WIgJHOOpnxNJuLw=nw?api=v2]\n\n * 인덱스를 잘못 설계해서 선택도가 높은 경우 오히려 Table Full Scan이 유리할 수 있다.\n\n * 손익분기점은 보통 추출 건수 5~20% 낮은 수준에서 결정. (데이터가 많으면 많을수록 더 낮아짐)\n\n\n\n\n4. INDEX 설계\n\n * 기준\n   \n   * 조건절에 항상 사용하거나, 자주 사용하는 컬럼.\n   \n   * 카디널리티가 높으면 좋다.\n     \n     * 카디널리티: 컬럼이 가질 수 있는 고유한 값의 수\n       \n       * SW 팀 이름: 13\n       \n       * SW 팀 성별: 2\n   \n   * 선택도가 낮으면 좋다.\n     \n     * 선택도: 값을 검색했을 때 반환되는 데이터의 비율 \n       \n       * SELECT * FROM 이큐브랩SW WHERE type = ‘사람’ -> 100%\n       \n       * SELECT * FROM 이큐브랩SW WHERE nickname = ‘x’ -> 8%?\n\n * 순서\n   \n   * 결합 인덱스의 경우 선두 컬럼은 조건절에 항상 사용되는 것을 우선해야한다. (선두 컬럼 없으면 인덱스 검색 x)\n   \n   * 일치(=) 조건으로 자주 조회하는 컬럼을 앞쪽에 둔다.\n     \n     * 일치 조건의 경우 선택도는 순서와 상관 없다.\n\n\n\n\n5. INDEX 적용 사례\n\n\n1. 쿼리 분석 (RDS PERFORMANCE INSIGHT)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/UKgfr2GAI2I7nYqTj0B88EjcOI6b-n0C6Pn1Rr1X7ZNgJHRcFpE2wHTZmiFkenu82n-jlA5eIdHUp_NXbxPa10pSnuL0F1rerny3H2qwfsMeo_UIrc5IDoonFKX5jEld5MPq_2Pf_KNpbSg39edbVqX3AA=nw?api=v2]\n\n인보이스 조회 쿼리가 문제구나?\n\n\n\n\n2. 인덱스 컬럼 후보 리스트업\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/JJ3SiqP1eZFDTu5uVGoWwsfgkeoWCna3DKr4xgdlppRRJrCrhCg8PYauZk4Sq5Y01mwzDz0jJ_WN_e2jzoVcgi_gdkisHU8pnVOqXRGAVk1x8oGovhMad3QxKTVGPlFYFsNNkS-WX5joHMwdoKZP7jbGwQ=nw?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/tIH3tBxnUFCJ3OTtt7wfvQLjvbSoiv83AYu4xIJzE0-6nzVEHq-tyYt3KAoB4z3E5pWTbavBTdGPsz_U67utlC7Gu48UjJSewDlNuqfu4mBLrQYR-IaAKjXmHM5pkBkFv9bK2kXsGXbHZdomaSBov5v0fg=nw?api=v2]\n\n * accountId, publishOn, type, statues이 공통적으로 사용되는구먼?\n\n\n\n\n3. 인덱스 기준 컬럼, 순서 결정 (카디널리티, 선택도 고려)\n\naccountId, publishOn, type, statues\n\n→\n\naccountId, publishOn\n\n\n\n\n4. 테스트 (ACCOUNTID)\n\nCREATE INDEX IX_invoice_accountId ON invoice (accountId);\n\nimage-20240412-082933.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-082933.png?api=v2]\n\n\n\n\n4. 테스트 (ACCOUNTID, PUBLISHON)\n\nCREATE INDEX IX_invoice_accountId_publishOn ON invoice (accountId, publishOn);\n\nimage-20240412-082947.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-082947.png?api=v2]\n\n\n5. 결과\n\nimage-20240412-082959.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-082959.png?api=v2]image-20240412-083007.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2967011406/image-20240412-083007.png?api=v2]\n\n\n\n\n결론\n\n * 인덱스를 잘 활용하면 큰 성능 개선을 이뤄낼 수 있다. \n\n * 다만 인덱스 단점, 특징 고려하여 적절한 상황에 잘 써먹자.\n\n * 인덱스가 만능은 아니다. 맹신하지는 말자.\n\n * Table Full Scan이 유리한 경우도 있다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2967011406"
  },
  {
    "pageContent": "2024-03-29https://youtu.be/wIyHSOugGGw?si=l3nPclqL_W9Rv7JU\n[https://youtu.be/wIyHSOugGGw?si=l3nPclqL_W9Rv7JU]\n\nhttps://www.youtube.com/watch?v=r8Dg0KVnfMA\n[https://www.youtube.com/watch?v=r8Dg0KVnfMA]\n\n * 따라 해보기\n\n\n\n[OJT] 클린 코드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/936902709/OJT]\n\n * 복습",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2949120003"
  },
  {
    "pageContent": "2024-03-22\n\n[OJT][FE] Open Graph protocol\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2173763585/OJT+FE+Open+Graph+protocol]\n\nhttps://blog.bytebytego.com/p/ep100-polling-vs-webhooks\n[https://blog.bytebytego.com/p/ep100-polling-vs-webhooks]\n\n\nPOLLING\n\n// server\n\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\napp.listen(3000, () => {\n  console.log(\"Server is running on port 3000\");\n});\n\n// client\n\nconst axios = require(\"axios\");\n\n(async () => {\n  async function polling() {\n    const { data } = await axios.get(\"http://localhost:3000\");\n    console.log(data);\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    await polling();\n  }\n\n  polling();\n})();\n\n\nLONG POLLING\n\n// server\n\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", async (req, res) => {\n  const message = await kafka.consume(...)\n  res.send(message);\n});\n\napp.listen(3000, () => {\n  console.log(\"Server is running on port 3000\");\n});\n\n// client\n\nconst axios = require(\"axios\");\n\n(async () => {\n  async function longPolling() {\n    const { data } = await axios.get(\"http://localhost:3000\");\n    console.log(data);\n    await longPolling();\n  }\n\n  longPolling();\n})();\n\nhttps://www.youtube.com/watch?v=UStWv62FX-k&list=PLa7VYi0yPIH0IpUKXb3q7NSjpJGO9GGGZ\n[https://www.youtube.com/watch?v=UStWv62FX-k&list=PLa7VYi0yPIH0IpUKXb3q7NSjpJGO9GGGZ]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2925527147"
  },
  {
    "pageContent": "2024-02-23\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173801724/Team+Culture#US-%3E-Global\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173801724/Team+Culture#US-%3E-Global]\n\n * First name 순범\n\n * Last name 권\n\n\nKUBERNETES\n\n\nPOD\n\nNetwork, File system 공유\n\nconst server = app.listen(port, async () => {\n    if (tenantId) {\n        try {\n            await axios.post(`http://localhost:${port}/haulers/run`, {});\n        } catch (err) {\n            console.error(err);\n        }\n    }\n    try {\n        await axios.post(`http://localhost:${port}/admins/run`, {});\n    } catch (err) {\n        console.error(err);\n    }\n\n    /* await */ eventStore.start().catch((err) => {\n        // TODO: 아직 Kafka 검증중이라 await 하지 않고 로그만 남겨 놓는다\n        console.log(err);\n    });\n});\n\nimage-20240223-021014.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2916122797/image-20240223-021014.png?api=v2]\n\nvs\n\n// called by Jenkins\nasync expirePaymentLinks(roles: Role[], { dueOn }: { dueOn?: CalendarDate }) {\n    const thiz = this;\n\n    await pipeline(\n        await this.invoiceRepository.stream({\n            statuses: ['open'],\n            dueOnStart: dueOn ?? addDays(today(), -1),\n            dueOnEnd: dueOn ? addDays(dueOn, 1) : today(),\n        }),\n        new Writable({\n            objectMode: true,\n            async write(chunk: Invoice, encoding, callback) {\n                try {\n                    await axios.post(\n                        `http://haulla-api.haulla/admins/invoices/${chunk.id}/expire`,\n                        {...},\n                    );\n                } catch (err) {\n                    logger.error(err.message, { err, tags: ['haulla', 'error'] });\n                }\n                callback();\n            },\n        }),\n    );\n}\n\n * http://haulla-api.haulla\n\n * https://haulla-api.haulla.com\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916122797"
  },
  {
    "pageContent": "2024-02-16\n * SW팀 만족도 조사 2023 4Q\n * Deadline 준수 Culture\n * 보고\n * 악마의 리뷰어\n * const/enum 파일\n   * 문제 의식\n\n\nSW팀 만족도 조사 2023 4Q\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2908913790/2023+4Q]\n\n\nDEADLINE 준수 CULTURE\n[https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/346685645/Deadline+Culture+200205]\n\n\n보고\n\n * 중간 보고\n   \n   * Charlie: txId 12345 확인 부탁드립니다\n   \n   * Sean: 알겠습니다\n   \n   * – few hours later\n   \n   * Charlie: 12345 어떻게 되고 있나요?\n   \n   * Sean: 아직 확인 중 입니다 → (오류)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n     \n     * Check 전에 문제 상황이 있으면 알려줄 것\n\nimage-20240216-012006.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2906620196/image-20240216-012006.png?api=v2]\n\nTheo → Arthur → Ogong → Tim → Lee → Joel → Lucas → Ben → Jini → Snack → Charlie\n\n\n악마의 리뷰어\n\nhttps://namu.wiki/w/악마의 대변인\n[https://namu.wiki/w/%EC%95%85%EB%A7%88%EC%9D%98%20%EB%8C%80%EB%B3%80%EC%9D%B8]\n\nimage-20240216-014931.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2906620196/image-20240216-014931.png?api=v2]\n\n * 코멘트 남기면 reaction 취하기\n   \n   * 그렇지 않으면 코멘트를 확인 한 건지 아닌지 알 수 없음\n\n\nCONST/ENUM 파일\n\nconst.ts\n\nexport serviceType = 'Regular' | 'Roll-off'\n\nexport ROUTE_SIGN_IN = '/sign-in'\n\n\n\nmodel.ts\n\nclass Service {\n  type: ServiceType;\n}\n\nfunction Comp() {\n  const [type, setType] = useState<ServiceType>();\n}\n\nvs\n\nclass Service {\n  type: 'Regular' | 'Roll'-off\n}\n\nfunction Comp() {\n  const [type, setType] = useState<'Regular' | 'Roll-off'>();\n}\n\n\n문제 의식\n\nconst, enum 수정할 때 어디까지 확인하는가?",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2906620196"
  },
  {
    "pageContent": "2024-01-12\n\n * debezium down\n   \n   * 2024-01-04 Debezium down\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2875326724/2024-01-04+Debezium+down]\n\n * ENS\n   \n   * EcubeLabs Notification Service\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864819/EcubeLabs+Notification+Service]\n\n * KWP\n   \n   * Kafka Webhook Producer\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868740182/Kafka+Webhook+Producer]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2876211274"
  },
  {
    "pageContent": "2023\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2876440654"
  },
  {
    "pageContent": "2022\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2612199521"
  },
  {
    "pageContent": "2021\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2456977468"
  },
  {
    "pageContent": "abcdefg\n\nimage-20240614-032526.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3057287195/image-20240614-032526.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3057287195"
  },
  {
    "pageContent": "abcdefgabcde\n\nhttps://en.lixo.tech/ [https://en.lixo.tech/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3058466896"
  },
  {
    "pageContent": "2024-07-26\n\n\nCONTROLLED COMPONENT VS UNCONROLLED COMPONENT\n\n\n\nhttps://www.youtube.com/watch?v=ecY3QSxZZYY\n[https://www.youtube.com/watch?v=ecY3QSxZZYY]\n\n\nUNCONTROLLED COMPONENT\n\n * 실제 Dom Node element를 사용하겠다는 뜻. react에 의해 제어되는 것이 아닌 Dom에 의해 제어된다.\n\nfunction UnContolledForm(){\n  const inputRef = useRef(null)\n  \n  const handleSubmit = (e) =>{\n    e.preventDefault()\n    console.log(inputRef.current.value)\n  }\n\n  return (\n    <form>\n      <input ref={inputRef} />\n      <button onClick={handleSubmit}>submit</button>\n    </form>\n  )\n} \n\n * 리액트에서는 리액트 라이프사이클이나 인해 reference를 잃어버릴 수도 있고 다른 사이드 이펙트로 영향을 받을 수 있기 때문에 권장하지\n   않음\n\n\nCONTROLLED COMPONENT\n\n * react의 state에 의해 관리되는 component.\n\nfunction ControlledForm(){\n  const [value, setValue] = useState('');\n  \n  const handleSubmit = (e) =>{\n    e.preventDefault()\n    console.log(value)\n  }\n  \n  return (\n    <form>\n      <input onChange={(e)=> setValue(e.target.value)} />\n      <button onClick={handleSubmit}>submit</button>\n    </form>\n  )\n}\n\n * state에 의해 관리되기 때문에 예측가능하다.\n\n\n우리는?\n\n * 우리는 대부분의 form을 react-hook-form [https://react-hook-form.com/]을 사용하고 있음\n\n\nREGISTER\n\n * react-hook-form의 register [https://react-hook-form.com/docs/useform/register]\n   의 경우 controlled, uncontrolled component를 지원한다고 되어있긴 하지만 기본적으로 ref를 이용해서\n   dom객체를 기반으로 하기 떄문에 UnControlled임 (useEffect같은거 쓰면 controlled로 사용가능함)\n\n<TextField\n  {...register('note')}\n  label={<FormattedMessage id=\"Ƞǿǿŧḗḗ\" />}\n  error={!!touchedFields.note && !!errors.note}\n  variant=\"filled\"\n  multiline\n  rows={3}\n/>\n\n\nCONTROLLER\n\n * react-hook-form 에서는 controlled component를 조금 더 쉽게 지원하기 때문에 control\n   [https://react-hook-form.com/docs/useform/control], <Controller>\n   [https://react-hook-form.com/docs/usecontroller/controller] 같은 것들을 지원한다.\n\n<Controller\n  control={control}\n  name=\"accountNumber\"\n  render={({ field: { value, onChange } }) => (\n    <AccountNumberSelect\n      value={value}\n      label={<FormattedMessage id=\"ȦȦƈƈǿǿŭŭƞŧ #\" />}\n      required\n      variant=\"filled\"\n      error={touchedFields.accountNumber && !!errors.accountNumber}\n      onChange={({ accountNumber, name }) => {\n        onChange(accountNumber);\n        setValue('name', name, { shouldValidate: true });\n      }}\n      disabled\n    />\n  )}\n/>\n\n\n\n\nDON’T USE\n\n * Uncontrolled Component를 쓰면서 controlled 방식처럼 사용하는 코드\n\n<TextField\n  {...register('note')}\n  label={<FormattedMessage id=\"Ƞǿǿŧḗḗ\" />}\n  error={!!touchedFields.note && !!errors.note}\n  variant=\"filled\"\n  multiline\n  rows={3}\n  onChange={(e)=>{\n    setValue('note', e.target.value)\n    setValue('note2', e.target.value + '222')\n  }}\n/>\n\n→ 개선안\n\n<Controller\n  control={control}\n  name=\"note\"\n  render={({ field: { value, onChange } }) => (\n    <TextField\n      label={<FormattedMessage id=\"Ƞǿǿŧḗḗ\" />}\n      error={!!touchedFields.note && !!errors.note}\n      variant=\"filled\"\n      multiline\n      rows={3}\n      onChange={(e)=>{\n        onChange(e)\n        setValue('note2', e.target.value + '222')\n      }}\n    />\n  )}\n/>\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3111059457"
  },
  {
    "pageContent": "SonarQube\n\n * https://sonarqube-stage.ecubelabs.xyz/projects\n   [https://sonarqube-stage.ecubelabs.xyz/projects]\n\n * SonarQube [https://www.sonarsource.com/products/sonarqube/] is a\n   self-managed, automatic code review tool that systematically helps you\n   deliver Clean Code.\n\nimage-20240718-011553.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3098968069/image-20240718-011553.png?api=v2]\n\n * 코드 작성 → CI 파이프라인을 통해 SonarQube에 코드 전달 → SonarQube에서 코드 분석 → Quality Gate에서\n   Pass or Fail 판단\n\n\n\nPR: https://github.com/Ecube-Labs/haulla/pull/1076\n[https://github.com/Ecube-Labs/haulla/pull/1076]\n\nPR 분석 결과:\nhttps://sonarqube-stage.ecubelabs.xyz/dashboard?id=Ecube-Labs_haulla_db3a36fc-aafd-4bd9-80df-3d414eef4a88&pullRequest=1076\n[https://sonarqube-stage.ecubelabs.xyz/dashboard?id=Ecube-Labs_haulla_db3a36fc-aafd-4bd9-80df-3d414eef4a88&pullRequest=1076]\n\n\nVSCODE SONARLINT PLUGIN\n\nhttps://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode\n[https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode]\n\n\n\n\n참고\n\nSonarqube\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/3094609968/Sonarqube]\n\nQuality Profiles\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/3094970423/Quality+Profiles]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3098968069"
  },
  {
    "pageContent": "이벤트 유실\n * 이슈\n * 배경 지식\n   * 1. Event Driven Architecture\n     * 구성 요소 4가지\n     * Internal Event\n       * 이벤트\n       * 이벤트 발행자\n       * 이벤트 리스너\n       * 이벤트 버스\n     * External Event\n       * 이벤트\n       * 이벤트 발행자\n       * 이벤트 리스너\n       * 이벤트 버스\n   * 2. Spring Event\n     * 이벤트\n     * 이벤트 발행자\n     * 이벤트 리스너\n     * 이벤트 버스\n   * 3. 배민 예시\n     * 상황\n     * 해결\n * 그래서 왜 유실?\n * 해결?\n\n\n이슈\n\n앱이 비정상 종료되면서 RxJS 스트림이 종료되고 이벤트 유실되는 현상 있음\n\nSW-10559 [https://ecubelabs.atlassian.net/browse/SW-10559] - 이슈 세부사항 가져오는 중...\n상태\n\nSW-10548 [https://ecubelabs.atlassian.net/browse/SW-10548] - 이슈 세부사항 가져오는 중...\n상태\n\nPaymentSuccessEvent\n\n-> account.overdueStatus 갱신  \n-> Invoice paid 처리\n-> 결제 성공 알림 발송\n-> balance 갱신\n\n\n\n\n배경 지식\n\n\n1. EVENT DRIVEN ARCHITECTURE\n\nimage-20240524-000600.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014787151/image-20240524-000600.png?api=v2]\n\n * 시스템 구성 요소들이 이벤트와 이벤트 핸들러로 서로 소통하는 구조. 관심사를 분리해 전체적인 결합도를 낮추기 위해 사용.\n\n * 유연한 구조, 뛰어난 확장성이 특징\n\n\n구성 요소 4가지\n\n * 이벤트\n\n * 이벤트 발행자\n\n * 이벤트 리스너\n\n * 버스\n   \n   * 통로\n\n\nINTERNAL EVENT\n\n * 시스템 내 컴포넌트 간 통신\n\n * 목적\n   \n   * 내부 도메인 로직과 부가적인 정책을 분리하기 위해서\n   \n   * long transaction 분리\n\n * 우리는 rxJS 이용해 내부 이벤트 처리 중\n   https://github.com/Ecube-Labs/haulla/blob/main/apps/core-api/src/lib/event-store/index.ts#L47\n   [https://github.com/Ecube-Labs/haulla/blob/main/apps/core-api/src/lib/event-store/index.ts#L47]\n\n이벤트\n\nexport class PaymentSuccessEvent extends DddEvent {\n    static eventId = '66DF0AFD-F80E-4621-94B9-5A53366CBC4E';\n\n    constructor(\n        public paymentId: number,\n        public accountId: string,\n        public invoicedMonth: CalendarDate,\n        public amount: number,\n        public status: PaymentStatus,\n        public paymentMethod: PaymentMethod,\n        public paymentGateway: PaymentGateway,\n        public paymentMethodId?: string,\n        public meta?: {\n            type: 'card' | 'bank';\n            name: string;\n            last4: string;\n            paymentLinkId: string;\n        },\n    ) {\n        super();\n    }\n}\n\n이벤트 발행자\n\nhandleEvents(events: DddEvent[]) {\n    events.forEach((event) => this.subject.next(event));\n}\n\n// rxjs\nthis.subject\n    .pipe(\n        concatMap(async (event) => {\n            await Promise.all(\n                handlers.map(async ([eventClass, serviceClass, serviceMethod]) => {\n                    if (event.type === eventClass.name) {\n                        const context = Context.of(event.txId);\n                        const service = context.get(serviceClass);\n\n                        context.set(actorIdToken, event.actorId);\n\n이벤트 리스너\n\n@Transactional()\n@EventHandler(PaymentSuccessEvent, {\n    eventId: PaymentSuccessEvent.eventId,\n    description: 'Auto Pay 성공 시, Autopay Credit Charge 생성',\n})\nasync createAutopayCreditCharge(event: PaymentSuccessEvent, roles: EventHandlerRole[]): Promise<void> {\n    const { accountId, invoicedMonth } = event;\n}\n\n이벤트 버스\n\nrxJS 스트림\n\n\nEXTERNAL EVENT\n\n * 시스템 간 통신\n\n * https://kafkaui-stage.ecubelabs.xyz/ [https://kafkaui-stage.ecubelabs.xyz/]\n\n * 예시\n   \n   * haulla-api 인보이스 finalize → payment-api 에서 stripe 인보이스 발핼\n\n이벤트\n\nexport class CoreInvoiceFinalizedEvent extends DddEvent {\n    static eventId = '7F7967DC-47C5-4FEE-A369-0FF718EDB9B4';\n\n    constructor(\n        public invoiceId: string,\n        public invoiceType: 'regular' | 'statementOfAccount',\n        public accountId: string,\n        public status: 'open' | 'paid',\n        public publishOn: CalendarDate,\n        public dueOn: CalendarDate,\n        public regionId: number,\n        public lines: {\n            description: string;\n            amount: number;\n            currency: 'usd';\n            startOn: CalendarDate;\n            endOn?: CalendarDate;\n            type: string;\n        }[],\n        public autoAdvance: boolean,\n        public hasLateFee: boolean,\n        public isFirstInvoice: boolean,\n        public paymentAccountId: string,\n        public timezone: string,\n    ) {\n        super();\n    }\n}\n\n이벤트 발행자\n\npublic async save(entities: T[]) {\n    entities.forEach((entity) => entity.setTxId(this.context.txId));\n    // Before*, After* 이벤트 핸들러가 동작하면서 이벤트를 생성할 수 있기 때문에 Promise.all 로 하면 안된다.\n    await this.saveEntities(entities);\n    await this.saveEvents(flatMap(entities, (entity) => entity.getPublishedEvents()));\n}\n\n * 이벤트가 DB에 저장되면 Change Data Capture 이용해 카프카 토픽에 메시지가 쌓임\n\n * 토픽을 다른 시스템에서 구독해서 사용\n\n이벤트 리스너\n\n@EventHandler(CoreInvoiceFinalizedEvent, {\n    eventId: CoreInvoiceFinalizedEvent.eventId,\n    description: 'Haulla 인보이스 finalized 시, Stripe 인보이스 발행.',\n})\n@Transactional()\nasync handleCoreInvoiceFinalizedEvent(event: CoreInvoiceFinalizedEvent) {\n    const {\n        paymentAccountId,\n        ...\n    } = event;\n\n    await this.issue({\n        paymentAccountId,\n        ...\n}\n\n\n\n이벤트 버스\n\n카프카\n\n\n2. SPRING EVENT\n\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/package-summary.html\n[https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/package-summary.html]\n\n이벤트\n\npublic class CustomEvent extends ApplicationEvent {\n    private String message;\n\n    public CustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n이벤트 발행자\n\n@Component\npublic class CustomEventPublisher {\n    @Autowired\n    private ApplicationEventPublisher applicationEventPublisher;\n\n    public void publish(String message) {\n        CustomEvent customEvent = new CustomEvent(this, message);\n        applicationEventPublisher.publishEvent(customEvent);\n    }\n}\n\n이벤트 리스너\n\n@Component\npublic class CustomEventListener {\n    @EventListener\n    public void handleCustomEvent(CustomEvent event) {\n        System.out.println(\"Received custom event - \" + event.getMessage());\n    }\n}\n\n이벤트 버스\n\nApplicationEventPublisher + ApplicationEventMulticaster\n\n\n\n\n3. 배민 예시\n\nhttps://www.youtube.com/watch?v=dJ5C4qRqAgA\n[https://www.youtube.com/watch?v=dJ5C4qRqAgA]\n\n1:31:55 / 1:41:41\n\n * 느슨한 결합, 의존성 해결, 트랜잭션 범위 분리, 시스템 간 통신을 위한 방법으로 도메인 이벤트(EDA) 적극적으로 사용 중이며, 설계\n   또한 도메인 이벤트 중심 논의.\n\n\n\n상황\n\n주문을 배달 완료 상태로 변경하면 배달의 상태를 변경하고, 가게에 배달 수수료를 부과해야 함\n\nimage-20240524-000946.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014787151/image-20240524-000946.png?api=v2]\n\n * 트랜잭션 묶임, 의존성 문제\n\n\n\n해결\n\n도메인 이벤트 퍼블리싱 방식으로 변경\n\nimage-20240524-015027.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014787151/image-20240524-015027.png?api=v2]image-20240523-051117.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014787151/image-20240523-051117.png?api=v2]image-20240523-051023.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014787151/image-20240523-051023.png?api=v2]image-20240523-051038.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014787151/image-20240523-051038.png?api=v2]\n\n→ 이렇게 설계하면 패키지를 별도 서버, 모듈로 분리할 때 용이함\n\n\n그래서 왜 유실?\n\n * 내부 이벤트 처리 과정에서 앱이 종료될 경우 이벤트가 유실되고 있음.\n\n→ RxJS 스트림은 메모리에서 관리되기 때문에 한번 유실되면 복구, 다시 실행하는 것이 힘듦. (스프링도 마찬가지)\n\n\n해결?\n\n * 고민 중\n\n * 요구사항\n   \n   * 내부 이벤트는 기존처럼 RxJS로 처리하되, 복구 및 재실행 매커니즘 필요\n   \n   * 이벤트 뭉치 간 실행 순서 보장 필요\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3014787151"
  },
  {
    "pageContent": "Slow Query 개선기\n\nSlow query 확인\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3015934024/Slow+query]\n\n\nSLOW QUERY 개선\n\n\nRDS CPU 사용량\n\n아래는 slow query 개선 전 RDS의 CPU 사용량에 대한 5분 평균값 그래프. 최대 94.2%까지 잦은 빈도로 사용률 스파이크 발생함.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3016556548/Screenshot%202024-05-17%20at%209.08.56%E2%80%AFAM.png?api=v2]\n\nSlow query 개선 후. 스파이크 빈도와 최대 사용량을 57.6%까지 낮춘 모습을 확인할 수 있음.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3016556548/Screenshot%202024-05-17%20at%209.09.41%E2%80%AFAM.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/3016556548/Screenshot%202024-05-17%20at%2011.01.01%E2%80%AFAM.png?api=v2]\n\n\n개선 과정\n\n문제의 쿼리[1]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query#%5B1%5D-%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%BF%BC%EB%A6%AC][2]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query#%5B2%5D-%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%BF%BC%EB%A6%AC][3]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query#%5B3%5D-%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%BF%BC%EB%A6%AC]\n중에서 아래와 같은 부분이 문제가 됐음\n\n 1. not in 연산을 사용하게 되면 index를 안탈 가능성이 높음[4]\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2984051039/2024-05-03#%5B4%5D-IN-vs-NOT-IN]\n\nclt.idx not in (15, 28, 38, 52, 25)\n\nnot in 연산 대신 in 연산을 사용하도록 쿼리를 쪼갬[5]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query#%5B5%5D-%EC%BF%BC%EB%A6%AC-%EC%AA%BC%EA%B0%9C%EA%B8%B0]\n\n 2. client_log 테이블에서 조건으로 사용하는 log_type_idx, client_idx, date에 대한 복합 index가 없음 →\n    full scan하는 경우가 생김\n\nclient_log.idx컬럼으로 필터링을 한번 진행해서 대상 row의 개수를 줄임[6]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2984051039/2024-05-03#%5B6%5D-idx%EB%A1%9C-%ED%95%84%ED%84%B0]\n\n고려 됐던 사항: 카디널리티와 선택도[7]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2984051039/2024-05-03#%5B7%5D-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%83%9D%EC%84%B1%EC%8B%9C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD]를\n고려해서 (date, client_idx, log_type_idx)로 인덱스를 생성하려 함. stage에서 테스트 결과 select 속도가\n빨라지기는 했지만, insert 및 update도 자주 일어나는 테이블이라 기각\n\n 3. mysql JOIN시 ON에 사용되는 조건으로 OR을 사용한 연산이 들어감 → index 안탐[8]\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query#%5B8%5D-OR-in-JOIN]\n\nOR 구문 대신 UNION사용[9]\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548/Slow+Query#%5B9%5D-UNION-instead-of-OR-statement]\n\n3번은 적용 전, CPU 사용률 개선에 영향 안줌\n\n--------------------------------------------------------------------------------\n\n\n각주\n\n\n[1] 문제의 쿼리\n\nselect count(*) as count\nfrom (select cl.idx\n      from (select last_noti_check_date as date from user where idx = 2229) as lastNotiCheck,\n           client_log cl\n               join\n           relation_user_client ruc on cl.client_idx = ruc.client_idx and (ruc.user_idx in (2229))\n               join user_receive_log_type urlt\n                    on (cl.log_type_idx = urlt.log_type_idx and urlt.user_idx = ruc.user_idx and urlt.type = 'ccn')\n               join client_log_type clt\n                    on (clt.idx = cl.log_type_idx and !clt.is_debug and clt.idx not in (15, 28, 38, 52, 25))\n      where cl.date is not null\n        and cl.date > '2024-03-25 01:18:16.273'\n        and cl.date > lastNotiCheck.date\n      limit 1000) as max1000;\n\n\n[2] 문제의 쿼리\n\nselect cl.*,\n       c.serial,\n       clvo.volume,\n       clvo.prev_volume,\n       ruc.client_desc,\n       clt.name,\n       clt.notify_type,\n       ccbl.count as compact_count,\n       cle.occur_date,\n       cle.solve_date\nfrom relation_user_client as ruc\n         join user_receive_log_type urlt on (ruc.user_idx = 1222 and urlt.user_idx = ruc.user_idx and urlt.type = 'ccn')\n         join client_log as cl use index(__idx_client_log_date_clinet_idx_log_type_idx) on (urlt.log_type_idx = cl.log_type_idx and cl.client_idx = ruc.client_idx)\n         join client_log_type clt on (clt.idx = cl.log_type_idx and 0 = clt.is_debug and clt.idx in\n                                                                                         (9, 10, 11, 12, 13, 14, 16, 17,\n                                                                                          18, 19, 20, 21, 22, 23, 24,\n                                                                                          26, 27, 29, 30, 31, 32, 33,\n                                                                                          34, 35, 36, 39, 40, 41, 42,\n                                                                                          43, 44, 45, 46, 47, 48, 49,\n                                                                                          53, 54, 55, 56, 57, 58, 59,\n                                                                                          60, 61, 62, 63, 64, 65, 66,\n                                                                                          67, 68, 69, 70, 71, 72, 73,\n                                                                                          74, 75, 76, 77, 78, 80, 81))\n         left join client_ccb_compact_log ccbl on (cl.idx = ccbl.idx)\n         left join client_log_volume_origin clvo on (clvo.idx = cl.volume_idx)\n         left join client_log_response cle on (cl.idx = cle.idx)\n         left join client c on (cl.client_idx = c.idx)\nwhere cl.date >= '2024-03-30T15:00:00.000Z'\norder by cl.date;\n\n\n[3] 문제의 쿼리\n\nSELECT `tl`.`idx`,\n       `tl`.`latitude`,\n       `tl`.`longitude`,\n       `tl`.`time`,\n       `tl`.`route_idx`,\n       `tlc2`.`course_idx`,\n       `tlc2`.`drive_start_date`,\n       `tlc2`.`drive_end_date`\nFROM `tracker` `t`\n         INNER JOIN `tracker_log_course2` `tlc2` ON `tlc2`.`course_idx` = `t`.`last_course2_idx`\n         INNER JOIN `tracker_log_course` `tlc` ON tlc.course_idx = `t`.`last_course_idx`\n         INNER JOIN `tracker_log_route2` `tlr2` ON `tlr2`.`course_idx` = `tlc2`.`course_idx`\n         INNER JOIN `tracker_log_route` `tlr` ON tlr.course_idx = tlc.course_idx\n         INNER JOIN `tracker_log2` `tl` ON `tl`.`route_idx` = `tlr2`.`route_idx` or `tl`.`route_idx` = tlr.route_idx\nWHERE `t`.`tracker_idx` = 278\n  AND `tlc2`.`course_idx` = `t`.`last_course2_idx`\n  AND `tl`.`latitude`\n  and `tl`.`longitude`\nGROUP BY time\nORDER BY time DESC\nLIMIT 10;\n\n\n[4] IN VS NOT IN\n\nhttps://stackoverflow.com/questions/16891668/sql-in-vs-not-in\n[https://stackoverflow.com/questions/16891668/sql-in-vs-not-in]\n\n\n[5] 쿼리 쪼개기\n\nidx 따로 구해서 IN구문으로 넘김\n\nSELECT clt.idx\nFROM client_log_type as clt\nWHERE !clt.is_debug\n  and clt.idx not in (15, 28, 38, 52, 25);\n\nselect count(*) as count\nfrom (select cl.idx\n      from (select last_noti_check_date as date from user where idx = 2229) as lastNotiCheck,\n           client_log cl\n               join\n           relation_user_client ruc on cl.client_idx = ruc.client_idx and (ruc.user_idx in (2229))\n               join user_receive_log_type urlt\n                    on (cl.log_type_idx = urlt.log_type_idx and urlt.user_idx = ruc.user_idx and urlt.type = 'ccn')\n               join client_log_type clt\n                    on (clt.idx = cl.log_type_idx and clt.idx in (?))\n      where cl.date is not null\n        and cl.date > '2024-03-25 01:18:16.273'\n        and cl.date > lastNotiCheck.date\n      limit 1000) as max1000;\n\n\n[6] IDX로 필터\n\nselect min(idx) as idx from client_log WHERE date >=?;\n\nselect cl.*,\n       c.serial,\n       clvo.volume,\n       clvo.prev_volume,\n       ruc.client_desc,\n       clt.name,\n       clt.notify_type,\n       ccbl.count as compact_count,\n       cle.occur_date,\n       cle.solve_date\nfrom relation_user_client as ruc\n         join user_receive_log_type urlt on (ruc.user_idx = ? and urlt.user_idx = ruc.user_idx and urlt.type = 'ccn')\n         join client_log as cl on (urlt.log_type_idx = cl.log_type_idx and ruc.client_idx = cl.client_idx)\n         join client_log_type clt on (clt.idx = cl.log_type_idx and 0 = clt.is_debug and clt.idx in\n                                                                                         (9, 10, 11, 12, 13, 14, 16, 17,\n                                                                                          18, 19, 20, 21, 22, 23, 24,\n                                                                                          26, 27, 29, 30, 31, 32, 33,\n                                                                                          34, 35, 36, 39, 40, 41, 42,\n                                                                                          43, 44, 45, 46, 47, 48, 49,\n                                                                                          53, 54, 55, 56, 57, 58, 59,\n                                                                                          60, 61, 62, 63, 64, 65, 66,\n                                                                                          67, 68, 69, 70, 71, 72, 73,\n                                                                                          74, 75, 76, 77, 78, 80, 81))\n         left join client_ccb_compact_log ccbl on (cl.idx = ccbl.idx)\n         left join client_log_volume_origin clvo on (clvo.idx = cl.volume_idx)\n         left join client_log_response cle on (cl.idx = cle.idx)\n         left join client c on (cl.client_idx = c.idx)\nwhere cl.idx >= ?\n  and cl.date >= ?\norder by cl.date;\n\n\n[7] 인덱스 생성시 고려사항\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2967011406/2024-04-12#4.-Index-%EC%84%A4%EA%B3%84\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2967011406/2024-04-12#4.-Index-%EC%84%A4%EA%B3%84]\n\n\n[8] OR IN JOIN\n\nhttps://towardsdatascience.com/why-you-should-stop-using-or-in-sql-joins-right-now-d5b6e83464cf\n[https://towardsdatascience.com/why-you-should-stop-using-or-in-sql-joins-right-now-d5b6e83464cf]\n\nhttps://stackoverflow.com/questions/19725014/sql-server-left-join-with-or-operator\n[https://stackoverflow.com/questions/19725014/sql-server-left-join-with-or-operator]\n\nhttps://dba.stackexchange.com/questions/227238/speed-up-left-join-with-or-operator-in-on-clause\n[https://dba.stackexchange.com/questions/227238/speed-up-left-join-with-or-operator-in-on-clause]\n\n\n[9] UNION INSTEAD OF OR STATEMENT\n\nSELECT `tl`.`idx`,\n       `tl`.`latitude`,\n       `tl`.`longitude`,\n       `tl`.`time`,\n       `tl`.`route_idx`,\n       `tlc2`.`course_idx`,\n       `tlc2`.`drive_start_date`,\n       `tlc2`.`drive_end_date`\nFROM `tracker` `t`\n         INNER JOIN `tracker_log_course2` `tlc2` ON `tlc2`.`course_idx` = `t`.`last_course2_idx`\n         INNER JOIN `tracker_log_course` `tlc` ON tlc.course_idx = `t`.`last_course_idx`\n         INNER JOIN `tracker_log_route2` `tlr2` ON `tlr2`.`course_idx` = `tlc2`.`course_idx`\n         INNER JOIN `tracker_log_route` `tlr` ON tlr.course_idx = tlc.course_idx\n         INNER JOIN `tracker_log2` `tl` ON `tl`.`route_idx` = `tlr2`.`route_idx`\nWHERE `t`.`tracker_idx` = 278\n  AND `tlc2`.`course_idx` = `t`.`last_course2_idx`\n  AND `tl`.`latitude`\n  and `tl`.`longitude`\nUNION SELECT `tl`.`idx`,\n       `tl`.`latitude`,\n       `tl`.`longitude`,\n       `tl`.`time`,\n       `tl`.`route_idx`,\n       `tlc2`.`course_idx`,\n       `tlc2`.`drive_start_date`,\n       `tlc2`.`drive_end_date`\nFROM `tracker` `t`\n         INNER JOIN `tracker_log_course2` `tlc2` ON `tlc2`.`course_idx` = `t`.`last_course2_idx`\n         INNER JOIN `tracker_log_course` `tlc` ON tlc.course_idx = `t`.`last_course_idx`\n         INNER JOIN `tracker_log_route2` `tlr2` ON `tlr2`.`course_idx` = `tlc2`.`course_idx`\n         INNER JOIN `tracker_log_route` `tlr` ON tlr.course_idx = tlc.course_idx\n         INNER JOIN `tracker_log2` `tl` ON `tl`.`route_idx` = `tlr`.`route_idx`\nWHERE `t`.`tracker_idx` = 278\n  AND `tlc2`.`course_idx` = `t`.`last_course2_idx`\n  AND `tl`.`latitude`\n  and `tl`.`longitude`\nGROUP BY time\nORDER BY time DESC\nLIMIT 10;\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548"
  },
  {
    "pageContent": "MySQL 압축\n * DB 성능 개선 방법\n * 이번엔 또 왜?\n * 복습\n * 배경지식 1: 압축\n   * 압축?\n   * 데이터 압축?\n   * 압축 및 사용 과정\n   * Trade-Off\n * 배경지식 2: MySQL 아키텍처, 저장방식 등\n   * MySQL 아키텍처\n   * SQL 처리 과정\n   * Storage Engine\n     * InnoDB 구조\n     * InnoDB 이해 완료\n   * 저장 방식과 File-Per-Table\n * ROW_FORMAT?\n   * innodb_block_size, KEY_BLOCK_SIZE\n * MySQL 압축\n   * 종류\n   * 동작\n   * 실습\n   * 결과\n     * 공간 측면\n     * 쿼리 성능 측면\n   * 장점\n   * 단점\n   * Adaptive 알고리즘\n   * 고려\n * 실제 적용 사례 (Tim)\n * 압축 하지마?\n * 다시 보기\n   * 관련 설정\n * 결론\n\n\n\n\nDB 성능 개선 방법\n\n * 인덱스\n\n * 파티셔닝\n\n * 비싼 장비\n\n * 압축\n\n * 기타\n\n\n\n\n이번엔 또 왜?\n\nSW-10452 [https://ecubelabs.atlassian.net/browse/SW-10452] - 이슈 세부사항 가져오는 중...\n상태\n\nCREATE TABLE `client_log` (\n  ...\n) ENGINE=InnoDB AUTO_INCREMENT=159282952 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC KEY_BLOCK_SIZE=8 COMMENT='클라이언트 로그'\n\n * KEY_BLOCK_SIZE ?\n\n\n복습\n\n2024-04-12\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2967011406/2024-04-12]\n\n * 디스크는 매우 느리다. → 디스크 I/O 줄여야 성능이 빨라진다.\n\n * 논리적 저장 단위.\n\n\n배경지식 1: 압축\n\n\n압축?\n\nimage-20240425-013908.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2981527554/image-20240425-013908.png?api=v2]\n\n물질에 압력을 가하여 부피를 줄이는 것\n\n이큐브랩의 압축 쓰레기통은 더 많은 쓰레기를 담을 수 있도록 쓰레기를 압축한다.\n\n→ 저장 공간을 효율적으로 사용하고 싶어서\n\n→ 한 번에 더 많은 쓰레기를 옮기기 위해서\n\n\n데이터 압축?\n\nimage-20240425-014344.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2981527554/image-20240425-014344.png?api=v2]\n\n특정한 목적을 갖고 원본 데이터 크기를 줄이는 것\n\n 1. 저장 공간 절약 (디스크, 메모리)\n\n 2. 전송 효율 (이미지, 텍스트)\n\n 3. 보안?\n\n\n압축 및 사용 과정\n\n 1. 원본 데이터 압축\n\n 2. 데이터 보관 (or 전달)\n\n 3. 원본 데이터가 필요하여 압축 해제\n\n\nTRADE-OFF\n\n어떤 기술이나 트레이드 오프가 있을 수 있으며, CPU 사용량이 증가할 수 있다는 점을 기억.\n\n * 얻는 것\n   \n   * 데이터 사이즈 감소\n\n * 잃는 것\n   \n   * CPU 사용량 증가\n\n\n배경지식 2: MYSQL 아키텍처, 저장방식 등\n\n\nMYSQL 아키텍처\n\nimage-20240425-031706.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2981527554/image-20240425-031706.png?api=v2]\n\n * Client\n   \n   * Haulla\n   \n   * CCN\n\n * MySQL 서버 (RDS)\n   \n   * MySQL Engine (두뇌)\n     \n     * 쿼리 파싱 및 저처리기에서 구조전 문제 분석\n     \n     * 옵티마이저가 실행 계획 세움\n     \n     * Handler API 이용해 스토리지 엔진에 데이터 쓰기, 읽기 요청\n   \n   * Storage Engine (몸통)\n     \n     * Handler\n     \n     * 데이터 쓰기\n     \n     * 데이터 읽기\n     \n     * 종류\n       \n       * InnoDB\n       \n       * MyISAM\n   \n   * OS & Hardware\n\n\nSQL 처리 과정\n\n아래는 SQL 처리 과정이다. 커넥션 통해 요청을 받아 Storage Engine 으로 요청 보내기 전까지 MysqlEngine.\n\n[https://blog.kakaocdn.net/dn/bXkuag/btsGTCSoKlu/pkFqqypKKH1lz87JwrF7vK/img.png]\n\n 1. 불특정 커넥션에서 쿼리 전달.\n\n 2. MysQL Engine 에서 쿼리 파싱, 구문 분석 및 실행 계획 세운 뒤 Handler API 통해 Storage Engine 로 요청\n    보냄.\n\n 3. Storage Engine 에서 실제 데이터 읽고, 씀.\n\n\n\n\nSTORAGE ENGINE\n\nimage-20240425-204656.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2981527554/image-20240425-204656.png?api=v2]\n\n\n\nMySQL 은 스토리지 엔진으로 무엇을 사용할지 고를 수 있으며, 동시에 여러개를 사용할 수도 있다. 요즘엔 InnoDB가 주로 사용된다.\n\n\nINNODB 구조\n\nimage-20240425-205843.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2981527554/image-20240425-205843.png?api=v2]\n\n * 메모리\n   \n   * Buffer Pool\n     \n     * 가장 핵심적인 부분으로 디스크의 데이터 파일, 인덱스 정보를 메모리에 캐시해 두는 공간. -> I/O 줄여야겠지?\n     \n     * 블록(페이지)는 일반적으로 버퍼 풀 거쳐 가져온다. \n       \n       * 압축 데이터도 버퍼 풀에 올라간다.\n     \n     * 버퍼링 역할\n     \n     * 더 자세히 보기\n       \n       * Data Page Buffer\n         \n         * LRU 리스트: 디스크 읽은 블록\n         \n         * Unzip_LRU 리스트: 압축 해제 블록\n       \n       * Change Buffer\n         \n         * 부하를 줄이기 위해 변경사항을 모았다가 부하 적을 때 일괄적으로 반영함. -> 버퍼링.\n         \n         * ACID 보장하며, 체크포인트 발생할 경우 반영\n       \n       * Undo\n   \n   * Log Buffer\n     \n     * 로그 일괄 저장\n\n * CPU\n   \n   * 체인지버퍼 머지 스레드\n   \n   * 데이터 페이지 기록 스레드\n   \n   * 로그 기록 스레드\n\n * Disk\n   \n   * Undo Log\n     \n     * 트랜잭션 롤백 대비, 격리 수준\n   \n   * Redo Log\n     \n     * 변경사항만 기록하는 로그\n     \n     * 커밋 상태 추적\n   \n   * Doublewrite Buffer Files\n\n\nINNODB 이해 완료\n\nCREATE TABLE `log` (\n  ...\n) ENGINE=InnoDB AUTO_INCREMENT=159282952 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC KEY_BLOCK_SIZE=8 COMMENT='로그'\n\n\n저장 방식과 FILE-PER-TABLE\n\n[https://blog.kakaocdn.net/dn/bdQmbv/btsGVKV7ZQB/RrWSlOw0FY6khcgGA8TNA1/img.png]\n\nGeneral Tablespace\n\n * 단일 테이블 스페이스, 파일로 저장함\n\n * 삭제 시 하나의 파일로 되어 있어서 공간 회수되지 않음.\n\n\n\nFile Per Tablespace\n\n * 테이블 마다 개별 관리할 수 있음. \n\n * 삭제 시 시스템에 공간 자동 반환됨.\n\n * 파일이 분리되어 디스크 경합 줄어듬\n\n * 대부분 File-Per-Table 옵션을 키고 압축 테이블을 적용함 (General Tablespace 제약사항 확인\n   https://dev.mysql.com/doc/refman/8.0/en/general-tablespaces.html\n   [https://dev.mysql.com/doc/refman/8.0/en/general-tablespaces.html] )\n\n\n\n\nROW_FORMAT?\n\n * 테이블 레코드(ROW)를 저장하는 방식, 테이블을 생성할 때 어떤 방식을 사용할 지 지정할 수 있음.\n\n * Barracuda는 Mysql 5.5 부터 지원.\n\nCOMPACT\n\n * 기본 ROW_FORMAT REDUNDANT 보다 null 처리가 간결한 방식으로 가장 많이 사용.\n\n * REDUNDANT`에 비해 메타데이터 저장 공간이 적으며, 같은 크기의 메모리에 더 많은 데이터를 저장할 수 있도록 설계됨.\n\nREDUNDANT\n\n * 가장 옛날 ROW_FORMAT으로 현재는 거의 사용하지 않음.\n\nDYNAMIC\n\n * COMPACT 개선 버전\n\n * 주로 `BLOB` 및 `TEXT` 데이터를 보다 효율적으로 저장.\n\n * 가변 길이를 가질 수 있는 칼럼 값을 row 데이터를 갖고 있는 page(inline page)와 별개로 external page에\n   관리하는 방식.\n\n * 이 포맷은 긴 데이터 조각을 외부 페이지에 저장하여 메인 페이지의 공간 절약.\n\n * 테이블을 InnoDB로 지정할 때는 innodb_file_format이 Barracuda 일 때만 사용 가능.\n\nCOMPRESSED\n\n * DYNAMIC 기반으로 추가적인 페이지 레벨의 데이터 압축을 제공. 저장 공간을 최소화하면서 디스크 입출력 비용을 절감할 수 있도록 설계.\n\n * 디스크 절약할 수 있지만 압축을 풀 때 발생하는 부하가 있을 수 있어 주의해서 사용.\n\n * 테이블을 InnoDB로 지정할 때는 innodb_file_format이 Barracuda 일 때만 사용 가능. (SHOW VARIABLES\n   LIKE 'innodb_file_format%')\n\n음?\n\n * 왜 찰리가 준 테이블에는 row_format이 dynamic 인가?\n\n\nINNODB_BLOCK_SIZE, KEY_BLOCK_SIZE\n\n * innodb_block_size\n   \n   * 데이터 페이지 크기\n\n * KEY_BLOCK_SIZE\n   \n   * 압축 후 저장될 페이지의 크기\n\n\nMYSQL 압축\n\n\n종류\n\n * 페이지 압축\n   \n   * 페이지 레벨에서 압축하는 기술\n   \n   * 제약이 많아 잘 쓰이지 않음\n     \n     * 운영체제가 펀치 홀 기능 지원해야함\n     \n     * 하드웨어가 펀치 홀 기능 지원해야함\n\n * 테이블 압축\n   \n   * 운영체제, 하드웨어 제약 없이 사용 가능\n   \n   * 디스크 데이터 파일 크기 줄일 수 있음\n\n\n동작\n\n[https://blog.kakaocdn.net/dn/mbcsZ/btsGVbN1AHg/BhsTgKvs3QNkqozE9ZqWt0/img.png]\n\n\n실습\n\n * 환경\n   \n   * file-per-table 활성화\n   \n   * innodb_block_size: 16KB\n   \n   * KEY_BLOCK_SIZE: 8KB\n\n/**\n  innodb FILE_PER_TABLE 설정 확인 후 활성화\n */\nSHOW VARIABLES LIKE 'innodb_file_per_table';\n\nSET GLOBAL innodb_file_per_table=1;\n\n/**\n  innodb 페이지 사이즈 확인\n */\nSHOW VARIABLES LIKE 'innodb_page_size';\n\n/**\n  innodb 파일 포맷 확인 Barracuda\n */\nSHOW VARIABLES LIKE 'innodb_file_format%';\nSET GLOBAL innodb_file_format=Barracuda;\n\n\n-- compression 인덱스 기록\nSHOW VARIABLES LIKE 'innodb_cmp_per_index_enabled';\nSET GLOBAL innodb_cmp_per_index_enabled=1;\n\n-- 적용 \nDROP TABLE invoice8;\nCREATE TABLE invoice8 LIKE invoice;\nALTER TABLE invoice8 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;\nINSERT INTO invoice8 SELECT * FROM invoice;\n\n\n\n\n결과\n\n\n공간 측면\n\nData_length 보면 차지하는 공간이 절반 정도 줄어든 것을 볼 수 있음\n\nSHOW TABLE STATUS LIKE 'invoice';\n\nSHOW TABLE STATUS LIKE 'invoice8';\n\n[https://blog.kakaocdn.net/dn/Qiz75/btsGXZrm7KZ/h76FUOSGTWDuEwu5zgD81K/img.png]\n\n\n\n\n쿼리 성능 측면\n\n음~\n\n * 읽기, 쓰기 CPU 사용량?\n\n * 쿼리 속도?\n\n * 측정 방법 추천 부탁드립니다.\n\n\n장점\n\n * 디스크 공간 확보\n\n * 블록 I/O 감소\n\n\n단점\n\n * 버퍼 풀(메모리) 낭비\n   \n   * 압축 데이터는 LRU 리스트, Unzip_LRU 둘 다 속한다.\n\n * CPU 사용량 증가\n\n→ 버퍼 풀이 여유롭지 못하고 CPU 사용량이 높은 서버에 적용하면 성능 하락 원인이 될 수 있음\n\n\nADAPTIVE 알고리즘\n\n * CPU 사용량 높은 서버에서는 Unzip_LRU 비율 늘림.\n\n * 디스크 IO 사용량 높은 서버는 Unzip_LRU 비율 낮춤.\n\n\n고려\n\n * 압축 적용하기 적절한 케이스인가?\n   \n   * CPU 사용량이 높은 서버이면서 데이터 변동, 조회가 많은 테이블인지?\n   \n   * 버퍼 풀 사이즈가 충분한지?\n\n * 페이지 스플릿 고려하여 적절한 페이지 크기는 몇일지?\n\n * 실패율은 3~5% 이하가 좋음. (언제 실패하는 거지?)\n\nSELECT table_name, index_name, compress_ops, compress_ops_ok,\n       (compress_ops - compress_ops_ok) / compress_ops * 100 as failure_pct\nFROM information_schema.INNODB_CMP_PER_INDEX;\n\n\n실제 적용 사례 (TIM)\n\n * CCN? 에 사용 중.\n\n * 걷어낼까 생각 중.\n   \n   * 이유? -> 압축으로 인한 성능 개선 효과가 미미했다.\n\n * 쿼리 성능이 중요한 거라면 인덱스, 파티셔닝, 테이블 파티셔닝, 반정규화를 고려하거라.\n\n\n압축 하지마?\n\n아래의 경우에 공간 효율 측면에서는 유용할 수 있다.\n\n * 보관 목적 데이터를 다루는 경우.\n   \n   * 대용량 데이터 쌓는 DW?\n\n * 저장 공간 비용 절약이 필요한 경우. (잘 적용하면 큰 효과 볼 수 있음)\n\n * 메모리 여유가 있는 경우. (버퍼 풀 여유롭게 줄 수 있는 경우)\n\n\n다시 보기\n\nCREATE TABLE `client_log` (\n  ...\n) ENGINE=InnoDB AUTO_INCREMENT=159282952 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC KEY_BLOCK_SIZE=8 COMMENT='클라이언트 로그'\n\n\n관련 설정 \n\n-- compression 인덱스 기록할지?\nSHOW VARIABLES LIKE 'innodb_cmp_per_index_enabled';\nSET GLOBAL innodb_cmp_per_index_enabled=1;\n\n-- 압축 레벨, 작을 수록 압축 덜함 -> CPU 적게 사용해 빨라지고 데이터 크기는 늘어남\nSHOW VARIABLES LIKE 'innodb_compression_level';\n\n-- 이 값보다 실패율 높으면 압축률 높이기 위한 작업 수행(failure_threshold_pct_max 이하 패딩 집어 넣기)\nSHOW VARIABLES LIKE 'failure_threshold_pct';\n\n\n결론\n\n * 쿼리 성능 개선 위해서라면 인덱스, 파티셔닝 먼저 고려하자.\n\n * 저장 공간 줄이는 것이 목적이라면 압축 적용하면 좋다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2981527554"
  },
  {
    "pageContent": "2023-12-29\n\n\n트러블슈팅\n\n[E] No space left on device\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2867265547/E+No+space+left+on+device]\n\n\n영속성 추상화\n\nhttps://github.com/Ecube-Labs/haulla/blob/d0f6da17cdbeb653a58cf914dc4855112c11c1ac/apps/core-api/src/services/balances/application/service.ts#L105\n[https://github.com/Ecube-Labs/haulla/blob/d0f6da17cdbeb653a58cf914dc4855112c11c1ac/apps/core-api/src/services/balances/application/service.ts#L105]\n\nbalance.update({\n    invoice: invoices.length === 0 ? undefined : invoices[0],\n    payments,\n    overdueStatus,\n});\nawait this.balanceRepository.save([balance]);\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]BalanceRepository\n\nasync save(balances: Balance[]) {\n    await Promise.all(\n        balances.map((balance) => {\n            if (!balance.id) {\n                this.hubspotAdapterClient.tickets.create(balance.toHubspotTicketPayload());\n            } else {\n                this.hubspotAdapterClient.tickets.update(balance.id, {\n                    properties: stripUndefined({\n                        invoiced_total: balance.invoicedAmount.getDollarAmount(),\n                        paid_total: balance.paidAmount.getDollarAmount(),\n                        balance: balance.getBalanceAmount().getDollarAmount(),\n                        overdue_status: balance.overdueStatus,\n                        hs_pipeline_stage: balance.hsPipelineStage,\n                        db_etc: JSON.stringify([\n                            {\n                                initial_overdue_status: balance.initialOverdueStatus,\n                                regular_amount: balance.regularAmount.getDollarAmount(),\n                                current_charge_amount: balance.currentChargeAmount.getDollarAmount(),\n                            },\n                        ]),\n                    })!,\n                });\n            }\n        }),\n    );\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2867560531"
  },
  {
    "pageContent": "2023-12-22\n\n드 모르간의 법칙\n\n * !(A && B) === !A || !B\n\n * !(A && (B || C)) === !A || !(B || C) === !A && !B && !C\n\n\n\nElastic License\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2864971959/Elastic+License]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2864841312"
  },
  {
    "pageContent": "2023-12-15\n * 정적 코드 분석 도구\n   * 우리는?\n   * 느림\n * TypeORM caveat\n\n\n정적 코드 분석 도구\n\nhttps://www.sonarsource.com/?gads_campaign=SQ-Hroi2-PMax&gads_ad_group=Global&gads_keyword=&gad_source=1&gclid=Cj0KCQiA7OqrBhD9ARIsAK3UXh2CVylsSwFmBkSUJMft-G1xW4-NAF2buv50n5WbqV3aJgqGPF940qAaAnB6EALw_wcB\n[https://www.sonarsource.com/?gads_campaign=SQ-Hroi2-PMax&gads_ad_group=Global&gads_keyword=&gad_source=1&gclid=Cj0KCQiA7OqrBhD9ARIsAK3UXh2CVylsSwFmBkSUJMft-G1xW4-NAF2buv50n5WbqV3aJgqGPF940qAaAnB6EALw_wcB]\n\n\n\nsonarqube vs sonarcloud\n\nhttps://www.sonarsource.com/blog/sq-sc_guidance/\n[https://www.sonarsource.com/blog/sq-sc_guidance/]\n\nbut sonarCloud는 private 레포는 유료 플랜\n\n\n\n\n\n\n우리는?\n\n계획.\n\n * sonarqube server\n   \n   * postgre를 쓰고있는 서버 구축\n\n * jenkins 파이프라인으로 scanner 동작\n   \n   * https://www.jenkins.io/doc/pipeline/steps/sonar/\n     [https://www.jenkins.io/doc/pipeline/steps/sonar/]\n\n * 결과는 소나큐브 서버로 전송됨 → 소나큐브 서버에서 확인 (like kibana..?)\n\n * pr 분석 및 decorator 기능은 유료플랜이기 때문에 따로 구현할 수 있으면 구현\n   \n   * 어차피 현재는 쓸모없는 리뷰가 많아서 (TODO, FIXME 같은 주석들도 전부 이슈로 잡아내고있음.) 쓸모없는 리뷰가 줄어들면 pr\n     ci단계에서 해도 좋지 않을까… (그러면 github action으로 해야되지 않을까)\n\n * 모노레포에서 각 레포 분석\n   \n   * jenkins로 하면 각각 돌아가기 때문에 괜찮아 보이지만 pr 분석이나 이런걸로 가면 어떻게 해야할 지 아직 모르겠음.\n\n\n\n\n느림\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2859139073/image-20231215-014226.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2859139073/image-20231215-020554.png?api=v2]\n\n\nTYPEORM CAVEAT\n\nasync expirePaymentLink(roles: Role[]) {\n  const invoices = await this.invoiceRepository.findSatisfying(\n    // TODO: FilteredInvoiceSpec은 조회할때만 사용\n    new FilteredInvoiceSpec({\n      roles,\n      statuses: ['open'],\n      dueOnStart: addDays(today(), -1),\n      dueOnEnd: today(),\n    }),\n  );\n\n  invoices.forEach((invoice) => {\n    invoice.expirePaymentLink();\n    // 복잡한 작업 없음. 그냥 this.paymentLink = ''\n  });\n\nsync pay({ user, roles }: { user: User; roles: Role[] }, { excludedIds }: { excludedIds: string[] }) {\n  const invoices = await this.invoiceRepository.findSatisfying(\n    new AutopayableInvoiceSpec({ roles, excludedIds }),\n  );\n\n  invoices.forEach((invoice) => invoice.pay());\n  // 복잡한 작업 없음. 그냥 this.isAutopayable = false\n  \n  await this.invoiceRepository.save(invoices);\n\n같은 문제점을 갖고 있는 코드\n\n * Node.js\n   \n   * Single threaded\n   \n   * JS 를 실행하는 thread 가 한개라는 것이지 io thread 가 한개인 것은 아니다.\n   \n   * i.e. 큰 파일을 읽고 쓰거나 큰 데이터를 DB 에 읽고 써도 js thread 가 block 되지는 않음\n     \n     * readFileSync 는 잘 모르겠다. block 하나?\n\n * 위 코드의 문제점\n   \n   * 업데이트 대상 조회 문제 없음 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n     \n     * 작성 날짜 기준으로 1~2000개 정도\n   \n   * forEach 문제 없음 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n     \n     * O(n)\n   \n   * save 안 됨 (파란별)\n     [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f611.png]\n     \n     * TypeORM 이 update query 를 만들어내는 과정에서 blocking 발생\n\n * 해결\n   \n   * 몇백개씩 chunk 해서 update\n   \n   * insert on duplicate",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2859139073"
  },
  {
    "pageContent": "2023-12-08\n\nhttps://youtu.be/aVCGX8w2iy4?si=zDlLH8ubAkODback\n[https://youtu.be/aVCGX8w2iy4?si=zDlLH8ubAkODback]\n\nhttps://www.youtube.com/watch?v=eaF3CojDioY\n[https://www.youtube.com/watch?v=eaF3CojDioY]\n\nhttps://blog.naver.com/hls2683445/223269422581\n[https://blog.naver.com/hls2683445/223269422581]\n\n> 모든 기업인들은 마찬가지에요. 어느 순간에 최대한 시스템으로 돌아갈 수 있도록 예 그래야지만 퀄리티를 유지하면서 생산량을 늘릴 수가\n> 있잖아요. 결국 이제 어느 순간에는 결국 회사라는건 프로덕트를 품질을 올리거나 생산속도를 올리거나 둘 중에 하나잖아요. 가격을 낮추는거.\n> 크게 보면 이 세 개거든요. 그럴려면 이걸 해결 가능하게 하는 건 시스템으로 돌아가눈 수밖에 없는거죠. 그래서 인제 그럴려면 결국에는 첨부터\n> 회사를 시작할 때부터 매뉴얼 매뉴얼 매뉴얼 매뉴얼 매뉴얼 매뉴얼 모든 걸 자꾸 매뉴얼 매뉴얼 매뉴얼 해놔야 되는 거죠 계속. 그래서 저는\n> 회사를 시작할 때부터 모든 거의 매뉴얼을 제가 초반에 제가 다 만드는 거에요. 테스팅 매뉴얼, 트레이닝 매뉴얼, 보컬 강습 매뉴얼, 회계\n> 매뉴얼, 뭐 모든 일을 어떻게 처리해야 되는지 매뉴얼 매뉴얼 매뉴얼 다 해놓고 매뉴얼을 매년 업그레이드 하는 거에요. 그래서 매뉴얼이 워낙\n> 잘 되어 있습니다 저희 회사는. 그러고 나서 이 매뉴얼을 잘 이해하고 잘 실천할 수 있는 맨파워를 인제 길러야 되는 거죠. 막 길러서 그\n> 다음에 찢어져 했을 때 매뉴얼 갖고 책임자가 있으면 알아서 하는거죠. 그렇게해서 인제 CIC, Company in Company를 하면서\n> 인제 쫙 흩었더니 여기서 인제 주가가 한 번 점프를 한거죠. 생산량이 늘어나니까.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2853666848/image-20231208-011223.png?api=v2]\n\nJenkins\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/73760832/Jenkins]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853666848"
  },
  {
    "pageContent": "2023-12-01\n\nhttps://egghead.io/lessons/javascript-using-task-for-asynchronous-actions\n[https://egghead.io/lessons/javascript-using-task-for-asynchronous-actions]\n\n * 복습\n\n * 내년부터 다시 할거임\n\n\n\nhttps://topcit.or.kr/home.do?language=ko\n[https://topcit.or.kr/home.do?language=ko]\n\n\n\n점심시간\n\n * 13시 유지\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2849570844"
  },
  {
    "pageContent": "2023-11-03\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/450854915/ECUBELABS2#oauth2-proxy\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/450854915/ECUBELABS2#oauth2-proxy]\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2443345933/2022-06-10\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2443345933/2022-06-10]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2826895417"
  },
  {
    "pageContent": "2023-10-27\n\nhttps://blog.bytebytego.com/p/aws-lamda-http-10-http-11-http-20\n[https://blog.bytebytego.com/p/aws-lamda-http-10-http-11-http-20]\n\n\n\nhttps://woowacon.com [https://woowacon.com]\n\n * vibe\n\n\n\nold ES shutdown\n\n\n\n이사\n\n * 코오롱 14층\n\n\n\n월간회의 & 회식 (maybe)\n\n * 다음주 금\n\n\n\n1 on 1\n\n * 회사/팀 요청사항\n\n * career path\n\n * 기타\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2808250654"
  },
  {
    "pageContent": "2023-09-22\n\nElastic Cloud on Kubernetes (ECK)\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293/Elastic+Cloud+on+Kubernetes+ECK]\n\nKibana\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2606956922/Kibana]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2803105890"
  },
  {
    "pageContent": "2023-09-15\n\n코드 리뷰 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2798059798"
  },
  {
    "pageContent": "2023-09-08\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1144259719/OJT#Subscriptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1144259719/OJT#Subscriptions]\n\nhttps://youtu.be/0chZFIZLR_0?si=5SJFjWRHaHsRNL6_\n[https://youtu.be/0chZFIZLR_0?si=5SJFjWRHaHsRNL6_]\n\nhttps://youtu.be/Jpvh9oOyNVM?si=BCwAUnaacOQxYp05&t=716\n[https://youtu.be/Jpvh9oOyNVM?si=BCwAUnaacOQxYp05&t=716]\n\n\n\nhttps://aws.amazon.com/ecr/ [https://aws.amazon.com/ecr/]\n\n\nVIEW\n\nCREATE VIEW uview AS\nSELECT firstName\nFROM user;\n\nCREATE VIEW uview2 AS\nSELECT firstName, r.accountId\nFROM user AS u JOIN role AS r ON u.id = r.userId;",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2789539844"
  },
  {
    "pageContent": "2023-09-01\n\nhttps://github.com/Ecube-Labs/koa-x-router\n[https://github.com/Ecube-Labs/koa-x-router]\n\nhttps://github.com/Ecube-Labs/haulla/pull/319\n[https://github.com/Ecube-Labs/haulla/pull/319]\n\n * 왜 개발한것?\n   \n   * joi → @hapi/joi → joi\n     \n     * https://www.npmjs.com/package/joi [https://www.npmjs.com/package/joi]\n     \n     * https://www.npmjs.com/package/@hapi/joi\n       [https://www.npmjs.com/package/@hapi/joi]\n   \n   * 월마트 개발팀 멍청이들\n\n * 무슨 문제?\n   \n   * upgrade hell\n\n * 무엇을 중심으로 개발?\n   \n   * Any validation libs\n   \n   * Automate API document management\n\n * 어떻게 동작하는가\n   \n   * koa-router wrapping\n   \n   * + validate middleware\n   \n   * + 처음 실행될때 스키마 다 읽어옴 + 어떤 어댑터 사용할지 결정됨\n   \n   * + 어댑터 기반으로 OAS 생성 가능\n\n * 주의해야 할 점\n   \n   * query, params, body, output[*].(body|header) 무조건 스키마로 정리하자\n   \n   * validate 메서드가 바뀜\n     \n     * 기존: Joi.validate 메서드 제공\n     \n     * 변경: schema.validate 메서드 제공\n   \n   * errors 없으면 null이었는데 undefined로 반환하게 변경됨\n\n * open source\n   \n   * 기여해주세요\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2786394397"
  },
  {
    "pageContent": "2023-08-25\n\n * Web Container\n   \n   * https://stackblitz.com/ [https://stackblitz.com/]\n     \n     * 터미널? → 가상 서버? → 어떻게 이렇게 빠르게 동작할 수 있는가?\n     \n     * WebContainer https://webcontainers.io/ [https://webcontainers.io/]\n       \n       * How it works?\n         \n         * Chromium support FileSystem API\n         \n         * Web Assembly-based OS\n           \n           * 당연히 기본 내장된 shell이나 환경이 다를수 있음\n         \n         * works only locally\n       \n       * Validate that it works locally using stackblitz\n         \n         * debugger\n\n * Optimistic update\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1269235768/Optimistic+update]\n   \n   * distributed\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2739208212"
  },
  {
    "pageContent": "2023-08-04\n\n2022-04-15\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2392883241/2022-04-15]\n\n2021-08-20\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109472820/2021-08-20]\n\n\n\nasync find(\n    conditions,\n    options?: FindManyOptions & Partial<FindOptions>,\n    order?: FindOrder,\n): Promise<Invoice[]> {\n    const invoices = await this.getManager().find(Invoice, {\n        where: conditions,\n        ...order,\n    });\n    return invoices;\n}\n\n------------------\n\n---TRANSACTION 405187911, ACTIVE 18 sec\n\n591 lock struct(s), heap size 1136, 21649 row lock(s)\n\nMySQL thread id 216005, OS thread handle 18446744073709551615, query id 37774565\n172.22.5.246 administrator\n\n--------------------------------------------------------------------------------\n\nasync find(\n    conditions,\n    options?: FindManyOptions & Partial<FindOptions>,\n    order?: FindOrder,\n): Promise<Invoice[]> {\n    const invoices = await this.getManager().find(Invoice, {\n        where: conditions,\n        ...order,\n    });\n    if (options?.lock) {\n        return this.getManager().find(Invoice, {\n            where: {\n                id: In(invoices.map(({ id }) => id)),\n            },\n            ...order,\n            lock: options.lock,\n        });\n    }\n    return invoices;\n}\n\n------------------\n\n---TRANSACTION 405188975, ACTIVE 3 sec\n\n6 lock struct(s), heap size 1136, 12 row lock(s)\n\nMySQL thread id 216137, OS thread handle 18446744073709551615, query id 37787684\n172.22.5.246 administrator\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2769715509"
  },
  {
    "pageContent": "2023-07-28 (2)\n\n\n문제\n\n젠킨스로 배포하는게 너무 오래걸린다\n\n\n원인 파악\n\n\n1. JENKINS로 배포하는 과정이 오래 걸리는 여러가지 원인\n\n * EC2 Instance 리소스 부족하면 새로 받아오는데 오래걸리는 경우 다반수 → 이유가 여러가지…\n\n * Monorepo처럼 history가 많거나 용량이 큰 경우 체크아웃만 해도 20초 이상 걸림\n   → 개선 가능하지만 다른 과정에 비해 별로 오래걸리는것도 아니라 일단 패스\n\n * yarn install 느림 (근데 젠킨스에서 Test/Build 할 때 마다 설치해서 더 느림) → 빠르게 만들자\n\n * 도커 빌드 느림 → 오늘 주제를 잘 이해하면 얘도 개선 가능\n\n * …\n\n\n2. YARN?\n\n * 오랜 예전 npm이 가난한 시절 매일 NPM registry 서버가 터짐 + 프로젝트가 클수록 npm 설치가 압도적으로 느려짐\n\n * 보다 못한 대기업 어벤져스(Facebook + MS + Google + …) 가 모여서 npm registry mirror server\n   구축해서 안정성 보강 + npm보다 더 빨리 설치 해주는 npm 개발\n   → yarn의 시초\n   \n   * 지금은 GitHub가 npm 사서 서버 죽는 일이 더 줄었지만 여전히 종종 죽는 경우가 있다.\n     \n     * 근데 이제 GitHub가 MS꺼…\n\n * 결론: npm보다 그나마 설치가 빠른게 지금.\n   \n   * Q. 근데 예전보다 느려졌는데요?\n     \n     A. 모노레포라서 그래요\n\n일단 모듈이 어떻게 설치되는지 알아야 최적화 가능한 부분이 있는지 파악할 수 있다.\n\n\n3. YARN 모듈 설치 순서\n\n 1. Resolution\n    \n    1. 모듈 의존성 체크하고 문제 없는지 검사한다.\n    \n    2. yarn.lock 없으면 생성하고 resolution 깨져있으면 수정한다.\n    \n    3. npm은 resolution 검사하면서 semver 허용 선에서 최신버전으로 업뎃하지만 yarn은 resolution 문제만 없으면\n       아무것도 안건든다. (npm ci로 설치할땐 lock 수정 X)\n\n 2. Fetch\n    \n    1. 설치 안된건 registry 가서 모듈 받아와서 로컬 캐시로 저장한다.\n       기본 캐시 디렉터리는 버전마다 다르고 berry(v2+)부터 ./.yarn/cache 에 저장되는게 기본이지만 바꿀수 있음\n\n 3. Link\n    \n    1. yarn.lock , install-state.gz 내용 기준으로 캐시에 있는 모듈들을 압축 풀어서 node_modules에\n       배치(설치)함\n\n\n4. YARN 설치가 느려지는 원인\n\n * Resolution step === yarn.lock 없으면 semver가 허용하는 선 내에서 모든 모듈의 최신버전을 찾아내서 버전 일관성\n   없어지고 yarn.lock 생성하느라 느림\n   \n   * 버전 일관성 없어지고 는 lock 파일의 존재 이유이자 근본이라 언급했지만 여기서 얘기하고자 하는 토픽은 아님\n\n * Fetch step === .yarn/cache 없으면 registry에서 모듈 받아와야해서 느림\n\n * Link step === node_modules 없으면 압축 풀고 푼거 옮겨야해서 느리고, install-state.gz 없으면 설치 잘\n   됐는지 다시 확인하고 install-state.gz 확인해야해서 느림\n\n\n5. JENKINS/GITHUB ACTIONS 에서 YARN INSTALL 속도 개선하려면?\n\n 1. 느린 원인\n    → yarn.lock 은 항상 존재하니까 Resolution step 영향 없음 (tick)\n    [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n    → CI 서버에는 .yarn/cache 랑 node_modules 없음 === Fetch step, Link step를 모두 0부터\n    processing 해야하므로 영향 있음 (오류)\n    [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n 2. Fetch step, Link step 개선 가능한가?\n    \n    1. Link step 속도 개선하려면 node_modules를 재사용 하거나, 빠르게 생성할 수 있어야 함\n       \n       1. node_modules 재사용? → node_modules는 post-processing 해야하는 모듈이 존재 하므로 캐싱\n          (오류)\n          [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n          post-processing 하는 이유는 OS/Architecture 에 따라 다른 결과물이 생성되어야 하기 때문.\n       \n       2. node_modules 빠르게 생성? → CI 서버에 CPU랑 Memory 추가하면 됨 → 돈 더 쓰는거에 비해 개선 폭 크게\n          없음 (오류)\n          [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n       \n       3. node_modules 빠르게 생성? 2 → multi-core를 100% 활용 가능한 언어나 프레임워크로 작성된 프로그램을\n          패키지 매니저로 사용하면 특정 조건에서 개선 가능 → yarn 버려야함. 일단 (오류)\n          [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n    \n    2. Fetch step 속도 개선하려면 .yarn/cache 에 모듈 캐시 파일 존재하면 됨.\n       \n       1. post-processing 이전의 registry에서 받아온 모듈 그대로이기 때문에 캐싱해도 아무 문제 없음 (tick)\n          [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n          이게 yarn이 말하는 zero install(offline cache). 성능을 중요시 여긴 yarn에서는 처음부터 지원되던\n          기능.\n          \n          1. 즉, .yarn/cache 에 저장되는 파일을 형상관리 해도 문제가 없는것이 yarn의 설계이자 의도.\n          \n          2. 다만 모듈 압축파일을 전부 커밋하기 때문에 Git revision 하나하나가 용량이 커질수 있다.\n             GitHub에서 사용하려면 LFS(Large File Storage)를 구성해야 하고, pull/fetch/push 모두\n             느려진다.\n       \n       2. npm도 버전 5 이후로 offline cache를 지원하긴 하지만 cache가 있어도 최신버전을 탐색하기 때문에 npm ci\n          명령어와 함께 --prefer-offline 플래그를 붙여야 로컬에 있는 캐시를 100% 활용해 설치할 수 있다.\n       \n       3. pnpm은 global cache가 기본이라 global cache 디렉터리를 캐싱하면 된다.\n\n\n개선\n\n\n1. JENKINS에서 .YARN/CACHE 캐싱\n\n * How to?\n   \n   * yarn 설치할 때 Agent 로컬 디스크에 생기는 cache를 job에 재사용한다.\n   \n   * 노드를 버리기 전까지는 각 파이프라인 별로 캐시를 공유해서 사용해 yarn install 속도가 크게 개선될 수 있다.\n   \n   * 도커 빌드할때도 .yarn/cache 사용하도록 만들어 이미지 빌드시 yarn install 속도 개선\n\n * 앞으로 고민/개선 할 과제\n   \n   * 우리의 Jenkins Agent는 필요할때 띄웠다가 일정 시간 안쓰면 버린다 → 로컬에 캐시 저장해둬서 agent 버릴때 캐시도 함께\n     사라진다.\n   \n   * yarn cache를 관리하기 위한 persistent volume 이나 S3같은 외부 저장소를 이용하면 더 개선할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2764898305/image-20230727-021140.png?api=v2]\n\n\n2. GITHUB ACTIONS 에서 .YARN/CACHE 캐싱\n\n * 이미 한참 전부터 구성해둔 Workflow 곳곳에서 캐싱하고 있다.\n\n * 각 Workflow에서 생긴 캐시를 아티팩트로 말아서 GitHub Storage에 올려놓고 재사용\n\n\n정리\n\n일반적으로 배포는 하긴 해야하지만 급하지 않은것이 일반적.\n\n * 모든건 trade-off: 비용, 시간, 일관성 등…\n   \n   * 배포가 언제나 급한건 아니기 때문에 비용, 일관성을 우선순위로 두고 언제나 배포에 문제가 없게 구성한다.\n\n * 배포가 급할때도 있다: 버그 수정, 시연 직전, 빨리 퇴근하고 싶을때\n   \n   * 이상한 코드 안올라가게 테스트코드 더 열심히 짜고, 열심히 돌려보자\n     → https://github.com/Ecube-Labs/haulla/pull/227\n     [https://github.com/Ecube-Labs/haulla/pull/227] 가 조금 도울수 있지만 맹신하면 안된다.\n   \n   * 평소에 일정 관리 잘하고 급한 상황 안생기게 하는것을 목표로…\n\n * 아직 과도기\n   \n   * Monorepo로 전환하면서 그동안 못느꼈던 다양한 불편함/문제점 등이 생기는건 과도기라 어쩔수 없다.\n   \n   * 처음부터 만족스럽고 완벽한 환경으로 전환하려면 영영 못한다.\n   \n   * 예전의 환경도 이런 시기가 있었고 앞으로도 Monorepo의 장점만 취할수 있도록 개선 예정.\n     \n     * https://github.com/Ecube-Labs/haulla/pull/249\n       [https://github.com/Ecube-Labs/haulla/pull/249] → 이런것도 yarn install 걷어내서\n       개선\n     \n     * 컨테이너 빌드 시에도 .yarn/cache 공유\n     \n     * continue…\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2764898305"
  },
  {
    "pageContent": "2023-07-28\n\nhttps://youtu.be/YP7d9ae_VzI?t=458 [https://youtu.be/YP7d9ae_VzI?t=458]\n\n\n\nhttps://www.codenbutter.com/ [https://www.codenbutter.com/]\n\n\n\n8/25 CFX 700개 발송 예정\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2761359369"
  },
  {
    "pageContent": "2023-07-21\n\n[OJT] Cryptography & Hash\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1901133975/OJT+Cryptography+Hash]\n\n * rainbow table\n   \n   * hash 는 decoding 안되기 때문에 rainbow table 을 이용한 공격만 가능\n\n * bitcoin\n   \n   * block chain\n     \n     * (0) - (1) - (2) - (3) - (round) - …\n   \n   * sha?\n     \n     * hash(round + xxx) = 00000…. → 채굴\n   \n   * 51% attack\n   \n   * 양자컴퓨터\n\n * 비밀번호 hash\n   \n   * sha256? 512?\n     \n     * 연산이 단순함 → 그래픽카드로 돌리기 시작 함…\n   \n   * bcrypt hash?\n     \n     * 연산이 복잡함\n\n\n\n\nPROFESSOR FRISBY INTRODUCES COMPOSABLE FUNCTIONAL JAVASCRIPT\n\nhttps://egghead.io/lessons/javascript-using-task-for-asynchronous-actions\n[https://egghead.io/lessons/javascript-using-task-for-asynchronous-actions] 까지\n복습\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2761392167"
  },
  {
    "pageContent": "2023-07-14\n\nTeam Culture\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173801724/Team+Culture]\n\n * Let’s be EXPERTS → 장인 정신\n\n * To speed up development process\n   \n   * 개발 가이드 - 코드 익숙해지게\n   \n   * 문서, 주석 - 로직 파악이 용이하도록\n\n\n\n코드리뷰\n\n * 코아일체 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\n * 코드리뷰도 개발 과정의 일부분, 개발 만큼 중요함\n\n\n\n테스트\n\n * 덕지덕지 (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\n * 안심 될 때까지\n\n\n\nElastic Cloud on Kubernetes (ECK)\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293/Elastic+Cloud+on+Kubernetes+ECK]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2755788809"
  },
  {
    "pageContent": "2023-06-16\n\n * Remind: React가 브라우저에 렌더링 되는 과정\n   \n   * 개발자가 리액트 코드 작성\n   \n   * → Transpiler(TSC/Babel …)로 JSX/TSX 를 JS로 변환\n   \n   * → 브라우저에서 리액트 코드 실행해 렌더링에 필요한 ReactElement 객체 값 생성 with react\n     (React.createElement(...) 의 결과 값)\n   \n   * → ReactElement 객체 값으로 DOM 생성/제거 관리 with react-dom\n   \n   * → 브라우저에 렌더링\n\n * Hands on: 5분만에 나만의 react-dom 구현\n   \n   * 다음과 같은 데이터를 브라우저에 DOM으로 생성해 삽입하는 프로그램 작성\n     \n     {\"type\":\"h1\",\"key\":null,\"ref\":null,\"props\":{\"children\":{\"type\":\"div\",\"key\":null,\"ref\":null,\"props\":{\"style\":\"color: red\",\"children\":\"h1 안의 빨간 글씨다\"},\"_owner\":null}},\"_owner\":null}\n   \n   * 커스텀 컴포넌트 X / VirtualDOM X\n   \n   * https://stackblitz.com/edit/web-platform-p4sibo?file=script.js\n     [https://stackblitz.com/edit/web-platform-p4sibo?file=script.js]\n     Fork 해서 코드 작성 시작\n\n==================================\n\n사실 GPT로 1분만에 작성 가능\n\n// 데이터 객체\nconst data = {\n  \"type\": \"h1\",\n  \"key\": null,\n  \"ref\": null,\n  \"props\": {\n    \"children\": {\n      \"type\": \"div\",\n      \"key\": null,\n      \"ref\": null,\n      \"props\": {\n        \"style\": \"color: red\",\n        \"children\": \"h1 안의 빨간 글씨다\"\n      },\n      \"_owner\": null\n    }\n  },\n  \"_owner\": null\n};\n\n// DOM 생성 함수\nfunction createDOM(element) {\n  if (typeof element === 'string') {\n    return document.createTextNode(element);\n  }\n\n  const { type, props } = element;\n  const dom = document.createElement(type);\n\n  if (props && typeof props === 'object') {\n    for (let prop in props) {\n      if (prop === 'children') {\n        const children = props.children;\n\n        if (Array.isArray(children)) {\n          children.forEach(child => {\n            const childDOM = createDOM(child);\n            dom.appendChild(childDOM);\n          });\n        } else {\n          const childDOM = createDOM(children);\n          dom.appendChild(childDOM);\n        }\n      } else {\n        dom[prop] = props[prop];\n      }\n    }\n  }\n\n  return dom;\n}\n\n// 렌더링 함수\nfunction render(element, container) {\n  const dom = createDOM(element);\n  container.appendChild(dom);\n}\n\n// 컨테이너 DOM 요소 선택\nconst container = document.getElementById('container');\n\n// 렌더링 실행\nrender(data, container);\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2732982313"
  },
  {
    "pageContent": "2023-06-09\n\n * 질문\n   \n   * https://news.hada.io/topic?id=5253 [https://news.hada.io/topic?id=5253]\n   \n   * https://ahnheejong.name/articles/the-xy-problem/\n     [https://ahnheejong.name/articles/the-xy-problem/]\n\n * Switch NS: ecubelabs.com [http://ecubelabs.com]\n\n * SES\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2724430156/image-20230602-070613.png?api=v2]\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2724430156/image-20230602-070646.png?api=v2]\n\n * WAF\n   \n   * Wordpress vulnerabilities\n   \n   * Is it resolved now…?\n\n * Delete Legacy DB Cluster\n   \n   * 이제 Public DB 없다 👏\n   \n   * 비용 절감\n     \n     * On-demand instance: 0.29 * 24 * 30.5 = $212.28\n     \n     * Storage: 386 * 0.1 = $38.6\n     \n     * I/O: ~$30\n\n * Bing\n\n * 건강…",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2724430156"
  },
  {
    "pageContent": "2023-05-31\n\n * https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar\n   [https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar]\n\n * Vault\n   \n   * https://www.hashicorp.com/blog/dynamic-database-credentials-with-vault-and-kubernetes#authentication-configuring-kubernetes-authentication-in-vault\n     [https://www.hashicorp.com/blog/dynamic-database-credentials-with-vault-and-kubernetes#authentication-configuring-kubernetes-authentication-in-vault]\n   \n   * https://developer.hashicorp.com/vault/docs/platform/k8s/injector\n     [https://developer.hashicorp.com/vault/docs/platform/k8s/injector]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2724135287"
  },
  {
    "pageContent": "2023-05-19\n\n2023 1Q\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2714009639/2023+1Q]\n\n * 팀 점심\n\n\n\n{\n  \"extends\": \"@ecubelabs/tsconfig/react.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@assets/*\": [\"assets/*\"],\n      \"@libs/*\": [\"app/libs/*\"],\n      \"@components\": [\"app/components\"],\n      \"@containers\": [\"app/containers\"],\n      \"@screens\": [\"app/screens\"],\n      \"@routes\": [\"app/routes\"],\n      \"@models\": [\"app/models\"],\n      \"@configs\": [\"app/configs\"],\n      \"@repositories\": [\"app/repositories\"],\n      \"@hooks\": [\"app/hooks\"],\n      \"@services\": [\"app/services\"],\n      \"~assets/*\": [\"assets/*\"],\n      \"~libs/*\": [\"app/libs/*\"],\n      \"~components\": [\"app/components\"],\n      \"~containers\": [\"app/containers\"],\n      \"~screens\": [\"app/screens\"],\n      \"~routes\": [\"app/routes\"],\n      \"~models\": [\"app/models\"],\n      \"~configs\": [\"app/configs\"],\n      \"~repositories\": [\"app/repositories\"],\n      \"~hooks\": [\"app/hooks\"],\n      \"~services\": [\"app/services\"],\n      \"react-split-pane\": [\"../node_modules/react-split-pane-r17\", \"../../../node_modules/react-split-pane-r17\"]\n    },\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"@emotion/react\"\n  },\n  \"include\": [\"src\", \"@types\"],\n  \"exclude\": [\"node_modules\"]\n}\n\n * 로컬 모듈은 @ 에서 ~ 로 변경\n\n * monorep 모듈과 헷갈리기 때문 @packages\n\n\n\n회원시스템 이벤트기반 아키텍처 구축하기\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2070708225/OJT+Server+Architecture]\n\n * https://www.confluent.io/blog/designing-events-and-event-streams-introduction-and-best-practices/\n   [https://www.confluent.io/blog/designing-events-and-event-streams-introduction-and-best-practices/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2714533889"
  },
  {
    "pageContent": "2023-05-12\n * ECK\n   * Profile\n   * 인덱스\n     * filebeat\n * Copilot\n\n\nECK\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293/Elastic+Cloud+on+Kubernetes+ECK]\n\nhttps://kibana.ecubelabs.xyz/ [https://kibana.ecubelabs.xyz/]\n\nhttps://kibana-stage.ecubelabs.xyz/ [https://kibana-stage.ecubelabs.xyz/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2707783686/image-20230510-013842.png?api=v2]\n\n * 계정: 본인 닉네임\n\n * 초기 비밀번호: 비밀번호재설정하세요\n   \n   * qlalfqjsghwotjfwjdgktpdy 로 하면 안 됨\n\n\nPROFILE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2707783686/image-20230510-021554.png?api=v2]\n\n * 초기 비밀번호 반드시 변경할 것\n\n * Full name, Email address 는 입력 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n   \n   * 입력해도 되지만 불시에 초기화 될 수 있음\n\n\n\n\n인덱스\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2707783686/image-20230510-015256.png?api=v2]\n\n * haulla-account\n   \n   * 홀라 검색용 인덱스\n\n * filebeat\n   \n   * 어플리케이션 로그\n\n\nFILEBEAT\n\nhttp.request.id\n\n구 Kibana 에서 txId 와 같은 역할\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2707783686/image-20230510-015510.png?api=v2]\n\n\nCOPILOT\n\nhttps://marketplace.visualstudio.com/items?itemName=GitHub.copilot\n[https://marketplace.visualstudio.com/items?itemName=GitHub.copilot]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2707783686/image-20230511-044651.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2707783686"
  },
  {
    "pageContent": "2023-04-28\n\n * AWS Summit 가는 분 외근 신청…\n\n * Dependency hell\n   \n   * https://npm.github.io/how-npm-works-docs/theory-and-design/dependency-hell.html\n     [https://npm.github.io/how-npm-works-docs/theory-and-design/dependency-hell.html]\n\n * resolutions\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2699624459/image-20230428-023528.png?api=v2]\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2699624459/image-20230428-023511.png?api=v2]\n\n * Monorepo GitHub actions bug\n   \n   * https://github.com/Ecube-Labs/haulla/actions/runs/4826535763/jobs/8598457319\n     [https://github.com/Ecube-Labs/haulla/actions/runs/4826535763/jobs/8598457319]\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2699624459/image-20230428-025616.png?api=v2]\n   \n   * 일단 대충… 조치 → https://github.com/Ecube-Labs/haulla/pull/102\n     [https://github.com/Ecube-Labs/haulla/pull/102]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2699624459"
  },
  {
    "pageContent": "2023-04-21\n\n * AWS Network & Security\n   \n   * Edge Location\n     \n     * DNS\n     \n     * CDN\n   \n   * AWS Global Network\n     \n     * Direct Connect\n   \n   * AWS Global Network ↔︎ Edge Location?\n   \n   * Security\n     \n     * WAF\n       \n       * Application level\n     \n     * Shield\n       \n       * Network level\n       \n       * Standard\n       \n       * Advanced\n   \n   * Anycast & Unicast\n     \n     * https://tech.kakao.com/2014/05/29/anycast/\n       [https://tech.kakao.com/2014/05/29/anycast/]\n     \n     * https://www.cloudflare.com/ko-kr/learning/security/glossary/what-is-bgp/\n       [https://www.cloudflare.com/ko-kr/learning/security/glossary/what-is-bgp/]\n     \n     * https://www.cloudflare.com/learning/network-layer/what-is-an-autonomous-system/\n       [https://www.cloudflare.com/learning/network-layer/what-is-an-autonomous-system/]\n     \n     * https://www.cloudflare.com/learning/cdn/glossary/internet-exchange-point-ixp/\n       [https://www.cloudflare.com/learning/cdn/glossary/internet-exchange-point-ixp/]\n     \n     * 1.1.1.1\n     \n     * 8.8.8.8\n   \n   * Route 53\n   \n   * CloudFront\n   \n   * Global Accelerator\n   \n   * CloudFront ↔︎ Global Accelerator?\n     \n     * Offloading\n       [https://www.cloudflare.com/learning/network-layer/what-is-an-autonomous-system/]\n       (Gzip, TLS, …)\n     \n     * Caching\n   \n   * S3\n     \n     * 11 9’s (99.999999999%)\n       \n       * Availability → 99.9% (from SLA)\n       \n       * Durability → 99.999999999%\n       \n       * Implemented as Multi-region?\n     \n     * with CloudFront\n     \n     * S3 Transfer Acceleration\n       \n       * https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/transfer-acceleration-speed-comparison.html\n         [https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/transfer-acceleration-speed-comparison.html]\n       \n       * [https://ecubelabs.atlassian.net/wiki/download/attachments/2688974914/image-20230413-023849.png?api=v2]\n\n * User → Route 53 → Global Accelerator → CloudFront → Shield → WAF → Our\n   application\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2688974914"
  },
  {
    "pageContent": "2023-04-07\n\n\nWHY USE TURBO?\n\n * task orchestration\n   \n   * pipelining\n   \n   * parallelize\n   \n   * dependency order\n\n * caching\n\n * detecting affected apps\n   \n   * https://github.com/Ecube-Labs/haulla/pull/55#issuecomment-1482178343\n     [https://github.com/Ecube-Labs/haulla/pull/55#issuecomment-1482178343]\n\n * etc\n   \n   * No management, No execution.\n     → 오히려 tool chaining의 복잡도를 낮춰 장점으로서 판단\n     \n     * 모듈 관리만을 위한 yarn workspace로 따로 관리\n     \n     * 파이프라인을 위해 turbo cli를 이용할 뿐, 실제 실행은 yarn/npm\n     \n     * yarn workspace와 같은 방식으로 서비스 이름을 알아내기 때문에 추가로 설정할것 없음 (from\n       **/package.json)\n   \n   * Other tools? (lerna, rush, …)\n     \n     * SW-6933 [https://ecubelabs.atlassian.net/browse/SW-6933?src=confmacro]\n       → 다 마음에 안드는 점 있었음. 딱히 모난게 없는 turbo 로 채택\n     \n     * 지금 stack이 제일 심플한 구성이라 판단\n     \n     * 버전관리, 배포 등 기타 기능 필요 없음\n     \n     * lerna는 리서치 시점(21년) [https://ecubelabs.atlassian.net/browse/SW-5477]에\n       maintainer 공석이라 죽어가서 후보에서 제외\n       (작년에 nx를 개발하는 nwrl이 인수해서 살아남)\n       [https://github.com/lerna/lerna/issues/3121]\n   \n   * by Vercel\n     \n     * 작년에 터보레포 인수됨\n   \n   * https://2022.stateofjs.com/en-US/libraries/monorepo-tools/\n     [https://2022.stateofjs.com/en-US/libraries/monorepo-tools/]\n   \n   * https://monorepo.tools/#tools-review [https://monorepo.tools/#tools-review]\n\n\nWHY USE YARN WORKSPACE?\n\n * package hoisting\n   \n   * https://docs.npmjs.com/cli/v7/using-npm/workspaces\n     [https://docs.npmjs.com/cli/v7/using-npm/workspaces]\n\n * zero install?\n   \n   * 지금은 turbo가 공식 지원을 안하는듯 하다.\n\n\nNODE_MODULES RESOLUTION\n\n * In many ways\n   \n   * https://www.typescriptlang.org/docs/handbook/module-resolution.html#node\n     [https://www.typescriptlang.org/docs/handbook/module-resolution.html#node]\n\n * dependency management strategy\n\n * global modules\n\n\nNODE_MODULES IN MONOREPO\n\nhttps://turbo.build/repo/docs/reference/command-line-reference#turbo-prune---scopetarget\n[https://turbo.build/repo/docs/reference/command-line-reference#turbo-prune---scopetarget]\n\n * unpruned subset\n   \n   * local env\n\n * pruned subset\n   \n   * deploy env\n\n\nCHATGPT VS BING\n\n * 공통\n   \n   * 뭔가 물어보기 전에 역할 부여, 간단한 데이터/맥락 학습시키기\n\n * ChatGPT\n   \n   * Chat 단위로 Context 기억\n   \n   * 검색하는것보다 빠르고 맞춤으로 해결해 줄때도 있고, 뻔뻔하게 거짓말하는 경우도 있어서 어디까지 믿고 사용할지는 이용자가 잘 판단해야…\n     코드리뷰 하는 느낌으로 사용하면 개선된 코드를 얻을수 있지만 가끔 완전 이상한걸 내놓음\n     \n     * 되물으면 인정하는것도 웃김…\n       \n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2677080072/image-20230329-115420.png?api=v2]\n     \n     * 멍청한건지 컨셉인지 (파란별)\n       [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f611.png]\n       입력시켜둔것도 까먹을때가 있어서 진짜 사람한테 시키는것 같음\n       \n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2677080072/image-20230329-115634.png?api=v2]\n   \n   * 처음에 역할 부여 안해도 질문을 한쪽 분야로만 하다 보면 최종적으로 비슷한 수준의 답변을 내놓기도 하는듯 함.\n   \n   * Plus 버전 안쓰면 개복치보다 잘 죽고 매우 느림\n   \n   * 지금보다 코드를 훨씬 빠르게 내놓는다면 개발자는 Input만 넣어서 Output은 AI가 짜는 세상이 금방 올것같기도…\n\n * Bing\n   \n   * 질문에 기반한 검색 결과를 전달해주는것에 좀 더 치중된것 같음.\n     \n     * 근데 내가 원하는 결과가 아닌 경우가 있어서 구글링 하는게 더 나은 경우가 많다고 느껴짐\n   \n   * 학습을 시키려고 해도 검색을 해버리는데 의도한대로 되고 있는지 모르겠음.\n   \n   * 아직 더 잘 쓰는 방법을 몰라서 그런지.. 꿀팁 있으면 공유좀\n\n\nJENKINS\n\n * Improve pipeline for Monorepo\n   \n   * 기존:\n     \n     * haulla 레포 main/develop에 푸시되면 모든 파이프라인이 시작됨(지금은 Generator/Hauler Web만)\n     \n     * 수동으로 배포를 하고 싶어도 Changes checking Stage에서 걸려서 방법이 없는 문제가 존재.\n     \n     * GitHub ==> Jenkins ==> GENERATOR-FRONT Pipeline ==> Changes checking ==> Build ==> Deploy\n                         ㄴ==> HAULER-FRONT Pipeline ==> Changes checking ==> Build ==> Deploy\n   \n   * 개선:\n     \n     * haulla 레포에 물린 앱(Generator/Hauler Web)의 파이프라인은 main/develop에 푸시해도 트리거하지 않음\n     \n     * HAULLA 파이프라인을 따로 구성해 여기서 Changes checking Stage가 진행되어 배포할 앱들을 구분함\n     \n     * 배포할 앱들의 파이프라인이 HAULLA 파이프라인에 의해 트리거됨\n     \n     * GitHub ==> Jenkins ==> HAULLA Pipeline ==> Checking changes ==(변경될때만)==> GENERATOR-FRONT Pipeline ==> Build ==> Deploy\n                                                                 ㄴ==(변경될때만)==> HAULER-FRONT Pipeline ==> Build ==> Deploy\n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2677080072/image-20230407-010712.png?api=v2]\n\n * Blue Ocean [https://github.com/jenkinsci/blueocean-plugin]\n   \n   * 구리고 어려운 젠킨스 UI/UX를 개선하기 위한 프로젝트. 지금 기능으로 만족했는지 이제 특별한 기능은 개발 안한다고 함.\n   \n   * 기존 Stage View\n     \n     * stage가 동적으로 바뀌어 이전 기록과 다른 순서로 빌드되면 이전 기록을 날림\n     \n     * 아래처럼 stage로 보여주지 않으면 빌드 로그 들어가서 어떤 앱의 빌드가 트리거 됐는지 직접 찾아봐야 함\n       \n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2677080072/2023-04-07%2009-43-51.2023-04-07%2009_45_18.gif?api=v2]\n   \n   * Blue Ocean이 제공하는 Stage View\n     \n     * Monorepo 파이프라인 편안하게 보기 위해 도입.\n       심신이 안정되는 UI로 제공 가능.\n     \n     * 근데 시각화/편의성에만 치중해서 기존 UI랑 같이 사용해야 함.\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2677080072/image-20230407-004836.png?api=v2]\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2677080072"
  },
  {
    "pageContent": "2023-03-17\n\nhttps://youtu.be/n1AF2EqzG4o?t=601 [https://youtu.be/n1AF2EqzG4o?t=601]\n\n\n\nhttps://waterglasstoon.github.io/devkyungsoo/2022/09/16/not-recommended-1.html\n[https://waterglasstoon.github.io/devkyungsoo/2022/09/16/not-recommended-1.html]\n\n\n\nhttps://kafkaui.ecubelabs.xyz/ [https://kafkaui.ecubelabs.xyz/]\n\nhttps://kafkaui-stage.ecubelabs.xyz/ [https://kafkaui-stage.ecubelabs.xyz/]\n\n\n\nhttps://github.com/debezium/debezium [https://github.com/debezium/debezium]\n\nbinlog\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2669150362/image-20230317-013420.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2669150362/image-20230317-013438.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2669150362"
  },
  {
    "pageContent": "2023-03-03\n * Caching node_modules\n * Jenkins\n * Professor Frisby Introduces Composable Functional JavaScript\n * Haulla status\n   * Market (16)\n\n\nCACHING NODE_MODULES (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nSW-8112 [https://ecubelabs.atlassian.net/browse/SW-8112] - 이슈 세부사항 가져오는 중... 상태\n\n\nJENKINS\n\nhttps://www.youtube.com/watch?v=8sKTvf1c2zQ\n[https://www.youtube.com/watch?v=8sKTvf1c2zQ]\n\nhttps://www.youtube.com/watch?v=_nkJkWVH-mo\n[https://www.youtube.com/watch?v=_nkJkWVH-mo]\n\n * 더 알고 싶은 내용 있으면 팀이나 찰리에게 문의\n\n\nPROFESSOR FRISBY INTRODUCES COMPOSABLE FUNCTIONAL JAVASCRIPT\n\nhttps://egghead.io/lessons/javascript-using-task-for-asynchronous-actions\n[https://egghead.io/lessons/javascript-using-task-for-asynchronous-actions] 까지\n복습\n\n\n\n\nHAULLA STATUS\n\nhttps://dashboard.ecubelabs.xyz/d/7e-QbPpVk/invoice-breakdown?orgId=1\n[https://dashboard.ecubelabs.xyz/d/7e-QbPpVk/invoice-breakdown?orgId=1]\n\n\nMARKET (16)\n\nSeoul\nLA\nBaltimore\nHouston\nDallas\nSan Antonio\nAustin\nCorpus Christi\nChicago\nSan Diego\nOrlando\nMiami\nBroward\nPhoenix\nSacramento\nColumbus\nGreater Chicago\nCharlotte\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2653749262"
  },
  {
    "pageContent": "2023-02-17\n\n\n꿀팁 대잔치 - HOW?\n\nhttps://fig.io/ [https://fig.io/]\n\nhttps://github.com/Ecube-Labs/ccn-current/pull/388\n[https://github.com/Ecube-Labs/ccn-current/pull/388]\n\n * Hide whitespace\n\n * != not in 쓸 때 조심\n\n\n\nBefore\n\nAfter\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2644607001/before.gif?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2644607001/after.gif?api=v2]\n\n\n\n\n2023 GOALS\n\nhttps://docs.google.com/spreadsheets/d/1r4W3w5vBoHKE2ZpJfasgQeNWMfg5i_LS_f9gneO-WZo/edit#gid=180566209\n[https://docs.google.com/spreadsheets/d/1r4W3w5vBoHKE2ZpJfasgQeNWMfg5i_LS_f9gneO-WZo/edit#gid=180566209]\n\n\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783029#%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783029#%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80]\n\n\n\nhttps://www.youtube.com/c/ByteByteGo [https://www.youtube.com/c/ByteByteGo]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2644607001"
  },
  {
    "pageContent": "2023-02-09\n\nhttps://egghead.io/lessons/javascript-unboxing-things-with-foldable\n[https://egghead.io/lessons/javascript-unboxing-things-with-foldable]\n\nhttps://egghead.io/lessons/javascript-delaying-evaluation-with-lazybox\n[https://egghead.io/lessons/javascript-delaying-evaluation-with-lazybox]\n\n→ [FP] 5. Lazy function evaluation\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217710738/FP+5.+Lazy+function+evaluation]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2636120557"
  },
  {
    "pageContent": "2023-02-03\n\n\n1 ON 1 준비\n\n * 2022 하반기 평가 결과\n\n * 2023 목표\n\nHTTPS://DEEPKIT.IO/ [https://deepkit.io/]\n\n * 이것 저것 다 있음\n\nHTTPS://WWW.JETBRAINS.COM/DATAGRIP/ [https://www.jetbrains.com/datagrip/]\n\n * Git integration is very useful\n\n\nHTTP://YOUTU.BE/SBL3A9YOW7S [http://youtu.be/SbL3a9YOW7s]\n\n\nCHATGPT\n\n * Wow…",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635300865"
  },
  {
    "pageContent": "2023-01-20\n * 배포 전 DB 작업이 필요한 경우 PR 에 DDL 레이블 선택\n * Professor Frisby Introduces Composable Functional JavaScript\n * DB 정리\n * CCN 정리\n * Elasticsearch transition\n * 2023-01-14 CCN down (some users)\n\n\n배포 전 DB 작업이 필요한 경우 PR 에 DDL 레이블 선택\n\n * 놓치는 경우가 지속적으로 발생하고 있어서 뭔가 방법이 필요함\n\n * 일단 레이블이라도 붙여 보자\n   \n   * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774#3.1.-%EB%A0%88%EC%9D%B4%EB%B8%94-%EC%84%A0%ED%83%9D\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774#3.1.-%EB%A0%88%EC%9D%B4%EB%B8%94-%EC%84%A0%ED%83%9D]\n\n\nPROFESSOR FRISBY INTRODUCES COMPOSABLE FUNCTIONAL JAVASCRIPT\n\nhttps://egghead.io/lessons/javascript-unboxing-things-with-foldable\n[https://egghead.io/lessons/javascript-unboxing-things-with-foldable] will be\ncontinued…\n\n\nDB 정리\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2625634367/image-20230120-013810.png?api=v2]\n\n * CCN, ERP → ccn2-cluster\n\n * Haulla → ecubelasb2\n\n * 모두 private subnet 에 위치\n   \n   * connection 설정에 bastion 지정 필요\n   \n   * System Architecture\n     [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2211479553/System+Architecture]\n     \n     * public subnet, private subnet 차이 → 연결 된 route table\n\n\nCCN 정리\n\n * Good bye Angular1\n\n\nELASTICSEARCH TRANSITION\n\n * v6 → v8\n\n * https://github.com/Ecube-Labs/ccn-current/pull/1\n   [https://github.com/Ecube-Labs/ccn-current/pull/1]\n\n\n2023-01-14 CCN DOWN (SOME USERS)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2626027722/2023-01-14+CCN+down+some+period]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2625634367"
  },
  {
    "pageContent": "2023-01-06\n\n\n결합형 CMS\n\n최초로 등장한 CMS의 형태라고 볼 수 있으며, 인터넷 성장의 큰 원동력이 된 씨앗과도 같은 존재라고 볼 수 있다.\n당시 PHP의 점유율을 가늠할 수 있다.\n\n * WordPress: https://wordpress.com/ko/ [https://wordpress.com/ko/]\n   \n   * 여전히 전 세계에서 제일 유명한 CMS 중 하나.\n   \n   * PHP 점유율이 더 낮아지지 않는 원인 중 가장 큰 역할을 한다고 꼽히기도 한다. 전 세계의 수 많은 블로그와 기업 웹사이트가 이\n     솔루션으로 구축되었으니 더 이상의 설명은 필요 없다고 생각된다.\n   \n   * 수 많은 SI 회사에서 이 솔루션을 이용해 웹 사이트를 구축해주었으며 서드파티 마켓이 거대하기 때문에 여전히 활발하게 이용되고 있다.\n\n * 제로보드 (Zeroboard): https://xe1.xpressengine.com/\n   [https://xe1.xpressengine.com/]\n   \n   * 한 시대를 풍미했던 CMS. 2000년대 초반에 만들어진 국내 소규모(개인) 웹 사이트중 15% 이상은 제로보드로 만들어졌다고 해도\n     과언이 아니었다. 누구나 개인 홈페이지를 만들수 있게 해준 핵심 도구 중 하나였다.\n   \n   * 보안 이슈가 굉장히 많았지만 보다 간편한 설치와 간단한 사용법으로 SI 업계에서 CMS를 적극적으로 사용하기 시작하게 된 시스템이라고\n     보면 된다.\n   \n   * 설계라고 할것도 없이 코드베이스는 엉망이었지만, 돈이 되는 제품이었기에 유지보수는 오랜 기간 이어지다 2010년 경 이후로 전혀\n     유지보수가 되지 않았고, 이후 다양한 이슈들로 인해 다른 CMS를 사용하기 시작했다.\n     \n     * 2012년에 개발 중단 공지가 올라왔는데 이미 알사람들은 다 알고 다른 도구로 갈아탔기에 큰 파장은 없었지만 눈물을 머금고 새로\n       홈페이지를 만들어야 하는 회사들도 많았다.\n     \n     * 2006년에 인수가 결정되었는데 바쁜 와중에도 이 정도 해준거면 선녀…\n\n * XpressEngine (일명 XE): https://www.xpressengine.com/\n   [https://www.xpressengine.com/]\n   \n   * 현재 제로보드의 주소를 보면 알겠지만 네이버가 인수하며 Xpress Engine 이라는 시스템으로 재탄생했다.\n   \n   * 처음에는 제로보드가 XE라는 이름으로 바뀌고 버전만 올라가며 조금 바뀌는 양상이었지만 이후 완전히 새로운 코드 베이스로 출시되며\n     홈페이지 조차 분리되었다.\n     \n     * 제로보드와 네이버 관련 여담:\n       \n       * 제로보드를 주도해 만든 고영수라는 개발자가 소속된 “첫눈” 이라는 회사가 네이버에 인수될 당시 멤버는 매우 소규모 회사였는데,\n         현재 장병규(크래프톤) 의장, 신중호(라인) 대표, 박의빈(라인) CTO, 이상호(11번가, SKT AI 사업단장) 대표 등\n         멤버 대부분이 현역으로 최전선에서 활동하고 있어 현 시점에서는 신의 한수라고 평받기도 한다.\n         \n         * 근데 당시 350억이라는 규모에 인수한다는 기사가 나며 이 작은 회사를 인수하는 네이버를 보고 돈을 막 쓴다고 욕하는\n           사람들이 많았다고 한다.\n       \n       * 이 첫눈이라는 회사는 네오위즈의 부서로 시작됐는데 현 크래프톤 장병규 의장이 따로 나오며 설립된 회사. 뛰어난 검색엔진 기술을\n         가져 구글에서도 관심을 가졌다고 하는데 네이버가 엠파스의 등쌀에 밀린 시점부터 지금까지 살아 있을 수 있던건 이 회사를 인수했기\n         때문이라는 의견이 주를 이룬다.\n         \n         * 엠파스: 국내 최초 자연어 검색엔진 포털사이트\n         \n         “당시 네이버가 자본금 10억 원에 불과한 첫눈을 350억원을 들여 인수한 것에 대해 거품 논란도 있었지만 이해진 창업자의\n         선택이 탁월했다는 것은 현재의 성과가 이야기 해 준다”며 “무엇보다 첫눈 자체가 구글이 인수를 타진했을 정도로 당시 업계\n         실력파들이 모였던 회사라 지금과 같은 활약이 당연하다는 반응도 많다”\n         \n         출처 : https://www.sedaily.com/NewsView/1OEMA8FYY9\n         [https://www.sedaily.com/NewsView/1OEMA8FYY9]\n       \n       * 첫눈의 현 라인플러스 신중호 대표는 당시 국내에서 검색엔진 기술이 가장 뛰어난 개발자로 알려져 있었고, 첫눈은 당시 검색엔진\n         신흥 강자인 엠파스와 함께 일하고 있었다. 그리고 네이버 창업자인 이해진 전 대표가 신중호 대표를 데려오기 위해 첫눈을\n         인수했다는 말도 있다.\n   \n   * 네이버의 개발자들이 설계를 처음부터 제로보드보다 보안성이 뛰어나며 커스텀을 비교적 자유롭게 할 수 있었지만, 러닝커브가 적지 않았기\n     때문에 XE의 테마/레이아웃, 애드온만 개발해서 생계를 유지하는 개발자도 적지 않았다. (한국에서는 마켓플레이스의 시초에 가깝다)\n\n * GNU board: https://sir.kr/ [https://sir.kr/]\n   \n   * 제로보드라는 솔루션에서 영감을 얻어 만들어진 솔루션이며, 출시 이후부터 지금까지 XE보다 많은 점유율을 가지고 있는 CMS. (국내\n     한정)\n   \n   * 커스텀이 비교적 더 쉬웠으며 보안 이슈도 제로보드보다 적었고, 공식 홈페이지에서 스킨과 테마를 거래할 수 있었기 때문에 사용자가 더\n     몰리는 효과가 있었다.\n   \n   * 이를 기반으로 영카트라는 쇼핑몰 전문 빌더 솔루션도 개발해 제공하고 있다.\n\n\nSAAS CMS\n\n결합형 CMS를 단순하게 호스팅 해주는 수준으로 시작해서, 용도에 따른 다양한 편의 기능으로 무장한 CMS 형태로 발전했다.\n이제는 결합형 CMS와 다르게 설치형 제품이 아닌 경우가 더 많기 때문에 동일 선상에 두기 어려워 나누어 부르기도 한다.\n\n아무런 설정 없이 빠른 시간 내에 CMS를 구축하고 관리할 수 있다는 장점으로 빠르게 성장한 유형이다.\n\n * WordPress Cloud\n   \n   * 지금은 WordPress가 직접 제공하기도 하지만 대부분의 호스팅 업체에서 제공하므로 호스팅 업체라면 기본 소양과도 같이 제공하는\n     서비스라고 볼 수 있다.\n   \n   * 구축/관리가 필요 없어 편리하다는 점 외엔 기존과 크게 다른 점이 없다. 업체에 따라 설정/최적화 수준이 차이가 나기도 해서 워드프레스\n     구축으로 유명한 호스팅 업체들이 존재하곤 했었다.\n\n * Cafe24 쇼핑몰센터: https://www.cafe24.com/ecommerce/start/\n   [https://www.cafe24.com/ecommerce/start/]\n   \n   * 웹 호스팅 서비스만 하던 Cafe24가 제작한 SaaS 서비스. 누구나 몇분 이내로 쇼핑몰을 만들 수 있게 해주었다.\n     \n     * 처음 런칭되었을 때는 그누보드를 기반으로 만들었던게 엄청나게 티가 났지만, 시간이 지나며 전부 새로 개발되었다.\n     \n     * 직접 데이터센터를 운영하는 Cafe24 입장에서 노는 서버로 수익을 창출할 방법을 찾다 보니 이러한 솔루션을 개발하게 된것으로\n       예상되는데, 누구나 쇼핑몰을 창업한다고 하던 상황이었던지라 시기가 아주 적절했다.\n   \n   * 한국의 인터넷 쇼핑몰 1세대를 주도했다고 해도 과언이 아닌 솔루션이다.\n     \n     * 당시 대부분의 쇼핑몰이 이 솔루션을 이용해 생겨났으며, 21년 기준으로도 약 70%의 점유율을 가진다고 한다.\n   \n   * 누구나 소핑몰을 만들고 꾸밀 수 있게 해주었지만, 자유도는 그리 높지 않았고 커스텀이 필요하면 Cafe24에 직접 주문 제작을 요청해야\n     했다. (상당히 비쌌음)\n   \n   * 나중에는 소셜 로그인, SNS 마케팅 기능과의 연동, PG 연동, SEO 등 이커머스 시장에서 필요한 기능들을 간편하게 추가해 사용할\n     수 있도록 제공하며 공격적인 마케팅을 이어나갔다.\n\n * 아임웹: https://imweb.me/ [https://imweb.me/]\n   \n   * 기본적으로 마우스만을 가지고 최대한 간단하게 웹 페이지를 만들 수 있게 도와주는 서비스로, Cafe24와 비교하면 훨씬 후발주자다.\n     포토샵, 코딩이 필요 없이 웹 페이지를 만들수 있다는 카피로 수 많은 고객을 끌어모았다.\n   \n   * Cafe24 쇼핑몰센터가 잘되는걸 봐서 그런지 어느정도 기능이 정리된 이후로 외부 연동/쇼핑몰 관련 기능들을 계속 추가하며 경쟁력을\n     키웠지만 여전히 Cafe24보다 부족하다는 평이 많다.\n\n * Shopify: https://www.shopify.com/ [https://www.shopify.com/]\n   \n   * 이제는 유니콘이 된 이커머스 솔루션의 전설이라고 봐야 한다.\n\n> 웹사이트 오픈 후 스노보드 사업은 생각보다 순조로웠다. 하지만 스노보드 사업의 성장보다 이들이 만든 웹사이트의 코드를 얻고 싶어 하는 사람의\n> 수가 더 빠르게 늘고 있었다. 토비와 스콧은 쉽게 쇼핑몰을 구축할 수 있는 이 새로운 소프트웨어가 더 큰 비즈니스 기회가 되리라 생각했고\n> 사업 방향을 전환했다.\n> https://sonujung.com/a-brief-history-of-shopify\n> [https://sonujung.com/a-brief-history-of-shopify]\n\n * Naver Smart Store: https://sell.smartstore.naver.com/#/home/about\n   [https://sell.smartstore.naver.com/#/home/about]\n   \n   * 상당히 늦게 런칭한 후발주자였지만 네이버 쇼핑과 네이버 페이, 검색 상위 노출 등 네이버의 수 많은 지원을 등에 업고 성장한 커스텀\n     쇼핑몰의 한 종류다.\n\n\n분리형 CMS\n\n결합형 CMS에서 백엔드와 프론트엔드가 나눠진 CMS 유형이라고 보면 된다. 현대 개발자들에게 그나마 커스텀이 쉬운 유형이라고 보면 되지만,\n전성기는 거의 없다시피 지나갔다.\n\n프론트엔드와 백엔드의 의존성이 여전히 적지 않았고, 이로 인해 기존 CMS의 문제점이었던 완전히 자유로운 커스터마이징에 여전히 허들이 존재했기\n때문이다.\n\n * Veniqa: https://github.com/Viveckh/Veniqa [https://github.com/Viveckh/Veniqa]\n   \n   * 창업을 했지만 망했고, 코드가 너무 아까워서 공개했다고 한다. 2020년에 잠깐 핫했던 레포.\n\n\n\n\nHEADLESS CMS\n\n끊임 없이 변하는 시대에 발맞춰 개성있는 브랜딩과 더 좋은 UI/UX를 제공하기 위해서 어차피 프론트엔드를 새로 만들어야 하는데, CMS에\n필요한 기능만 공통적으로 만들어 둘 수는 없을까? 라는 수요에 대응하는 형태.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2614198300/image-20230105-102333.png?api=v2]\n\n * Strapi: https://strapi.io/ [https://strapi.io/]\n   \n   * 우리도 사용하고 있지만, 페이지의 컴포넌트까지 사용하고 있지는 않으니 100% 활용한다고 보진 못한다.\n   \n   * 왠만한 웹 페이지를 만들때 필요한 단순한 API를 Strapi만을 가지고 쉽게 만들수 있다.\n   \n   * koa.js를 기반으로 만들어졌기 때문에 서버 자체를 커스텀 하는것이 불가능하진 않다.\n   \n   * 데이터를 저장하는 단위인 Content-type 을 관리하는 콘솔 페이지가 제공되며, Content-type을 생성하면 해당 타입에\n     속하는 데이터들도 함께 관리 할 수 있다.\n     \n     * Content-type: DB Table Schema 와 API 를 함께 포함하는 개념\n     \n     * Content: DB Table Row 의 개념이라고 보면 된다.\n\n * Shopify Storefront: https://shopify.dev/custom-storefronts\n   [https://shopify.dev/custom-storefronts]\n   \n   * Shopify [https://hydrogen.shopify.dev/]에서 개발한 Headless Commerce. 쇼핑몰에 필요한\n     기능들을 구현해놓은 소프트웨어. 회원관리, 배송, 제품 관리, 장바구니, 구독 등의 기능이 있다.\n     \n     * 초기에는 자신들이 사용하던 API를 조금 다듬어서 공개한 수준이라고 하는데, 현재도 동일한 형상으로 관리되는지는 모르겠다.\n   \n   * Hydrogen [https://hydrogen.shopify.dev/]이라고 하는 Storefront API를 쉽게 사용할 수 있게\n     만든 프론트엔드 프레임워크도 있다.\n   \n   * Shopify는 SaaS 형태로도 제공하며, 온라인 에디터 등 여러 편의 기능을 함께 사용할 수도 있다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2614198300"
  },
  {
    "pageContent": "2023-10-13\n\n\nA11Y\n\n * accessibility → a11y\n\n * 웹 접근성을 위해 HTML에는 aria-*, for, ... 다양한 attribute 지원\n   \n   * 시각장애인을 위한 스크린리더 프로그램을 위한것이 기본\n\n * 그 외의 색약/색맹 등 다양한 명세가 존재함\n\n * 무조건 장애인을 위한것은 아님. 비장애인을 위한 웹 접근성 관련 명세가 매우 많음\n   \n   * 사용자가 웹 페이지를 더 쉽게, 개발자의 의도대로 사용할 수 있도록 다양한 내용이 존재함\n   \n   * Meta keys(Esc/Spacebar/Enter/…)로 손쉽게 제어 가능해야함\n\n * 여러 검사기 존재\n   \n   * https://jigsaw.w3.org/css-validator/ [https://jigsaw.w3.org/css-validator/]\n   \n   * https://nuli.navercorp.com/education/tools\n     [https://nuli.navercorp.com/education/tools]\n\n\n그러나…\n\n모든 명세를 HTML/브라우저에서 지원하는것이 아니기 때문에 JS로 직접 구현해야 하는 경우가 존재한다.\n또한 HTML/브라우저에서 지원하는 기능이라 하더라도 UI or UX 커스터마이징의 제약이 커서 직접 구현하는 경우도 허다함.\n\n\n뭘 신경써야 하는가\n\n * 최대한 편리하게 키보드로만 웹 페이지의 모든것을 조작할 수 있도록 지원하는것이 가장 이상적\n\n * 일관적으로 동작하는 UX를 제공할 수 있어야 함\n   \n   * ex) A 화면에서는 Enter로 체크박스 체크가 되는데 B 화면에서는 Enter로 Form Submit이 되는 경우\n\n * 포커스를 정교하게 제어해야 함\n   \n   * 모달과 같은 다이얼로그가 띄워져 있는 경우에는 Tab으로 포커스를 옮겼을때 다이얼로그 바깥으로 나가지 않도록 제어해야 함.\n     https://mui.com/base-ui/react-focus-trap/\n     [https://mui.com/base-ui/react-focus-trap/]\n   \n   * 화면상으로는 Name → Email address → Password → Password Confirm 필드 순으로 포커스가 옮겨져야\n     할 것같이 되어 있으나 DOM 구조상 Name → Password → Email address → Password Confirm 필드\n     순으로 포커스가 옮겨지는것과 같이 개발되면 안됨.\n     DOM 구조를 변경할 수 없는 경우 tab index와 같은 기능을 이용할것.\n     ex)\n     [https://stackblitz.com/edit/stackblitz-starters-jjjmad?file=src%2Findex.html]\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2786132464/2023-08-30%2009-43-43.2023-08-30%2009_44_28.gif?api=v2]\n\n\n예시\n\n * https://www.cleancitynetworks.com/v2/fm/plans/overview\n   [https://www.cleancitynetworks.com/v2/fm/plans/overview] → CCNx는 Angular7으로\n   개발하면서 모든 컴포넌트의 A11y를 최대한 신경써서 개발함\n\n * DataGrid도 기본적인 a11y 신경써서 개발됨\n   \n   * https://mui.com/x/react-data-grid/accessibility/\n     [https://mui.com/x/react-data-grid/accessibility/]\n\n\n결론\n\n * 웹 서비스를 개발할 때는 본인이 사용하기 불편하지 않은지, 편리하게 사용하게 하려면 어떻게 해야 하는지 항상 신경써야 한다.\n\n * MUI와 같은 프레임워크의 컴포넌트를 사용하면 a11y의 상당량이 커버되지만, 직접 개발하는 컴포넌트는 우리가 신경써야 한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2786132464"
  },
  {
    "pageContent": "2022-12-23\n\n[OJT] 클린 코드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/936902709/OJT]\n\n * The wet codebase ↔︎ DRY (Don’t Repeat Yourself)\n   \n   * https://www.youtube.com/watch?v=17KCHwOwgms\n     [https://www.youtube.com/watch?v=17KCHwOwgms]\n   \n   * https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867\n     [https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867]\n     \n     * 같은 사람 = Redux 창시자\n     \n     * React 팀 senior engineer\n\n * 비즈니스 로직아니면 일단 lib, common 에 개발 하는 경향 → please don’t do this\n\n * 코드 리뷰 할 때 “그냥 복붙 하시죠” 라고 말할 수 있는 문화가 정착 되어야 한다.\n\n\n\nTips > vscode\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/176193979/Tips+vscode]\n\n * 能書不擇筆\n   [https://www.sciencetimes.co.kr/news/%EB%8A%A5%EC%84%9C%EB%B6%88%ED%83%9D%ED%95%84%E8%83%BD%E6%9B%B8%EF%A5%A7%E6%93%87%E7%AD%86/]\n\n> 명필은 붓을 가리지 않는다.\n\nQ1. 나는 명필인가?\n\nQ2. 명필이 말털로 쓰고 내가 고급 붓으로 쓰면 누가 더 잘 쓸까?\n\nQ3. 내 친구보다 좋은 붓을 쓰면 더 좋은 결과물을 만들어 낼 수 있을까?\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2604630019"
  },
  {
    "pageContent": "2022-12-16\n\n\n인덱스\n\n * Recap\n   \n   * 2022-04-15\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2392883241/2022-04-15]\n\n\nEXPLAIN\n\nexplain select * from activity where rawId = 3;\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2600239105/image-20221216-022800.png?api=v2]\n\n * 인덱스 없는 컬럼으로 찾으면 전체 테이블을 뒤져야 한다.\n\n * 쿼리가 짧다고 결과가 빨리 나오는 게 아님.\n\n\nTROUBLESHOOTING\n\n\n문제 상황\n\n주기적으로 계속 DB spike\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2600239105/image-20221216-023929.png?api=v2]\n\n\n기존 대응\n\n계속 더 좋은 인스턴스로 교체\n\nr5.large (2022.01) → r5.xlarge → r5.2xlarge → r5.4xlarge (2022.12)\n\n\n한계\n\n * DB spike 는 잠깐인데 해당 상황을 극복하기 위해 너무 비싼 인스턴스가 사용 된다.\n\n\n해결\n\nSW-7768 [https://ecubelabs.atlassian.net/browse/SW-7768?src=confmacro]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2600239105"
  },
  {
    "pageContent": "2022-12-09\n\n\nACCOUNT ACTIVATEDON\n\n * 어카운트가 Active된 날짜\n\n * 어카운트의 서비스들 중 가장 빠른 dumpsterDeliveryOn\n\n * https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B#Account\n   [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B#Account]\n\n * https://github.com/Ecube-Labs/haulla-api/blob/605527a384173779dacf00c44f2147389f5229e0/src/services/accounts/application/service/update-account-service.ts#L210-L229\n   [https://github.com/Ecube-Labs/haulla-api/blob/605527a384173779dacf00c44f2147389f5229e0/src/services/accounts/application/service/update-account-service.ts#L210-L229]\n\n\nSERVICE BATCH UPDATE\n\n * 수거서비스의 덤스터 배송일을 각각 업데이트하는 기능\n\n * https://github.com/Ecube-Labs/haulla-api/blob/605527a384173779dacf00c44f2147389f5229e0/src/services/individual-services/application/service/update-individual-service-service.ts#L333-L367\n   [https://github.com/Ecube-Labs/haulla-api/blob/605527a384173779dacf00c44f2147389f5229e0/src/services/individual-services/application/service/update-individual-service-service.ts#L333-L367]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2593292289/image-20221208-013601.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2593292289/image-20221208-015650.png?api=v2]\n\n\n\n\n문제상황\n\n * lock 걸기전\n\n[/wiki/download/attachments/2593292289/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8.drawio.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2593292289/image-20221208-015809.png?api=v2]\n\n\n해결\n\n * TypeORM pessimistic_write\n\n * SELECT ... FOR UPDATE\n   \n   * https://orkhan.gitbook.io/typeorm/docs/select-query-builder#lock-modes\n     [https://orkhan.gitbook.io/typeorm/docs/select-query-builder#lock-modes]\n   \n   * https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-intention-locks\n     [https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-intention-locks]\n   \n   * Intension Exclusive lock (IX)\n     \n     * 트랜잭션이 exclusive lock 을 잡을 의도가 있음을 의미\n     \n     * 테이블 전체에 IX lock이 걸림.\n     \n     * 해당 row에는 exclusive lock이 걸림. (index가 걸려있는 primary key를 SELECT 하기 때문에 row\n       lock)\n\n * lock 건 후\n\n[/wiki/download/attachments/2593292289/lock.drawio.png?api=v2]\n\n[OJT][RDB] DB Transaction isolation Level & Lock\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/619839493/OJT+RDB+DB+Transaction+isolation+Level+Lock]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2593292289"
  },
  {
    "pageContent": "2022-11-25\n\n * Due date 관리 잘하기\n\n\n\n * https://egghead.io/lessons/javascript-unboxing-things-with-foldable\n   [https://egghead.io/lessons/javascript-unboxing-things-with-foldable] 까지 복습\n   plz\n\n * Why functional programming matters\n   \n   * Scala code\n     \n     * val list = (1 to 10000).toList\n       list.map(_ + 42)\n     \n     * list.par.map(_ + 42)\n       \n       * 알아서 멀티 쓰레딩\n\n\n\n * mysqljs HACK\n   \n   * query('select * from user where id in (?)', [])\n     \n     * 오류 발생\n       \n       * select * from user where id in () 이렇게 쿼리 실행해버림\n     \n     * HACK\n       \n       * https://github.com/Ecube-Labs/CCN-API/blob/36bac277f1e68c090ec52e3e1f0901cef884cf99/src/ts/services/client/infrastructure/query.ts#L168\n         [https://github.com/Ecube-Labs/CCN-API/blob/36bac277f1e68c090ec52e3e1f0901cef884cf99/src/ts/services/client/infrastructure/query.ts#L168]\n     \n     * TypeORM 은 HACK 필요 없음\n       \n       * https://github.com/typeorm/typeorm/pull/6887/files\n         [https://github.com/typeorm/typeorm/pull/6887/files]\n\n\n\n * New Kibana 접속 (stage)\n   \n   * 아직 도메인 할당 안 함\n     \n     * Elasticsearch stage 접근 방법(port forwarding)\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2576711715/Elasticsearch+stage+port+forwarding]\n       \n       * port-forwarding\n         \n         * ssh\n         \n         * kube-api\n   \n   * 기존 Kibana 는 단순히 ES 조회용이었지만 이제 ECK\n     [https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-quickstart.html]\n     의 대시보드로 확장 됨\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2584412266"
  },
  {
    "pageContent": "2022-11-11\n\nMonoid\n\nhttps://egghead.io/lessons/javascript-failsafe-combination-using-monoids\n[https://egghead.io/lessons/javascript-failsafe-combination-using-monoids]\n\nhttps://egghead.io/lessons/javascript-a-curated-collection-of-monoids-and-their-uses\n[https://egghead.io/lessons/javascript-a-curated-collection-of-monoids-and-their-uses]\n\nhttps://egghead.io/lessons/javascript-unboxing-things-with-foldable\n[https://egghead.io/lessons/javascript-unboxing-things-with-foldable]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2576547865"
  },
  {
    "pageContent": "2022-10-28\n\n * https://github.com/Ecube-Labs/haulla [https://github.com/Ecube-Labs/haulla]\n\n * AST\n   [https://ko.wikipedia.org/wiki/%EC%B6%94%EC%83%81_%EA%B5%AC%EB%AC%B8_%ED%8A%B8%EB%A6%AC]\n   \n   * 추상 구문 트리는 컴파일러에 널리 사용되는 자료 구조인데, 이는 프로그램 코드의 구조를 표현하는 프로퍼티이기 때문이다\n     AST는 프로그래밍 언어의 고유한 본질, 그리고 문서화 때문에 필요하다\n   \n   * [OJT] AST\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2342289431/OJT+AST]\n   \n   * @typescript-eslint/parser\n     [https://www.npmjs.com/package/@typescript-eslint/parser], typescript\n     [https://www.npmjs.com/package/typescript], … https://astexplorer.net/\n     [https://astexplorer.net/] 에서 다양한 파서 확인 가능\n   \n   * Webpack, ESLint, Prettier, VisualStudio Code, TypeScript, … → 개발 도구들에서 많이\n     사용했다\n\n * https://github.com/Ecube-Labs/ts-domain-uml\n   [https://github.com/Ecube-Labs/ts-domain-uml] → 직접 확인 가능\n   \n   * npm i @ts-domain-uml/core @ts-domain-uml/cli -g\n     ts-domain-uml \"*-api/**/services/**/*.ts\"\n\n * Visualization\n   \n   * https://haulla-domain-stage.ecubelabs.xyz/events\n     [https://haulla-domain-stage.ecubelabs.xyz/events]\n   \n   * 더 좋은 시각화 도구를 찾아서 사용하거나 지금의 시각화 도구를 발전시킬 예정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2565570578/image-20221027-035731.png?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2565570578"
  },
  {
    "pageContent": "2022-10-21\n * 도커\n   * 런타임\n   * 빌드\n   * To enable BuildKit builds (로컬)\n   * Use BuildKit directly (젠킨스)\n * Professor Frisby Introduces Composable Functional JavaScript\n\n\n도커\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2559705105/image-20221018-020511.png?api=v2]\n\n\n런타임\n\nhttps://containerd.io/ [https://containerd.io/]\n\nhttps://cri-o.io/ [https://cri-o.io/]\n\n\n빌드\n\nhttps://github.com/moby/buildkit [https://github.com/moby/buildkit]\n\n\nTO ENABLE BUILDKIT BUILDS\n[https://docs.docker.com/develop/develop-images/build_enhancements/#to-enable-buildkit-builds]\n(로컬)\n\nRequires Docker 18.09+\n\n$ DOCKER_BUILDKIT=1 docker build \\\n  -t docker-stage.ecubelabs.xyz/ecubelabs/erp-api:2 \\\n  --build-arg NODE_ENV=stage \\\n  --build-arg COMMIT_HASH=5c5813ae0f5369f4494a89a58d4b80da5e96b6b3 \\\n  .\n  \n$ docker push docker-stage.ecubelabs.xyz/ecubelabs/erp-api:2\n\n\nUSE BUILDKIT DIRECTLY (젠킨스)\n\n$ buildctl build --frontend dockerfile.v0 \\\n  --local context=. \\\n  --local dockerfile=. \\\n  --opt build-arg:NODE_ENV=stage \\\n  --opt build-arg:COMMIT_HASH=5c5813ae0f5369f4494a89a58d4b80da5e96b6b3 \\\n  --output type=image,name=docker-stage.ecubelabs.xyz/ecubelabs/erp-api:2,push=true\n\n\nPROFESSOR FRISBY INTRODUCES COMPOSABLE FUNCTIONAL JAVASCRIPT\n\nhttps://egghead.io/lessons/javascript-a-collection-of-either-examples-compared-to-imperative-code\n[https://egghead.io/lessons/javascript-a-collection-of-either-examples-compared-to-imperative-code]\n\nhttps://egghead.io/lessons/javascript-combining-things-with-semigroups\n[https://egghead.io/lessons/javascript-combining-things-with-semigroups]\n\nhttps://egghead.io/lessons/javascript-semigroup-examples\n[https://egghead.io/lessons/javascript-semigroup-examples]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2559705105"
  },
  {
    "pageContent": "2022-09-16\n\n\nAWS API 사용\n\n가장 기본적인 방법: 환경변수 사용\n\nAWS_ACCESS_KEY_ID\n\nAWS_SECRET_ACCESS_KEY\n\nbut 보안상 취약한 방법 → IAM Role 사용\n\n\n\n개발자: 로컬에서 role assume → 임시 credential 발급 → 임시 credential 사용 (role 권한)\n\nEC2: role 붙이면 끝\n\n\nECR\n\nprivate DockerHub 문제\n\n * 사이즈 큰 이미지 올리면 계속 실패한다\n\n * VPN 연결해서 사용하는 걸 전제로 했기 때문에 인증 과정이 없음\n\n→ ECR 로 전환해서 해결\n\n * 사이즈 상관 없음\n\n * AWS credential 로 인증\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2543747117"
  },
  {
    "pageContent": "2022-09-02\n\n * AWS 인증 방식을 변경함\n   \n   * 기존: 입사 시 IAM 생성해서 Secret 정보를 전달\n   \n   * 변경: Google Workspace 계정 기반으로 SAML 인증만 하면 됨\n     \n     * SW팀 그룹에 속하고, 인프라 관리자가 별도 권한 할당해줘야 함\n\n * AWS 콘솔 로그인 하는 방법:\n   https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2514321433/GoogleWorkspace+-+IAM+Federation+SSO#AWS-%EB%A1%9C%EA%B7%B8%EC%9D%B8\n   [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2514321433/GoogleWorkspace+-+IAM+Federation+SSO#AWS-%EB%A1%9C%EA%B7%B8%EC%9D%B8]\n\n * 변경된 인증 방식의 장점:\n   \n   * 입사 시 받았던 IAM Secret 정보를 더 이상 소중하게 보관하지 않아도 된다.\n     지워도 문제 X (어차피 이제 못씀)\n   \n   * Secret key가 유출되어도 1시간이면 만료되기 때문에 비교적 걱정을 덜 수 있다.\n   \n   * 언제 어디서든 이큡 Google 계정만 있다면 시크릿을 생성할 수 있다.\n\n * 변경된 인증 방식의 단점:\n   \n   * awscli에 버그가 있어서 만료된 secret이 로컬에 존재해도 계속 사용하려고 시도한다.\n     \n     * 그래서 만료되면 ~/.aws/credentials 파일을 직접 제거하고 다시 시도해야 한다.\n\n * awscli에 의존하거나 로컬 credentials 정보에 의존하던 개발자들은 gsts를 이용하도록 설정해야 한다\n   \n   * 관리 툴 [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/52724014]\n\n * 모든 개발자 분들 Google workspace 계정에 2단계 인증 걸어주면 감사…\n\n\n\n금일 부로 개발자들의 IAM 정보는 모두 제거되었습니다\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2532540425"
  },
  {
    "pageContent": "2022-08-26\n\n * Jenkins\n   \n   * 젠킨스 에이전트가 우리의 파이프라인에 정의된 내용을 수행해준다.\n   \n   * 젠킨스 에이전트가 배포될 리소스가 부족하면 노드를 추가하고,\n     해당 노드에 젠킨스 에이전트를 띄우기 때문에 빌드 시작이 오래 걸리는 경우가 있다.\n\n * GitHub Self-hosted runner\n   \n   * 우리 인프라에 Runner를 띄워서 깃허브 인프라와 연결해서 잡을 수행한다.\n   \n   * 젠킨스와 거의 동일하게 Runner를 우리 인프라에 띄우기 때문에 리소스가 부족하면 노드를 추가한 뒤 Runner를 배포한다.\n   \n   * 기존에 잘 되던게 갑자기 안되면 이유는 대부분 둘 중 하나다.\n     \n     * Runner의 리소스가 부족하기 때문\n       \n       * 깃헙 액션 러너의 리소스: vCPU 2, Memory 7GB\n       \n       * 이큡 액션 러너의 리소스: vCPU 1, Memory 4GB\n     \n     * 깃헙 액션 러너 이미지에 설치되어 있던 패키지가 우리의 이미지에는 없어서.\n       \n       * https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md\n         [https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md]\n       \n       * 위에서 필요한 패키지가 있으면 인프라 관리자에게 말하면 된다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2532966401"
  },
  {
    "pageContent": "2022-08-19\n\nhttps://github.com/Ecube-Labs/javaplayground\n[https://github.com/Ecube-Labs/javaplayground]\n\n * JPA\n   \n   * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/291635906/B#R-(Read)\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/291635906/B#R-(Read)]\n\n * https://www.baeldung.com/spring-transactional-propagation-isolation\n   [https://www.baeldung.com/spring-transactional-propagation-isolation]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2517565445"
  },
  {
    "pageContent": "2022-07-29\n\nhttps://github.com/Ecube-Labs/playground/commit/d46072b43e65ac5a169f75d10d5926bb0f44d2d1\n[https://github.com/Ecube-Labs/playground/commit/d46072b43e65ac5a169f75d10d5926bb0f44d2d1]\n\nuseEffect(() => {\n  calculate(props.equation).then((answer) => {\n    setResult(answer);\n  });\n}, []);\n\nvs\n\nuseEffect(() => {\n  let unmounted = false;\n  calculate(props.equation).then((answer) => {\n    if (!unmounted) {\n      setResult(answer);\n    }\n  });\n  return () => {\n    unmounted = true;\n  };\n}, []);",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2495545345"
  },
  {
    "pageContent": "2022-07-22\n * 2022 2Q SW팀 만족도 조사\n * AWS 파트너\n * GitHub Pages\n * Git rebase\n\n\n2022 2Q SW팀 만족도 조사\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2485256277]\n\n\nAWS 파트너\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2486075403/image-20220721-084805.png?api=v2]\n\n목표: Differentiated\n\n\nGITHUB PAGES\n\nhttps://github.com/Ecube-Labs/ecube-labs.github.io\n[https://github.com/Ecube-Labs/ecube-labs.github.io]\n\n\nGIT REBASE\n\n\n\n1, 2\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2449145896/2022-06-17]\n\nEnforce a null check with composable code branching using Either\n[https://egghead.io/lessons/javascript-composable-code-branching-with-either]\n\nUse chain for composable error handling with nested Eithers\n[https://egghead.io/lessons/javascript-use-chain-for-composable-error-handling-with-nested-eithers]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2486075403"
  },
  {
    "pageContent": "2022-06-24\n\nconst o1 = {\n  inspect:() => 'Hi'\n}\n\nconsole.log(o1) // 'Hi'\n\n예전에는 위와 같이 동작했지만 지금은 아니다.\n\nhttps://github.com/nodejs/node/issues/15549\n[https://github.com/nodejs/node/issues/15549]\n\n\n\nhttps://youtu.be/dJ5C4qRqAgA?t=3865 [https://youtu.be/dJ5C4qRqAgA?t=3865] 까지 봤음\n\nKey takeaways\n\n * 양방향 의존관계 만들지 말 것\n\n * aggregate root 에 다른 aggregate root 포함시키지 말 것\n   \n   * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882844/OJT+DDD+Domain-driven+design#DDD-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882844/OJT+DDD+Domain-driven+design#DDD-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99]\n     참고\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2456485971"
  },
  {
    "pageContent": "2022-06-17\n\nhttps://m.blog.naver.com/compass1111/221171736268\n[https://m.blog.naver.com/compass1111/221171736268]\n\n\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Optional-date\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Optional-date]\n\n\n\n(DevTalk 시간에 몇개씩 hands on 예정)\n\nCreate linear data flow with container style types (Box)\n[https://egghead.io/lessons/javascript-linear-data-flow-with-container-style-types-box]\n\nRefactor imperative code to a single composed expression using Box\n[https://egghead.io/lessons/javascript-refactoring-imperative-code-to-a-single-composed-expression-using-box]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2449145896"
  },
  {
    "pageContent": "2022-06-10\n\nLoad balancing\n\n[/wiki/download/attachments/2443345933/20220610LB.png?api=v2]\n\nReverse proxy\n\nvs Forward proxy\n\nDSR\n\nhttps://tech.kakao.com/2014/05/28/l3dsr/\n[https://tech.kakao.com/2014/05/28/l3dsr/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2443345933"
  },
  {
    "pageContent": "2022-05-27\n\nceed/query [https://github.com/Ecube-Labs/ceed/tree/main/packages/query]\n\n * 탄생 배경\n   \n   * 리소스를 추가/변경/삭제하고 나면 리소스 목록을 갱신 해줘야 한다.\n   \n   * 리소스 관련 핸들러들이 모두 같은 컴포넌트 안에 있으면 크게 문제 되지 않지만 핸들러들이 서로 다른 컴포넌트에 있으면 prop\n     drilling 이 발생하면서 어색한 컴포넌트가 된다.\n     \n     * https://github.com/Ecube-Labs/haulla-generator-front/blob/c7a079ca0d849f5224bcb298cb6be9cb8c0fdbd5/src/app/screens/payment-methods/PaymentMethodsScreen.tsx#L97\n       [https://github.com/Ecube-Labs/haulla-generator-front/blob/c7a079ca0d849f5224bcb298cb6be9cb8c0fdbd5/src/app/screens/payment-methods/PaymentMethodsScreen.tsx#L97]\n\n * 구현\n   \n   * react-query [https://react-query.tanstack.com/] 기반으로 개발\n   \n   * Apollo\n     [https://www.apollographql.com/docs/react/data/mutations/#include-modified-objects-in-mutation-responses]\n     의 아이디어 차용\n     \n     * Apollo 는 리소스 추가/변경/삭제 응답에 리소스가 id 가 포함되어 있으면 자체 캐시에서 id 로 리소스를 검색해서 캐시를\n       업데이트 한다.\n   \n   * ceed/query 동작\n     \n     // todoRepository.ts\n     \n     const todoRepository {\n       list() { ... }\n       add()  { ... }\n     }\n     \n     queryKeyMap.set(todoRepository.list, ['Todo'])\n     queryKeyMap.set(todoRepository.add,  ['Todo'])\n     \n     // Todos.tsx\n     function Todos() {\n       const { data: todos } = useQuery(todoRepository.list) -- (a)\n     }\n     \n     // AddTodo.tsx\n     function AddTodo() {\n       const [addTodo] = useMutation(todoRepository.add)\n       \n       return <button onClick={addTodo} />\n     }\n     \n     * 1. Todos 렌더링 → todoRepository.list() 호출 → ReactQueryCache['Todo'] 에\n       todoRepository.list() 결과 저장 됨\n       2. AddTodo 렌더링\n       3. 버튼 클릭 → addTodo → todoRepository.add() 호출 → ReactQueryCache['Todo']\n       clear → Todos 리렌더링 → 1의 과정 반복\n   \n   * ceed/query 를 사용하면 refetch 하지 않아도 리소스가 추가/변경/삭제 되면 리소스 목록을 자동으로 갱신하게 된다.\n\n * 인터페이스\n   \n   * Apollo [https://www.apollographql.com/docs/react/] 와 똑같이 한다. → 나중에 Apollo\n     도입하면 거의 변경사항 없이 적용이 가능하게 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2432303105"
  },
  {
    "pageContent": "2022-05-13\n\nRemind\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2339438601/2022-02-18#%EC%B9%AD%EC%B0%AC\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2339438601/2022-02-18#%EC%B9%AD%EC%B0%AC]\n\n\n\n탑시티 비용\n\n * 성적 봐서…\n\n\n\n[OJT] Server-driven UI\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2417000484/OJT+Server-driven+UI]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2418606112"
  },
  {
    "pageContent": "2022-04-22\n\nDISCLAIMER\n\nhttps://tech.kakaoenterprise.com/137 [https://tech.kakaoenterprise.com/137]\n\n에 오프로딩 관련 이야기가 있어서 준비한 내용이지만 해당 아티클과는 아무런 관계가 없습니다.\n\n * 오프로딩 := HW 를 이용한 부하 분산의 의미로 사용 됨\n\n * CPU 는 일반적인 작업을 처리하기 위한 장치 → 가능하면 전용 HW 를 사용하는 게 무조건 성능 좋음\n   \n   * ex)\n     \n     * GPU 이용한 비트코인 채굴\n     \n     * ASIC [https://www.buybitcoinworldwide.com/mining/hardware/]\n\n * SSL 은 암복호화 → 연산 비용이 비쌈 → L7 스위치 [https://coconuts.tistory.com/265]의 SSL 오프로딩\n   이용하는 게 EC2 에서 let’s encrypt 어쩌구 하는것보다 무조건 이득\n\n * AWS LB 에도 SSL 오프로딩이 있는데 AWS LB 는 네트워크 스위치 아님. 그냥 EC2.\n   \n   * 그래서 이벤트같은 갑작스러운 high traffic 이 예상 되면 warm up 요청\n     [https://support.bespinglobal.com/support/solutions/articles/16000025461--aws-elb-pre-warming-]\n     해야 함.\n   \n   * 그래도 우리 EC2 에서 SSL 연산하는 것보다는 훨씬 좋음.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2399502349"
  },
  {
    "pageContent": "2022-04-15\n\n\n\n인덱스\n\n * Recap\n   \n   * 2021-08-20\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109472820/2021-08-20]\n   \n   * Index 찾는 방법\n     \n     * Binary search\n       \n       * 25 (1~50)\n         \n         * up → 37/38\n         \n         * down → 12/13\n           \n           * …\n           \n           * 7번 안에…\n\n * Composite index\n   \n   * SELECT * FROM user\n     WHERE age > 35 AND lastName = 'Kim'\n   \n   * https://www.qwertee.io/blog/postgresql-b-tree-index-explained-part-1/\n     [https://www.qwertee.io/blog/postgresql-b-tree-index-explained-part-1/]\n   \n   * const users = [\n         { lastName: 'Kim', age: 31 },\n         { lastName: 'Kim', age: 32 },\n         { lastName: 'Kim', age: 33 },\n         { lastName: 'Kim', age: 34 },\n         { lastName: 'Kim', age: 35 },\n         { lastName: 'Kim', age: 36 },\n         { lastName: 'Kim', age: 37 },\n         { lastName: 'Kim', age: 38 },\n         { lastName: 'Kim', age: 39 },\n         { lastName: 'Lee', age: 31 },\n         { lastName: 'Lee', age: 33 },\n         { lastName: 'Lee', age: 35 },\n         { lastName: 'Lee', age: 37 },\n         { lastName: 'Lee', age: 39 },\n     ]\n     \n     user\n       .filter(user => user.lastName === 'Kim')\n       .filter(user => user.age > 35);\n       \n     vs   \n     \n     user\n       .filter(user => user.age > 35)\n       .filter(user => user.lastName === 'Kim');\n\n\n\nhttps://www.percona.com/blog/mysql-8-0-functional-indexes/\n[https://www.percona.com/blog/mysql-8-0-functional-indexes/]\n\n * LIKE 검색\n   \n   * -- index firstName\n     SELECT * FROM user WHERE firstName LIKE '%im' -- 인덱스 안 탐\n     \n     -- index firstName\n     SELECT * FROM user WHERE firstName LIKE 'Ki%' -- 인덱스 탐\n\n * calculated column\n   \n   * -- index age\n     SELECT * FROM user WHERE age % 2 = 0 -- 인덱스 안 탐\n\n\n\nMySQL 8 - AWS Aurora3\n\n * AWS Aurora3 is not LTS yet\n   [https://aws.amazon.com/blogs/database/amazon-aurora-mysql-3-with-mysql-8-0-compatibility-is-now-generally-available/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2392883241"
  },
  {
    "pageContent": "2022-03-25\n\n쿠버네티스+젠킨스 = flexible CI\n\nSW 2022 goals\n[https://docs.google.com/spreadsheets/d/1r4W3w5vBoHKE2ZpJfasgQeNWMfg5i_LS_f9gneO-WZo/edit#gid=0]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2371715081"
  },
  {
    "pageContent": "2022-03-11\n\n쿠버네티스 환경 설정 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35127323]\n\n쿠버네티스 공부\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/61800472/K+Kubernetes]\n\n이큐브랩 시스템 아키텍쳐\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2211479553/System+Architecture]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2358607889"
  },
  {
    "pageContent": "2022-02-18\n * 공지사항\n   * 코로나19\n   * 칭찬\n   * 면담\n * 프론트엔드 언어\n * SQL basics\n\n\n공지사항\n\n\n코로나19\n\n맥북\n\n\n칭찬\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2339438601/image-20220218-012638.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2339438601/image-20220218-012726.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2339438601/image-20220218-013248.png?api=v2]\n\n\n면담\n\n * 2021 하반기 피어 리뷰 결과\n\n * 2022 상반기 목표 설정\n\n\n프론트엔드 언어\n\n브라우저가 인식할 수 있는 언어는 HTML JS 밖에 없음.\n\n[OJT][FE] JSX (React/Emotion)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2320171030/OJT+FE+JSX+React+Emotion]\n\n[OJT] TypeScript\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224002882/OJT+TypeScript]\n\n\nSQL BASICS\n\nUPDATE SET X = X + 1\n\nINSERT ... SELECT\n\nUPDATE ... JOIN ...\n\nDELETE ... JOIN ...\n\n * FK 걸린 경우 source 와 destination 함께 삭제 불가\n\nWHERE X = NULL (오류)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n\nWHERE X IS NULL (tick)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n\nWHERE X != 1 === WHERE X <> 1\n\nALTER TABLE XXX AUTO_INCREMENT = 10000;\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2339438601"
  },
  {
    "pageContent": "2022-02-10\n\nhttps://www.reddit.com/r/ProgrammerHumor/comments/sgwew9/how_qas_test_developers_code/\n[https://www.reddit.com/r/ProgrammerHumor/comments/sgwew9/how_qas_test_developers_code/]\n\nhttp://highscalability.com/blog/2022/1/28/stuff-the-internet-says-on-scalability-for-january-28th-2022.html\n[http://highscalability.com/blog/2022/1/28/stuff-the-internet-says-on-scalability-for-january-28th-2022.html]\n\nWhere is Jack?\n\n===\n\n빅 엔디안 vs 리틀 엔디안\n\n리틀 엔디안\n\n * x86\n\n * AMD\n\n빅 엔디안\n\n * 네트워크\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2332196886"
  },
  {
    "pageContent": "2022-02-04\n\n * TypeScript\n   \n   * Type guard\n   \n   * Conditional types:\n     https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\n     [https://www.typescriptlang.org/docs/handbook/2/conditional-types.html]\n     \n     * Utility types\n     \n     * infer\n\n// ConstuctorParameters 구현\ntype ConstructorParams = T extends new (...args: infer P) => any ? P : never;\n\n// ReturnType 구현\ntype Return = T extends (...args: any[]) => infer R ? R : never;\n\n\n\n * interface vs type\n   \n   * interface는 선언 병합이 가능, type은 선언 병합 불가능\n     \n     * https://github.com/dmtrKovalenko/date-io/pull/603\n       [https://github.com/dmtrKovalenko/date-io/pull/603] 에서 type 대신 interface\n       사용한 이유와 동일\n   \n   * 외부 모듈로 내보내거나 확장 가능성이 있는 경우 interface 사용 권장.\n   \n   * 굳이 필요하지 않으면 type 사용 권장\n\n> - 팀 레벨 혹은 프로젝트 레벨에서 지정한 컨벤션에 따라 일관성 있게 사용하기\n> - 외부에 공개할 API는 Interface 사용하기 (선언 병합을 위해)\n> https://medium.com/humanscape-tech/type-vs-interface-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-f36499b0de50\n> [https://medium.com/humanscape-tech/type-vs-interface-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-f36499b0de50]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2326626308"
  },
  {
    "pageContent": "2022-01-14\n\n * Interaction Testing\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065/Interaction+Testing]\n   \n   * 실제 사용자가 사용한것과 같은 조건으로 Element를 선택 해야 한다.\n   \n   * 인터렉션이 일어나는것만 검증한다\n   \n   * UI 라이브러리를 바꾸더라도 테스트 코드가 바뀌지 않는것이 잘 짠 상호작용 테스트 코드로 취급할 수 있다.\n\n * A11y\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308800517"
  },
  {
    "pageContent": "2022-01-07\n\n\nABOUT GRAPHQL\n\n * 쿠팡 광고 시스템 GraphQL 도입 후기 영상 [https://www.youtube.com/watch?v=8c95F-_BUwI]\n\n * GraphQL concept 이해에 도움이 되는 글\n   [https://www.apollographql.com/blog/graphql/basics/the-concepts-of-graphql/]\n\n * DevTalk 발표 자료\n\nDevTalk Ray.pdf\n[/wiki/spaces/SW/pages/2299494508/2022-01-07?preview=%2F2299494508%2F2300051464%2FDevTalk+Ray.pdf]\n\n\n\n\n어플리케이션 레이어에서 에그리게이트를 조립하면 안 되는 이유\n\nhttps://github.com/Ecube-Labs/playground/tree/2022.01.07-devtalk\n[https://github.com/Ecube-Labs/playground/tree/2022.01.07-devtalk]\n\n\n실행 방법\n\n$ cd server\n$ npm i\n$ npm start\n\n\nGRAPHQL\n\nPOST http://localhost:3000/gql\nquery {\n  users {\n    id,\n    name,\n    team {\n        name\n    }\n  }\n}\n\n\nREST API\n\nGET http://localhost:3000/api/users\n\n\n\n\n참고\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2299494508"
  },
  {
    "pageContent": "2021-12-03\n\n * Captive network\n\n * 가림막\n\n * 발차기\n\n * 코드리뷰\n\n * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1182106025/F+libs+auth\n   \n   * FSM\n   \n   * 렌더링 블락\n\n * 의미 있는 주석\n   \n   * https://github.com/Ecube-Labs/haulla-api/pull/1058\n\n * 소음\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2268528644"
  },
  {
    "pageContent": "2021-11-19\n\ntelnet\n\nnslookup\n\ntraceroute\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2253684741"
  },
  {
    "pageContent": "2021-11-12[https://ecubelabs.atlassian.net/wiki/download/attachments/2239266915/image-20211109-072154.png?api=v2]\n\n\n\n\n\n\n\nhttps://github.com/Ecube-Labs/ccn-current/blob/08321ae5ec29c7d7898dfbd0ec35167827e0904f/app/real.index.html#L57\n[https://github.com/Ecube-Labs/ccn-current/blob/08321ae5ec29c7d7898dfbd0ec35167827e0904f/app/real.index.html#L57]\n\n<script src=\"{{PUBLIC_ELK_URL}}/errorhandler.js\"></script>\n<script>\n    window.resetErrorHandler && resetErrorHandler('CCN-CURRENT-FRONT');\n</script>\n\nhttps://log.cleancitynetworks.com/errorhandler.js\n[https://log.cleancitynetworks.com/errorhandler.js]\n\nfunction resetErrorHandler(name) {\n  window.onerror = function(msg, src, line, col) {\n    var error =\n      \"name=\" + encodeURIComponent(name || '') +\n      \"&message=\" + encodeURIComponent(msg || '') +\n      \"&err.src=\" + encodeURIComponent(src || '') +\n      \"&err.line=\" + encodeURIComponent(line || '') +\n      \"&err.col=\" + encodeURIComponent(col || '') +\n      \"&web.url=\" + encodeURIComponent(location.href || '') +\n      \"&web.userAgent=\" + encodeURIComponent(navigator.userAgent || '') +\n      \"&web.cookie=\" + encodeURIComponent(document.cookie || '') +\n      \"&t=\" + new Date().getTime(); // IE8 does not support Date.now()\n    new Image().src = \"//log.cleancitynetworks.com/error?\" + error;\n  };\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2239266915"
  },
  {
    "pageContent": "2021-11-05\n\n * [OJT][JS] Hoisting\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2235465731/OJT+JS+Hoisting]\n   \n   * 사실 자바스크립트 내부적으로 거의 모든 선언이 호이스팅된다.\n   \n   * TDZ 덕분에 우리는 호이스팅으로부터 안전할 수 있다.\n   \n   * var 는 선언과 동시에 초기화가 되므로 TDZ에 의해 보호받지 못한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2237104237"
  },
  {
    "pageContent": "2021-10-29\n   \n\n * DDOS\n   \n   * https://mnews.jtbc.joins.com/News/Article.aspx?news_id=NB12028309\n     [https://mnews.jtbc.joins.com/News/Article.aspx?news_id=NB12028309]\n\n * Old fashioned attacks\n   \n   * 프레임웍의 도움없이 개발하지 않는 이상 크게 신경쓰지 않아도 된다. 상식으로만 알아두자.\n   \n   * SQL injection\n   \n   * XSS\n\n * 개발자가 신경써야 할 보안\n   \n   * https\n   \n   * parameter validation\n     \n     * ex) userId=1 인 사람이 GET /users/2 호출 할 수 있으면 안 된다.\n       \n       * https://namu.wiki/w/KT 홈페이지 개인정보 유출 사건\n         [https://namu.wiki/w/KT%20%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80%20%EA%B0%9C%EC%9D%B8%EC%A0%95%EB%B3%B4%20%EC%9C%A0%EC%B6%9C%20%EC%82%AC%EA%B1%B4]\n   \n   * 비밀번호 관리\n     \n     * 노트북에 비밀번호 붙여 놓기\n     \n     * 깃헙에 비밀번호 올리기\n     \n     * 모든 계정 같은 비밀번호 사용하기\n   \n   * 자리 비울 때 맥북 잠그기\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227470452"
  },
  {
    "pageContent": "2021-10-15\n\nhttps://github.com/Ecube-Labs/framer-hands-on\n[https://github.com/Ecube-Labs/framer-hands-on]\n\nhttps://react-ts-vbiyvc.stackblitz.io/ [https://react-ts-vbiyvc.stackblitz.io/]\n\n * Prototyping 도구인 Framer를 이용한 핸즈온: 애니메이션이 있는 컴포넌트 구현\n\n * 디자이너와 가볍게 협업하듯 진행\n\n * Framer에서 코드를 직접 써서 단순 조작으로 구현 불가능한 애니메이션을 Framer에서 사용 가능\n   (개발자와 협업하면 디자이너는 프로토타이핑 도구에서 실제와 똑같은 애니메이션을 사용해 디자인 가이드를 줄 수 있음)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2211741759"
  },
  {
    "pageContent": "2021-10-08\n\n[OJT] System Architecture\n[/wiki/pages/createpage.action?spaceKey=SW&title=%5BOJT%5D%20System%20Architecture&linkCreation=true&fromPageId=2189426896]\n\nhttp://highscalability.com/ [http://highscalability.com/]\n\n * Stuff The Internet Says On Scalability For …\n   \n   * Useful Stuff\n\nJava\n\n * JVM\n\n * Bytecode",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2189426896"
  },
  {
    "pageContent": "2021-09-24\n\n리눅스 서버 트러블슈팅 시 확인해야 하는 항목\n\n * load average\n   \n   * Processes: 499 total, 3 running, 496 sleeping, 2021 threads                                                                                                    14:04:05\n     Load Avg: 2.39, 2.10, 2.05  CPU usage: 12.52% user, 9.45% sys, 78.1% idle    SharedLibs: 225M resident, 28M data, 15M linkedit.\n\n * cpu\n\n * memory\n\n * ulimit\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2161967107"
  },
  {
    "pageContent": "2021-09-10\n\nTopic: Flexible\n\n\n\nQ. 가장 빠른 정렬 알고리즘?\n\nA. 케바케\n\n\n\nApollo [https://www.apollographql.com/docs/react/api/react/hooks/#usequery]\n\nfunction Hello() {\n  const { loading, error, data } = useQuery(GET_GREETING, {\n    variables: { language: 'english' },\n  });\n  if (loading) return <p>Loading ...</p>;\n  return <h1>Hello {data.greeting.message}!</h1>;\n}\n\n\n\nReact Query [https://dev.to/otamnitram/react-query-a-practical-example-167j]\n\nfunction MoviesList() {\n  // Access the client\n  const queryClient = useQueryClient();\n\n  // Queries\n  const query = useQuery('movies', getMovies);\n  \n  // ...\n}\n\n\n\nEcube Labs\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/main/src/app/screens/generator-service-accounts/GeneratorServiceAccountsScreen.tsx]\n\nfunction GeneratorServiceAccountsScreen() {\n  // prop destruction\n\n  // lib, style hooks\n  // ...\n\n  // state, ref hooks\n\n  // formik\n\n  // query hooks\n  const filter = selectVal.length && searchVal.length ? { [selectVal]: searchVal } : {};\n\n  const { loading, data } = useQuery(generatorServiceAccountRepository.list, {\n    variables: {\n      page,\n      limit: FETCH_LIST_ITEMS_LIMIT,\n      ...filter,\n    },\n  });\n  \n  // ...\n}\n\n\n\nhttps://material-ui-pickers.dev/getting-started/installation\n[https://material-ui-pickers.dev/getting-started/installation]\n\n\n\nTODO: redux-form, formik 은 어떻게 할까…?",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2140504201"
  },
  {
    "pageContent": "2021-08-27\n\n * IaC (Infrastructure as Code)\n   \n   * Terraform [https://www.terraform.io/] (우리가 사용하는 도구)\n   \n   * CDK [https://aws.amazon.com/cdk/] (AWS only)\n\n * On-premise ↔︎ Cloud (like AWS)\n   \n   * 사내 구축 인프라\n\n * Bare metal ↔︎ Virtual server (like EC2)\n   \n   * 실제 물리 서버",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2121859091"
  },
  {
    "pageContent": "2021-08-20\n\n * 테크 트렌드는 잘 따라가되 HPD 는 경계하자.\n   \n   * [OJT] Modern Software Architecture\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2093776903/OJT+Modern+Software+Architecture]\n   \n   * https://lazygyu.net/blog/hype_driven_development\n     [https://lazygyu.net/blog/hype_driven_development]\n\n * 개발 기초 체력을 기르자.\n   \n   * 개발자 OJT 자료\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/104300575/OJT]\n   \n   * https://blog.kakaocdn.net/dn/3BlxK/btq60kEMTtY/4DWIAVTxX9yOPzzvZoxRH0/img.png\n     [https://blog.kakaocdn.net/dn/3BlxK/btq60kEMTtY/4DWIAVTxX9yOPzzvZoxRH0/img.png]\n\n * innodb 가 인덱스를 저장하는 방법\n   \n   * [OJT][RDB] UUIDs are Popular, but Bad for Performance\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2106228829/OJT+RDB+UUIDs+are+Popular+but+Bad+for+Performance]\n   \n   * B+ Tree\n\n * 사소한 최적화에 시간을 쓰지 말자\n   \n   * https://colinch4.github.io/2020-07-30/55/\n     [https://colinch4.github.io/2020-07-30/55/]\n   \n   * https://gradler.tistory.com/12 [https://gradler.tistory.com/12]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109472820"
  },
  {
    "pageContent": "2021-08-06\n\n * CI/CD\n   \n   * 배포하기 위해 필요한 일련의 과정을 자동화\n   \n   * Pipeline\n     \n     * Jenkins\n     \n     * AWS Codepipeline\n   \n   * Deploy\n     \n     * K8s\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2082570265"
  },
  {
    "pageContent": "2021-07-30\n\n * Chaos engineering\n\n * EC2\n   \n   * On-demand\n   \n   * RI\n   \n   * Spot\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2067988584"
  },
  {
    "pageContent": "2024-06-24 DB performance issue\n\n\n보고\n\nimage-20240624-053009.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3068362789/image-20240624-053009.png?api=v2]\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n정성민(Snack)\n[https://ecubelabs.atlassian.net/wiki/people/712020:50cbf253-4019-4568-b3e6-06516d98f017?ref=confluence]\n\n추가한 개발자\n\n\n문제 사실\n\n\n문제 일시 또는 기간\n\n2024/6/21 ~ 2024/06/24 13:33:00\n\n\n문제 설명\n\nHubspot Adapter 의 HubspotWebhookEvent 처리가 느려서 consumer lag가 쌓임\n\n\n문제 사실 확인 담당자 (OPTIONAL)\n\n\n\n\n문제 원인\n\nHubspotWebhookEvent 에서 company 를 id로 찾고있는데 id의 type은 varchar 지만 쿼리는 number로 사용하여\nindex가 사용되지 않음\n\nhttps://dev.mysql.com/doc/refman/5.7/en/type-conversion.html\n[https://dev.mysql.com/doc/refman/5.7/en/type-conversion.html]\n\nhttps://github.com/Ecube-Labs/haulla/pull/975#discussion_r1650289866\n[https://github.com/Ecube-Labs/haulla/pull/975#discussion_r1650289866]\n\nHubspotWebhookEvent class에서 id 타입이 string으로 되어있지만 실제 들어오는 타입은 number여서 이러한 문제가\n생김\n\nimage-20240705-022843.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3068362789/Invalid%20file%20id%20-%202ee2340d-148b-4636-9ad2-f1b624bef224?api=v2]\n\n\n문제 해결\n\nHubspotWebhookEvent class에서 id를 number로 수정하고 query 에서 string으로 사용 될수 있도록\nstring으로 변환 후 사용\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n\n\n\n작업\n\n * https://github.com/Ecube-Labs/haulla/pull/1008\n   [https://github.com/Ecube-Labs/haulla/pull/1008] 정성민(Snack)\n   [https://ecubelabs.atlassian.net/wiki/people/712020:50cbf253-4019-4568-b3e6-06516d98f017?ref=confluence]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3068362789"
  },
  {
    "pageContent": "2024-04-08 DB restarted\n\n\n보고\n\nGH-1615 [https://ecubelabs.atlassian.net/browse/GH-1615?src=confmacro]\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n정성민(Snack)\n[https://ecubelabs.atlassian.net/wiki/people/712020:50cbf253-4019-4568-b3e6-06516d98f017?ref=confluence]\n\n\n\n\n문제 사실\n\nimage-20240408-062631.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2964095028/image-20240408-062631.png?api=v2]\n\nimage-20240408-062657.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2964095028/image-20240408-062657.png?api=v2]\n\n\n\n\n문제 일시 또는 기간\n\n~ 2024-04-08 오후 4시\n\n\n문제 설명\n\n 1. dashboard에서 넓은 기한으로 csv 다운로드 시도\n\n 2. db에 부하가 걸려 다운 실패하거나 느리게 받아짐 반복\n\n 3. ecubelabs2 db restart\n\n\n문제 사실 확인 담당자 (OPTIONAL)\n\n\n\n\n문제 원인\n\n\ndashbaord activites 에서 csv 다운로드를 할때 activity select 할때 where 절에 userId IN (거의 모든\n유저 ID) 로 들어가서\nIN 절에 1953개의 userId가 들어가 있는 query 생성\n\nimage-20240530-074717.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2964095028/image-20240530-074717.png?api=v2]\n\nhttps://dev.mysql.com/doc/refman/5.7/en/range-optimization.html\n[https://dev.mysql.com/doc/refman/5.7/en/range-optimization.html]\n\nLIMITING MEMORY USE FOR RANGE OPTIMIZATION\n\nMysql은 Range Optimization에는 최적화를 위한 메모리 제한이 되어있어 넘어갈 경우 index full scan을 하게되어 db\n부하가 심해져 db 다운 됨\nrange_optimizer_max_mem_size: 기본값 8MB\n\n\n원인 파악 담당자 (OPTIONAL)\n\n\n\n\n문제 해결\n\n해결방법 :\n\n 1. userId를 800개 단위로 chunk하여 IN 절 줄임\n\n 2. range_optimizer_max_mem_size를 16MB로 올림\n    \n\nprod: range_optimizer_max_mem_size 를 16MB로 올려서 IN 절에 1953개를 넣어도 인덱스를 잘 탄다.\n\nimage-20240530-110505.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2964095028/image-20240530-110505.png?api=v2]\n\nstage: 8MB 그대로라 index full scan을 한다. (IN절을 줄이면 인덱스를 탐)\n\nimage-20240530-110553.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2964095028/image-20240530-110553.png?api=v2]\n\n\n\neq_range_index_dive_limit : 이번 이슈와 관련 없지만 동등 비교만 할 경우 IN 절의 갯수제한이 있어 IN절이 많으면\nfull scan을 한다. (기본값 200개)\n\n\n\n문제 해결 담당자 (OPTIONAL)\n\n\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n\n작업\n\nSW-10433 [https://ecubelabs.atlassian.net/browse/SW-10433?src=confmacro]\n\n\n\n *  \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2964095028"
  },
  {
    "pageContent": "2024-02-14 허브스팟 하루 API 사용량 초과\n\n\n보고\n\nSlack.\n\n허브스팟 rate limit 오류가 급증\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n비정상적인 오류 디버깅을 위해.\n\n\n문제 사실\n\nimage-20240224-124419.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2916974746/image-20240224-124419.png?api=v2]\n\n허브스팟 하루 API 사용량 초과\n\n * 백오피스에서 데이터 변경 시 허브스팟 업데이트 안 됨\n\n * Webhookify 작동 안 함 (허브스팟 search API 를 호출하는 방식)\n\n * 허브스팟 웹훅은 일부 성공 (웹훅 받았을 때 허브스팟 API 를 호출하지 않는 웹훅만 성공)\n\n\n문제 일시 또는 기간\n\n한국 시간 2/14 오후 1:30 전후 - 한국 시간 2/15 오후 3:00\n\n\n문제 원인\n\nMP-7004 [https://ecubelabs.atlassian.net/browse/MP-7004?src=confmacro]\n\n * 허브스팟에서 AM 팀 설정을 바꿨음\n   \n   * ex) Tim → SW팀\n\n * AM 의 call note 에 update 시각이 모두 최신으로 변경 됨\n   \n   * call note 에는 팀 정보가 없다. 그래서 call note.updatedAt 만 변경된 것임. 왜 이렇게 만들어 놨는지는\n     모르겠지만 허브스팟쪽 답변에 의하면 이렇게 동작한다고 한다. 위 지라 이슈 참고\n\n * Webhookify 는 updatedAt 기준으로 call note 를 긁어와서 tycoon api 로 전달하면 tycoon api 에서\n   call note 상세 조회를 하는데 우리 허브스팟 계정에 있는 모든 call note (약 50만개) 정도가 변경사항으로 잡혀서 call\n   note 상세조회를 50만번 정도 하게 됨 → API 사용량 소진\n\n\n원인 파악 담당자 (OPTIONAL)\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n문제 해결\n\n 1. 다음날이 되어 API 사용량 reset\n    \n    1. 허브스팟 계정의 타임존 기준 자정에 reset 되는데 현재 우리 계정의 타임존은 휴스턴이므로 오후 3시\n\n 2. 다시 모든 call note 를 긁어오지 않도록 last webhook log 에서 syncPointAt 을 강제로 +2h\n\n\n문제 해결 담당자 (OPTIONAL)\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n> Webhookify 는 updatedAt 기준으로 call note 를 긁어와서 tycoon api 로 전달하면 tycoon api 에서\n> call note 상세 조회를 하는데\n\n상세 조회하는 이유가 association 을 파악하기 위함인데 association batch 조회 API 가 있으므로 이것을 사용할 수\n있는지 검토해야 함\n\n\n작업\n\nSW-10303 [https://ecubelabs.atlassian.net/browse/SW-10303?src=confmacro]\n\n *  \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916974746"
  },
  {
    "pageContent": "2024-01-04 Debezium down\n\n\n보고\n\nimage-20240112-022057.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2875326724/image-20240112-022057.png?api=v2]\n\nCCN 에서 봤을 때 수거 이벤트가 발생했음에도 Haulla 에서 수거 이벤트 (red line) 이 표시되지 않는 문제가 사업팀에서 보고 됨.\nDebezium이 죽어서 메세지를 produce 하지 못하고 있는것을 뒤늦게 발견하고,\nproduce하지 못하는 원인을 해결했음에도 debezium connector가 binlog를 정상적으로 가져오지 못하여 일부 토픽의 kafka\n메세지가 produce되지 않음\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n강주영 (Ben)\n[https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n\nKafka 운영 담당자\n\n\n문제 사실\n\n 1. 트래커에서 약 100KB 정도의 raw data 가 들어 옴\n\n 2. 이것이 JSON 으로 디코딩 되면 약 4MB 정도가 됨\n\n 3. Kafka default message size 는 1MB\n\n 4. Debezium으로 Producing 해야 할 데이터가 Kafka에 설정된 용량보다 커서 produce되지 않음\n\n\n문제 일시 또는 기간\n\n? ~ 2024-01-05 02시\n\n\n문제 설명\n\n 1. Debezium connector down\n\n 2. Debezium이 최초로 죽은 이유를 확인하고 해결했으나, 너무 늦게 해결하여 binlog가 유실\n\n 3. 일부 binlog가 유실되어 특정 debezium 토픽의 메세지들이 일정 기간동안 produce 되지 않는 문제가 발생\n\n\n문제 원인\n\n 1. Debezium 최초 down 원인: kafka가 허용한 용량보다 큰 메세지를 produce 해야 했고, 지속적으로 실패\n\n 2. 모니터링 미흡: down이 발생했으나 모니터링 음영지역이라 즉각적인 대응이 이루어지지 않음\n\n 3. DB binlog 유실 원인: 기존에 DB에 설정된 binlog retention이 24 hours였음\n    \n    1. CALL mysql.rds_show_configuration;\n       \n       image-20240112-021616.png\n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2875326724/image-20240112-021616.png?api=v2]\n    \n    2. SHOW BINARY LOGS;\n       \n       image-20240112-021500.png\n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2875326724/image-20240112-021500.png?api=v2]\n\n 4. Debezium을 고려하지 않은 DB Schema 설계/변경\n\n\n원인 파악 담당자 (OPTIONAL)\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n\n문제 해결\n\n 1. 뒤늦게 Debezium 상태를 확인하고, 조치하기 시작\n\n 2. DB에 삽입된 메세지가 너무 큰것이 원인이었기 때문에 Kafka 에 설정된 Produce message limit size를 1M에서\n    10M로 변경\n\n 3. 그러나 Debezium은 계속 down 상태\n\n 4. Debezium connector가 죽을 당시의 binlog가 이미 사라져서 Debezium이 정상적으로 시작되고 있지 않음\n\n 5. 이미 사라진 binlog를 복구 할 방법은 없기 때문에 Debezium이 지금 존재하는 binlog의 제일 과거 binlog 파일의 특정\n    position부터 읽어갈 수 있도록 offset 변경 시도 → (오류)\n    [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n    실패\n\n 6. 제일 최신 binlog라도 정상적으로 읽어 갈 수 있도록 문제의 connector 재생성 → (오류)\n    [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n    실패\n\n 7. 완전 동일한 구성으로 새로운 이름의 connector 생성 → (tick)\n    [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n    성공\n    \n    1. connector를 생성한 시점부터의 데이터는 다시 debezium에 의해 정상적으로 메세지가 produce 되기 시작함.\n\n\n문제 해결 담당자 (OPTIONAL)\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n\n사후 처리 및 재발 방지\n\n 1. binlog retention 24 hours → 72 hours 로 변경: 김일두(Charlie)\n    [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n    \n    1. kafka 메세지 보관기간과 동일하게 변경됨\n\n 2. 모니터링 강화: 강주영 (Ben)\n    [https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n    \n    1. SW-10212 [https://ecubelabs.atlassian.net/browse/SW-10212?src=confmacro]\n\n 3. binlog 유실에 의한 데이터 복구: 강승현 (Tim)\n    [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n\n제안\n\n * DB Schema 설계/변경 시 Debezium과 Kafka도 고려되어야 한다.\n\n * Debezium/Kafka 구성 시 경우에 따라 불필요하게 큰 메세지가 produce 되지 않도록 column.exclude.list 에\n   포함할 수 있어야 한다.\n\n * kafka 메세지 보관 기간과 DB binlog 보관 기간은 최대한 동일하게 유지한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2875326724"
  },
  {
    "pageContent": "2023-11-02 Product-Router, Bin-Server failover\n\n\n보고\n\n기기 통신 시 타임아웃 오류가 급증했는데 기기 통신을 담당하는 서버는 예전에 구축한 클러스터에서 실행되고 있어서 문제 원인 파악 및 대응이\n어려워서 신규 클러스터로 failover\n\nSW-7257 [https://ecubelabs.atlassian.net/browse/SW-7257?src=confmacro]\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n\n\n\n문제 사실\n\n\n\n\n문제 일시 또는 기간\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2829189518/image-20231106-023527.png?api=v2]\n\n50 days 로그를 봤을 때 2023/10/10, 2023/10/23, 2023/10/24, 2023/10/31, 2023/11/01\n\n\n문제 설명\n\n어플리케이션에서 타임아웃 오류 발생 급증.\n\n기기 통신 관련 어플리케이션 코드는 수정이 거의 없으므로 서버 자체의 문제인데 이 때 서버를 확인해보면 CPU spike 치고 있거나 원격 접속\n자체가 안 되는 일이 많음.\n\n\n문제 원인\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2829189518/Pasted%20Graphic-20231106-015929.png?api=v2]\n\n잘 모르겠다…\n\n어플리케이션이 3년 이상 실행 되고 있었기 때문에 서버 자체도 낡기도 했고 old 클러스터는 잘 모를때 구축한거라 모니터링 관련 시스템도 부족한\n상황\n\n\n문제 해결\n\nold 클러스터에서 new 클러스터로 기기 통신을 담당하는 어플리케이션 (product-router, bin-server) failover\n\n2023-11-02 12:55 - 2023-11-02 13:03 KST failover 완료\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2829189518/image-20231106-025112.png?api=v2]\n\n\n변경 된 아키텍쳐\n\n기존: EC2 에 직접 static IP 가 붙는 방식\n\n신규: NLB 에 static IP 붙이고 product-router 는 NLB 뒤에서 동작하는 방식\n\n--------------------------------------------------------------------------------\n\n기존 방식은 EC2 가 down 되면 기기 통신이 안되기 때문에 https://github.com/Ecube-Labs/k8s-aws-ha-eip\n[https://github.com/Ecube-Labs/k8s-aws-ha-eip] 같은 걸 구현해서 HA 유지.\n\n신규 방식은 AWS 가 알아서 한다. 단 NLB 는 AZ 단위로 static IP 를 붙일 수 있으므로 AZ fail 시 통신이 안될 수 있지만\n2018년 부터 이 문서를 작성하는 2023년까지 us-west AZ 가 fail 된 적은 없다. 그래서 이런거까지 고려해서 시스템을 운영할\n수는 없음.\n\n\n사후 처리 및 재발 방지\n\nfailover 이후에 트래픽은 old 클러스터에서 new 클러스터로 잘 넘어갔고 특별한 오류 로그도 없음\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2829189518/image-20231106-025447.png?api=v2]\n\n\nTODO\n\n * 트래커 통신 failover\n   \n   * 트래커는 아직 old 클러스터로 통신",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2829189518"
  },
  {
    "pageContent": "2023-01-14 CCN down (some period)\n\n\n보고\n\n * DB 작업 후 AWS 대시보드에서 확인했지만 잘못 판단해서 넘어감 (아래에 기술)\n\n * 라인\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-021236.png?api=v2]\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n문제의 원인으로 생각되는 작업을 같이 진행 했음\n\n\n문제 사실\n\n일부 시간 CCN 사용 불가\n\n\n문제 일시 또는 기간\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-021530.png?api=v2]\n\n막대 그래프가 있는 시간대에 CCN 사용 못했음\n\n\n문제 설명\n\nMySQL 5.6 → 5.7 으로 업그레이드 되면서 일부 쿼리의 실행 계획이 바뀌어 DB spike 치는 문제\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-021732.png?api=v2]\n\n\n문제 원인\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Aurora 1\nEOL\n\nHello,\n\nYou are receiving this message because you have one or more Amazon Aurora MySQL\nclusters running a version of Aurora MySQL 1 (with MySQL 5.6 compatibility) in\nthe US-WEST-2 Region.\n\nAmazon Aurora MySQL 1 (with MySQL 5.6 compatibility) will reach end of life on\nFebruary 28, 2023. We are providing you with a 2 month notice so you have\nsufficient time to upgrade your database cluster(s). You can find additional\ninformation needed to plan your upgrade including a detailed timeline with\nmilestones in our documentation [1].\n\nThe clusters we identified as affected are listed in your 'Affected resources'\ntab of your AWS Health Dashboard. You may also find clusters affected by this\ndeprecation notice by referring to the following user guide [2]. \n\nShould you have any questions or concerns, the AWS Support Team is available on\nre:Post [3] and via Premium Support [4].\n\n * Aurora 1이 지원 종료 됨에 따라 Aurora 2로 업그레이드 (MySQL 5.6 → 5.7)\n\n * MySQL 엔진이 바뀌면서 쿼리 실행 계획이 달라짐\n   \n   * EXPLAIN SELECT count(*) AS count\n     FROM (SELECT cl.idx\n           FROM (SELECT last_noti_check_date AS date\n                 FROM user\n                 WHERE idx = 2333) AS lastNotiCheck, client_log cl\n                                                     USE INDEX (__idx_client_log_client_idx)\n             JOIN relation_user_client ruc\n                  USE INDEX (`PRIMARY`) ON cl.client_idx = ruc.client_idx AND (ruc.user_idx IN (2333))\n             JOIN user_receive_log_type urlt\n               ON (cl.log_type_idx = urlt.log_type_idx AND urlt.user_idx = ruc.user_idx AND urlt.type = 'ccn')\n             JOIN client_log_type clt\n               ON (clt.idx = cl.log_type_idx AND !clt.is_debug AND clt.idx NOT IN (15, 28, 38, 52, 25))\n           WHERE cl.date IS NOT NULL AND cl.date > '2022-12-17 03:43:59.671' AND cl.date > lastNotiCheck.date\n           LIMIT 100) AS max100;\n   \n   * Before\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-022045.png?api=v2]\n       \n       \n   \n   * After\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-022123.png?api=v2]\n       \n       \n   \n   * explain select cl.idx, cl.client_idx, cl.log_type_idx, cl.date, clvo.volume, clvo.prev_volume, ruc.client_desc, clt.name as log, clt.is_error, clt.is_debug, clt.is_range, clt.notify_type, ccbl.count as compact_count, cle.occur_date, cle.solve_date from client_log cl\n         join relation_user_client ruc use index (`PRIMARY`) on cl.client_idx = ruc.client_idx and (ruc.user_idx in (2254)) join user_receive_log_type urlt on (cl.log_type_idx = urlt.log_type_idx and urlt.user_idx = ruc.user_idx and urlt.type = 'ccn') join client_log_type clt on (clt.idx = cl.log_type_idx and !clt.is_debug and clt.idx not in (15,28,38,52,25)) left join client_ccb_compact_log ccbl on (cl.idx = ccbl.idx) left join client_log_response cle on (cl.idx = cle.idx) left join client_log_volume_origin clvo on (cl.volume_idx = clvo.idx) where cl.date is not null and cl.date > '2022-12-17 08:08:00.085' and cl.date < '2023-01-13 08:08:00.085' order by cl.date desc limit 20;\n   \n   * Before\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-022536.png?api=v2]\n   \n   * After\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-022509.png?api=v2]\n\n\n\n\n문제 해결\n\n\n1차 시도\n\nBy 강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * Aurora 1 → Aurora 2 업그레이드 이후 ccn-cluster 는 r5.large 하나로만 운영하고 있었음\n\n * writer 는 r5.xlarge 로 변경하고 reader r5.large 추가 투입\n\n * 1/14 지나감\n\n\n2차 시도\n\nBy 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * reader DB spike 확인\n\n * reader 재부팅\n\n * 1/16 도 지나감\n\n\n해결\n\n * 계속 반복 되는 것으로 봐서 뭔가 잘못된 것을 인지\n\n * MySQL 5.6 에서 인덱스 강제로 지정하던 것을 Aurora 가 알아서 선택하도록 변경 → 위의 COUNT 쿼리 해결\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-022752.png?api=v2]\n     \n     https://github.com/Ecube-Labs/ccn-current/pull/381/files\n     [https://github.com/Ecube-Labs/ccn-current/pull/381/files]\n   \n   * https://github.com/Ecube-Labs/ccn-current/pull/382/files\n     [https://github.com/Ecube-Labs/ccn-current/pull/382/files]\n\n * 업그레이드 이전과 같은 순서로 join 하도록 강제\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2626027722/image-20230120-022946.png?api=v2]\n   \n   * https://github.com/Ecube-Labs/ccn-current/pull/383\n     [https://github.com/Ecube-Labs/ccn-current/pull/383]\n\n\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\nDB 엔진이 바뀌면 더 많은 테스트가 필요하다. 특정 계정이 문제를 유발할 수 있는데 이건 어떻게 해야할 지 잘 모르겠다.\n\n\n작업\n\n\n\n *  \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2626027722"
  },
  {
    "pageContent": "2022-05-18 ERP 보다폰 유심 동기화 에러\n\n\n보고\n\nCCNB-6867 [https://ecubelabs.atlassian.net/browse/CCNB-6867?src=confmacro]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2422767671/image-20220518-073037.png?api=v2]\n\n슬랙 에러메세지를 통해 문제 발생 인지\n\n\n문제 사실\n\n보다폰 유심을 동기화 하려고 시도하는 경우 매번 에러가 발생함\n\n\n문제 일시 또는 기간\n\n2022. 1. 25. 에 문제의 유심 생성 되었고 그 이후부터 동기화를 시도하면 에러가 발생했을것으로 추측\n\n\n문제 설명\n\n * 보다폰 유심인데 provider의 값이 vodafone 으로 되어 있지 않은 데이터가 존재함.\n\n * 문제의 유심이 비교군에 속하지 않게 되므로 DB에 없는것으로 판단하고 Insert를 시도하다가 에러 발생.\n   \n   * usim_id 에 unique가 걸려있기 때문에 에러가 발생한것.\n\n\n문제 원인\n\n * 누군가 해당 유심을 엑셀로 직접 업로드 했을것으로 추측됨.\n\n * 엑셀 업로드 시 보다폰 유심인지 검증을 하지 않기 때문에 이와 같은 경우가 발생할 수 있다.\n   \n   * 새로 발급된 유심같은 경우 동기화를 하지 않으면 DB에 존재하지 않기 때문에 DB에 있는 값으로 검증하는것은 의미가 없다.\n\n\n문제 해결\n\n문제의 유심 89314404001017984682, 89314404001017984690 두개의 값을 정상적으로 변경.\n(provider를 vodafone으로 변경함)\n\n\n문제 재발 방지 대책\n\n 1. 엑셀로 업로드하는 유심이 보다폰의 유심인지 검증하려면 업로드 처리하기 전에 매번 보다폰 API 호출해서 목록을 가져와 비교해야 하는데\n    부하가 클것으로 예상됨.\n\n 2. ICC ID는 globally 고유한 값이므로 보다폰이 발급 가능한 ICC ID 규칙을 알 수 있다면 바로 검증 가능할것으로 예상됨.\n    \n    1. https://en.wikipedia.org/wiki/E.118 [https://en.wikipedia.org/wiki/E.118]\n    \n    2. [https://ecubelabs.atlassian.net/wiki/download/attachments/2422767671/image-20220518-073228.png?api=v2]\n       \n       II 에 해당하는 값은 IIN(Issuer Identifier Number)이라고 부르고\n       https://www.itu.int/en/Pages/default.aspx\n       [https://www.itu.int/en/Pages/default.aspx] 에서 표준을 관리한다.\n    \n    3. ITU에서 가장 최근에 승인한\n       E.118(https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-E.118-2018-PDF-E.pdf\n       [https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-E.118-2018-PDF-E.pdf]) 를\n       바탕으로 식별 가능한것을 확인함. (보다폰은 약 20개의 IIN을 가진것으로 확인됨. 특정 지역/국가를 위한 IIN이 별도로 있음)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2422767671"
  },
  {
    "pageContent": "2021-11-12 쿠버네티스 down\n\n\n보고\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   슬랙에 올라오는 오류 통해 확인\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n쿠버네티스에 팟이 정상적으로 생성되지 않고 있는 것으로 확인 됨\n\n\n문제 사실\n\n장애 기간 동안 이큐브랩 대부분의 웹 어플리케이션 down\n\n트래커 로그 유실\n\n\n문제 일시 또는 기간\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2243624965/image-20211112-013802.png?api=v2]\n\n11/12 09:19 (KST) ~ 11/12 09:55 (KST)\n\n\n문제 설명\n\n“쿠버네티스”는 이큐브랩의 어플리케이션을 관리하는 시스템으로 쿠버네티스에 문제가 발생해서 이큐브랩 대부분의 웹 어플리케이션 사용이 불가능한\n상태가 되었다.\n\n(프로토콜 서버는 정상 동작)\n\n\n문제 원인\n\n특정 시점에 모든 스팟 인스턴스를 회수 당함\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2243624965/image-20211112-011255.png?api=v2]\n\n그리고 더이상 우리가 사용하는 타입(m5.large)의 EC2 provision 불가\n\n\n문제 해결\n\n인스턴스 타입 교체 m5.large → c5.xlarge\n\n(m5.xlarge 로 먼저 교체를 시도했지만 역시 provision 불가. m 계열 EC2 가용량에 문제가 있는 것으로 추정 됨)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2243624965/image-20211112-011623.png?api=v2]\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n특정 타입의 인스턴스만 사용하지 말고 타입을 섞어서 사용하면 동일한 문제를 방지할 수 있을 것으로 예상된다.\n\n\n작업\n\n\n\n *  \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2243624965"
  },
  {
    "pageContent": "2021-09-16 워드프레스 다운\n\nHigh load average\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/2150563844/High+load+average]\n에 기술한 EFS credit 소진 문제.\n\nThroughput mode 를 Bursting -> Provisioned 로 변경해서 해결.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2149449762"
  },
  {
    "pageContent": "2021-06-16 쿠버네티스 down\n\n\n보고\n\n * 06/16 04:40 (KST) 이안이 라인으로 최초 문의\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930068013/image-20210616-083311.png?api=v2]\n\n * 고객 문의도 접수 됨\n   \n   * https://ecubelabs.atlassian.net/browse/TS-1458\n     [https://ecubelabs.atlassian.net/browse/TS-1458]\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n인프라 담당자\n\n\n문제 사실\n\n장애 기간 동안 이큐브랩 대부분의 웹 어플리케이션 down\n\n\n문제 일시 또는 기간\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1930068013/image-20210616-082432.png?api=v2]\n\n06/16 02:20 (KST) ~ 06/16 16:20 (KST)\n\n오전에 부분적으로 복구 되다가 다시 완전히 down.\n\n\n문제 설명\n\n“쿠버네티스”는 이큐브랩의 어플리케이션을 관리하는 시스템으로 쿠버네티스에 문제가 발생해서 이큐브랩 대부분의 웹 어플리케이션 사용이 불가능한\n상태가 되었다.\n\n(프로토콜 서버는 정상 동작)\n\n\n문제 원인\n\n 1. AWS 로 부터 평소보다 많은 스팟 인스턴스 회수 요청 발생\n    \n    1. 어플리케이션 배포 자동화(Jenkins)가 스팟 인스턴스\n       [https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-spot-instances.html]에\n       구성 되어 있음\n       \n       1. 참고\n          \n          1. 일반 인스턴스는 우리가 명시적으로 반납하기 전까지 계속 사용할 수 있지만 스팟 인스턴스는 AWS 가 임의로 우리의 서버를\n             회수해 갈 수 있다. 대신 비용이 저렴하다.\n          \n          2. 쿠버네티스는 AWS 가 우리의 스팟 인스턴스를 회수해 가면 자동으로 다른 스팟 인스턴스를 요청하도록 구성되어 있기 때문에\n             보통은 문제가 되지 않는다.\n    \n    2. 새벽 시간에 AWS 로 부터 평소보다 많은 인스턴스 회수 요청이 발생함에 따라 어플리케이션 배포 자동화가 매우 많이 실행 됨 → 약\n       7,000 건의 배포 요청 확인\n    \n    3. 배포 자동화는 서버의 리소스를 꽤 많이 사용하기 때문에 어플리케이션을 실행 하기 위한 리소스가 부족해짐 → CCN, ERP down\n    \n    4. 심지어 쿠버네티스를 실행하기 위한 리소스도 부족해짐 → 쿠버네티스 down\n    \n    5. 쿠버네티스는 down 되면 다시 up 되게 구성되어 있음\n    \n    6. 배포 요청은 여전히 처리 되지 않고 쌓여 있기 때문에 쿠버네티스가 up 되면 다시 배포 요청을 처리하다가 리소스 부족으로 down\n       → up down 무한 반복\n\n 2. 많은 수의 인스턴스가 새로 할당 되면서 Docker 무료 사용량 초과\n\n\n문제 해결\n\n쌓여있던 배포 요청을 서버에 원격으로 붙어서 모두 삭제\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]실제 작업 내용\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   오전에 jenkins-slave 를 수작업으로 삭제하다가 마스터 서버가 먹통이 되어 버려서 (t3.medium - credit 소진) 삭제\n   불가능한 상태가 되어 버림\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   성능이 더 좋은 마스터 서버 m5.large 로 교체\n\n * 교체한 서버의 쿠버네티스 버전이 잘못 명시되어 있어서 worker 들이 join 이 안되는 상태 → jenkins-slave 계속 정체 됨\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   모든 마스터 서버에 동시에 원격으로 붙어서 터미널에서 쿠버네티스 api-server up && delete jenkins-slave\n   반복적으로 진행\n   \n   * api-server up 명령어 실행\n   \n   * api-server 살아나면 delete jenkins-slave 명령어 실행\n   \n   * delete 가 진행되기는 하지만 쌓여 있던 jenkins-slave 를 계속 처리하려고 하기 때문에 다시 api-server down\n   \n   * 그러면 다시 api-server up 명령어 실행\n   \n   * 무한 반복\n\n * jenkins-slave 가 삭제되면서 어플리케이션들이 점점 살아나는가 싶더니 Docker rate limit\n   [https://www.docker.com/increase-rate-limits#:~:text=The%20rate%20limits%20of%20100,the%20six%20hour%20window%20elapses.]\n   에 걸려서 image pull 이 안 됨\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   모든 worker 서버에 원격으로 붙어서 Docker credential 설정\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n * 배포 자동화가 무한히 실행되지 않게 변경\n   \n   * 병렬 처리 갯수 제한\n   \n   * 실행 우선 순위 낮춤\n\n * 필요한 곳에 Docker credential 설정\n   \n   * 평소에는 문제가 안되지만 장애 복구 상황에서 rate limit 에 걸려서 장애 복구가 안되는 문제가 있다.\n   \n   * 필요한 곳에는 비용을 지불하고 Docker credential 을 설정해서 결정적인 순간에 사용 못하게 되는 일을 방지한다.\n\n\n작업\n\nTODO\n\n *  \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1930068013"
  },
  {
    "pageContent": "2021-05-13 CCN 접속 불가\n\n\n상황\n\nCCN 접속 불가\n\n\n장애 시간\n\n12:07 - 14:29 (한국시간, 약 2시간 22분)\n\n\n원인\n\nDB view (view_relation_user_options) 가 제이슨(퇴사) 계정으로 만들어 져 있었음. 제이슨 계정을 삭제했더니 해당\nview 에 접근을 할 수 없게 되어서 CCN 접속 불가 상태가 됨.\n\n\n재발 방지\n\n * 서버 계정이 아닌 개발자 계정에서는 write 권한 모두 회수.\n\n * 절대로 개발자 계정으로 DB 리소스를 생성하지 않도록 한다.\n\n\n관련 작업\n\n * https://ecubelabs.atlassian.net/browse/CCNB-5818\n   [https://ecubelabs.atlassian.net/browse/CCNB-5818]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1793851639"
  },
  {
    "pageContent": "2020-08-26 bin-server 지연으로 인한 로그 중복 생성\n\n\n보고\n\nhttps://ecubelabs.atlassian.net/browse/CS-945\n[https://ecubelabs.atlassian.net/browse/CS-945]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/827556037/image-20200826-102947.png?api=v2]\n\n(라인)\n\n\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n제이슨이 훈련소에 가 있어서.\n\n\n문제 사실\n\n기기가 전송한 하나의 보고에 대해 복수개의 로그가 들어가는 경우가 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/827556037/image-20200826-103625.png?api=v2]\n\n\n문제 일시 또는 기간\n\n? ~ 2020/08/26 19:35\n\n * 언제부터 발생했는지는 알 수 없다. client_process_log 의 uuid 를 보고 판단해야 하는데\n   client_process_log 는 한달마다 delete 한다.\n\n\n문제 설명\n\nhttps://ecubelabs.atlassian.net/browse/CS-945\n[https://ecubelabs.atlassian.net/browse/CS-945]\n\n\n문제 사실 확인 담당자 (OPTIONAL)\n\n\n\n\n문제 원인\n\n어떤 이유던지 bin-server 의 처리가 지연 되면 product-router 에서 기기의 보고를 replay 한다.\n\nbin-server 는 멱등성이 보장되지 않으므로 보고가 replay 되면 로그도 여러개 생긴다.\n\n// 아래는 product-router 코드\n// retryCount = 2 이기 때문에 bin-server 에서 처리중이라도 타임아웃 발생하면 기기 보고를 replay 한다.\nretry(retryCount, () => axios({\n    method: 'post',\n    url: targetHostURL + (targetPath || req.path),\n    headers: {\n        date: Number(date),\n        txId,\n    },\n    data: body,\n    transformResponse: undefined, // specify it to prevent response data from automatic json parsing of axios\n    responseType: 'arraybuffer',\n    timeout: 25000,\n}), (err) =>\n    !err.response || err.response.status !== 400\n    // conditional retry\n    // 입력값에 문제(400)가 있지 않은 이상 말단 서버의 일시적인 에러일 수 있으니 최대한 가용성을 확보하기 위해 재시도합니다.\n),\n\n\n원인 파악 담당자 (OPTIONAL)\n\n\n\n\n문제 해결\n\n07/26 ~ 08/26 사이의 중복 데이터는 client_process_log.uuid 기준으로 중복 데이터를 삭제 했다.\n\n * client_process_log, client_log_raw, client_log_raw_parsing_ccb,\n   client_log_raw_parsing_ccp테이블의 데이터만 삭제 → client_log_volume_origin 등은 몇개 테이블은\n   client_log_raw 없이 존재할 수 있음\n\n * client_process_log 를 한달 마다 job 이 지우기 때문에 07/26 이전에는 중복 데이터가 있어도 확인 못 함\n\n * 한땀 한땀 삭제해서 미처 삭제하지 못한 중복 데이터가 있을 수도 있다.\n\n\n문제 해결 담당자 (OPTIONAL)\n\n\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n\n\n\n작업\n\nhttps://github.com/Ecube-Labs/product-router/pull/28\n[https://github.com/Ecube-Labs/product-router/pull/28]\n\n *  \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/827556037"
  },
  {
    "pageContent": "2019-12-20 DB 부하로 인한 API timeout 증가\n\n\n보고\n\n박종인 (Meta) (Deactivated)\n[https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n가 2019. 12. 20. 오전 11시 58분에 “근 20분간 프로토콜 서버 타임아웃 발생 빈도가 높다”고 보고\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n최지원 (Json) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\nvoluntary\n\n\n문제 사실\n\n\n문제 일시 또는 기간\n\n2019. 12. 20. 11:37-12:04 (UTC+09)\n\n\n문제 설명\n\nselect count(time), avg(time), date from (select time, date from client_process_log where time is not null and date between '2019-12-20 02:00:00' and '2019-12-20 03:00:00' order by idx desc) a group by date(date), hour(date), minute(date);\n\n * Production 마스터 DB에서 위 쿼리로 알아본 결과 요청량에는 부침이 없었으나 한국시간 11시 37-38분 사이부터 평균 응답시간이\n   길어지기 시작해서 51분경에는 21초정도 소요됨. 12시 2분 이후 감소하기 시작해 12시 4분부터는 평균치인 1.5~1.8초 사이로\n   회복됨.\n\n * AWS RDS 콘솔 모니터링 로그를 확인한 결과 문제 발생 시간대에 Production 마스터 DB의 CPU Usage가 100%로\n   증가함.\n\n\n문제 원인\n\n12시 19분 경 Production 마스터 DB에서 show processlist;로 확인한 결과\n\n3423175\tyoung\t172.31.47.196:59630\tccnetworks\tQuery\t250834\tSending data\tSELECT \n↵⇥C.idx,\n↵⇥C.SERIAL,\n↵⇥C.usim_id,\n↵⇥case \n↵  ⇥⇥when C.client_type = 0001 then \"CCB\"\n↵  ⇥⇥whe\n3562226\tyoung\t183.109.117.8:2646\tccnetworks\tSleep\t19\tdelayed send ok done\tNULL\n3563520\tyoung\t172.31.47.196:47878\tccnetworks\tQuery\t229\tSending data\tSELECT \n↵⇥C.idx,\n↵⇥C.SERIAL,\n↵⇥C.usim_id,\n↵  CS.last_telecom_date,\n↵  ⇥trim(trim(BOTH ',' from CONCA\n3563541\tyoung\t172.31.47.196:47924\tccnetworks\tSleep\t210\tcleaned up\tNULL\n3563543\tyoung\t172.31.47.196:47928\tccnetworks\tSleep\t210\tcleaned up\tNULL\n\nyoung 계정의 커넥션에 의한 실행시간이 긴 쿼리들이 존재했다. 직접적인 인과관계는 알 수 없으나 문제 원인으로 가정했다.\n\n\n문제 해결\n\n문제는 2019. 12. 20. 12:04 (UTC+9) 에 자연적으로 해결되었다.\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n부하가 큰 SELECT 쿼리는 Read-only Replica에서만 하십시오.\n(replica DB는 부하가 늘면 Auto Scaling 되어서 production에 영향을 최대한 덜 미칩니다)\n\n\n작업\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]:\n   TS팀 전우영 (Young) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c45371ee7315c40d5f91bf1?ref=confluence],\n   홍바울 (Paul) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5b7a26dc99f50159053826ed?ref=confluence]에게\n   주의를 주고, Young의 DB client 접속 정보에서 host를 read-only로 변경한 것 확인\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/254902484"
  },
  {
    "pageContent": "2019-11-25 최적화 실패\n\n\n보고\n\nhttps://ecubelabs.atlassian.net/browse/CCNB-2496\n[https://ecubelabs.atlassian.net/browse/CCNB-2496]\n\n\n담당자\n\n담당자\n\n할당 또는 위임된 이유\n\n최지원 (Json) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n최적화 기능 담당자\n\n\n문제 사실\n\n\n문제 일시 또는 기간\n\n2019. 11. 20. 11:55 (KST) 경\n\n\n문제 설명\n\nhttps://ecubelabs.atlassian.net/browse/CCNB-2503\n[https://ecubelabs.atlassian.net/browse/CCNB-2503]\n\n> 모듈에러인듯 합니다. numCollectionProductsRatio 인자값이 100으로 와야하는데 99.3103448275862로 옵니다.\n\n동일 조건으로 실행했을 때 에러 로그:\nhttps://kibana.cleancitynetworks.com/app/kibana#/doc/e6edf680-9c7d-11e8-8e27-775520354318/logstash-2019.11.25/doc?id=9KiJoG4BwIIal2SMO3mP\n[https://kibana.cleancitynetworks.com/app/kibana#/doc/e6edf680-9c7d-11e8-8e27-775520354318/logstash-2019.11.25/doc?id=9KiJoG4BwIIal2SMO3mP]\n\n\n문제 사실 확인 담당자 (OPTIONAL)\n\n김종민 (Riaco) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n\n문제 원인\n\n문제 사실을 보고 처음에는 특정 쓰레기통이 너무 멀거나 접근하기 어려운 위치에 있는 등의 문제가 있을 수 있다고 보고자에게 전달했다. 그러니\n어떤 쓰레기통이 문제인지 특정해달라는 요구를 받아서 좀 더 깊게 로그 트래킹을 해보니 해당 수거일정의 node에 차고지가 없음을 발견했다.\n확인해보니 그 수거일정의 모든 차량에 지정된 차고지는 DB에서 비정상적으로 삭제되어 있었다. 차량과의 관계가 있으므로 API를 이용해서는 삭제할\n수 없는 상황이며, site_deleted 테이블에 없었다.\n\nVRP 요청 로직 및 VRP 모듈 자체는 이런 문제를 validation하는 로직이 없었기 때문에, 그대로 동작해서 잘못된 결과가 나왔다.\n\n요약:\n\n * 확인할 수 없는 Stage DB상의 데이터 삭제\n\n * Validation 미흡\n\n\n문제 해결\n\nProduction DB에서 Stage DB로 기존 차고지 정보와 유저와의 관계를 복제한 후 스테이지 환경에서 동일 조건으로 수거 일정 생성에\n성공했다.\n\n\n사후 처리 및 재발 방지\n\n\n제안\n\n * https://ecubelabs.atlassian.net/browse/CCNB-1111\n   [https://ecubelabs.atlassian.net/browse/CCNB-1111]\n   이 제안사항은 현재 DB 스키마를 정의할 때 참고사항이지만 코드에 빠짐없이 반영되어있는지는 검증되지 않음\n\n\n작업\n\n * Data Monitoring System\n   [https://ecubelabs.atlassian.net/wiki/spaces/TW/pages/238158517/Data+Monitoring+System]\n   이 재발 방지에 도움이 될 것으로 보임.\n\n * https://github.com/google/or-tools [https://github.com/google/or-tools] 를 이용한\n   https://github.com/Ecube-Labs/automatic-pancake\n   [https://github.com/Ecube-Labs/automatic-pancake](새로운 자체 VRP 모듈)의 개발이 재발 방지에\n   도움이 될 수 있음\n\n\n관련해서 FOLLOW-UP 하면 좋은 이슈 및 문서들\n\n * https://ecubelabs.atlassian.net/browse/CCNB-167\n   [https://ecubelabs.atlassian.net/browse/CCNB-167]\n\n * https://ecubelabs.atlassian.net/browse/CU-203\n   [https://ecubelabs.atlassian.net/browse/CU-203]\n\n * https://ecubelabs.atlassian.net/browse/TEST-99\n   [https://ecubelabs.atlassian.net/browse/TEST-99] (댓글 참조)\n\n * DB 무결성 및 정합성 모니터링 관련 프로젝트가 진행중입니다. (Data Monitoring System\n   [https://ecubelabs.atlassian.net/wiki/spaces/TW/pages/238158517/Data+Monitoring+System])\n\n * CCNx 수거 일정 계획 생성 실패 조건 - Checked by QA\n   [https://ecubelabs.atlassian.net/wiki/spaces/QAR/pages/161579132/CCNx+-+Checked+by+QA]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241533151"
  },
  {
    "pageContent": "허브스팟 API 사용량 초과 위험 시 DMC 집계 중지\n\n담당자\n\n타임존\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\nKST\n\nIan Kang\n[https://ecubelabs.atlassian.net/wiki/people/5b3b204119502f2ea53a9b23?ref=confluence]\n\nPST\n\n\n\n * Overview\n * Notified\n * Steps\n * See\n\n\nOVERVIEW\n\n허브스팟 API 사용량을 초과해버리면 모든 Haulla 시스템 ↔︎ 허브스팟 연동이 멈춰버리므로 사용량을 초과할 것 같으면 선제적으로 DMC\n집계 중지.\n\nDMC 집계를 중지하는 이유는 DMC 집계에서 허브스팟 API 사용량이 많기도 하고, DMC 는 집계가 중지 되더라도 AM 의 AR 에만 영향을\n주기 때문에 다른 연동이 중지 되었을 때에 비해 부담이 적다.\n\n\nNOTIFIED\n\n슬랙 #ops_infra\n\nimage-20240229-091928.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2922119236/image-20240229-091928.png?api=v2]\n\n\nSTEPS\n\nWebhookify [https://webhookify.haulla.com/] 에서 HubSpot Call (HubSpot Adapter) 를\n중지시키면 된다.\n\nCleanShot 2024-02-29 at 18.00.08.gif\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2922119236/CleanShot%202024-02-29%20at%2018.00.08.gif?api=v2]\n\n\nSEE\n\n2024-02-14 허브스팟 하루 API 사용량 초과\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916974746/2024-02-14+API]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2922119236"
  },
  {
    "pageContent": "Kafka 오류 대응\n\n담당자\n\n타임존\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n강주영 (Ben)\n[https://ecubelabs.atlassian.net/wiki/people/5da3dcf41e03120c3e00ef97?ref=confluence]\n\nKST\n\nIan Kang\n[https://ecubelabs.atlassian.net/wiki/people/5b3b204119502f2ea53a9b23?ref=confluence]\n\nPST\n\n\n\n * TooLargeConsumerGroupLag\n * #ops_kafka 채널에 발생하는 다른 모든 오류\n\n\nTOOLARGECONSUMERGROUPLAG\n\n아직 처리하지 못한 메시지의 수를 의미 함.\n\n갑자기 많은 이벤트가 발생하면 이 값이 일시적으로 증가할 수 있지만 어플리케이션이 메시지를 정상적으로 처리하고 있다면 이 값은 점차 내려가야\n함.\n\n(prod) [FIRING:1] TooLargeConsumerGroupLag\n\nConsumer group ccn-tracker-server-production lag is too big (33223) on topic\ndebezium.ccnetworks.tracker_log_raw/partition 0\n\n\n(prod) [FIRING:1] TooLargeConsumerGroupLag\n\nConsumer group ccn-tracker-server-production lag is too big (8509) on topic\ndebezium.ccnetworks.tracker_log_raw/partition 0\n\n\n(prod) [RESOLVED] TooLargeConsumerGroupLag\n\nConsumer group ccn-tracker-server-production lag is too big (153) on topic\ndebezium.ccnetworks.tracker_log_raw/partition 0\n\n--------------------------------------------------------------------------------\n\n이 값이 계속 올라가기만 한다면 뭔가 문제가 있는 것임\n\n\n#OPS_KAFKA 채널에 발생하는 다른 모든 오류\n\n2024.03.14 에 뭔가 문제가 발생해서 오전 5시경 (KST) 부터 Kafka pod 이 모두 down 된 상태였음.\n\n복구를 해버려서 원인파악은 안되고 TooLargeConsumerGroupLag 를 제외한 오류가 1시간 정도 지속 되면 뭔가 문제가 있는 것으로\n판단.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2941485063"
  },
  {
    "pageContent": "Terraform apply 시 control-plane 이상\n\n이 상황에서 control plane 을 그대로 방치하게 되면 다른 노드에도 영향이 가기 때문에 빠르게 조치해주는게 좋다.\n\n\n1. OPENLENS 로 DOWN된 CONTROL-PLANE 노드 확인\n\n 1. Nodes 탭으로 이동\n\n 2. Conditions 가 Ready 가 없는 노드 확인\n\n 3. Roles에 control-plane 이 포함된 노드 확인\n\n 4. Name 을 확인하고 기억한 뒤 다음 단계를 따른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014721659/2024-05-24%20at%2016.39.56@2x.png?api=v2]\n\n\n2. 문제가 있는 노드 TERMINATION\n\nAWS 콘솔에서 노드 이름으로 찾아서 제거하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3014721659/2024-05-24%20at%2016.40.36@2x.png?api=v2]\n\n몇분 기다리면 바로 안정화 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3014721659"
  },
  {
    "pageContent": "Tips > Mac\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/176259519"
  },
  {
    "pageContent": "Tips > 의자 조절\n[https://api.media.atlassian.com/file/35219d29-3504-4828-92aa-6d5075833d5b/image?token=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI4N2I5ZmE2OS1mYzI1LTRhZDYtOThiMS01NGFmOTU4OGFkYWIiLCJhY2Nlc3MiOnsidXJuOmZpbGVzdG9yZTpmaWxlOjM1MjE5ZDI5LTM1MDQtNDgyOC05MmFhLTZkNTA3NTgzM2Q1YiI6WyJyZWFkIl19LCJleHAiOjE3MjIyMTQ1OTUsIm5iZiI6MTcyMjIxMTU5NX0.Yegoo1GINjKt0sxdnFdqpbBjNxsk554C1QYUZaqM15I&client=87b9fa69-fc25-4ad6-98b1-54af9588adab&name=T50%2BAIR%2B%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%89%E1%85%A5%E1%86%AF%E1%84%86%E1%85%A7%E1%86%BC%E1%84%89%E1%85%A5.pdf]\n\nhttp://m.ww.e-sidiz.com/article/%EC%9E%90%EB%A3%8C%EC%8B%A4/7/193/#none\n[http://m.ww.e-sidiz.com/article/%EC%9E%90%EB%A3%8C%EC%8B%A4/7/193/#none]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2008678482"
  },
  {
    "pageContent": "Tips > 영어 공부\n\nhttps://www.youtube.com/watch?v=yE8zugpbKoM&list=PLWFNKrYyaIP544V3AYkXSIgnwVLiWnK2c\n[https://www.youtube.com/watch?v=yE8zugpbKoM&list=PLWFNKrYyaIP544V3AYkXSIgnwVLiWnK2c]\n\n\n\nhttps://tagilog.tistory.com/588?fbclid=IwAR1imMb7LcRdqjDXoPBtNBIjwzQxiKYvNpR4kptoeij2WmltWscASwRi_js\n[https://tagilog.tistory.com/588?fbclid=IwAR1imMb7LcRdqjDXoPBtNBIjwzQxiKYvNpR4kptoeij2WmltWscASwRi_js]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712718026"
  },
  {
    "pageContent": "Tips > CLI\n\n\nGIT DEVELOP BRANCH MERGE & PUSH ALIAS\n\ngit config --global alias.dd '!git checkout develop && git pull origin develop && git merge - && git push origin develop'\n\n현재 자신이 있는 브랜치를 develop 브랜치와 머지하고 푸시를 해주는 alias.\n\ngit dd 처럼 쓰면 된다.\n\n\n\n\n\nGIT PRETTIER LOG ALIAS\n\ngit config --global alias.showlog 'log --pretty=format:\"%C(yellow)%h%Creset %Cblue%ad%Creset %Cgreen%an%Creset %s\" --date=iso --graph'\n\ngit showlog 로 사용하면 된다.\n\n\n\n\n\nDOCKER ALIAS\n\n.zshrc | .bash_profile\n\nalias drmi='docker rmi $(docker images -f \"dangling=true\" -q)' # 사용하지 않는 docker image 전부 제거\nalias drm='docker ps -a | grep Exit | cut -d \" \" -f 1 | xargs docker rm' # Exited 상태인 컨테이너 전부 제거\n\n~/.zshrc 또는 .bash_profile 맨 아래에 위 두줄을 추가하고 저장하고 나온다.\n터미널을 껐다 켜거나, source ~/.zshrc 처럼 하면 사용이 가능해진다.\n\n그러면 간단히 drmi, drm으로 실행이 가능하다\n\n\n\n\n\nK8S ALIAS & FUNCTION\n\n.zshrc | .bash_profile\n\n# k8s token 편리하게 지정하는 함수\n# ex) $ kauth <token>\nfunction kauth() {\n  kubectl config set-credentials <your-email> --auth-provider-arg=id-token=\"$1\"\n}\nalias k='kubectl' # kubectl 대신 k 로 사용 가능하다.\n\n\n\n\n\n\n\n\n기타\n\nVSCODE\n\nInstall Code on Command line [https://i.stack.imgur.com/CZJGA.gif]\n\n클릭해서 보시면 됩니다.\n\nSOURCETREE\n\n실행 후 좌상단 컨트롤 패널에서 Sourcetree > 커맨드 라인 도구 설치하면 그 후 터미널에서 깃 레포지토리인 디렉토리로 이동 후\nstree 입력하면 뜹니다.\n\nFINDER (MACOS)\n\nopen .\n\n현재 디렉토리에서 파인더 열어줌.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/98959361"
  },
  {
    "pageContent": "Tips > Git/GitHub\n\n본 페이지 하위에는 Git/GitHub 이용 시의 관련 팁을 정리합니다.\n\n덧붙여 아래 페이지들도 참고하시면 좋습니다:\n\n * Git 가이드 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40173590/Git]\n * 좋은 git commit 메시지를 위한 영어 사전\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/196706576/git+commit]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/176030256"
  },
  {
    "pageContent": "Tips > vscode\n\nhttps://javascript.plainenglish.io/heres-bill-gates-s-advice-to-new-programmers-it-should-not-be-ignored-33e31378f0ae\n[https://javascript.plainenglish.io/heres-bill-gates-s-advice-to-new-programmers-it-should-not-be-ignored-33e31378f0ae]\n\n> Know Your Tools Well — Really Well\n\n===\n\nhttps://github.com/viatsko/awesome-vscode\n[https://github.com/viatsko/awesome-vscode]\n\nhttps://betterprogramming.pub/7-exciting-vs-code-extensions-released-in-january-2022-dccf1ec77629\n[https://betterprogramming.pub/7-exciting-vs-code-extensions-released-in-january-2022-dccf1ec77629]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/176193979"
  },
  {
    "pageContent": "Tips > Baidu 개발자 계정\n\n\nBAIDU 계정 생성\n\nhttp://gbworld.tistory.com/800 [http://gbworld.tistory.com/800]\n\n\nBAIDU CLOUD 로그인 및 개발자 계정 생성\n\nhttps://login.bce.baidu.com/ [https://login.bce.baidu.com/]\n\nhttps://docs.aws.amazon.com/sns/latest/dg/baidu-register-developer.html\n[https://docs.aws.amazon.com/sns/latest/dg/baidu-register-developer.html]\n\n\nBAIDU API CONSOLE\n\nhttp://lbsyun.baidu.com/apiconsole/ [http://lbsyun.baidu.com/apiconsole/]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/15990799"
  },
  {
    "pageContent": "Tips > Confluence 문서 작성\n\n\nPAGE 글 작성 방법\n\n 1. Pages 페이지(?)로 이동하세요.\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-21-37.png?api=v2]\n 2. 해당 페이지 우측\n    상단에 [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-24-5.png?api=v2] ←\n    이렇게 생긴 버튼 클릭\n 3. 용도에 맞는 문서를 생성해야겠지만, 보통은 아래처럼  빈 문서를 선택합니다\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-29-32.png?api=v2]\n 4. 최상위 페이지를 만드려면 그냥 작성하면 됩니다.\n    1. 하위 문서를 작성 하려면 아래와 같은 버튼을 클릭해주세요.\n       [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-26-50.png?api=v2]\n    2. 그러면 아래와 같이 나오는데, \"Browser\" 탭에서 상위 문서가 되길 원하는 문서를 찾아서 선택하고 \"Move\" 버튼을\n       누릅니다.\n       [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-28-2.png?api=v2]\n    3. 끝!\n\n\n\n\n\nBLOG 글 작성 방법\n\n 1. Page 작성보다 훨씬 간단합니다.\n 2. 똑같이 [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-30-59.png?api=v2] 버튼을\n    클릭해서, \"Blog post\" 를 선택 후 작성하시면 됩니다.\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2018-4-27_11-32-0.png?api=v2]\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\nPAGE 글 작성 방법2\n\n\n\n\n 1. 글을 작성하고자 하는 카테고리로 이동 후 화면 맨 왼쪽에 있는 + (플러스) 버튼을 클릭\n 2. 일반적으로 \"빈 페이지\"에 작성하면 됨(나머지는 안해봐서... 강승현 (Tim)\n    [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]에게...)\n 3. \"만들기\" 클릭 하면 끝(아래 2개 다 동일한 결과를 도출하나, 방법이 아주 약간 달라 사진으로 대체합니다.)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2019-10-14_20-39-30.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/8552525/image2019-10-14_20-39-51.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/8552525"
  },
  {
    "pageContent": "Tips > Web Server에서 CORS 허용\n\nhttps://enable-cors.org/ [https://enable-cors.org/]\n\n참고.\n\n\n\n\nNginx 의 경우엔 아래처럼 하면 간단하게 해결~\n\n#\n# Wide-open CORS config for nginx\n#\nlocation / {\n     if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        #\n        # Custom headers and headers various browsers *should* be OK with but aren't\n        #\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        #\n        # Tell client that this pre-flight info is valid for 20 days\n        #\n        add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Content-Type' 'text/plain; charset=utf-8';\n        add_header 'Content-Length' 0;\n        return 204;\n     }\n     if ($request_method = 'POST') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n     }\n     if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n     }\n}\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35913797"
  },
  {
    "pageContent": "Tips > 이름 짓기\n\n> 개인적으로 저는 이름을 정하는게 참 어렵습니다.\n> \n> 출처는 불분명하지만 아래 링크를 보시면 저 말고 다른 개발자분들도 그렇게 느끼는 것 같네요.\n> \n> https://steemit.com/kr-dev/@dreamisnowhere/73ygrq\n> [https://steemit.com/kr-dev/@dreamisnowhere/73ygrq]\n\n\n애자일과 여러 번역들로 유명하신 김창준님의 TIP\n\n(출처: https://www.slipp.net/questions/353 [https://www.slipp.net/questions/353])\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/57278548/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202018-08-06%20%EC%98%A4%ED%9B%84%205.09.10.png?api=v2]\n\n\n변수명 지어주는 사이트\n\nhttps://www.curioustore.com/#!/ [https://www.curioustore.com/#!/]\n\n\n오픈소스 네이밍 특징들\n\nhttps://brunch.co.kr/@goodvc78/12 [https://brunch.co.kr/@goodvc78/12]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/57278548"
  },
  {
    "pageContent": "Tips > console.*\n\n\nCONSOLE.DIR\n\n자바스크립트에서 객체 obj의 내용을 확인할때 console.dir 을 사용하면 예쁘게 출력된다.\n\ndepth는 설정하지 않으면 default로 5의 값을 가진다.\n\nconsole.dir(obj, { color: true, depth: 5 });\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/140542516/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-04-22%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.20.42.png?api=v2]\n\n\nCONSOLE.LOG(JSON.STRINGIFY(OBJ, NULL, 4))\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/140542516/image2021-7-26_11-11-56.png?api=v2]\n\n\n\n\n\nhttps://javascript.plainenglish.io/why-using-just-console-log-in-2023-is-a-big-no-no-ef99f1940901\n[https://javascript.plainenglish.io/why-using-just-console-log-in-2023-is-a-big-no-no-ef99f1940901]\n\n * console.table\n\n * console.group\n\n * console.time\n   \n   * console.timeEnd\n\n * console.assert\n\n * console.log('%c', ‘color: red’)\n\n * console.trace\n\n * console.dir\n\n * console.count\n\n * console.clear\n\n * console.profile\n   \n   * console.profileEnd",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/140542516"
  },
  {
    "pageContent": "Tips > [Front-end] Google Maps - autocomplete 사용시 주의사항\n\n구글맵에서 지원하는 자동 완성을 위해 사용되는 google places autocomplete의 문제점이다.\n\nautocomplete 객체를 아래의 코드처럼 생성한다고 가정한다.\n\nconst autocomplete = new google.maps.places.Autocomplete(\n  inputElementReference,\n);\n\nautocomplete 객체는 자동완성 기능을 제어할때 도움을 주는 메서드들이 들어있으며, 이 객체가 필요 없어지면 제거해야 하는 상황이\n생긴다.\n\n여기서부터 문제가 발생.\n\n\n\n\n\nAUTOCOMPLETE 객체가 사라져도 흔적은 사라지지 않는다.\n\nCCN Current, CCN Front 등 해당 기능을 사용하는 SPA 앱에서 공통적으로 발견되는 현상이다.\n\nautocomplete 객체가 생성된 만큼의 pac-container가 존재해버린다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/160202813/image2019-6-5_15-14-7.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/160202813/image2019-6-5_15-14-24.png?api=v2]\n\n실제로는 더이상 바인딩 된 이벤트나 객체가 없더라도 해당 객체를 제거하지 않는다...\n\n\n\n\n\n대처 방법 #1\n\nstack overflow에서는 많은 사람들이 .pac-container 클래스를 가진 element를 선택해서 제거하라고 한다.\n\n그러나 이 방법을 사용하면 하나의 페이지에서 다수(2개 이상)의 autocomplete를 사용하는 상황에서는 하나의 객체만 사라지면 나머지의\n객체에 영향을 미치게 된다.\nwhy? 내가 아는 한 autocomplete가 다루고 있는 .pac-container를 공식적으로 얻어올 수 있는 방법이 없다\n=> 여기서 공식적이라 함은, 객체 내부적으로 레퍼런스를 찾을수는 있지만 라이브러리가 업데이트 됨에 따라 이 레퍼런스가 변하지 않는다는 보장이\n없음. 불확정요소는 제품에 포함하지 않도록 한다.\n(여러 autocomplete가 존재하는 경우가 바람직한 예시는 아니지만, 우리는 수 많은 상황을 고려해야 한다.)\n\n\n\n\n\n대처 방법 #2\n\n이 문서를 보고 있으면서 해결이 된 상황이라면 당신이 작성해주시면 됩니다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n결론\n\n지금까진 노답이다.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/160202813"
  },
  {
    "pageContent": "Tips > Jest CLI\n\nhttps://jestjs.io/docs/en/cli [https://jestjs.io/docs/en/cli]\n\n다양한 Jest CLI를 위해, 위의 사이트를 참고한다.\n\n\n\n\n\n1. 변경된 코드만 테스트 하기\n\n테스트 코드가 쌓여서, 매번 테스트하기 시간이 너무 많이 걸릴 때 유용하다.\n\n\n\n\nnpm test -- --onlyChanged",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/169182107"
  },
  {
    "pageContent": "Tips > grep 활용\n\n[http://img.battlepage.com/upload/2019/1019/19233942e463af9f34720dd807737c1b024ac84e.jpg]\n\n유닉스/리눅스 명령어를 적절히 잘 사용하면 유용하지만 자주 사용하지 않기 때문에 잊기 쉬워 위키에 정리한다. \n\n\n1. --HELP 에서 필요한 명령어 검색\n\n보통의 경우 터미널에서 커맨드 라인에 --help 옵션을 주면 사용법이 출력된다. 하지만 너무 많이 출력될 경우 추려서 보고 싶을 때가 있다.\n한 가지 예로, jest에서 변경 된 파일만 테스트 하고 싶을 경우가 생겼다고 가정해보자. 느낌상 --help에서 \"changed\" 라는\n키워드를 갖는 문장을 grep으로  검색하면 될 것 같다.\n\n// -n: 라인출력, -i: case-insensitive(대소문자 구분x), -B: grep 결과 n 라인 위로 출력, -A: grep 결과 n 라인 아래로 출력\n\n$ npm test -- --help | grep -n -i -B 2 -A 2 \"changed\" \n\n\n\n\n그러면 다음과 같이 \"changed\"가 포함된 라인(120, 121)에서 위 아래로  2 줄 씩 출력된다. 설명에 따라,\n\"--only-changed\" 옵션을 주면 현재 레포지토리에서 변경된 파일만 테스트 할 수 있음을 볼 수 있다.\n\n...\n\n118-  --notify-mode \n119-    Specifies when notifications will appear for test results.\n120:  --only-changed (-o)\n121:    Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git or hg repository at the moment.\n122-  --only-failures (-f)\n123-    Run tests that failed in the previous execution.\n\n...\n\n\n2. 어떤 내용을 포함하는 파일 검색하기\n\nIDE에서 검색기능은 강력하고 빈번히 사용된다. 하지만 IDE의 도움을 받을 수 없을 경우 터미널에서도 grep을 사용하면 비슷하게 검색기능할\n사용할 할 수 있다.\n\n만약 '/path/to/somewhere' 디렉토리에 있는 프로젝트 내에서, 'cui-button'이라는 문자열을 포함하는 파일을 검색하고\n싶다면 아래와 같이 옵션을 주면 된다.\n\n// -r: 하위 디렉토리도 검색, -i: 대소문자 구분x, -n: 라인번호 출력, --include={매칭패턴}, --exclude={제외패턴} --exclude-dir={제외할 디렉토리, 콤마로 구분} \n\n$ grep -rin '/path/to/somewhere' -e 'cui-button' --include=\\*.ts  --exclude-dir={node-modules,test} --exclude=\\*.spec.ts\n\n\n\n\n결과, 아래와 같이 'cui-button'이라는 문자열 패턴을 포함하는 파일위치, 라인번호, 내용 등이 출력된다.\n\n...\n\n.//src/app/shared/ceed/button/button.component.ts:116:    this.renderer.addClass(elem, `cui-button-${this.btnStyle}`);\n.//src/app/shared/ceed/button/button.component.ts:117:    this.renderer.addClass(elem, `cui-button-${this.btnStyle}-${this.color}`);\n.//src/app/shared/components/modal/modal-confirm.component.ts:20:      <cui-button (click)=\"modalRef.close()\">{{\n.//src/app/shared/components/modal/modal-confirm.component.ts:22:      }}</cui-button>\n.//src/app/shared/components/modal/modal-confirm.component.ts:23:      <cui-button color=\"primary\" (click)=\"confirm()\">{{\n.//src/app/shared/components/modal/modal-confirm.component.ts:25:      }}</cui-button>\n.//src/app/shared/components/modal/modal-confirm.component.ts:30:      cui-button {\n.//src/app/shared/components/modal/submit-confirm/modal-submit-confirm.component.ts:21:      <button cui-button (click)=\"close()\">\n.//src/app/shared/components/modal/submit-confirm/modal-submit-confirm.component.ts:24:      <button cui-button color=\"primary\" (click)=\"confirm()\">\n.//src/app/shared/components/modal/delete-confirm/modal-delete-confirm.component.ts:19:      <button cui-button (click)=\"modalRef.close()\">\n.//src/app/shared/components/modal/delete-confirm/modal-delete-confirm.component.ts:22:      <button cui-button color=\"danger\" (click)=\"confirm()\">\n.//src/app/feature/fm/containers/plan-creation/modal-creation-guide.component.ts:46:      <button cui-button (click)=\"modalRef.close()\">\n\n...\n\n[참고] https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux\n[https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/169345063"
  },
  {
    "pageContent": "Tips > 비동기 Loop 구현 (forEach, map)\n\nidx를 통해서 어떠한 정보를 받아오는 getInformationByIdx 메소드가 있다고 가정해보자. ( 예시입니다...! )\n\n해당 메소드는 하나의 idx만 받기때문에, idxs 배열에서 idx를 하나씩 읽어서 정보를 받아 와야한다\n\nps.  getInformationByIdx로 구현하는 것보다는 getInformationByIdxs 로 구현하는게 더 바람직하다. ( N+1\n문제) \n\n\nasync getUserInformation(){\n\tconst idxs = [1, 2, 3];\n\tconst result = idxs.map( idx => getInformationByIdx(idx) ) ;\n}\n\n당연히 위와 같은 코드는 작동하지 않는다.\n\n비동기 처리를 하기 위해서는 async, await가 필요하기 때문이다.\n\nasync getUserInformation(){\n  const idxs = [1, 2, 3];\n  const result = idxs.map(async (idx) => await getInformationByIdx(idx) ) ;\n  return result;\n}\n\n\n\n\n위와 같은 코드가 정상적으로 작동할 꺼 같지만 작동하지 않는다. (map도 만찬가지이다.)\n\n둘다 foreach와 map이 async function으로 선언되어 있지않아 처리하지 못한다.\n\n( 내부 코드를 보면 callback을 기달려야하는데 안 기달린다. await callback(…) 으로 구현되어야함)\n\n이것을 해결하기 위해서는 asynForEach를 새로 만들거나, Promise.all 등을 이용하면 된다.\n\n\n\n\n개인적으로는 아래와 같은 방법을 추천드린다.\n\n 원본 펼치기\n\nasync getUserInformation(){\n  const idxs = [1, 2, 3];\n  const result = [];\n  for(const idx of idxs){\n    const information = await getInformationByIdx(idx);\n    result.concat(information)\n  }\n  return result\n}\n\n위와 같은 방법을 추천드리는 이유\n\n 1. 새로운 메소드를 구현 안해도 된다.\n\n 2. 해당코드가 디버깅할 때 편하다.\n\nLint에 걸리기도 하므로 위와 같은 방법은 자제 하도록 하자. (태세 변환)\n\nPromise.all 써서 구현하기를 바란다.\n\nasync getUserInformation(){\n const idxs = [1, 2, 3];\n const promises = idxs.map(idx => getInformationByIdx(idx) );\n const result = await Promise.all(promises);\n}\n\n\n\n\n\n\n예제 코드 ( var는 그냥 복붙 편하게 하려고 썼습니다. )\n\nvar _promise1 = function (num) {\n\treturn new Promise(function (resolve, reject) {\n\t\tsetTimeout(function () {\n\t\t console.log(num);\n\t\t\tresolve();\n\t\t}, num*1000);\n\t});\n};\nvar test = [1,2,3,1,3,,1]\nconsole.log('start');\nawait Promise.all(test.map( v => _promise1(v)));\nconsole.log('done');\n\n\n\n\n결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/172326974/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-07-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.58.31.png?api=v2]\n\n\n\n\n다른 방식을 원한다면... here\n\nArray.prototype.forEachAsync = async function (fn) {\n    for (let t of this) { await fn(t) }\n}\n\nArray.prototype.forEachAsyncParallel = async function (fn) {\n    await Promise.all(this.map(fn));\n}\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/172326974"
  },
  {
    "pageContent": "Tips > xcode - ios\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/238158187"
  },
  {
    "pageContent": "Tips > Android\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2062188569"
  },
  {
    "pageContent": "Tips > TypeORM\n * Transaction\n\n\nTRANSACTION\n\nhttps://github.com/typeorm/typeorm/blob/50d75f5e8a02780a40f7b7c6dc9f9260377b9488/src/persistence/EntityPersistExecutor.ts#L181\n[https://github.com/typeorm/typeorm/blob/50d75f5e8a02780a40f7b7c6dc9f9260377b9488/src/persistence/EntityPersistExecutor.ts#L181]\n\n사용자가 시작한 트랜잭션이 없을 때 CUD 는 TypeORM 에 의해 자동으로 트랜잭션이 적용 된다. 트랜잭션을 사용하지 않으려면\ntransaction = false 옵션 사용해야 함.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2544173124"
  },
  {
    "pageContent": "Tips > CyberChef\n\n\n설명\n\nCyberChef는 영국 정보기관 GCHQ(에니그마 푼 곳)에서 만든 데이터 분석, 변환 툴입니다.\n\n\n좋은 설명\n\nhttps://m.blog.naver.com/skinfosec2000/221214748974\n[https://m.blog.naver.com/skinfosec2000/221214748974]\n\n\nWEB APP\n\nhttps://gchq.github.io/CyberChef [https://gchq.github.io/CyberChef]\n\n\nNODE.JS\n\nhttps://www.npmjs.com/package/cyberchef\n[https://www.npmjs.com/package/cyberchef]\n\nNPM에 패키지가 올라와 있습니다.\n\n프로덕션에 사용하지 마세요. Data wrangling할 때만 사용하세요.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/357204480"
  },
  {
    "pageContent": "Tips > Network settings\n\nHQ 공유기 관리\n[/wiki/pages/createpage.action?spaceKey=INFRA&title=HQ%20%EA%B3%B5%EC%9C%A0%EA%B8%B0%20%EA%B4%80%EB%A6%AC]\n참조\n\n\nWI-FI\n\nSW팀 전용 Wi-Fi 패스워드는 이큐브랩 기본 Wi-Fi 패스워드 앞에 sw가 붙습니다.\n\n\nDNS\n\n\nMACOS\n\n일부 페이지가 DNS_PROBE_FINISHED_NXDOMAIN 에러와 함께 접속되지 않는 경우 공유기 기본 DNS가 시원찮아서 그런 것입니다.\n\nSystem Preference(시스템 환경설정) → Network → Advanced… 버튼 → DNS 탭에서\n1.1.1.1(CloudFlare) 또는 8.8.8.8(Google) 추가",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374407169"
  },
  {
    "pageContent": "Tips > Chrome\n\n\n단축키\n\n * 새 탭 열기: Command + T\n\n * 새 창 열기: Command + N\n\n * 새 시크릿창 열기: Command + Shift + N\n\n * 닫은 탭 다시 열기: Command + Shift + T\n\n * 주소창에 포커스: Command + L\n\n * 설정 열기: Command + ,\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2121400435"
  },
  {
    "pageContent": "Tips > 사용하지 않는 Docker 리소스 제거하기\n\n * 이미지나 볼륨, 네트워크 등 대부분 사라져도 상관 없다면?\n   \n   docker system prune --volumes\n\n * 태그되지 않은 이미지만 없애고싶다면?\n   \n   docker image prune\n\n * 모든 이미지를 다 제거하고 싶다면?\n   \n   docker image prune -a\n\n * 특정 기간 안에 생성된 이미지만 제거하고 싶다면?\n   \n   docker image prune -a --filter \"until=9m\" # 9개월 이내로 만들어진 모든 이미지 제거\n\n도커 사용해서 개발하다보니 갑자기 용량이 없다고 해서 찾아봤습니다… (파란별)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/72/1f611.png]\n\n레이어 캐시나 이미지를 다 지우기 때문에 주로 개발하는 프로젝트는 미리 이미지를 pull 받아놓는게 좋습니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/798457979"
  },
  {
    "pageContent": "Tips > Jira app 개발\n\nJira app 을 개발해서 Jira 에 custom 기능을 추가할 수 있다.\n\n\n\n * Jira app 골격 생성\n\n\nJIRA APP 골격 생성\n\nJira app 을 위한 기본적인 골격을 생성한다.\n\n하나의 Jira app 하위에 여러 custom 기능이 들어갈 수 있기 때문에 Ecube Labs for Jira Cloud\n[https://github.com/Ecube-Labs/ecubelabs-for-jira-cloud] 외에 다른 app 을 추가할 일이 생길지는\n잘 모르겠다.\n\n$ npm i -g atlas-connect\n$ atlas-connect new -t jira your-jira-app-name\n\nyour-jira-app-name 폴더 하위에 Jira app 을 위한 기본적인 골격이 생성 된다.\n\n폴더에 들어가보면 credentials.json.sample 이라는 파일이 있는데 이 파일의 이름을 credentials.json 로 변경하고\n도메인, username, password 를 수정한다. username 은 사용자의 Jira 로그인 계정이고 password 는 API\nTokens [https://id.atlassian.com/manage-profile/security/api-tokens] 에서 토큰을 생성한\n뒤 토큰값을 입력하면 된다.\n\n{\n  \"hosts\": {\n    \"https://ecubelabs.atlassian.net\": {\n      \"product\": \"jira\",\n      \"username\": \"id.kim@ecubelabs.com\",\n      \"password\": \"REDACTED\"\n    }\n  }\n}\n\n\nhttps://developer.atlassian.com/cloud/jira/platform/build-a-jira-app-using-a-framework/\n[https://developer.atlassian.com/cloud/jira/platform/build-a-jira-app-using-a-framework/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/619806896"
  },
  {
    "pageContent": "Tips > Computational Geometry\n\n\n\n * MySQL Geometry\n   * 데이터 타입\n   * 공간 인덱스(Spatial Index)\n   * 공간 함수\n * Geometry representation format\n   * Tools\n * 유용한 개념\n   * Point in Polygon\n   * Visual Center\n * 기타 참고\n   * 지리 좌표계\n   * OSRM / OSM\n\n\nMYSQL GEOMETRY\n\nMySQL은 기본적인 공간 데이터 타입과 유용한 함수들을 제공한다.\n\n\n데이터 타입\n\nhttps://dev.mysql.com/doc/refman/5.6/en/spatial-type-overview.html\n[https://dev.mysql.com/doc/refman/5.6/en/spatial-type-overview.html]\n\nhttps://dev.mysql.com/doc/refman/5.7/en/spatial-types.html\n[https://dev.mysql.com/doc/refman/5.7/en/spatial-types.html]\n\n * POINT: x, y 값을 가진 객체로 지리 좌표계의 한 위치를 표현한다.\n\n * LINESTRING: Point의 집합. 도로나 경로를 표현하는 데 사용한다. 닫힌(끝과 끝이 연결된) 경우 LINEARRING이다.\n\n * POLYGON: LinearRing의 집합. 행정구역과 같은 영역을 표현하는 데 사용한다. 영역을 표현하는데 닫힌 선 하나가 아니라\n   여러개를 사용하는 이유는 도넛 모양의 땅도 있을 수 있기 때문이다.\n\n * GEOMETRY: 위 유형들을 모두 저장할 수 있는 타입이다.\n\n * 이외에도 MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION 등이 있다. 자세한\n   것은 공식 문서 참고\n\n\n공간 인덱스(SPATIAL INDEX)\n\n공간 데이터 타입을 이용하면 좋은 점은 공간 인덱싱을 통해 더 빠른 탐색이 가능하다는 것이다.\n\n그러나 단순 2차원 공간이 아닌 지구 위에서의 공간 인덱스(Geospatial Index)는 MySQL 5.6에서는 지원하지 않는다.\n\n참고하면 좋은 글:\n\n * https://chang12.github.io/mysql-geospatial-index-1/\n   [https://chang12.github.io/mysql-geospatial-index-1/]\n\n * https://chang12.github.io/mysql-geospatial-index-2/\n   [https://chang12.github.io/mysql-geospatial-index-2/]\n\n\n공간 함수\n\n아래 링크에 한국어로 설명이 잘 되어있으니 참고할 것\n\n * https://sparkdia.tistory.com/24 [https://sparkdia.tistory.com/24]\n\n * https://sparkdia.tistory.com/25 [https://sparkdia.tistory.com/25]\n\n * https://sparkdia.tistory.com/26 [https://sparkdia.tistory.com/26]\n\nST_Distance_Sphere 같은 유용한 함수가 5.6엔 없기 때문에 필요하면 User Defined Function으로 선언해야 한다.\n\n→ 참고: https://tzara.tistory.com/45 [https://tzara.tistory.com/45]\n\n\nGEOMETRY REPRESENTATION FORMAT\n\n알아두면 좋다. Geometry 관련 라이브러리나 툴을 사용할 때 필요하다. MySQL은 WKT와 WKB를 지원한다. 그러나 라이브러리를 사용할\n때는 GeoJSON이 제일 많이 쓰인다.\n\n * GeoJSON [https://ko.wikipedia.org/wiki/GeoJSON]\n\n * WKT(Well-Known Text) [http://www.gisdeveloper.co.kr/?p=994]\n   \n   # 예\n   LINESTRING(3 4,10 50,20 25)\n\n * WKB [http://www.gisdeveloper.co.kr/?p=997]\n\n\nTOOLS\n\n * https://clydedacruz.github.io/openstreetmap-wkt-playground/\n   [https://clydedacruz.github.io/openstreetmap-wkt-playground/] - OpenStreetMap\n   WKT playground\n\n * http://geojson.io/ [http://geojson.io/] - GeoJSON online viewer\n\n * https://geojsonlint.com/ [https://geojsonlint.com/] - geojson.io와 비슷함\n\n * https://geojson.tools/ [https://geojson.tools/] - 데이터 양이 많을 때 좀 빠르다\n\n\n유용한 개념\n\n\nPOINT IN POLYGON\n\n * https://en.wikipedia.org/wiki/Point_in_polygon\n   [https://en.wikipedia.org/wiki/Point_in_polygon]\n\n * 지오펜스 체크 [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/127926611] :\n   CCN-API에 적용된 PIP의 설명\n\n지오펜스 기능을 위해서 어떤 포인트가 폴리곤 내부에 있는지, 밖에 있는지, 경계에 있는지를 검사할 필요가 있다.\n\nPoint in Polygon으로 검색하면 다양한 라이브러리가 있다.\n\nMySQL도 이 기능을 공간 함수로 지원한다. → ST_Contains()\n[https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html#function_st-contains]\n\n검사할 폴리곤이 많고 복잡한 경우 성능이 문제가 될 수 있는데 이럴 때는 PIP 용도로만 좀 더 간략한 폴리곤을 사용하면 된다.\n\n\nVISUAL CENTER\n\n사용 사례에 따라 다르지만 폴리곤의 대표 위치로 폴리곤의 무게중심\n[https://en.wikipedia.org/wiki/Centroid#Of_a_polygon]보다 시각적 중심(Visual Center)가 더\n유용할 때가 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1712881802/image-20210423-092638.png?api=v2]\n\n참고:\n\n * https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc\n   [https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc]\n\n * https://github.com/mapbox/polylabel [https://github.com/mapbox/polylabel]\n\n\n기타 참고\n\n\n지리 좌표계\n\n→ 지리 좌표계 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122356038]\n\n\nOSRM / OSM\n\n→ OSRM [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/982122538/OSRM]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712881802"
  },
  {
    "pageContent": "Tips > Clipy\n\n * Clipy: 클립보드 100개까지 저장 가능. 설정에서 원하는 만큼 사이즈 조정 가능\n\n * 단축키:\n   \n   * 커맨드 + 쉬프트 + V\n     \n     * 커서 옆에 히스토리가 뜨는데 키보드로 원하는 히스토리를 찾아 붙여넣을 수 있다.\n\n * 참고 링크:\n   \n   * https://macnews.tistory.com/3815 [https://macnews.tistory.com/3815]\n   \n   * https://github.com/Clipy/Clipy [https://github.com/Clipy/Clipy]\n   \n   * https://clipy-app.com [https://clipy-app.com/]\n\n * 애플 칩셋 지원됨",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/133398961"
  },
  {
    "pageContent": "Tips > AWS Certificate - SAA\n\nhttps://aws.amazon.com/ko/certification/certified-solutions-architect-associate/\n[https://aws.amazon.com/ko/certification/certified-solutions-architect-associate/]\n\n * AWS에서 제공하는 서비스들 & 아키텍처 구성에 대한 시험\n   \n   * 자격증 이름에 걸맞게 아키텍트가 된 것 마냥 아키텍쳐 문제를 개선해줘야 하는 문제를 푼다.\n\n\n추천 서적 & 리뷰\n\n모두 사내 도서관에 비치되어 있다.\n\n * AWS 공인 솔루션스 아키텍트 올인원 - 어소시에이트 2/e\n   [https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=275726362]\n   \n   * 시험 범위에 들어가는 거의 모든 서비스를 소개하고 있다.\n   \n   * 설명이 좀 방대하지만 필요한 부분만 찾아 읽으면 유용하다\n   \n   * 연습문제 1회 제공 (22.07 까지 유효)\n\n * 배워서 바로 쓰는 14가지 AWS 구축 패턴\n   [https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=232254312]\n   \n   * 각 서비스들을 실제로 어떻게 연계해서 사용하는지 감을 잡는데 도움이 된다.\n\n * 따라하며 배우는 AWS 네트워크 입문\n   [https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=253645476]\n   \n   * 클라우드 네트워크에 대해 기초 지식을 쌓는 데 도움이 된다.\n   \n   * 따라해보기 좋은 실습이 많다.\n\n\n\n\n추천 강의 & 영상\n\n * 유데미 강의\n   [https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c02/]\n   \n   * 각 서비스에 대해 설명이 매우 잘 되어 있다.\n   \n   * 연습 문제 1회 제공\n   \n   * 듣고싶다면 찰리에게 유데미 계정 문의하면 된다.\n     https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2244018199/Online+courses#%EC%8B%A0%EC%B2%AD\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2244018199/Online+courses#%EC%8B%A0%EC%B2%AD]\n\n * 유튜브 채널 - AWS 강의실 [https://www.youtube.com/c/AAAWS]\n\n * 유튜브 채널 - 생활코\n   [https://www.youtube.com/watch?v=7ThkvfCKKQs&list=PLuHgQVnccGMC5AYnBg8ffg5utOLwEj4fZ&ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9]딩\n\n\n\n\n연습 문제\n\n * AWS Certificate 공식 사이트에서 실제 시험 환경과 동일한 연습 시험을 결제해서 볼 수 있다.\n\n * examtopic\n   [https://www.examtopics.com/exams/amazon/aws-certified-solutions-architect-associate-saa-c02/]\n   ( 공식 답안은 오답률이 높아서 discussion 보고 답을 알아내야 한다는 번거로움이 있다 )\n\n * 그 외 유데미 등에서 5-6 세트를 묶어서 강의로 판매하기도 한다.\n\n\n\n\n기타 팁\n\n * 시험 접수 전 시험 시간 추가 30분을 요청할 수 있다.\n\n * AWS Certificate을 하나 취득하면, 그 다음에 응시하는 다른 시험에 대해 50% 할인 쿠폰을 준다.\n\n * 매년 6월 - 11월 사이에 열리는 AWS Challenge\n   [https://pages.awscloud.com/GLOBAL_TRAINCERT_takethechallenge.html]에 등록하면 시험비\n   50% 할인 혜택이 있는 것 같다.\n\n * 오프라인 시험장 중 시험료 50% 할인 쿠폰을 판매하는 곳이 있었다. 접수 전 문의해보면 좋을 것 같다.\n\n * 비공식 수험 가이드\n   [https://github.com/serithemage/AWSCertifiedSolutionsArchitectUnofficialStudyGuide]\n\n * 온라인으로 시험을 보는 경우 영어 이름과 사진이 나온 신분증이 별도로 필요하다.\n   \n   * 국가에서 발행한 신분증이면 된다고 적혀있지만 속으면 안된다. 감독관이 외국인이라 영어 아니면 시험 못본다.\n\n * 프리티어가 끝났더라도 다른 신용카드와 이메일이 있다면 또 가입해서 프리티어로 실습을 하는데 큰 어려움이 없다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2319941633"
  },
  {
    "pageContent": "Tips > No code / low code\n\n코드를 전혀 안짜거나 적은 양의 코드를 가지고 응용 프로그램을 만들 수 있도록 해주는 도구를 no/low code tool 이라고 한다.\n\n아직 실제 제품을 만들 때 써먹을 정도로 훌륭한 솔루션은 없어보인다.\n\n * [Low code] Retool\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2521989123/Low+code+Retool]\n * [No code] Glide\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2522873895/No+code+Glide]\n * [No code] Bubble.io\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2522546216/No+code+Bubble.io]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2521366544"
  },
  {
    "pageContent": "Tips > DataGrip\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635825207"
  },
  {
    "pageContent": "Tips > SQL\n * WHERE 절과 같은 순서로 데이터 조회하기\n\n\nWHERE 절과 같은 순서로 데이터 조회하기\n\nSELECT *\nFROM haulla.account\nWHERE accountNumber IN (\n                        '10007697268',\n                        '12269135185',\n                        '15059050281',\n                        '15258904471',\n                        '15260439438',\n                        '15782503016',\n                        '15866099320',\n                        '15884111905',\n                        '16004129683',\n                        '16072991660',\n                        '16214472487',\n                        '16330765936',\n                        '16477035289'\n    )\nORDER BY FIELD(accountNumber,\n                '10007697268',\n               '12269135185',\n               '15059050281',\n               '15258904471',\n               '15260439438',\n               '15782503016',\n               '15866099320',\n               '15884111905',\n               '16004129683',\n               '16072991660',\n               '16214472487',\n               '16330765936',\n               '16477035289');",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2869461052"
  },
  {
    "pageContent": "type-challenges\n\n연결github.com/type-challenges/ty…\n[https://github.com/type-challenges/type-challenges/blob/main/README.ko.md]날짜12월\n09, 2023\n\ngithub.com/type-challenges/ty…\n[https://github.com/type-challenges/type-challenges/blob/main/README.ko.md]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2855206923"
  },
  {
    "pageContent": "Tips > Mac 확대\n\n 1. 설정 > 손쉬운 사용 > 확대/축소 들어간다\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/2726723594/image-20230608-095049.png?api=v2]\n\n 2. 두가지 항목 원하는대로 설정하면 끝.\n    보조 키 누른채로 스크롤링 하면 확대/축소 된다.\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/2726723594/image-20230608-095107.png?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2726723594"
  },
  {
    "pageContent": "macOS 안내서\n\nhttps://subicura.com/mac/ [https://subicura.com/mac/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2226028705"
  },
  {
    "pageContent": "macOS CheatSheet App\n\nhttps://www.mediaatelier.com/CheatSheet/\n[https://www.mediaatelier.com/CheatSheet/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/157122561/2019-06-04%2010-25-06.2019-06-04%2010_25_36.gif?api=v2]\n\n효율성을 높이기 위한 단축키를 알려주는 앱입니다.\n\n커맨드 키를 꾹 누르고있으면 포커스가 있는 앱의 단축키를 전부 알려줍니다.\n\n맥 처음 쓰시는 분에게 아주 유용하고 약 5~6년전부터 유명했던 앱이기도 해요. 아주 도움 많이 받았습니다.\n\n참고) https://macnews.tistory.com/258 [https://macnews.tistory.com/258]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/157122561"
  },
  {
    "pageContent": "맥북 내장 디스플레이 작동이 안될때\n 1. 문제점: 문자 그대로 맥북 디스플레이가 작동이 안된다.\n    (HDMI를 연결해 외부 모니터를 연결시에 모니터에 화면은 정상적으로 출력이 되고, 키보드 트랙패드 등은 정상적으로 작동하며 macOS\n    디스플레이 설정에선 외부 모니터만 인식한다. 마치 키보드 트랙패드 내장 맥미니가 된 기분)\n 2. 해결 시도: 꽂았다 뺐다가 껐다가 켰다가 맥북을 흔들어 봤다가 말았다가 블로그에 나온 것은 전부 시도 했는데 실패.\n 3. 최종 해결책: Mac SMC(시스템 관리 컨트롤) 초기화를\n    한다. https://support.apple.com/ko-kr/HT201295\n    [https://support.apple.com/ko-kr/HT201295]\n    3-1. 배터리를 분리할 수 있는 구형 맥북의 경우: 시스템 종료 후 배터리 분리하고 전원 버튼을  5초 동안 길게 누른 후 다시 장착\n    하고 전원 버튼 눌러서 Mac을 키면 된다.\n    3-2. 배터리를 분리할 수 없는 맥북의 경우: 시스템 종료 후 shift - control - option 키와 전원 버튼을 동시에\n    대략 10초 동안 길게 누르다가 손을 뗀 후 전원 버튼을 누르면 된다.\n 4. 만약에 안되면?: 080-333-4000 [tel://0803334000]\n 5. 알아야할 것: 완벽히 해결되는건 아닌 듯. 작성 다음 날 동일 증상 발생 → 같은 방법으로 조치함.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/167542869"
  },
  {
    "pageContent": "화면 분할\n\n * 윈도우에서는 “[윈도우키] + 방향키”를 누르면 화면이 50% 비율로 자동으로 나뉜다.\n\n * 맥에서는 초록이 버튼을 길게 누르고 있으면 화면 분할이 가능하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/244089339/image-20191204-021419.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/244089339/image-20191204-020953.png?api=v2]\n\n\n\n * 단점은 전체화면으로만 바뀐다는 …?",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/244089339"
  },
  {
    "pageContent": "맥북 키보드 무상 수리 서비스\n\nhttps://support.apple.com/ko-kr/keyboard-service-program-for-mac-notebooks\n[https://support.apple.com/ko-kr/keyboard-service-program-for-mac-notebooks]\n\nApple은 일부 MacBook, MacBook Air 및 MacBook Pro 모델 중 극소수의 키보드에 다음 중 하나 이상의 동작이 발생할\n수 있음을 확인했습니다.\n\n * 글자 또는 문자가 예기치 않게 중복으로 입력됨\n\n * 글자 또는 문자가 표시되지 않음\n\n * 키가 '걸린' 느낌이 들거나 키를 누를 때마다 반응이 제각각임\n\n대상 MacBook, MacBook Air 및 MacBook Pro 키보드에 대해서는 Apple 또는 Apple 공인 서비스 제공업체에서\n무상으로 서비스를 제공할 예정입니다. 서비스 유형은 키보드를 검사한 후에 결정되며, 하나 이상의 키 또는 키보드 전체를 교체하게 될 수\n있습니다.\n\n이 프로그램은 대상이 되는 MacBook, MacBook Air 및 MacBook Pro 모델에 대해 해당 제품의 최초 소매 판매일로부터 4년\n동안 적용됩니다.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/895287527"
  },
  {
    "pageContent": "디스크 용량 확보\n * node_modules 삭제\n * 안쓰는 시뮬레이터 파일 삭제\n * GIF Brewery 3 임시 파일 삭제\n * Docker container 찌꺼기 삭제\n * DaisyDisk\n\n\nNODE_MODULES 삭제\n\nnode_modules 용량 보면 깜짝 놀랄 것이다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1132167234/image-20210112-022822.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1132167234/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-12%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.29.27.png?api=v2]\n\n정확히 어디가 문젠지 모르겠다면 탐색/최적화를 해주는 앱을 사용하자.\n\n무료도 괜찮지만 유료는 더 빠르고 쾌적하다. https://daisydiskapp.com/ [https://daisydiskapp.com/]\n\n\n안쓰는 시뮬레이터 파일 삭제\n\n$ xcrun simctl delete unavailable\n\n저장 공간 관리에서 Xcode 캐시 삭제가 가능하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1132167234/image-20210112-055009.png?api=v2]\n\n\n\n\nGIF BREWERY 3 임시 파일 삭제\n\n~/Movies/GIF Brewery 3 에서 임시 파일 삭제\n\n\n\n\nDOCKER CONTAINER 찌꺼기 삭제\n\nDocker cli를 통해 모든 이미지와 모든 컨테이너, 볼륨을 다 지워도 Docker Desktop이 남겨두는 이상한 파일이 있다.\n난 여기서 약 16기가를 확보했다.\n\n 1. 터미널에서 docker system prune -a --volumes 실행 (모든 컨테이너와 이미지의 정보가 사라지니 주의)\n    \n    1. 위 명령어보다는 docker builder prune -a 실행. 빌드 캐시만 정리한다. ccn 경우 3~4 기가 확보.\n\n 2. Docker Desktop 종료\n\n 3. ~/Library/Containers/Docker 폴더 통채로 삭제\n\n 4. Docker Desktop 실행 후 튜토리얼 스킵\n\n\n\n\nDAISYDISK\n\n디스크 사용 상태 확인하기 좋음\n\nimage-20240103-011303.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1132167234/image-20240103-011303.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1132167234"
  },
  {
    "pageContent": "원하는 영역 캡쳐하기\n\nhttps://support.apple.com/ko-kr/guide/mac-help/mh26782/mac\n[https://support.apple.com/ko-kr/guide/mac-help/mh26782/mac]\n\nctrl 키를 같이 누르면 파일이 저장되지 않고 클립보드에 저장된다.\n\n\n\ncmd + shift + 4\n\n캡쳐 된 영역은 클립보드로 복사된다.\n\n\n\ncmd + shift + 4 누르고 나서 space\n\n선택한 윈도우만 캡쳐한다.\n\n\n\ncmd + shift + 5\n\n스크린샷 도구 열기. 스크린샷을 어디에 저장할지 클립보드로 보낼지 등의 옵션 선택 가능\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1702526983"
  },
  {
    "pageContent": "세계 시간\n위젯[https://ecubelabs.atlassian.net/wiki/download/attachments/2036269181/image-20210715-061618.png?api=v2]\n\n * 배경색의 차이: 일출/일몰 (뇌피셜)\n   \n   * 공식 자료를 못찾겠는데 혹시 아시는분 뇌피셜을 오피셜로 만들어주세요\n   \n   * 짤막 지식: CCB의 배터리 상태 알고리즘에도 비슷한 내용이 있다. Battery Status Algorithm\n     [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/125501526/Battery+Status+Algorithm]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2036269181"
  },
  {
    "pageContent": "외장 모니터 밝기 조절\n\nhttps://github.com/MonitorControl/MonitorControl\n[https://github.com/MonitorControl/MonitorControl]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2111537153/image-20210821-031730.png?api=v2]\n\n * M1을 탑재한 맥은 https://github.com/MonitorControl/MonitorControl/issues/323\n   [https://github.com/MonitorControl/MonitorControl/issues/323] 이슈가 해결되기 전까진\n   3.0 베타를 써야합니다.\n\n * 모니터의 OSD를 조작하지 않고 연결된 모든 모니터의 밝기를 따로 조절할 수 있습니다.\n\n * 포커스된 창이 있는 모니터의 밝기를 키보드의 밝기 조절 단축키로 조절할수도 있습니다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2111537153"
  },
  {
    "pageContent": "macOS 스크롤 바 노출 설정\n\n이것도 팁인가?\n\n\n설정 방법\n\nGeneral(일반) - Show scroll bars 에서 선택 가능\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2241790112/image-20211111-053845.png?api=v2]\n\n\n예시\n\n\nAUTOMATICALLY BASED ON MOUSE OR TRACKPAD\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2241790112/image-20211111-054156.png?api=v2]\n\n\nALWAYS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2241790112/image-20211111-054229.png?api=v2]\n\n\n언제 유용한가?\n\nhttps://yceffort.kr/2021/01/overflow-auto-scroll\n[https://yceffort.kr/2021/01/overflow-auto-scroll]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2241790112"
  },
  {
    "pageContent": "asciinema - 터미널을 간단하게 캡쳐해보자!\n\nhttps://asciinema.org/ [https://asciinema.org/]\n아주 좋은 프로그램이다.\n\n\nINSTALLATION\n\n$ brew install asciinema\n\n\nUSAGE\n\n$ asciinema rec\n\n\nSTOP RECORDING\n\nCtrl + D 를 눌러보세요",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/52723901"
  },
  {
    "pageContent": "zsh plugin\n\n * https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fzf\n   [https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fzf]\n   .zshrc 의 plugins 에 fzf 추가하고 brew install fzf 설치하면 바로 이용 가능\n   \n   * ctrl + r: 히스토리를 아주 예쁘고 편리하게 검색 가능하다\n   \n   * ctrl + t: 해당 디렉토리의 하위 파일을 편리하게 검색 가능하다. 하위 파일이 많을수록 느린것은 당연지사.\n   \n   * esc + c: 하위 디렉토리 검색(ctrl + t)후 선택하면 바로 이동 가능.\n\n * https://github.com/zsh-users/zsh-autosuggestions\n   [https://github.com/zsh-users/zsh-autosuggestions]\n   \n   * history 기반 suggestion",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/99647489"
  },
  {
    "pageContent": "ngrok - 간단하게 Local Port를 forwarding 해주는 프로그램\n\n\n\n\nngrok은 로컬에서 작업중인 포트를 외부와 간단히 연결할 때 도와주는 아주 좋은 프로그램입니다!\n\n필수로 설치하는걸 권장해드려요.\n\n\n설치\n\n\nMACOS\n\n직접 다운\n\n 1. https://ngrok.com/ [https://ngrok.com/] 로 들어가서 ngrok 프로그램을 다운받습니다.\n    (실행해도 의미 없으니까 다운만 받으세요!)\n\n 2. 다운받았다면 아마도 ~/Download 디렉토리에 있을테니, 아래 커맨드를 실행합니다.\n    \n    terminal\n    \n    mv ~/Download/ngrok /Applications/ngrok\n    ln -s /Applications/ngrok /usr/local/bin/ngrok\n\n 3. 아무 위치에서나 ngrok 커맨드를 실행했을 때 아래처럼 나와야 합니다.\n\n홈 브루\n\n> brew cask install ngrok\n\n\n\n\n* 직접 다운 or 홈 브루 둘 중 하나의 방법으로 설치하면 됩니다.\n\n\n\n\n\n사용법\n\n어렵지 않습니다.\n\nngrok http -region ap <forward port>\n\n * http: http 터널을 여는 커맨드입니다! 이 외의 tcp, tls 터널이 있어요\n   * -region 플래그는 포워딩을 해줄 서버?의 위치를 지정하는건데, ap가 그나마 가장 빠릅니다(한국 기준!)\n\n\n주의할 점\n\n * 무료 플랜은 이제 하나의 주소로 8시간밖에 세션이 유지되지 않습니다.\n * 무료 플랜은 서브도메인을 지정하여 사용할 수 없습니다.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/18546689"
  },
  {
    "pageContent": "소스트리 커맨드라인 도구 설정법\n\n간단하게 아래 커맨드를 실행하여 터미널에서 특정 프로젝트 경로에서 stree 를 치면 간단하게 해당 레포지토리가 소스트리로 열립니다.\n\nln -s /Applications/SourceTree.app/Contents/Resources/stree /usr/local/bin/\n\n출처: 제이슨의 호기심에 의한 구글링",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40992771"
  },
  {
    "pageContent": "oh-my-zsh multiline config\n\n\n\n\n일반적인 CLI Default는 oneLine입니다. \n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/203882499/image.png?api=v2]\n\n\n\n\n하지만, 원라인의 단점은 현재 위치에 따라 명령어를 치는 위치가 달라지고, \"디렉토리 경로\"와 \"명령어\" 간에 명확한 분리가 되어있지 않아\n가끔~ 헷갈립니다.\n\noh-my-zsh의 경우 멀티라인으로 변경할 수 있는데, 방법은 아래와 같습니다. \n\n\n\n\n 1. ~/.oh-my-zsh/themes 이동 후 본인 테마를 편집기를 통해 들어갑니다. 그리고 상단에 아래 함수를 붙여넣습니다.\n\ncode\n\n # multiline function\n prompt_newline() {\n   if [[ -n $CURRENT_BG ]]; then\n     echo -n \"%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR\n %{%k%F{blue}%}$SEGMENT_SEPARATOR\"\n   else\n     echo -n \"%{%k%}\"\n   fi\n\n   echo -n \"%{%f%}\"\n   CURRENT_BG=''\n }\n\n      2.  \"prompt_end\" 바로 위에 위 함수를 넣어줍니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/203882499/image2019-9-2_11-41-47.png?api=v2]\n\n\n\n\n    3. 터미널 재실행 하면 끝!\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/203882499/image2019-9-2_11-43-41.png?api=v2]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/203882499"
  },
  {
    "pageContent": "nvm use 자동화\n\n~/.zshrc 파일 맨 아래에 아래와 같은 코드를 추가한다.\n\nautoload -U add-zsh-hook\nload-nvmrc() {\n  local node_version=\"$(nvm version)\"\n  local nvmrc_path=\"$(nvm_find_nvmrc)\"\n\n  if [ -n \"$nvmrc_path\" ]; then\n    local nvmrc_node_version=$(nvm version \"$(cat \"${nvmrc_path}\")\")\n\n    if [ \"$nvmrc_node_version\" = \"N/A\" ]; then\n      nvm install\n    elif [ \"$nvmrc_node_version\" != \"$node_version\" ]; then\n      nvm use\n    fi\n  elif [ \"$node_version\" != \"$(nvm version default)\" ]; then\n    echo \"Reverting to nvm default version\"\n    nvm use default\n  fi\n}\nadd-zsh-hook chpwd load-nvmrc\nload-nvmrc\n\n터미널 경로에 .nvmrc 파일이 있다면 해당 프로젝트에서 사용하는 노드 버전으로 자동 전환(설치 포함)된다.\n\n출처: https://github.com/nvm-sh/nvm#zsh [https://github.com/nvm-sh/nvm#zsh]\n\n\n\n참고로 MacOS는 카탈리나 이후부터 기본 쉘을 bash에서 zsh로 전환했습니다.\n\n\nONLY VSCODE TERMINAL?\n\nif [ \"$TERM_PROGRAM\" = \"vscode\" ]\nthen\n  # https://github.com/nvm-sh/nvm#zsh\n  autoload -U add-zsh-hook\n  load-nvmrc() {\n    local node_version=\"$(nvm version)\"\n    local nvmrc_path=\"$(nvm_find_nvmrc)\"\n\n    if [ -n \"$nvmrc_path\" ]; then\n      local nvmrc_node_version=$(nvm version \"$(cat \"${nvmrc_path}\")\")\n\n      if [ \"$nvmrc_node_version\" = \"N/A\" ]; then\n        nvm install\n      elif [ \"$nvmrc_node_version\" != \"$node_version\" ]; then\n        nvm use\n      fi\n    elif [ \"$node_version\" != \"$(nvm version default)\" ]; then\n      echo \"Reverting to nvm default version\"\n      nvm use default\n    fi\n  }\n  add-zsh-hook chpwd load-nvmrc\n  load-nvmrc\nfi",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109702171"
  },
  {
    "pageContent": "zsh cd multiple dots\n\nzsh에서는 cd ../../../../ 대신 cd ..... 으로 대체가 가능하다. dot 하나당 ../ 가 생긴다고 보면 된다.\n\n모르는 사람들 많을것 같아서 팁\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2668527940"
  },
  {
    "pageContent": "GitHub 알림 수신 메일 설정하기\n\nEcube Labs 에서 발급받은 회사 메일 계정(@ecubelabs.com)으로 GitHub 알림을 받으려면 다음과 같이 GitHub 계정에서\n설정해주어야 합니다.\n\n 1. Settings > Personal settings 하위 Emails 진입.\n 2. Add email address 에 회사 메일 계정을 입력 후 추가.\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/125009959/1.png?api=v2]\n 3. Email address verification 메일이 해당 계정으로 전송됩니다. Verify 진행.\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/125009959/2.png?api=v2]\n 4. Settings > Personal settings 하위 Notification 진입.\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/125009959/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-03-20%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.12.23.png?api=v2]\n 5. Custom routing 에서 Ecube-Labs organization 설정을 수정합니다: 회사 메일 계정으로 변경.\n    [https://ecubelabs.atlassian.net/wiki/download/attachments/125009959/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-03-20%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.13.56.png?api=v2]\n 6. Ecube-Labs organization 에 귀속된 repository 에서 발생하는 알림은 회사 메일 계정으로 수신되게 됩니다.\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/125009959"
  },
  {
    "pageContent": "편리한 git alias\n~/.gitconfig\n\n[alias]\n        dd = !git checkout develop && git pull origin develop && git merge - && git push origin develop && git checkout -\n        showlog = log --pretty=format:\\\"%C(yellow)%h%Creset %Cblue%ad%Creset %Cgreen%an%Creset %s%Cred%d%Creset\\\" --date=iso --graph\n        pullrecent = !git remote update && git pull origin `git branch --show-current`\n        mm = !git checkout master && git pull origin master && git checkout - && git merge master\n\n위의 내용대로 ~/.gitconfig 를 추가하면 다음과 같은 명령을 사용할 수 있다.\n\ngit mm\n\ngit mm\n\n * merge master into CURRENT-BRANCH\n * 현재 브랜치에서 master 브랜치 풀 받아서 현재 브랜치로 머지\n\ngit dd\n\n * merge CURRENT-BRANCH into develop\n * 현재 브랜치를 develop 브랜치에 머지",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165282370"
  },
  {
    "pageContent": "Oh Shit, Git!?!\n\nhttps://ohshitgit.com [https://ohshitgit.com]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2467659822"
  },
  {
    "pageContent": "vscode - Mac 터미널에서 vs code 열기\n\nhttps://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal\n[https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/123240741/vscode-cli.gif?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/123240741"
  },
  {
    "pageContent": "vscode - Jest extension\n\nvscode에 Jest extension은 다음과 같은 기능을 제공한다.\n\n\n\n\n각 테스트가 실패했는지 성공했는지 시각적으로 보여 준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/166003108/messageImage_1560850341590.jpg?api=v2]\n\n\n\n\n해당 프로젝트의 테스트가 전체적으로 성공했는지 하단 상태창에 표시한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/166003108/messageImage_1560850377713.jpg?api=v2]\n\n\n\n\n코드 변경시, distinct time 이 지날때마다 테스트를 계속하기 때문에 vscode가 좀 느려진다는 단점이 있지만, 상당히 편리한\nextension 이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/166003108"
  },
  {
    "pageContent": "vscode - 정규식을 이용해서 찾기 바꾸기\n\n\n\n * 서론\n * 하고 싶은 거\n * 방법\n * 결과\n\n\n\n\n서론\n\n정규식을 이용하여 규칙이 있는 찾기 바꾸기를 위한 방법이다.\n\n\n\n정규식을 이용하기 위해서는 맨 오른쪽에 .* 를 눌러서 활성화 시켜야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/237044373/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-13%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.02.25.png?api=v2]\n\n\n\n\n하고 싶은 거\n\n전\n\n{default as ???}\n\n\n\n후 ( 양쪽에 띄어쓰기 추가)\n\n{ default as ??? }\n\n\n\n\n\n\n방법\n\n위처럼 변경하고 싶다고 해보자. 그러면 우리는 정규식을 이용해서 할 수 있다.\n\n정규식 표현중에 하나인 \\w 를 이용해보자.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/237044373/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-13%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.59.17.png?api=v2]\n\n그러면 위에 처럼 정규식에 일치하는 것을 찾을 수 있다. 그 다음 바꾸기 하기 위해서 $0, $1, $2 .. 을 이용할 것이다.\n\n$0은 전체 일치하는 부분을 보여주고, $1은 괄호 안에 있는 것을 보여준다. 괄호가 2개면 $1 $2 이용할 수 있다.\n\n\n\n$0일 때\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/237044373/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-13%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.01.35.png?api=v2]\n\n$1일 때\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/237044373/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-13%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.01.40.png?api=v2]\n\n그러면 우리가 원하는 방식으로 하고 싶으면 $1을 이용하면 된다.\n\n\n\n\n결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/237044373/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-13%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.01.06.png?api=v2]\n\n\n\n\n\n\n\nps. 예전에 쓴거 같은데 어디있는지 안보인다. 예전에는 vim 매크로를 이용해서 쓴거 같기도..?\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/237044373"
  },
  {
    "pageContent": "vscode - 멀티 커서 이용하기 1\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/238583825/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-15%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.58.38.png?api=v2]\n\n위 처럼 여러 파일을 써야 한다고 해보자.\n\n지금은 10개지만 50개 100개라고 쳐보자… 물론 하나씩 입력하면 큰 문제가 안되지만, 리팩토링을 해서 해당 파일을 만들어야 한다고\n가정해보자. 하나씩 입력하기에는 너무 많고 실수할수도 있다.\n\n\n\n그래서!! 멀티 커서를 이용해보려고 한다.\n\n\n\n--------------------------------------------------------------------------------\n\n\n\nsrc/app/screens/common 에 보면 해당 폴더들이 있을것이다. (또는 파일)\n\n\n\n일단 터미널에서 `ls -l` 명령어를 이용해서 목록을 받아오도록 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/238583825/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-15%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.01.10.png?api=v2]\n\n그다음 드래그로 index.ts에 복사한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/238583825/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-15%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.01.54.png?api=v2]\n\n이제 다중 포커스를 이용할 차례이다. option + ⇧ 를 누르고 드래그를 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/238583825/m1.gif?api=v2]\n\n위에 방식이 잘 작동하는가?\n\n\n\n그러면.. 이제는 평소에 하던 것 처럼 수정하면 된다. ( index.ts는 지우도록 )\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/238583825/m3.gif?api=v2]\n\n(웃음)\n[https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/smile.png]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/238583825"
  },
  {
    "pageContent": "11 Useful VSCode Keyboard Shortcuts\n\nhttps://semicolon.dev/tutorial/vscode/keyboard-shortcuts#vscode\n[https://semicolon.dev/tutorial/vscode/keyboard-shortcuts#vscode]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1724219458"
  },
  {
    "pageContent": "vscode - thunder client\n\n만약 포스트맨을 쓰고 있다면 이 익스텐션이 좋은 대체제가 될 수 있어 보입니다.\n\nhttps://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client\n[https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client]\n\n포스트맨에서 지원하는 거의 모든 문법이나 기능(환경변수 등)을 지원하면서 훨씬 가볍고, vscode를 벗어나지 않고 해결할 수 있기 때문에\n편리합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1789329489/image-20210511-063421.png?api=v2]\n\n * https://github.com/rangav/thunder-client-support\n   [https://github.com/rangav/thunder-client-support]\n   \n   * 시스템 변수를 이용하면 랜덤으로 원하는 형식의 값을 생성할 수 있습니다.\n     \n     * {{#guid}}: 랜덤으로 uuid를 생성해서 전달\n       \n       [https://ecubelabs.atlassian.net/wiki/download/attachments/1789329489/2024-01-24%20at%2010.55.16@2x.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1789329489/2024-01-24%20at%2010.55.52@2x.png?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1789329489"
  },
  {
    "pageContent": "vscode - Refactoring\n\nhttps://code.visualstudio.com/docs/editor/refactoring\n[https://code.visualstudio.com/docs/editor/refactoring]\n\n\nRENAME SYMBOL F2\n\n동일한 레퍼런스를 참조하는 모든 이름을 변경해줍니다.\n(정확히 레퍼런스를 따지는게 아니지만 설명의 편의를 위해…)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1985282065/image-20210630-063741.png?api=v2]\n\n파일에서 참조하는 이름만 바꿀수 있기도 하고 몇가지 기능을 포함하는데 직접 사용해보고 익혀보세요.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1985282065"
  },
  {
    "pageContent": "vscode - 제목 또는 내용으로 파일 찾기\n\n\n제목으로 파일 찾기\n\n⌘P를 눌러 해당 워크스페이스 내에서 파일 제목을 검색하여 원하는 파일을 열 수 있습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2036531348/image-20210715-061224.png?api=v2]\n\n\n내용으로 파일 찾기\n\n⌘⇧F를 눌러 해당 워크스페이스 내에서 원하는 내용을 검색하여 해당 내용을 포함하는 파일들을 찾을 수 있습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2036531348/image-20210715-061615.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2036531348"
  },
  {
    "pageContent": "vscode - 컴포넌트 Code snippet 추가\n\n아래처럼 코드 스니펫을 추가하면 nc 라는 키워드로 새 컴포넌트에 대한 템플릿을 만들수 있습니다.\n\n\n글로벌 설정 방법\n\n 1. 커맨드 팔레트 열기\n\n 2. 사용자 코드 조각 구성 선택\n\n 3. typescriptreact 선택\n\n 4. 파일 내용 붙여넣기\n    \n    {\n      \"New Component\": {\n        \"prefix\": \"nc\",\n        \"body\": [\n          \"function ${1:$TM_FILENAME_BASE}(props: { ${2} }) {\",\n          \"  // prop destruction\",\n          \"  // lib, style hooks\",\n          \"  // state, ref hooks\",\n          \"  // formik\",\n          \"  // query hooks\",\n          \"  // calculated values\",\n          \"  // effects\",\n          \"  // handlers\",\n          \"  $0\",\n          \"}\"\n        ],\n        \"description\": \"New Component\"\n      }\n    }\n\n\n프로젝트 설정 방법\n\n 1. .vscode/원하는이름.code-snippets 파일을 생성한다.\n\n 2. 파일 내용 붙여넣기 (위랑 다르니 주의)\n    \n    {\n    \t\"New Component\": {\n    \t\"scope\": \"typescriptreact\",\n    \t\"prefix\": \"nc\",\n    \t\"body\": [\n    \t\t\"function ${1:$TM_FILENAME_BASE}(props: { ${2} }) {\",\n    \t\t\"  // prop destruction\",\n    \t\t\"  // lib, style hooks\",\n    \t\t\"  // state, ref hooks\",\n    \t\t\"  // formik\",\n    \t\t\"  // query hooks\",\n    \t\t\"  // calculated values\",\n    \t\t\"  // effects\",\n    \t\t\"  // handlers\",\n    \t\t\"  $0\",\n    \t\t\"}\"\n    \t],\n    \t\"description\": \"New Component\"\n    \t}\n    }\n\n 3. 저장\n\nhttp://gitignore.io [http://gitignore.io]에서 생성한 gitignore로 파일 내용을 업데이트 해야한다.\n\n * https://github.com/github/gitignore/pull/3916\n   [https://github.com/github/gitignore/pull/3916]\n\n * https://github.com/toptal/gitignore/pull/412\n   [https://github.com/toptal/gitignore/pull/412]\n\n모두 병합되어 뭘 참조해도 code snippet 파일이 무시되지 않는다.\n\n\n사용 예\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2111504399/2021-08-21%2015-20-08.2021-08-21%2015_25_14.gif?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2111504399"
  },
  {
    "pageContent": "vscode - (Git)선택 범위 코드 스테이징\n\n기존에 SourceTree같은 GUI 프로그램을 사용했다면 편리하게 사용했을수도 있는 기능이다.\n\n한 파일에 다양한 목적의 변경사항이 섞여있다면 원하는 부분만 드래그해서 선택한 범위만 스테이징으로 올릴수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2186674177/image-20211006-090910.png?api=v2]\n\n히스토리 관리를 철저하게 할 수 있어 매우 편리하다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2186674177"
  },
  {
    "pageContent": "xcode - simulator 초기화\n\n\n\n우연히 예전에 만든 것을 발견하여 공유!\n\n\n\n시뮬레이터, 빌드 데이터로 인해 용량을 계속 잡아 먹는데 초기화 하는 코드이다.\n\n\n\nxcode-clean.sh\n[https://github.com/niklasberglund/xcode-clean.sh/blob/master/xcode-clean.sh]\n\n\n\n#!/bin/sh\n\ntext_magenta=$(tput setaf 5)\ntext_bold=$(tput bold)\ntext_normal=$(tput sgr0)\n\narchives_path=~/\"Library/Developer/Xcode/Archives\"\nderived_data_path=~/\"Library/Developer/Xcode/DerivedData\"\nsimulator_data_path=~/\"Library/Developer/CoreSimulator/Devices\"\ndevice_support_path=~/\"Library/Developer/Xcode/iOS DeviceSupport\"\n\nremove_archives=false\nremove_derived_data=false\nremove_device_support=false\nremove_simulator_data=false\n\nbackup_dsyms=false\ndsym_backup_path=\"\"\ndry_run=false\n\nremove_contents() {\n    arg_path=$1\n    arg_name=$2\n    arg_flag_name=$3\n    \n    size=$(du -hcs \"$arg_path\" | tail -1 | cut -f1 | xargs)\n    \n    if $dry_run; then\n        printf \"Clearing $arg_name($arg_flag_name flag) in ${arg_path}/* would free up ${text_bold}${size}${text_normal} disk space\\n\"\n    else\n        printf \"Clearing $arg_name in ${arg_path}/* (freeing ${text_bold}${size}${text_normal} disk space)\\n\"\n        rm -Rf \"$arg_path\"/*\n    fi\n}\n\ndo_dsym_backup() {\n    backup_path=$1\n    \n    cd \"$archives_path\"\n    \n    { find . -name \"dSYMs\" -exec printf '%s\\0' {} + | while IFS= read -ru3 -d '' file; do\n      dsym_backup_file \"$file\"; done 3<&0 <&4 4<&-; } 4<&0\n}\n\ndsym_backup_file() {\n    path=$1\n    absolute_path=\"${archives_path}/${path}\"\n    output_path=\"${backup_path}/${path}\"\n    output_path=$(dirname \"$output_path\")\n    \n    if $dry_run; then\n        printf \"Back up $absolute_path to $output_path\\n\"\n    else    \n        cd \"$archives_path\"\n        printf \"Backing up $absolute_path to $output_path \\n\"\n        mkdir -p \"$output_path\" # Create dir(s) if it doesn't exist\n        cp -R \"$absolute_path\" \"$output_path\"\n    fi\n}\n\nusage() {\ncat << EOF\nUsage: $0 [options]\nFrees up disk space by removing Xcode data. NOTE: you might want to keep backups of the dSYM files in ~/Library/Developer/Xcode/Archives\nEXAMPLE:\n    $0 -A\nOPTIONS:\n   -h           Show this help message\n   -b [path]    Backup dSYM files to specified path before removing archives\n   -a           Removed all Xcode archives\n   -d           Remove everything in DerivedData folder\n   -D           Remove everything in DeviceSupport folder\n   -s           Remove simulator data\n   -A           Remove all of the above(archived, DerivedData and simulator data)\n   --dry-run    Dry run mode prints which directories would be cleared but don't remove any files\nEOF\n}\n\nwhile getopts \"hadDsAb:-:\" OPTION\ndo\n    case $OPTION in\n    -)\n        case \"${OPTARG}\" in\n            dry-run)\n                value=\"${!OPTIND}\"; OPTIND=$(( $OPTIND + 1 ))\n                dry_run=true\n                ;;\n            *)\n                if [ \"$OPTERR\" = 1 ] && [ \"${optspec:0:1}\" != \":\" ]; then\n                    usage\n                    exit 1\n                    #echo \"Unknown option --${OPTARG}\" >&2\n                fi\n                ;;\n        esac;;\n    h)\n        usage\n        exit 0\n        ;;\n    a)\n        remove_archives=true\n        ;;\n    d)\n        remove_derived_data=true\n        ;;\n    D)\n        remove_device_support=true\n        ;;\n    s)\n        remove_simulator_data=true\n        ;;\n    A)\n        remove_archives=true\n        remove_derived_data=true\n        remove_device_support=true\n        remove_simulator_data=true\n        ;;\n    b)\n        backup_dsyms=true\n        dsym_backup_path=\"$OPTARG\"\n        ;;\n    \\?)\n        usage\n        exit 1\n        ;;\n    esac\ndone\n\nif $dry_run; then\n    printf \"${text_magenta}Running in dry run mode. No files will be removed.${text_normal}\\n\"\nfi\n\nif $backup_dsyms; then\n    do_dsym_backup \"$dsym_backup_path\"\nfi\n\nif $remove_archives; then\n    remove_contents \"$archives_path\" \"archives\" \"-a\"\nfi\n\nif $remove_derived_data; then\n    remove_contents \"$derived_data_path\" \"DerivedData content\" \"-d\"\nfi\n\nif $remove_device_support; then\n    remove_contents \"$device_support_path\" \"iOS DeviceSupport content\" \"-D\"\nfi\n\nif $remove_simulator_data; then\n    remove_contents \"$simulator_data_path\" \"simulator data\" \"-s\"\nfi\n\n\n\n\n\n\noh my zsh 쓴다면 ~/.zshrc에 아래와 같은 코드를 넣어서 편리하게 사용할 수도 있다.\n\n( 안쓴다면 아마 .profile 이나 .bashrc에 넣으면 될것이다.)\n\n\n\n\n\nalias xcode_clean_all='/$[YOUR_PATH]/xcode-clean.sh -A'\nalias xcode_close_apps='/$[YOUR_PATH]/close-apps.sh'\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/238518412"
  },
  {
    "pageContent": "xcode - ui test 한번에 하기\n\n\n\n시뮬레이터로 하나씩 검사하기 귀찮을 때가 있을 것이다.\n\n아래와 같은 명령어를 사용하면 한번에 할 수 있다.\n\n\n\nxcodebuild test -scheme MyApp \\ -destination \"plaform=iOS,name=iPhone 8\" \\ -destination \"platform=iOS,name=iPhone 8 Plus\"\n\n\n\nUI 테스트를 통해서 flow, 이벤트, View 등 점검이 가능하다. 또한 화면 해상도에 따라서 어떻게 보이는지 한번에 볼수도 있다.\n\n( http://iosres.com/ [http://iosres.com/] 를 통해서 iOS 해상도를 확인할 수 있다. Logical\nresolution 값이 다른 것만 추가해서 확인하면 된다. )\n\n * A라는 버튼이 있는가?\n\n * A버튼 색깔이 빨간색인가?\n\n * A버튼을 누르면 B 화면으로 가는가?\n\n * B화면에서 입력중일 때, C의 컬러가 변경되는가 ?\n\n * A → B → C ->D 순서대로 화면이 정상적으로 이동하는가?\n\n * iPhoneX에서는 A버튼이 보이는가?\n\n * 등\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241238282"
  },
  {
    "pageContent": "Xcode - Simulator 위치, 지역, 언어 변경\n\n위치, 지역, 언어를 바꿔 테스트해야 하는 경우 참고한다.\n\n\n위치 테스트\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2061959173/image-20210727-012238.png?api=v2]\n\n상단 옵션 Features- Location 에서 내 위치를 변경할 수 있다.\n\n * Current Location\n\n * City Run\n\n * City Bicycle Ride\n\n * Freeway Drive\n\n\n지역, 언어 변경\n\n1. Edit Scheme 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2061959173/image-20210727-013904.png?api=v2]\n\n\n\n2. Options탭을 선택하고 원하는 지역, 언어 변경\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2061959173/image-20210727-013807.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2061959173"
  },
  {
    "pageContent": "Xcode - Simulator FPS 개선\n\n\n1. SIMULATOR 실행\n\n\n\n\n2. PREFER DISCRETE GPU 설정\n\nFile - GPU Selection - Prefer Discrete GPU 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2284388493/image-20211220-021545.png?api=v2]\n\n\n\n\n3. 시뮬레이터 재실행\n\n\n\n\n관련글\n\n * https://www.reddit.com/r/FlutterDev/comments/eegbxh/flutter_pro_tip_prefer_discrete_gpu_for_smoother/\n   [https://www.reddit.com/r/FlutterDev/comments/eegbxh/flutter_pro_tip_prefer_discrete_gpu_for_smoother/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284388493"
  },
  {
    "pageContent": "Tips > Android Studio\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2253946881"
  },
  {
    "pageContent": "에뮬레이터 won’t run without Google Play services 에러\n\n구글 플레이 서비스 관련 제품들은 서비스가 활성화되어 있는 환경에서만 테스트 가능하다. 그렇지 않으면 아래 에러가 발생한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283274394/image-20211119-051426.png?api=v2]\n\n구글 플레이 서비스 활성화 여부는 AVD manager 에서 확인할 수 있다. 내가 사용하고 있는 기기에 Play Store 아이콘이 표시된다면\n활성화 되어 있는 것이다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283274394/image-20211119-052154.png?api=v2]\n\n\n해결\n\n\n1. SDK MANAGER 에서 SDK PLATFORM 설치할 때 GOOGLE APIS, GOOGLE PLAY 체크하고 설치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283274394/image-20211119-052024.png?api=v2]\n\n\n2. 새로운 가상 기기 생성\n\nPlayStore 지원 기기 모델 선택\n\nGoogle Play 지원 이미지 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283274394/image-20211119-053056.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2283274394/image-20211119-053116.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2283274394"
  },
  {
    "pageContent": "에뮬레이터 올바르지 않은 로컬 타임존 문제\n\n\n증상\n\nPC와 에뮬레이터의 로컬 타임존이 일치하지 않음\n\n\n해결\n\n 1. 실행하고 있던 에뮬레이터 종료\n\n 2. AVD 매니저 - Wipe Data 실행\n\n 3. 에뮬레이터 시작\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283602083/image-20211217-103103.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2283602083"
  },
  {
    "pageContent": "Tips > 크롬에 Wiki, Jira 검색엔진 추가\n * Wiki 검색엔진 추가\n * Wiki 검색엔진 테스트\n * Jira 검색엔진 추가\n\n\nWIKI 검색엔진 추가\n\n크롬 설정 > Search engine > Manage search engines\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/538870403/image-20200429-060840.png?api=v2]\n\n\n\nOther search engines > Add\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/538870403/image-20200429-060914.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/538870403/image-20200429-060956.png?api=v2]\n\n * Search engine\n   \n   * 검색엔진 이름\n   \n   * 아무값이나 입력해도 됨\n\n * Keyword\n   \n   * 검색엔진 단축어(?)\n   \n   * 자신에게 편리한 아무 단어를 입력하면 됨\n\n * URL with …\n   \n   * https://ecubelabs.atlassian.net/wiki/search?text=%s\n   \n   * 위의 값 그대로 입력\n\n\nWIKI 검색엔진 테스트\n\n크롬 주소창에 wiki(위에서 입력한 Keyword)를 입력하고 스페이스를 누르면 다음과 같이 Search ${Search engine} 이라고\n나온다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/538870403/image-20200429-061600.png?api=v2]\n\n검색어를 입력하고 엔터치면 위키에서 검색을 수행한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/538870403/image-20200429-061738.png?api=v2]\n\n\nJIRA 검색엔진 추가\n\nURL with … 로\nhttps://ecubelabs.atlassian.net/secure/QuickSearch.jspa?searchString=%s값을 사용하면\n되고 나머지 과정은 동일하다.\n\n아래처럼 활용할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/538870403/2021-08-27%2014-52-32.2021-08-27%2014_53_29.gif?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/538870403"
  },
  {
    "pageContent": "Tips > Chrome Dev Tools\n * Simulate slow network\n\n\nSIMULATE SLOW NETWORK\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2021457943/simulate_slow_network.gif?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2021457943"
  },
  {
    "pageContent": "Tips > React Developer Tools\n * Highlight updates when components render\n * Find components by their names\n\n\nHIGHLIGHT UPDATES WHEN COMPONENTS RENDER\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1100546563/image-20201213-071531.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1100546563/highlight-updates-when-components-render.gif?api=v2]\n\n\n\n\nFIND COMPONENTS BY THEIR NAMES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1100546563/image-20210304-083751.png?api=v2]\n\n * props, state 확인 가능",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1100546563"
  },
  {
    "pageContent": "[Low code] Retool\n\n\nFEATURES\n\n\nSSO 지원\n\n이큡 사용자는 아무나 들어와서 자유롭게 보고 수정 할 수 있다\n\n\n다양한 데이터 저장소 이용 가능\n\nREST API부터 해서 대부분의 RDB, NoSQL, 지라나 구글 스프레드시트같은 외부 솔루션의 데이터까지 모두 사용이 가능하다.\n\n\n데이터 하드코딩(?)\n\n별 다른 데이터 저장소 없이 직접 컴포넌트에 넣어서 렌더링되도록 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2521989123/image-20220824-053325.png?api=v2]\n\n\n데이터베이스 연동\n\n미리 등록해 둔 데이터베이스에서 쿼리를 생성하고, 쿼리한 데이터를 아래와 같이 컴포넌트에서 사용할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2521989123/image-20220824-053400.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2521989123/image-20220825-080349.png?api=v2]\n\n\n\n\n컴포넌트 이벤트 핸들링\n\n컴포넌트에서 지원하는 트리거에 의해 API 호출같은 이벤트 핸들링을 할 수 있다.\n\n\n모듈(컴포넌트의 집합을 지칭) 지원\n\n컴포넌트의 집합을 별도의 모듈로 묶어서 만들수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2521989123/image-20220825-043101.png?api=v2]\n\n\n\n\n화면 변경사항 자동 기록\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2521989123/image-20220825-042741.png?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2521989123"
  },
  {
    "pageContent": "[No code] Glide\n\n비교적 누구나 간단하게 구성 가능하지만 기능이 그만큼 풍부하진 않다.\n\n근데 뭔가 만들어내는 도구인 만큼 기능을 모르면 쉽지 않다…\n\n\nFEATURES\n\n\n사용자 초대\n\n초대 링크를 보내주거나, 메일로 초대를 보낼 수 있다.\n\nSSO는 안되는것 같다.\n\n\n몇 가지의 데이터 저장소 지원\n\nretool과 비교하면 훨씬 적지만 충분해보인다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2522873895/image-20220825-081059.png?api=v2]\n\n\n데이터 입력\n\nno code 도구이기 때문에 하드코딩이 아닌 엑셀처럼 UI를 조작하여 데이터를 입력할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2522873895/image-20220825-081849.png?api=v2]\n\n간단한 프로토타이핑에는 문제 없는 수준\n\n\n\n이 외에는 모두 retool보다 기능이 부족하거나 없다.\n\n\nRESTRICTIONS\n\n\nUI 구성 제약이 크다.\n\n네비게이션 타입은 두개밖에 없고, 없앨수도 없다.\n\n제플린에 있는 UI를 그대로 적용하는 수준은 절대 불가능 하다.\n\nContainer 안에 Container를 넣어 컴포넌트들을 Stacking하여 배치하는게 불가능하다.\n\n컴포넌트를 조합해 새로운 컴포넌트를 만드는것도 불가능하다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2522873895"
  },
  {
    "pageContent": "[No code] Bubble.io\n\n거의 대부분 되는데 러닝 커브가 좀 있는 편. 그러나 튜토리얼 아주 잘 되어있음.\n\n유료이며 지원되지 않는 컴포넌트가 많은데 돈 주고 설치해서 쓸 수 있다.\n아니면 직접 플러그인 개발해서 추가해야 할 듯…\n\n\nFEATURES\n\n\n데이터 저장소 지원\n\n외부 저장소를 참조할 수 는 없지만 테이블 구성을 자유롭게 할 수 있다.\n\n\nREUSABLE ELEMENTS 지원\n\n컴포넌트를 조합해 새로운 컴포넌트를 만들어 사용할 수 있다.\n\n\n데이터 입력 가능\n\nApp data를 직접 지정할 수 있다.\n\n\n이벤트 핸들링 지원\n\nWorkflow 라는 이름으로 조건 별 액션을 지정할 수 있다.\n\n상당히 자유로운 편\n\n\nRESTRICTIONS\n\n외부 데이터 저장소를 참조할 수 없음\n\n돈…\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2522546216"
  },
  {
    "pageContent": "Tips > DataGrip > 접속 설정\n\n\nTUNNEL 세팅\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2635202645/image-20230203-054739.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2635202645/image-20230203-054706.png?api=v2]\n\nAutentication type을 아래처럼 해야 동작하는 경우도 있다.\n\nOpenSSH config and authentication agent\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2635202645/CleanShot%202023-10-16%20at%2013.12.25@2x.png?api=v2]\n\n\nGENERAL 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2635202645/image-20230203-054729.png?api=v2]\n\n * Driver로 Amazon Aurora Mysql를 선택해야 접속이된다.\n\n\n\n--------------------------------------------------------------------------------\n\n\nTROUBLESHOOTING\n\n * DataGrip은 ssh 를 터미널 세션에서 직접 실행하는게 아니고 ssh-agent를 통해 명령을 수행하므로 모든 설정이 정상인데도\n   안된다면 ssh-agent가 문제일 수 있다.\n   \n   * 터미널에 ssh-agent 입력해서 에이전트 실행중인지 확인\n   \n   * ssh-add -L 입력해서 에이전트에 키가 등록된게 있는지 확인\n   \n   * 만약 없다면 ssh-add ~/.ssh/id_rsa 입력해서 에이전트에 키 추가 (자신이 사용하는 키를 입력하면 됨)\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635202645"
  },
  {
    "pageContent": "Tips > DataGrip > Database diagrams\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2635399228/image-20230203-054937.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2635399228/image-20230203-055122.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2635399228"
  },
  {
    "pageContent": "2023 4Q\n\n * 장점\n   \n   * 작년과 같이 좋다.\n   \n   * 더 나아진걸 굳이 꼽아보자면 업무에 방해되지 않는 선에서 분위기가 좀 더 풀어진 것 같아서 좋다.\n   \n   * 이사 후 사무실이 멋있어서 좋다.\n   \n   * 서로 존중하는 코드리뷰 문화와 자유로운 연차 제도\n   \n   * 다들 자신의 일에 대해 책임감을 가지고 진행한다.\n   \n   * 서로 기분나쁘지않게 자신이 원하는바를 잘 말하는 것 같다. 이전보다 대화를 많이하는 것 같아 좋다.\n   \n   * 새로운 시도를 할 수 있는 환경이다.\n   \n   * 자유롭게 질문하고 대화할 수 있는 문화이다.\n   \n   * 팀원 모두 맡은 일에 책임감을 가지고 하셔서 좋다.\n\n * 단점\n   \n   * 팀 내 소통이 별로 없는거 같다.\n\n * 바라는 점\n   \n   * 다른 회사에서 경력을 어느정도 쌓으신 분들이 더 와서 여러가지 새로운 인사이트를 더 주면 좋겠다.\n   \n   * 팀원들이 일 외적으로도 이것저것 많이 관심을 가지면서 더 공유를 많이해주면 좋겠다.\n   \n   * 종종 해커톤 같은 걸 해도 재밌을거 같다.\n   \n   * 좀 더 친하게 지내면 좋겠다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2908913790"
  },
  {
    "pageContent": "2023 1Q\n\n * 장점\n   \n   * 다들 소통이 많아진 것 같아 좋습니다.\n   \n   * 서로 모르는점을 물어볼때 자세히 알려주어 좋습니다.\n   \n   * 팀원분들이 친절합니다.\n   \n   * 자유로운 분위기.\n   \n   * 소통이 많아져서 좋은 것 같습니다.\n   \n   * 문화\n   \n   * Copilot 짱짱맨\n   \n   * 업무가 더 체계적으로 바뀌는 중인 것 같습니다.\n   \n   * 의견 내는것에 허들이 낮다.\n   \n   * 요구하면 왠만하면 들어준다.\n\n * 단점\n   \n   * 딱히 생각나는게 없습니다.\n   \n   * 위키에 좀 더 신경 쓸 필요가 있을 것 같습니다. 위키를 봐도 특정 도메인에 대해 이해하기가 어렵습니다. (물론 저희 팀만의 문제는\n     아닌 것 같습니다.)\n   \n   * 딱히 잘 모르겠다\n   \n   * 사업팀이 가끔 너무 시끄러울때가 있습니다.\n   \n   * 아직 시행착오가 필요한 것 같습니다.\n   \n   * 단체 활동이 적은 편인 것 같습니다.\n\n * 바라는 점\n   \n   * 좀더 서로가 하는일에 대해 공유가 자주 되면 좋을 것 같습니다. -> 스쿼드로 나눠진 후 든 생각\n   \n   * 신입분들 오시면 잘 챙겨주셨으면 좋겠습니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2714009639"
  },
  {
    "pageContent": "2022 2Q\n\n * 장점\n   \n   * 필요한 일만 효율적으로 하기 위해 노력하는게 보입니다\n   \n   * 자유로운 분위기\n   \n   * 착한 팀원들\n   \n   * 최신형 맥북\n   \n   * 여러가지 개발 지식을 얻을 수 있어서 좋습니다\n   \n   * 코드리뷰를 자세하게 잘 해주신다\n   \n   * 최근 분위기가 꽤나 밝아진 것 같습니다\n   \n   * 의견 표현이 자유로워서 좋습니다\n   \n   * 자유로운 분위기\n   \n   * 개발에 집중할 수 있는 환경\n   \n   * 코드 리뷰 문화\n   \n   * 사람들이 친절합니다\n   \n   * 팀 분위기가 좋습니다\n   \n   * 인원이 늘어나서 좋습니다\n\n * 단점\n   \n   * 많이 조용하다\n   \n   * 가끔 업무들이 병목현상(?)처럼 막힐 때가 있습니다.\n   \n   * 아직 친해지지 않은 팀원이 있어서 아쉽습니다.\n   \n   * 문서 찾아보는게 좀 힘듭니다. 검색해서 못찾으면 어느 카테고리부터 뒤져야할지 막막. 정리가 필요해보입니다.\n\n * 바라는 점\n   \n   * 다들 새로운 정보를 더 많이 접하고 공유하고 재미있게 개발하면 좋겠습니다\n   \n   * 지금처럼 유지되면 좋겠습니다\n   \n   * 머지가 조금 더 빨리 되면 좋겠습니다\n   \n   * 면접 상황 공유 한번 해주시면 좋을 것 같습니다\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2485256277"
  },
  {
    "pageContent": "2022 1Q\n\n * 장점\n   \n   * 역할 분배가 잘 이루어지고 있는 것 같아 만족스럽다.\n   \n   * 자유로운 분위기와 배울 게 많아서 좋다.\n   \n   * 업무시간에 무슨 일을 하던지 자유롭다.\n   \n   * 코드 리뷰 시 다들 자기 주관을 가지고 해주고 서로 의견을 많이 나눌 수 있어 좋다. 물어보면 다들 친절하게 대답 해 준다.\n   \n   * 질문에 친절히 답변해주는 팀원들.\n   \n   * 개발 교육 지원 [도서 구입 및 온라인 강의 구입].\n   \n   * 새로운 지식 공유 [사내 위키 업데이트 해주시는 분들 모두 감사합니다].\n   \n   * 새로운 기술 [패키지] 적용에 관대함.\n   \n   * 수평적인 분위기 - 코드 리뷰 문화 - 새로운 제안이 유연하게 받아들여진다.\n   \n   * 장비지원(맥북, 모니터)에 대한 빠른 피드백.\n\n * 단점\n   \n   * 새로운 프로젝트 개발때 기획이 거의 없다고 느꼈음.\n   \n   * 프로젝트 진행 방향, 이슈 우선 순위가 바뀌는 배경 등이 좀 더 공유가 되면 좋겠다.\n   \n   * 팀원 모두 함께 회식을 해보지 못해서 아쉽다.\n   \n   * 리뷰가 끝났음에도 업데이트 없이 방치되고 있는 PR들이 있음.\n   \n   * 코드 리뷰를 제외하면 서로 소통을 하지 않는 것 같다.\n   \n   * 너무 조용함.\n\n * 바라는 점\n   \n   * 다 같이 지금보다 더 많은 역할을 가지고 개발할 수 있으면 행복할 것 같다.\n   \n   * 이슈가 몰릴 때는 몰리고 없을 때는 없을 때가 있어서 분배돼서 할당되면 좋겠다.\n   \n   * 회식 하면 좋겠다.\n   \n   * 무언가를 해야할 때 이유를 조금만 더 자세히 알려주면 좋을 것 같다.\n   \n   * 서로 이야기하는 시간이 가끔 있으면 좋을 것 같다.\n   \n   * 가끔 맨션으로 찰리를 태그하고 질문을 해도 피드백이 늦거나 안 오는 경우가 종종 있는데 바쁘겠지만 더 빠른 피드백이 왔으면 한다.\n     (아니면 라인으로 물어보는 게 더 빠른지에 대한 궁금증이 있음)\n   \n   * 찰리가 프로젝트 관리, 개발자 교육, 타 부서와 소통까지 하느라 바쁜 건 알지만, 개발 시 궁금한 부분을 물어보면 하루 안에는 반응을\n     해주면 좋겠다. 만약 좀 더 고민하고 확인해야 하는 부분이면 \"좀 더 고민해보고 다시 알려주겠습니다.\" 이렇게라도 반응을 해주면\n     좋겠다.\n\n\n\n회식?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2393604137/image-20220418-085712.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2393604137/image-20220418-085642.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2393604137"
  },
  {
    "pageContent": "2021-10-29 SW팀 만족도 조사\n * 장점\n * 단점\n * 바라는 점\n\n\n장점\n\n * 자유로운 분위기\n\n * 일을 하면서 배울 것이 많습니다.\n\n * 워라밸이 좋습니다.\n\n * 풀스택 경험이 좋습니다.\n\n * 업무상 다양한 경험 가능\n\n * 수평적인 분위기, 잘 정리된 위키 문서\n\n * 위키로 문서가 정리되어 있어 참고하기 좋다\n\n * 일에 집중할 수 있는 환경\n\n * 정보 공유하는 위키 문화\n\n * 훌륭한 인프라(?)\n\n * 집중이잘되는 조용한 분위기, 맛난 회식\n\n * 개발업무만 집중적으로 할 수 있다. (개발 외의 일들이 거의 없음)\n\n * 데브톡이 있어서 새로운 지식을 얻을 수 있다.\n\n * 배울게 많다\n\n\n단점\n\n * 중간 연차 개발자가 부족하다.\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     여러분이 크면 됩니다.\n\n * 장비지원(사망직전모니터, 이륙직전맥북)\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 모니터 교체 완료\n     \n     * 맥북 M1 Pro 나오면 교체 예정\n\n * 위키가 작성되어 있는 것은 좋은데 카테고리나 분류가 복잡해 찾아보기가 힘들다.\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 맞습니다.\n     \n     * 위키는 다 같이 만드는 겁니다.\n\n * 팀원들을 믿고 일을 맡긴다고 생각되지 않는다.\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * ??? 쪽지 부탁드립니다.\n\n\n바라는 점\n\n * 모니터는 27인치 QHD를 기본으로 지급 받았으면 좋겠습니다.\n\n * 개발팀 세션이 너무 조용해서 말을 해야 할 때 신경쓰입니다. 모두 동의한다면 사업팀 쪽처럼 백색 소음을 적당히 틀어두면 어떨까요?\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 조사 예정\n\n * 캘린더를 확인해보면 신규 인원이 들어왔을 때 기존 팀원과 coffee chat 시간을 짧게 갖는 팀이 있는 것으로 보입니다.\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 위드 코로나 시대에 회식을 좀 더 늘리도록 하겠습니다.\n\n * 개발팀도 인원 변동이 나름 잦고 업무적으로 얽히지 않는 인원이 있는 만큼, 팀 차원에서 정기적인 친목 시간을 가질 수 있으면 좋겠습니다.\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 위와 같음\n\n * 혹시 여유가 된다면 개인 책상을 스탠딩 겸용 데스크로 교체하는 것을 고려해주시면 좋겠습니다.\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 패스트파이브 책상을 쓰기 때문에 적어도 1년은 불가합니다.\n\n * 너무 조용해서 모두가 동의한다면 작게라도 노래를 틀면 좋겠다\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 중복\n\n * 인터넷 강의 결제 (계정 공유?...)\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 듣고 싶은 거 알려주시면 공용 계정 만들어서 결제 하도록 하겠습니다.\n\n * 선택적 재택\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 션이 안된다고 했음. 저번 월간 회의 때…\n\n * 신입 분들오면 소그룹으로 커피 타임?\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 다른팀 신입 사원을 말하는 건지… 그렇다면 arrange 해드리겠습니다.\n\n * 쓰지 않는 모니터들 정리\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 교체 완료\n     \n     * 나머지는 다 폐기\n\n * 홀라를 하시는 분도 ccn을 해보고 ccn을 하시는 분도 홀라를 해볼 수 있는 기회(?) 같은게 있었으면 좋겠습니다. 단점까진 아니고\n   기회가 된다면 두 프로젝트를 다 경험해보고 싶어서 적었습니다. 찰리가 팀원들에게 관심을 많이 가져주시는 것 같아서 좋습니다.\n\n * 찰리도 많은걸 관리, 유지, 개선하느라 힘들겠지만 팀원이 못미더워도 일을 맡겨주었으면 좋겠다. 누군가 일을 맡게 되어도 모자란 모습을 보일\n   때 부정적으로 바라보지 않고 더 좋은 길을 갈 수 있게 바로잡아주는 역할이라면 지금보다 많은 욕심과 책임감을 가질수 있을것 같다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2243657749"
  },
  {
    "pageContent": "2021-05-27 SW팀 만족도 조사\n * 장점\n * 단점\n * 바라는 점\n\n\n장점\n\n작성중\n\n\n단점\n\n * 소통 부족\n   \n   * 친해지기 어려움\n   \n   * 다른이 어떤 일 하는지 잘 모르겠음\n   \n   * 분위기가 무거움\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     어떻게 해야 하지?\n\n * 사양 낮은 맥북\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     맥북 M1X 혹은 M2 출시 상황 봐서 하반기에 단계적으로 교체 예정\n\n * 업무 프로세스에 애매한 부분이 있음\n   \n   * 불분명한 부분이 있음\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     에게 바로 문의\n\n * 불분명한 R&R 로 동기부여가 안 됨\n   \n   * 비즈니스에 관한 문서화 부족\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     기능 분석 (new)\n     [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/1854341152/new]\n\n\n바라는 점\n\n * SW팀 회식\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     코로나 때문에 전체 회식은 당연히 안되고 인원 나눠서 진행 예정\n\n * SW팀 세션 (like Haulla session presented by Charles, Min)\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     어떤 주제로?\n\n * 주석의 적극 적인 활용\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     \n     * 주석은 잘못 달면 고치기 힘듬 (PR 올려야 하기 때문) → outdated 될 가능성이 매우 높음\n     \n     * 주석이 필요 없는 코드가 best\n       \n       * let count (오류)\n         [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/error.png]\n       \n       * let numberOfUnassigedVehicles (tick)\n         [https://ecubelabs.atlassian.net/wiki/s/417386969/6452/6d51c36b8214055e3f7a2c32741588f0d7c80bed/_/images/icons/emoticons/check.png]\n     \n     * 간단한 건 주석에 남겨도 되지만 장황한 설명이 필요한 경우 위키에 자세히 설명하고 링크를 주석으로 남기는 방향이 더 좋음\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1859026958"
  },
  {
    "pageContent": "Hype Driven Development - 설레발 주도 개발\n\n\n[https://lazygyu.net/images/blog/1-_ZxvohNQOdpxeQUFDtzz7Q.png_1490772674.png]\n\n[https://ecubelabs.atlassian.net/wiki/s/-305139487/6452/09b635b71043ebb5c892ae11355d3b80b189991f/1000.0.20/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] lazygyu.net/blog/hype_driven_…\n[https://lazygyu.net/blog/hype_driven_development]\n\n> 이 글은 Hype Driven Development 를 번역한 글입니다.\n\n연결 열기 [https://lazygyu.net/blog/hype_driven_development]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/108855615"
  },
  {
    "pageContent": "LDAP 프토토콜 맛보기\n\nLink medium.com/happyprogrammer-in…\n[https://medium.com/happyprogrammer-in-jeju/ldap-%ED%94%84%ED%86%A0%ED%86%A0%EC%BD%9C-%EB%A7%9B%EB%B3%B4%EA%B8%B0-15b53c6a6f26]\nDate 1월 20, 2019\n\n\n[https://cdn-images-1.medium.com/max/1200/1*2XA8Jq5ByfDh_wm_FWhVyw.jpeg]\n\n[https://medium.com/favicon.ico] medium.com/happyprogrammer-in…\n[https://medium.com/happyprogrammer-in-jeju/ldap-%ED%94%84%ED%86%A0%ED%86%A0%EC%BD%9C-%EB%A7%9B%EB%B3%B4%EA%B8%B0-15b53c6a6f26]\n\n> 업무로 LDAP 서버를 만들게 됐습니다. 잘 만들어진 라이브러리를 가져다 쓰든, 아니면 이미 만들어진 LDAP 서버를 조금 수정해서 쓰든,\n> 아니면 심지어 직접 바닥부터 만들어 쓰든지 기본적으로는 LDAP 프로토콜의 기본적인 내용을 이해해야 하겠기에…\n\n연결 열기\n[https://medium.com/happyprogrammer-in-jeju/ldap-%ED%94%84%ED%86%A0%ED%86%A0%EC%BD%9C-%EB%A7%9B%EB%B3%B4%EA%B8%B0-15b53c6a6f26]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/112787460"
  },
  {
    "pageContent": "2018년 이후 JS의 동향\n\nLink d2.naver.com/helloworld/56443… [https://d2.naver.com/helloworld/5644368]\nDate 1월 20, 2019\n\n[https://d2.naver.com/favicon.ico] d2.naver.com/helloworld/56443…\n[https://d2.naver.com/helloworld/5644368]\n\nNo link preview available. Please open the link for details.\n\n연결 열기 [https://d2.naver.com/helloworld/5644368]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/112722036"
  },
  {
    "pageContent": "3개월 차 주니어가 느끼는 나와 시니어의 차이\n\nLink zeniuus.github.io/2019/02/06/…\n[https://zeniuus.github.io/2019/02/06/difference-between-junior-and-senior/]\nDate Feb 28, 2019\n\n[https://zeniuus.github.io/images/favicon.png] zeniuus.github.io/2019/02/06/…\n[https://zeniuus.github.io/2019/02/06/difference-between-junior-and-senior/]\n\n> Suhwan Jee's blog\n\nOpen link\n[https://zeniuus.github.io/2019/02/06/difference-between-junior-and-senior/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/119440766"
  },
  {
    "pageContent": "프로그래머로서의 성장을 도왔던 태도들\n\nLink ahnheejong.name/articles/beco…\n[https://ahnheejong.name/articles/becoming-better-programmer/] Date Feb 28, 2019\n\n\n[https://ahnheejong.name/assets/og.png]\n\n[https://ecubelabs.atlassian.net/wiki/s/1840829047/6452/66d809417017801199259332ee2908f1dfb9ab68/1000.0.26/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] ahnheejong.name/articles/beco…\n[https://ahnheejong.name/articles/becoming-better-programmer/]\n\n> 저를 더 나은 프로그래머로 만들어 주었던 태도들에 대해 이야기합니다.\n\nOpen link [https://ahnheejong.name/articles/becoming-better-programmer/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/119408042"
  },
  {
    "pageContent": "READTREND: A Free, bi-Weekly Email Newsletter - by @nanhapark\n\nLink readtrend.com/ [http://readtrend.com/] Date 2월 28, 2019\n\n[http://readtrend.com/favicon.ico] readtrend.com/ [http://readtrend.com/]\n\n> 이 사이트를 통해 IT 기술트렌드를 읽으세요. twitter 에서 @nanhapark 아이디로 활동하고 있으며, 매일 새로운 내용을 가지고\n> 있는 사이트를 제공하는 허브역할을 수행하겠습니다. 감사합니다.\n\n연결 열기 [http://readtrend.com/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/119440789"
  },
  {
    "pageContent": "RxMarbles: Interactive diagrams of Rx Observables\n\nLink rxmarbles.com/ [https://rxmarbles.com/] Date 3월 18, 2019\n\n[https://ecubelabs.atlassian.net/wiki/s/1106310230/6452/528329b9d70c0a189e94cb63bc907d4a8e28d210/1000.0.27/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] rxmarbles.com/\n[https://rxmarbles.com/]\n\n> Learn, build, and test Rx functions on Observables\n\n연결 열기 [https://rxmarbles.com/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/123502708"
  },
  {
    "pageContent": "확장성 높은 앵귤러 프로젝트 폴더 구조 만들기\n\nLink itnext.io/choosing-a-highly-s…\n[https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7]\nDate 3월 18, 2019\n\n\n[https://cdn-images-1.medium.com/max/1200/1*xKHp_rhoFSLOJ3NEZWVr1Q@2x.jpeg]\n\n[https://itnext.io/favicon.ico] itnext.io/choosing-a-highly-s…\n[https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7]\n\n> Update! The code for this article is now available at GitHub. You can view the\n> project here The structure is slightly different from the…\n\n연결 열기\n[https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/123502723"
  },
  {
    "pageContent": "당신은 모를 수도 있는 CSS의 7가지 단위\n\nLink webdesign.tutsplus.com/ko/art…\n[https://webdesign.tutsplus.com/ko/articles/7-css-units-you-might-not-know-about--cms-22573]\nDate 4월 08, 2019\n\n\n[https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/preview_image/ruler.png]\n\n[https://static.tutsplus.com/assets/favicon-9e8b377989d9949ad1003dc5298cd8ef.png] webdesign.tutsplus.com/ko/art…\n[https://webdesign.tutsplus.com/ko/articles/7-css-units-you-might-not-know-about--cms-22573]\n\n> 우리가 잘 알고 있는 CSS기술을 사용하는 것은 쉽고 간단하지만 새로운 문제에 맞닥드리면 해결하기 어려워집니다. 웹은 항상 성장하고 있고,\n> 새로운 해결법 역시 계속 성장하고 있습니다. 그러므로, 웹 디자이너와 프론트 엔드 개발자로서 우리의 노하우를 활용할 수 밖에 없다는 것을 잘\n> 알고 있습니다. 우리의 특별한 방법을 알면서, 단 한 번도...\n\n연결 열기\n[https://webdesign.tutsplus.com/ko/articles/7-css-units-you-might-not-know-about--cms-22573]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/136413960"
  },
  {
    "pageContent": "종합 안내: Rem 그리고 Em, 언제 써야 할까\n\nLink webdesign.tutsplus.com/ko/tut…\n[https://webdesign.tutsplus.com/ko/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984]\nDate 4월 08, 2019\n\n\n[https://cms-assets.tutsplus.com/uploads/users/30/posts/23984/preview_image/rem.png]\n\n[https://static.tutsplus.com/assets/favicon-9e8b377989d9949ad1003dc5298cd8ef.png] webdesign.tutsplus.com/ko/tut…\n[https://webdesign.tutsplus.com/ko/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984]\n\n> 여러분은 아마 좀 더 유연한 측정 단위의 사용을 고려해 보신 적이 있으셨을 겁니다. 그런데 언제 rem 단위를 쓰고, 또 언제 em을 쓸\n> 것인지 아직 완전하게 이해하지 못하셨다면, 이번에 확실하게 안내해 드리겠습니다! em과 rem 모두 길이가 유연한 가변 단위로서, 디자인에\n> 설정된 폰트 크기에 따라 브라우저에 의해 픽셀값으로 변환됩니다....\n\n연결 열기\n[https://webdesign.tutsplus.com/ko/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/136512236"
  },
  {
    "pageContent": "flexbox로 만들 수 있는 10가지 레이아웃\n\nLink d2.naver.com/helloworld/85401… [https://d2.naver.com/helloworld/8540176]\nDate 4월 08, 2019\n\n[https://d2.naver.com/favicon.ico] d2.naver.com/helloworld/85401…\n[https://d2.naver.com/helloworld/8540176]\n\nNo link preview available. Please open the link for details.\n\n연결 열기 [https://d2.naver.com/helloworld/8540176]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/136512284"
  },
  {
    "pageContent": "프로그래머가 빠지기 쉬운 함정\n\nLink lee-seungjae.github.io/Progra…\n[http://lee-seungjae.github.io/ProgrammersCommonPitfall.html] Date 5월 08, 2019\n\n[https://ecubelabs.atlassian.net/wiki/s/-243541261/6452/aabf1ee3d29d855360b4dd32e58cca45c02e9faf/1000.0.27/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] lee-seungjae.github.io/Progra…\n[http://lee-seungjae.github.io/ProgrammersCommonPitfall.html]\n\nNo link preview available. Please open the link for details.\n\n연결 열기 [http://lee-seungjae.github.io/ProgrammersCommonPitfall.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/146767950"
  },
  {
    "pageContent": "RxJS, Reactive Programming - Animations and visual lessons\n\nLink reactive.how/ [https://reactive.how/] Date 5월 09, 2019\n\n\n[http://reactive.how/img/content_preview.jpg]\n\n[https://ecubelabs.atlassian.net/wiki/s/-937237248/6452/98902f4c0cc30dd70f0aeeece56cb1f23b515ecd/1000.0.27/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] reactive.how/\n[https://reactive.how/]\n\n> Learn RxJS operators and Reactive Programming principles.\n\n연결 열기 [https://reactive.how/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/147292588"
  },
  {
    "pageContent": "KOREA DevOps meetup '19 발표자료\n\nLink meetup.devopskorea.com/201906…\n[http://meetup.devopskorea.com/201906/#_schedule] Date 6월 19, 2019\n\n\n[http://meetup.devopskorea.com/201906/img/icon.png]\n\n[https://ecubelabs.atlassian.net/wiki/s/767696327/6452/bef0b073cbd8e01db2cba2658edf0c5b1e7d8e70/1000.0.35/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] meetup.devopskorea.com/201906…\n[http://meetup.devopskorea.com/201906/#_schedule]\n\n> KOREA DevOps Meetup은 DevOps Korea Group이 주관하고 개최하는 비영리 컨퍼런스입니다. 데브옵스는 애플리케이션과\n> 서비스를 빠른 속도로 제공할 수 있도록 조직의 역량을 향상시키는 문화 철학, 방식 및 도구의 조합입니다.\n\n연결 열기 [http://meetup.devopskorea.com/201906/#_schedule]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/166592555"
  },
  {
    "pageContent": "SQL 트랜잭션 - 믿는 도끼에 발등 찍힌다\n\nLink blog.sapzil.org/2017/04/01/do…\n[https://blog.sapzil.org/2017/04/01/do-not-trust-sql-transaction/] Date 7월 15,\n2019\n\n[https://blog.sapzil.org/public/favicon.ico] blog.sapzil.org/2017/04/01/do…\n[https://blog.sapzil.org/2017/04/01/do-not-trust-sql-transaction/]\n\n> RDBMS를 쓰는 이유 중 하나는 트랜잭션입니다. 하지만 RDBMS의 트랜잭션을 너무 믿다가는 깜짝 놀랄 일이 벌어질 수도 있습니다.\n\n연결 열기 [https://blog.sapzil.org/2017/04/01/do-not-trust-sql-transaction/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/175964416"
  },
  {
    "pageContent": "좋은 git commit 메시지를 위한 영어 사전\n\nLink blog.ull.im/engineering/2019/…\n[https://blog.ull.im/engineering/2019/03/10/logs-on-git.html] Date Aug 18, 2019\n\n\n[https://blog.ull.im/assets/logo.png]\n\n[https://blog.ull.im/assets/icons/favicon.ico] blog.ull.im/engineering/2019/…\n[https://blog.ull.im/engineering/2019/03/10/logs-on-git.html]\n\n> 골치아픈 이름 짓기\n\nOpen link [https://blog.ull.im/engineering/2019/03/10/logs-on-git.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/196706576"
  },
  {
    "pageContent": "'When to useMemo and useCallback' 를 읽고\n\nLink rinae.dev/posts/review-when-t…\n[https://rinae.dev/posts/review-when-to-usememo-and-usecallback] Date 8월 19,\n2019\n\n\n[/static/blog-og-default-image-5552222ab35236bbadee1bc32ef610f3.png]\n\n[https://rinae.dev/icons/icon-48x48.png?v=f55bdf8628729bfb4634fdf60f97c609] rinae.dev/posts/review-when-t…\n[https://rinae.dev/posts/review-when-to-usememo-and-usecallback]\n\n> Kent C. Dodds의 'When to useMemo and useCallback' 을 읽고 복습한 개념 정리\n\n연결 열기 [https://rinae.dev/posts/review-when-to-usememo-and-usecallback]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/196903098"
  },
  {
    "pageContent": "Lodash를 import할 때 bundle size를 줄이기 위해서는?\n\nLink www.blazemeter.com/blog/the-c…\n[https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark/]\nDate 8월 22, 2019\n\n\n[/new_images/blazemeter-logo-small.jpg]\n\n[https://storage.googleapis.com/website-dev-images/sites/default/files/favicon.png] www.blazemeter.com/blog/the-c…\n[https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark/]\n\n> Using Lodash? This benchmark will show you tried and true results for\n> optimizing your code when importing Lodash libraries. The best way to use\n> Lodash functions\n\n연결 열기\n[https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/198901869"
  },
  {
    "pageContent": "Node.js의 순환 의존성 :: Outsider's Dev Story\n\nLink blog.outsider.ne.kr/1283 [https://blog.outsider.ne.kr/1283] Date Sep 18,\n2019\n\n\n[http://blog.outsider.ne.kr/skin/blog/anti_verbose/images/title-image.jpg]\n\n[https://blog.outsider.ne.kr/favicon.ico] blog.outsider.ne.kr/1283\n[https://blog.outsider.ne.kr/1283]\n\n> 코드를 모듈화해서 작성하다 보면 서로 간에 의존성을 갖게 되는데 이러다 보면 순환 의존성을 가질 수 있다. A 파일이 B를 참조하는데 B\n> 파일이 다시 A 파일을 참조할 수 있고 좀 더 복잡하게는 의도치 않게 A가...\n\nOpen link [https://blog.outsider.ne.kr/1283]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/210993391"
  },
  {
    "pageContent": "[번역] 초보 프론트엔드 개발자들을 위한 Pub-Sub(Publish-Subscribe) 패턴을 알아보기\n\nLink rinae.dev/posts/why-every-beg…\n[https://rinae.dev/posts/why-every-beginner-front-end-developer-should-know-publish-subscribe-pattern-kr]\nDate 9월 30, 2019\n\n\n[https://images.unsplash.com/photo-1524678606370-a47ad25cb82a?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=64a7f5e870e2c0286c20c3f8e5572927&auto=format&fit=crop&w=1953&q=80]\n\n[https://rinae.dev/icons/icon-48x48.png?v=f55bdf8628729bfb4634fdf60f97c609] rinae.dev/posts/why-every-beg…\n[https://rinae.dev/posts/why-every-beginner-front-end-developer-should-know-publish-subscribe-pattern-kr]\n\n> 비동기 자바스크립트 코드를 덜 괴롭게 이해하는 방법\n\n연결 열기\n[https://rinae.dev/posts/why-every-beginner-front-end-developer-should-know-publish-subscribe-pattern-kr]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/214892922"
  },
  {
    "pageContent": "일상이 되어가는 일일회의\n\nLink\n\ngreatkim91.tistory.com/164 [https://greatkim91.tistory.com/164]\n\nDate\n\n10월 29, 2019\n\n[https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F18575B154CD7D42F19]\n\n[https://ecubelabs.atlassian.net/wiki/s/605119302/6452/84649d9bf86c7fd2a56a48b0f5c12e3f0055436e/1000.0.47/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] greatkim91.tistory.com/164\n[https://greatkim91.tistory.com/164]\n\n> 우리팀에서 일일회의를 시작한지도 4년 가까이 되어가고 있습니다. 그동안 잠시 외부 프로젝트 나갔다가 오기도 했고 같이 일하던 팀원들도\n> 교체되기도 했습니다. 그런데 한참 일일회의를 하다보니 어느 순간 이게..\n\n연결 열기 [https://greatkim91.tistory.com/164]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/229015614"
  },
  {
    "pageContent": "Domain Knowledge\n\nLink\n\nokky.kr/article/520776 [https://okky.kr/article/520776]\n\nDate\n\n10월 30, 2019\n\n[//okky.kr/assets/okky_logo_fb-cea175ff727ef14a4d8be0e68cff730a.png]\n\n[https://okky.kr/assets/favicon-4ddd8035b72404da5a8c298cbaacad86.ico] okky.kr/article/520776\n[https://okky.kr/article/520776]\n\n> 소프트웨어 뿐 아니라 대부분의 분야에서, Developer와 End User와의 커뮤니케이션은 쉽지 않습니다. 왜 그럴까요? End\n> User의 도메인 지식 (Domain Knowledge)이 부족하기 때문인데요. 도메인 지식에 대해 간단히 고민해 보았습니다. 물론\n> 소프트웨어 사업 분야에 한정된 것입니다. 1) 조금 넓은 의미로\n\n연결 열기 [https://okky.kr/article/520776]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/231112832"
  },
  {
    "pageContent": "Conditional Types in TypeScript\n\nLink mariusschulz.com/blog/conditi…\n[https://mariusschulz.com/blog/conditional-types-in-typescript] Date 11월 01,\n2019\n\n\n[https://mariusschulz.com/content/images/default-post-preview-image-v2.jpg]\n\n[https://mariusschulz.com/favicon.ico] mariusschulz.com/blog/conditi…\n[https://mariusschulz.com/blog/conditional-types-in-typescript]\n\n> TypeScript 2.8 introduced conditional types, a powerful and exciting addition\n> to the type system.\n\n연결 열기 [https://mariusschulz.com/blog/conditional-types-in-typescript]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/233799689"
  },
  {
    "pageContent": "개발자 머피의 법칙 - 우아한형제들 기술 블로그\n\nLink\n\nwoowabros.github.io/experienc…\n[http://woowabros.github.io/experience/2019/09/19/programmer-murphy-law.html]\n\nDate\n\n12월 03, 2019\n\n[http://www.woowahan.com/wp-content/uploads/2015/04/woowahan_favicon.ico] woowabros.github.io/experienc…\n[http://woowabros.github.io/experience/2019/09/19/programmer-murphy-law.html]\n\n> 안녕하세요, 우아한형제들 광고시스템팀의 손권남입니다.\n\n연결 열기\n[http://woowabros.github.io/experience/2019/09/19/programmer-murphy-law.html]\n\n\n\n긴 글인데 따라가면 좋은 로드맵인 것 같습니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243728949"
  },
  {
    "pageContent": "내가 운영하는 Elasticsearch 클러스터에 얼마나 많은 샤드가 필요할까?\n\nLink\n\nwww.elastic.co/kr/blog/how-ma…\n[https://www.elastic.co/kr/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster]\n\nDate\n\n12월 04, 2019\n\n[https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blta55fe6273ba821f9/5c307b46a253ae3e67bc86df/elasticsearch-sharding-thumbnail.jpg]\n\n[https://www.elastic.co/favicon.ico] www.elastic.co/kr/blog/how-ma…\n[https://www.elastic.co/kr/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster]\n\n> 이 블로그는 여러분의 클러스터에 적합한 인덱스와 샤드의 개수와 크기를 어떻게 가져가야 하는지에 대한 실질적인 가이드라인을 제공합니다.\n\n연결 열기\n[https://www.elastic.co/kr/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/244417226"
  },
  {
    "pageContent": "Message Headers\n\nLink www.iana.org/assignments/mess…\n[http://www.iana.org/assignments/message-headers/message-headers.xhtml] Date 12월\n07, 2019\n\n[http://www.iana.org/favicon.ico] www.iana.org/assignments/mess…\n[http://www.iana.org/assignments/message-headers/message-headers.xhtml]\n\nNo link preview available. Please open the link for details.\n\n연결 열기 [http://www.iana.org/assignments/message-headers/message-headers.xhtml]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/246317222"
  },
  {
    "pageContent": "2019 국내 IT 개발 컨퍼런스 슬라이드/영상 재생목록\n\nLink www.44bits.io/ko/post/replay-…\n[https://www.44bits.io/ko/post/replay-2019-korea-tech-development-conferences]\nDate Dec 24, 2019\n\n\n[https://static.hubtee.com/assets/44bits_logo_2000.png]\n\n[https://ecubelabs.atlassian.net/wiki/plugins/servlet/confluence/placeholder/error?i18nKey=editor.placeholder.broken.image&locale=ko_KR&version=2] www.44bits.io/ko/post/replay-…\n[https://www.44bits.io/ko/post/replay-2019-korea-tech-development-conferences]\n\n> 2019년 한 해 동 다양한 IT/개발 컨퍼런스들이 열렸습니다. 그 중에서 영상으로 다시 보기 가능한 컨퍼런스들을 모았습니다. 44bits\n> 개발 세미나, 파이콘 2019, AWS 서밋 서울, 넥슨 개발자 컨퍼런스, DevOps 밋업, if (kakao) dev, 데뷰 2019\n> 등.\n\nOpen link\n[https://www.44bits.io/ko/post/replay-2019-korea-tech-development-conferences]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/260145330"
  },
  {
    "pageContent": "(번역) React, Inline Functions, and Performance\n\n본문\n\nhttps://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578\n[https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578]\n\n번역본\n\nhttps://medium.com/steady-study/%EB%B2%88%EC%97%AD-react-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%95%A8%EC%88%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%84%B1%EB%8A%A5-9aef85552f2b\n[https://medium.com/steady-study/%EB%B2%88%EC%97%AD-react-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%95%A8%EC%88%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%84%B1%EB%8A%A5-9aef85552f2b]\n\nDate\n\nJan 08, 2020\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/288981352/image-20200108-073820.png?api=v2]\n\n\n\n https://medium.com/steady-study/%EB%B2%88%EC%97%AD-react-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%95%A8%EC%88%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%84%B1%EB%8A%A5-9aef85552f2b\n[https://medium.com/steady-study/%EB%B2%88%EC%97%AD-react-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%95%A8%EC%88%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%84%B1%EB%8A%A5-9aef85552f2b]\n\n> React에서 인라인 함수는 React가 “렌더링\"될 때 정의되는 함수를 말한다. React에서의 “렌더링\"에는 사람들이 종종 헷갈려하는 두\n> 가지 뜻이 있다: (1) 업데이트가 일어났을 때, 컴포넌트의 render 함수를 호출함으로서 React 엘리먼트를 컴포넌트에서 받아오는 것과\n> (2) DOM을 업데이트하는 실제 렌더링. 이 글에서는 “렌더링\"을 (1)의 의미로 사용하겠다.\n\nOpen link\n[https://medium.com/steady-study/%EB%B2%88%EC%97%AD-react-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%95%A8%EC%88%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%84%B1%EB%8A%A5-9aef85552f2b]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/288981352"
  },
  {
    "pageContent": "Five Tips for Working with Redux in Large Applications\n\nLink techblog.appnexus.com/five-ti…\n[https://techblog.appnexus.com/five-tips-for-working-with-redux-in-large-applications-89452af4fdcb]\nDate 1월 20, 2020\n\n\n[https://miro.medium.com/max/1200/0*U2DmhXYumRyXH6X1.png]\n\n[https://techblog.appnexus.com/favicon.ico] techblog.appnexus.com/five-ti…\n[https://techblog.appnexus.com/five-tips-for-working-with-redux-in-large-applications-89452af4fdcb]\n\n> Redux is an excellent tool for managing the “state” of an application. The\n> unidirectional flow of data and the focus on immutable state…\n\n연결 열기\n[https://techblog.appnexus.com/five-tips-for-working-with-redux-in-large-applications-89452af4fdcb]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/314540282"
  },
  {
    "pageContent": "No need to unsubscribe — RxJS operators will help you out\n\nLink medium.com/javascript-everyda…\n[https://medium.com/javascript-everyday/no-need-to-unsubscribe-rxjs-operators-will-help-you-out-f8b8ce7bf26a]\nDate 1월 31, 2020\n\n\n[https://miro.medium.com/max/1200/1*zo3iLIg3lmjYs9vKhQbrdQ.jpeg]\n\n[https://medium.com/favicon.ico] medium.com/javascript-everyda…\n[https://medium.com/javascript-everyday/no-need-to-unsubscribe-rxjs-operators-will-help-you-out-f8b8ce7bf26a]\n\n> Memory leak is undoubtedly a thing that every developer should beware of. When\n> using the RxJS library, it simply means that you have to…\n\n연결 열기\n[https://medium.com/javascript-everyday/no-need-to-unsubscribe-rxjs-operators-will-help-you-out-f8b8ce7bf26a]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336757001"
  },
  {
    "pageContent": "The Best Way To Unsubscribe RxJS Observable In The Angular Applications!\n\nLink medium.com/angular-in-depth/t…\n[https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0]\nDate 1월 31, 2020\n\n\n[https://miro.medium.com/max/1200/1*YGzm0X1JG4k_KDF9pSOi-w.jpeg]\n\n[https://medium.com/favicon.ico] medium.com/angular-in-depth/t…\n[https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0]\n\n> There are many different ways how to handle RxJS subscriptions in Angular\n> applications and we’re going to explore their pros and cons!\n\n연결 열기\n[https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336855258"
  },
  {
    "pageContent": "API 디자인 가이드  |  Cloud API  |  Google Cloud\n\nLink\n\ncloud.google.com/apis/design?… [https://cloud.google.com/apis/design?hl=ko]\n\nDate\n\n2월 10, 2020\n\n[/images/social-icon-google-cloud-1200-630.png]\n\n[https://www.gstatic.com/devrel-devsite/prod/v172e5dffd78b32f4b12f8112b00e940d4993af48229fac5346097b33edb0f543/cloud/images/favicons/onecloud/favicon.ico] cloud.google.com/apis/design?…\n[https://cloud.google.com/apis/design?hl=ko]\n\nNo description available. Please open the link for details.\n\n연결 열기 [https://cloud.google.com/apis/design?hl=ko]\n\n구글 내부에서 쓰이다가 공개된 API 디자인 가이드인데 부분적으로 참고하면 좋을 것 같습니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/357269914"
  },
  {
    "pageContent": "useEffect 완벽 가이드\n\nLink overreacted.io/ko/a-complete-…\n[https://overreacted.io/ko/a-complete-guide-to-useeffect/] Date 2월 28, 2020\n\n[https://overreacted.io/favicon.ico] overreacted.io/ko/a-complete-…\n[https://overreacted.io/ko/a-complete-guide-to-useeffect/]\n\n> 이펙트는 데이터 흐름의 한 부분입니다.\n\n연결 열기 [https://overreacted.io/ko/a-complete-guide-to-useeffect/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/395477285"
  },
  {
    "pageContent": "The Definitive Guide to Handling GraphQL Errors\n\nLink itnext.io/the-definitive-guid…\n[https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1]\nDate 3월 16, 2020\n\n\n[https://miro.medium.com/max/1200/1*zRT0atOgVLyaQa3xYlO54A@2x.jpeg]\n\n[https://itnext.io/favicon.ico] itnext.io/the-definitive-guid…\n[https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1]\n\n> Recently, I screwed up and it resulted in a client getting a white screen when\n> they used our app. Like most apps, we have an initial…\n\n연결 열기\n[https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/428507645"
  },
  {
    "pageContent": "미처 알지 못했던 package-lock.json\n\nLink pewww.tistory.com/11 [https://pewww.tistory.com/11] Date 4월 09, 2020\n\n\n[https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F998EBC435C654FBB31]\n\n[https://pewww.tistory.com/favicon.ico] pewww.tistory.com/11\n[https://pewww.tistory.com/11]\n\n> 나는 왜 이 내용을 글로 쓰는가? 얼마 전에 친구가 package-lock.json에 대해 쉽게 설명을 해달라고 물어보더군요. 하지만,\n> package-lock.json이 어떤 일을 하는지도 모르고, 해당 파일을 발견하면 무조건 지우고..\n\n연결 열기 [https://pewww.tistory.com/11]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/494108678"
  },
  {
    "pageContent": "[번역] 자바스크립트 & 타입스크립트의 순환 참조를 한방에 해결하는 방법\n\nLink\n\nrinae.dev/posts/fix-circular-…\n[https://rinae.dev/posts/fix-circular-dependency-kr]\n\nDate\n\n4월 10, 2020\n\n[/static/blog-og-default-image-5552222ab35236bbadee1bc32ef610f3.png]\n\n[https://rinae.dev/favicon.ico] rinae.dev/posts/fix-circular-…\n[https://rinae.dev/posts/fix-circular-dependency-kr]\n\n> 리내(안도형)의 개발블로그입니다. 좋은 기술 문서 번역을 주력으로 삼고 있습니다. 또한 개인적으로 공부한 내용이나, 모아두었던 글을 공유하고\n> 있습니다.\n\n연결 열기 [https://rinae.dev/posts/fix-circular-dependency-kr]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/496828797"
  },
  {
    "pageContent": "슬랙이 슬랙을 쓰는 방법 (번역) – 이바닥늬우스\n\nLink ebadak.news/2020/04/20/how-sl…\n[https://ebadak.news/2020/04/20/how-slack-use-slack/] Date 5월 07, 2020\n\n\n[https://i2.wp.com/ebadak.news/wp-content/uploads/2020/04/slack.png?fit=850%2C396&ssl=1]\n\n[https://ebadak.news/favicon.ico] ebadak.news/2020/04/20/how-sl…\n[https://ebadak.news/2020/04/20/how-slack-use-slack/]\n\n> 전세계적으로 모든 회사가 재택 근무를 하고 있는 요즘, 온라인 커뮤니케이션 툴을 만드는 슬랙에서는 어떻게 슬랙을 사용하고 있을까요? 슬랙의\n> 최고제품책임자(CPO)가 알려주는 세 가지 팁을 만나보세요.\n\n연결 열기 [https://ebadak.news/2020/04/20/how-slack-use-slack/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/559349957"
  },
  {
    "pageContent": "프론트엔드 개발자는 왜 구하기 어렵나요?\n\nLink taegon.kim/archives/4810 [https://taegon.kim/archives/4810] Date 5월 27,\n2020\n\n\n[https://taegon.kim/wp-content/uploads/2016/11/pexels-photo-90807.jpeg]\n\n[https://ecubelabs.atlassian.net/wiki/s/-1801104419/6452/1c51b4863bd091ba2e87ce4e20515463651c813a/1000.0.70/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] taegon.kim/archives/4810\n[https://taegon.kim/archives/4810]\n\n> Why can't we find Front End developers?를 번역한 글입니다. 저 스스로가 프론트엔드 개발자이기도 해서 재밌는\n> 주제라 옮겨봤습니다. ^^ 어느날 우연히 Quora에서 프론트엔드 엔지니어링과 스타트업에 관련된 “Why is it that startups\n> have trouble finding front end developer…\n\n연결 열기 [https://taegon.kim/archives/4810]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/604569601"
  },
  {
    "pageContent": "로우 레벨로 살펴보는 Node.js 이벤트 루프\n\nLink\n\nevan-moon.github.io/2019/08/0…\n[https://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow/]\n\nDate\n\n6월 19, 2020\n\n[/static/a66907e81a18b740cc994295cd1668d5/14b42/thumbnail.jpg]\n\n[https://evan-moon.github.io/favicon.ico] evan-moon.github.io/2019/08/0…\n[https://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow/]\n\n> 1년 전, 필자는 setImmediate & process.nextTick의 차이점에 대해 설명하면서 Node.js의 이벤트 루프 구조에\n> 대해 살짝 언급한 적이 있었다. 놀랍게도 독자 분들은 원래 설명하려고 했던 부분보다 이벤트 루프 부분에 대해서 더 많이 관심을 주었고,\n> 필자는 그 부분에 대해서 많은 질문을 받았었다. 그래서 이번에는 Node.js의 이벤트 루프를 구성하는 로우 레벨의 동작을 자세하게\n> 설명해보려고 한다.\n\n연결 열기 [https://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/658145397"
  },
  {
    "pageContent": "GitHub Sponsors 로 1.2억원을 번 방법🎉\n\nLink calebporzio.com/i-just-hit-do…\n[https://calebporzio.com/i-just-hit-dollar-100000yr-on-github-sponsors-heres-how-i-did-it]\nDate Jun 26, 2020\n\n[https://calebporzio.com/favicon.ico] calebporzio.com/i-just-hit-do…\n[https://calebporzio.com/i-just-hit-dollar-100000yr-on-github-sponsors-heres-how-i-did-it]\n\n> Caleb Porzio is a web developer.\n\nOpen link\n[https://calebporzio.com/i-just-hit-dollar-100000yr-on-github-sponsors-heres-how-i-did-it]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/671974012"
  },
  {
    "pageContent": "Muzli Search - 디자이너용 검색엔진\n\nLink search.muz.li/ [https://search.muz.li/] Date Jun 26, 2020\n\n\n[https://search.muz.li/assets/images/ogimage.png]\n\n[https://search.muz.li/assets/images/favicon.png] search.muz.li/\n[https://search.muz.li/]\n\n> Search, discover, test and create beautiful color palettes for your projects\n\nOpen link [https://search.muz.li/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/671875575"
  },
  {
    "pageContent": "you-dont-need/You-Dont-Need-Momentjs\n\nLink\n\ngithub.com/you-dont-need/You-…\n[https://github.com/you-dont-need/You-Dont-Need-Momentjs]\n\nDate\n\n7월 16, 2020\n\n[https://avatars1.githubusercontent.com/u/21141794?s=400&v=4]\n\n[https://github.com/favicon.ico] github.com/you-dont-need/You-…\n[https://github.com/you-dont-need/You-Dont-Need-Momentjs]\n\n> List of functions which you can use to replace moment.js + ESLint Plugin -\n> you-dont-need/You-Dont-Need-Momentjs\n\n연결 열기 [https://github.com/you-dont-need/You-Dont-Need-Momentjs]\n\nmoment.js를 피해야 할 이유와 대체재들의 비교 정리가 참 잘 되어있네요.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/726401066"
  },
  {
    "pageContent": "The Evolution of a Software Engineer\n\nLink\n\nmedium.com/@webseanhickey/the…\n[https://medium.com/@webseanhickey/the-evolution-of-a-software-engineer-db854689243]\n\nDate\n\nAug 17, 2020\n\n[https://miro.medium.com/max/600/0*BWbzGkcrgaR0zC3Q.png]\n\n[https://medium.com/favicon.ico] medium.com/@webseanhickey/the…\n[https://medium.com/@webseanhickey/the-evolution-of-a-software-engineer-db854689243]\n\n> On Coming Full Circle\n\nOpen link\n[https://medium.com/@webseanhickey/the-evolution-of-a-software-engineer-db854689243]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/798720178"
  },
  {
    "pageContent": "How They Test\n\nLink\n\nabhivaikar.github.io/howtheyt… [https://abhivaikar.github.io/howtheytest/#/]\n\nDate\n\nSep 09, 2020\n\n[https://abhivaikar.github.io/favicon.ico] abhivaikar.github.io/howtheyt…\n[https://abhivaikar.github.io/howtheytest/#/]\n\n> How They Test - A curated collection of publicly available resources on how\n> software companies around the world test their software systems and build\n> their quality culture.\n\nOpen link [https://abhivaikar.github.io/howtheytest/#/]\n\n * 유명 회사들의 테스트/QA에 관련된 발표자료/테스팅 문화/블로그/비디오 링크 들을 한데 모은 페이지\n\n * Amazon,Airbnb,Atlassian,Dropbox,Facebook,Google,LinkedIn,Shopify,Slack,Spotify\n   등\n\n * 51개 회사 약 450여개의 링크",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/863469644"
  },
  {
    "pageContent": "8 Best Practices for Future-Proofing Your TypeScript Code\n\nLink medium.com/better-programming…\n[https://medium.com/better-programming/8-best-practices-for-future-proofing-your-typescript-code-2600fb7d8063]\nDate 11월 19, 2020\n\n\n[https://miro.medium.com/max/1200/1*T-MkxhRDcCtIAjm5ANRYIQ.jpeg]\n\n[https://medium.com/favicon.ico] medium.com/better-programming…\n[https://medium.com/better-programming/8-best-practices-for-future-proofing-your-typescript-code-2600fb7d8063]\n\n> Make sure your TypeScript code survives the test of time\n\n연결 열기\n[https://medium.com/better-programming/8-best-practices-for-future-proofing-your-typescript-code-2600fb7d8063]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1043234898"
  },
  {
    "pageContent": "Javascript Testing Best Practices\n\nLink github.com/goldbergyoni/javas…\n[https://github.com/goldbergyoni/javascript-testing-best-practices] Date 3월 13,\n2021\n\n\n[https://avatars.githubusercontent.com/u/8571500?s=400&v=4]\n\n[https://github.com/favicon.ico] github.com/goldbergyoni/javas…\n[https://github.com/goldbergyoni/javascript-testing-best-practices]\n\n> 📗🌐 🚢 Comprehensive and exhaustive JavaScript & Node.js testing best\n> practices (January 2021) - goldbergyoni/javascript-testing-best-practices\n\n연결 열기 [https://github.com/goldbergyoni/javascript-testing-best-practices]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1520271416"
  },
  {
    "pageContent": "Awkward Aggregate Root relationships and how to rethink them\n\nLink buildplease.com/pages/on-pape… [https://buildplease.com/pages/on-paper/]\nDate 3월 18, 2021\n\n\n[https://buildplease.com/img/Factory.png]\n\n[https://buildplease.com/favicon.ico] buildplease.com/pages/on-pape…\n[https://buildplease.com/pages/on-paper/]\n\n> I have an Order that can be split into multiple Shipments. A Customer orders\n> Quantity X of Product Y, represented as a single OrderLine with Quantity = X.\n> In order to optimize shipping costs, Quantity X of Product Y is split into Z\n> number of Shipments….\n\n연결 열기 [https://buildplease.com/pages/on-paper/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1545961498"
  },
  {
    "pageContent": "Cold vs Hot Observables\n\nLink blog.thoughtram.io/angular/20…\n[https://blog.thoughtram.io/angular/2016/06/16/cold-vs-hot-observables.html]\nDate 5월 03, 2021\n\n[https://blog.thoughtram.io/icons/icon-48x48.png?v=50794189bf1d1bd3459211725d37e57e] blog.thoughtram.io/angular/20…\n[https://blog.thoughtram.io/angular/2016/06/16/cold-vs-hot-observables.html]\n\n> In this article we are going to demystify what the term hot vs cold means when\n> it comes to Observables.\n\n연결 열기\n[https://blog.thoughtram.io/angular/2016/06/16/cold-vs-hot-observables.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1754988795"
  },
  {
    "pageContent": "KISS (Keep it Simple, Stupid) 원칙\n\nLink www.interaction-design.org/li…\n[https://www.interaction-design.org/literature/article/kiss-keep-it-simple-stupid-a-design-principle]\nDate 5월 11, 2021\n\n\n[https://public-media.interaction-design.org/images/ux-daily/5779324fd8aa2.jpg]\n\n[https://www.interaction-design.org/favicon.ico] www.interaction-design.org/li…\n[https://www.interaction-design.org/literature/article/kiss-keep-it-simple-stupid-a-design-principle]\n\n> It was Albert Einstein who said; “If you can’t explain it, you don’t\n> understand it well enough.” Though it is often mis-reported as being; “If you\n> can’t explain it to a six year old, you don’t underst...\n\n연결 열기\n[https://www.interaction-design.org/literature/article/kiss-keep-it-simple-stupid-a-design-principle]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1788870707"
  },
  {
    "pageContent": "소프트웨어 개발의 3개의 KEY 원칙 : KISS,YAGNI,DRY\n\nLink hongjinhyeon.tistory.com/136 [https://hongjinhyeon.tistory.com/136] Date 5월\n17, 2021\n\n\n[https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F216A403A58DD98FE19]\n\n[https://hongjinhyeon.tistory.com/favicon.ico] hongjinhyeon.tistory.com/136\n[https://hongjinhyeon.tistory.com/136]\n\n> +소프트웨어 책을 몇권 읽다보니 자주 언급되고 중복적으로 언급되는 원칙들과 법칙들이 있었습니다. 원칙과 법칙을 간단히 정리해서 2개의\n> 포스트로 나누어서 글을 올립니다. 여기에서는 우선 소프트웨어를 개발..\n\n연결 열기 [https://hongjinhyeon.tistory.com/136]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1803616504"
  },
  {
    "pageContent": "신입 개발자 전공 지식 & 기술 면접 백과사전\n\nLink github.com/gyoogle/tech-inter…\n[https://github.com/gyoogle/tech-interview-for-developer] Date 6월 22, 2021\n\n\n[https://repository-images.githubusercontent.com/190964861/3e52c680-4d1b-11eb-9bcc-e660c2591e9f]\n\n[https://github.com/favicon.ico] github.com/gyoogle/tech-inter…\n[https://github.com/gyoogle/tech-interview-for-developer]\n\n> 👶🏻 신입 개발자 전공 지식 & 기술 면접 백과사전 📖. Contribute to\n> gyoogle/tech-interview-for-developer development by creating an account on\n> GitHub.\n\n연결 열기 [https://github.com/gyoogle/tech-interview-for-developer]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1952284675"
  },
  {
    "pageContent": "훌륭한 프로그래머 되는 법 Part1. You.write(code);\n\nLink www.three-snakes.com/develop/…\n[https://www.three-snakes.com/develop/book/becomming-a-better-programmer/part1#%EC%98%88%EC%83%81%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%83%EC%9D%84-%EC%98%88%EC%83%81%ED%95%98%EA%B8%B0]\nDate 7월 04, 2021\n\n\n[https://www.three-sakes.com/static/photo.jpg]\n\n[https://ecubelabs.atlassian.net/wiki/s/824289746/6452/5198d43cbf42391c7c5b360d1e1684f026789c4b/1000.0.0-5198d43cbf42/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] www.three-snakes.com/develop/…\n[https://www.three-snakes.com/develop/book/becomming-a-better-programmer/part1#%EC%98%88%EC%83%81%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%83%EC%9D%84-%EC%98%88%EC%83%81%ED%95%98%EA%B8%B0]\n\n> [ Part1. You.write(code); ] 부분을 공부하면서 중요하다고 생각한 것을 정리한 페이지이다. 생각보도 읽는데 오래 걸려서\n> 아쉽다.\n\n연결 열기\n[https://www.three-snakes.com/develop/book/becomming-a-better-programmer/part1#%EC%98%88%EC%83%81%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%83%EC%9D%84-%EC%98%88%EC%83%81%ED%95%98%EA%B8%B0]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1998422195"
  },
  {
    "pageContent": "CSS Units Best Practices\n\nLink gist.github.com/basham/2175a1…\n[https://gist.github.com/basham/2175a16ab7c60ce8e001] Date 7월 15, 2021\n\n\n[https://github.githubassets.com/images/modules/gists/gist-og-image.png]\n\n[https://gist.github.com/favicon.ico] gist.github.com/basham/2175a1…\n[https://gist.github.com/basham/2175a16ab7c60ce8e001]\n\n> CSS Units Best Practices. GitHub Gist: instantly share code, notes, and\n> snippets.\n\n연결 열기 [https://gist.github.com/basham/2175a16ab7c60ce8e001]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2039480382"
  },
  {
    "pageContent": "CSS Adventures: Do leading zeros in decimal values matter?\n\nLink hey.georgie.nu/leadingzero/ [https://hey.georgie.nu/leadingzero/] Date 7월\n15, 2021\n\n\n[https://hey.georgie.nuhttps://hey.georgie.nu/wp-content/themes/komodo/images/icon.png]\n\n[https://hey.georgie.nu/wp-content/themes/komodo/images/favicon-g.ico] hey.georgie.nu/leadingzero/\n[https://hey.georgie.nu/leadingzero/]\n\n> I’m pretty big on writing shorthand CSS. At my previous job, I used to point\n> out instances of 0px or 15px 0px 10px 0px and suggest that they be written as\n> simply 0 or 15px 0 10px. As we used a prepr\n\n연결 열기 [https://hey.georgie.nu/leadingzero/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2038956104"
  },
  {
    "pageContent": "JavaScript vs JavaScript. Fight!\n\nLink dev.to/this-is-learning/javas…\n[https://dev.to/this-is-learning/javascript-vs-javascript-fight-53fa] Date 8월\n20, 2021\n\n\n[https://res.cloudinary.com/practicaldev/image/fetch/s--UTz6Gl8r--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05c2l9abib9mhtk89erx.jpeg]\n\n[https://res.cloudinary.com/practicaldev/image/fetch/s--E8ak4Hr1--/c_limit,f_auto,fl_progressive,q_auto,w_32/https://dev-to.s3.us-east-2.amazonaws.com/favicon.ico] dev.to/this-is-learning/javas…\n[https://dev.to/this-is-learning/javascript-vs-javascript-fight-53fa]\n\n> With software development, we are often presented with alternative choices for\n> libraries and tools...\n\n연결 열기 [https://dev.to/this-is-learning/javascript-vs-javascript-fight-53fa]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109472840"
  },
  {
    "pageContent": "The history of “typeof null”\n\nLink 2ality.com/2013/10/typeof-nul…\n[https://2ality.com/2013/10/typeof-null.html] Date 9월 26, 2021\n\n[https://ecubelabs.atlassian.net/wiki/s/1424090559/6452/1d42060145dca756337b5e84769d7b9c1e7d67d5/1000.0.0-1d42060145dc/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] 2ality.com/2013/10/typeof-nul…\n[https://2ality.com/2013/10/typeof-null.html]\n\nNo link preview available. Please open the link for details.\n\n연결 열기 [https://2ality.com/2013/10/typeof-null.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2165211141"
  },
  {
    "pageContent": "Who's Your Coding Buddy?\n\nLink blog.codinghorror.com/whos-yo…\n[https://blog.codinghorror.com/whos-your-coding-buddy/] Date 9월 29, 2021\n\n[https://blog.codinghorror.com/favicon.ico] blog.codinghorror.com/whos-yo…\n[https://blog.codinghorror.com/whos-your-coding-buddy/]\n\n> I am continually amazed how much better my code becomes after I've had a peer\n> look at it. I don't mean a formal review in a meeting room, or making my code\n> open to anonymous public scrutiny on the internet, or some kind of onerous\n> pair programming regime. Just one\n\n연결 열기 [https://blog.codinghorror.com/whos-your-coding-buddy/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2171273254"
  },
  {
    "pageContent": "TDZ을 모른 채 자바스크립트 변수를 사용하지 말라\n\nLink ui.toast.com/weekly-pick/ko_2…\n[https://ui.toast.com/weekly-pick/ko_20191014] Date 10월 11, 2021\n\n[https://ecubelabs.atlassian.net/wiki/s/-387396231/6452/5129a07985a366764595c0f9cf6beb6b6db16338/1000.0.0-5129a07985a3/_/download/resources/com.atlassian.confluence.plugins.confluence-business-blueprints:sharelinks-resources/default-sharelinks-favicon-16.png] ui.toast.com/weekly-pick/ko_2…\n[https://ui.toast.com/weekly-pick/ko_20191014]\n\nNo link preview available. Please open the link for details.\n\n연결 열기 [https://ui.toast.com/weekly-pick/ko_20191014]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2194604033"
  },
  {
    "pageContent": "중국의 어떤 서버 개발자의 디비 설계\n\nLink\n\nblog.naver.com/imays/22146153… [https://blog.naver.com/imays/221461537682]\n\nDate\n\nNov 19, 2021\n\nhttps://blog.naver.com/imays/221461537682\n[https://blog.naver.com/imays/221461537682]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2253717525"
  },
  {
    "pageContent": "The importance of naming in programming | The Man in the Arena\n\nLink carlalexander.ca/importance-n…\n[https://carlalexander.ca/importance-naming-programming/] Date 12월 20, 2021\n\ncarlalexander.ca/importance-n…\n[https://carlalexander.ca/importance-naming-programming/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2285109275"
  },
  {
    "pageContent": "동기와 비동기, 그리고 블럭과 넌블럭\n\nLink musma.github.io/2019/04/17/bl…\n[https://musma.github.io/2019/04/17/blocking-and-synchronous.html] Date 1월 10,\n2022\n\nmusma.github.io/2019/04/17/bl…\n[https://musma.github.io/2019/04/17/blocking-and-synchronous.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302017547"
  },
  {
    "pageContent": "Why we need to abstract dependencies, a real world example with react router\n\nLink\n\nmedium.com/cutting-code/why-w…\n[https://medium.com/cutting-code/why-we-need-to-abstract-dependencies-a-real-world-example-with-react-router-8b06d1540264]\n\nDate\n\nFeb 21, 2022\n\nhttps://medium.com/cutting-code/why-we-need-to-abstract-dependencies-a-real-world-example-with-react-router-8b06d1540264\n[https://medium.com/cutting-code/why-we-need-to-abstract-dependencies-a-real-world-example-with-react-router-8b06d1540264]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2341732353"
  },
  {
    "pageContent": "2022년 웹 개발에서 고려해야 할 환경 - LINE ENGINEERING\n\nLink\n\nengineering.linecorp.com/ko/b…\n[https://engineering.linecorp.com/ko/blog/the-baseline-for-web-development-in-2022/]\n\nDate\n\nMar 09, 2022\n\nhttps://engineering.linecorp.com/ko/blog/the-baseline-for-web-development-in-2022/\n[https://engineering.linecorp.com/ko/blog/the-baseline-for-web-development-in-2022/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2356248581"
  },
  {
    "pageContent": "10배 이상 뛰어난 개발자가 되는 법 | 요즘IT\n\nLinkyozm.wishket.com/magazine/det…\n[https://yozm.wishket.com/magazine/detail/1373/?fbclid=IwAR1tp6cYuoCRz8YBvg6657FKyc-QWp-adDyE7X8SarmoAu-Dod7NI9Tc0fg]Date3월\n25, 2022\n\nyozm.wishket.com/magazine/det…\n[https://yozm.wishket.com/magazine/detail/1373/?fbclid=IwAR1tp6cYuoCRz8YBvg6657FKyc-QWp-adDyE7X8SarmoAu-Dod7NI9Tc0fg]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2371518530"
  },
  {
    "pageContent": "To slash or not to slash  |  Google Search Central Blog  |  Google Developers\n\nLink\n\ndevelopers.google.com/search/…\n[https://developers.google.com/search/blog/2010/04/to-slash-or-not-to-slash]\n\nDate\n\nApr 19, 2022\n\nhttps://developers.google.com/search/blog/2010/04/to-slash-or-not-to-slash\n[https://developers.google.com/search/blog/2010/04/to-slash-or-not-to-slash]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2395144201"
  },
  {
    "pageContent": "기획자와의 커뮤니케이션을 좀 잘못하고있었던거같아요.\n\nLinkokky.kr/article/766484 [https://okky.kr/article/766484]Date4월 26, 2022\n\nokky.kr/article/766484 [https://okky.kr/article/766484]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2402156585"
  },
  {
    "pageContent": "Optimize Cumulative Layout Shift (CLS)\n\nLinkweb.dev/optimize-cls/?utm_sou…\n[https://web.dev/optimize-cls/?utm_source=lighthouse&utm_medium=lr#-7]Date5월 02,\n2022\n\nweb.dev/optimize-cls/?utm_sou…\n[https://web.dev/optimize-cls/?utm_source=lighthouse&utm_medium=lr#-7]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2407399434"
  },
  {
    "pageContent": "Stop over-abstracting your React components\n\nLink\n\ntech.groww.in/stop-over-abstr…\n[https://tech.groww.in/stop-over-abstracting-your-react-components-196400210a7a?gi=6db2815689f0]\n\nDate\n\nMay 05, 2022\n\nhttps://tech.groww.in/stop-over-abstracting-your-react-components-196400210a7a?gi=6db2815689f0\n[https://tech.groww.in/stop-over-abstracting-your-react-components-196400210a7a?gi=6db2815689f0]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2409693185"
  },
  {
    "pageContent": "101 Javascript Critical Rendering Path\n\nLinkindepth.dev/posts/1498/101-ja…\n[https://indepth.dev/posts/1498/101-javascript-critical-rendering-path]Date5월\n10, 2022\n\nindepth.dev/posts/1498/101-ja…\n[https://indepth.dev/posts/1498/101-javascript-critical-rendering-path]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2413658115"
  },
  {
    "pageContent": "개발자의 평생공부\n\nLink\n\nzdnet.co.kr/view/?no=20170616… [https://zdnet.co.kr/view/?no=20170616090644]\n\nDate\n\nJun 11, 2022\n\nhttps://zdnet.co.kr/view/?no=20170616090644\n[https://zdnet.co.kr/view/?no=20170616090644]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2444296217"
  },
  {
    "pageContent": "훌륭한 개발 문화의 이면(7) – 잉여력이냐 vs. 효율성이냐\n\nLinkchanny.creation.net/blog/1238 [http://channy.creation.net/blog/1238]Date6월\n24, 2022\n\nchanny.creation.net/blog/1238 [http://channy.creation.net/blog/1238]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2457436223"
  },
  {
    "pageContent": "You Don’t Need A UI Framework — Smashing Magazine\n\nLinkwww.smashingmagazine.com/2022…\n[https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/]Date7월 06,\n2022\n\nwww.smashingmagazine.com/2022…\n[https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2470608905"
  },
  {
    "pageContent": "개발자의 성장 가능성은 어떻게 측정 가능한가?\n\nLinkeuncho.medium.com/%EA%B0%9C%E…\n[https://euncho.medium.com/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%84%B1%EC%9E%A5-%EA%B0%80%EB%8A%A5%EC%84%B1%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B8%A1%EC%A0%95-%EA%B0%80%EB%8A%A5%ED%95%9C%EA%B0%80-238dd3f0f33]Date8월\n10, 2022\n\neuncho.medium.com/%EA%B0%9C%E…\n[https://euncho.medium.com/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%84%B1%EC%9E%A5-%EA%B0%80%EB%8A%A5%EC%84%B1%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B8%A1%EC%A0%95-%EA%B0%80%EB%8A%A5%ED%95%9C%EA%B0%80-238dd3f0f33]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2508718081"
  },
  {
    "pageContent": "Code Review Developer Guide\n\n연결google.github.io/eng-practice…\n[https://google.github.io/eng-practices/review/]날짜3월 20, 2023\n\ngoogle.github.io/eng-practice… [https://google.github.io/eng-practices/review/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2671378628"
  },
  {
    "pageContent": "Landing Pages Explained\n\n연결landingpagesexplained.com/ [https://landingpagesexplained.com/]날짜10월 18, 2023\n\nlandingpagesexplained.com/ [https://landingpagesexplained.com/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2818573045"
  },
  {
    "pageContent": "Google Maps Platform best practices: Optimization and performance tips | Google\nCloud Blog\n\n연결cloud.google.com/blog/product…\n[https://cloud.google.com/blog/products/maps-platform/google-maps-platform-best-practices-optimization-and-performance-tips?hl=en]날짜10월\n19, 2023\n\ncloud.google.com/blog/product…\n[https://cloud.google.com/blog/products/maps-platform/google-maps-platform-best-practices-optimization-and-performance-tips?hl=en]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2819752080"
  },
  {
    "pageContent": "IoT 센서 데이터 플랫폼 구축과 MQTT\n\n연결machbase.com/kr/home/blog/blo…\n[https://machbase.com/kr/home/blog/blog10/]날짜11월 13, 2023\n\nmachbase.com/kr/home/blog/blo… [https://machbase.com/kr/home/blog/blog10/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2834726968"
  },
  {
    "pageContent": "79 Engineering Blogs To Level Up Your System Design Skills\n\n연결blog.bytebytego.com/p/79-engi…\n[https://blog.bytebytego.com/p/79-engineering-blogs-to-level-up?ref=dailydev]날짜12월\n27, 2023\n\nblog.bytebytego.com/p/79-engi…\n[https://blog.bytebytego.com/p/79-engineering-blogs-to-level-up?ref=dailydev]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2867101931"
  },
  {
    "pageContent": "Good Code vs. Bad Code\n\nLink\n\nblog.bytebytego.com/p/good-co…\n[https://blog.bytebytego.com/p/good-code-vs-bad-code]\n\nDate\n\nFeb 19, 2024\n\nhttps://blog.bytebytego.com/p/good-code-vs-bad-code\n[https://blog.bytebytego.com/p/good-code-vs-bad-code]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2910618381"
  },
  {
    "pageContent": "Rate Limit 알고리즘 시각화\n\n연결smudge.ai/blog/ratelimit-algo…\n[https://smudge.ai/blog/ratelimit-algorithms]날짜5월 20, 2024\n\nsmudge.ai/blog/ratelimit-algo… [https://smudge.ai/blog/ratelimit-algorithms]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3010002999"
  },
  {
    "pageContent": "코드를 성급하게 DRY 하지 말자\n\n연결testing.googleblog.com/2024/0…\n[https://testing.googleblog.com/2024/05/dont-dry-your-code-prematurely.html]날짜5월\n31, 2024\n\ntesting.googleblog.com/2024/0…\n[https://testing.googleblog.com/2024/05/dont-dry-your-code-prematurely.html]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3028385818"
  },
  {
    "pageContent": "introduction to algorithms 2020\n\n연결\n\nwww.youtube.com/playlist?list…\n[https://www.youtube.com/playlist?list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY]\n\n날짜\n\n7월 09, 2024\n\nhttps://www.youtube.com/playlist?list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY\n[https://www.youtube.com/playlist?list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3087106121"
  },
  {
    "pageContent": "2023-03-13 제품개발회의\n\n\nTRACKER 주요 고객\n\n * 고양시\n   \n   * 수거는 외부 업체에게 용역을 줌\n   \n   * 유류비 지급을 위해 CCN 에서 운행 총 거리를 중요하게 본다\n\n * 무안군\n   \n   * 직접 수거\n   \n   * 운전자 관리를 위해 중간에 운전자들이 쉬고 있는 것은 아닌지 경로와 시간을 중요하게 본다\n\n\nCGV\n\n * 조만간 팝콘을 큐브에 버리게 될 수도 있다",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2667642968"
  },
  {
    "pageContent": "2022-04-18 제품개발회의\n\n * Rear load truck\n   \n   * https://www.youtube.com/watch?v=9eM9F5ICKOw&t=22s\n     [https://www.youtube.com/watch?v=9eM9F5ICKOw&t=22s]\n\n * Front load truck\n   \n   * https://www.youtube.com/watch?v=LkYqE_--DOs&t=219s\n     [https://www.youtube.com/watch?v=LkYqE_--DOs&t=219s]\n\n[/wiki/download/attachments/2393735187/self-driving-truck.drawio.png?api=v2]\n\n\n\n+ 하울러 웹/CCNx",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2393735187"
  },
  {
    "pageContent": "2022-03-21 제품개발회의\n\n심플리오 [https://simplio-global.com/]로 통신 파트너 교체 검토\n\n * 심플리오 := 보다폰 리셀러\n\n보다폰\n\n심플리오\n\n가격\n\n유심 당 정액\n\nex) 1M 요금제 ($1) 유심 10개 사용 = $10\n\n실제로 1M 안써도 지불해야 함 (정액)\n\n정량\n\n(모든 유심의 데이터 총 사용) * (단위 요금)\n\n결제\n\n후불\n\n선불\n\n[U] USIM 상세 화면\n[https://ecubelabs.atlassian.net/wiki/spaces/ERP/pages/30474282/U+USIM] “Auto\nRegister Vodafone USIM” 관련해서 개발 필요할 듯",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2367062017"
  },
  {
    "pageContent": "2022-02-21 제품개발회의\n\n\nGT\n\nTL;DR\n\n4호기 12대 (예정)\n\n3호기 6대 운영중\n\n1호기 1대 운영중\n\n===\n\n * 4호기 12대 분출 예정\n   \n   * 2022-02-07 제품개발회의\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2328363071/2022-02-07]\n   \n   * 형상: master\n     \n     * RND-362 [https://ecubelabs.atlassian.net/browse/RND-362?src=confmacro]\n\n * 2호기 2대, 3호기 4대 분출\n   \n   * 2021-07-07 회의록 - 제품개발회의\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2013298707/2021-07-07+-]\n   \n   * 2호기의 보드를 3호기와 같은 보드로 교체 → 2호기 === 3호기\n   \n   * 3호기 총 6대로 보면 된다\n   \n   * 다니엘 코멘트: 3호기 6대 모두 스마일Corp 창고에 있는 것으로 보인다\n   \n   * 형상: unknown\n\n * 1호기 6대 분출\n   \n   * 2021-07-07 회의록 - 제품개발회의\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2013298707/2021-07-07+-]\n   \n   * 2대는 본사로 귀환\n   \n   * 다니엘 코멘트: 4대는 스마일Corp 창고에 있는데 그 중 3대는 no battery, 1대만 살아 있는 것으로 보인다\n   \n   * 형상: unknown\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2341601289"
  },
  {
    "pageContent": "2022-02-07 제품개발회의\n\nGT 12대 추가 분출 예정\n\n * 4호기(V5G)\n   \n   * 2021-07-07 회의록 - 제품개발회의\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2013298707/2021-07-07+-]\n     참고",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2328363071"
  },
  {
    "pageContent": "2022-01-24 제품개발회의\n\nHW팀에서 CCB2 compactionTriggeringFillLevel 대응 예정\n\n빈서버는 이미 ERP 에서 설정한 값을 내려주기 때문에 SW팀 대응은 필요 없음\n\nhttps://ecubelabs.atlassian.net/browse/RND-361\n[https://ecubelabs.atlassian.net/browse/RND-361]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2319024137"
  },
  {
    "pageContent": "2021 회의록\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2286223368"
  },
  {
    "pageContent": "2020 회의록\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227568758"
  },
  {
    "pageContent": "2019 회의록\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2174517265"
  },
  {
    "pageContent": "2018 회의록\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109669415"
  },
  {
    "pageContent": "2021-12-21 회의록 - SW팀 회의\n\n\n\n * 평가\n   \n   * 팀장 평가 50%\n   \n   * 피어 리뷰 20%\n     \n     * https://forms.gle/RzMT3e8xzRoMW57Z8 [https://forms.gle/RzMT3e8xzRoMW57Z8]\n   \n   * 개인 KPI 20%\n     \n     * ex)\n       \n       * CFX 에서 측정한 데이터를 실시간으로 스트리밍하기 위한 스파크 파이프라인 구축\n       \n       * 미니카에 라즈베리파이 붙여서 자율주행 시뮬레이션\n   \n   * 탑시트 [https://namu.wiki/w/TOPCIT] 10%\n\n2021-10-29 SW팀 평가 제도 설문 결과\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227536007/2021-10-29+SW]\n\n\n\n * Online courses\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2244018199/Online+courses]\n   \n   * 가능하면 영어\n\n\n\n * 찰리와 점심 (in turn)\n   \n   * 매주 수요일\n   \n   * 일정 안되면 거절하면 됨\n\n\n\n * 일을 하고 싶게 해주는 일에 대한 인정(recognition) 문화\n   \n   * 저희는 업무를 하면서 고마운 동료에게 피어보너스(10만원)를 쏠 수 가 있어요.\n     피어보너스를 받는 사람의 매니저가 승인만 하면 회사 돈으로 10만원을 주는건데,\n     거기에 어떤 부분에 대해 고마운지 작성하게 되어있어요.\n     이걸 받아보니 금전적 부분 말고, 그 내용들에 뿌듯함과 성취감이 들더라구요.\n     이외에도 기본적으로 다들 아무리 작은 성과라도 인정해주고 축하해주는 문화가 있고,\n     이렇게 일을 하면서 받는 인정이 주는 성취감과 만족감이 더 적극적으로 나서고,\n     협업할 수도록 해주는게 아닌가 싶어요.\n   \n   * https://www.teamblind.com/kr/post/%EA%B5%AC%EA%B8%80%EC%BD%94%EB%A6%AC%EC%95%84%EC%97%90%EC%84%9C-%EC%9D%BC%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%8C%EC%A0%90-Ze8W32jb\n     [https://www.teamblind.com/kr/post/%EA%B5%AC%EA%B8%80%EC%BD%94%EB%A6%AC%EC%95%84%EC%97%90%EC%84%9C-%EC%9D%BC%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%8C%EC%A0%90-Ze8W32jb]\n   \n   * 10만원 대신 소정의 상품\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2286157829"
  },
  {
    "pageContent": "2021-12-15 회의록 - 제품개발회의\n\n박명수 (Harrison)\n[https://ecubelabs.atlassian.net/wiki/people/557058:4a657fbc-a36e-471a-8ae6-721f69e38981?ref=confluence]\n\n3G sunset\n\n * 북미 LTE Cat-M1\n\n * 유럽 NB-IoT\n\n * 북미, 유럽 제외하고는 아직 sunset 이슈 없음\n\n\n\nLTE Cat-M1, NB-IoT 모두 CFX-CAM 사진 전송할 만한 대역폭은 된다.\n\n * 사진이 제일 사이즈가 크기 때문에 다른 통신은 크게 문제 없음\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2283503747"
  },
  {
    "pageContent": "2021-10-29 SW팀 평가 제도 설문 결과\n\n모두 최선을 다하고 있으니 똑같이 n% 인상/지급 (5)\n\n이슈처리 및 코드 리뷰는 개발자가 당연히 해야하는 일이라 생각함. n% 인상/지급은 default. 단, DevTalk, 위키 문서 작성, 동료\n평가, AWS 자격증을 추가 KPI로 고려했으면 좋겠음 (1)\n\n입사 1년 미만은 똑같이 인상, 다른 사람들은 그보다 더 많이 인상 (1)\n\n2명씩 짝 지어서 일정 주기(각 분기 or 6개월)마다 각자 업무에 도움이 되는 종류(MSA 같은 아키텍쳐 도입시 필요한 도구, Infra\n도구, 소나큐브같은 코드 품질 개선 위한 도구, 회사에서 사용중인 도구중에 기능이 아쉬운 오픈소스 컨트리뷰트?)로 성장 목표 정하고 팀장이\n현실적인지(업무/회사에 도움 되는 목표가 맞는지, 가능할지, 단계별 진행율 알수 있는지) 검토 후 수락, 얼마나 목표에 도달했는지 확인하고,\n팀장이 만족스러운 성과를 보인 팀은 연봉 인상? 단, 개인 면담 하면서 특정 인원 참여도가 낮았다면 제외..? 너무 복잡하거나 귀찮을것 같기도\n하지만 일단 아이디어는 내봅니다 (1)\n\n피어평가 + 역할 + 성과&기여 + 성장 + 생산성 (1)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227536007/image-20211029-062010.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227536007"
  },
  {
    "pageContent": "2021-10-18 CCN migration 기준 설정 회의\n\n참여자\n\n권순범 (Sean)\n[https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n\n주제\n\nCCN migration 을 위해 고객에게 청구할 비용 or MOQ 를 어느 정도로 설정할 것인가?\n\n\n\nCaused by\n\nhttps://ecubelabs.atlassian.net/browse/GBD-1162\n[https://ecubelabs.atlassian.net/browse/GBD-1162]\n\nhttps://ecubelabs.atlassian.net/browse/GBD-1170\n[https://ecubelabs.atlassian.net/browse/GBD-1170]\n\n\n\n결론\n\n권순범 (Sean)\n[https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]:\nMigration 해주면 잠재적으로 고객이 제품을 더 구매할 가능성이 있으니 migration cost 는 5억 정도로 설정.\n\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]:\n2021-10-18 CCN migration policy(초안)\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2208432156/2021-10-18+CCN+migration+policy]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2208202794"
  },
  {
    "pageContent": "2021-10-12 TTN deprecation 관련 회의\n\n참여자\n\n박명수 (Harrison)\n[https://ecubelabs.atlassian.net/wiki/people/557058:4a657fbc-a36e-471a-8ae6-721f69e38981?ref=confluence]\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n\n주제\n\nhttps://ecubelabs.atlassian.net/browse/TS-1461\n[https://ecubelabs.atlassian.net/browse/TS-1461]\n\n\n\n결론\n\n * TTN 콘솔은 사용 못하게 되지만 네트워크 자체가 down 되는 게 아니므로 대응하지 않는다.\n\n * 신규/추가 발주가 들어오면 V2 사용 못하므로 V3 개발해서 나가야 한다.\n\n * 기존 고객이 추가 발주를 요청하면 개발비 청구\n   \n   * 천만원 이내 / 개발기간 2개월\n\n * 신규 고객이 요청하는 경우 개발비 청구는 어려울듯\n\n * 고객 게이트웨이도 v3 마이그레이션이 필요하며, 엔드 클라이언트와 관련 내용이 꼭 확인되어야 함\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2196504597"
  },
  {
    "pageContent": "2021-08-18 회의록 - 제품개발회의\n\nCCN 개선하면서 바이두맵 지원 안해도 된다.\n\nConfirmed by 권순범 (Sean)\n[https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]\nDaniel Do (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:dc5e96b5-28fc-48bf-a175-6c1f44d4bb15?ref=confluence]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2103935032"
  },
  {
    "pageContent": "2021-07-21 회의록 - 제품개발회의\n * CCB1 V5L 로 교체\n * https://ecubelabs.atlassian.net/browse/RND-278\n\n\nCCB1 V5L 로 교체\n\n운영중인 CCB1 의 보드를 V5L 로 교체\n\n교체 시\n\n→ CCB2 프로토콜로 통신? No.\n\n→ 기존의 CCB1 프로토콜로 통신? Yes.\n\n\n\n박명수 (Harrison)\n[https://ecubelabs.atlassian.net/wiki/people/557058:4a657fbc-a36e-471a-8ae6-721f69e38981?ref=confluence]\nDaniel Do (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:dc5e96b5-28fc-48bf-a175-6c1f44d4bb15?ref=confluence]\n\n\nHTTPS://ECUBELABS.ATLASSIAN.NET/BROWSE/RND-278\n[https://ecubelabs.atlassian.net/browse/RND-278]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2052030498"
  },
  {
    "pageContent": "2021-07-07 회의록 - 제품개발회의\n\nDaniel Do (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:dc5e96b5-28fc-48bf-a175-6c1f44d4bb15?ref=confluence]\n\nGT 히스토리\n\n * 1호기 6대 분출\n   \n   * 2대는 회사로 돌아 옴\n   \n   * 4대는 일본에서 자체 보관\n\n * 2호기 2대 분출\n\n * 3호기 4대 분출\n\n이치가와 쪽에서는 3호기에 대해 만족스럽다는 의견. 추가 기능 (자동 개폐) 구현해서 추가로 발주 하고 싶어 함 😯.\n\n * 2, 3호기는 이치가와 쪽에서 부르는 말. 내부적으로 2, 3호기는 모두 ver 2.\n\n\n\n박명수 (Harrison)\n[https://ecubelabs.atlassian.net/wiki/people/557058:4a657fbc-a36e-471a-8ae6-721f69e38981?ref=confluence]\n\n2호기 보드 교체 예정. 2호기 보드 교체 완료 되면 2호기, 3호기 모두 같은 펌웨어 사용.\n\n * 1호기는 펌웨어 업데이트 예정 안되어 있기 때문에 나중에 1호기를 사용하려고 한다면 제대로 동작하지 않을 수 있지만 지금은 고려하지\n   않는다.\n\n\n\n펌웨어에 설정 되는 CCB2 sensing interval 기본값 30분으로 변경 예정\n(https://ecubelabs.atlassian.net/browse/RND-283\n[https://ecubelabs.atlassian.net/browse/RND-283]).\n\n * SW팀 대응 완료 https://github.com/Ecube-Labs/ccn-bin-server/pull/232\n   [https://github.com/Ecube-Labs/ccn-bin-server/pull/232]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2013298707"
  },
  {
    "pageContent": "2021-06-18 Push API 개발 회의\n\nCaused by\n\nhttps://ecubelabs.atlassian.net/browse/GBD-1130\n[https://ecubelabs.atlassian.net/browse/GBD-1130]\n\n참여자\n\nDaniel Do (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:dc5e96b5-28fc-48bf-a175-6c1f44d4bb15?ref=confluence]\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n고객 요구 사항\n\nCCN 에 데이터가 쌓이면 고객 API 를 호출해달라.\n\n회의 결과\n\nMOQ (Mininum Order Quantity) CCB/CFX 대충 300개면 개발해 준다.\n\n현재는 SW팀 리소스가 부족하므로 대충 개발하지 않겠다는 의미로 300개로 정했다. 나중에 SW 팀 리소스가 생기면 MOQ 는 조정될 수 있다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1939079230"
  },
  {
    "pageContent": "2021-06-01 AWS 파트너쉽 논의\n\n참여자\n\n권순범 (Sean)\n[https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n이돈각(AWS) 정세희(AWS)\n\n\n\n\n이: \n\n * 하는 일: AWS 공공부문 비즈니스 지원\n   \n   * 교육\n     \n     * ex) 정부기관 사업을 위한 보안인증 관련 교육, …\n   \n   * 컨설팅\n   \n   * 기타 자잘한 일들 …\n     \n\n션: 작년에 정부 사업 했던 이야기\n\n\n\n션:\n\n * AWS 어떻게 사용하고 있는지에 대한 이야기\n   \n   * CCN\n     \n     * 기존 비즈니스 간략한 소개\n       \n       * 하드웨어 -> 센서 -> 서버로 데이터 전송\n       \n       * 서버 over AWS\n   \n   * Haulla\n     \n     * 신사업 비즈니스 간략한 소개\n\n\n\n이: 국내 클라우드 제약 때문에 국내 사업에 제약이 있는지 문의\n\n\n\n션: \n\n * 제약은 케바케\n\n * 국내 사업에 왜 크게 관심이 없는지 설명 - 공공 쓰레기통을 놔두면 불법투기가 많아서\n\n * 고양시나 제주도 국내 큰 파트너들이 어떻게 CCN 사용하고 있는지 설명\n\n\n\n션&이:\n\n * 사업 관련 Q&A\n   \n   * 주력 사업 국가, 환경 관련 이야기, 등등 …\n\n\n\n이:\n\n * 마케팅 관련 지원 가능\n   \n   * AWS summit 에서 발표 기회 제공\n\n * 기술 지원 가능\n   \n   * AWS 엔지니어들에게 컨설팅\n\n * 스타트업 지원 프로그램\n   \n   * 몇가지 조건 만족하면 크레딧 지원해주는 게 있음\n\n\n\n션:\n\n * 미국 시장에서 (신사업) 기회에 대한 이야기\n\n * CCN 데모\n\n * CCNx 설명\n   \n   * 경로 최적화, 드라이버 앱, …\n\n\n\n션&이:\n\n * 행사에 관한 이야기들\n   \n   * 쓰레기 사업 관련 행사들, AWS 아세아 지역 행사들, …\n\n\n\n이:\n\n * AWS 파트너 네트워크 가입하면 추가로 지원해줄 수 있는 게 있음 -> 가입 방법 알려줄 예정\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1876394048"
  },
  {
    "pageContent": "2020-03-20 회의록 - IoT-Server 리뷰\n\n\nDATE\n\n2020. 3. 20.\n\n\nPARTICIPANTS\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   \n\n\nGOALS\n\n * IoT-Server 리뷰\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n상황 공유\n\n * 의도\n   \n   * CCN 연동은 CCN에서 iot-server api를 통해 지속적으로 데이터를 요청해 적재하도록 구현하려 함\n   \n   * iot-server의 존재 이유\n     \n     * ccn-bin-server가 너무 헤비해서 유지보수가 어려움\n     \n     * 기기와의 데이터 교환과 CCN 비즈니스 로직의 디커플링\n\n개발 방향\n\n * client, client_status 등 CCN에서 관리할 수 있도록 하는 필수 데이터를 insert/update하는 서비스를 만들고\n   나서 이를 iot-server와 bin-server가 호출해서 사용하도록 구현\n   \n   * 우선 이 서비스는 bin-server 내부에 포함\n   \n   * bin-server에서 위 서비스를 호출하도록 변경하는 건 단계적으로..",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/444629067"
  },
  {
    "pageContent": "2020-03-03 CCB QR 대응에 관한 논의\n\n\n참가자\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\n주제\n\n2020. 3. 11. 까지 어떻게 CCB QR(CCB GT)의 통신을 대응할 것인가? (기존 ccn-bin-server 역할)\n\n\n합의된/확인된 사실\n\n * 기존 CCN DB와 ccn-bin-server에서 CCB QR을 처리하도록 하는 것은 생각보다 구현도 오래 걸리고 유지보수하기 힘들다.\n\n * 어차피 언젠가는 ccn-bin-server와 DB를 새로 작업해야 한다. (2019-10-15 ccn-bin-server 분리 관련\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/222265472/2019-10-15+ccn-bin-server])\n\n * CleanCUBE GT\n   [https://ecubelabs.atlassian.net/wiki/spaces/SO/pages/231506195/CleanCUBE+GT]\n   의 이치가와 PoC에서는 ‘쓰레기통 위치 및 적재량 보기’를 제외하면 CCN을 쓸 필요가 없다. (고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n   과 논의된 사항)\n   \n   * 웬만하면 GT 쪽에 쓰통 위치 및 적재량이 들어가면 좋겠지만 일정상 불가능한 것은 어쩔 수 없음. 사업 목적은 배출 추적이 메인임\n     \n\n\n결정사항\n\n * 별도 DB에 장치 정보 및 데이터 적재\n\n * 별도로 새로운 서버 개발\n   \n   * 적재량 연산, 수거 등 제외\n   \n   * 현재 CCB QR에 구현된 것만 처리하는 정도로 개발\n   \n   * 확장성 고려: 기능 추가 및 기존 시스템에서 마이그레이션이 수월하도록.\n\n * CCN DB, ccn-current 고려 안 함\n\n * ERP upload, usim swap, data reset은 나중에 개발. PoC 6대는 일단 수작업으로 연동\n\n * ERP usim (un)mount, Product Management, CCB QR 로그 페이지 및 디테일 페이지 개발",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/404062460"
  },
  {
    "pageContent": "2019-10-15 ccn-bin-server 분리 관련\n\n\nDATE\n\n2019. 10. 15.\n\n\nPARTICIPANTS\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * ccn-bin-server 서버 분리에 대한 결정\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n * ccn-bin-server 서버 분리\n\n * 배경: 과거의 데이터를 현재 로직에 맞게 refine해달라는 고객의 요구가 있음\n\n * 현황: ccn-bin-server는 요쳥 데이터 파싱, 로그 저장, Fill-Level 계산, 상태 업데이트, 응답값 계산 등 여러가지\n   역할을 하고 있고, 이 작업들이 서로 커플링되어 있어서 관리 측면에서 문제가 있음\n\n * 해결: 서버 분리\n   \n   * 1. ccn-bin-io-server (가칭) >> 박종인 (Meta) (Deactivated)\n     [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n     \n     * 책임\n       \n       * 1. 요청 데이터 파싱\n         \n         * string type input과 object type input을 모두 받아 object 형식으로 변환하여\n           ccn-bin-state-server에게 전달\n         \n         * object type input은 일부 필드를 optional하게 받을 수 있다고 가정한다.\n       \n       * 2. 응답값 계산\n         \n         * 요청 데이터 ccn-bin-state-server에게 전달 받은 fill-level과 parsedData, DB 조회 값을\n           이용해 응답을 계산한다. (처리에 실패했을 때에 대한 구현도 필요하다.)\n     \n     * 기타\n       \n       * 본 서버는 통신 방식에 의존해서는 안 된다. (NB-IoT, LoRaWAN 등..)\n       \n       * string type input → string type output, object type input → object type\n         output\n         \n         * object type input을 보낸 클라이언트는 object type output도 다룰 수 있다고 가정한다.\n       \n       * object type input을 받은 경우, raw_data_length 같은 필드는 어떤 응답을 줘야 할 지를\n         ccn-bin-io-server의 입력에 미리 포함시키도록 할 수 있을 것 같다.\n   \n   * 2. ccn-bin-state-server (가칭) >> 최지원 (Json) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n     \n     * 책임\n       \n       * 1. 로그 저장\n       \n       * 2. Fill-Level 계산\n         \n         * 적재량 계산 관련한 npm 모듈 사용하면 될 듯 하다.\n       \n       * 3. 상태 업데이트\n         \n         * 추후 제품 관리를 별도의 서버가 하게 된다면 책임을 그 서버에 넘겨야 한다.\n     \n     * 기타\n       \n       * input에 일부 필드가 보내지지 않았을 때에 대한 처리가 있어야 한다.\n       \n       * 계산 과정에서 존재하던 현재 DB 값에 대한 의존을 제거함으로써 과거 데이터를 현재 로직에 맞게 refine하는 작업도\n         가능하도록 구현할 예정이다.\n\n * 작업 관련\n   \n   * 최지원 (Json) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n     이 ccn-bin-state-server 작업을 먼저 선행하고, 작업 중에(혹은 후에) 인터페이스 정리해서 박종인 (Meta)\n     (Deactivated)\n     [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n     에게 전달\n\n * LoRa 프로토콜\n\n * CFX DEVICE → SERVER에서 일부 필드들은 펌웨어에서 고정된 값으로 보내게끔 되어있으므로 실제로 펌웨어가 보내지 않았다고 해도\n   그 값을 보내고 있는 것으로 암시적으로 인정하는 것으로 한다.\n   \n   * relay-service lora → original 매핑과정에서 아래 필드들을 주어진 조건대로 매핑 CCNB-2284 LoRa CFX\n     request mapping 시 일정한 값을 사용하는 필드 처리\n     [https://ecubelabs.atlassian.net/browse/CCNB-2284]\n     \n     * mode: 2\n     \n     * sampling_count: 1\n     \n     * algorithm: if BOOT 0, else 1\n   \n   * 프로토콜 문서 명시 필요\n\n * 나머지 LoRa 프로토콜에는 포함되지만, 기존 프로토콜에는 포함되지 않는 필드들은 그냥 null로 보내도 무관하다.\n\n\nACTION ITEMS\n\n\n\n *  \n\n\nDECISIONS\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/222265472"
  },
  {
    "pageContent": "2019-08-01 회의록: HW Firmware 내 보류 로직 관련 건\n\n\nDATE\n\n2019. 8. 1.\n\n\nPARTICIPANTS\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박명수 (Harrison)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:4a657fbc-a36e-471a-8ae6-721f69e38981?ref=confluence]\n\n * Daniel Do (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:dc5e96b5-28fc-48bf-a175-6c1f44d4bb15?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 박진 (Wheelie) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:1d0c6eee-92a6-49f3-b8e4-94f1f0a87fc6?ref=confluence]\n\n\nGOALS\n\n * HW Firmware 내 적용된 보류 로직의 존재 이유 파악\n\n * 해당 보류 로직으로 인해 보고된 보류 기간 동안의 센싱값으로 인해 발생하는 서버 측 이슈 공유\n\n * 해당 보류 로직으로 인해 보고된 보류 기간 동안의 센싱값을 처리하기 위한 방안 고안\n\n * https://ecubelabs.atlassian.net/browse/CS-352\n   [https://ecubelabs.atlassian.net/browse/CS-352] 해결\n\n\nDISCUSSION TOPICS\n\nItem\n\nPresenter\n\nNotes\n\n\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 기존에 필드에 나간 제품들이 무시하기에는 너무 유의미한 정도로 본 상황을 만들어내므로, 적재량을 가공하고 그걸 이용해서 예측 등에\n   반영해야하는 서버 측에서는 예외처리가 불가피해보인다.\n   \n   * 어차피 서버에 불가피한 예외처리를 적용해야하는 만큼, 펌웨어에서 관련 로직 제거는 불필요.\n\n * 보류로직을 하드웨어단에도 적용한 이유는 통신 빈도 절감이 주요 목적이었다.\n   \n   * 이를 번복하고 제거하면 목적성을 잃고 부작용이 클 것으로 사료된다.\n\n\n\n\n\n\n\n\nACTION ITEMS\n\n * HW팀 박진 (Wheelie) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:1d0c6eee-92a6-49f3-b8e4-94f1f0a87fc6?ref=confluence]\n   : HW Firmware 내 설계된 보류 로직 설계(before revision, after revision)를 SW팀으로 전달\n * SW팀 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   : 전달받은 보류 로직 설계를 서버측에 예외처리로 적용하여 보류 기간 동안의 센싱값을 탐지하여 적절히 처리\n   https://ecubelabs.atlassian.net/browse/CCNB-1989\n   [https://ecubelabs.atlassian.net/browse/CCNB-1989]\n *  \n\n\nDECISIONS\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/186155041"
  },
  {
    "pageContent": "2019-06-17 회의록 - Front-end 개발 미팅\n\n\nDATE\n\n2019. 6. 17.\n\n\nPARTICIPANTS\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n\nGOALS\n\n * CCN-Front를 개발하며 인지해야할 사항을 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   이 다른 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n   과 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n   에게 안내\n\n\nDISCUSSION TOPICS\n\nNotes\n\n * isLoaded 는 각 Component 의 local state 로 관리하도록 한다.\n   \n   * 상태 관리 기법에 대해서는 Front-end 개발 규칙\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118784115] 참고\n\n * 화면의 상태는 URL로 표현하도록 한다.\n   \n   * 화면은 url의 정보를 통해 라우트로 제어하도록 한다.\n   \n   * 선택된 item은 '전부 선택' 이라 하더라도, 그 시점에 선택된 모든 item 들이 url로 표현되어야 한다.\n   \n   * 이를 통해, 사용자에게 동일한 동작성을 보장할 수 있다.\n   \n   * CUD(Create, Update, Delete) 와 관련된 동작은 url로 표현하지 않는다.\n   \n   * SPA에서 간단한 query string을 추가하는 등의 경우 history의 replace를 활용한다. → router의\n     replace 기능이 있음. 기존 코드 참고.\n\n * 백엔드에서 동일한 테이블로 관리하고 있는 옵션이라 하더라도, 프론트는 기획에 따라 분리된 옵션으로 선택하도록 제공해야 한다.\n\n * query string과 params의 다른 의미\n   \n   * query string: 뷰의 간단한 상태를 나타내며, 해당 페이지에서 특정 값을 유지하려 할 때 사용한다. (예, 검색 필터 조건)\n   \n   * params: 페이지에서 필요한 리소스 객체를 특정할때 사용한다. (예, 리소스 상세정보)\n\n * Storage를 사용하면서 데이터를 제대로 관리하지 않으면 legacy로 남아버릴 수 있다. Storage같이 모든곳에 공유되며 눈에\n   보이지 않는 것들은 최대한 조심스럽게 사용한다.\n\n * CCN과 CCNx\n   \n   * 기존의 CCN에서 fm 페이지만 링크를 제공할 예정\n   \n   * 최종적으로는 기존 CCN의 기능들을 v2 로 마이그레이션 할 예정\n   \n   * CF에 있는 대메뉴 링크들을 기존 CCN 링크와 매치해야하며, 경우에 따라 숨기거나 없애는것도 생길수있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165085628"
  },
  {
    "pageContent": "2019-06-12 회의록 - S/W 주간회의\n\n\nDATE\n\n2019. 6. 12.\n\n\nPARTICIPANTS\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n * 이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n\n * 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n\nGOALS\n\n * 업무 공유 및 리프레쉬\n\n\nDISCUSSION TOPICS\n\nItem\n\nPresenter\n\nNotes\n\n주간보고\n\n정동오 (Andy) (Deactivated)\n[https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 입찰 방식의 요구 분석이 변경됨\n\n * 화면 설계도 변경중 (다음주는 되야 generator 모드가 완료될 예정)\n\n * 7월말까지, 결제모듈과 입찰 모듈을 제외한 prototype이 요청됨\n\n * 시나리오가 확정이 되면, 시나리오에 맞는 화면과 기능을 추려낼 예정\n\n * 찰리, 찰스, 션이 따로 회의를 할 예정\n\n * 6월 말 부터 백엔드 설계와 구현을 시작할 예정\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence](PL)\n     + 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * CCNx도 중요하기 때문에, HAULLA에 많은 인력을 투입하지 못함\n\n * 모바일 팀은 CCNx, HAULLA를 당분간 동시에 대응할 예정\n\n황규순 (Kay) (Deactivated)\n[https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n * 지난주 화요일까지 과제\n\n * CCN-Front 현업 시작\n\n * 프로젝트 구조 파악 진행 중\n\n * 모든 브랜치는 Develop에 먼저 머지 할 수 있도록 하자.\n\n이재현 (Jerry) (Deactivated)\n[https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n\n * 과제 프로젝트 마무리하고, 백엔드 작업에 들어감\n\n * 리아코 + 제리 같이 백엔드 프로젝트에 투입\n\n * 찰리가 추천 준 책을 읽는 중\n\n김종민 (Riaco) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n * 지난주까지 partner-console 프로젝트에 매진\n\n * 현재는 CCN-API 구조 이해중\n\n고정완 (Can) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * CCN-Front 개발 투입\n\n이호준 (Jimmy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * CCNx 프로젝트 진행중\n\n * 단말인 태블릿 조사를 이번주에 진행할 예정\n\n * 빌트인을 해서 태블릿 자체를 팔 예정\n\n * 기존의 tab-class 태블릿은 GPS 성능이 너무 안 좋아 폐기할 예정\n\n남기철(Edgar) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 피터와 지미에게 MP 디자인에 대한 preview를 진행\n\n * 부족한 가이드를 요청함\n\n * 구매한 디자인 킷을 사용해 편리하게 작업 진행중\n\n * 찰스, 마이크, 앤디 포함해서 팀원들에게 진행상황 전달\n\n * 션, 찰스, 마이크에게 화면 리뷰하는 미팅을 매주 가질 예정\n\n * 챗봇 또한 기획 중 (UI상 챗봇과 비슷한 것을 구현 중)\n   \n   * 휴먼 러닝을 최대한 활용할 예정\n   \n   * miso 앱을 비주얼적으로 참고할 예정\n\n * CCNx 라우터를 관련 추가 디자인 수정이 합의 됨\n\n * 점점 맥북이 죽고 있음 (매일 2-3회 예상치 못하게 저장없이 맥이 꺼짐)\n   \n   * 해결책: 리셋\n\n박기석 (Peter) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 지난주까지 CCNx 디버깅 작업\n\n * 시뮬레이터 모드 전환 하는 법 앤디에게 전달\n   \n   * 안드로이드와 통일이 필요함\n\n * 지라 이슈 관리에 대한 요청이 들어옴\n\n박종인 (Meta) (Deactivated)\n[https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 인증 관련된 것만 이큐브랩 DB에 저장할 예정\n\n * LoRa 관련된 데이터들을 products DB에서 관리할 예정\n   \n   * 내부적인 사용성을 위해 ERP의 개선이 필요\n\n * config에 하드 코딩 된 값이 너무 많아서, 그것부터 바꾸고 있는 중\n\n * Slack으로 알람이 와서 메타가 직접 버그를 확인 중\n\n * Live Object 관련 시범 사업은 없고 격주로 컨퍼런스 콜 진행 중\n\n * 해리슨과 팟이 출장간 이유는 LoRa 인증 때문\n\n * Live Object 문제없이 상용화 가능\n\n * TTN 관련으로 호주에서 시범사업을 많이 하는 중\n   \n   * 소프트웨어 팀이 대응할 이슈는 없음\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * CCN-API 버그 올라오는거 수정\n\n * CCN을 JSON과 쿠버네티스로 마이그레이션 작업\n\n * 찰리는 앞으로 CCNx 작업에서 멀어질 예정\n   \n   * 신입들이 열심히 해야함\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * ERP 변경사항 처리\n\n * 현재 Tim 혼자 ERP 대응 중\n   \n   * R&R 조정 필요\n\n * CCN subscription 관리 모듈이 없어서, ERP에서 자동화하는 추가 기획 논의 중\n   \n   * 연내에는 적용이 되어야함\n\n * Tim 도 CF에서 멀어질 예정\n\n최지원 (Json) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * OSRM 버전업, 파일을 swap 메모리처럼 처리하게 됨\n\n * 행정구역 폴리곤을 지오펜스로 쓸 수 있게끔 계획 중\n   \n   * 한국, 캘리포니아, 메릴랜드만 OSM 데이터를 가져와서 시연할 수 있도록 할 예정\n   \n   * 가변적으로 지역을 추가할 수 있음\n\n * OSRM internal server error: 서버가 validation을 안해서 직접 확인을 해주어야 하는 에러\n\n * 연대 모듈을 폐기하고, 예측하는 시나리오와 관련된 최적화 모듈에 집중할 예정\n\n * 점점 CA에서 멀어질 예정\n\n신민규 (Lily) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 모바일을 시뮬레이터로 확인 중\n\n * 문제가 있어서 모바일 개발자들에게 전달함\n\n * 주간보고에서 나온 개발 수정사항이 많은데, 앞으로 이를 QA에게 전달하는 프로세스가 필요함\n\n전달사항\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 6월 회식\n   \n   * 6월 24일 월요일 팀 회식\n   \n   * 회식 메뉴 추천 받음.\n\n * 스티브 해외 출국: 6월 21일 - 6월 23일\n\n * 신입 4명이 production 개발에 투입됨\n\n * 리아코 혼자 자신의 training 개발에 대한 발표 시간을 가짐\n\n * 중국 쪽 파트너사와 조인트 법인을 만들고 show room 운영 중\n\n * 심천의 아파트에 시범적으로 큐브를 설치함.\n   \n   * 중국 관련 대응이 늘어날 수 있다.\n   \n   * 중국판 CCN 서버가 별개로 존재, 바이두 맵을 사용\n   \n   * 중국 쪽 좌표 및 맵박스 리서치를 미리 해두어야 함\n   \n   * 심천이란? 중국판 청계천 + 실리콘밸리\n\n * 이큐브랩 소프트웨어 팀의 리쿠르팅 TO는 무제한\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/163020804"
  },
  {
    "pageContent": "2019-06-11 회의록 - MP Mobile Design 회의\n\n\n참석자\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n\n타이틀 디자인 결정\n\n라지 타이틀, 스탠다드 타이틀 혼용하는것으로 결정되었습니다.\n\n\n첫 진입 화면의 백그라운드에 영상을 깝시다.\n\n만장일치로 합의되었습니다.\n\n\n컬러 가이드는 이전처럼 파편화가 일어나지 않도록 미리 사전정의해서 제공하겠습니다.\n\n\n컬러 가이드 및 폰트 가이드를 개선하고 제플린에서 가이드 확인시에 활용할 수 있도록 하겠습니다.\n\n\n가변영역, 고정영역은 어떻게 전달할것인가? 스크롤 영역도 어떻게 전달할것인가요?\n\n우선적으로 컴포넌트별로 영역을 표시해서 리뷰를 하고, 개발자가 헷갈리는 영역은 다시 문의를 하는것으로 정해졌습니다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/163217482"
  },
  {
    "pageContent": "2019-06-07 회의록 - CCNx Progress\n\n\nDATE\n\n2019. 6. 7.\n\n\nPARTICIPANTS\n\n\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n * 이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n\n * 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n * 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * 권순범 (Sean)\n   [https://ecubelabs.atlassian.net/wiki/people/5b3b203d9884a32edbd0f88b?ref=confluence]\n\n * \n\n\nGOALS\n\n\n\n * CCNx 진행상황 및 미비점 정리\n\n\nDISCUSSION TOPICS\n\nPresenter\n\nNotes\n\n이호준 (Jimmy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 기존의 경로이탈 판단을 대신해 Mapbox를 사용하도록 함\n\n * IOS 대비 안드로이드의 필드 테스트 결과가 좋지 못한 문제\n   \n   * 원인: 단말의 GPS 센싱의 파편화가 심함\n   \n   * 픽셀1과 갤럭시 A10으로 필드 테스트 했을 때는 어느 정도 정상\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     의 피드백: 2, 3년 전 기기로 필드 테스트 해야함\n     \n     * Tab P10으로 필드 테스트 할 예정\n\n * 마커 디자인 변경\n   \n   * 기획 리소스: 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n     와 회의해서 마커 디자인을 정했음\n\n * 베어링\n   \n   * GPS 센싱값에 방향 정보와, 정확도 값이 포함되어 있음\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 인디케이터 추가하는 작업을 케이에게 맡김\n\n * 모달을 전체적으로 정리중\n   \n   * 지오펜스 쪽 모달은, API 작업이 선행되어야 해서 미룸\n\n * 언어 파일이 네트워크 상황에 따라 늦게 로딩 되는 경우, 이상하게 번역이 되는 문제\n   \n   * 언어 파일 불러온 경우 detection해서 변경된 부분 반영하도록 바꿀 예정\n\n * 웹노티는 매우 급하지는 않음 by 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * 쓰레기 할당과 지오펜스 쪽 리팩토링을 우선 할 예정\n   \n\n신민규 (Lily) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 테스트를 기록하고 정리중\n   \n   * 앱: IOS, 안드로이드\n   \n   * 웹: 앱과 달리 버젼 구분 없이 계속 업데이트가 되어 테스트가 어려움\n\n박기석 (Peter) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 키보드 문제 해결\n\n * 지미와 같이 리스트업과 우선순위를 만드는 중\n\n * 남은 모바일 이슈\n   \n   * 강제 업데이트 구현\n   \n   * 릴리가 지적한 버그 픽스\n   \n   * My Page 구현 (설정 페이지)\n     \n     * API가 아직 없고, 기획도 확정되지 않음\n     \n     * 사이먼이 해놓은 스토리보드를 바꿀 필요가 있음\n   \n   * 네비게이션 페이지 디자인 재수정\n   \n   * 안드로이드 에서 키보드가 올라왔을 때, input이 가려지는 버그 수정\n\n * 모바일은 다음주부터 신규 프로젝트에 들어갈 예정\n\n공통\n\n * 이슈들: 맵매칭, 동작성, 사용성, 알림, 지오펜스\n   \n   * 맵 매칭이 가장 큰 이슈\n\n * 맵 매칭\n   \n   * 안드로이드에서 길 안내 시 튀는 현상 발생을 맵매칭을 통해 해결\n   \n   * 구글맵이 비싸서, OSM (Open Street Map) 서버를 따로 구축\n     \n     * 메인 타겟인 미국은 OSM 데이터가 좋음 (우버도 사용)\n   \n   * OSRM을 통해 라우팅을 하여 네비게이션 기능 구현\n     \n     * 인터넷이 끊어지면 길 안내가 안됨\n   \n   * 맵박스 모듈을 튜닝\n     \n     * 맵박스 선택 이유: 글로벌 지원 + OSRM\n   \n   * 서버에서 맵매칭에 필요한 데이터를 받을 때, 1초에 한번은 너무 많다는 의견이 제시됨\n\n * 맵 매칭으로 네비게이션 문제가 해결이 안되면, 각 국가의 로컬 마켓 쪽 네비게이션 업자와 협업할 예정\n\n * CCNx 디바이스 번들링\n   \n   * 안드로이드의 GPS 센싱 파편화를 막기 위해, 단말까지 번들링할 예정\n   \n   * 적절한 단말에 대한 리서치 필요\n\n * 수거 계획 생성 실패 원인은 파악이 불가능함 by 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 네비게이션 경로의 방향과 순서를 알 수 있도록 신규 리소스에 반영 필요\n   \n   * 마커들은 순서가 숫자로 찍혀야함\n   \n   * 회전을 하는 이벤트를 polyline 위에다가 표시해줘야함\n\n * CCNx 오픈 베타\n   \n   * 두비원에게 실사용하게 해서 피드백 받을 예정\n   \n   * 창 한쪽에 피드백 버튼을 제공할 예정\n     \n     * 한 줄 짜리 피드백을 날릴 수 있음\n     \n     * 브라우저 화면을 캡처해서 같이 날릴 수 있어야함 (유튜브 by 이재현 (Jerry) (Deactivated)\n       [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence])\n     \n     * 당시 상태를 스냅샷으로 찍어서 전달해야함\n   \n   * 박폴이 미국에서 필드 테스트를 할 예정\n\n * CCNx의 알림 카테고리\n   \n   * 차량의 서비싱 (E.g 배터리가 없다)\n   \n   * 드라이버 (E.g 속도 위반)\n   \n   * 그외 이벤트 (E.g 지오 펜스)\n\n * 연세대와 모듈 관련해서 6월 14일날 미팅을 갈 예정\n\n * 신입들이 CCNx 프로젝트에 투입될 예정\n   \n   * 프론트: 캔, 케이\n   \n   * 백엔드: 제리, 리아코\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/160792601"
  },
  {
    "pageContent": "2019-06-05 회의록\n\n\nDATE\n\n2019. 6. 5.\n\n\nPARTICIPANTS\n\n\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n\nGOALS\n\n\n\n * MP 디자인 프리뷰\n\n * FM 경로 마커 관련\n\n\nDISCUSSION TOPICS\n\nTime\n\nItem\n\nPresenter\n\nNotes\n\n\n\nMP 디자인 프리뷰\n\n남기철(Edgar) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * [https://ecubelabs.atlassian.net/wiki/download/attachments/159711322/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-06-05%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.26.02.png?api=v2]\n   \n   \n\n * 스타일\n   \n   * HAULLA 브랜드 컬러에 맞춘 화이트, 블랙을 대표 컬러로 하되 CTA 컬러를 고민중인데, 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n     개인적으로는 파랑이 좋으나 비즈니스 및 정해진 컬러상 초록을 사용해야할 것으로 예상됨, 이 부분에 대해 추가 씬을 작업하면서 결정을\n     하고 추가 공유를 할 예정\n\n * OS 관련\n   \n   * iOS Native UI Kit을 기본으로 하여 디자인을 하되, Android 사용자 경험상 매우 어색하다고 느껴질 수 있는 부분들은\n     FM 에서의 작업처럼 별도 커스텀 컴포넌트 작업이 필요함.\n     \n     * 하지만 대체적으로 두 OS의 사용자 경험이 일원화되는 경향이 있어 큰 문제점은 없을 것으로 예상한다.\n\n * 해상도\n   \n   * 특히 헤더 부분에 대한 고민이 크다. 이를 해결하기 위한 방법은 Default, Large 한 쪽으로 통일하거나 스크롤시 Large가\n     Default로 바뀌는 방안 등이 있을것, 다음 회의때 결정\n   \n   * 가변, 고정 영역에 대한 가이드도 합의 내용에 포함하여 해결이 필요하다.\n\n * 위 내용들을 바탕으로 다음 회의 (6월 11일 오후 2시)전까지 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   와 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   가 추후 구현시 애로점 극복을 위한 합의해야할 리스트업을 해줄 예정. (박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   와 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   가 생각하기에 전체적으로 디자인은 아주 마음에 듦. 수정 가능합니다.)\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   는 회의 전까지 MP 씬을 추가적으로 작업하여 합의시 참고 자료로 활용할 계획\n\n\n\n\nFM 경로 마커 어떻게 해결할지?\n\n\n남기철(Edgar) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 방문,미방문 구분\n   \n   * 기본적으로 CCN에서 적재량을 색으로 구분하기 때문에 초록, 주황, 빨강으로 방문 여부를 구분해서는 안된다.\n   \n   * 기존 카드띠에서 구분하듯 현재 목적지는 파랑색 핀으로, 미 방문지는 회색 핀으로 한다. 기 방문지는 체크된 회색 마커\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/159711322/image-20190605-061605.png?api=v2]\n   \n   * 추가적으로 현재 목적지의 마커는 크기를 더 키워 구분한다.\n\n * 넘버링 관련\n   \n   * 네이버지도의 경우 마커안에 경유지를 넘버링하고 있지만 구현상 그 위에 라벨링?을 해주는 것이 더 적절하다.\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/159711322/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-06-05%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.16.30.png?api=v2]\n       \n       \n   \n   * 카카오 지도에서 사용하고 있는 앱 뱃지 형태의 넘버링이 좋아보인다. (시인성은 더 살려서)\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/159711322/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-06-05%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.17.10.png?api=v2]\n\n * 경로 화살표, 교통량 등 경로띠에 대한 얘기\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/159711322/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-06-05%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.19.54.png?api=v2]\n     \n     네이버 지도 베타(beta.map.naver.com)와 같은 스타일로 작업하면 될듯. 교통량의 경우 맵박스에서 빨강, 노랑의 결과만\n     표시하고 있음\n\n\nACTION ITEMS\n\n\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   경로 마커 (파랑색, 회색 체크 언체크) 추가 공유 CCNB-1643\n   [https://ecubelabs.atlassian.net/browse/CCNB-1643?src=confmacro] 및 앱 뱃지 형태의\n   넘버링 스타일 가이드 CCNB-1644\n   [https://ecubelabs.atlassian.net/browse/CCNB-1644?src=confmacro] 전달\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]이호준\n   (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   다음 회의(6월 11일)전 까지 가이드에 꼭 들어가야할 구현시 합의할 부분, 문의할 내용 등 리스트업 CCNB-1638\n   [https://ecubelabs.atlassian.net/browse/CCNB-1638?src=confmacro]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159711322"
  },
  {
    "pageContent": "2019-05-22 회의록 - S/W 주간회의\n\n\nDATE\n\n2019. 5. 22.\n\n\nPARTICIPANTS\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 서동현 (Wilson) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c73520bb2a791696f2077ff?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n * 이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n\n * 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n업무 공유\n\n * 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n전달사항\n\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   오늘 생일 !!!\n\n * CCNx\n   \n   * 5월말 다음주까지, 개발과 테스트를 끝냄\n   \n   * 6월부터 친분이 있는 국내외 업체를 대상으로 CBT 진행\n\n * Haulla\n   \n   * 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n     와 정동오 (Andy) (Deactivated)\n     [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n     가 의사결정에 대한 미비점 보완 중\n   \n   * 6월달까지 계획이 완성되고, 모바일 먼저 개발이 들어갈 예정\n     \n     * 화면을 프로토타입 수준으로라도 먼저 구성\n     \n     * 크로스 플랫폼의 학습과 개발 병행\n   \n   * Haulla 개발 이전까지, CCNx 관련된 이슈들은 모두 끝내야 함\n\n * 모바일 신입 개발자 채용\n   \n   * 채용이 잘 진행되고 있지 않음 (IOS 한분만 코딩 면접 통과해서 진행중)\n   \n   * 전화면접을 면접과정에 추가\n\n * 신입 과제\n   \n   * 과제가 끝나면, 팀 전체적으로 리뷰하는 시간을 가질 예정\n   \n   * 프로젝트 리뷰 전까지 배포에 대해서는 생각하지 않을 것\n\n * QA 프로세스 관련 건의\n   \n   * 지속적으로 커밋이 올라오다 보니, 무의미해진 검증이 많다.\n   \n   * 개발 단위가 완료된 후에 검증을 했으면 좋겠다.\n   \n   * 굳이 Selenium을 하지 않더라도, 검증 시나리오가 묘사된 테스트 케이스 문서에 집중했으면 좋겠다.\n   \n   * 현재 production/stage 서버로 나눠져 있는데, 오로지 개발 과정에서만 사용할 development 서버 추가 건의\n     \n     * 운영이 제대로 들어간 다음에 서버를 추가하자.\n\n * 윌슨 퇴사?\n   \n   * 개발자라는 직업을 그만두고 싶어짐\n   \n   * 소방 공무원을 할 예정\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/151519434"
  },
  {
    "pageContent": "2019-04-24 회의록 - S/W 주간회의\n\n\nDATE\n\n2019. 4. 24.\n\n\nPARTICIPANTS\n\n\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 서동현 (Wilson) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c73520bb2a791696f2077ff?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n * 이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n\n * 황규순 (Kay) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5cbd24abcbc5a60fd8047c8a?ref=confluence]\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n전달사항\n\n\n * 메타의 유럽 출장\n   \n   * LoRaWAN 통신을 하는 단말을 이용한 사업에 대한 지원 목적\n   \n   * live objects 및 고객사(Veolia France, BSR) 미팅\n   \n   * 하드웨어팀 서포트 및 버그 수정\n   \n   * 한국 보다는 유럽 쪽이 쓰레기통 시장이 다양하고 크다.\n   \n   * 런던에 빅밸리 제품이 쓰이더라\n\n * CCN의 계정 구조\n   [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/118751798/Accounts]\n   \n   * 최상단 계정이 contactus, 그 아래 하위 계정, 또 그 아래 하위 계정이 있는 계층 구조.\n\n * 새로 오신 분은 엔드 유저 입장에서, CCN과 CCN의 메뉴얼을 살펴보면 좋겠다.\n\n * 모두가 CCNx를 기다리고 있다.\n\n * MP의 개발 시작을 원하고 있다.\n\n * LoRa와 같은 새 통신방식에 대한 니즈가 있다.\n\n * 하드웨어 only를 요구하는 고객이 있다.\n   \n   * 만들어진 SDK가 없기에 준비가 되어있지 않다.\n\n * 하드웨어팀의 ToF(Time of Flight) 센서\n   \n   * 광학센서\n   \n   * 클린플렉스 뿐만 아니라 클린큐브에도 적용할 예정\n   \n   * 기존 CFX는 초음파의 응답시간을 통해 얻어진 거리로 쓰레기의 적재량을 측정한다.\n   \n   * 기존 CCB는 압축을 할때 쓰레기의 적재량을 추론한다.\n   \n   * Fill-Level에서 무게는 고려하지 않는다.\n\n * 새 제품 라인업\n   \n   * 사이즈가 작은 클린큐브\n   \n   * 기존 큐브중 제일 작은게 100L 였는데, 더 작은 큐브\n   \n   * 아시아권(일본, 동남아) 시장에 대응\n\n * CCNx 이번달 말에 베타가 나옴\n\n * Lily를 위한 테스트 단말기\n   \n   * IOS 기기 구매하기\n\nKay 자기소개\n\n * 1년 반 경력자\n\n * 위치 추적을 하는 IoT 플랫폼을 만드는 회사에서 근무\n\n * 백엔드로 API 제공함\n\n * 네트워크 트래픽을 처리하는 UDP 서버를 만듬\n\n * 주로 10명 규모의 회사에서 근무\n\nAndy의 MP [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/overview] 발표\n\n * 전체적인 개요 정리\n\n * 개발 요청 [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/123502652/~22]\n   \n   * 사용자: generator, hauler, 이큐브랩 관리자\n   \n   * 주요 용어: Generator, Hauler, Dumpster, Bidding, Smart collection, On demand\n   \n   * Hauler와 Generator는 IOS 단말이 우선\n     \n     * 이동중인 사용자를 고려해서 웹 보다는 모바일이 우선\n   \n   * 웹: 이큐브랩 관리자만 사용, Hauler와 Generator는 웹을 사용하지 않음\n   \n   * 모바일은 Generator 것만 먼저 만들어서 런칭 할 예정\n   \n   * 개발 산출물 → 분석 의 4가지 항목(업무 분석, 기능 분석, 데이터 분석, 비기능 분석)은 읽어두길 권고\n\n * Haulla 또한 무게는 고려하지 않는다. 철저하게 부피만 고려한다.\n   \n   * 일본 시장은 무게를 고려하는게 필요.\n\n * 비즈니스 모델\n   \n   * 결제 수단을 등록\n   \n   * 낙찰 완료(자동 결제)가 되어서 Hauler가 수거를 완료하면, 수수료를 획득한다.\n   \n   * Generator에게서만 수수료를 받고, Hauler에게는 받지 않는다.\n\n * ‘즉시 낙찰’, ‘강제 매칭’과 같은 기능이 추후에 추가될 예정\n   \n   * 기본은 입찰과 낙찰\n\n * MP를 위한 새로운 단말은 없음\n\n * 시드(블록체인) 프로젝트를 통해 ICO를 하려했으나, 흐지부지됨\n\n회식\n\n * 4월 29일 월\n\n * 월요일마다 스카이다이빙 훈련이 있는 스티브는 제외됨\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/141819917"
  },
  {
    "pageContent": "2019-04-03 회의록 - S/W 주간회의\n\n\nDATE\n\n2019. 4. 3.\n\n\nPARTICIPANTS\n\n\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 서동현 (Wilson) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c73520bb2a791696f2077ff?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n\n * 이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n전주 업무 공유\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * Node-redis => ioredis로 변경\n   \n   * 로라 문서화의 필요성을 느껴 문서화 진행중\n   \n   * 장비 추가/삭제 API 추가중\n   \n   * LoRaWan 플랫폼(TTN, DA 등..)에 대한 mock을 작성하다가 너무 길어져서 임시 중단\n   \n   * 이번주 금요일부터 유럽(독일, 프랑스)으로 출장\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n   \n   * 지난주 매칭 플랫폼 업무분석에서 수거요청 입찰 프로세스에 추가 요청이 있어 추가 요청 수정 작업 3일정도 소요.\n   \n   * 기능분석은 지난주부터 오늘 오전까지 1차 완료한 상태이며 , GBD팀에 검토 요청한 상황\n   \n   * 데이터 분석이 이번주 중 1차적으로 끝나고 비기능적인 부분도 1차까지 끝날 예정\n   \n   * 다음주중 화면설계로 넘어가고 단계별로 화면 설계할 에정\n   \n   * 화면 설계의 와이어 프레임을 끝내고, 4월 중순쯤에 개발팀과 미팅을 가질 예정\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   \n   * CCN 중국 관련 버그 해결\n   \n   * 태블릿 관련 버그를 해결한 최신버전을 단말에 설치\n   \n   * MP 개발에 사용할 Cross Platform에 대한 리서치\n     \n     * RN(React Native)와 Flutter 조사\n     \n     * RN 이 적합하다 판단.\n     \n     * 지미가 리서치한 내용을 피터가 팔로우 업 할 예정\n\n * 서동현 (Wilson) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c73520bb2a791696f2077ff?ref=confluence]\n   \n   * Partner-console API 초기 구조설정 피드백 반영 후 머지 완료\n     \n     Partner-console Front 초기 구조설정 피드백 반영 후 머지 완료\n   \n   * CCN-API 코드를 참고하여 테스트 코드 작성 중\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n   \n   * Partner-console-api의 피드백 반영하여 수정중\n   \n   * Partner-console Front 피드백 반영하여 수정중\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   \n   * 사내 블로그 글 포스팅 완료\n   \n   * 채용 진행\n   \n   * CF 차량 수정기능 개발 완료\n   \n   * partner-api-console 이후의 두번째 과제도 준비됨\n   \n   * reviewer와 assignee\n     \n     * 메타, 팀에 이어 찰리와 제이슨도 리뷰어로 참가할 예정\n     \n     * 교육생들끼리도 리뷰를 하도록 할 예정\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   \n   * CCN 중국 디버깅 2,3차 완료 및 테스트 전달 3차 현재 존 테스트 진행중\n   \n   * 애플 계정 문제 보류중 - 션 인증이 필요 (정책이 바뀌어서 키체인이 필요)\n   \n   * FM Card View 컴포넌트 개발 및 적용 완료\n   \n   * FM 이슈 입력 api 변경 완료\n   \n   * FM 사진 입력 api 진행중\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   \n   * FM\n     \n     * 최적화 모듈 동시에 여러개 실행할 수 있게 개선\n     \n     * 이미지 저장소 분리\n   \n   * AWS 리소스 추상화\n     \n     * 노티 서버 쿠버네티스 이전 완료\n     \n     * 프로토콜 서버 쿠버네티스 이전 예정\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * 지오펜스 목록 조회 , 추가 ,수정 ,삭제 API\n   \n   * 제품 또는 지오펜스 이동 시 할당관계 자동갱신\n   \n   * 모델 , 스키마 수정, 리팩토링과 로직 수정, 데이터 마이그레이션\n   \n   * @ccn/mysql 업데이트\n   \n   * 지오펜스 CA 에 이어서, CF 도 개발중\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   \n   * Sketch용 모바일 UI Kit 릴리즈 관리\n   \n   * FM 개발의 완료후, 내부 테스트 기간 중에 버전업할 예정\n   \n   * MP 네이밍이 Haulla로 픽스됨, 이를 바탕으로 UI/UX 디자인에 들어감\n\n전달사항\n\n * 이번주의 신규 입사자: 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n   이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n   신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n\n * 미국에서 시범 사업을 하고 있는 고객들\n   \n   * 샌프란시스코\n   \n   * 월 마트\n   \n   * LA의 위생 관리국\n\n * 최근 시리즈 B 투자가 끝남\n\n신입 자기 소개\n\n * 김종민 (Riaco) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176dc6d462664988e485e?ref=confluence]\n   \n   * 행정학과 전공\n   \n   * 작년 4월에 처음 개발을 접함\n   \n   * 개발로 전직한 이유는 재미있어서\n\n * 이재현 (Jerry) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca416188b98067a171532c6?ref=confluence]\n   \n   * 1년 반의 업무 경력\n   \n   * 백엔드, IOS, 안드로이드, 유니티 등을 경험\n   \n   * 어릴 때부터 개발함\n\n * 신민규 (Lily) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ca176df7a6bf9261a41db64?ref=confluence]\n   \n   * MCU(Micro Controller Unit)에 대한 개발 경험\n   \n   * QA 검증 업무를 맡음\n   \n   * 핸드볼 선수 출신\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/133530025"
  },
  {
    "pageContent": "2019-03-13 회의록 - S/W 주간회의\n\n\nDATE\n\n2019. 3. 13.\n\n\nPARTICIPANTS\n\n\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 서동현 (Wilson) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c73520bb2a791696f2077ff?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n전주 업무 공유\n\n주간 보고에 포함된 내용은 기록하지 않습니다.\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   \n   * 바이두 맵 로딩 안 되는 문제 핸들링 중\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   \n   * on-premise 작업 마무리 단계\n   \n   * 단말이 없어, on-premise 성능 테스트는 못함\n   \n   * 테라폼으로 인프라를 관리할 수 있도록함, AWS에도 마이그레이션 가능\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n   \n   * CCNx Dashboard 기획 후 MP support할 예정\n   \n   * 테스트 중 추가 및 변동사항이 있으면 remind가 필요할 듯함 (테스트 중에는 관련 부분에 대해 변경을 하지 않는 것이 원칙)\n   \n   * erp 테스트는 외부 플랫폼의 데이터를 변경할 수 있기 때문에 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n     과의 커뮤니케이션이 필요할 듯. 또한 erp 테스트를 위해 모든 권한을 제공할 필요 있음\n   \n   * 테스트 결과 문서\n     [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/119505964/CCN+ERP ]의\n     비고란에 개선 사항을 기록했으니 참고 요망\n   \n   * 개발 흐름에 대한 문서화\n     [https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/120751316/Workflow ]와\n     형식화 제안\n   \n   * 개발 여부를 결정하는 회의체 논의\n     \n     * 관련된 회의들: 상품개발 회의, 생산판매 회의\n     \n     * MD, SW, HW가 서로 dependent한 이슈가 많아 구분짓기가 힘듬\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   \n   * 다음 달까지 HR 프로세스 정리, 회사 홍보 관련 작업에 초점\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * OSRM dockerizing은 on-premise를 위한 것. 당장 본 서버에 반영할 예정 없음\n   \n   * 지오펜스 구현에 대해 리서치 중\n   \n   * MySQL의 공간 인덱싱을 통해, MySQL 쿼리를 서버에 날려 지오펜스를 구현하려함\n   \n   * 바이두 맵의 좌표계 문제\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122356038 ]\n     \n     * 클라이언트에서 어떤 지도인지 서버에 보내서, 서버가 클라이언트의 위치와 지도 정보를 취합해 좌표를 처리함\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   \n   * ☆무사 복귀☆\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   \n   * 디자인 시스템: 디자인 UI 가이드라인, UI kit, 설계 방법을 아우르는 초심자가 봐도 작업할 수 있는 가이드라인\n   \n   * Ui kit 파워포인트 템플릿 화에 대해 리서치 중\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n   서동현 (Wilson) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5c73520bb2a791696f2077ff?ref=confluence]\n   \n   * 부족한 지식을 채우는 의미 있는 시간을 보내고 있음\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * message concatenation\n     [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/121536521/Message+Concatenation+Flow\n     ] 전체적인 로직 문서화했으니 참고 요망\n\n전달사항\n\n\n * 3/12일부로 에버랜드 CCBx 100대 추가 설치 완료\n\n * CCBx: 전력 문제가 개선된 CCB (펌웨어), 이번 에버랜드 설치부터 적용됨\n\n * 최근 추가적으로 투자 받음, 100억!\n\n * On-Premise: 데드라인 맞췄으나 클라이언트와 (통신, USIM 관련) 의사소통 문제로 pending\n\n * LoRa\n   \n   * 지난주 CS/사업 이슈로 David 유럽 출장. LiveObjects 플랫폼 테스트 대응.\n   \n   * LoRa 범용 단말 개발 예정\n     \n     * 앱(AOS/iOS)을 통해 AppEUI/AppKey를 펌웨어에 동적으로 입력할 수 있도록 개발할 예정 (with BLE)\n     \n     * 사용자(distributer, SCS 등)가 직접 조작하지 않고, ERP로부터 App 정보를 가져와서 펌웨어로 보내줄 수 있도록 할\n       예정. (펌웨어로부터 devEUI를 받아와서 서버로 보내주고, 그 응답으로 App 정보를 받을 것으로 예상)\n     \n     * 예를 들어, SCS에서 장비를 받아서 제품을 내보낼 때 아들레이드나 시드니에 보내기 위해 초기화하는 데 사용할 예정\n   \n   * 도로교통공사: 단순하게 초음파 값만 보내주는 간소화된 펌웨어를 개발하고 있는 중 (CCN 서버에 연결하지 않음)\n\n * confluence\n   \n   * 지난 주에 외부 팀(TS 등..)도 confluence를 사용하도록 일부 open\n   \n   * 사내 정책: 기술 지원 과정의 계층화\n     \n     * 고객(Level 1)이 inquiry를 날리면 account manager(GBD, Level 2)가 핸들링 및 필터링하고,\n       부족하다면 TS(Level 3)로 inquiry를 보낸다. Level 3에서도 해결이 안되면 Level 4(HW/SW/MD)와\n       커뮤니케이션\n       \n       * 이를 위한 교육을 confluence를 통해 진행할 예정\n       \n       * technique archive가 필요함\n       \n       * 하위 계층이 deprecated 된 정보로 대응하지 않도록, 상위 계층에서 변동사항을 즉각 전달해야함\n\n * 이런 사내 기조에 따라 정리할 내용이 있다면 꼭 confluence에 기록하도록 함\n\n * 중국팀 최근 전시회 2번 진행\n   \n   * 바이두 맵이 안되서, VPN을 통해 구글맵으로 시연\n\n * 지도 관련 작업자는 Map\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122585237/Map] 문서 필시 확인\n\n * 회사 기술 블로그 운영 시작해야 하지 않을까?\n   \n   * 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n     좋은 블로그 플랫폼 추천받음\n   \n   * 포스트 작성에 책임을 주기 위해 당번제 제안\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122421819"
  },
  {
    "pageContent": "2019-03-12 회의록 : 모바일 API optional 값 관련\n\n\nDATE\n\n2019. 3. 12.\n\n\nPARTICIPANTS\n\n\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n\nGOALS\n\n\n\n * API의 필드 값이 키가 없는 경우, null인 경우, 값이 있는 경우를 구분할 필요가 있음을 공유\n\n * 모바일 API에서 그 셋을 구별해서 서버에 요청하는 데 드는 로드가 어느정도인지 공유\n\n * 가능한 적은 공수로 해결하면서 기술 부채 덜 남길 방법 찾기\n\n\nDISCUSSION TOPICS\n\nNotes\n\n필드 값이 키가 없는 경우, null인 경우, 값이 있는 경우를 구분할 필요가 있지만 모바일 API는 아직 딱히 해당사항이 있는 API가 없음.\n\niOS, Android 둘 다 키를 제거하는 것은 큰 어려움이 없음\n\nnull을 보내는 것은 JSON으로 바디를 보내면 가능하지만 모바일 클라이언트 쪽에서 약간의 코드 수정이 필요하며 application/json\n콘텐트 타입이 아닌 multipart로 보내는 경우 Android에서는 필드를 null로 보낼 수 없음\n\nnull을 보내도록 명시되어있는 모바일 API 하나를 optional 필드로 바꾸기로 함. null 처리가 일단은 필요 없음.\n\n하지만 나중에 필드 값이 키가 없는 경우, null인 경우, 값이 있는 경우를 구분할 여지가 있음을 공유\n\n\nACTION ITEMS\n\nCCNB-914 [https://ecubelabs.atlassian.net/browse/CCNB-914?src=confmacro]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122290547"
  },
  {
    "pageContent": "2019-02-28 회의록 - FM 기획 구체화 회의록\n\n\nDATE\n\n2019. 2. 28.\n\n\nPARTICIPANTS\n\n\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n\nGOALS\n\n\n\n * ‘수거 요일’의 의미 구체화\n\n * ‘수거 주기’의 의미 구체화\n\n * 수거 요일, 수거 주기가 어떻게 사용되나?\n\n * 스케줄 생성 시 수거 요일, 수거 주기 등에 의한 자동 체크나 경고 문구 등을 지금 도입할것인지 논의\n\n * company, waste type의 권한과 권한 전파 구체화\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n수거 요일\n\n수거 요일은 기존 ccn-current FM에 있었던 요일별 최소 1회 수거해야 하는 요일이 개념이 옮겨온 것임. 수거 가능\n시간대(collectable_hour)와는 별개임. 수거 가능 시간대는 나중에 도입될 예정임.\n\n수거 주기\n\n\n수거 주기는 기존 ccn-current FM에 있었던 최대 미수거 기간(max_collection_interval) 개념이 옮겨온 것임.\n\n자동 체크\n\n스케줄 생성 시 수거 요일과 수거 주기에 의해 수거해야 하는 제품으로 판단되면 자동으로 필수 체크를 해준다. 임의로 해제할 수 있다. 사용자\n편의성 개선은 나중에.\n\n차량 속성의 변경 권한\n\n차량 생성 유저와 그 상위 유저가 그 차량에 할당된 company, waste type를 변경할 수 있다.\n\ncompany 권한\n\n생성한 유저와 상위 유저만 볼 수 있다. 하지만 차량에 할당된 company는 그 차량의 조회 권한이 있다면 볼 수 있다.\n\n어떠한 차량에도 할당되어있지 않은 company는 company를 생성한 유저와 그 상위 유저가 삭제할 수 있다.\n\nwaste type 권한\n\n권한 문제가 복잡해서 일단 waste type은 기본 제공 waste type 중에서만 고를 수 있고 모든 유저가 볼 수 있으며 삭제\n불가능하다.\n\n커스텀 waste type 생성 기능은 나중에 피드백 받고 만든다.\n\n\nACTION ITEMS\n\n\n\n *  \n\n\nDECISIONS\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/119408029"
  },
  {
    "pageContent": "2019-02-12 회의록 - S/W 주간회의\n\n\nDATE\n\n2019. 2. 12.\n\n\nPARTICIPANTS\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 정동오 (Andy) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5c60dd5c7bc26f6fb62555b6?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n주간 보고\n\n메일에 공유된 내용을 제외하고 기록합니다.\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   \n   * 이호준 (Jimmy) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n     에게 인수인계 완료\n   \n   * 기존 ccn앱과 다른 path의 새로운 앱을 play store에 올려야 함 (on-premise)\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   \n   * on-premise 작업에 중점을 둘 예정\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   \n   * front end 개발자가 부족합니다.\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * on-premise 작업에 중점을 둘 예정\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   \n   * 팀이 개발하고 있는 부분에 대한 디테일한 가이드라인 제공\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * Redis cluster 관련 작업은 Live Objects 작업 이후에 진행\n\n전달 사항\n\n\n * ESE의 top sales maanger, georg 본사 방문, 내일까지 240L에서 교육 예정\n\n * CS → techinical support 팀으로 개편, 인력도 충원하고 역량 강화할 예정\n   \n   * Steve, Danny처럼 전체적인 이해도가 높은 아카이브를 육성\n   \n   * 멤버: IAN, 홍폴, young, Ron, keon, O’conner\n\n * 이큐브랩의 전체적인 내용에 대한 교육(전사 대상)도 시작할 예정\n\n * 중국팀에 토니 신규 입사\n\n * 서동현 프론트 개발자 면접 예정\n\n * 2월달 회식\n   \n   * 2월 25일 월요일 예정\n\n * Jimmy에게 편지를 쓰고 싶은 사람을 위한 정보\n   \n   * 입영날짜: 2019.02.07\n   \n   * 생년월일: 940601\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/117506189"
  },
  {
    "pageContent": "2019-01-08 회의록 - S/W 주간 회의\n\n\nDATE\n\n2019. 1. 8.\n\n\nPARTICIPANTS\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nDISCUSSION TOPICS\n\nItem\n\nNotes\n\n주간 보고\n\n주간 보고 메일에 공유된 내용을 제외한 부분만 기록합니다.\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   \n   * 다음주 IOS 테스트를 위한 계정을 등록함\n   \n   * AOS와 IOS 기획간에 큰 차이는 없고, modal(팝업) 에서만 차이가 있음\n   \n   * AOS와 IOS를 공동 개발 할 수 있도록 래핑 엔진에 관한 리서치 예정\n   \n   * CCNX ios repo는 업데이트되고 있지 않은 상태\n   \n   * 브랜치 관리까지는 아니더라도, 커밋 추적은 가능하도록 요구됨\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   \n   * 명시해 놓은 스펙대로 AWS 리소스를 만들어주는 솔루션: Terraform, CloudFormation\n     \n     * 중국에서의 대처를 위해 Terraform을 고려중\n   \n   * on-premise를 위해 noti서버와 프로토콜 서버를 최지원 (Json) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n     이 작업 중이기 때문에 CCNx 백엔드 관련된 이슈는 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n     과 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     에게\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   \n   * solr 배포 완료, 서버 종료는 안 된 상태\n   \n   * ccn partner login 기능: 외부에서 CCN login을 할 수 있도록 제공하는 API\n   \n   * 채용 관련 업무는 이번 달 중순까지 진행될 예정\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * Kafka 메시지 큐를 위해 구현해야할 부분이 많음\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   \n   * 경로 최적화 개발 후임자는 정해짐 (연세대)\n   \n   * 사업비 중간 정리 진행 (with 션)\n   \n   * 인수 인계는 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n     와 erik에게\n     \n     * 남기철(Edgar) (Unlicensed)\n       [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n       가 연대 모듈을 인수\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   \n   * 베타 릴리즈 대비 개발 진행률은 약 65%\n   \n   * 메인 시나리오는 개발됨\n   \n   * 일정 관련\n     \n     * API를 15~16일까지 개발하도록 서버개발팀에게 요청\n       \n       * 지켜진다면 훈련소 입소일 전까지 베타 릴리즈를 위한 개발 가능할 듯\n     \n     * 일정이 빠듯하다면 시간 외 근무 후에 대체 휴가를 사용하도록이창훈 (Steve) (Unlicensed)\n       [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n       와 협의\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   \n   * CCNx 모바일에 포커스를 두고 작업 중 (웹은 아직 진행되고 있지 않음)\n   \n   * Google Material Design 플러그인을 작업에 사용했으나 스펙 공유면에서 지저분함\n   \n   * 만들고 있는 디자인 시스템의 브랜딩은 다시할 예정\n   \n   * 모바일 UI 컴포넌트 문서화에 시간 투자가 필요\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * CCB 일정 파악 후 priority 설정할 필요가 있음\n   \n   * 태국 POC 토신 보드 관련된 일정 다시 확인 필요\n\n전달 사항\n\n * 채용\n   \n   * 경과: 경력 3인(?)을 채용할 예정, 빠르면 다음 주부터 순차적으로 합류 예정\n     3명 모두 풀스택을 지향하지만, 중심은 백엔드인 듯 함.\n\n * SW팀 전체의 자리 재배치가 있을 예정",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/108691972"
  },
  {
    "pageContent": "2018-11-21 회의록 - S/W 주간 회의\n\n\nDATE\n\n2018. 11. 21.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nDISCUSSION ITEMS\n\nItem\n\nNotes\n\n주간 보고\n\n주간 보고 메일에 공유된 내용을 제외한 부분만 기록합니다.\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   \n   * CCNx API는 거의 완성된 상태, 현재는 on-premise 작업 중\n   \n   * CCNx API 변경 요청이 있을 것으로 예상\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   \n   * UI 작업은 대략 반 이상 진행되었고 컴포넌트 심볼화 작업 중\n   \n   * 지오펜스 기획은 나온 상태, 피드백 받아서 수정 중\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   \n   * @sean 미국 출장 후 피드백은 아직 받지 않은 상태. 주도적으로 먼저 피드백 받는 쪽으로 진행\n   \n   * CCNx 시나리오 문서 전달, 교육은 별도로 진행되고 있지 않음\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   \n   * 안드로이드 클라이언트 개발 계속 진행 중\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   \n   * 미국팀 시연을 위해 안드로이드와 비슷한 수준으로 시연 가능하도록 작업 진행 중\n   \n   * 금요일 퇴근 전까지 전달 예정\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * SDK에 문제가 있어 API를 사용하도록 구조 변경할 예정\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n   \n   * 많은 피드백을 주었으면 함\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   \n   * 프론트 세부적인 내용 개발 중\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * CleanCALL PoC, partner-api로 데이터를 가져갈 필요가 있어서 급하게 적용\n\n전달 사항\n\n * 차주 화요일 워싱턴 DC에서 시연 및 미팅이 있을 예정 (현지 시각인지, 한국 시각인지는 확실치 않음)\n\n * 개발 스프린트 도입 예정\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/100794442"
  },
  {
    "pageContent": "2018-11-12 회의록 - 계근대 회의\n\n\nDATE\n\n2018. 11. 12.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 향후 개발 계획 수립\n\n\nDISCUSSION ITEMS\n\nItem\n\nNotes\n\n현재 상황\n\n * 개발: 405 에러 구현안 됨\n\n * 커뮤니케이션: 금요일 밤에 API 개발 완료를 전달\n\n향후 개발 계획\n\n\n * 요구사항에 맞게 ccn-current 개발 필요 - 백엔드, 프론트 적절히 수정\n\n * 조회 기능만 필요 - ‘조회(제출)' 버튼 추가, 업체들이 ccn 프론트를 통해서 데이터를 조작(추가/수정/삭제) 불가\n\n * 워딩은 통계 페이지랑 비슷하게 하면 됨, 개발 시 통계 페이지를 참고하면 좋을 듯\n\n * 상단에는 filter (팝업이었던 필터를 top으로 이동)\n\n * 왼쪽에는 summary, 오른쪽에는 detail\n\n * 변경된 DB type에 대해 적절한 작업이 필요함\n\n * 모든 데이터 다 보여주는 것이 기본. 값이 null인 경우 N/A\n\n * 엑셀 데이터에서는 수정 히스토리는 보여줄 필요 없이 status(edited, deleted)를 나타내 주면 됨\n\n * 수정 히스토리 보여주는 건 list에서 각 메뉴에 collapse 버튼을 추가해서 구현, detail을 보기 위한 클릭과 구분되어야 함\n\n * CCN ‘실시간 현황’에서 ‘계근 이력 조회’ 버튼 클릭시 계근 페이지로 이동하면서 자동으로 필터 설정한 결과를 보여줘야 함\n\n * 왼쪽의 summary 테이블에서는 pagination 없이 스크롤을 함\n\n * '계근 업체 정보 팝업' 및, '계근 데이터 정보 팝업'을 위해 테이블에 정보 보기 버튼을 만들 예정\n\n * 나머지 내용은 기획 문서 참고 GK-86\n   [https://ecubelabs.atlassian.net/browse/GK-86?src=confmacro]\n\n * 확인 필요\n   \n   * ‘전체 데이터 다운로드’ 기능 현재 프론트에 있는 내용을 다운로드 하는지 확인, 백엔드에서 긁어오는지 확인\n     -> 백엔드에서 필터링된 데이터를 30개씩 페이지네이션 처리를 하여 가져옴\n   \n   * 필터의 업체가 하위 업체만 보이도록 구현되어 있는지 확인 → O\n\n * 1차 목표: CCN에서 데이터가 보이도록 구현\n   \n   * import 기능 삭제, 컬럼 추가, 필터 변경, summary 추가 구현은 추후에\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * 새로운 기획 추가 없이 현재 ccn에서 데이터들이 보이도록 개발\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/96763928"
  },
  {
    "pageContent": "2018-11-02 회의록 - CCNx 2차 개발 리뷰\n\n\nDATE\n\n2018. 11. 2.\n\n\nATTENDEES\n\n * @sean\n\n * @Ian\n\n * 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * @Charles\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 어디까지 시연할 수 있는 지에 대한 설명 및 피드백\n\n\nDISCUSSION ITEMS\n\nItem\n\nNotes\n\n기능 설명 및 피드백\n\n * 웹\n   \n   * 운행 상테에 따라 구분이 되도록 마커의 디자인(색상) 변경\n     \n     * 가상 쓰레기통 마커가 안 보이는 이슈에 대해 확인 필요\n   \n   * CCN의 기능을 점차 이식할 예정\n   \n   * '수거 일정 생성' 버튼에 포커스를 주기 위해 기획적인 고민 중\n   \n   * Q: 쓰레기통에 필수와 필수가 아닌 것이 있나?\n     \n     * 필수가 아닌 것은 적재량에 따라서 가지 않을 수도 있음\n   \n   * 수거 시작 시간 지정 가능\n   \n   * 최적화 경로 생성 후 ‘계산중입니다.’라는 화면이 일정 주기마다 reload되며, 계산에는 대략 30분 내외의 시간이 걸린다.\n     \n     * 시간을 줄일 수 있나?\n     \n     * 웹에 refresh 버튼은 없고 socket.io를 사용해서 실시간으로 업데이트되도록 할 예정\n   \n   * 만들어준 경로는 파란 색, 실제 이동한 경로는 빨간 색으로 표현되며 또한 트랙 리스트가 출력된다.\n     \n     * 트랙에서 루트 간의 구분을 주는 게 좋을 것 같음\n     \n     * 절반 정도만 진행된 상태로 시연할 수 있도록 더미 데이터를 구성해야 함\n   \n   * 타임존 적용 안 되어 있음. 변경된 기획에 대한 반영을 우선 진행할 예정\n\n * 모바일\n   \n   * 로그인 후 자신이 사용할 차량을 선택할 수 있는 화면 (with 즐겨찾기, 검색 기능)\n   \n   * 차량을 선택하면 웹에서 만들어 두었던 계획에서 선택한 차량이 갈 수 있는 경로를 보여준다.\n     \n     * 한 차량이 같은 시간에 최적화된 경로가 어떻게 두 개인가? 시간을 잘못 뿌리고 있는지 확인 필요\n   \n   * 모바일 Route overview는 웹에서와 같이 보인다. 마커는 아직 완전히 구현되지 않음. 마커에 순서를 어떤 방식으로든 표현해야\n     한다.\n   \n   * Route overview에 보이는 정보는 ‘마켓 앞’ 등의 정보를 보여줄 필요\n   \n   * 네비게이션에서 remain보다 진행도를 보여주는 게 좋을 듯\n   \n   * 입력 완료되었다는 알림을 보여줘야할 듯\n   \n   * 카드뷰를 끌어오는 부분은 저번 리뷰 피드백이 아직 반영 안 됨\n   \n   * ‘목적지로 설정'은 이미 지나간 부분 외에는 활성화되도록 해야 함\n   \n   * 카드뷰의 로드뷰는 google map api에서 긁어 옴\n     \n     * 너무 헤비하지 않나? 유저가 저장한 사진을 사용하거나 없다면 구글 api를 사용해서 긁어오고 캐싱하는 게 좋을 듯\n   \n   * 네비게이션에서 강제 종료 메뉴가 있어야 함\n\n * 시연 및 일정 관련\n   \n   * 현재 되는 부분을 리스트 업해서 알려줘야 함\n   \n   * 시뮬레이션에서 확인할 수 없는 기획들(구체적으로, 웹에서의 분석 화면)을 UI로 보여줄 수 있도록 pdf 만들어야 함\n   \n   * CCN의 기존 기능 마이그레이션, 라이브러리 변경에 따른 로드가 예상됨\n   \n   * 메이저 기능, 현재 시연되는 내용을 언제부터 쓸 수 있는가? 1월 초 정도로 생각 / 상용화는 2월 말 ~ 3월\n   \n   * 디테일한 일정은 11월 2주차(13~15일)에 결정\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/93421569"
  },
  {
    "pageContent": "2018-10-22 회의록 - 계근대 회의\n\n\nDATE\n\n2018. 10. 22.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 계근대 배경 설명 및 롤 배정\n\n\nDISCUSSION ITEMS\n\nItem\n\nWho\n\nNotes\n\n계근대 배경 설명\n\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n\n * 계근대: 고양시를 타겟으로 하는 CCN 하나의 feature.\n\n * 수거 차량이 매립지에서 계근을 하는데, 이 데이터가 매립지 PC에서만 처리되고 있음. 이를 전산화하기 위해 우리 쪽에 요구하고 있는 상태\n\n * 재작년 말부터 이야기가 나왔고, 작년에는 엑셀 파일을 업로드하는 식으로 처리\n\n * 실시간 연동에 대한 필요가 나옴\n\n * 고양시 리빙랩 사업이라는 새로운 사업\n\n * 요약하자면, 계근을 위한 API 제공 필요함\n\n * 결과가 11월까지 나와야 함\n\n * 계근 업체마다 보내는 정보가 달라서 모든 업체들 field를 포함하도록 db가 구현되어 있음\n\n계근대 개발 role 배정\n\n\n@All\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n   ccn partner api 리딩, CCN의 계근 부분 확인, DB 확인\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]이\n   개발 시 조언\n\n * Top priority: 개발기간 최소화, 인터페이스 기획의 무결성(계근 소프트웨어에서 차후 수정 없도록)\n\n * API 내부 코드의 최적화/퀄리티 컨트롤은 나중으로.\n\n\nACTION ITEMS\n\n *  \n\n\nDECISIONS\n\n * 시간을 top priority로 두고 진행하자.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/88702977"
  },
  {
    "pageContent": "2018-10-22 회의록 - S/W 주간 회의\n\n\nDATE\n\n2018. 10. 22.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 고정완 (Can) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5bc409cc43f0eb02ade6c6c5?ref=confluence]\n\n\nGOALS\n\n * 전 주 주간 보고 및 전달\n\n\nDISCUSSION ITEMS\n\nItem\n\nWho\n\nNotes\n\n2018/10/15 ~ 2018/10/19 주간보고\n\n\n@All\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   \n   * xcode 업데이트하면서 라이브러리 제약사항이 변해서 컴파일이 안 되는 상황\n   \n   * FM 진행 중\n   \n   * iPhoneX 이후 상하단 공간이 생겨서 화면 회전에서 처리하는 데 까다로운 문제 → 우선 화면 방향을 고정하도록 긴급하게 조치할\n     필요가 있을 것 같음\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   \n   * CCNx API 개발 중\n   \n   * 프론트 인력을 충원 제안\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   \n   * FM 개발을 열심히 진행 중\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * 연대 개발자 작업 환경 제공\n   \n   * FM 작업\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   \n   * 기획은 잘 진행되고 있는 것 같음\n   \n   * 기획서와 제플린의 아이콘(png) 크기가 다른 문제가 있음\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   \n   * FM 개발을 열심히 진행 중\n   \n   * 기존 ccn 앱(aos/ios)에서 러시아어 대응에 대한 needs 가 있음. 그래서 중국어 하는 김에 같이 반영해줬으면 함. 11월\n     초 전시회 예정\n   \n   * 안 쓰는 워딩은 최준호 (Simon) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]이\n     걷어내야 함\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   \n   * FM 관련해서 션이 말한 부분 계획 생성, 모니터링 합치고 있는 상황\n   \n   * 지오펜스 리서치는 최지원 (Json) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * 네비게이션 LA 오피스 주변과 볼티모어에서 테스트할 수 있도록 준비가 필요함\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * 이제까지의 문제는 커넥션 문제로 추정\n   \n   * mapper, parser 테스트 추가 작업 중\n   \n   * ttn에서 필요한 부분을 pr 날려줄 필요가 있다.\n\n기타 전달 사항\n\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 언어 변경에 따라 반영이 필요함. 러시아어 renewal\n\n * 환산기(환경산업기술선진화사업) 현장평가는 잘 넘어간 듯\n\n * 고양시 리빙랩 개발/적용 11월 말 최종, 12월 둘째주 까지 최종 보고서 작성, 그 쯤 실사\n\n * 우리가 설정한 KPI 를 만족했는지를 인증해주고 인증서(KORAS) 발급해주는 BWS 다음주 월(10/29) 방문(by HW팀)\n\n * LoRaWAN 인바운드가 많다. (잘 되면 전국 고속도로 휴게소 설치할 수도)\n\n * 연대 모듈 관련해서는 주마다 한 번씩 컨퍼런스 콜로 커뮤니케이션할 예정 (주요 업무는 주로 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   담당)\n\n * 계근대(강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]),\n   트래커(최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence])\n   프론트 변경 사항 예정 있음(11월 둘째주부터 해보쉬)\n\n * 오늘, 내일 recruiting 시작할 예정\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/88965204"
  },
  {
    "pageContent": "2018-10-18 회의록\n\n\nDATE\n\n2018. 10. 18.\n\n\nATTENDEES\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * 션\n\n\nGOALS\n\n * 1차 시연 후 기능 개선 및 이후 개발 우선순위 설정\n\n\nDISCUSSION ITEMS\n\nItem\n\nWho\n\nNotes\n\n1\n\n모니터링 차량 탭, 쓰레기통 탭 나누지 말 것\n\n션\n\n모니터링 하위 탭에 차량 탭과 쓰레기통 탭이 있는데 나눌 필요 없으므로 한 화면으로 합침\n\n차량 목록과 쓰레기통 목록이 함께 항상 나타나도록 함\n\n2\n\n모니터링 시설 탭 삭제\n\n션\n\n혹여나 계근대가 매립지와 연동되더라도 다른 곳에서 표시하면 되니까 삭제해도 됨\n\n3\n\n모니터링 및 새 계획 생성 통폐합 CU-168\n[https://ecubelabs.atlassian.net/browse/CU-168?src=confmacro]\n\n션\n\n차량 목록과 쓰레기통 목록을 함께 보게 되면 새 계획 생성 view와 모니터링 view 가 거의 같음\n\n모니터링 하다가 계획 생성 하기 버튼 누르면 계획 생성하는 flow 자연스럽게 타면 됨\n\n따라서 모니터링과 새 계획 생성을 합치도록 함\n\n계획 생성하는 버튼이 MAJOR 기능이므로 크고 잘 보이게\n\n예시) 모니터링에서 차량과 쓰레기통 보다가 ‘차량 배차’ 같은 버튼 누르면 차량과 쓰레기통에 체크박스 생기고 계획 일시 설정하는 버튼 생기면서\n계획 생성 모드 진입\n\n4\n\n계획 생성 시 차량 목록, 쓰레기통 목록 구분 필요 CU-169\n[https://ecubelabs.atlassian.net/browse/CU-169?src=confmacro]\n\n션\n\n계획 생성 시 나타나는 차량 목록과 쓰레기통 목록이 너무 비슷해서 헤깔림 (명확하게 텍스트로도 표시 필요)\n\n차량에 비해 쓰레기통이 압도적으로 많을 것이므로 쓰레기통은 카드 높이를 조절하든 쓰레기통은 table로 하든 해서 쓰레기통은 한 화면에 더 많이\n표시되도록 해야함. 이쁜게 중요한 게 아님.\n\n5\n\n계획 생성 시 차량 목록, 쓰레기통 목록 위에 실시간 현황 요약 정보 표시 CU-170\n[https://ecubelabs.atlassian.net/browse/CU-170?src=confmacro]\n\n션\n\n현재 운행 중인 차량이 몇 대인지, 적재량 높은 쓰레기통은 몇 대인지 정도의 간략한 정보를 각각의 카드 목록 상단에 표시\n\n6\n\n계획 상세 조회(경로카드 화면)에서 다시 계획 조회 화면으로 돌아갈 방법 필요\n\n션\n\n\n\n7\n\n계획 상세 조회(경로카드 화면)에 처음 진입했을 때 모든 경로를 지도에 다 표시하기 CU-171\n[https://ecubelabs.atlassian.net/browse/CU-171?src=confmacro]\n\n션\n\n기본적으로 계획에 속한 모든 경로를 다 표시해서 비주얼 쇼크 주기\n\n그 후에 하나씩 누르면 하나씩 보일 수 있고, 여러개 체크하면 여러 경로 동시에 조회하는 것도 가능하도록 하기\n\n8\n\n계획 상세 조회(경로카드 화면)이 모니터링화면과 구분되도록 UI 적으로 느낌 다르게 주기 CU-172\n[https://ecubelabs.atlassian.net/browse/CU-172?src=confmacro]\n\n션\n\nUI가 너무 똑같아서 사용자가 헤깔릴 수 있으므로 명확하게 구분해줄 것\n\n9\n\n계획 상세 조회(경로카드 화면) 타이틀바에 계획 이름 표시하는 것 없애기 CU-173\n[https://ecubelabs.atlassian.net/browse/CU-173?src=confmacro]\n\n션\n\n\n\n10\n\n계획 상세 조회(경로카드 화면)에서 경로 카드에 경로 이름 대신 차량 이름으로 대체하는 것이 좋을 것 CU-174\n[https://ecubelabs.atlassian.net/browse/CU-174?src=confmacro]\n\n션\n\n경로 이름이 너무 코딩 같고 어려우니 차라리 차량 이름으로 표시해주고, 경로 이름은 back에서만 쓰는 것이 좋을 것\n\n11\n\n계획 상세 조회(경로카드 화면)에서 경로 카드에 경로 상세 조회 버튼 눌러서 상세 화면 진입하는 것 OK\n\n션\n\n\n\n12\n\n계획 상세 조회(경로카드 화면)에서 PLAN 을 객관적으로 선택하는 버튼 추가 필요 CU-175\n[https://ecubelabs.atlassian.net/browse/CU-175?src=confmacro]\n\n션\n\n계획 상세 조회보다가 다른 계획을 조회하려고 할때 다시 계획 조회 화면으로 갔다가 다른 계획 카드 활성화해서 그 계획의 상세 조회로 들어오는\n것이 불편하니 계획 상세 조회화면에서도 보고자 하는 계획을 선택할 수 있도록 해야함\n\n13\n\n빵 부스러기를 단순 텍스트가 아니라 버튼으로 동작하도록 해야할 것 CU-176\n[https://ecubelabs.atlassian.net/browse/CU-176?src=confmacro]\n\n에릭\n\n\n\n14\n\n차량 및 쓰레기통에 대한 사용자 설정 태그 없애는 것 OK\n\n션\n\n충분히 필터로 커버칠 수 있을 것\n\n15\n\n자산관리는 워딩과 UI, 그리고 논리 몇 가지를 제외하고선 OK\n\n션\n\n이 부분은 지오펜스, 운전자 등등 관련해서 이슈가 더 있었고, 회의 후에 업데이트 할 예정\n\n16\n\n자산관리 자산 추가/수정 화면 CU-177\n[https://ecubelabs.atlassian.net/browse/CU-177?src=confmacro]\n\n션\n\n취소 버튼 없애고 우측 상단에 X 버튼으로 통일\n\n17\n\n자산관리 - 운전자 계정 생성/수정 화면 CU-178\n[https://ecubelabs.atlassian.net/browse/CU-178?src=confmacro]\n\n션\n\n사람에 대한 정보, 계정에 대한 정보 나눠서 배치하도록 (이름, 전화번호 등의 사람 정보를 위로 가게 하거나 ID, 비밀번호 등의 계정 정보를\n위로 가게 하거나 해서 분리되도록 한다)\n\n18\n\n‘업체’ → ‘소속’으로 워딩 변경 CU-179\n[https://ecubelabs.atlassian.net/browse/CU-179?src=confmacro]\n\n션\n\n업체가 아닐 수도 있기 때문에 더 포괄적인 소속이라는 워딩으로 변경한다\n\n19\n\n자산관리 - 지오펜스는 데모로 보여주기(시각화)에 좋은 기능이므로 자산 관리 중에서도 우선순위를 높임\n\n션\n\n\n\n20\n\n자산 관리 - 지오펜스 저장 시 알림창 CU-180\n[https://ecubelabs.atlassian.net/browse/CU-180?src=confmacro]\n\n션\n\n지오펜스 저장 버튼 누르면 해당 지오펜스에 쓰레기통 n개, 시설 m개가 포함되고 각각의 목록은 이렇습니다. 진행하시겠습니까? 하는 알림창\n띄워주기\n\n21\n\n자산 관리 - 지오펜스 겹치지 않게 유도하는 알림창 CU-181\n[https://ecubelabs.atlassian.net/browse/CU-181?src=confmacro]\n\n션\n\n지오펜스 저장 버튼 누르면 겹치는 지오펜스가 있습니다 라는 알림 주고 어떤 지오펜스랑 겹치는지 지도에 표시해주기\n\n이게 가능한지 개발팀에서 확인 필요 (지오펜스가 겹친다는 것을 체크할 수 있는지 여부)\n\n22\n\n자산 관리 - 쓰레기통 CU-182\n[https://ecubelabs.atlassian.net/browse/CU-182?src=confmacro]\n\n션\n\n쓰레기통 설정에서 지오펜스를 선택하는 것이 아님\n\n지오펜스가 설정되고 그 안에 쓰레기통이 들어오는 것이므로 지오펜스가 생성되면 그 안에 포함된 쓰레기통에는 자동적으로 해당 지오펜스가 등록된다.\n\n물론 쓰레기통 설정 화면에서도 어떤 지오펜스에 속해있는지 표시해줄 것임\n\n23\n\n자산 관리 - 차량 CU-183 [https://ecubelabs.atlassian.net/browse/CU-183?src=confmacro]\n\n사이먼\n\n차량 설정에서 지오펜스는 선택하는 것이 맞음 (차량은 위치가 가변적이므로)\n\n24\n\n자산 관리 - 차량 추가/수정 화면 CU-185\n[https://ecubelabs.atlassian.net/browse/CU-185?src=confmacro]\n\n션\n\n차량 추가/수정화면에서 지오펜스에 대해서도 등록을 해야하는데, 그러기 위해서 지도를 추가하여 지오펜스를 보면서 추가할 수 있도록 한다\n\n25\n\n자산 관리 - 쓰레기통, 차량 에는 지오펜스는 우선 1개씩만 등록 가능 CU-186\n[https://ecubelabs.atlassian.net/browse/CU-186?src=confmacro]\n\n션, 사이먼\n\n지오펜스는 우선 1개만 등록할 수 있도록 하며, 지오펜스가 서로 겹치지 않도록 UI 적으로 배려가 필요\n\n지오펜스에 대하여 여러 개 등록의 needs가 생기면 나중에 여러개 등록될 수 있게 조정\n\n기존 지오펜스 A가 있고 지오펜스 B를 새로 생성하여 A와 B가 겹치는 경우의 정책: 쓰레기통에 기본적으로 A가 입력되어 있을 시에는 B로\n덮어씌워지지 않는다\n\n26\n\n자산 관리 -차량 CU-187 [https://ecubelabs.atlassian.net/browse/CU-187?src=confmacro]\n\n션\n\n차량을 생성하면 기본적으로 모든 쓰레기통이 할당되어 있는 것이 default (차량에 등록된 쓰레기 종류, 지오펜스 등으로 할당된 범위를\n줄여나가는 process)\n\n차량에 별도의 할당 과정을 안하는 게 major 시나리오이기 때문에 전체에서 할당 범위를 조건에 따라 점점 줄여가는 방향으로 가야할 것\n\n27\n\n연대 모듈 성능 테스트 필요 CU-188\n[https://ecubelabs.atlassian.net/browse/CU-188?src=confmacro]\n\n션\n\n주로 사이먼이 sub로 에릭이 함께 연대 모듈 성능 테스트를 한다. 휴먼 러닝 vs 최적화 모듈\n\nsmall case에 대해서 최적화 모듈이 사람이 한 것보다 좋거나 같게 나오는지 테스트 (빠른 시일 내에 테스트 필요)\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/88080391"
  },
  {
    "pageContent": "2018-10-18 회의록 - CCNx 웹 변경 사항 공유 및 일정 조율\n\n\nDATE\n\n2018. 10. 18.\n\n\nATTENDEES\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n\nGOALS\n\n * 18일 오전 션, 에릭과 회의 후 웹 기획 변경 사항 공유와 향후 일정 대략적으로 조율\n\n\nDISCUSSION ITEMS\n\nTime\n\nItem\n\nWho\n\nNotes\n\n30min\n\n\n\n\n웹\n\n최준호 (Simon) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n모니터링과 새 계획 생성이 합쳐질 예정\n계획 조회가 더 아름답게 변경\n계획 상세 조회 페이지에 경로 이름은 굳이 필요 없고, 어떤 차량의 경로 1 이런 식으로만 표현해도 될 것\n\n\n작업은 일단 지오펜스 관련해서 들어갈 것 (리서치 등)\n\n\n모바일\n\n\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n\n모바일은 지난 시연때 한 내용을 더 매끄럽게 하면 될 것\n\n언어 관련\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n영어 번역 필요함 - GBD 존 을 붙여서 작업할 것\n\n연대 최적화 모듈 관련\n\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n연대 모듈 이문형 석사에게 일하라고 푸시 필요\n\n개발 일정\n\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n아무 일 없으면 2월까지 완성으로 해도 되겠지만 그럴 수가 없기 때문에 1달 늘리는 것이 적당할 것\n\n11월까지 최우선적으로 계획 생성 및 모니터링, 계획 조회와 경로 조회 완성\n\n지오펜스는 아무런 기반 없이 하는 것이라서 이것만 해도 2주 정도는 걸릴 것\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/88080412"
  },
  {
    "pageContent": "2018-10-16 회의록 - CCNx 1차 개발 리뷰\n\n\nDATE\n\n2018. 10. 16.\n\n\nATTENDEES\n\n * @Sean\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * 고광준 (Erik)\n   [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * @can\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n * 연대 석사님\n\n\nGOALS\n\n * \n\n\nDISCUSSION ITEMS\n\nItem\n\nNotes\n\n웹 리뷰 및 피드백\n\n * 시연\n   \n   * 모니터링 뷰 only + 계획 관리 일부 개발된 상태\n   \n   * 계획 생성에서 제출 누르면 계획 조회로 넘어감\n   \n   * 시작 시간이 현재로부터 좀 멀다고 할 때는 alert\n   \n   * 계획 조희에서 계획 상태별로 확인할 수 있음.\n   \n   * 계획 조회에서 각 카드를 선택하면 세부 정보를 확인할 수 있음 (경로 이외의 값은 아직 더미 데이터)\n   \n   * 카드의 ‘상세 조회’를 누르면 지도 뷰와 함께 세부 정보를 볼 수 있음\n\n * 피드백\n   \n   * 의견: [계획 조회]의 ‘최적화 실패’의 이유와 해결책을 알려줘야 하는 것 아닌가? 사용자가 이 부분을 보고 어떻게 수정할 거라 가늠할\n     수 없을 것 같다. 또한 ‘실패’라는 워딩에도 문제가 있는 것 같다. 디렉션이 명확해야 할 필요.\n   \n   * 답변: 연대에서 최적화 실패하는 경우에 대한 케이스들을 리스트 업해서 전달받을 예정. 그래서 생성 불가한 경우에는 미리 생성 못 하게\n     하고, ‘실패’한 경우에 사용자에게 안내하도록 구현할 예정\n   \n   * 의견: 모든 경로에 해당하는 모든 쓰레기통을 다 보여줘야 하는거 아닌가? 경로에 포함되지 않는 쓰레기통은 비활성화된 회색으로 보여주는\n     식으로 다 보여주는 게 어떤가?\n   \n   * 답변: -\n   \n   * 의견: 예상 시간, 거리보다 몇 개 쓰레기통 정도를 커버할 수 있는가를 보여주는 게 낫지 않은가?\n   \n   * 답변: accept\n   \n   * 의견: [계획 생성]에서 단위 면적이 크게 되면 마커 구분이 의미가 없으므로, 선택되었을 때 활성하는 게 어떤가? 즉, 마커가\n     사용자에게 더 의미있게 받아들어질 수 있도록. 마커 사이즈, 색깔, 모양을 변경. 내가 오늘 담당해야 하는 쓰레기통에 대한 마커에\n     포커스가 가도록.\n   \n   * 의견: 사용자가 계획을 생성하는 느낌을 받도록 마커와 관련된 UI를 변경할 필요\n   \n   * 의견: [계획 생성]이 본 서비스에서 가장 중요한 부분. 기본 뷰\n   \n   * 의견: [계획 생성]의 팝업 괜찮은가?\n   \n   * 답변: 기본적으로 시작 일시만 보이도록 할 예정\n   \n   * 의견: 계획 조희 화면에 도착했을 때 최적화가 됐는 지 어떻게 알지?\n   \n   * 답변: 아직 모듈에서 계산하고 있다면 '계산중' 이라는 화면이 있다.\n   \n   * 의견: 계획 조회 UI가 너무 딱딱한 느낌. 이 화면에 들어왔을 때 ‘계산중’이라면 조금 더 친절하게 어느 정도 시간 안에 다시 확인할\n     수 있는지 등 안내가 주어져야 할 것 같다.\n   \n   * 의견: 최적화 실패시 삭제 가능? 그 기록은 남아 있는가?\n   \n   * 답변: (긍정)\n\n모바일 리뷰 및 피드백\n\n * 시연\n   \n   * 수거량 등은 API가 아직 개발되지 않아서 구현 못함\n   \n   * 차고지, 매립지, 결과 조회 아직 안됨\n   \n   * 경로에서 아이템을 누르면 지도에서 클로즈 업됨\n   \n   * 경로 상세 맨 아래에는 다음 쓰통까지의 시각, 거리\n   \n   * 경로 상세 우측 하단에 메뉴 버튼을 누르면 차고지, 배출지로 이동 나옴\n   \n   * 운전자 아이디는 CCN DB 상에서 운전자 권한이 추가된 계정\n   \n   * 차량 선택의 하단의 파란 버튼은 주행 모드\n\n * 피드백\n   \n   * 의견: [경로 개요]에서 자동차 아이콘보다 조금 더 의미가 명확하게 드러나도록 텍스트로 하는 게 어떤가? ‘시작’ 같은 워딩으로\n   \n   * 의견: 경로에서 아이템을 눌렀을 때 적재량도 표시되는가?\n   \n   * 답변: 기획과 개발 사이에서 커뮤니케이션이 안 됨. 적재량 넣도록 조치\n   \n   * 의견: 커버할 쓰레기통은 어디서 볼 수 있는가?\n   \n   * 답변: [경로 선택]\n   \n   * 의견: [경로 선택]에서 여러 경로가 나왔을 때는 사용자가 혼란스럽다고 느낄 수 있는데, recommend하는 경로를 포커스 표시해주는\n     게 어떤가? 친절하게\n   \n   * 의견: 경로가 여러 개 나오는 경우가 있을 수 있나?\n   \n   * 답변: 차가 여러 번 수거를 나가는 경우에 가능\n   \n   * 의견: [경로 선택] 예정됨, 진행중, 완료됨인데, 진행중은 priority가 더 높아야 함.\n   \n   * 답변: 진행중은 진행중에 예상치 못 하게 포커스를 잃었을 때를 위해, 나중에 해볼 수 있도록. 앱을 다시 켜면 진행중인 경로가 있다는\n     알림 후 바로 네비게이션 화면으로 안내됨. 완료됨은 24시간 이내에서 보임.\n   \n   * 의견: [경로 상세] 시 저장이 된 건지, 다음 쓰통으로 넘어간 건지를 잘 알기 힘들다. 더 친절할 필요가 있을 것 같다. 현재의\n     ‘수거 완료’, ‘경로 안내 중’은 운전자가 어떤 상태인지 확인하기 힘들 것 같다. 조금 더 포커스를 줄 필요가 있다.\n   \n   * 의견: [경로 상세]에서 수거하기가 덮어씌워지는 건이 이상하다.\n   \n   * 의견: [경로 상세] 맨 아래의 시각, 거리는 조금 더 친절할 필요가 있다. 몇 분 남았는지를 나타내는 시간은 어떤지 (중요하지 않다고\n     언급)\n   \n   * 의견: 저장된 이슈가 존재한다는 표시가 있어야 한다.\n   \n   * 의견: 수거량 입력 후 이슈가 없어도 이슈 입력해야 하는가? 메이저 시나리오에 무조건 이슈가 있는가? 무조건 하지 않아도 되는 상황에\n     부딪히면 사용자가 당황해할 수 있다.\n   \n   * 답변: 수거량 부분에 저장하기 버튼 추가\n   \n   * 의견: [경로 상세]에서 다음 목적지를 접었다가 다시 펼칠 때 조금 헷갈릴 수 있을 것 같다. 버튼을 사용하든지, 카드 뷰 노출을 더\n     시키든지, 스와이프 효과(좌우보단 상하가 낫지 않은가?)를 변경하든지. 접히는 버튼도 직관적이지 않은 것 같다.\n   \n   * 의견: [차량 선택]에서 이전에 선택한 차량이 최상단에 나오도록\n   \n   * 의견: 기획이 바뀐 데에 대한 타당한 이유가 필요할 것 같다.\n\n향후 계획\n\n * 11월 초까지에 대한 계획 수립 후 전달 (금요일)\n\n\nACTION ITEMS\n\n * \n\n\nDECISIONS\n\n * 서비스를 사용하는 메이저 시나리오에 초점을 맞추자.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/87097539"
  },
  {
    "pageContent": "2018-09-03 회의록 - S/W 주간 회의\n\n\nDATE\n\n2018. 9. 3.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 2018-08-27 - 2018-08-31 주간 보고\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes1hour\n\n2018-08-27 - 2018-08-31 주간 보고\n\nALL\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   * 세팅 일부와 에러 로그 부분 개발 정도 남음\n   * 통신 실패했을 때도 ELK로 로그 날리기로 이호준 (Jimmy) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]와\n     논의함\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   * 관리 페이지 접근이 public했었는데 OAuth 도입\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   * 서버 각각에서 cronjob이 실행되어 중복되던 부분을 제거하고 쿠버네티스로 옮김\n   * chart: 환경을 쿠버네티스 스펙으로 명세하는 파일\n   * 팟: docker container와 비슷한 쿠버네티스의 개념\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   * 저스틴이 AMCS라는 회사를 보여주면서 여기서는 되는데 우리 회사에선 되는지를 물어봄. 이런 부분도 이슈로 관리해야 한다.\n   * JMFuture 쪽 클라이언트와 단 둘이서 컨택했음 (앱 사용법 설명). 하지만 고객 관리 담당자가 직접 컨택해야 함\n   * JMFuture 쪽에 instruction을 전달했지만, 무시하고 직접 설명을 들으려고 했다고 함.\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   \n   * 네비게이션 음성안내 리서치에 대한 니즈: 텍스트로만 보이면 어노잉할 수 있으므로 (by erik)\n   * 맵박스를 그대로 사용하기엔 애매하고, 라이브러리 코드 수정 등 다른 방법이 필요함. 신중하게 결정할 필요가 있음. (현재 ios은\n     커스텀이 지원된다고 함. android는 아직 안 됨)\n   * 3차 검수 중 OSRM 서버에 문제가 생겨서 경로 검색에 대해서만 검수하지 못 했음. OSRM 관련 부분은 skip하고 진행하기로\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   * 모바일 스토어에 들어가는 내용 모두 전달 완료\n   * 모바일 UI/UX 디자인 작업 중이고 아마 이번 주 내에 전달 가능할 것으로 보임. 다음 주부터 CCNX 웹 기획 작업을 들어갈 예정.\n   * 최준호 (Simon) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]이\n     CCNx 웹 기획에 대한 피드백을 수요일 쯤에 @erik에게 받을 예정\n   * waste bits.com  사이트를 전달받고 MP(Matching Platform)에 대한 기획을 2주 동안 진행했다고 했음.\n   * 우버, 루비콘 등 관련된 서비스에 대한 리서치 진행\n   * 리서치 등에 대해서도 이슈로 잘 관리하길 당부\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * logger가 개발에서 필요하다고 판단된다면 진행\n   * 데이터 concatenation 부분 수요일까지 마무리\n   * DA는 pending 상태\n\n\n기타 사항이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n사우디 아라비아 on-premise에 대한 선금을 7월 중에 받았고, 이번 주 중에 나머지 잔금을 받기로 함.\n\nAWS 사용에 대해 긍정적인 반응을 보임. 모바일도 타겟에 맞게 제공해야 할 필요도 예상됨.\n\n마이그레이션이 조만간 시작될 걸로 생각되니, dockerize 등 자동화 필요함\n\nPoC: Proof of Concept 시범 사업\n\n\nACTION ITEMS\n\n *  ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/67240025"
  },
  {
    "pageContent": "2018-08-28 회의록 - S/W 주간 회의\n\n\nDATE\n\n2018. 8. 28.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 2018-08-20 - 2018-08-24 주간 보고\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes25min팀장 회의 내용 공유이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n * GBD팀\n   * 새로운 인원들 트레이닝 중, 의사소통이 잘 되지 않아 시간이 길어질 것 같은 이슈는 이창훈 (Steve) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]에게\n     전달\n * H/W팀\n   * 호주/미국/독일 LoRa 이슈 급행\n   * 중국 NB-IoT 주말동안 H/W 테스트 후 이창훈 (Steve) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]가\n     이번 주 월요일에 문서를 전달한 상태\n   * 관련해서 아마 이창훈 (Steve) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]와 강승현\n     (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]이 중국에\n     갈 것으로 예상 (한 달 이후?)\n   * CCB 통신 보드에 문제가 있어 보임\n   * CleanCALL 디자인 변경 (회전 방식 → 버튼 방식)\n * MD팀\n   \n   * CCB MP3 : 전면도어 방수스티커 장착\n   * FULL SUS Cube에 대한 needs가 있어 개발 중\n   * 오랜 기간 이슈였던 구동부에 대한 개선을 본격화\n * CS팀\n   * 제거했던 tilt 기능에 대한 needs가 있음\n   * 우리가 생각하는 적재량과 클라이언트가 생각하는 적재량에 대한 개념이 달라서 계속해서 conflict 발생\n   * 계근대 본격화해야 하기 때문에 방향을 제시하는 미팅이 필요함\n   * GBD팀에서도 계근대에 대해 브랜딩하기 시작함\n   * 캐리비안 베이에서도 테스트 중\n * Matching Platform: 연말에 개발 돌입해서 내년 중순쯤\n\n45min\n\n2018-08-20 - 2018-08-24 주간 보고\n\nALL\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   * 지난 주에 이어 데이터 구조&처리 방식 변경 진행 중\n   * 필터링 부분 마무리 되어서 라우팅 진행 재개, 이번 주에 마감할 예정\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   * 쿠버네티스 모니터링 대시보드에 대한 setting이 날아감 \n   * ICO 계정 생성해서 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]에게\n     전달\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   * 세션 관련 cookie 대신 local storage로 변경할 예정\n   * Relay 문제는 화웨이 문제와는 관련이 없어 보임\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   \n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     요청으로 ELK 로깅\n   * SSM: Simple Systems Manager\n   * 계산 시간이 길어질 수 있으니 연대 모듈 서버가 요청 받은 후 200 응답 후 callback과 내부 큐로 작업\n   * OSRM\n     * OSRM이 전 세계 대상이어서 계산에 2시간..?\n     * osrm-routed는 프로덕션 용이 아니라 직접 개발하는 게 좋을 것 같아 보임\n     * SWAP memory 관련 이슈가 있음\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   * 차량 할당 관계에 대해 고민 중\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   * 웹 작업, 백서 수정 작업 중 ICO 일정이 지체될 가능성을 발견하고 아이템에 대한 준비를 먼저 하는 쪽으로 방향 수정\n   * 백서 내용이 오늘 새롭게 업데이트됨\n   * CCNx 웹은 최준호 (Simon) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence],\n     모바일 작업 진행 중\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   * CCN Android V2: 3차 검수 마무리 후 배포 예정\n   * 키오스크\n     * MDM: 모바일 단말기들을 원격으로 조종할 수 있는 서비스 (사용자가 특정 기능을 사용하지 못하도록 제어함)\n     * 가능하다면 Android Management API를 사용하고 싶지만 시간이 부족함, 아직 stable하지 않은 상태\n     * 키오스크에 대한 리서치는 pending\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   * Redis KEY 만료되는 시간에 대해 적절히 정할 필요가 있음, 1시간은 너무 길다.\n\n\nACTION ITEMS\n\n *  ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/62095521"
  },
  {
    "pageContent": "2018-08-21 회의록 - S/W 주간회의\n\n\nDATE\n\n2018. 8. 21.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 2018-08-13 - 2018-08-17 주간 보고\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes40min\n\n2018-08-13 - 2018-08-17 주간 보고\n\nALL\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   * response 변경 완료되어서 작업 재시작\n   * 데이터 처리 방식을 바꾸고 있어서 라우팅 작업 보류 중\n   * 키워드 검색까지 고려해서 데이터 구조나 처리 방식을 변경하는 것이 좋을 듯\n     * 키워드 검색: description, serial\n     * GBD쪽에서 제품 찾기가 힘들다는 complain이 들어왔음\n   * 한국/미국 대상으로 네비게이션 제공, 한국 - 카카오 내비, 미국 - ..? by Sean\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   * 상해를 제외하고는 모두 쿠버네티스로 전환됨\n   * ICO WordPress에 CDN 붙일지에 대해선 정해진 것 없음\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   * Nexus 테스트 정상적으로 완료\n   * 구글 맵 아이콘 문제는 구글 쪽에서 아이콘 랜더링 방식을 임의적으로 바꿔 발생한 것으로 보임\n   * AWS image resize 확장자 없는 파일 경우: 쓰레기통 최신 이미지 불러올 때\n   * VPN 구축 완료\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   * 이미지 리사이즈 스테이지 서버에서는 완료했지만 프로덕션에서는 SSM 관련한 문제가 생김\n     * SSM(Simple Systems Manager): AWS에서 제공하는 private key를 위한 서비스\n   * 연대 모듈에 우선 순위를 두도록 고려\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   * 목, 금요일에 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]와 같이\n     웹 스토리보드 작성할 예정\n   * 연대 연락 없음\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   * 이호준 (Jimmy) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]가\n     FM 작업하면서 생기는 디자인적 이슈 해결\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   * 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]가\n     다른 업체에 OEM을 맡기는 방법을 제시해서 기존 방법과 함께 검토 필요\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * 코드 리뷰 중 우선순위가 높은 이슈 발견\n   * 우선순위를 고려해서 진행\n\n\n\n\n\n\nACTION ITEMS\n\n *  ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/61177882"
  },
  {
    "pageContent": "2018-08-13 회의록 - S/W 주간회의\n\n\nDATE\n\n2018. 8. 13.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 2018-07-31 - 2018-08-10 주간 보고\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes2018-07-31 - 2018-08-10 주간 보고ALL\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   * Elasticsearch cluster service가 있으나 현행보다 더 비쌈.\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   * 기존 CCN에서 FM 분리 작업 우선 중지 (FM 일정 때문, 10월 둘째 주)\n   * API 교체 작업은 이번 주까지 진행할 것으로 예상\n   * FM IOS 단일앱은 가능하나, 기기 부팅 시 런쳐 실행을 위해서는 루팅 필요\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   * Jira는 그룹 멘션이 되지 않음\n   * 이큐브 랩 계정 생성하면 자동으로 Jira 계정 생성되도록 변경\n   * CS팀과 GBD팀의 경우 업무별로 프로젝트를 나누지 않고 팀별로 프로젝트를 나눔\n   * Danny가 Jira 잘 사용할 수 있도록 서포트 필요\n   * Logistics 프로젝트에서 여러 가지 커스터마이징이 가능하도록 세팅했으니 needs가 있다면 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]에게\n     연락\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   * CCL 데모 제품은 cap인데 예외 처리되어 있는 상태\n   * FM 이전에 발견되어 기록했던 버그들에 대한 디버깅\n   * 연대 모듈 웹 인터페이스 작업은 아직 GBD와는 공유되지 않음\n   * OSRM 최신 릴리즈의 최신 맵을 반영 중\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   * 전달받지 못한 내용 제외한 부분 ICO 백서 작업 완료, 디테일한 작업 더 필요함.\n   * CleanCOMPOSITOR: 음식물 쓰레기를 넣으면 채굴 개념? 가상의 기계\n   * 페이지를 위해 aws까지 쓸 필요는 없을 것 같음.\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   * JMFuture 요청 사항 전달\n   * 운전자라는 개념이 기존에는 없었지만 추가되었음\n   * 테스트를 위한 태블릿 구매 (키오스크 전용 단말이 아닌 기존 단말 사용)\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   * WWFM 데이터가 오래되어 업데이트 위해 조사했으나 별다른 변동사항 없었음\n   * FM 기획에 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence] 는.ICO\n     작업 때문에 잠시 제외되어 있는 상태\n   * 사이먼이 작성 후 에릭에게 피드백을 받는 식으로 FM 기획 문서화 진행 중\n   * 공무원에게 APK로 직접 설치해서 기기 전달\n   * 추가 기능 요청에 대해서는 잘 대처해야 함\n\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   \n   * 여러 기기 대상으로 테스트가 필요한 상황\n\n\nACTION ITEMS\n\n *  ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/59146382"
  },
  {
    "pageContent": "2018-08-10 회의록\n\n\nDATE\n\n2018. 8. 10.\n\n\nATTENDEES\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * Harrison\n\n * Danny\n * Ray\n\n\nGOALS\n\n * 어쩌다보니 끌려와서 정확한 목적을 파악하지 못한 상태\n * 안그래도 쓰려고 했는데 회의록을 작성하자고 말씀하셨다.\n * 여기서 얘기하는 아이템을 파악해야한다...\n   * 아래에 대충대충 적었다... 아아... 넘시러\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes\n * 사업에 적합한 아이템이 맞는가? 얘기가 필요함\n   * 기후 협약에서 인증하는 탄소 배출권을 발급하는데. 그것의 대상으로 볼 수 있는가?\n     * 그 가능성이 있겠다고 판단해서 우선적으로 출발(시작?)하게 됐다.\n   * 이 쓰레기통을 씀으로써 얻는 이점이 무엇인가.\n   * CDM - 청정개발체제\n     * CPOA\n     * Urban CDM\n     * ?? 더 말하는 부분들은 잘 모르겠고...\n   * 잠시 자리 비워서 내용들 못들음\n   * 탄소배출량 인증\n     * UN - CDM\n       * UNFCCC\n   * community micro grid\n   * on grid\n   * op grid\n   * 모니터링\n     * Co2\n     * 트래커\n     * MRV\n   * 기존에 정리된 특허 문서들은 Conceptial?? design이라고 한다.\n   * CCN 메뉴얼을 잡으며 – 트래커나 캡, 큐브 등의 제품을 사용하면서 효과가 잘 정리되어야 한다.\n     * 수치적으로도 포함\n     * 기술적인것도 좋지만 실질적인 자료가 있어야 한다.\n     * 그래서 실제로 솔루션을 적용을 했을때 어땠냐? 강조...\n   * documentation을 하기전에\n     * 방법론이 개발이 되어야 한다\n       * (청정 어쩌구)CER? 을 어떻게 할것이냐가 나와야 한다.\n     * 문서를 작성할 때 들어가는 내용들(제품 스펙 등?)도 당연히 고양시에 적용했던 내용으로 해야한다.\n     * 기존 쓰레기통에 대한 내용을 적고, (녹음 시작 시점)\n       * (수거할 때의?) 무게, 화석 연료 소비량, 차량 등 관련 내용을 다 적어야 한다.\n     * 우리 제품에 대한 내용을 적어야 한다.\n       * 감축 시나리오를 적어야 한다 → 여기서 말한 감축이 압축 말하는건가?\n     * 이런 차이를 가치로 환산한걸 28년까지 인정한다??\n       * 이 보상으로 받는 돈을 누가 가져갈지도 협의가 되어야 한다는듯\n     * 탄소 배출량같은 데이터를 그래프나 테이블로 정리하는게 필요하다고 얘기하는듯 하다.\n     * 자료의 신빙성은 Smart tech가 보장한다.\n   * PDD\n   * 필요한 작업\n     * 전반적인 이해\n     * 자료\n     * 실제로 어떻게 적용했느냐 – actual application data?\n     * 메뉴얼에 있는 내용에서도 서술식으로 작성된 내용 말고 데이터에 기반한 자료가 만들어져야 한다.\n     * 리빙랩 (테스트 베드)\n       * 이큐브랩이 리빙랩 프로세스를 얼마나 충족했느냐가 있어야 한다.\n       * 그래야 국제화를 할 때 필요할것이다\n       * 원래 리빙랩은 시민의 참여가 필요하다?\n       * 그래서, 시민 참여형 IoT 프로젝트다?\n       * 서울 – 그린카드 → 해외는 이런 크레딧을 코인으로 해준다. → 매칭플랫폼 컨셉 아닌가?\n     * CDM improved cdm project?\n   * 이후\n     1. 자료 9월까지\n     2. 기술스펙 10월\n     3. 잠정적으로 11월 말까지 보고서 형태?\n     4. 전문가 초정해서 의견을 들어야 한다.\n     5. 자료 보완\n     6. PDD?\n     7. 결국 19년 말까지?\n\n\n\n\n\n\nACTION ITEMS\n\n *  ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/59080757"
  },
  {
    "pageContent": "2018-08-01 회의록 - S/W 주간 회의\n\n\nDATE\n\n2018. 8. 1.\n\n\nATTENDEES\n\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * 2018-07-23 - 2018-07-27 주간 보고\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes40min2018-07-23 - 2018-07-27 주간 보고ALL\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n   * 테스트 폰은 남기철(Edgar) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence] 의\n     지원\n   * 아이패드 단일앱 제한 기능 여부 조사: CCNx 외 데이터 사용 못 하도록\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n   * ERP, CCN-current 등 쿠버네티스에 올라가 있는 상태\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n   * 고정 IP가 필요한 인스턴스의 안정성을 위해 사용할 NLB 테스트\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n   * 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n     요청으로 텔레그램 릴레이 서버 업데이트, 쿠버네티스와 관련된 부분 모듈 업데이트\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n   * FM 보고(to Sean)에서 기능 명세나 디바이스 관련한 문제에 대한 이야기가 나왔음\n   * ICO 웹을 위해 AWS 인스턴스, 도메인 등이 필요함. 도메인을 위해 계정을 새로 파야 할지도\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   * CCNx 외 데이터 사용 못 하도록 Single-Use Device에 대해 리서치\n   * 병특. 시뮬레이션 정도만 연습해보면 되는 정도\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n   * 웹 기능 정리 문서 작성은 고광준 (Erik)\n     [https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence] 과 박기석\n     (Peter) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]의\n     요청에 의해 작성\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n   * HW팀과의 논의 과정에서 변경될 수 있는 부분에 대처할 수 있도록 유연한 설계 필요\n   * pure한 node로 구현할 예정 \n   * 비슷한 플랫폼들이 추가될 상황이 예상되기 때문에 설계 및 문서화 주의\n\n\n2018-08-02 - 2018-08-10 일정 관련이창훈 (Steve) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n * 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence]\n   휴가. 한국 기준 오전 시간에 업무가 가능함. 이창훈 (Steve) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad8434d2dc58f2b3a95325a?ref=confluence] 에게\n   연락이 안 되고 급한 CS 관련 이슈가 있을 경우 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence] 에게\n   전달\n * SmileCorp Boss 방문 예정\n\n\nACTION ITEMS\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence] ICO\n   웹 도메인 신청 관련 리서치 (계정, 소유자 등..) \n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence] 최지원\n   (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence] 연대\n   회의 2018. 8. 9.\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence] 언제할\n   지 모르는 팀장 회의 (for Jira)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/54198341"
  },
  {
    "pageContent": "2018-07-26 회의록: Git Branch 관리 전략\n\n\nDATE\n\n2018. 7. 26.\n\n\nATTENDEES\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n\n * 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\nGOALS\n\n * Git Branch 관리 전략\n   * 브랜치를 어떻게 다룰지 질문이 나오는 상황을 만들지 않기 위함\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes10min브랜치 관리 전략ALL\n * Git branch & merge 가이드 (Web)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51216589/Git+branch+merge+Web]\n   * 여기다 최신 반영했다\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/53313757"
  },
  {
    "pageContent": "2018-07-24 회의록: FM 모바일 API\n\n\nDATE\n\n2018. 7. 24.\n\n\nATTENDEES\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n * 박종인 (Meta) (Deactivated)\n   [https://ecubelabs.atlassian.net/wiki/people/5b303d9e2edfe82d8a3dd0a3?ref=confluence]\n\n\nGOALS\n\n * FM 모바일 API 명세 구체화\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes80minAPI 논의ALL\n * 드라이버 생성은 웹에서. 즉, 모바일 API에는 포함되지 않음.\n * API list\n   * 드라이버 로그인 API\n   * (미정) 드라이버 비밀번호 찾기 / 재설정 API\n     * 드라이버 생성에 대한 결정을 하고 난 후에 다시 이야기하기로 함\n   * 차량 목록 API\n     * 운행중인 차량에 대해서 disabled 표시\n     * disabled는 경로 종료(사용자의 직접적인 종료 액션 혹은 사용자의 액션이 없는 채로 3시간이 지난 후 자동 종료)가 되었을 때\n       해제됨.\n   * 차량 정보 API\n   * 쓰레기통 목록 API\n   * 차량 제품 할당 API\n     * 기존과 동일?? → 정확한 동작성의 설명이 필요하다.\n   * 경로\n     * 자율 경로 생성하지 못 하도록 기획에서 결정 했었음\n     * 최지원 (Json) (Unlicensed)\n       [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]이 수동\n       종료 기능에 대한 제안 \n       * 일정 반경 안에 들어가면 수동 종료 기능이 활성화되도록 기획되어 있음\n       * 정상적인 종료 못 해도 3시간 지나면 자동 종료\n     * 경로 목록 API\n       * 경로 상태 값 포함해서 넘겨야 함(미시작, 진행중, 완료)\n     * 경로 개요\n       \n       * 제품 목록 사이에 매립지가 들어갈 예정\n       * 이 화면에서 제품 목록 따로, 매립지 정보 따로 넘겨주고 수거 순서를 타입과 인덱스 같이 넘겨줄 예정\n     * 경로 안내 (네비게이션 뷰)\n       * progress bar 필요성에 대한 논의, 배치할 위치 논의\n       * 네비 화면 하단의 도착 예정 시간 → 도착까지 남은 상대 시간으로 터치해서 토글 가능하게\n       * 남은 쓰레기통, 예상 도착 시간, 목적지까지의 경로는 API로 제공할 필요가 없음.\n       * 현재 위치, 수거 여부에 대한 보고가 API에 의해 이루어지면 됨.\n         * 현재 위치 API는 일단 보류 (배터리 + 잦은 호출 이슈 때문)\n         * 수거 보고 API\n     * 방문 순서는 방문한 제품을 입력하면 그 입력된 순서로 알 수 있음.\n * background ↔ foreground 이벤트마다 API 호출해서 사용자가 활성/유휴상태일 경우를 보고한다.\n * 모바일 테스트 버전이 9월 중순까지 나와야 한다고 함.\n\n\nACTION ITEMS\n\n * 차고지 반경 몇 km안에 들어갔을 때 종료로 판단할 지 결정해야 함.\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence] –\n   웹에서 드라이버 생성 어떻게 진행해야 하는지 필요\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/52756710"
  },
  {
    "pageContent": "2018-06-28 회의록: FM 모바일 개발 회의\n\n\nDATE\n\n2018. 6. 28. (11:40 ~ 12:20)\n\n\nATTENDEES\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n\nGOALS\n\n * FM 모바일 기획 초안 완료 시점 및 FM 안드로이드 개발 착수시점 계획\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes40minFM 기획 및 개발 계획 관련 논의All\n * 현재 상황 검토\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]가\n   MapBox API 확인작업 수행하기로 함\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]가\n   프로덕션 레벨에서의 MapBox 사용 타당성 조사 및 결과 공유하기로 결정됨\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]가\n   MapBox 과금정책 조사 및 결과 공유하기로 결정됨\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]가\n   FM 지도, 네비게이션 기능을 구글맵으로만 구현이 가능한지 여부를 조사 및 공유하기로 결정됨\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]의\n   ICO를 위한 White paper작성 등 다른작업 및 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]의\n   안드로이드 아키텍쳐 변경 학습, CCN Android v2 작업등을 고려했을때 2주뒤에 FM 모바일 기획 초안을\n   전달받아 FM 안드로이드 개발에 착수하기로 목표가 설정됨\n\n\n\n\n\n\nACTION ITEMS\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   MapBox API 확인작업\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence] 프로덕션\n   레벨에서의 MapBox 사용 타당성 조사 및 결과 공유\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   MapBox 과금정책 조사 및 결과 공유\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence] FM\n   지도, 네비게이션 기능을 구글맵으로만 구현이 가능한지 여부를 조사 및 공유\n *  ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/43745331"
  },
  {
    "pageContent": "2018-06-19 회의록: FM 기획 회의\n\n\nDATE\n\n2018. 6. 19.\n\n\nATTENDEES\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence]\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n\n\nGOALS\n\n * FM 기획 변경점에 관한 논의를 통한 기획 개선\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes1hour 30minFM 기획 수정사항 관련 논의\n이호준 (Jimmy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence], 박기석\n(Peter) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence], 남기철(Edgar)\n(Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence], 최준호\n(Simon) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n * 운전자, 관리자계정 권한 관련논의.\n   * 운전자는 FM만 로그인, 관리자는 CCN만 로그인 가능하도록\n * 차량 선택페이지에서 다른 운전자가 이미 사용중인 차량일 경우 해당 차량으로 경로 생성까지는 가능하지만 해당 경로를 '운행시작'은 할 수\n   없도록 하는것이 맞다는 결론\n * FM앱 사용을 태블릿으로만 제한할까?\n   * 모바일 단말기 & 태블릿 둘다 사용할 수 있는것이 맞다는 결론\n * '이어하기'제거\n   * '진행중'상태가 추가됨에 따라, '이어하기'를 명시적으로 사용자가 선택하도록 하는것은 부자연스럽다는 결론\n   * 수거종료한 경로에 대해서는 이어하기 불가능하도록 하는것이 맞겠다는 결론\n * 차고지근처에서만 '수거종료'액션 가능하도록 하자는 논의\n   * 운전자 2명이 경로진행중 차고지 도달 전에 번갈아 운행하는 경우는 없는지?(A가 중간지점까지 운행한뒤 B가 차고지까지 운행하는 등)\n   * 최준호 (Simon) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]가\n     사용자 시나리오를 조사해오기로 하였음.(운전자별 수거 종료 이벤트가 어느시점에 일어날 가능성이 있는지)\n   * 업체별로 운전자가 차고지근처에서만 수거종료할 수 있도록 제한할 수 있는 옵션을 둘지? 구현 가능성 여부 검토(서버팀과 논의필요)\n * '진행중'상태 경로를 선택할 경우\n   * 결과 페이지가 표시되는것은 부자연스럽고 불편하다는 지적\n   * 이어서 하겠냐는 간단한 팝업 OR 팝업조차 없이 바로 네비게이션 시작하도록 하는것이 맞겠다는 결론\n * '진행중'상태 경로\n   * 경로 운행중 마지막 유저 액션(움직임이나 정보입력등) 3시간 이후에는 수거종료 상태로 자동변경\n   * 모바일 앱 시작시 해당 운전자에게 할당된 '종료'되지않은 '진행중'상태 경로가 있을경우 메인페이지 거치지 않고 바로 네비게이션 화면으로\n     진입하는것이 어떨까? (개발 가능성 검토 필요)\n * 쓰레기 타입\n   * 모바일에서는 쓰레기 타입을 추가 및 변경하는것이 안전상 좋지 않다고 생각\n   * 웹에서 관리자만 변경할 수 있도록 제한하는것이 좋겠다는 결론\n * 대쉬보드를 첫 페이지로 하는건 어떨까?\n   * 대쉬보드를 첫페이지로 하는것보다는 Depth를 한단계 거쳐 진입할 수 있도록 하는것이 맞겠다는 결론\n\n1hourFM 기존 기획 폐지 및 신규 기획 작업 진행의 타당성 논의\n이호준 (Jimmy) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence], 박기석\n(Peter) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence], 남기철(Edgar)\n(Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence], 최준호\n(Simon) (Unlicensed)\n[https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]\n * 기존 FM기획을 앞으로도 계속 수정하여 보완 & 기존 UI 유지하는 방향이 궁극적으로 우리에게 좋을까? 하는 의문\n * 회의 참석자들 기준으로 기존 기획은 좋지않은 점이 많으니 차라리 UI 및 기획을 새로하는 방법이 궁극적으로 개발 구현(추후 확장), 유저\n   만족도 측면, 서비스 완성도 측면에서도 더 나을것으로 의견이 모아짐.\n * 신규기획할 경우 일정문제\n   * 기획부분에 있어서 일정은 현재 웹 기획을 병행하고 있기때문에 해당 웹 기획의 진행상황에 따라 영향을 받을 수 있을것같다는 의견\n   * 스티브, 션과의 회의를 통해 신규기획 여부의 최종결정후에 신규 기획을 시작할 수 있음\n   * 서비스(모바일, 서버)의 경우 개발에 2~3개월정도 필요할것으로 추정됨(Android)\n     * 기획완료시점(어느정도의 완성된 기획이 필요해보임. 100%완성이 아니더라도..)에 영향받음\n * 남기철(Edgar) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad845dbb783d22b5dae9bcf?ref=confluence],\n   최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence]가\n   션과 스티브에게 의견타진하기로 결론\n\n\nACTION ITEMS\n\n * 최준호 (Simon) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:bd7341da-ea21-4f62-bc8f-22931dea66b6?ref=confluence] 유저\n   시나리오(페르소나) 조사하기(수거종료 시점에 대하여)\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   업체별 차고지 근처에서만 수거종료 할 수 있도록 하는 커스터마이징 옵션을 두는 개발의 개발비용 검토(iOS, 서버팀과)\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n   '진행중'상태 경로 있을경우 앱 시작시 바로 네비게이션 페이지로 이동하는 개발의 개발비용 검토(iOS, 서버팀과)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/36307108"
  },
  {
    "pageContent": "2018-06-11 회의록 - FM\n\n\nDATE\n\n2018. 6. 11.\n\n\nATTENDEES\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n\nGOALS\n\n * FM 개발 전에 필요한 이야기\n\n\nDISCUSSION ITEMS\n\nTimeItemWhoNotes20minFM 작업 기간 논의ALL\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]의\n   기본적인 안드로이드 개발이 얼추 끝났음.\n   * 모바일 UI가 바뀔 여지가 있나? → 웹에 비해 많지 않을것같음.\n * API 개발이 언제부터 가능한가?\n   * 최지원 (Json) (Unlicensed)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence]과\n     논의가 필요하지만 거의 바로 가능할거라고 예상함.\n   * 다만, 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]의\n     일정이 들쑥날쑥 한 경우가 많아서 걱정됨.\n\n10minOSRM에서 경로를 바로 생성을 못해주는 경우 ALL\n * 모바일에서 경로 생성 요청 후 어떻게 처리를 해줘야 할지 고민해야함\n   * 가장 간단한 방법은 푸시를 사용하는것\n\n10min모바일 맵/네비게이션 관련\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence]\n * 이호준 (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence]\n\n * 중국에서 사용 가능한 방향 논의\n\n5min필요한 API에 대해서ALL\n * 모바일 개발자들은 알아서 정리해온다고 함\n * 웹/서버 개발자들은 일정 정리해서 알려주면 됨\n\n\nACTION ITEMS\n\n * 강승현 (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence] – 지미에게\n   슬레이브 디비 정보 넘겨주기\n * 최지원 (Json) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:d43dc073-7bf9-4527-b7dc-3881e6b979a1?ref=confluence], 강승현\n   (Tim)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence] –\n   일정 정리해서 개발 시작 가능한 날짜 알려주기\n * 박기석 (Peter) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/557058:74b31807-3f61-418b-8080-8edea7266412?ref=confluence], 이호준\n   (Jimmy) (Unlicensed)\n   [https://ecubelabs.atlassian.net/wiki/people/5ad83d7d2bb3112b34c5a694?ref=confluence] –\n   필요한 API 목록 및 기능 정의 정리해주기\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/32964634"
  },
  {
    "pageContent": "EcubeLabs Notification Service\n\nhttps://github.com/Ecube-Labs/notification-service\n[https://github.com/Ecube-Labs/notification-service]\n\n이큐브랩 서비스 및 인프라 특성상 내결함성보다는 고가용성에 초점을 두어 빠르게 많은 양을 보내기 보단 데이터를 유실하지 않되, 확실하게 한번만\n전송하는것을 확신할 수 있는 서비스를 목표로 유지관리한다.\n\n\n\n * [ENS] 설계 문서\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851995733/ENS]\n * [ENS] 연동 가이드\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2852487189/ENS]\n * [ENS] SMS - Incoming Message Reply\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2906652827/ENS+SMS+-+Incoming+Message+Reply]\n * [ENS] DKIM/SPF/DMARC\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3005939835/ENS+DKIM+SPF+DMARC]\n * [ENS] IP Reputation 관리\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3018358789/ENS+IP+Reputation]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864819"
  },
  {
    "pageContent": "Kafka Webhook Producer\n\nhttps://github.com/Ecube-Labs/kafka-webhook-producer\n[https://github.com/Ecube-Labs/kafka-webhook-producer]\n\n3rd-party Incoming Webhook 으로 들어온 HTTP 요청을 지정된 Kafka Topic에 Produce 하기 위해 개발된\n소프트웨어\n\n\n개발 배경\n\n이미 개발된 Kafka의 Custom Source Connect 중에 주기적으로 특정 엔드포인트를 호출해서 데이터를 끌어오는 Confluent\nHTTP Source Connect가 있었으나 요구사항에 맞지 않으므로 채택 할 수 없었다.\n\n별도의 엔드포인트를 노출하는 HTTP Source Connect가 존재하지 않았고, Java로 개발하지 않고 단순히 Node.js\n어플리케이션으로 개발해도 문제가 없다고 판단되었다.\n\n\n기본 요구사항 검증\n\n\nWEBHOOK으로 들어온 데이터의 유실 가능성\n\n * Kafka 클러스터의 leader가 죽는 경우 다음 Leader election 에 시간이 얼마나 소요되는가?\n   결론: 클러스터의 브로커가 모두 죽지 않는 이상 가용성은 어느정도 보장되어 있다.\n   \n   * Kafka Cluster의 브로커가 하나라도 살아있다면 약 1초 이내로 리더 선출이 된다.\n     클러스터에는 최소 3개의 브로커를 두고 있으므로 운영에 문제가 없다고 판단됨\n   \n   * image-20240102-034509.png\n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2868740182/image-20240102-034509.png?api=v2]\n     \n     리더 역할의 카프카 브로커 Pod를 죽였을 때: 에러 발생 이후 약 1초 이내로 복구됨\n   \n   * image-20240102-034520.png\n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2868740182/image-20240102-034520.png?api=v2]\n     \n     리더 역할을 하는 카프카 브로커가 존재하는 EC2 를 강제로 제거했을 때: 에러 발생 이후 약 1초만에 복구 됨\n\n * Leader가 Down 된 이후, Leader election 이 되기 전에 produce 된 데이터는 유실되는가?\n   \n   * kafkajs 기준, retry count가 0인 경우에는 데이터가 유실될 수 있다.\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2868740182/2024-01-02%20at%2012.48.27@2x.png?api=v2]\n   \n   * retry count가 10 이상인 경우 다음 리더 선출까지 데이터가 유실되지 않고 꾸준히 재시도를 진행하기 때문에 데이터 유실\n     가능성이 매우 낮다.\n     \n     2024-01-02 at 12.38.41.gif\n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2868740182/2024-01-02%20at%2012.38.41.gif?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868740182"
  },
  {
    "pageContent": "URL Shortener Service\n\nURL 주소 단축해주기 위한 서비스\n\n\n개발 배경\n\n * bitly 와 같은 상용 서비스: 추천인 서비스처럼 URL 많이 생성해야 하는 경우 비용 부담. 기각\n\n * 오픈소스 shortener 서비스: 기능 제약 or 비용 결제 필요 / 기술 스택 불일치 / 유지보수 이슈 등. 기각\n   \n   * https://github.com/738/awesome-url-shortener\n     [https://github.com/738/awesome-url-shortener]\n\n * 결론: 고작 URL redirection 에 돈 많이 쓸 필요 없이 직접 개발\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916188438"
  },
  {
    "pageContent": "[ENS] 설계 문서\n * [ENS] High-level design\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2850848865/ENS+High-level+design]\n * [ENS] 도메인 모델\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864866/ENS]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851995733"
  },
  {
    "pageContent": "[ENS] 연동 가이드\n * [ENS] DSN Handling\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868347122/ENS+DSN+Handling]\n * [ENS] 메세지 전송 가이드\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2871919475/ENS]\n\n\n\n\nAPI DOCUMENTATION\nHTTPS://DOCS-STAGE.ECUBELABS.XYZ/?NAME=NOTIFICATION%20SERVICE%20API\n[https://docs-stage.ecubelabs.xyz/?name=Notification%20Service%20API]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2852487189"
  },
  {
    "pageContent": "[ENS] SMS - Incoming Message Reply\n\nTwilio는 Incoming TwiML(트윌리오 자체 규격 마크업언어)을 지켜 응답하는 경우 해당 마크업을 해석해서 후속 처리를 돕는다.\n\nhttps://github.com/Ecube-Labs/notification-service/pull/6\n[https://github.com/Ecube-Labs/notification-service/pull/6] 와 같이 응답하도록 구현한 뒤\nTwilio 설정 페이지에서 Integration 설정을 변경하면 Incoming Message가 있는 경우 웹훅을 보내주게 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2906652827/2024-02-14%20at%2014.34.25@2x.png?api=v2]\n\n해당 웹훅에서 아래와 같이 응답을 하도록 구현하고 나면 Incoming Message에 대해 응답을 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2906652827/2024-02-14%20at%2014.35.28@2x.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2906652827/2024-02-14%20at%2014.11.09@2x.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2906652827"
  },
  {
    "pageContent": "[ENS] DKIM/SPF/DMARC\n * SES 통해서 보내는 경우\n   * SES 로 전달되는 이메일 인증을 검증하는 방법\n * 사람이 Gmail 에서 보내는 경우\n   * Google Workspace 설정\n\nDMARC 를 비롯한 DKIM/SPF 등 모든 이메일 인증은 스푸핑을 방지하는것이 목적으로 만들어졌다.\n\nWhy?\n\n사실 메일 서버, 메일 수신/발신에 대한 구조는 매우 심플하기 때문에 아무나 도메인을 변조하여 발송할 수 있기 때문이다.\n이 변조하여 발송하는 행위를 모두 스푸핑이라고 정의하고, 도메인 소유자가 메일을 의도적으로 발송한게 맞는지 확인하기 위해 DMARC, DKIM,\nSPF 와 같은 인증이 생겨났다.\n\nhttps://www.cloudflare.com/ko-kr/learning/dns/dns-records/dns-dmarc-record/\n[https://www.cloudflare.com/ko-kr/learning/dns/dns-records/dns-dmarc-record/]\n\n\nSES 통해서 보내는 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3005939835/2024-05-24%20at%2011.09.06@2x.png?api=v2]\n\n * SW-7447 [https://ecubelabs.atlassian.net/browse/SW-7447] - 이슈 세부사항 가져오는 중...\n   상태\n\n * DMARC Record 추가\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/3005939835/2024-05-24%20at%2011.11.02@2x.png?api=v2]\n   \n   * type: TXT\n   \n   * subdomain: _dmarc\n   \n   * value:\n     \n     * v=DMARC1; p=none;\n       \n       * 이렇게 하면 DMARC 인증은 통과하지만, 스팸으로 분류되는 메일도 받은 편지함으로 들어간다.\n         (단, 스팸 신고율이 계속 높아질 수 있기 때문에 계속 이 값으로 사용하는건 권장하지 않는다고 한다.)\n     \n     * v=DMARC1; p=reject; rua=mailto:postmaster@haulla.com\n       \n       * rua 에 넣은 URI로 보고서를 전송한다.\n       \n       * 이 보고서는 별도로 파싱해서 분석해야 하는데 이것에 특화된 DMARC 서비스들이 존재한다.\n         이큐브랩은 EasyDMARC 를 이용해 보고서를 분석한다.\n\n * MAIL FROM 설정\n   \n   * 이 설정을 하지 않으면 SES를 통해 전달되는 From/Return-Path 등 헤더에 있는 메일의 도메인이 aws ses 의\n     도메인으로 설정된다.\n   \n   * SPF/DKIM 설정을 모범사례로 하기 위해서는 CUSTOM MAIL FROM을 설정해서 하위 도메인으로 설정될수 있게 해야 한다.\n     https://docs.aws.amazon.com/ko_kr/ses/latest/dg/send-email-authentication-spf.html\n     [https://docs.aws.amazon.com/ko_kr/ses/latest/dg/send-email-authentication-spf.html]\n\n\nSES 로 전달되는 이메일 인증을 검증하는 방법\n\nEasyDMARC에는 Email Investigation 라는 기능이 존재하는데, 여기서 제공되는 메일 주소로 메일을 보내면\nDKIM/SPF/DMARC 인증을 통과하는지 확인할 수 있다.\n(SES 메일 서버를 통해 전달해야 하므로 당연히 Gmail 같은게 아닌 SES API를 통해 발송되어야 한다)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3005939835/2024-05-24%20at%2011.05.35@2x.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/3005939835/2024-05-24%20at%2011.17.13@2x.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/3005939835/2024-05-24%20at%2011.17.40@2x.png?api=v2]\n\nMAIL FROM 설정으로 인해 SPF 인증을 aws ses 도메인이 아닌 haulla.com [http://haulla.com] 의\n하위도메인으로 할 수 있게 된다.\n\n\n사람이 GMAIL 에서 보내는 경우\n\n\nGOOGLE WORKSPACE 설정\n\nApps > Google Workspace > Settings for Gmail > Authenticate email\n\nimage-20240516-085000.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3005939835/image-20240516-085000.png?api=v2]\n\nGENERATE NEW RECORD 한 다음에 Route53 에 TXT 로 추가\n\n * GH-1687 [https://ecubelabs.atlassian.net/browse/GH-1687] - 이슈 세부사항 가져오는 중...\n   상태",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3005939835"
  },
  {
    "pageContent": "[ENS] IP Reputation 관리\n\n\n개요\n\n메일을 전송하는 메일 서버의 IP 평판이 안좋을수록 스팸/반송 처리 될 가능성이 높다.\n때문에 전송 성공률을 높이기 위해서는 IP 평판에 대해서도 신경을 써야 하는데, AWS SES 와 같이 메일 서버를 다같이 돌려쓰는 경우 일부\n사용자가 스팸성 메세지를 보내 SES 의 메일서버를 스팸으로 등록되게 만들수 있다.\n\n이렇게 IP 평판이 좋지 않다고 판단되면 DNS Blackhole List 에 등재된다.\n\nhttps://docs.aws.amazon.com/ses/latest/dg/faqs-dnsbls.html\n[https://docs.aws.amazon.com/ses/latest/dg/faqs-dnsbls.html]\n\n이 문서는 내가 사용중인 메일 서버의 IP 평판이 어떤지 확인하고, 개선하는 방법을 다룬다.\n\n\n\n\nIP 평판 확인\n\n서드파티 DMARC 분석 서비스를 사용하는 경우 메일 전송에 성공했더라도 해당 메일서버가 블랙리스트에 등재되어 있는지 확인할 수 있게\n제공해준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3018358789/2024-05-27%20at%2011.07.59@2x.png?api=v2]\n\n위와 같이 발송했던 메일들, 또는 반송된 메일들의 DMARC 보고서를 확인했을때 블랙리스트에 등재된 서버가 많이 이용되는 경우가 있는지\n지속적으로 모니터링 해야한다.\n\nDKIM/SPF/DMARC 인증을 위한 설정이 잘 되어 있다면 발송율은 높을수 있지만, 조회한 IP 평판에 의해 무조건 반송처리하는 경우도 많기\n때문에 위와 같은 상황이 오면 다음과 같은 방법으로 개선을 해야 한다.\n\n\n전용 IP 사용 설정\n\nhttps://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-deliverability-dashboard-ip-address.html\n[https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-deliverability-dashboard-ip-address.html]\n\nAWS 또한 이러한 문제를 인지하고 있기 때문에 전용 IP를 사용할 수 있는 기능을 제공한다.\n\n이 기능을 이용하여 메일 서버에서 사용 될 전용 IP를 할당받으면 된다.\n이런 경우 SES 를 통해 발송되는 메일은 무조건 해당 IP에서 발송되기 때문에 DNSBL(Blackhole List)에 등록되지 않도록 IP\n평판 관리에 더욱 신경을 써야 한다.\n\n만약, DNSBL에 등록되었다면 해당 BL 서비스에 소명을 하여 리스트에서의 IP 제거를 요청해야 한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3018358789"
  },
  {
    "pageContent": "[ENS] High-level design\n\n내결함성과 고가용성을 보장하기 위해 Kafka와 DB(MySQL)을 이용한다.\n\n[/wiki/download/attachments/2850848865/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8-1701746952266.drawio.png?api=v2]\n\n\n개요\n\n * Block-1\n   \n   * 클라이언트의 메세지를 유실하지 않을 수 있게 저장한 이후 클라이언트에게 정상 처리 여부를 응답한다.\n   \n   * 이 단계에서는 요청한 메세지를 보내기 위한 어떤 API도 호출하지 않는다.\n\n * Block-2\n   \n   * 저장된 메세지를 대상에게 단 한번만 보내기 위한 검증 및 처리를 수행한다.\n   \n   * 이 단계에서는 메세지를 전송한 이후 Process Log에 전송 여부를 저장하며, 메세지 전송에 실패한 경우 재전송 조건에 부합하지\n     않는 경우에만 실패로 간주한다.\n   \n   * 자세한것은 아래 참고자료의 Concept Code 참고\n\n * Block-3\n   \n   * 메세지 전송 상태가 바뀔 때 마다 Client가 원하는 URL을 호출하여 전달한다.\n   \n   * 이 단계에서는 메세지 전송 여부에 대해서만 전달하고, 메세지의 상태가 어떤 값인지는 관심사에 두지 않는다.\n\n * Block-4\n   \n   * 메세지 전송 서비스를 통해 전달된 메세지 전달 상태에 대하여 전달한다.\n   \n   * 이 단계에서는 메세지 전송 절차가 모두 완료되었고, 성공/실패 여부\n\n * Webook producer\n   \n   * DSN 을 위한 핸들링 방법으로 Incoming Webhook 만 지원하는 외부 서비스를 카프카로 일관적으로 처리하기 위해 Kafka\n     Webhook Producer\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868740182/Kafka+Webhook+Producer]\n     를 이용해 구성한다.\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n기타 참고자료\n\n * Block-2 Concept\n   \n   * const processId = `${topic}-${offset}`\n     if (await checkProcessLog(processId)) return;\n     \n     const message = getMessage(~~~)\n     const status = await (async () => {\n       try {\n         await sendNotification(message)\n         return 'SENT'\n       } catch (err) {\n         if (isRetryableError(err)) {\n           throw err // for re-consume\n         }\n         return 'FAILED'\n       }\n     })();\n     \n     await insertProcessLog(processId, status)\n\n * Kafka로 EOS(Exactly-once-semantics) 보장 하는 기본적인 방법: 트랜잭션\n   https://kafka.js.org/docs/transactions\n   [https://kafka.js.org/docs/transactions]\n   \n   * 그러나 카프카가 죽지 않는다는 전제를 깔고 구현되는 로직임.\n   \n   * 스팟 인스턴스에 의해 카오스 엔지니어링 당하는(?) 우리에겐 어울리지 않는다고 판단하여 DB와 함께 구성한다.\n     \n     * DB가 죽으면 message를 consume 할 서버도 안켜지므로 kafka leader가 죽는 상황과는 다름\n   \n   * 적용하면 아래와 같은 형상이 되겠지만, 적용할수는 없음\n     \n     const producer = client.producer({\n       transactionalId: `ccn-noti-${topic}-${partitionNo}`,\n       maxInFlightRequests: 1,\n       idempotent: true\n     })\n     \n     const transaction = await producer.transaction()\n     \n     try {\n       await transaction.send({ topic, messages })\n       await sendNotification(~~~~~~~)\n       await transaction.commit()\n     } catch (e) {\n       await transaction.abort()\n     }\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2850848865"
  },
  {
    "pageContent": "[ENS] 도메인 모델\n * [ENS] AllowDestination\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851930297/ENS+AllowDestination]\n * [ENS] BlockDestination\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2984771601/ENS+BlockDestination]\n * [ENS] MessageMail\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853371955/ENS+MessageMail]\n * [ENS] MessageSms\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853044502/ENS+MessageSms]\n * [ENS] MessageFcm\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2898919772/ENS+MessageFcm]\n * [ENS] ProcessLog\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853208155/ENS+ProcessLog]\n\n\n\n * Message 유형을 추가해야 하는 경우 적절하게 새 도메인 모델을 설계하면 된다.\n   따로 하나의 Message 도메인으로 정규화를 하지 않는 이유는 아래와 같다.\n   \n   * Kafka + Debezium 으로 Produce 하는 메세지들의 토픽을 유형마다 나눠서 관리하기 위함\n     \n     * 하나로 관리하는 경우 특정 메세지 유형이 계속 처리에 실패했을때 다른 유형의 메세지 전송에도 영향을 끼칠수 있으므로 잠재적인 문제를\n       해소한다.\n   \n   * 정규화에 고민을 하지 않아도 되고, 정규화 했다고 얻을수 있는 이득도 X\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851864866"
  },
  {
    "pageContent": "[ENS] AllowDestination\n\nproduction 환경이 아닌 이상 해당 도메인에서 허용 대상으로 추가해야만 알림을 보낸다.\n\n\nALLOWDESTINATION\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n\n\n\n\nchannel\n\n\n\n\n\n * 허용 값\n   \n   * EMAIL\n   \n   * SMS\n   \n   * FCM\n     \n     * 등록 토큰을 서버가 받아야만 메세지를 받을수 있기 때문에 처리할 필요가 없음\n\ndestination\n\n\n\n\n\n * varchar(512)\n   \n   * 지원하는 메세지 유형 중 가장 긴 값으로 지정되어야 한다.\n\nactivated\n\n\n\n * 활성화 여부\n\n * Boolean\n\ncreatedAt\n\n * Audit\n\n\n\n\n\ncreatedBy\n\n * Audit\n\n\n\n\n\nupdatedAt\n\n * Audit\n\n\n\n\n\nupdatedBy\n\n * Audit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2851930297"
  },
  {
    "pageContent": "[ENS] BlockDestination\n\nref. SW-10275 [https://ecubelabs.atlassian.net/browse/SW-10275?src=confmacro]\n\n\nBLOCKDESTINATION\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n \n\n \n\nchannel\n\n \n\n \n\n * 허용 값\n   \n   * EMAIL\n   \n   * SMS\n   \n   * FCM\n     \n     * 등록 토큰을 서버가 받아야만 메세지를 받을수 있기 때문에 처리할 필요가 없음\n\ndestination\n\n \n\n \n\n * varchar(512)\n   \n   * 지원하는 메세지 유형 중 가장 긴 값으로 지정되어야 한다.\n\nactivated\n\n \n\n * 활성화 여부\n\n * Boolean\n\ncreatedAt\n\n * Audit\n\n \n\n \n\ncreatedBy\n\n * Audit\n\n \n\n \n\nupdatedAt\n\n * Audit\n\n \n\n \n\nupdatedBy\n\n * Audit\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n ",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2984771601"
  },
  {
    "pageContent": "[ENS] MessageMail\n\n메세지 전송 여부는 [ENS] ProcessLog\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853208155/ENS+ProcessLog]\n에서 확인할 수 있다.\n\n\nMESSAGEMAIL\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n\n\n * bigint\n\ndestination\n\n\n\n * 메일을 받을 대상.\n   \n   * 여러 대상을 허용할 경우 중간에 실패해 재시도 할 경우 다시 받는 대상이 존재 할 수 있으므로 단일 대상만 지정\n\n * TODO: mailing list 생성하여 contact list name도 지정 할 수 있어야 한다.\n   \n   * https://docs.aws.amazon.com/ses/latest/dg/sending-email-list-management.html\n     [https://docs.aws.amazon.com/ses/latest/dg/sending-email-list-management.html]\n\n * varchar(512)\n   \n   * 도메인 최대 길이만 해도 255이므로 그 두배인 값으로 설정한다.\n\nfrom\n\n * \n\n\n\n\n\ncc\n\n * 참조\n\n\n\n * varchar\n   \n   * string[]\n\nbcc\n\n * 숨은 참조\n\n\n\n * varchar\n   \n   * string[]\n\nreplyTo\n\n * 답장 받을 대상\n\n\n\n * varchar\n   \n   * string[]\n\nnotiKey\n\n * 서버를 이용하는 client가 메세지를 구분하기 위해 전달받아 저장하는 키 값\n\n * 실제로 서버에선 아무런 용도로 사용하지 않고 callback 호출시에 함께 전달하기만 한다.\n\n\n\n * varchar(255)\n\ncallbackUrl\n\n \n\n\n\n * allow empty string\n\nsubject\n\n * 메일 제목\n\n\n\n * varchar(1024)\n   \n   * RFC2822 (2.1.1) [http://www.faqs.org/rfcs/rfc2822.html] 에 따르면 헤더 필드 자체는 길이\n     제한이 없지만, 78자보다 길게 작성하려면 CRLF 를 끼워넣어야 한다.\n     결론적으로 기술적으로 제약이 없다고 봐도 무방하므로 적당히 길게 설정한다.\n\nbody\n\n * 메일 내용\n\n * HTML이 전달되는것을 전제로 동작한다\n\n * mediumtext\n   \n   * AWS SES 스펙 상 최대 40MB까지 보낼 수 있다.\n   \n   * text는 너무 적으므로 mediumtext로 지정하여 최대 16MB까지 저장할 수 있도록 한다\n\nattachments\n\n * 첨부파일\n\n\n\n * longtext\n   \n   * { filename: string; content: base64(file) }[]\n\ncreatedAt\n\n * Audit\n\n \n\n \n\ncreatedBy\n\n * Audit\n\n \n\n \n\nupdatedAt\n\n * Audit\n\n \n\n \n\nupdatedBy\n\n * Audit\n\n \n\n \n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853371955"
  },
  {
    "pageContent": "[ENS] MessageSms\n\n메세지 전송 여부는 [ENS] ProcessLog\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853208155/ENS+ProcessLog]\n에서 확인할 수 있다.\n\n\nMESSAGESMS\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n\n\n * bigint\n\nnotiKey\n\n * 서버를 이용하는 client가 메세지를 구분하기 위해 전달받아 저장하는 키 값\n\n * 실제로 서버에선 아무런 용도로 사용하지 않고 callback 호출시에 함께 전달하기만 한다.\n\n\n\n * varchar(255)\n\nfrom\n\n \n\n * SMS 발신자로 표시할 번호.\n   \n   * twilio 에서 검증된 번호로만 지정이 가능하다.\n\n * varchar(15)\n   \n   * https://en.wikipedia.org/wiki/E.164 [https://en.wikipedia.org/wiki/E.164] 에\n     따르면 15\n\ndestination\n\n \n\n * SMS를 받을 대상.\n   \n   * 여러 대상을 허용할 경우 중간에 실패해 재시도 할 경우 다시 받는 대상이 존재 할 수 있으므로 단일 대상만 지정\n\n * varchar(15)\n   \n   * https://en.wikipedia.org/wiki/E.164 [https://en.wikipedia.org/wiki/E.164] 에\n     따르면 15\n\nbody\n\n * SMS 내용\n\n\n\n * varchar(1024)\n\nmediaUrls\n\n * MMS에 첨부할 미디어 주소\n\n\n\n * varchar(2048)\n   \n   * string[]\n\nsendAt\n\n * 발송을 희망하는 시간\n\n * 발송 시각 자체가 정확하게 보장되지는 않음\n   \n   * TODO: 자체적으로 예약 발송 시스템 구현\n\n * Twilio 의존\n   \n   * 때문에 제약사항으로 현재 기준 최소 15분 이후, 최대 35일 이내로 값을 입력해야 정상 동작을 보장해준다고 함\n\n * datetime\n\n * default: NOW\n\n * allow values\n   \n   * NOW\n   \n   * >= NOW + 15 mins\n   \n   * < NOW + 35 days\n\ncallbackUrl\n\n\n\n\n\n * allow empty string\n\ncreatedAt\n\n * Audit\n\n \n\n \n\ncreatedBy\n\n * Audit\n\n \n\n \n\nupdatedAt\n\n * Audit\n\n \n\n \n\nupdatedBy\n\n * Audit\n\n \n\n \n\n\n\n\nTWILIO STATUS TRANSITIONS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2853044502/image-20231228-080508.png?api=v2]\n\n\n\nhttps://www.figma.com/file/h33OjehmeDMwHEqghXPYyR/Figma-Review?type=design&node-id=0%3A1&mode=dev\n[https://www.figma.com/file/h33OjehmeDMwHEqghXPYyR/Figma-Review?type=design&node-id=0%3A1&mode=dev]\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853044502"
  },
  {
    "pageContent": "[ENS] MessageFcm\n\n메세지 전송 여부는 [ENS] ProcessLog\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853208155/ENS+ProcessLog]\n에서 확인할 수 있다.\n\n\nMESSAGEFCM\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n \n\n * bigint\n\nnotiKey\n\n * 서버를 이용하는 client가 메세지를 구분하기 위해 전달받아 저장하는 키 값\n\n * 실제로 서버에선 아무런 용도로 사용하지 않고 callback 호출시에 함께 전달하기만 한다.\n\n \n\n * varchar(255)\n\ndestination\n\n \n\n * 푸시 등록 토큰\n   \n   * 여러 대상을 허용할 경우 중간에 실패해 재시도 할 경우 다시 받는 대상이 존재 할 수 있으므로 단일 대상만 지정\n\n * varchar(512)\n   \n   * https://stackoverflow.com/questions/39959417/what-is-the-maximum-length-of-an-fcm-registration-id-token\n     [https://stackoverflow.com/questions/39959417/what-is-the-maximum-length-of-an-fcm-registration-id-token]\n   \n   * 위 내용 참조. 300자 이상으로도 전달될수 있기 때문에 512로 지정\n\nserviceAccountName\n\n * 기존 서버키와 같은 역할\n\n * ENS에 이미 등록되어 있는 서비스 어카운트여야 한다.\n\n * string\n   \n   * ccn\n   \n   * haulla\n\ndata\n\n * 데이터\n\n * 전송할 메세지에 해당함\n   \n   * https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages\n     [https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages]\n   \n   * 위 프로토콜에 허용되는 데이터를 넣어야 한다.\n\n * text (JSON)\n\n * default: {}\n\nimageUrl\n\n * 알림에 포함할 이미지\n\n * https로 시작하는 이미지 주소를 넘기면 알림에 포함되어 표시될 수 있다.\n\n * allow empty string\n\n * varchar(1024)\n\ncallbackUrl\n\n \n\n \n\n * allow empty string\n\ncreatedAt\n\n * Audit\n\n \n\n \n\ncreatedBy\n\n * Audit\n\n \n\n \n\nupdatedAt\n\n * Audit\n\n \n\n \n\nupdatedBy\n\n * Audit\n\n \n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2898919772"
  },
  {
    "pageContent": "[ENS] ProcessLog\n\n\nPROCESSLOG\n\n * 노란색: draft\n\n * 빨간색: deprecatation 예정, 아직 사용중\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n\n\n * bigint\n\nmessageId\n\n * Unique (Composite)\n\n\n\n * bigint\n\n * 아래 도메인의 PK만 입력 받아야 한다\n   \n   * [ENS] MessageMail\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853371955/ENS+MessageMail]\n   \n   * [ENS] MessageSms\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853044502/ENS+MessageSms]\n\nchannel\n\n * Unique (Composite)\n\n\n\n * 허용 값\n   \n   * EMAIL\n   \n   * SMS\n\nsentOffset\n\n * 처음 처리한 시점의 Kafka Offset\n\n * 메세지 유형에 따라 offset이 겹칠 수 있으므로 Unique로 처리하면 안된다\n\n * 이미 처리된 메세지가 다시 consume 된 경우 중복 처리를 방지하기 위해 이용된다.\n\n * bigint\n\n * index\n\nidempotentToken\n\n * 메세지를 발송할 때 마다 고유하게 생성되는 멱등 토큰\n\n * Unique\n\n * 이미 처리된 메세지가 중복 consume된 경우 중복 처리 방지를 위해 이용된다.\n\n * sentOffset 대신 이용되며, 대체된 이유는 다음과 같다.\n   \n   * kafka topic offset이 리셋되는 경우 새로 보낸 메세지에 대한 경우에도 DB에 저장된 offset이 존재하므로 메세지를\n     무시하게 된다.\n\n\n\nstatus\n\n\n\n * 처리 결과를 저장한다\n\n * 허용 값\n   \n   * SCHEDULED\n   \n   * SENT\n   \n   * DONE\n   \n   * FAILED\n\n * callbackUrl 호출 할 때는 현재 노티서버와 동일하게 변경해서 줘야한다\n\nerrorMessage\n\n\n\n\n\n * allow empty string\n\nmetadata\n\n\n\n * 로그의 후속 처리를 위해 필요한 데이터\n\n * varchar(4096)\n\n * allow empty string\n\nproviderMessageId\n\n\n\n * 메세지 전송 서비스(ex. Twilio/AWS SES…)에서 제공하는 메세지 고유 값\n\n * 필요한 경우 ENS에서 생성하여 메세지 전송 서비스에 전달하기도 한다.\n\n * varchar(128)\n\n * nullable\n\n * index\n\ncreatedAt\n\n * Audit\n\n \n\n \n\ncreatedBy\n\n * Audit\n\n \n\n * ${topic}-${offset}\n\nupdatedAt\n\n * Audit\n\n \n\n \n\nupdatedBy\n\n * Audit\n\n \n\n * ${topic}-${offset}\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2853208155"
  },
  {
    "pageContent": "[ENS] DSN Handling\n\n레거시 DNS Handling 참고: [N] 노티 DSN 핸들링\n[https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/181403819/Deprecated+-+N+DSN]\n\nAPI를 통해 발송 요청시 callbackUrl을 넘기면 어플리케이션 레벨에서 DSN Handling이 가능하다.\n\n\nEMAIL\n\n * method: POST\n\n * url: 당신이 요청한 경로\n\n * body:\n   \n   * notiKey: 요청할때 보낸 값. 요청자가 멱등성 있게 처리하기 위해 관리하는 idempotent token이라고 보면 된다.\n   \n   * status:\n     \n     * SENT\n     \n     * DELIVERY\n     \n     * BOUNCE\n     \n     * COMPLIANT\n     \n     * FAILED\n\n\nSMS\n\n * method: POST\n\n * url: 당신이 요청한 경로\n\n * body:\n   \n   * notiKey: 요청할때 보낸 값. 요청자가 멱등성 있게 처리하기 위해 관리하는 idempotent token이라고 보면 된다.\n   \n   * status:\n     https://www.twilio.com/docs/messaging/api/message-resource#message-status-values\n     [https://www.twilio.com/docs/messaging/api/message-resource#message-status-values]\n     \n     * SENT\n     \n     * DELIVERED\n     \n     * FAILED\n     \n     * …\n\nstatus 값의 규칙이 일관적이지 않은 이유\n\n레거시에서 주는 status가 Message Provider(AWS SES/Twilio)가 주는 텍스트를 그대로 Upper case 해서\n전달하고 있었기 때문.\n\n새로 개발된 Notification Service 내부적으로는 SENT / DONE / FAILED 로만 관리되고 Message Provider\n가 전달한 상태 값은 DSN을 전달 할 때만 이용되고 있다.\n새로운 상태 값으로 DNS을 받고싶은 경우 강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n에게 요청할 것",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868347122"
  },
  {
    "pageContent": "[ENS] 메세지 전송 가이드\n\nAPI 문서 [https://docs-stage.ecubelabs.xyz/?name=Notification%20Service%20API]를\n참고하여 메세지를 전송할 수 있는데, stage에서 테스트 시 아래의 정보를 참고하여 호출한다.\n\n\nREQUEST\n\n * 메세지 전송 API를 호출한 경우 정상적으로 처리 되었을때 반드시 201(Created)로 응답하고, 이 외의 상태값인 경우 무조건 메세지\n   전송 요청 처리에 실패했다고 판단해야 한다.\n\n * ENS는 Allow Destination 에 등록되지 않은 경우(Stage 환경만 해당) 어떠한 작업도 수행하지 않고 무조건 406(Not\n   acceptable)으로 응답한다.\n\n\nMAIL\n\n * from: 아래의 도메인으로 전송해야 DSN Handling을 정상적으로 테스트 할 수 있다.\n   \n   * anything@test.cleancitynetworks.com\n   \n   * anything@stage.haulla.com\n\n * destination: Stage 환경에서는 Allow destination 에 등록된 대상에게만 전송을 허용한다\n\n\nSMS\n\n * from: 아래의 발신 번호로만 전송이 가능하다.\n   \n   * +16156546676 (CCN에서 이용중)\n   \n   * +12132677850 (Haulla에서 이용중)\n\n * destination: Stage 환경에서는 Allow destination 에 등록된 대상에게만 전송을 허용한다\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2871919475"
  },
  {
    "pageContent": "[KWP] 설계 문서\n * [KWP] High-level design\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868445346/KWP+High-level+design]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868379792"
  },
  {
    "pageContent": "[KWP] High-level design\n\n * 웹훅으로 들어온 데이터를 검증한 뒤에 카프카에 Produce 하는것을 중점으로 설계되었다.\n\n * 기본적으로 Kubernetes 의 Admission Controller 에서 영감을 받았다.\n\n * 참고 자료\n   \n   * https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/\n     [https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/]\n   \n   * https://ssup2.github.io/theory_analysis/Kubernetes_Admission_Controller/\n     [https://ssup2.github.io/theory_analysis/Kubernetes_Admission_Controller/]\n   \n   * https://coffeewhale.com/kubernetes/admission-control/2021/04/28/opa1/\n     [https://coffeewhale.com/kubernetes/admission-control/2021/04/28/opa1/]\n\n[/wiki/download/attachments/2868445346/wp-hld.drawio.png?api=v2]\n\n\n개요\n\n * Bootstrapping stage\n   \n   * 웹훅을 구독해야 하는 어플리케이션이 Webhook Producer에게 Validating URL을 전달하고 구독할 토픽의 이름을\n     받아오기 위한 절차.\n   \n   * 토픽 이름은 Subscribe API 호출 시 전달한 Webhook path에 따라 결정되며, 이전에 구독할 때 사용했던 Webhook\n     path를 전달하는 경우에는 이미 생성되어 있는 동일한 토픽 이름으로 결정된다.\n\n * Operating stage\n   \n   * 외부에서 전달되는 웹훅을 처리하기 위한 절차.\n     아무 메세지나 카프카에 프로듀싱되면 안되기 때문에 Validating 을 통한 보안 절차를 거친다.\n   \n   * Subscribe API를 호출 할 때 전달했던 Validating URL를 호출하여 메세지의 유효성을 검증한다.\n   \n   * Validating에 실패한 경우 DLQ에 넣어두고 순차적으로 다시 처리한다.\n     \n     * Validating URL 호출 시 응답 Status Code가 202/403이 아닌 경우 모두 실패로 간주한다.\n     \n     * Maximum receives: 5\n   \n   * 메세지가 유효한 경우에만 카프카에 메세지를 프로듀싱 해야 한다.\n\n\nAPI\n\n\nSUBSCRIBE API\n\n\nREQUEST BODY\n\nField\n\nType\n\nDescription\n\nwebhookPath\n\n * string\n\n * KWP가 이 값과 일치하는 경로로 데이터를 전달받은 경우 Operating stage를 진행하게 된다.\n\nvalidatingUrl\n\n * string\n\n * Operating stage를 진행하기 위해 메세지 검증을 위한 주소를 전달한다.\n\n * http(s)/path를 모두 포함해야 한다.\n\n * POST method로 호출된다.\n\n\nRESPONSE BODY\n\nField\n\nType\n\nDescription\n\ntopicName\n\n * string\n\n * 해당 API를 호출한 클라이언트가 검증된 웹훅 메세지를 받기 위해 구독해야 할 카프카 토픽 이름입니다.\n\n\n\n\nVALIDATING (WEBHOOK PRODUCER → WEBHOOK HANDLER APP)\n\nSubscription 이후 Webhook 으로 들어온 데이터가 조건에 부합한 경우 함께 등록된 Validating URL을 호출한다.\n\n\nREQUEST\n\nKWP는 아래의 형식으로 데이터를 전송한다.\n\nField\n\nType\n\nDescription\n\nwebhookPayload\n\n * { url: string; headers: Object; method: string; body: any }\n\n * 전달받은 데이터를 그대로 전달하기 때문에 body 형식을 알 수 없다.\n\n * url: KWP 로 들어온 웹훅의 path\n\n * headers: KWP로 들어온 웹훅의 헤더 파싱 값.\n\n * method: KWP로 들어온 웹훅의 http method\n\n * body: KWP로 들어온 웹훅의 body\n\n\nRESPONSE\n\nKWP는 아래의 형식의 데이터로 응답 받을것을 기대한다.\n\n * 검증시 유효한 경우 Status Code는 반드시 202(Accept) 여야 한다.\n\n * 검증시 유효하지 않은 경우 Status Code는 반드시 403(Forbidden) 이어야 한다.\n\n * 이 외의 Status Code로 전달되는 경우 Validating에 문제가 있는것으로 판단하고, 재시도한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2868445346"
  },
  {
    "pageContent": "[USS] 설계 문서\n * [USS] 도메인 모델\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916646915/USS]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916417819"
  },
  {
    "pageContent": "[USS] 도메인 모델\n * [USS] ShortUrl\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916483324/USS+ShortUrl]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916646915"
  },
  {
    "pageContent": "[USS] ShortUrl\n\n\nSHORTURL\n\n이름\n\n역할\n\n설명\n\n제약 조건 (&&)\n\nid\n\n * PK\n\n\n\n- \n\noriginalUrl\n\n * 원본 URL이자 Redirection 할 위치\n\n * http/https 와 같은 프로토콜이 포함된 주소\n\n * varchar(2048)\n\nshortKey\n\n * 원본 주소를 가리킬수 있는 유일한 키\n\n * $HOST/${shortKey} 로 접근하면 originalUrl로 보낸다.\n\n * Unique\n\n * varchar(2048)\n\nshortenAt\n\n * Short Key 생성한 시간\n\n\n\n * Datetime\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2916483324"
  }
]