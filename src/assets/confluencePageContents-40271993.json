[
  {
    "pageContent": "개발 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40271993"
  },
  {
    "pageContent": "Git 가이드\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40173590"
  },
  {
    "pageContent": "변수 명명 규칙\n * 케이스\n * Boolean\n * Date\n * Abbreviations\n * Opening or closing\n * Redundant\n * 참고\n\n\n케이스\n\n * JS 변수 camelCase\n\n * TS Class, Type, Interface 선언 PascalCase\n   \n   * 예시:\n     \n     * type TypeName = { propertyName: any };\n     \n     * class ClassName { ... }\n     \n     * type CcbMedia = { ... }; // CCB와 같이 모두가 알만한 약자 또한 파스칼 케이스를 유지한다. Abbreviations 참고\n   \n   * Type, Interface 변수명이 prefix, postfix 없이 구분이 가능할 때에 변수명에 Type을 붙이지 않도록 한다.\n\n * (Draft) String literal 을 구성하는 요소는 PascalCase 로 한다.\n   \n   * 예시\n     \n     type UserStatus = 'Active' | 'Pending' | 'Terminated';\n   \n   * 참고 Enum value\n     [https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions]\n\n\nBOOLEAN\n\nBoolean type의 변수일 경우, 가능하다면 is(are), has, can을 앞에 붙이자. 영어 문장이라 생각하고보자. 이런 동사가\n앞에오면 yes, no로 대답 가능한 의문문이 되기 때문에 코드 가독성이 더 좋아진다. is(are)의 경우는 \"맞는가?\", has의 경우는\n\"가지고 있는가?\", can의 경우는 \"할 수 있나?, 성공했나?\" 정도로 번역되니 더 자연스러운 변수명이 될 것이라 생각한다. (예외 적인\n상황도 있을텐데 어떤 경우일까요?)\n\nboolean type 예\n\n// examples\n\n// good\nlet isCircleGeofence;\nlet hasVehicles;\nlet canFetchClients;\n\n// bad\nlet circleGeofence; // circleGeofence에 boolean이 아니라, circleGeofence에 대한 정보가 들어있을 것으로 예상된다. \nlet vehicles; // 마찬가지로 vehicles를 갖는 list일 것으로 예상된다.\nlet fetchClients; // clients를 fetch하는 함수처럼 보인다.\n\nhttps://dev.to/michi/tips-on-naming-boolean-variables-cleaner-code-35ig\n[https://dev.to/michi/tips-on-naming-boolean-variables-cleaner-code-35ig]\n\n\nDATE\n\n날짜만 포함하는 Date 형식인 경우 (yyyy-mm-dd 형태) postFix 로 on 사용.\n\n시간을 포함하는 Date 형식인 경우 (yyyy-mm-dd HH:mm:SS) postFix 로 at 사용.\n\nconst startOn = '2021-01-21' (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nconst startAt = '2021-01-21' (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nconst endOn = '2021-01-21T00:00:00.000Z' (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nconst endAt = '2021-01-21T00:00:00.000Z' (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://www.englishclub.com/grammar/prepositions-at-in-on-time.htm\n[https://www.englishclub.com/grammar/prepositions-at-in-on-time.htm]\n\n\nABBREVIATIONS\n\n * 가능하면 사용하지 않는다.\n\n * 꼭 사용해야 한다면 두글자일 때는 대문자로 한다.\n\n * 꼭 사용해야 한다면 세글자 이상일 때는 camelCase / PascalCase 로 한다.\n\n * https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/141e06ef(v=vs.71)?redirectedfrom=MSDN\n   [https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/141e06ef(v=vs.71)?redirectedfrom=MSDN]\n\n\nOPENING OR CLOSING\n\n단순히 요소를 여닫기 위해 필요한 변수는 open* 로 짓는다.\n\n * boolean 타입이어야 한다.\n\n * open 으로만 짓는것도 허용한다.\n\n * 필요한 경우 openNotificationPopup 처럼 명사를 붙인다.\n\n * false인 경우 닫히도록 구현해야 한다.\n\nconst [open, setOpen] = useState(false); (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nconst [isOpen, setIsOpen] = useState(false); (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nopen && <Alert />\nopenCreateUserModal && <CreateUserModal />\n\n요소를 여닫을때 주입해야 하는 데이터가 있는 경우 openWith* 으로 짓는다.\n\n * T | undefined 타입이어야 한다.\n\n * 값이 undefined인 경우에만 닫히도록 구현해야 한다.\n\n * With 뒤에는 어떤 데이터를 담는지 알 수 있도록 데이터의 이름을 넣는다.\n\nconst [openWithUser, setOpenWithUser] = useState<UserModel>(user); (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nuseState의 경우 useState<S = undefined>(): [S | undefined,\nDispatch<SetStateAction<S | undefined>>]; 같은 시그니쳐를 가지므로 굳이 undefined를 명시해줄 필요는\n없다.\n\nopenWithUser && <ModifyModal user={openWithUser} />\n\n\nREDUNDANT\n\ninfo, data 같은 postfix 는 붙이지 않는다.\n\n * dumpster vs dumpsterInfo\n\n * user vs userData\n\ninfo, data 같은 postfix 를 붙임으로써 더 알 수 있는 정보가 있나? → 없다\n\n\n참고\n\nhttps://brunch.co.kr/@goodvc78/12 [https://brunch.co.kr/@goodvc78/12]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/176848899"
  },
  {
    "pageContent": "문서 작성 가이드\n * 주석\n   * 토큰 목록\n * 커밋 메시지\n   * Semantic Commit Messages\n   * AI Commits\n * 에러 메시지\n\n\n주석\n\n주석을 작성할 때 앞에 TODO 와 같은 토큰을 붙이면 검색이 용이하고 주석을 작성한 목적에 따른 분류 가능\n\n// TODO: validation 구현해야 함\n// NOTE: 왜 이렇게 개발했냐면...\n\n\n토큰 목록\n\n * NOTE\n   \n   * 주목 필요한 부분\n   \n   * 그냥 주석이랑 차이 없지만 하이라이트 시켜서 개발자가 한번 더 읽어 보도록 하기 위한 용도\n     \n     image-20240527-011602.png\n     [https://ecubelabs.atlassian.net/wiki/download/attachments/120783029/image-20240527-011602.png?api=v2]\n\n * TODO\n   \n   * 아직 구현되지 않았지만 언젠가 해야 하는 일\n\n * FIXME\n   \n   * 빠른 시간 내에 해야 하는 일\n   \n   * 어떤 목적(최적화, 리팩토링 등)을 달성하기 위해 코드를 고칠 필요가 있음\n\n * HACK\n   \n   * 주석이 없다면 왜 이렇게 코딩했을지 알 수 없는 예상치 못한 방법을 사용함\n\n * OPTIMIZE\n   \n   * 최적화가 필요한 부분\n\n * BUG\n   \n   * 버그가 있는 코드\n\n * HARDCODING\n   \n   * 하드코딩된 값\n\n\n커밋 메시지\n\n\nSEMANTIC COMMIT MESSAGES\n[https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716]\n\n\nAI COMMITS [https://github.com/Nutlope/aicommits]\n\n\n에러 메시지\n\nhttps://www.morling.dev/blog/whats-in-a-good-error-message/\n[https://www.morling.dev/blog/whats-in-a-good-error-message/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783029"
  },
  {
    "pageContent": "JS/TS 개발 가이드\n\nFront-end, Back-end 에 공통적으로 적용되는 JS 개발 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1333264389"
  },
  {
    "pageContent": "Date 개발 가이드\n * 타입\n   * DateTime\n   * DayOfWeek\n   * CalendarDate\n * 연산\n * DateTime ↔︎ CalendarDate\n * Summer time\n\n\n타입\n\n다음과 같이 사용하기로 약속한다.\n\n\nDATETIME\n\nhttps://docs.microsoft.com/en-us/dotnet/api/system.datetime?view=net-6.0\n[https://docs.microsoft.com/en-us/dotnet/api/system.datetime?view=net-6.0]\n\ntype DateTime = string; // 날짜 + 시간 정보가 있는 string\n\n\nDAYOFWEEK\n\nhttps://docs.microsoft.com/en-us/dotnet/api/system.dayofweek?view=net-5.0\n[https://docs.microsoft.com/en-us/dotnet/api/system.dayofweek?view=net-5.0]\n\ntype DayOfWeek \n  = 'Sunday'\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday';\n\n\nCALENDARDATE\n\nhttps://en.wikipedia.org/wiki/Calendar_date\n[https://en.wikipedia.org/wiki/Calendar_date]\n\ntype CalendarDate = string; // yyyy-mm-dd 형태의 string\n\n\n\n\n연산\n\nDate 연산은 항상 libs/date, libs/calendar-date 를 통해야 한다.\n\nDate 라이브러리는 종류가 다양한데 인터페이스도 다 달라서 특정 라이브러리에 의존하게 개발해 놓으면 나중에 교체가 너무 힘들기 때문이다.\n\n입력받는 parameter 에따라서 나누어 사용한다\n\n * 입력받는 parameter가 CalendarDate면 libs/calendar-date\n\n * 입력받는 parameter가 Date면 libs/date\n\n * https://github.com/Ecube-Labs/haulla-back-office-front/pull/986#discussion_r1058172528\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/986#discussion_r1058172528]\n\n\nDATETIME ↔︎ CALENDARDATE\n\n타임존 없이는 이 과정이 성립할 수 없다.\n\nDateTime: 2022-12-27T03:00:00.000Z\n\n * Asia/Seoul 기준 CalendarDate: 2022-12-27\n\n * America/Los_Angeles 기준 CalendarDate: 2022-12-26\n\n * 타임존이 없다면 CalendarDate 로 2022-12-27 을 사용해야 할지 2022-12-26 를 사용해야 할지 결정할 수 없다.\n\n\n\n\nSUMMER TIME\n\ntimezone을 다룰때 미국에는 Summer Time이 있기 때문에 해당 테스트가 이루어져야 한다. (moment를 사용하는 경우\nutcOffset 같은 애들은 모킹된 날짜 기준이 아닌 현재날짜 기준으로 offset을 하기때문에 모킹이 되지 않는다.)\n\n * 테스트는 date 함수 뿐만 아니라 사용하는곳에서도 작성하면 좋을 것 같다.\n\n// packages/calendar-date/src/calendar-date.test.ts\ndescribe(\"startOfDay() 테스트\", () => {\n  test(\"해당 타임존에서 0시가 되는 UTC를 반환한다. - LA\", () => {\n    expect(startOfDay(\"2022-12-28\", \"America/Los_Angeles\")).toEqual(\n      new Date(\"2022-12-28T08:00:00.000Z\")\n    );\n  });\n  test(\"해당 타임존에서 0시가 되는 UTC를 반환한다. - LA(summerTime)\", () => {\n    expect(startOfDay(\"2022-08-28\", \"America/Los_Angeles\")).toEqual(\n      new Date(\"2022-08-28T07:00:00.000Z\")\n    );\n  });\n});\n\n// core-api/src/services/individual-services/domain/model.test.ts\ntest('collectionExpectedAt을 수거 요일 중 가장 빠른 요일로 변경한다.', () => {\n    const service = plainToClass(IndividualService, {\n        ...baseService,\n        collectionExpectedAt: undefined,\n        frequency: new Frequency({ every: '1 week', on: ['Sunday'], count: 1 }),\n    });\n    service.determineCollectionExpectedAt('America/Los_Angeles');\n\n    expect(service.collectionExpectedAt).toEqual(new Date('2023-09-04T07:00:00.000Z'));\n});\ntest('collectionExpectedAt을 수거 요일 중 가장 빠른 요일로 변경한다. - no summerTime', () => {\n    mockDate(new Date('2023-12-14T00:00:00.000Z'));\n    const service = plainToClass(IndividualService, {\n        ...baseService,\n        collectionExpectedAt: undefined,\n        frequency: new Frequency({ every: '1 week', on: ['Sunday'], count: 1 }),\n    });\n    service.determineCollectionExpectedAt('America/Los_Angeles');\n\n    expect(service.collectionExpectedAt).toEqual(new Date('2023-12-18T08:00:00.000Z'));\n});",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1938784349"
  },
  {
    "pageContent": "Front-end 개발 가이드\n\n앱, 웹에 공통적으로 적용 되는 개발 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230621346"
  },
  {
    "pageContent": "Back-end 개발 가이드 (Node.js)\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/111116289"
  },
  {
    "pageContent": "모바일 앱 개발 가이드\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2043609129"
  },
  {
    "pageContent": "배포 가이드",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/220233971"
  },
  {
    "pageContent": "DB 작업 관련 가이드\n * DB 작업 과정\n * DB 작업 JIRA 템플릿\n * DBA\n\n\n\n\n\nDB 작업 과정\n\nhaulla는 아래 과정 없이 ORM을 이용해 별도로 관리한다.\n\n 1. 개발자 → DBA 에게 JIRA 로 요청. 요청할 때는 아래의 템플릿 규칙을 준수해야 한다.\n    \n    1. stage DB 는 개발자가 직접 변경해도 되고 잘 모르겠으면 DBA 에게 요청해도 된다.\n\n 2. DBA 는 해당 이슈로 PR 생성해서 db-schema [https://github.com/Ecube-Labs/db-schema] 코드\n    리뷰 진행.\n    \n    1. DBA 끼리 하거나 작업을 요청한 개발자도 함께 하거나.\n\n 3. PR 머지 되면 DBA 가 prod DB 에 반영.\n\n\n\n\n\nDB 작업 JIRA 템플릿\n\n필드\n\n값\n\nProject\n\nSoftware (CCNB)\n\nIssue Type\n\nTask\n\nComponent/s\n\nInfra/DB\n\n나머지 필드\n\n관리자가 이해할 수 있는 내용을 자유롭게 기술\n\n\n\n\n * 계정 생성 요청\n\n * 데이터 보정 요청\n   \n   * 쿼리는 본인이 직접 작성해야 함\n\n\n\n\n\nDBA\n\nDB\n\nDBA\n\nccn db\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\nproduct db\n\n강승현 (Tim)\n[https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence]\n\nhaulla db\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/138314121"
  },
  {
    "pageContent": "Dockerfile 작성 가이드\n * CMD에서 npm 스크립트 사용 금지\n * yarn 으로 CMD 작성 시 v1 사용 금지\n * 환경변수\n   * ARG\n   * ENV\n     * Use case\n * ARG 명령 사용시 주의할 점\n   * Bad\n   * Good\n * 가능하면 이미지 사이지를 작게, 빌드할때 캐시가 되도록\n\n\nCMD에서 NPM 스크립트 사용 금지\n\n * https://github.com/Ecube-Labs/kafka-webhook-producer/pull/7\n   [https://github.com/Ecube-Labs/kafka-webhook-producer/pull/7]\n\n * https://github.com/npm/npm/pull/10868 [https://github.com/npm/npm/pull/10868]\n\nnpm 으로 실행하면 SIGTERM / SIGINT와 같은 시그널이 정상적으로 동작하지 않아 라이프사이클 핸들링에 문제가 생긴다.\n\n\nYARN 으로 CMD 작성 시 V1 사용 금지\n\n * yarn v1은 signal을 정상적으로 처리하지 않으므로 사용하면 안된다.\n\n * 프로젝트 내부에서 v3+ 를 사용한다고 해도 전역에 있는 yarn이 v1인 경우 문제가 해결되지 않으므로 전역 버전을 별도로 설정한다.\n\n * 참고\n   \n   * https://github.com/Ecube-Labs/ecubelabs/pull/284\n     [https://github.com/Ecube-Labs/ecubelabs/pull/284]\n\nRUN corepack enable\nRUN corepack prepare yarn@3.5.1 --activate\n\n\n환경변수\n\n\nARG\n\nARG = 빌드 할 때만 유효\n\n// Dockerfile\nFROM node:18-alpine\nARG NODE_ENV\nRUN npm run build\nCMD [\"node\", \"dist/server.js\"]\n\n> docker build --build-arg NODE_ENV=development .\n// npm run build 할때 NODE_ENV=development\n// 컨테이너 실행할 때 NODE_ENV=undefined\n\n\n\n// Dockerfile\nFROM node:18-alpine\nRUN npm run build\nARG NODE_ENV\nCMD [\"node\", \"dist/server.js\"]\n\n> docker build --build-arg NODE_ENV=development .\n// npm run build 할때 NODE_ENV=undefined\n// 컨테이너 실행할 때 NODE_ENV=undefined\n\n→ 순서가 중요하다.\n\n\nENV\n\nENV = 빌드타임, 런타임에 유효\n\n// Dockerfile\nFROM node:16-alpine\nARG NODE_ENV\nENV APP_ENV=$NODE_ENV\nRUN npm run build\nCMD [\"node\", \"dist/server.js\"]\n\n> docker build --build-arg NODE_ENV=development .\n// npm run build 할때 NODE_ENV=development, APP_ENV=development\n// 컨테이너 실행할 때 NODE_ENV=undefined, APP_ENV=development\n\n\nUSE CASE\n\n> docker run -e \"APP_ENV=local\"\n\n런타임 환경변수는 보통 실행 환경에 따라 다르기 때문에 Dockerfile 에 잘 선언하지 않는다.\n\n(Dockerfile 에서 ENV 로 선언한 값은 컨테이너 실행 시 -e 옵션으로 덮어 씀)\n\n빌드타임에 결정 되는 값을 런타임에서도 사용할 때 보통 ENV 를 사용한다.\n\n(Ex - commit hash)\n\n\nARG 명령 사용시 주의할 점\n\nnpm ci 는 NODE_ENV 환경변수가 “production” 이면 devDependency를 설치하지 않습니다.\n\nARG 명령이 실행되면 빌드중인 컨테이너에 환경변수로 설정된다.\n즉, 아래 Bad 예시에선 9번째 줄 시점에서 NODE_ENV, PORT, COMMIT_HASH 3개가 환경변수로 선언된것.\n\n때문에 NODE_ENV를 “production” 으로 주입해서 빌드한 경우, 11번째 줄에서 설치하는 모듈은 devDependency에 있는\n패키지를 제외하고 설치되는것이다.\n\n\nBAD (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nFROM node:18-alpine\n\nWORKDIR /my-custom-app\n\nCOPY package*.json ./\n\nARG NODE_ENV\nARG PORT\nARG COMMIT_HASH\n\nRUN npm ci\n\nCOPY . .\n\nENV NODE_ENV=$NODE_ENV \\\n    PORT=$PORT \\\n    COMMIT_HASH=$COMMIT_HASH\n    \nRUN npm run build\n\nCMD [\"node\", \"dist/server.js\"]\n\n이렇게 작성하면 TypeScript나 Webpack처럼 devDependency에 넣어둔 패키지를 설치하지 않아서 19번 라인에서 앱 빌드를\n시도하면 실패하게 될 수 있다. (일반적으로 NODE_ENV=production만 해당)\n\nWhy? 앱 빌드에 필요한 tsc나 webpack cli가 설치되지 않았기 때문이다.\n\n\nGOOD (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nFROM node:18-alpine\n\nWORKDIR /my-custom-app\n\nCOPY package*.json ./\n\nRUN npm ci\n\nCOPY . .\n\nARG NODE_ENV\nARG PORT\nARG COMMIT_HASH\n\nENV NODE_ENV=$NODE_ENV \\\n    PORT=$PORT \\\n    COMMIT_HASH=$COMMIT_HASH\n\nRUN npm run build\n\nCMD [\"node\", \"dist/server.js\"]\n\n이렇게 하면 필요한 항상 모든 패키지가 설치된 상태로 앱 빌드를 시작할 수 있다.\n\n단, devDependency도 빌드된 이미지에 포함되기 때문에 이미지 크기가 더 커진다.\n\n이미지 크기를 작게 만드려면 최종적으로 필요한 패키지만 남겨놓도록 작성하면 된다.\nmulti-stages build\n[https://docs.docker.com/develop/develop-images/multistage-build/]를 활용하던가, 마지막\n앱을 실행할때 필요 없는 패키지를 지우는게 일반적이다.\n\n그러나 위 방법대로 하면 layer cache가 안돼서 빌드가 매번 오래 걸릴수도 있다는 단점이 있으니 잘 작성해야한다.\n\n\n가능하면 이미지 사이지를 작게, 빌드할때 캐시가 되도록",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/852393996"
  },
  {
    "pageContent": "Jenkins job 작성 가이드\n * cron\n\n\nCRON\n\n특별한 이유가 있는 게 아니라면 분에 0 을 입력하지 않는다.\n\n0 4 * * * (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nH 4 * * * (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n0 을 입력하게 되면 n시 0분이 되었을 때 동시에 여러 job 이 실행 되는 경우가 생긴다.\n\nH 를 사용하면 Jenkins 가 알아서 job 실행 시점을 분산시킨다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2844688853/image-20231124-071352.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2844688853/image-20231124-071406.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2844688853"
  },
  {
    "pageContent": "번역 요청 가이드\n\n번역 요청은 기획자만 합니다.\n\n개발자가 번역 요청을 하고 싶은 경우 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 문의 해주세요.\n\n\n\n * 신규 번역 요청\n   * 1. 화면 설계에 번역 키 추가\n     * 1.1. 번역 키 형식\n     * 1.2. 번역 키 추가\n   * 2. 지라를 통해 번역 요청\n * 번역 수정 요청\n   * 1. 지라를 통해 번역 요청\n * 출력 데이터 형식\n   * 변수가 있는 출력 데이터\n * 기존 다국어 메시지 migration\n\n\n신규 번역 요청\n\n\n1. 화면 설계에 번역 키 추가\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191230-033522.png?api=v2]\n\n\n1.1. 번역 키 형식\n\n * mp__ (언더바 두개)를 prefix 로 붙이고 나머지는 _ 를 이용해 적절하게 이름을 짓는다.\n   \n   * ex) mp__hello_world\n\n * 번역 키는 고유값이어야 한다. (위키에서 번역 키 검색 시 일반적인 영어 단어가 같이 검색되지 않도록 위와 같이 prefix 를 정함)\n   \n   * 아래와 같이 위키에서 검색했을 때 검색 결과가 있으면 키 중복이다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20200114-015647.png?api=v2]\n     \n     \n\n\n1.2. 번역 키 추가\n\n * 출력 데이터 열에 추가하면 됨.\n\n * 반드시 한국어 + 콤마 + 번역 키 형태로 추가 한다.\n   \n   * 중간에 공백을 넣지 않는다.\n     \n     * ex) 알림 목록, mp__notifications (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n       \n       * 콤마 와 번역 키 사이에 공백이 있기 때문에 위의 예제는 잘못된 것.\n   \n   * 번역 자체에 변수를 포함해야 한다.\n     \n     * 단 변수가 금액인 경우, 번역에 통화 기호를 포함하지 않는다.\n     \n     * ex) 추천됨 {price},mp__suggested,Max Price {price} (파란별)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/72/2705.png]\n     \n     * ex) 추천됨 $ {price},mp__suggested,Max Price $ {price} (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n\n2. 지라를 통해 번역 요청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191230-033629.png?api=v2]\n\n * Project: CCNB\n\n * Assignee: 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * Description\n   \n   * 한국어 + 콤마 + 번역 키\n   \n   * 중간에 공백을 넣지 않는다.\n   \n   * n 개가 있어도 상관 없음.\n\n * 나머지 필드는 optional.\n\n\n번역 수정 요청\n\n * 화면 설계의 “출력 데이터” 는 이미 한국어 + 콤마 + 번역 키 형태.\n\n * 화면 설계의 한국어를 직접 수정하지 않고 바로 지라를 통해 수정 요청 한다.\n\n\n1. 지라를 통해 번역 요청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191230-033710.png?api=v2]\n\n * Project: CCNB\n\n * Assignee: 김일두(Charlie)\n   [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n * Description\n   \n   * 한국어 + 콤마 + 번역 키\n   \n   * 중간에 공백을 넣지 않는다.\n   \n   * n 개가 있어도 상관 없음.\n\n * 나머지 필드는 optional.\n\n\n출력 데이터 형식\n\n\n변수가 있는 출력 데이터\n\n변수는 중괄호로 감싸면 된다. 변수의 이름은 임의로 해도 무방하다.\n\nex)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20200211-012354.png?api=v2]\n\n출력 데이터\n\n * 한글: 즉시 낙찰 {price}\n\n * 영어: Secure this collection at {price}\n\n\n\n\n기존 다국어 메시지 MIGRATION\n\n * 기존 다국어 메시지에는 출력 데이터에 번역 키가 없는 상태\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191226-095953.png?api=v2]\n   \n   * 한번에 번역 키를 다 추가할 수는 없으니 변경 사항이 있는 화면 설계 위주로\n     https://translation.ecubelabs.xyz/ [https://translation.ecubelabs.xyz/] 에서\n     번역 키를 확인한 뒤 화면 설계에 반영.\n   \n   * 키가 없는 경우 개발자는 기획자에게 키\n   \n   * 위의 경우 수거 확인 에 대한 번역 키는 mp__confirm_collection이므로,\n     출력 데이터를 수거 확인,mp__confirm_collection으로 변경 하면 된다.\n\n * 삭제 된 번역 제거\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/262734319/image-20191226-100536.png?api=v2]\n   \n   * 위와 같이 취소선으로 삭제 된 번역은 위키에 남겨두지 말고 그냥 지운다.\n   \n   * 이것도 한번에 다 할 수는 없으니 눈에 띌 때마다 지운다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/262734319"
  },
  {
    "pageContent": "RxJS\n\n\n\n\n\n\n\ntap [https://rxjs-dev.firebaseapp.com/api/operators/tap] 을 사용한다면 내가 제대로 개발하고\n있는건지 먼저 의심해봐야 한다.\n\n디버깅 할 때 console.log를 찍는게 아니라면 사이드 이펙트를 일으키려고 사용하는 경우가 대부분이기 때문이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334626869"
  },
  {
    "pageContent": "Secure Coding\n * X-Powered-By\n * ?\n * 보안 스캔\n\n\nX-POWERED-BY\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-powered-by\n[https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-powered-by]\n\n\n\n\n?\n\nhttps://www.scalescale.com/tips/nginx/how-to-deny-script-execution-inside-writable-directories/\n[https://www.scalescale.com/tips/nginx/how-to-deny-script-execution-inside-writable-directories/]\n\n\n\n\n보안 스캔\n\nhttps://observatory.mozilla.org [https://observatory.mozilla.org]\n\n\n\nColumn-Level Encryption in MySQL - Percona Database Performance Blog\n[https://www.percona.com/blog/column-level-encryption-in-mysql/]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/62128425"
  },
  {
    "pageContent": "새 프로젝트 환경 설정 가이드\n\n모든 환경은 node_modules가 설치된것을 기준으로 설명한다.\n\n\n운영환경 규칙\n\n 1. npm start 명령어를 실행했을때 조건 없이 앱 실행이 가능해야 한다.\n    \n    1. TypeScript를 사용하는 프로젝트인 경우 빌드가 되어있는 상태를 전제로 한다.\n\n 2. 앱 빌드 또는 실행시 주입이 필요한 환경변수는 모두 Dockerfile에 정의해둔다.\n    (런타임에 필요한 환경변수는 배포시 k8s가 컨테이너에 직접 주입해서 상관 없지만, 개발자를 위한 문서로서 사용한다.)\n    \n    1. Build-time에 필요한 환경변수는 “ARG” 명령어만 사용한다.\n    \n    2. Run-time에 필요한 환경변수는 “ENV” 명령어만 사용한다.\n       Build-time과 함께 사용하는 경우 ENV TEST=$TEST 처럼 인자를 환경변수에도 주입해준다.\n\n\n개발환경 규칙\n\n 1. npm run start:dev 명령어를 실행했을때 빌드되어 있지 않아도 앱 실행이 가능해야 한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204275761"
  },
  {
    "pageContent": "다국어 개발 가이드\n * ICU i18n 가이드\n * 메시지 내용\n   * 폼 레이블\n\n\nICU I18N 가이드\n\nhttps://unicode-org.github.io/icu/userguide/icu/i18n.html\n[https://unicode-org.github.io/icu/userguide/icu/i18n.html]\n\nICU에 포함된 기능만 사용해도 i18n과 l10n은 대체로 커버가 가능하기 때문에 로직에 관련 코드를 포함하지 않도록 주의\n\n\n메시지 내용\n\n\n폼 레이블\n\n필수, 선택과 같은 내용을 포함시키지 않는다.\n\nFirst Name (required) (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nFirst Name (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n<TextField required /> 와 같이 개발하기 때문에 property 를 보고 일괄적으로 스타일 및 컨텐츠를 적용할 수 있다.\n\nhttps://ecubelabs.atlassian.net/browse/MP-4368\n[https://ecubelabs.atlassian.net/browse/MP-4368]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1702428884"
  },
  {
    "pageContent": "Monorepo 가이드\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1714290725"
  },
  {
    "pageContent": "Test 작성 가이드\n\nhttps://testing-playground.com/ [https://testing-playground.com/]\n\ncheat-sheet.pdf\n[/wiki/spaces/SW/pages/27787361?preview=%2F27787361%2F2581102646%2Fcheat-sheet.pdf]\n\n[https://api.media.atlassian.com/file/ffd87bfd-b94d-4cd9-bd56-9f0fe971db86/image?token=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI4N2I5ZmE2OS1mYzI1LTRhZDYtOThiMS01NGFmOTU4OGFkYWIiLCJhY2Nlc3MiOnsidXJuOmZpbGVzdG9yZTpmaWxlOmZmZDg3YmZkLWI5NGQtNGNkOS1iZDU2LTlmMGZlOTcxZGI4NiI6WyJyZWFkIl19LCJleHAiOjE3MjA1ODEyMDksIm5iZiI6MTcyMDU3ODIwOX0.CiXmh-aiRvOBUgh3iD5zzSc34CSFxiUIj_Jw4wsx4ZI&client=87b9fa69-fc25-4ad6-98b1-54af9588adab&name=cheat-sheet.pdf]\n\n\n테스트 기본 원칙\n\n * https://www.boxuk.com/insight/the-seven-principles-of-testing/\n   [https://www.boxuk.com/insight/the-seven-principles-of-testing/]\n\n * https://howtodoinjava.com/best-practices/first-principles-for-good-tests/\n   [https://howtodoinjava.com/best-practices/first-principles-for-good-tests/]\n\n * 테스트케이스에 3가지 설명을 넣을것:\n   https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/testingandquality/3-parts-in-name.md\n   [https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/testingandquality/3-parts-in-name.md]\n   \n   * 1) 뭘 테스트 하는가?\n   \n   * 2) 시나리오\n   \n   * 3) 결과\n\n * 가능한 계산된 결과 값을 사용하지 말것:\n   https://softwareengineering.stackexchange.com/questions/126652/should-unit-test-expected-results-be-hardcoded\n   [https://softwareengineering.stackexchange.com/questions/126652/should-unit-test-expected-results-be-hardcoded]\n   \n   * 테스트 대상에 버그가 있어도 잘못된 값을 그대로 가져오기 때문에 테스트를 통과시키는 문제가 발생할 수 있다.\n   \n   * 만약 유연한 테스트 코드를 위해 계산된 결과 값을 사용해야 한다면, 얻어온 결과 값이 기대한 형태가 맞는지 검증하고 사용한다.\n\n * 구현 로직을 테스트코드에 복제하지 않도록 한다.\n   \n   * https://www.testim.io/blog/unit-testing-best-practices/\n     [https://www.testim.io/blog/unit-testing-best-practices/]\n   \n   * Test Shouldn't Duplicate Implementation Logic\n\n * 테스트 코드에 의해 로직이 실패하는것을 먼저 확인하고 로직을 작성한다.\n   \n   * 로직을 다 작성해두고 이에 맞춰 테스트 코드를 작성하는것보다, 테스트에 실패하는것을 확인하고 로직을 개선해야 훨씬 효과적인 테스트\n     코드를 작성할 수 있다.\n   \n   * 이를 지키지 않을 경우 로직이 이상하게 동작하는데 잡아내지 못하는 테스트 코드를 만들기 쉽다.\n     (=== 의미 없는 테스트 코드)\n   \n   * TDD 원칙을 모두 따를 필요는 없으나, 의미있는 테스트 코드를 작성하기 위한 가장 효과적인 방법중 하나이다.\n\n\nTDD\n\n> TDD의 장점\n> \n> • 자신이 얼마나 설계를 못하고 의존적이며 즉흥적인 코딩을 하고 있는지 (=엉터리 개발자인지) 알게 된다.\n\nhttps://repo.yona.io/doortts/blog/issue/2#yb-header-생각이-살짝-바뀐-부분\n[https://repo.yona.io/doortts/blog/issue/2#yb-header-생각이-살짝-바뀐-부분]\n\n\nBDD\n\nTDD와 크게 다르지 않다.\n다만, 테스트 케이스를 사용자의 입장(요구사항)에서 작성하는것이 차이점이라고 볼 수 있을것같다.\n\n * https://yorr.tistory.com/26 [https://yorr.tistory.com/26]\n\n * https://blog.aliencube.org/ko/2014/04/02/differences-between-bdd-and-tdd/\n   [https://blog.aliencube.org/ko/2014/04/02/differences-between-bdd-and-tdd/]\n\n테스트 코드가 기획 문서와도 같게 관리되는것이 베스트라고 보인다.\n\n\n읽어볼 만한 자료들\n\n * 단위 테스트부터 잘 작성하고 볼 일: http://huns.me/development/1865\n   [http://huns.me/development/1865]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27787361"
  },
  {
    "pageContent": "분산 추적\n\nGoal: https://zipkin.io/ [https://zipkin.io/]\n\n\n분산 추적이란?\n\nhttps://www.elastic.co/guide/en/apm/get-started/6.6/distributed-tracing.html#distributed-tracing\n[https://www.elastic.co/guide/en/apm/get-started/6.6/distributed-tracing.html#distributed-tracing]\n\n\n사용 예시\n\n아래처럼 한 트랜잭션 안에서 같은 txId를 공유하도록 구현한다. 두 애플리케이션은 매 요청마다 log forwarder로 로그를 던진다.\n(ref. Elastic Cloud on Kubernetes (ECK)\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/35848293] )\n\n// haulla-api\nawait axios.post(dislpadUrl, {..}, { \n  headers : {\n    'x-request-id': txId\n  } \n})\n\n// dialpad-api\nctx.state.txId = ctx.get('x-request-id');\n\n\n\n결과적으로 txId로 아래처럼 연관된 요청들을 한번에 추적할 수 있다. (ref.\nhttps://docs.microsoft.com/ko-kr/dotnet/core/diagnostics/distributed-tracing-concepts#activity-ids\n[https://docs.microsoft.com/ko-kr/dotnet/core/diagnostics/distributed-tracing-concepts#activity-ids]\n)\n\n이큐브랩의 어플리케이션 로그는 대부분 https://kibana.cleancitynetworks.com/\n[https://kibana.cleancitynetworks.com/] https://kibana-stage.ecubelabs.xyz/\n[https://kibana-stage.ecubelabs.xyz/] 에서 확인할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1868169440/image-20211020-061509.png?api=v2]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1868169440"
  },
  {
    "pageContent": "키바나 사용 가이드\n * 사용자 이벤트 검색\n\n\n사용자 이벤트 검색\n\nEvent Logger\n[https://github.com/Ecube-Labs/haulla/blob/a7bad90bd4566fbe39610e1fa94376b45c09f366/packages/event-logger/src/index.ts#L16]\n가 활성화 되어 있는 경우\n\nGoogle Tag Manager 를 활용하기 때문에 사용자가 Ad Block 같은 걸 쓰면 이벤트가 제대로 기록 되지 않는다.\n\n사용자가 버튼을 클릭했는지 확인하고 싶으면 다음과 같이 검색하면 된다\n\n스크린샷 2024-06-28 오전 9.43.10.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3074555952/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202024-06-28%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.43.10.png?api=v2]스크린샷\n2024-06-28 오전 9.44.20.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3074555952/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202024-06-28%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.44.20.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3074555952"
  },
  {
    "pageContent": "OAuth2 연동 가이드\n * [OAuth2] GCP OAuth2 Client 연동\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1891172498]\n\n\n\n--------------------------------------------------------------------------------\n\n\nSPEC\n\nIETF RFC6749를 따르면 OAuth 2.0이라 부를수 있다.\n\nhttps://datatracker.ietf.org/doc/html/rfc6749\n[https://datatracker.ietf.org/doc/html/rfc6749]\n\n\nACCESS TOKEN [https://datatracker.ietf.org/doc/html/rfc6749#section-1.4]\n\n권한을 증명할 수 있는 토큰.\n\n만료 기한이 존재해야한다.\n\n\nREFRESH TOKEN [https://datatracker.ietf.org/doc/html/rfc6749#section-1.5]\n\nAccess token을 다시 받아오기 위해 필요한 토큰.\n이 값을 사용하면 사용자가 직접 인증을 다시 해서 액세스 토큰을 받아오지 않아도 액세스 토큰을 갱신할 수 있다.\n\n리프레시 토큰을 이용하면 만료기한과 상관 없이 Access token을 다시 얻어올 수 있다.\n토큰이 만료되기 전에 주기적으로 Access token을 받아올 필요가 없다는 의미도 된다.\n\nRefresh token의 재사용 가능 여부나 만료 기한에 대해서는 스펙에 명시되어 있지 않기 때문에 구현체에 따라 다를수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1897267208"
  },
  {
    "pageContent": "Docker compose를 이용한 통합 개발 가이드\n * 준비\n   * 1. 레포 클론\n   * 2. 기반 이미지 다운로드 및 업데이트\n * 개발 시작\n   * 1. 원하는 서비스 이름 확인\n   * 2. 서비스를 나열하여 컨테이너 시작\n * 팁\n   * 특정 서비스 로그 확인\n * 트러블슈팅\n\n이 글은 CCN 기준으로 설명합니다.\n\n\n준비\n\n\n1. 레포 클론\n\n터미널에서 입력\n\ngit clone git@github.com:Ecube-Labs/ecubelabs.git\ncd ecubelabs\ngit submodule update --remote --init --recursive\n\n\n2. 기반 이미지 다운로드 및 업데이트\n\ndocker compose pull\n\n만약 이미 pull을 받았어도 최신 이미지를 받고싶다면 위처럼 pull을 하면 관련 이미지의 레이어를 업데이트한다.\n\n\n\n\n개발 시작\n\n\n1. 원하는 서비스 이름 확인\n\ndocker-compose.yml 파일을 보고 필요한 서비스의 이름을 체크한다.\n\n이번 글에서는 예시로 erp와 iot simulator를 켜려면 “ea, em, is” 가 필요하다. (각 서비스가 어떤 서비스에 의존하는지 잘\n알아야 한다.)\n\ndependency가 잘 등록되어 있지 않다면 하나하나 다 나열해야 하지만, 지금은 위의 서비스만 켜도 나머지 의존 서비스도 같이 켜진다.\n\n\n2. 서비스를 나열하여 컨테이너 시작\n\ndocker compose up --build em ea is\n\n이제 개발하면 된다.\n\n서비스 이름을 붙이지 않으면 모든 서비스가 시작될 수 있다. 리소스 낭비이므로 필요한 서비스만 시작하도록 한다.\n\n\n팁\n\n\n특정 서비스 로그 확인\n\ndocker compose logs <service-name> -f --tail 10\n\n서비스 이름을 입력하면 해당 서비스에서 마지막으로 발생한 stdout 10줄을 가져오면서 새로 발생하는 stdout을 지속적으로 보여준다.\n\n\n트러블슈팅\n\n * 가끔 DB보다 다른 서비스가 먼저 켜졌는데 재시작을 못하는 경우가 있다. 이런 경우 직접 컨테이너를 재시작해주면 된다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1912930468"
  },
  {
    "pageContent": "사용자 추적 가이드\n\nutm 이 de facto standard 인듯. 특별한 이유가 없다면 utm 을 사용해서 사용자를 추적하면 된다.\n\n\n구글 광고에서 UTM 을 활용한 사용자 추적 사례\n\n[/wiki/download/attachments/812679293/refer-haulla.png?api=v2]\n\n\nDOUBLE UTM PARAMETERS\n\n하나의 파라미터를 중복해서 사용하는 경우 마지막 값을 추적. 복수 추적이라는 개념은 없다.\n\nhttps://www.reddit.com/r/GoogleAnalytics/comments/e6ubbh/double_utm_parameters/\n[https://www.reddit.com/r/GoogleAnalytics/comments/e6ubbh/double_utm_parameters/]\n\nMP-5019 [https://ecubelabs.atlassian.net/browse/MP-5019?src=confmacro]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/812679293"
  },
  {
    "pageContent": "사무실 주소 관련 리소스\n * 미국 오피스 주소 변경\n   * 2023.03\n\n * @ccn/lang: ECUBE_ADDR\n\n * ccn-noti-server: update ccn/lang\n\n * ccn-current: tos, pp\n   \n   * https://github.com/Ecube-Labs/ccn-current/pull/340\n     [https://github.com/Ecube-Labs/ccn-current/pull/340]\n\n * erp-api: pdf export invoice\n   \n   * https://github.com/Ecube-Labs/erp-api/pull/381\n     [https://github.com/Ecube-Labs/erp-api/pull/381]\n\n * 공홈: https://www.ecubelabs.com [https://www.ecubelabs.com]\n\n * 메일 서명: https://github.com/Ecube-Labs/ecube-labs.github.io\n   [https://github.com/Ecube-Labs/ecube-labs.github.io]\n\n이사할 때 마다 위 리소스 변경이 필요한지 확인해야한다.\n\n\n\n기타:\n\nCCNB-6463 [https://ecubelabs.atlassian.net/browse/CCNB-6463] - 이슈 세부사항 가져오는 중...\n상태\n\n\n\n\n미국 오피스 주소 변경\n\n\n2023.03\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2283176041/image-20230306-050545.png?api=v2]\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/EL/pages/121307522/US\n[https://ecubelabs.atlassian.net/wiki/spaces/EL/pages/121307522/US]\n\nGH-1191 [https://ecubelabs.atlassian.net/browse/GH-1191] - 이슈 세부사항 가져오는 중... 상태\n\nTS-1804 [https://ecubelabs.atlassian.net/browse/TS-1804] - 이슈 세부사항 가져오는 중... 상태\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2283176041"
  },
  {
    "pageContent": "Copyright 작업 가이드\n\n\n하드코딩하지 말 것.\n\n 1. 해마다 작업해야 하면 귀찮다.\n\n 2. 빅테크들의 레퍼런스 찾아봤는데 다들 그렇게 중요하게 관리하지 않는다.\n    \n    1. SW-6485 [https://ecubelabs.atlassian.net/browse/SW-6485?src=confmacro]\n    \n    2. SW-7885 [https://ecubelabs.atlassian.net/browse/SW-7885?src=confmacro]\n\n\n\nRecommended\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/3912497cdb331dfc9cfd643995b05347f7fb18be/src/app/components/PublicLayout/PublicLayout.tsx#L145\n[https://github.com/Ecube-Labs/ccnx-front/blob/3912497cdb331dfc9cfd643995b05347f7fb18be/src/app/components/PublicLayout/PublicLayout.tsx#L145]\n\n<span>\n  Use of this service constitutes acceptance of our <FooterPolicyLink to=\"/tos\">ToS</FooterPolicyLink> and{' '}\n  <FooterPolicyLink to=\"/privacy-policy\">Privacy Policy</FooterPolicyLink>. © 2013-{new Date().getFullYear()}{' '}\n  Ecube Labs Co., Ltd. All rights reserved.\n</span>",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2611576932"
  },
  {
    "pageContent": "이메일 서명 개발 가이드\n\nhttps://github.com/Ecube-Labs/ecube-labs.github.io\n[https://github.com/Ecube-Labs/ecube-labs.github.io]\n\nhttps://ecube-labs.github.io/ [https://ecube-labs.github.io/]\n\n * 배너\n\n\n배너\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2802450474/image-20230921-023929.png?api=v2]\n\n * 이런 건 전체 이미지로 받을 것\n\n * 이미지를 back ground 로 적용하고 Learn More 를 버튼으로 퍼블리싱하려고 했는데 메일 클라이언트에 따라 이 방식이 통하는\n   것도 있고 안 통하는 것도 있다 → 시간 낭비하지 말고 이미지로 받기\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2802450474"
  },
  {
    "pageContent": "SEO 가이드\n\n뭘 해야 하는 지 잘 모르겠어서 SEO 업체 개발자가 올린 PR 들만 우선 적어 둔다.\n\nhttps://github.com/Ecube-Labs/haulla-landing/pull/184\n[https://github.com/Ecube-Labs/haulla-landing/pull/184]\n\nhttps://github.com/Ecube-Labs/haulla-landing/pull/186\n[https://github.com/Ecube-Labs/haulla-landing/pull/186]\n\nhttps://github.com/Ecube-Labs/haulla-landing/pull/198\n[https://github.com/Ecube-Labs/haulla-landing/pull/198]\n\n\n\n * hreflang\n * 참고\n\n\nHREFLANG\n\nHaulla Hreflang issues.p…\n[/wiki/spaces/SW/pages/2656731290?preview=%2F2656731290%2F2888565048%2FHaulla+Hreflang+issues.pdf]\n\n\n참고\n\nhttps://fe-developers.kakaoent.com/2022/221208-basic-seo-guide/\n[https://fe-developers.kakaoent.com/2022/221208-basic-seo-guide/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2656731290"
  },
  {
    "pageContent": "패키지 관리 가이드\n\n\nCONFLICT LOCK FILE (YARN.LOCK OR PACKAGE-LOCK.JSON)\n\n모노레포에는 scripts/resolve-conflict-lock.sh 스크립트가 있으므로 해당 스크립트를 실행하면 된다.\n동작 원리에 대한 자세한 내용은 아래 위키를 참고하면 된다.\n\n[OJT][Git] package-lock.json/yarn.lock 충돌 해결\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2086961308]\n\n\nBUMP\n\n * 프로젝트가 노후되지 않도록 매 달 첫번째 주 수요일에 지정된 패키지의 bump를 진행한다.\n   \n   * 패키지를 지속적으로 방치하는 경우 발생 가능한 문제를 예방한다.\n   \n   * 모든 패키지를 bump 해야하는 경우 철저한 테스트를 진행해야 하므로 평소에는 지정된 패키지에 대해서만 관리한다.\n\n * 지정된 패키지는 아래 규칙에 따라 scripts/bump-*.sh 파일에서 형상 관리된다.\n   \n   * test 관련 도구\n     \n     * jest, cypress, testing-library, …\n   \n   * lint 관련 도구\n     \n     * eslint, prettier, …\n   \n   * TODO\n     \n     * storybook, webpack\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2769551378"
  },
  {
    "pageContent": "Tooling troubleshooting guide\n\n개발 환경에서 사용되는 도구에 공통적으로 발생하는 문제를 해결하기 위해 조치한 내용을 기록한다.\n기본적으로 2명 이상이 같은 증상을 보였다면 기록하는것을 원칙으로 한다.\n\n\n\n * test/lint 실행 시 node-canvas 관련 에러 발생한 경우\n   * 조치 방법\n   * 위와 같이 했는데 아래와 같은 에러가 나는 경우\n\n\n\n--------------------------------------------------------------------------------\n\n\nTEST/LINT 실행 시 NODE-CANVAS 관련 에러 발생한 경우\n\nApple chip에서 동작하지 않는 사례 확인됨.\ncanvas 바이너리가 정상적으로 동작하기 위해 필요한 패키지를 설치하고 다시 바이너리를 컴파일해야 한다.\n\nhttps://github.com/Automattic/node-canvas/issues/1733\n[https://github.com/Automattic/node-canvas/issues/1733]\n\n\n조치 방법\n\n 1. 프로젝트에 모든 node_modules 삭제\n\n 2. brew install pkg-config cairo pango libpng jpeg giflib librsvg\n\n 3. yarn install\n\n\n위와 같이 했는데 아래와 같은 에러가 나는 경우\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]canvas 설치\n에러\n\nimage-20240408-045114.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2769682490/image-20240408-045114.png?api=v2]\n\n# This file contains the result of Yarn building a package (canvas@npm:2.11.2)\n# Script name: install\n\nnode-pre-gyp info it worked if it ends with ok\nnode-pre-gyp info using node-pre-gyp@1.0.11\nnode-pre-gyp info using node@20.12.1 | darwin | arm64\nnode-pre-gyp http GET https://github.com/Automattic/node-canvas/releases/download/v2.11.2/canvas-v2.11.2-node-v115-darwin-unknown-arm64.tar.gz\nnode-pre-gyp ERR! install response status 404 Not Found on https://github.com/Automattic/node-canvas/releases/download/v2.11.2/canvas-v2.11.2-node-v115-darwin-unknown-arm64.tar.gz \nnode-pre-gyp WARN Pre-built binaries not installable for canvas@2.11.2 and node@20.12.1 (node-v115 ABI, unknown) (falling back to source compile with node-gyp) \nnode-pre-gyp WARN Hit error response status 404 Not Found on https://github.com/Automattic/node-canvas/releases/download/v2.11.2/canvas-v2.11.2-node-v115-darwin-unknown-arm64.tar.gz \ngyp info it worked if it ends with ok\ngyp info using node-gyp@9.3.1\ngyp info using node@20.12.1 | darwin | arm64\ngyp info ok \ngyp info it worked if it ends with ok\ngyp info using node-gyp@9.3.1\ngyp info using node@20.12.1 | darwin | arm64\ngyp info find Python using Python version 3.12.2 found at \"/opt/homebrew/opt/python@3.12/bin/python3.12\"\ngyp info spawn /opt/homebrew/opt/python@3.12/bin/python3.12\ngyp info spawn args [\ngyp info spawn args   '/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/gyp_main.py',\ngyp info spawn args   'binding.gyp',\ngyp info spawn args   '-f',\ngyp info spawn args   'make',\ngyp info spawn args   '-I',\ngyp info spawn args   '/Users/joelhan/Desktop/haulla/node_modules/canvas/build/config.gypi',\ngyp info spawn args   '-I',\ngyp info spawn args   '/Users/joelhan/Desktop/haulla/node_modules/node-gyp/addon.gypi',\ngyp info spawn args   '-I',\ngyp info spawn args   '/Users/joelhan/Library/Caches/node-gyp/20.12.1/include/node/common.gypi',\ngyp info spawn args   '-Dlibrary=shared_library',\ngyp info spawn args   '-Dvisibility=default',\ngyp info spawn args   '-Dnode_root_dir=/Users/joelhan/Library/Caches/node-gyp/20.12.1',\ngyp info spawn args   '-Dnode_gyp_dir=/Users/joelhan/Desktop/haulla/node_modules/node-gyp',\ngyp info spawn args   '-Dnode_lib_file=/Users/joelhan/Library/Caches/node-gyp/20.12.1/<(target_arch)/node.lib',\ngyp info spawn args   '-Dmodule_root_dir=/Users/joelhan/Desktop/haulla/node_modules/canvas',\ngyp info spawn args   '-Dnode_engine=v8',\ngyp info spawn args   '--depth=.',\ngyp info spawn args   '--no-parallel',\ngyp info spawn args   '--generator-output',\ngyp info spawn args   'build',\ngyp info spawn args   '-Goutput_dir=.'\ngyp info spawn args ]\nTraceback (most recent call last):\n  File \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/gyp_main.py\", line 42, in <module>\n    import gyp  # noqa: E402\n    ^^^^^^^^^^\n  File \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/pylib/gyp/__init__.py\", line 9, in <module>\n    import gyp.input\n  File \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/gyp/pylib/gyp/input.py\", line 19, in <module>\n    from distutils.version import StrictVersion\nModuleNotFoundError: No module named 'distutils'\ngyp ERR! configure error \ngyp ERR! stack Error: `gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/Users/joelhan/Desktop/haulla/node_modules/node-gyp/lib/configure.js:325:16)\ngyp ERR! stack     at ChildProcess.emit (node:events:518:28)\ngyp ERR! stack     at ChildProcess._handle.onexit (node:internal/child_process:294:12)\ngyp ERR! System Darwin 23.4.0\ngyp ERR! command \"/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node\" \"/Users/joelhan/Desktop/haulla/node_modules/node-gyp/bin/node-gyp.js\" \"configure\" \"--fallback-to-build\" \"--update-binary\" \"--module=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release/canvas.node\" \"--module_name=canvas\" \"--module_path=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release\" \"--napi_version=9\" \"--node_abi_napi=napi\" \"--napi_build_version=0\" \"--node_napi_label=node-v115\"\ngyp ERR! cwd /Users/joelhan/Desktop/haulla/node_modules/canvas\ngyp ERR! node -v v20.12.1\ngyp ERR! node-gyp -v v9.3.1\ngyp ERR! not ok \nnode-pre-gyp ERR! build error \nnode-pre-gyp ERR! stack Error: Failed to execute '/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node /Users/joelhan/Desktop/haulla/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --update-binary --module=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release/canvas.node --module_name=canvas --module_path=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release --napi_version=9 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v115' (1)\nnode-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/Users/joelhan/Desktop/haulla/node_modules/@mapbox/node-pre-gyp/lib/util/compile.js:89:23)\nnode-pre-gyp ERR! stack     at ChildProcess.emit (node:events:518:28)\nnode-pre-gyp ERR! stack     at maybeClose (node:internal/child_process:1105:16)\nnode-pre-gyp ERR! stack     at ChildProcess._handle.onexit (node:internal/child_process:305:5)\nnode-pre-gyp ERR! System Darwin 23.4.0\nnode-pre-gyp ERR! command \"/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node\" \"/Users/joelhan/Desktop/haulla/node_modules/@mapbox/node-pre-gyp/bin/node-pre-gyp\" \"install\" \"--fallback-to-build\" \"--update-binary\"\nnode-pre-gyp ERR! cwd /Users/joelhan/Desktop/haulla/node_modules/canvas\nnode-pre-gyp ERR! node -v v20.12.1\nnode-pre-gyp ERR! node-pre-gyp -v v1.0.11\nnode-pre-gyp ERR! not ok \nFailed to execute '/Users/joelhan/.nvm/versions/node/v20.12.1/bin/node /Users/joelhan/Desktop/haulla/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --update-binary --module=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release/canvas.node --module_name=canvas --module_path=/Users/joelhan/Desktop/haulla/node_modules/canvas/build/Release --napi_version=9 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v115' (1)\n\npython 버전이 3.12 인 경우 downgrade 해서 사용한다.\nhttps://github.com/nodejs/node-gyp/issues/2869\n[https://github.com/nodejs/node-gyp/issues/2869]\n\n * brew unlink python && brew install python@3.11\n\n * node_modules/canvas 삭제 후 yarn install",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2769682490"
  },
  {
    "pageContent": "Framer 컴포넌트 개발 가이드\n\n개발자가 개발한 컴포넌트를 Framer에 import 해서 디자이너/기획자가 그대로 이용할 수 있다.\n\n다만 여러가지 제약사항을 지키지 않으면 정상적으로 이용할 수 없게 되므로 유의해서 관리해야 한다.\n\n * 개발된 컴포넌트 Framer Import 방법\n * Portal을 이용해 띄우는 컴포넌트는 Framer 내장 컴포넌트의 스타일이 적용되지 않는다.\n\n\n\n--------------------------------------------------------------------------------\n\n\n개발된 컴포넌트 FRAMER IMPORT 방법\n\n이 방법을 따라야 디자이너/기획자가 컴포넌트를 프레이머에서 사용할 수 있다.\n\n 1. 배포한 모듈을 사용해 아래와 같은 방식으로 Code Component를 작성한다.\n    \n    1. import { addPropertyControls, ControlType } from \"framer\"\n       import * as ADS from \"https://www.unpkg.com/@ceed/ads@0.0.7/framer\"\n       \n       /**\n        * These annotations control how your component sizes\n        * Learn more: https://www.framer.com/docs/guides/auto-sizing\n        *\n        * @framerSupportedLayoutHeight auto\n        */\n       export default function Button(props) {\n           const { text, ...innerProps } = props\n       \n           return (\n               <ADS.ThemeProvider>\n                   <ADS.Button {...innerProps}>{text}</ADS.Button>\n               </ADS.ThemeProvider>\n           )\n       }\n       \n       addPropertyControls(Button, {\n           text: {\n               title: \"Text\",\n               type: ControlType.String,\n               defaultValue: \"Press me\",\n           },\n           onTap: {\n               type: ControlType.EventHandler,\n           },\n           disabled: {\n               title: \"Disabled\",\n               type: ControlType.Boolean,\n               defaultValue: false,\n           },\n           color: {\n               title: \"Color\",\n               type: ControlType.Enum,\n               options: [\"primary\", \"neutral\", \"danger\", \"success\", \"warning\"],\n               optionTitles: [\"Primary\", \"Neutral\", \"Danger\", \"Success\", \"Warning\"],\n           },\n           variant: {\n               title: \"Variant\",\n               type: ControlType.Enum,\n               options: [\"solid\", \"outlined\", \"soft\", \"plain\"],\n           },\n           loading: {\n               title: \"Loading\",\n               type: ControlType.Boolean,\n               defaultValue: false,\n           },\n           endDecorator: {\n               title: \"End Decorator\",\n               type: ControlType.ComponentInstance,\n           },\n           startDecorator: {\n               title: \"Start Decorator\",\n               type: ControlType.ComponentInstance,\n           },\n           size: {\n               title: \"Size\",\n               type: ControlType.Enum,\n               options: [\"sm\", \"md\", \"lg\"],\n               defaultValue: \"md\",\n           },\n       })\n       \n\n 2. npm cdn인 unpkg 에서 프레이머용으로 번들링 한 모듈을 가져다가 사용한다.\n    ESM 기반이기 때문에 반드시 import * as ADS from ~~ 처럼 가져와야 구동에 필요한 코드가 모두 실행된다.\n\n 3. addPropertyControls 로 디자이너가 컴포넌트에 값을 주입할 수 있도록 설정한다.\n    아래 참고 문서를 기반으로 ControlType을 적절하게 설정하면 된다.\n\n * 참고\n   \n   * ThemeProvider같은 애들을 전역으로 적용할 위치가 없기 때문에 컴포넌트마다 적용하고 그대로 내보내야 한다.\n     중첩사용해도 문제가 없으므로 더 좋은 방법을 찾기 전까지는 이 방법을 그대로 따른다.\n   \n   * https://www.framer.com/developers/#code-components-property-controls\n     [https://www.framer.com/developers/#code-components-property-controls]\n\n\nPORTAL을 이용해 띄우는 컴포넌트는 FRAMER 내장 컴포넌트의 스타일이 적용되지 않는다.\n\nFramer에 컴포넌트를 Import 해줄때 disablePortal 과 같은 prop을 붙여 Portal로 렌더링하지 않도록 해야한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2915762181/2024-02-22%20at%2014.16.47@2x.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2915762181/2024-02-22%20at%2014.17.11@2x.png?api=v2]\n\nPortal 로 렌더링\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2915762181/2024-02-22%20at%2014.16.31@2x.png?api=v2]\n\nPortal 비활성화 후 렌더링\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2915762181"
  },
  {
    "pageContent": "[Go lang] K8s Operator 개발 가이드\n * Go/Operator SDK 개발 환경 설정\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3020783793]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3020587222"
  },
  {
    "pageContent": "LLM\n\nhttps://www.salesforceairesearch.com/crm-benchmark\n[https://www.salesforceairesearch.com/crm-benchmark]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069313026"
  },
  {
    "pageContent": "Git branch & merge 가이드 (Web)\n\nGit branch & merge 가이드는 이큐브랩에서 사용중인 GitHub flow 를 기반으로 한다\n\nGit#Git-브랜치정책\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/134611139#id-[OJT]Git-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%A0%95%EC%B1%85]\n참고\n\n\n\n\n\n절대 룰\n\n * main 브랜치는 항상 배포 가능한 상태로 유지되어야 한다\n\n * develop 은 아무 곳으로도 머지하지 않는다\n * 자기 자신을 assignee로 지정하지 않는다\n   * 예외\n     1. hotfix 인 경우\n        * 아무도 응답하지 않는 경우에만 자기 자신을 assignee 로 지정하고 배포한다\n          * 아무도 응답하지 않음 := SW 라인방에서 5분간 아무도 답이 없다\n     2. hotfix 가 아니면 짤 없음\n * assignee 가 approve 후 머지 한다\n\n\n\n\n\nECUBE LABS' FLOW\n\n단위가 큰 feature 를 개발할 때와 단위가 작은 feature 를 개발할 때 flow 가 약간 다르다\n\nflow 를 통일해도 되지만 작은 feature 를 개발할 때 불필요한 규칙을 강제함으로써 오는 불편함을 줄이기 위해서이다\n\n\n단위가 큰 FEATURE 의 경우\n\n[/wiki/download/attachments/51216589/ecubelabs-git-flow-large.png?api=v2]\n\n 1. 개발을 시작할 때는 항상 master 에서 feature_master 를 체크아웃 한다\n 2. feature_master 에서는 작업을 하지 않는다\n 3. 작업 단위로 feature_master 에서 feature_sub branch 를 생성한다\n 4. 작업이 완료될 때 마다 feature_sub 를 feature_master 로 머지할 때 마다 PR 을 보낸다\n 5. 테스트가 필요한 경우 feature_master 를 develop 으로 걍 머지한다\n 6. 개발이 완료되면 feature_master 를 master 로 머지하기 위한 PR 을 보낸다\n    * 이 때는 코드 리뷰는 완료된 상태이기 때문에 assignee 는 conflict 이 없으면 그냥 머지해주면 됨\n\n\n\n\n\n단위가 작은 FEATURE 인 경우 (자잘한 기능 수정, 오타 수정, 핫픽스 등)\n\n[/wiki/download/attachments/51216589/ecubelabs-git-flow-small.png?api=v2]\n\n 1. 일단 master 에서 fix-x 를 체크아웃 한다.\n 2. fix-x 에서 작업을 한다.\n 3. develop 에 fix-x를 직접 머지한다.\n 4. fix-x 를 master 에 PR 을 보낸다.\n 5. develop 브랜치에는 항상 최종적인 수정사항이 머지되어 있어야 한다.\n\n\nDEVELOP 브랜치\n\nstage 환경을 의미하는 브랜치입니다.\n\n\nDEVELOP 브랜치로의 MERGE\n\n * 리뷰되지않았거나, 완성되지 않은 변경사항을 머지해도 됩니다.\n * 실행되지않거나 오류가 발생하는 변경사항을 머지하면 안됩니다.\n * 머지하는 시점의 제한은 없습니다.\n * master 브랜치에 머지된 커밋은 develop 브랜치에도 동일하게 머지되어야합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/51216589/image2020-4-1_12-2-19.png?api=v2]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51216589"
  },
  {
    "pageContent": "Git branch & merge 가이드 (Mobile)\n\n\n\nCode Push 가 적용된 RN 프로젝트는 웹으로 취급한다.\n\n모바일은 좀 더 정교한 배포 정책이 필요해서 웹과는 다르게 Git flow 를 사용한다.\n\n\n\n\n[https://nvie.com/img/git-model@2x.png]\n\nhttps://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\n[https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221020169"
  },
  {
    "pageContent": ".gitignore 파일 작성\n\nlocal 빌드 결과물 같이 형상관리가 필요없는 파일은 .gitignore 파일에 등록한다\n\nhttps://www.gitignore.io/ [https://www.gitignore.io/] 에서 쉽게 .gitignore 파일의 초기\n버전을 생성할 수 있다\n\n아래 항목은 필수로 선택하여 개발 환경을 구성한다.\n\n * macos\n\n * visualstudiocode\n\n * node\n\n * git\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/142540848"
  },
  {
    "pageContent": "코드 리뷰 가이드\n * 리뷰 원칙\n * 진행 과정\n   * 리뷰 요청자\n     * 1. Github 들어가서 PR 생성 시작\n     * 2. 브랜치 선택\n     * 3. 본문 작성\n       * 3.1. 위키 페이지 링크\n     * 4. 변경 사항 검토\n       * 4.1. 레이블 선택\n     * 5. Reviewers, assignees 선택\n     * 6. 코드 수정\n   * 리뷰 진행자\n     * 1. 리뷰\n     * 2. 머지 (assignees 중 한명이 수행)\n   * Conversation\n * Draft PR\n   * 알림\n\n\n리뷰 원칙\n\n * Reviewer, 리뷰이는 코드의 품질이 개선되었는지 확인한다.\n\n * Reviewer, 리뷰이는 기능이 정상적으로 동작하는지 확인한다.\n\n * Reviewer 는 코멘트 작성시 질문, 사실 확인, 멘토링이 목적인 내용을 작성한다.\n\n * 여러 이슈를 하나의 PR 로 올리지 않는다.\n   \n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20211012-051354.png?api=v2]\n   \n   \n   \n   * 예외\n     \n     * 스쿼드 개발 시에는 하나의 PR 로 올린다. 이슈를 task 단위로 생성하기 때문에 이슈가 여러개 생기지만 결국은 하나의 use\n       case 를 위한 개발이라 PR 이 나뉘면 전체 동작을 파악하기가 더 힘듦.\n     \n     * 코드 리뷰 [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2804318271]\n\n\n진행 과정\n\n\n리뷰 요청자\n\n\n1. GITHUB 들어가서 PR 생성 시작\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-41-40.png?api=v2]\n\nNew pull request 클릭\n\n\n2. 브랜치 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-43-12.png?api=v2]\n\nbase branch 와 compare branch 선택\n\nbase 는 merge target, compare 는 작업한 브랜치\n\nex) main 에서 feature branch 를 생성한 후 작업한 결과를 다시 main 로 merge하려고 한다면 base=main,\ncompare=feature\n\n\n3. 본문 작성\n\n3.1. 위키 페이지 링크\n\n위키를 수정했다면 링크를 추가할 것.\n\n참고 할 필요가 있다고 생각 되는 위키도 추가해도 됨.\n\nimage-20240612-014505.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20240612-014505.png?api=v2]\n\n\n4. 변경 사항 검토\n\nFiles changed 탭을 눌러보면 PR 관련 전체 코드 변경 내역을 확인할 수 있다. 문제가 없는지 최종 검토(= self review)\n한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20210429-020439.png?api=v2]\n\n4.1. 레이블 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image-20230120-013159.png?api=v2]\n\n배포 전 DB 작업이 필요한 경우 DDL 레이블을 붙인다.\n\n\n\n\n5. REVIEWERS, ASSIGNEES 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-46-43.png?api=v2]\n\nReviewers: Code Review를 진행하는 사람\n\nAssignees: Code Review 완료 후, main merge를 진행하는 사람\n\n\n6. 코드 수정\n\n * PR을 올리고 나서 추가 작업을 해야 한다면 PR 제목에 WIP 를 붙인다. WIP 가 붙은 PR 은 머지가 불가능하다. 리뷰어들은 WIP\n   가 붙은 PR 에 대해서는 리뷰를 중지해도 된다.\n   [https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2020-3-4_13-50-1.png?api=v2]\n\n\n\n\n리뷰 진행자\n\n\n1. 리뷰\n\n자신이 reviewer 로 선정되면 메일을 받는다\n\n메일을 받으면 Code Review를 최우선으로 수행한다 (급한일이 아니면 현재 작업중인 것보다 Review가 우선. Review를 안해주면 그\n사람의 업무가 지연될 수 있다)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-57-48.png?api=v2]\n\n\n2. 머지 (ASSIGNEES 중 한명이 수행)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2018-6-14_13-48-44.png?api=v2]\n\nCode Review가 완료되면 Merge pull request 를 클릭 해 main merge가 완료될 수 있도록 한다.\n\n\nCONVERSATION\n\nReviewer가 코멘트를 남기면 다음과 같이 conversation 이 진행된다\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/34078774/image2019-5-1_15-57-25.png?api=v2]\n\n해당 코멘트에 대해 논의가 종결되면(코드 수정 or 단순 대화 종결) 대화를 마무리 짓는 사람이 conversation 을 resolve\n처리한다\n\n * 코드 수정: Reviewee가 대화를 마무리 짓는 사람\n\n\nDRAFT PR\n\n개발 완료 전 코드에 관해 의논할 게 있다면 draft PR 을 생성한다.\n\n\n알림\n\nGitHub (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n메일 (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n슬랙봇 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34078774"
  },
  {
    "pageContent": "[H][B] 에러 메세지 작성\n\n기본적으로 에러 던지기 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1163264020] 를\n참고해 개발한다.\n\n\n컨벤션\n\n 1. Active, Passive 모두 사용 가능한 상황이라면 Active를 사용한다.\n\n 2. 첫 글자는 대문자로, 문장 끝에는 마침표를 사용한다.\n\n 3. 메세지는 영어로 통일한다.\n\n 4. 현재 시제 / 과거 시제의 사용은\n    https://www.postgresql.org/docs/current/error-style-guide.html\n    [https://www.postgresql.org/docs/current/error-style-guide.html] (Present\n    vs. Past Tense) 에 맞게 사용한다.\n\n> Use past tense if an attempt to do something failed, but could perhaps succeed\n> next time (perhaps after fixing some problem). Use present tense if the\n> failure is certainly permanent.\n\n\n가이드\n\n 1. 어떤 문제가 일어났는지 포함해 작성해야 한다.\n\n 2. 해결 방법을 알려주거나, 유추할 수 있어야 한다.\n\n\n\nref.\n\n * https://github.com/Ecube-Labs/haulla-api/pull/1192#discussion_r843499718\n   [https://github.com/Ecube-Labs/haulla-api/pull/1192#discussion_r843499718]\n\n * https://www.morling.dev/blog/whats-in-a-good-error-message/\n   [https://www.morling.dev/blog/whats-in-a-good-error-message/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2384887829"
  },
  {
    "pageContent": "도메인 모델 문서 작성 규칙\n\n\n1. 제목 작성 규칙\n\n하나의 스페이스 안에서 문서 이름은 고유해야 한다.\n그렇기 때문에 제목은 Prefix를 항상 붙여서 관리한다.\n\n[??][도메인 모델] 모델이름\n\n맨 앞에는 보통 프로젝트의 약자를 쓰는데 경우에 따라 생략해도 상관 없다.\n문서 이름이 겹치는 일이 발생하면 정리하면 된다.\n\n\n2. 템플릿 선택\n\n오른쪽에서 “사용자 지정”이라고 적힌 태그같은걸 누르면 아래와 같은 템플릿이 있는데, 그것을 선택하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1516798021/image-20210312-054156.png?api=v2]\n\n\n3. 내용 작성 규칙\n\n * 맨 처음 작성되는 도메인 모델은 Aggregate root이어야 한다.\n\n * 필요한 경우 다이어그램을 그려 모델간의 관계를 표현한다.\n\n * 도메인의 이름을 정확하게 작성한다.\n   \n   * 기획자 또는 다른 개발자와 협의된 언어여야 한다.\n   \n   * 원활한 의사 소통을 위해 가능한 한글 명칭도 지정해야한다.\n   \n   * 언어는 중요하다. → https://opennote46.tistory.com/101\n     [https://opennote46.tistory.com/101]\n\n\n\n\n참고할 문서\n\n * [CA][도메인 모델] 알림 설정\n   [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1351221261]\n\n * [CA][도메인 모델] 사용자 알림\n   [https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/1172471970]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1516798021"
  },
  {
    "pageContent": "패키지 관리\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1210187842"
  },
  {
    "pageContent": "HTTP client\n\n\n\n * 합의된 HTTP client 의 필요성\n * Why Axios?\n * 주의사항\n   * Timeout 설정\n * ETC\n\n\n\n\n\n\n이큡에서는 HTTP client 로 axios [https://github.com/axios/axios] 를 사용한다\n\nCCNB-464 [https://ecubelabs.atlassian.net/browse/CCNB-464] - 이슈 세부사항 가져오는 중...\n상태\n\n\n합의된 HTTP CLIENT 의 필요성\n\n원활한 코드 리뷰와 다른 프로젝트 작업 시 생산성을 높이기 위해 모두가 이해하고 사용할 수 있는 HTTP client 가 필요하다\n\n프로젝트마다 사용하는 HTTP client 가 다르다면 모든 client 를 숙지해야 하기 때문에 생산성이 떨어진다\n\n\nWHY AXIOS?\n\n * Promise 지원\n * Light\n\n\n주의사항\n\nTIMEOUT 설정\n\n웹 API 를 호출할 때는 항상 timeout 을 설정해야 한다\n\ntimeout 을 설정하지 않으면 target API 의 장애가 current application 으로 전파된다\n\n\nETC\n\n간단한 요청에는 axios.<method_name>() 을, 많은 option이 필요한 경우에는 axios({\nmethod: <methos_name> }) 을 사용한다. (상황에 따라 사용자의 재량에 맡긴다.)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/110100487"
  },
  {
    "pageContent": "array 합치기\n\n\n성능 테스트\n\nhttps://jsperf.com/spread-vs-concat-vs-push\n[https://jsperf.com/spread-vs-concat-vs-push]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/165380683/image2019-6-17_20-33-36.png?api=v2]\n\n\n\n\n검색어: array, 배열, concat, push, merge",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165380683"
  },
  {
    "pageContent": "중복 제거\n\nHow to Remove Array Duplicates in ES6\n[https://medium.com/dailyjs/how-to-remove-array-duplicates-in-es6-5daa8789641c]\n\n\n\n\n\n중복 제거 코드\n\nconst array = [1, 1, 2, 1, 3, 2]\n\n// 방법 (1)\n[...new Set(array)]\n\n// 방법 (2)\narray.filter((item, index, array2) => array2.indexOf(item) === index)\n\n// 방법 (3)\narray.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], [])\n\n// 방법 (4)\nArray.from(new Set(array));\n\n// 방법 (5) - lodash\n_.uniq(array)\n\n\n\n성능 테스트\n\nhttp://jsben.ch/ziS3i [http://jsben.ch/ziS3i]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/116260939/image2019-2-7_13-38-24.png?api=v2]\n\nUser AgentFastest\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2)\nAppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.2 Safari/605.1.15\"(2)\n\njsben으로 공유는 불가능하다. (lodash 소스가 길어서 잘려서 로딩된다.)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/116260939/image2019-5-26_18-34-23.png?api=v2]\n\nUser AgentFastest\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\"(5)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/116260939"
  },
  {
    "pageContent": "ESLint\n\n\nESLINT [https://eslint.org/]\n\neslint는 Javascript, JSX의 코드를 분석해 문법적인 오류부터 코드의 포맷까지 일관되게 작성할 수 있게 도와주는 오픈 소스이다.\n커스터마이징이 쉽고 여러 플러그인을 통해 확장이 용이하기 때문에 여러 프로젝트에서 많이 사용 중이다.\n\n\n작동 방식\n\n먼저 보면 좋은 글 - 자바스크립트 개발자를 위한 AST(번역)\n[https://gyujincho.github.io/2018-06-19/AST-for-JS-devlopers]\n\nESLint를 실행하면 lint의 parser가 작성된 코드를 분석하여 AST(Abstract Syntax Tree)를 만든다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2103869494/image-20210820-024408.png?api=v2]\n\n그리고 eslint는 각 트리를 순회하며 설정에 맞는 규칙을 지키고 있는지 확인하고 규칙을 지키고 있지 않으면 보고하고 수정에 대한 규칙이 있을\n경우 수정할 수 있도록 도와준다.\n\n\n타입스크립트에서의 ESLINT\n\nESLint의 기본 파서인 espree [https://github.com/eslint/espree]는 자바스크립트만 분석 가능하기 때문에\n타입스크립트의 코드를 분석할 수 없다.\n\n하지만 ESLint는 앞서 말한대로 확장성이 좋기 때문에 parser를 타입스크립트 분석이 가능한 parser로 설정하면 타입스크립트에서도\n사용이 가능해진다.\n\n예전에는 타입스크립트의 린트인 TSLint가 있었지만 ESLint와 겹치는 부분이 많고 자잘한 오류가 많아 2019년에 deprecated\n되었다. https://github.com/typescript-eslint/typescript-eslint#what-about-tslint\n[https://github.com/typescript-eslint/typescript-eslint#what-about-tslint]\n\n\n\n\nESLINT-CONFIG-ECUBELABS [https://github.com/Ecube-Labs/eslint-config-ecubelabs]\n\neslint를 모듈로서 배포하기 위해선 eslint-config prefix를 붙여야 하며 ecubelabs에선\neslint-config-ecubelabs로 배포중이다. 여기서 설정한 규칙이 문법과 코드 포맷에 대한 사내 컨벤션이라 볼 수 있다.\n\n자바스크립트의 경우 index.js 에서 규칙을 설정하고 타입스크립트의 경우 typescript.js 에서 추가적으로 규칙을 설정하고 있다.\n\n자세히 들여다보면\n\n...\n  extends: [\n      'airbnb-base', // includes plugin: import\n      'plugin:import/errors',\n      'plugin:import/warnings',\n      'plugin:jest/recommended', // includes plugin: jest\n      'plugin:jest/style',\n      'plugin:prettier/recommended', // includes plugin: prettier\n  ],\n...\n\nairbnb-base에 import, jest, prettier 플러그인을 사용중이다.\n이 덕분에 prettier를 직접 사용하지 않고도 eslint를 통해 간접적으로 코드 포맷을 수정할 수 있게 된다.\n\n\n연관된 글\n\n1. 개발 환경(Lint & Prettify) 설정\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374073]\n\n\n참고 자료\n\nhttps://tech.kakao.com/2019/12/05/make-better-use-of-eslint/\n[https://tech.kakao.com/2019/12/05/make-better-use-of-eslint/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2103869494"
  },
  {
    "pageContent": "tsconfig\n\n\nTSCONFIG.JSON\n\ntsconfig.json은 타입스크립트로 작성된 코드를 자바스크립트 코드로 컴파일 할 때 컴파일러의 옵션을 설정해둔 파일이다.\n이 설정 역시 extends 옵션을 통해 상속이 가능하기 때문에 프로젝트 간 공통적인 옵션을 사용가능하다.\n\n\nCOMPILEROPTIONS\n\n말 그대로 컴파일러의 옵션을 나타낸다.\n\n예를 들어 experimentalDecorators는 데코레이터를 사용할 수 있도록 하는 옵션이다. 이 옵션을 끄게 된다면 @~~~ 를 사용할\n수 없게된다.\n\n각 옵션에 대한 설명은 https://www.typescriptlang.org/ko/tsconfig\n[https://www.typescriptlang.org/ko/tsconfig] 여기를 참고\n\n\n@ECUBELABS/TSCONFIG [https://github.com/Ecube-Labs/tsconfig]\n\necubelabs의 tsconfig들을 모아둔 모듈이다. 프로젝트에서 사용할 tsconfig는 여기에 있는 옵션을 사용하도록 한다.\n\n프로젝트마다 사용 중인 node의 버전이 다르기 때문에 맞는 모듈을 사용하면 된다.\n\n\n백엔드 환경에서 사용되는 경우\n\n사용중인 Node.js 버전에 맞게 사용하지 않으면 트랜스파일된 자바스크립트 파일이 지원되지 않는 문법을 사용해서 에러가 날 수 있다.\n자세한것은 target 정보를 참조하면 된다.\n\n프론트엔드와 다르게 번들러를 사용하지 않기 때문에 트랜스파일 과정은 오로지 이 설정에 의존한다.\n\n\n프론트엔드 환경에서 사용되는 경우\n\n대부분 웹팩과 같은 번들러를 사용하기 때문에 개발 환경에서 사용중인 Node.js, TypeScript 버전만 호환되는 설정이라면 대체로 문제가\n없다.\n\n\nNODE 버전 MIGRATION\n\ncompilerOptions에서 lib, target을 맞는 es버전에 맞춰주면 된다(ex: node16 => es2021)\n\ntsconfig는 Typescript가 Javascript로 컴파일할 때 사용하는 옵션이기 때문에 타입스크립트의 버전이 올라가면서 새로 추가된\n옵션을 사용하는 경우는 있을 수 있지만 기존의 옵션을 변경하는 경우는 거의 없다.\n\n\nNPM PUBLISH\n\n사전 준비\n\n 1. npm login 되어있어야 한다.\n\n 2. 로그인 한 npm 계정이 npm의 ecubelabs organization에 속해있어야 한다.\n    필요한 경우 관리자에게 요청한다.\n    (관리자: 김일두(Charlie)\n    [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n    or 강승현 (Tim)\n    [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence])\n\n배포\n\n 1. 최신 main 브랜치로 checkout or pull 한다.\n\n 2. npm version major|minor|patch 변경사항을 고려해 시멘틱 버전에 맞게 적절한것으로 골라서 버전을 올려준다.\n    이러면 npm이 알아서 package.json을 수정하고 커밋 + 태그를 생성해준다.\n\n 3. npm publish --access=public 해서 npm에 패키지를 배포한다.\n\n 4. git push --tags 태그를 포함해 변경사항을 원격에 올려준다.\n\n\n연관된 글\n\n1. 개발 환경(Lint & Prettify) 설정\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374073]\n\nhttps://kangax.github.io/compat-table/es2016plus/\n[https://kangax.github.io/compat-table/es2016plus/]\n\nhttps://node.green/#ES2022 [https://node.green/#ES2022]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2104590349"
  },
  {
    "pageContent": "toString/toJSON\n\n\nTOSTRING\n\nString({})\n// Print: '[object Object]'\n\nString({ toStirng() { return 'test' } });\n// Print: 'test'\n\ntoString 프로퍼티가 존재하는지 확인하고 존재하면 해당 프로퍼티의 결과 값으로 resolving\n\n\nTOJSON\n\nJSON.stringify({});\n// Print: '{}'\n\nJSON.stringify({ toJSON() { return 'test' } });\n// Print: '\"test\"'\n\ntoString과 비슷하다.\n\ntoJSON 프로퍼티가 존재하면 결과 값을 기준으로 JSON.stringify한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2334785543"
  },
  {
    "pageContent": "String 변환\n\n크롬 기준으로 단순히 String으로 변환하는 경우 Template literal이 제일 성능이 좋다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2715320374/image-20230522-091520.png?api=v2]\n\nBenchmark\n[https://perf.link/#eyJpZCI6InZpd3FxMnpmMGxoIiwidGl0bGUiOiJDb252ZXJ0IHN0cmluZyBwZXJmb3JtIiwiYmVmb3JlIjoiY29uc3QgaWQgPSAxOyIsInRlc3RzIjpbeyJuYW1lIjoidG9TdHJpbmciLCJjb2RlIjoiZm9yIChsZXQgaSA9IDA7IGkgPCAzMDAwOyArK2kpIHtcbiAgY29uc3QgcmVzdWx0ID0gaWQudG9TdHJpbmcoKTtcbn0iLCJydW5zIjpbNzAwMCwyMDAwLDEwMDAsOTAwMCwzMDAwLDcwMDAsMzAwMCwxMDAwMCw1MDAwLDIwMDAsNjAwMCwxMDAwLDYwMDAsODAwMCw0MDAwLDMwMDAsMTEwMDAsMTAwMCwyMDAwLDQwMDAsNjAwMCw5MDAwLDYwMDAsMTAwMCw1MDAwLDUwMDAsNjAwMCwxMDAwLDUwMDAsOTAwMCwxMDAwMCwzMDAwLDMwMDAsNzAwMCw1MDAwLDEwMDAwLDEwMDAwLDUwMDAsMzAwMCw5MDAwLDIwMDAsMzAwMCw2MDAwLDUwMDAsMTAwMCw0MDAwLDcwMDAsMjAwMCwxMDAwMCwxMDAwLDkwMDAsMzAwMCwyMDAwLDIwMDAsMjAwMCw0MDAwLDkwMDAsMzAwMCw3MDAwLDgwMDAsNzAwMCwzMDAwLDQwMDAsNTAwMCwzMDAwLDExMDAwLDIwMDAsMzAwMCwzMDAwLDIwMDAsODAwMCw1MDAwLDUwMDAsMTAwMDAsMjAwMCw0MDAwLDMwMDAsNDAwMCw4MDAwLDQwMDAsMzAwMCw0MDAwLDEwMDAwLDUwMDAsMTAwMCwxMDAwLDMwMDAsNjAwMCw0MDAwLDMwMDAsMzAwMCwyMDAwLDEwMDAsMTAwMCwyMDAwLDUwMDAsNDAwMCw1MDAwLDYwMDAsNDAwMF0sIm9wcyI6NDcyMH0seyJuYW1lIjoiUGx1cyBvcGVyYXRvciIsImNvZGUiOiJmb3IgKGxldCBpID0gMDsgaSA8IDMwMDA7ICsraSkge1xuICBjb25zdCByZXN1bHQgPSBpZCArICcnO1xufSIsInJ1bnMiOls0MDAwLDMwMDAsMTAwMCwxMDAwMCwzMDAwLDUwMDAsMTAwMCwxMzAwMCw1MDAwLDIwMDAsNjAwMCw5MDAwLDkwMDAsNDAwMCw2MDAwLDQwMDAsNDAwMCwxMDAwLDQwMDAsNDAwMCw4MDAwLDEzMDAwLDEwMDAwLDE1MDAwLDEwMDAwLDEwMDAsNTAwMCwxMDAwLDQwMDAsNDAwMCwxNDAwMCwzMDAwLDUwMDAsMTAwMDAsNzAwMCwxMDAwLDEzMDAwLDcwMDAsMTUwMDAsOTAwMCwxMjAwMCwxMTAwMCwzMDAwLDUwMDAsMTAwMCwyMDAwLDQwMDAsMTEwMDAsODAwMCw1MDAwLDExMDAwLDQwMDAsMjAwMCwxMTAwMCw4MDAwLDQwMDAsMTAwMCwyMDAwLDgwMDAsNDAwMCw0MDAwLDIwMDAsMjAwMCw2MDAwLDcwMDAsMTQwMDAsNDAwMCw0MDAwLDQwMDAsMzAwMCw5MDAwLDE0MDAwLDQwMDAsMTQwMDAsMzAwMCwyMDAwLDExMDAwLDQwMDAsMTAwMCwxMjAwMCwxMzAwMCwxMTAwMCwzMDAwLDEwMDAwLDEwMDAsMTAwMDAsNDAwMCw5MDAwLDIwMDAsNTAwMCwxMzAwMCwxMTAwMCwxNDAwMCwxMDAwMCwzMDAwLDYwMDAsNjAwMCwzMDAwLDYwMDAsNjAwMF0sIm9wcyI6NjQwMH0seyJuYW1lIjoiQ29uY2F0IGZ1bmN0aW9uIiwiY29kZSI6ImZvciAobGV0IGkgPSAwOyBpIDwgMzAwMDsgKytpKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFwiXCIuY29uY2F0KGlkKTtcbn0iLCJydW5zIjpbNjAwMCwyMDAwLDgwMDAsMjAwMCwyMDAwLDMwMDAsNDAwMCwxMDAwMCwzMDAwLDIwMDAsMTAwMCw2MDAwLDQwMDAsNzAwMCw5MDAwLDMwMDAsNzAwMCwxMDAwLDEwMDAwLDEwMDAsMjAwMCw4MDAwLDcwMDAsODAwMCwxMDAwLDUwMDAsMjAwMCwxMDAwLDQwMDAsNjAwMCw5MDAwLDMwMDAsMzAwMCw2MDAwLDQwMDAsMTAwMCw4MDAwLDQwMDAsMzAwMCw0MDAwLDMwMDAsMjAwMCwyMDAwLDEwMDAsMTAwMCwyMDAwLDgwMDAsNDAwMCw0MDAwLDcwMDAsNDAwMCwyMDAwLDUwMDAsMjAwMCw0MDAwLDEwMDAsNTAwMCw1MDAwLDQwMDAsOTAwMCw0MDAwLDEwMDAsODAwMCwzMDAwLDgwMDAsOTAwMCwzMDAwLDIwMDAsMzAwMCwxMDAwLDEwMDAsMzAwMCwzMDAwLDMwMDAsMjAwMCwxMDAwLDQwMDAsMzAwMCw0MDAwLDIwMDAsODAwMCwzMDAwLDMwMDAsMzAwMCwxMDAwLDEwMDAsMjAwMCwzMDAwLDcwMDAsMzAwMCwzMDAwLDQwMDAsODAwMCwyMDAwLDgwMDAsNDAwMCwzMDAwLDQwMDAsNDAwMCwzMDAwXSwib3BzIjo0MDAwfSx7Im5hbWUiOiJUZW1wbGF0ZSBsaXRlcmFscyIsImNvZGUiOiJmb3IgKGxldCBpID0gMDsgaSA8IDMwMDA7ICsraSkge1xuICBjb25zdCByZXN1bHQgPSBgJHtpZH1gO1xufSIsInJ1bnMiOls1MDAwLDMwMDAsNDAwMCw0MDAwLDEzMDAwLDUwMDAsMjAwMCwxNDAwMCwyMDAwLDEwMDAsMTAwMCw1MDAwLDEzMDAwLDUwMDAsMTkwMDAsMTAwMDAsMTYwMDAsMjgwMDAsNTAwMCwxNTAwMCw1MDAwLDE2MDAwLDE1MDAwLDEyMDAwLDIwMDAsMTMwMDAsMTAwMCwxMjAwMCwxMzAwMCwxNzAwMCwyMzAwMCwzMDAwLDYwMDAsMTEwMDAsNjAwMCwyNTAwMCwyMDAwMCw1MDAwLDYwMDAsMjYwMDAsMTAwMCwyMTAwMCwyMzAwMCwzMDAwLDEwMDAsNDAwMCw1MDAwLDI0MDAwLDEzMDAwLDIwMDAwLDE3MDAwLDEzMDAwLDEwMDAsNDAwMCwxMDAwMCwxMDAwLDUwMDAsNTAwMCwxMTAwMCwyNjAwMCwyMTAwMCwxMDAwLDE3MDAwLDUwMDAsMjAwMDAsMjAwMDAsNTAwMCw1MDAwLDUwMDAsMjYwMDAsMTQwMDAsMzAwMCw5MDAwLDUwMDAsMTAwMCwxNjAwMCwyMDAwLDQwMDAsMTEwMDAsMjcwMDAsMTIwMDAsNDAwMCwzMTAwMCw3MDAwLDE2MDAwLDEzMDAwLDMwMDAsMTAwMDAsNDAwMCwyMTAwMCwxMDAwMCwxOTAwMCwyMTAwMCwxMzAwMCw5MDAwLDEwMDAwLDE1MDAwLDI0MDAwLDkwMDAsNTAwMF0sIm9wcyI6MTA4ODB9LHsibmFtZSI6IlN0cmluZyBmdW5jdGlvbiIsImNvZGUiOiJmb3IgKGxldCBpID0gMDsgaSA8IDMwMDA7ICsraSkge1xuICBjb25zdCByZXN1bHQgPSBTdHJpbmcoaWQpXG59IiwicnVucyI6WzEwMDAwLDMwMDAsMjAwMCwyMDAwLDcwMDAsNDAwMCwxMDAwLDYwMDAsNjAwMCwzMDAwLDEyMDAwLDgwMDAsMTAwMCw4MDAwLDIwMDAsOTAwMCw0MDAwLDEyMDAwLDExMDAwLDQwMDAsNTAwMCw1MDAwLDMwMDAsNzAwMCw1MDAwLDExMDAwLDcwMDAsMTUwMDAsNzAwMCw2MDAwLDEwMDAwLDEwMDAwLDQwMDAsNzAwMCw0MDAwLDkwMDAsMTAwMCwyMDAwLDgwMDAsNDAwMCw4MDAwLDQwMDAsODAwMCw0MDAwLDEyMDAwLDUwMDAsNjAwMCw4MDAwLDgwMDAsMTIwMDAsNDAwMCw2MDAwLDYwMDAsNjAwMCwxNDAwMCwxNTAwMCwxMDAwLDQwMDAsNDAwMCw0MDAwLDcwMDAsMTIwMDAsNTAwMCw5MDAwLDUwMDAsNzAwMCwyMDAwLDMwMDAsMzAwMCw0MDAwLDMwMDAsMTEwMDAsMzAwMCw1MDAwLDUwMDAsMTMwMDAsNzAwMCwyMDAwLDkwMDAsMTAwMDAsOTAwMCwzMDAwLDcwMDAsODAwMCwxMDAwMCwxMDAwMCwzMDAwLDEwMDAwLDQwMDAsMjAwMCw4MDAwLDExMDAwLDEwMDAsMTEwMDAsMTEwMDAsMTEwMDAsODAwMCw1MDAwLDUwMDAsNzAwMF0sIm9wcyI6NjUzMH1dLCJ1cGRhdGVkIjoiMjAyMy0wNS0yMlQwOToxNDoyNS41MzJaIn0%3D]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2715320374"
  },
  {
    "pageContent": "try catch\n\n꼭 필요한 상황이 아니면 사용하지 않는다.\n\ncatch 에서 에러를 먹어버리면 에러 핸들러에 의해 에러가 처리되지 않기 때문이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2719744036"
  },
  {
    "pageContent": "GitHub Package 설정/배포/설치 방법\n\nAWS-293 [https://ecubelabs.atlassian.net/browse/AWS-293?src=confmacro] 진행하면서 작성한\n문서입니다.\n\n지금은 이 방식으로 모듈을 사용하고 있지 않습니다.\n\n\n⚙️ 모듈 배포 설정 방법\n\n\n1. 배포 할 모듈의 PACKAGE.JSON을 열어 아래 내용을 추가한다.\n\n  \"name\": \"@ecube-labs/my-module\",\n  ...\n  \"publishConfig\": {\n    \"registry\": \"https://npm.pkg.github.com\"\n  },\n\nname 속성에 있는 “@ecube-labs” scope는 반드시 따라야 한다.\n\ngithub package는 조직과 같은 이름의 scope만 지원한다고 한다.\n때문에 위처럼 하지 않으면 무조건 배포에 실패한다.\n\n\n2. 프로젝트에 .GITHUB/WORKFLOWS/RELEASE-PACKAGE.YML 파일을 아래 내용으로 생성한다.\n\nname: Publish module\n\non:\n  release:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-gpr:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n          registry-url: https://npm.pkg.github.com/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n\n\n위에 보이는 시크릿키 secrets.GITHUB_TOKEN는 github action이 알아서 주입해준다.\n[https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-docker-for-use-with-github-packages#authenticating-with-the-github_token]\n\ngithub에서 릴리즈를 하면 위 잡들이 실행된다는 의미다. 자세한건 아래 모듈 배포 방법 참고\n\n\n3. MASTER로 머지한다.\n\n이제 준비 완료.\n\n--------------------------------------------------------------------------------\n\n\n🚀 모듈 배포 방법\n\n이 방법은 모듈 배포 설정이 되어있어야합니다.\n\n\n1. 수정된 코드에서 모듈 버전을 바꿔준다.\n\nnpm version patch\n\n위의 방법처럼 하는게 베스트다. (patch, minor, major 노상관)\n\n뭐가 됐든 package.json에 있는 버전이 바뀌면 된다.\n\n\n2. 변경된 파일과 태그를 푸시해준다.\n\n태그는 아래처럼 푸시하면 된다.\n\ngit push --tags\n\n\n3. 해당 레파지토리를 GITHUB에서 연다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-071620.png?api=v2]\n\n페이지 우측에 이렇게 생긴 releases 항목이 보이는데, 파란 링크나 제목 부분을 누른다.\n\n\n4. “DRAFT A NEW RELEASE” 버튼을 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-072535.png?api=v2]\n\n우측에 보이는 버튼이다.\n\n\n5. 태그 버전과 내용을 입력하고 “PUBLISH RELEASE” 버튼을 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-073159.png?api=v2]\n\n\n6. ACTIONS 탭에 들어가서 잘 되는지 확인한다.\n\n한번 잘 되고 나면 보통 잘 되니까 필수는 아니다.\n\n그리고 빌드에 실패하면 잡을 트리거 한 사용자에게 메일을 보내주니 괜찮다.\n\n\n7. 최종적으로 배포된 패키지 확인\n\n레포 메인 페이지로 가면 우측에 보인다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1126039657/image-20201221-073413.png?api=v2]\n\n\n\n--------------------------------------------------------------------------------\n\n\n🛠 모듈 설치 방법\n\nprivate repo에 배포된 모듈이면 당연히 배포 환경에서도 read 권한이 있어야 한다.\n여기서는 권한이 있는것을 가정하고 설명한다. (없으면 0번을 따라하면 된다.)\n\n\n0. (로컬 환경) NPM LOGIN\n\n공식 문서\n[https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-npm-for-use-with-github-packages#authenticating-to-github-packages]를\n참고하여 개인 액세스 토큰을 발급해서 npm login을 한다.\n권한은 여기\n[https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#about-scopes-and-permissions-for-package-registries]에\n나온 권한을 모두 허용한 토큰이어야 한다.\n(read 권한만 필요해도 write 관련 권한까지 없으면 안된다 ;ㅅ;)\n\nnpm login --scope=@ecube-labs --registry=https://npm.pkg.github.com\n\n\n1. 프로젝트에 .NPMRC 파일을 만들거나 수정한다.\n\n@ecube-labs:registry=https://npm.pkg.github.com/\nregistry=https://registry.npmjs.org/\n\n이미 파일이 있다면 첫번째 줄에 있는 내용만 추가해도 된다.\n\n\n2. 준비 끝. 설치하면 된다.\n\nnpm install @ecube-labs/my-module -S\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1126039657"
  },
  {
    "pageContent": "npm 종속성 관리 (package.json)\n * package.json\n   * dependencies\n   * devDependencies\n   * peerDependencies\n * package-lock.json\n * 예시\n   * react, react-dom 패키지\n     * 가정1: npm i react 직후 리액트를 바로 사용할 수 있으므로 react 패키지에는 peerDependencies가\n       없을것으로 기대된다.\n     * 증명1: 실제로 react의 package.json에는 peerDependencies가 없다.\n     * 가정2: react-dom은 react를 기반으로 동작하므로 peerDependencies에 react가 있을것이다.\n     * 증명2: 실제로 react-dom의 peerDependencies에 react가 있다.\n\n\nPACKAGE.JSON\n\n{\n  \"dependencies\": {\n    // 런타임에 필요한 패키지\n  },\n  \"devDependencies\": {\n    // 런타임에 필요 없는 패키지\n    // build, lint, test, local develop 을 위해 필요한 패키지\n  },\n  \"peerDependencies\": {\n    //\n  }\n}\n\n\nDEPENDENCIES\n\n * 코드 실행 시 반드시 필요한 패키지의 이름과 버전을 표시한다.\n   \n   * 즉, tsc/webpack/parcel 등의 transpiler/bundler를 통해 빌드되어 순수한 자바스크립트 코드를 실행할 때\n     필요한 패키지는 모두 dependencies에 속해야 한다.\n\n * npm install 시 표기된 패키지가 node_modules 디렉터리에 없으면 표시된 버전의 패키지를 설치한다.\n\n\nDEVDEPENDENCIES\n\n * 코드 실행 시가 아닌 개발 또는 빌드 환경에서 필요한 패키지의 이름과 버전을 표시한다.\n   \n   * typescript/webpack/eslint/prettier 등의 개발 및 빌드 환경에서만 필요한 패키지가 해당될 수 있다.\n   \n   * 실질적으로 코드를 실행할 때 필요하지 않은 패키지라면 모두 devDependencies에 해당될 수 있다.\n   \n   * https://github.com/Ecube-Labs/CCN-API/pull/132#discussion_r249606588\n     [https://github.com/Ecube-Labs/CCN-API/pull/132#discussion_r249606588]\n\n * npm install 시 표기된 패키지가 node_modules 디렉터리에 없으면 표시된 버전의 패키지를 설치한다.\n\n\nPEERDEPENDENCIES\n\n * 코드가 호환 가능한 패키지의 이름과 버전을 표시한다.\n   \n   * \"호환\" 가능할 것으로 예상된 패키지의 버전을 표시 하는것 이므로 dependencies와 다르게 가능한 관대하게 표시하는것이\n     권장된다.\n   \n   * 예를 들어, Semantic Version(semver)를 따르는 패키지라면 대체로 major 버전이 바뀌지 않는다면 동작이 보장되는걸\n     기대할 수 있으므로 ^1.0 처럼 마이너 버전까지는 모두 포함할 수 있도록 표기하는게 바람직하다. (semver 참고\n     [https://docs.npmjs.com/cli/v6/using-npm/semver])\n   \n   * 반대로 minor 버전만 바뀌어도 기능이나 인터페이스가 바뀔 수 있는 패키지라면 위 예시처럼 관대하게 표기하면 안된다.\n\n * npm install 시 표기된 패키지가 node_modules 디렉터리에 없더라도 아무것도 설치하지 않는다.\n   \n   * 대신, peerDependencies에 있는 패키지를 node_modules 디렉터리에서 찾을 수 없다는 경고문을 표시한다. (npm\n     v3 이후부터 해당)\n   \n   * 이 경고문을 마주하면 호환되는 버전의 패키지를 직접 설치해야 한다.\n   \n   * npm v7 부터 npm install 은 peerDependencies 를 다시 설치한다.\n     \n     * https://blog.npmjs.org/post/618653678433435649/npm-v7-series-arborist-deep-dive\n       [https://blog.npmjs.org/post/618653678433435649/npm-v7-series-arborist-deep-dive]\n\n * 코드와 함께 동작할 수 있는 프레임워크나 개발자가 패키지의 버전을 선택적으로 사용할 수 있게 해주므로 패키지를 작성할 때에는 사용하는것을\n   고려하는게 바람직하다.\n\n\nPACKAGE-LOCK.JSON\n\n * npm install 시 자동 생성되는 파일\n\n * 형상관리 대상\n   \n   * npm ci 명령어로 패키지를 설치하면 package-lock.json 에 정의된 버전의 패키지를 설치하기 때문에 배포시 의도치 않게\n     테스트 되지 않은 상위 버전의 패키지가 설치 되어 배포 되는것을 막을 수 있다.\n   \n   * npm install 명령어로 패키지 설치하면 package-lock.json 무시하고 semver(Semantic\n     versioning) [https://docs.npmjs.com/about-semantic-versioning] 에 따라\n     package.json, package-lock.json 갱신한다.\n\n * 위와 같은 특성때문에 단순 프로젝트 실행을 위해 패키지 설치가 필요하면 npm ci 를 권장하지만, 버전이 중요한 패키지는 개발자가 알아서\n   package.json 의 버전을 고정해두는게 더 바람직하다.\n\n\n예시\n\n\nREACT, REACT-DOM 패키지\n\n\n가정1: NPM I REACT 직후 리액트를 바로 사용할 수 있으므로 REACT 패키지에는 PEERDEPENDENCIES가 없을것으로 기대된다.\n\n\n증명1: 실제로 REACT의 PACKAGE.JSON\n[https://github.com/facebook/react/blob/ad607469c58d337d23d05e3be73087d370f7d715/packages/react/package.json]에는\nPEERDEPENDENCIES가 없다.\n\n\n가정2: REACT-DOM은 REACT를 기반으로 동작하므로 PEERDEPENDENCIES에 REACT가 있을것이다.\n\n\n증명2: 실제로 REACT-DOM의 PEERDEPENDENCIES\n[https://github.com/facebook/react/blob/ad607469c58d337d23d05e3be73087d370f7d715/packages/react-dom/package.json#L25]에\nREACT가 있다.\n\n{\n  \"name\": \"react-dom\",\n  \"version\": \"17.0.3\",\n...\n  \"peerDependencies\": {\n    \"react\": \"17.0.3\"\n  },\n...\n\n\n위 처럼 작성되어 있으므로 react-dom은 react의 버전과 동일하게 사용해야 하는것을 알 수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2273837083"
  },
  {
    "pageContent": "Private NPM Registry (Verdaccio)\n * URL\n * 공통 규칙\n * 다른 환경/프로젝트에서 모듈 사용 (Install)\n   * .npmrc\n * 모듈 프로젝트 설정\n   * package.json\n   * .npmrc\n * NPM 모듈 업로드 (Publish)\n   * 1. NPM Module Version Update\n   * 2. PR\n   * 3. Publish\n     * 주의!\n * 모듈 작성\n   * Git repo 생성 요청\n   * 개발\n   * 버전 관리\n\n\nURL\n\nhttps://npm.ecubelabs.xyz/\n\n\n공통 규칙\n\n * 모듈 프로젝트의 .npmrc 파일은 반드시 .gitignore에 추가되어야 하며, 형상관리가 되지 않도록 해야 합니다.\n\n * .npmrc 파일은 프로젝트 최상단에만 존재해야 합니다.\n   \n   * 모듈 프로젝트가 아닌 일반 프로젝트에서는 install에 필요한 설정만 존재하는 .npmrc 파일이 있어야 하며, 인증 관련된 설정이\n     존재해선 안됩니다.\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n다른 환경/프로젝트에서 모듈 사용 (INSTALL)\n\n사무실과 AWS에서만 접근이 가능한 환경이기 때문에 아무런 인증 체계가 없습니다.\nprivate module을 사용할 프로젝트 최상단에 아래처럼만 설정해두세요.\n\n.NPMRC\n\n@ccn:registry=https://npm.ecubelabs.xyz/\nregistry=https://registry.npmjs.org/\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n모듈 프로젝트 설정\n\npackage.json 파일에 아래처럼 publishConfig를 설정해주세요!\n이렇게 하면 npm publish 커맨드를 실행할 때 다른 옵션을 안붙여도 우리의 레지스트리에 배포하게 됩니다. (private npm\nregistry에 배포할 필요가 없는 경우에는 아래를 추가하지 않으셔도 됩니다.)\n\nPACKAGE.JSON\n\n{\n\t...\n    \"publishConfig\": {\n        \"registry\": \"https://npm.ecubelabs.xyz/\"\n    }\n\t...\n}\n\n아무런 인증이 필요 없지만 토큰이 없으면 publish가 불가능한 npm이기 때문에, 아래처럼 아무 토큰이나 넣도록 설정합니다. 글로벌 npm\n설정(`~/.npmrc`)에 이미 인증 정보가 있다면 필요 없습니다.\n\n.NPMRC\n\n//npm.ecubelabs.xyz/:_authToken=fooBar\n\n\n\n\n--------------------------------------------------------------------------------\n\n\nNPM 모듈 업로드 (PUBLISH)\n\n모듈을 업로드 하려고 한다면, 아래와 같은 절차를 따르면 된다.\n\n\n1. NPM MODULE VERSION UPDATE\n\n$ npm version <newversion> # 버전을 직접 지정하거나\n$ npm version major # 이런\n$ npm version minor # 식으로\n$ npm version patch # 사용이 가능해집니다.\n\n\n2. PR\n\n 1. 1번에서 생긴 변경사항을 원격으로 푸시한다.\n\n 2. 코드 리뷰를 받는다.\n\n\n3. PUBLISH\n\n아래처럼 입력하면 버전과 latest 태그가 같이 붙어서 배포됩니다.\n\n\n주의!\n\nnpm publish 시, .npmignore가 별도로 존재하지 않을 경우, .gitignore을 대신 사용합니다.\n\n\n\n\n$ npm publish\n\nnpm version 할 때 생긴 git tag 푸쉬도 잊지 마세요 (git push --tags)\n\n\n모듈 작성\n\n\nGIT REPO 생성 요청\n\nGitHub 관리자 [https://ecubelabs.atlassian.net/wiki/spaces/INFRA]에게 repo 생성 요청\n\n\n개발\n\n열심히\n\n\n버전 관리\n\n모듈의 버전은 Semantic Versioning 2.0.0 [https://semver.org/lang/ko/] 을 준수해야 한다\n\n> 요약\n> 버전을 주.부.수 숫자로 하고:\n> \n> 1. 기존 버전과 호환되지 않게 API가 바뀌면 “주(主) 버전”을 올리고,\n> \n> 2. 기존 버전과 호환되면서 새로운 기능을 추가할 때는 “부(部) 버전”을 올리고,\n> \n> 3. 기존 버전과 호환되면서 버그를 수정한 것이라면 “수(修) 버전”을 올린다.\n> \n> 주.부.수 형식에 정식배포 전 버전이나 빌드 메타데이터를 위한 라벨을 덧붙이는 방법도 있다.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/59572227"
  },
  {
    "pageContent": "[F] 폴더 구조 / 네이밍\n * app\n   * index.html\n   * components\n   * containers\n   * hooks\n     * local hooks\n   * screens\n     * 웹\n     * 모바일\n     * 공통 컨벤션\n * assets\n   * images\n * React Native\n   * routes\n     * 컴포넌트 네이밍\n\n\n\n|-- src\n|   |-- app\n|   |   |-- components\n|   |   |   |-- AbcButton\n|   |   |   `-- XyzList\n|   |   |-- configs\n|   |   |-- containers (DEPRECATED)\n|   |   |-- hooks\n|   |   |-- libs\n|   |   |   |-- navigator\n|   |   |   `-- validators\n|   |   |-- models\n|   |   |-- reducers     (DEPRECATED)\n|   |   |-- repositories (DEPRECATED)\n|   |   |-- routes\n|   |   |-- services\n|   |   |-- screens\n|   |   |   |-- AbcScreen\n|   |   |   `-- XyzScreen\n|   |   |-- actions.ts  (DEPRECATED)\n|   |   |-- epics.ts    (DEPRECATED)\n|   |   |-- reducers.ts (DEPRECATED)\n|   |   `-- types.tsx\n|   |-- assets\n|   |   |-- images\n|   |-- index.html\n\n\nAPP\n\n\nINDEX.HTML\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    ...\n    <style>\n      html,\n      body,\n      #app {\n        min-width: 1600px;\n        height: 100%;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\"></div>\n  </body>\n</html>\n\n * React 앱의 기본 html\n\n * min-width 는 제플린 기준 width\n   \n   * 제플린 기준 width != 사용자들이 많이 사용하는 화면 width 이면 width 선정이 잘못된 것\n   \n   * 사용자들이 많이 사용하는 화면 width 로 제플린을 다시 작업해야 한다\n   \n   * 잘 모르겠으면 최대한 작은 너비로 작업해두는것이 바람직하다.\n     작은 너비 → 큰 너비로 확장하는것은 쉽지만 반대는 어렵기 때문.\n\n\nCOMPONENTS\n\n화면에 대한 root component 인 XXXScreeen.tsx 를 제외한 모든 리엑트 컴포넌트는 components 하위에 둔다.\n\ncomponent 단위로 폴더를 생성하며 component 의 이름 === 폴더 이름 이어야 한다.\n\n\nCONTAINERS\n\nDEPRECATED. https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\n[https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0]\n\n\nHOOKS\n\n범용적으로 사용 가능한 hooks\n\nex)\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/2d795d4a2a1ae1b4f253d1b6d555e3af219e98b8/src/app/hooks/index.ts#L73\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/2d795d4a2a1ae1b4f253d1b6d555e3af219e98b8/src/app/hooks/index.ts#L73]\n\n\nLOCAL HOOKS\n\n * 특정 화면에서만 사용하는 hook의 경우 해당 컴포넌트 폴더 하위에 hooks 파일을 만들어 위치한다.\n\n * ex)\n   https://github.com/Ecube-Labs/haulla-back-office-front/blob/b17fd523eb6523ef1cf1db71bf3f487864c0e442/src/app/components/AuditInvoiceButton/hooks.tsx#L1\n   [https://github.com/Ecube-Labs/haulla-back-office-front/blob/b17fd523eb6523ef1cf1db71bf3f487864c0e442/src/app/components/AuditInvoiceButton/hooks.tsx#L1]\n\n\nSCREENS\n\n\n웹\n\n * 웹의 경우 url 단위로 하위 폴더를 구성한다.\n\n * URL에 params를 포함하는 경우 백엔드와 동일하게 아래와 같이 한다.\n   \n   * ex. /clients/123/details → /clients/_id/details/ 하위에 파일 구성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image2020-4-21_11-41-30.png?api=v2]\n\n위의 예시에서 /auth, /change-password, /customer-support, ... 같은 endpoint 가 모두 존재한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image2020-4-21_11-45-48.png?api=v2]\n\n하위 폴더 구성\n\n * index.ts\n   \n   * barrel [https://basarat.gitbook.io/typescript/main-1/barrel]\n\n * XXXScreen.tsx\n   \n   * 해당 endpoint 를 렌더링하는 컴포넌트\n\n * hooks.ts\n   \n   * XXXScreen.tsx 에서만 사용하는 hooks\n\n\n모바일\n\n모바일의 경우 flow [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/175472648]\n단위로 하위 폴더를 구성한다.\n\n\n공통 컨벤션\n\n화면을 구성하는 root component 는 postfix 로 Screen 을 사용한다.\n\n원래 postfix 로 View 를 사용하려고 했는데\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/210206760/React+component+naming+convention]\n일반 component 도 postfix 로 View 를 사용하는 경우가 생겨서 컨벤션에 혼란이 생긴다.\n\n그래서 화면을 구성하는 root component 는 postfix 로 View 대신 Screen 을 사용한다.\n\n\nASSETS\n\n\nIMAGES\n\n제플린에서 받은 이미지 파일은 모두 이곳에 위치 시킨다.\n\n이때 파일 이름은 변경하지 않는다.\n\n * 서로 선호하는 파일 이름이 다를 수 있기 때문.\n\n * 파일 이름 변경이 필요하다고 생각 되면 디자인팀과 협의할 것.\n\n\nREACT NATIVE\n\n|-- android\n|-- ios\n|   |-- PROJ_NAME\n|   |-- Pods\n|   |-- Podfile\n|   |-- Podfile.lock\n|-- src\n|   |-- ...\n\n\n\n * Pods\n   \n   * iOS 에서 node_modules 와 비슷한 역할. iOS 앱을 빌드할 때 필요한 라이브러리들이 모여있다. CocoaPods\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445#1.2.-CocoaPods]\n     를 통해 설치하므로 형상 관리 (오류)\n     [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n * Podfile.lock\n   \n   * iOS 에서 package-lock.json 과 비슷한 역할. pod install 을 실행하면 lock 파일에 명시된 라이브러리들이\n     Pods 폴더에 다운로드 된다. 형상 관리 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n   \n   * Known issue\n     \n     * pod install 시 Podfile.lock 변경\n       \n       * CocoaPods 설치 가이드\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/40337445#1.2.-CocoaPods]\n         에서 버전을 통일하라고 한 이유. npm ci 같은 명령어가 CocoaPods 에도 있어야 할 것 같은데 아직 그런 명렁어는\n         없으므로 개발자들이 CocoaPods 버전을 통일해서 해결.\n     \n     * https://github.com/CocoaPods/CocoaPods/issues/10506\n       [https://github.com/CocoaPods/CocoaPods/issues/10506]\n       \n       * pod install 시 엄청 오래 걸린다.\n       \n       * 모든 프로그램 다 종료하고 pod install 시 1시간 30분 정도 걸림 (아이맥 기준)\n         \n         [https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image-20210501-074016.png?api=v2]\n       \n       * 문제 해결 전까지 퇴근 전에 install 걸어 놓고 가는 것 추천\n\n\n\n===== 아래는 편집중\n\n\nROUTES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/192413700/image2019-8-16_11-11-48.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n===\n\n---\n\n===\n\n\n\n\n모바일(React native)하고 웹 프론트 폴더 구조 입니다.\n\n- 단어가 2개인 폴더 // collection-service / 케밥\n\n- Type 대분류 / postfix Type을 붙이는 걸로 // 우리가 제안하는거  XXXRepository, XXXXButton\n\n\n\n\n\n컴포넌트 네이밍\n\n한 컴포넌트 폴더에 // index, component 둘다 생성해서 쓰는걸로\n\ncollectionView\n- collectionView.tsx\n- index.tsx\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/192413700"
  },
  {
    "pageContent": "웹 접근성(a11y) 개발 컨벤션\n\n대상\n\n규칙\n\n비고\n\n아이콘 역할을 하는 img or svg 태그\n\n * role=\"img\" 추가 (img 태그는 기본 값이라 생략 가능)\n\n * 아이콘을 설명할 수 있는 텍스트로 aria-label attr 추가\n\n * testing-library 이용 시 findByRole 로 DOM을 탐색해야 한다.\n\n\n\ninput[type=password]\n\n * role은 별도로 지정하지 않는다.\n\n * testing-library 이용 시 findByLabelText 로 DOM을 탐색해야 한다.\n\n * W3C에서 관리하는 스펙 [https://www.w3.org/TR/html-aria/#docconformance]상 password는\n   role이 없다.\n\n * testing-library는 이 스펙을 지켜서 개발되었으므로 차선책으로 findByLabelText로 찾는것을 규칙으로 한다.\n   https://github.com/testing-library/dom-testing-library/issues/567\n   [https://github.com/testing-library/dom-testing-library/issues/567]\n\n입력 필드와 입력 필드의 이름을 설명해주는 Label이 있는 경우\n\n * label 태그를 사용한다면 for attr 를 추가하여 입력 필드의 이름을 암시한다.\n\n * label 태그 사용이 불가능 한 경우 Label 역할을 하는 태그에 id를 지정하고, 입력 필드에 aria-labelledby 를 이용해\n   입력 필드의 이름을 암시한다.\n\n * testing-library 이용 시 findByRole 로 DOM을 탐색해야 한다.\n\n\n\n입력 필드와 입력 필드의 상태의 힌트를 제공하는 텍스트가 있는 경우\n\n * 힌트 텍스트가 있는 태그에 id를 지정하고, 입력 필드에 aria-describedby 를 이용해 입력 필드의 상태 힌트를 암시한다.\n\n * testing-library 이용 시 findBy* 의 description 옵션을 이용해 탐색해야 한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2780135590"
  },
  {
    "pageContent": "[H][F] 데이터 모델 개발\n * 데이터 모델 선언\n   * 언제 새로운 모델을 선언해야 하는가?\n   * 타입 매핑\n   * Serializable\n * 컨벤션\n   * Class 이름\n   * Property 이름\n   * Path, 파일명\n   * Export\n * 개발 대상\n   * 웹\n   * 앱\n\n\n데이터 모델 선언\n\nGET 형식의 API 응답값을 데이터 모델(class)로 선언한다.\n\n다음과 같이 API 문서에서 응답값의 형식을 확인하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230719566/image-20191030-051532.png?api=v2]\n\nexport class YourModel {\n  userId!: number;\n  // ...\n}\n\n\n언제 새로운 모델을 선언해야 하는가?\n\nAPI 문서를 보면 다음과 같이 모델을 명시하는 경우가 있다.\n\n(ex - class: HaulerCollection)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230719566/image-20191128-012622.png?api=v2]\n\n해당 모델이 존재하지 않는다면 새로운 모델을 선언해야 한다.\n\nAPI 에 명시 된 모델이 동일한 경우 해당 API 들의 반환값은 동일하다.\n\nAPI 에 모델이 명시되어 있지 않은 경우 서버 개발자와 협의 후 모델을 선언한다.\n\n\n타입 매핑\n\nAPI 문서의 타입은 TS 에서 다음과 같이 매핑해야 한다.\n\nAPI 문서 타입\n\nTS 타입\n\ninteger\n\nnumber\n\nstring\n\nstring\n\nstring <date-time>\n\nstring\n\nrequired\n\n * 서버에서 optional 로 응답값을 주는 경우는 없다.\n\n * optional 을 사용하면 서버가 실수로 값을 안준건지 값이 없는건지 판단할 수 없기 때문.\n\n-\n\nnull\n\nNullable\n\n\n\nex)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230719566/image-20191030-032841.png?api=v2]\n\n\n\nexport class UserModel {\n  userId!: number;\n  serviceAccountId!: string;\n  firstName!: Nullable<string>;\n  lastName!: Nullable<string>;\n  email!: string;\n  phoneNumber!: string;\n  countryCode!: string;\n  timezone!: string;\n  language!: stirng;\n  unitVolume!: string;\n  registeredAt!: string;\n}\n\n\nSERIALIZABLE\n\n데이터 모델은 리듀서에 저장해야 하므로 serializable 하게 개발해야 한다.\n\n * https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state\n   [https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state]\n\n * https://redux.js.org/faq/design-decisions#why-doesnt-redux-support-using-classes-for-actions-and-reducers\n   [https://redux.js.org/faq/design-decisions#why-doesnt-redux-support-using-classes-for-actions-and-reducers]\n\n * serializable 하지 않아도 되지만 그로 인해 사용할 수 없는 debugging feature 가 있으므로 개발 편의를 위해\n   serializable 하게 만들도록 한다.\n\n따라서 데이터 모델 class 에 helper method 같은걸 넣으면 안된다. (POJO 형태로 작성해야 함)\n\n\n컨벤션\n\n\nCLASS 이름\n\n이름은 다른 개발자들과 의논해서 정하도록 한다. (postfix 로 Model 은 붙여야 한다.)\n\nPascalCase.\n\n\nPROPERTY 이름\n\nAPI 문서를 따른다.\n\ncamelCase.\n\n\nPATH, 파일명\n\nkebab-case.\n\n\nEXPORT\n\ndefault export 하지 않고 모두 named export 한다.\n\n\n개발 대상\n\n\n웹\n\nsrc/app/models/your-model.ts\n\n\n앱\n\nsrc/app/models/common/your-model.ts or\n\nsrc/app/models/generator/your-model.ts or\n\nsrc/app/models/hauler/your-model.ts\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230719566"
  },
  {
    "pageContent": "[F] Repository 개발\n\nhttps://codelabs.developers.google.com/codelabs/kotlin-android-training-repository#5\n[https://codelabs.developers.google.com/codelabs/kotlin-android-training-repository#5]\n\nexport const usimRepository = {\n  getAllUsimsWithStatus(): Observable<UsimWithStatus[]> {\n    return from(\n      axios.get<{ usim_idx: number; usim_id: string }[]>(`${BASE_URL_V3}/usims`)\n    );\n  },\n  \n  retrieve({ idx }: { idx: number }): Observable<Usim> {\n    return from(axios.get<Usim>(`${BASE_URL_V3}/usims/${idx}`));\n  },\n};\n\n 1. repository 는 object 로 선언한다. (그래야 테스트할 때 mocking 이 편함)\n\n 2. repository method 의 parameter 는 항상 object type 이어야 한다.\n    \n    1. 위의 예제에서\n       retrieve(idx: number) (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n       retrieve(params: { idx: number }) (tick)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n    \n    2. parameter 가 필요 없을 때 비워두는 건 괜찮다.\n       getAllUsimsWithStatus() (tick)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033601417"
  },
  {
    "pageContent": "[F] libs/auth\n * FSM\n * 렌더링 블락\n\n\nFSM\n\n[/wiki/download/attachments/1182106025/auth-fsm.drawio.png?api=v2]\n\n\n렌더링 블락\n\n“로그인 필요” 상태 or “사용자 메모리에 탑재” 상태가 되기 전에는 렌더링을 블락 해야 한다. 이때 흰화면이 노출 되어도 어쩔 수 없다.\n\n렌더링을 블락 하지 않으면 하나의 언어만 지원할때는 문제될 게 없는데 다국어를 지원해야 하면 다음과 같은 문제가 발생한다.\n\n * access token 로딩 성공.\n\n * 사용자 조회 호출하고 렌더링을 계속 진행한다.\n\n * 사용자 조회 전이기 때문에 사용자의 언어를 알 수 없으므로 페이지가 영어(혹은 브라우져 default)로 렌더링 되기 시작한다.\n\n * 사용자를 조회했더니 사용자의 언어가 영어가 아니다.\n\n * 그러면 페이지를 다시 사용자의 언어로 렌더링 해야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1182106025/without-rendering-block.gif?api=v2]\n\n위와 같이 사용자가 이상한 언어의 페이지를 보는 것을 막으려면 렌더링 블락이 필요하고 이는 다음과 같이 구현하면 된다.\n\n// auth.tsx\nconst UserContext = createContext({ ... })\n\nfunction AuthProvider(props) {\n  // 시작\n  const [initialized, setInitialized] = useState(false);\n  \n  // access token loading\n  \n  if (access token loaded) {\n    if (user fetched) {\n      UserContext.set(user)\n      setInitialized(true) // 조회 성공 했기 때문에 \"사용자 메모리에 탑재\" 상태가 됨\n    } else {\n      setInitialized(true) // 조회 실패 했기 때문에 \"로그인 필요\" 상태가 됨\n    }\n  } else {\n    setInitialized(true) // 로딩 실패 했기 때문에 \"로그인 필요\" 상태가 됨\n  }\n  \n  if (!initialized) {\n    return null \n  }\n  return <>{ props.children } </>\n}\n\n// App.tsx\n<AuthProvider>\n  <Home /> // \"로그인 필요\" 상태 or \"사용자 메모리에 탑재\" 상태가 아니면 AuthProvider 는 children 을 반환하지 않으므로 렌더링 블락이 구현 됨\n</AuthProvider>\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1182106025"
  },
  {
    "pageContent": "[F] 컴포넌트 개발\n\n우리는 React 를 사용하기 때문에 이곳의 하위 페이지들은 React 공식 문서와 목차를 비슷하게 유지하면 원하는 정보를 쉽게 탐색할 수 있을\n것으로 기대된다.\n\nhttps://react.dev/learn [https://react.dev/learn]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/290947459"
  },
  {
    "pageContent": "[F] Control flow\n\nFront-end 와 Back-end 에 적용 되는 control flow 는 다를 수 있다.\n\n * switch\n   * 정해진 값이 있는 경우 default 에서 throw error\n\n\nSWITCH\n\n\n정해진 값이 있는 경우 DEFAULT 에서 THROW ERROR (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nenum Status {\n  Active,\n  Suspended,\n}\n\nconst status = fetchStatusFromServer()\nswitch (status) {\n  case Status.Active: ...\n  case Status.Suspended: ...\n  default: ... // 여기서 throw error (x)\n}\n\nReact 의 경우 렌더링 도중에 에러를 던지면 특별한 처리를 해주지 않은 경우 흰 화면을 보게 되어서 좋지 않다.\n\n정해진 값이 아닌 경우에는 기본값으로 fallback 하거나 그냥 어색하게 보이도록 만들어서 사용자 문의가 접수 되도록한다.\n\n보통은 default 문이 실행될 일이 없지만 정해진 값이 바뀌는 경우 default 문이 실행될 수 있다.\n\nex) 상태값이 추가 되는 경우, 프론트와 백엔드 배포를 완전히 동일한 타이밍에 배포할 수 없기 때문에 default 에서 에러를 던지면 그냥\n흰 화면이 보이게 된다. 이 예시에는 프론트를 먼저 배포하면 해당 현상은 막을 수 있지만 경우에 따라 백엔드를 먼저 배포해야 할수도 있기 때문에\ndefault 에서 에러를 던지는 방식으로 개발하지 않는다.\n\n\n\n참고\n\n[B] Control flow\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390294582]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390032449"
  },
  {
    "pageContent": "[F] 데이터 조회 및 변경\n * 조회 결과를 상태에 반영\n * 조회, 변경 콜백\n * useQuery\n   * 사용 예시\n   * 예제\n   * Parameter\n   * Result\n   * 갱신\n * useLazyQuery\n   * 사용 예시\n   * 예제\n   * Parameter\n   * Result\n * useMutation\n   * 사용 예시\n   * 예제\n   * Parameter\n   * Result\n * Type\n   * QueryOptions\n   * QueryResult\n * 관련 문서\n\n\n조회 결과를 상태에 반영\n\nuseEffect 를 사용한다.\n\nfunction SomeComponent() {\n  // state hooks\n  const [name, setName] = useState('')\n  \n  // query hooks\n  const { data: user } = useQuery(...)\n  \n  // effects\n  useEffect(() => {\n    if (user) {\n      setName(user.name)\n    }\n  }, [user, setName])\n}\n\nuseQuery 의 onSuccess 를 이용하는 방식은 옵션에 따라 제대로 동작하지 않음\n\nCCNB-6499 [https://ecubelabs.atlassian.net/browse/CCNB-6499] - 이슈 세부사항 가져오는 중...\n상태\n\n\n조회, 변경 콜백\n\nonCompleted := 성공 콜백\n\nonError := 실패 콜백\n\nfunction SomeComponent() {\n  // ...\n  // query hooks\n  const [update] = useMutation(mutation, {\n    onCompleted: (res) => {\n      // do something\n    },\n    onError: (err) => {\n      // handle error\n    }\n  })\n  \n  // ...\n  return (...)\n}\n\n\n\n가독성을 높이기 위해 조회, 변경 콜백은 hook 선언 시 함께 선언한다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nfunction SomeComponent() {\n  // ...\n  // query hooks\n  const [update] = useMutation(mutation, {\n    onCompleted: (res) => {\n      // do something\n    },\n    onError: (err) => {\n      // handle error\n    }\n  })\n  \n  // ...\n  return <button onClick={() => { ... } />\n}\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nfunction SomeComponent() {\n  // ...\n  // query hooks\n  const [update] = useMutation(mutation)\n  \n  // ...\n  return <button onClick={() => {\n    update({\n      variables: { ... },\n      onCompleted: (res) => { /* do something */ },\n      onError: (err) => { /* handle error */ },\n    })\n  }} />\n}\n\n\n\n\n\n=== 아래는 수정 필요\n\n데이터 조회 및 변경은 useQuery, useLazyQuery, useMutation 훅을 이용해 Repository\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033601417/F+Repository]를\n호출하는 방식으로 한다.\n\n\n\n\nUSEQUERY\n\n컴포넌트가 처음 렌더링 될 때, 데이터를 무조건 조회해야 하는 경우 사용한다.\n\n뷰 구성에 꼭 필요한 데이터가 있을 경우 사용하면 된다.\n\n\n사용 예시\n\n * 프로필 화면에서 유저 정보를 조회하는 경우\n\n * 차량 목록에서 차량 리스트를 조회하는 경우\n\n\n예제\n\nimport { useQuery } from '@ceed/core';\n\nfunction Component() {\n  ...\n  // query hooks\n  const { data: vehicles, loading, error, refetch } = useQuery(vehicleRepository.getAll, {\n     variable: { limit: 20 }\n     onCompleted: () => {},\n     onError: () => {},\n  });\n  \n  return (\n    <>\n        {vehicles.map((v) => <>{v.name}</>)}\n    </>\n  )\n}\n\n\nPARAMETER\n\n명칭\n\n타입\n\n필수 여부\n\n설명\n\nquery\n\nObservable<R>\n\nV\n\n조회하려는 데이터의 Observable\n\noptions\n\nQueryOptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryOptions]<T>\n\n\n\n데이터 조회 옵션\n\n\nRESULT\n\n명칭\n\n타입\n\n설명\n\nresult\n\nQueryResult\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryResult]<R>\n\n데이터 조회 결과\n\n\n갱신\n\n조회했던 데이터를 갱신해야 하는 경우가 있다. 이때는 QueryResult\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryResult]의\nrefetch 를 사용하면 된다.\n\nimport { useQuery } from '@ceed/core';\n\nfunction Dashboard({ breed }) {\n  const { loading, error, data, refetch } = useQuery(repository.get, {\n    variables: { id: 1 }\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  return (\n    <div>\n      {data.price}\n      <button onClick={() => refetch()}>Refetch!</button>\n    </div>\n  );\n}\n\n\nUSELAZYQUERY\n\n데이터를 수동으로 조회하는 경우 사용한다.\n\n데이터 조회 시점을 제어해야 하는 경우 사용하면 된다.\n\n\n사용 예시\n\n * 특정 이벤트가 발생한 이후에 데이터를 조회해야 하는 경우\n\n * 데이터를 순차적으로 조회해야 하는 경우\n\n\n예제\n\nimport { useLazyQuery } from '@ceed/core';\n\nfunction Component() {\n  ...\n  // query hooks\n  const [\n    get,\n    { loading, data, error },\n  ] = useLazyQuery(repository.getById);\n  \n  useEffect(() => {\n      // id 유효할 경우 데이터를 불러온다.\n      if (id) {\n        get({\n          variables: { limit: 20 },\n          onCompleted: (data) => {},\n          onError: (error) => {},\n        });\n      }\n  }, [id])\n}\n\n\nPARAMETER\n\n명칭\n\n타입\n\n필수 여부\n\n설명\n\nquery\n\nObservable<R>\n\nV\n\n조회하려는 데이터의 Observable\n\n\nRESULT\n\n명칭\n\n타입\n\n설명\n\ncall\n\n(options?: QueryOptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryOptions]<T>)\n=> void\n\n수동으로 데이터 조회\n\nresult\n\nQueryResult [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3768456]<R>\n\n조회 결과\n\n\nUSEMUTATION\n\n데이터를 변형해야 할 때 사용한다.\n\n\n사용 예시\n\n * 비밀번호 변경\n\n * 수거지점 데이터 변경\n\n\n예제\n\nimport { useMutation } from '@ceed/core';\n\nfunction Component() {\n  ...\n  // query hooks\n  const [changePassword, { loading, data, error }] = useMutation(userService.changePassword);\n  \n  return (\n    <>\n    <button onClick={() => {\n      changePassword({\n        variables: { currentPassword, newPassword },\n        onCompleted: () => {},\n        onError: (error: Error) => {},\n      });\n    }}>\n      Button\n    </button>\n    <>\n  )\n}\n\n\n\nPARAMETER\n\n명칭\n\n타입\n\n필수 여부\n\n설명\n\nquery\n\nObservable<R>\n\nV\n\n조회하려는 데이터의 Observable\n\n\nRESULT\n\n명칭\n\n타입\n\n설명\n\ncall\n\n(options?: QueryOptions\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryOptions]<T>)\n=> void\n\n수동으로 데이터 변경\n\nresult\n\nQueryResult\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F#QueryResult]<R>\n\n변경 결과\n\n\n\n\nTYPE\n\n\nQUERYOPTIONS\n\ntype QueryOptions<T = any> = {\n  variables?: T;\n  onCompleted?: (data?: any) => void;\n  onError?: (error: HooksError) => void;\n  skip?: boolean;\n};\n\n명칭\n\n타입\n\n설명\n\nvariables\n\nT | undefined\n\n데이터 조회 및 변경에 필요한 파라미터\n\nonCompleted\n\n(data?: any) => void\n\n데이터 조회 성공 시 불리는 콜백\n\nonError\n\n(error: HooksError) => void\n\n데이터 조회 과정에서 에러가 발생 시 불리는 콜백\n\nskip\n\nboolean\n\n자동 조회 뛰어넘는 경우\n\n구현되어 있지 않아 사용하지 말아야 한다. useLazyQuery 를 사용하면 된다.\n\n\nQUERYRESULT\n\ntype QueryResult<T> = {\n  loading: boolean;\n  data: T | undefined;\n  error?: HooksError;\n  refetch: () => void;\n};\n\n명칭\n\n타입\n\n설명\n\ndata\n\nT | undefined\n\n데이터 조회 결과, 조회 완료 전까지 undefined\n\nloading\n\nboolean\n\n데이터 조회 중인지 여부\n\nerror\n\nHooksError\n\n데이터 조회 과정에서 에러 발생했는지 여부\n\nrefetch\n\n() => void\n\n데이터 갱신 함수\n\n\n\n\n관련 문서\n\n[F] useQuery, useLazyQuery, useMutation 사용 시 테스트\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1713012767]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612"
  },
  {
    "pageContent": "URL(routes) design\n\n\n\n * 프론트엔드에서 경로 설계가 왜 중요할까?\n * 그럼 어떻게 구성해야 좋을까?\n   * Path\n   * Query string (쿼리스트링)\n     * 하나의 페이지가 담고있는 상태를 저장한다.\n     * 필요한 경우가 아니라면 페이지를 이동할 때 쿼리스트링을 비워야 한다.\n     * 단일 페이지에서 상태 저장을 위해 쿼리스트링을 변경하는 경우 History가 추가되면 안된다.\n     * 페이지에 새로 진입한 경우(ex. refresh) 쿼리스트링에 표현된 내용이 모두 반영돼야 한다.\n     * 예시\n   * Fragment identifier\n   * Auxiliary routes\n\n실제 버그 Case\n* 1. GitHub\n\n\n프론트엔드에서 경로 설계가 왜 중요할까?\n\n우리가 사용하는 URL은 보통 아래처럼 구성됩니다.\n\n{protocol}://{host}{path}?{queryString}#{fragmentId}\n\n웹에서의 프로토콜은 보통 http or https를 사용하니 그냥 넘어가고,\n호스트는 특정 서버를 가리키도록 도와주는 별명이니 넘어갑니다.\n\n프론트엔드 개발자인 우리가 지금 중요하게 봐야 할 부분은 \n\n * Path\n\n * Query String\n\n * Fragment identifier [https://en.wikipedia.org/wiki/Fragment_identifier] (우리가\n   종종 보는 http://localhost#blahblah의 해쉬 이후의 모든 값을 포함.)\n\n이 3가지에 있습니다.\n\n우리는 3가지를 적절하게 사용하고 있는지, 목적성과 의미를 두고 잘 사용하고 있는지 확인을 해봐야 합니다.\n\n위에 제공되는 3가지만을 가지고도 웹 페이지에서 많은 표현과 상태를 담고 사용자에게 더 나은 경험을 제공할 수 있습니다.\n\n\n\n\n\n그럼 어떻게 구성해야 좋을까?\n\n\nPATH\n\n경로를 우리가 적절하게 잘 사용하고 있을지 고민을 해본적이 있나요?\n\n제가 Path의 용도에 어울린다고 생각하는 방향은 아래와 같습니다.\n\n 1. Path는 페이지를 구성하는 가장 큰 뼈대로 생각해야 한다.\n    \n    1. 경로는 가장 처음 마주치는 웹 사이트의 상태를 담을수 있는 수단입니다.\n\n 2. Path는 어플리케이션의 Workflow에 영향을 받을 수 있다.\n    \n    * 특정 페이지를 진입하는 순서에 따라 Path가 구성될 수 있습니다.\n    \n    * 그러나 예외는 충분히 있을 수 있습니다.\n\n 3. SEO를 위해 실질적으로 도움되지 않는 정보를 포함할 수 있다.\n    \n    1. 예를들면 게시글의 제목. 아래같은\n       \n       * https://stackoverflow.com/questions/34813740/what-are-auxiliary-routes-in-angular-2-for\n         [https://stackoverflow.com/questions/34813740/what-are-auxiliary-routes-in-angular-2-for]\n       \n       * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118587485/resources\n         [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118587485/resources]\n         \n         * 심지어 위 주소같은 경우는 마지막 path가 없어도 되며, Space 이름이 유효하지 않아도 동작하도록 구성돼있습니다.\n         \n         * https://ecubelabs.atlassian.net/wiki/spaces/가나다라/pages/118587485\n           [https://ecubelabs.atlassian.net/wiki/spaces/가나다라/pages/118587485]\n         \n         * 그러나 위는 SEO를 위한 동작성이며 일반적으로 어플리케이션이 아닌 서버 레벨에서 Rewrite rule을 이용하여\n           redirect 하도록 구성합니다.\n    \n    2. 반대로 SEO가 필요없는 어플리케이션이라면 순수하게 프로그램 측면에서 필요한 URL만 구성해도 된다고 생각합니다.\n       \n       * RESTful API와 다른 시각으로, 프로그램이 동작하기 위한 또 다른 하나의 인터페이싱 수단입니다.\n\n 4. Auxiliary Routes를 포함할 수 있다.\n    \n    * 위에서 설명을 생략했지만, path뒤에는 Auxiliary routes가 포함될 수 있습니다.\n    \n    * 이게 언제 필요한지는 아래에서 설명합니다.\n\n\nQUERY STRING (쿼리스트링)\n\n일반적으로 쿼리스트링으로 부르는 http://localhost/path?key=value&key2=value2 에 해당하는 부분입니다.\n\n쿼리스트링은 아래의 룰을 갖고 다루도록 합니다.\n\n하나의 페이지가 담고있는 상태를 저장한다.\n\n 1. 페이지에서 다루는 입력 정보들\n    \n    1. 보안이 요구되는 경우처럼 특수한 경우를 제외하면 쿼리스트링으로 표현되어야 한다.\n\n 2. Active, focus된 Element의 정보\n\n 3. 보조 정보의 상태 값 (특정 레이어가 띄워진 여부 등 상황에 맞게)\n\n필요한 경우가 아니라면 페이지를 이동할 때 쿼리스트링을 비워야 한다.\n\n * A페이지에서 30개의 쿼리 파라메터를 다루다가 B라는 페이지로 넘어갔을때 해당 쿼리 파라메터를 유지한 채 넘어가면 안된다.\n\n * 다만 상황에 따라 일부 허용되는데, 대부분의 경우는 Child route가 바뀌어 페이지의 일부 컴포넌트만 바뀌는 경우 허용할 수 있다.\n\n단일 페이지에서 상태 저장을 위해 쿼리스트링을 변경하는 경우 HISTORY가 추가되면 안된다.\n\n * 쿼리스트링을 변경한다고 히스토리를 바꾸지 말고, replace해야 합니다.\n\n * 예외 (그러나 룰을 따라 개발한다면 예외가 생길 일은 거의 없다고 생각합니다.)\n   \n   * 쿼리스트링으로 페이지 이동을 표현해야 하는 경우\n   \n   * 기획상 페이지 변경으로 치부해야 하는 경우\n\n페이지에 새로 진입한 경우(EX. REFRESH) 쿼리스트링에 표현된 내용이 모두 반영돼야 한다.\n\n쿼리스트링으로 상태를 저장해놓고 의미가 없는 경우가 없어야겠죠.\n\n * 페이지를 진입했을 경우 단 하나의 쿼리 파라메터도 의미가 없어선 안됩니다.\n\n예시\n\n 1. 페이지에서 다루는 입력 정보 (필터)\n    \n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/118686116/2019-02-18%2018-26-58.2019-02-18%2018_27_54.gif?api=v2]\n\n 2. focus된 element의 정보\n    \n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/118686116/2019-02-18%2018-29-32.2019-02-18%2018_30_56.gif?api=v2]\n\n위 예시처럼 Query string으로 페이지를 제어하는게 아닌, 단순히 해당 페이지의 상태를 담는 하나의 store로 사용하시길 바랍니다.\n\n\n\n\n\nFRAGMENT IDENTIFIER\n\n작성 대기중\n\n\n\n\n\nAUXILIARY ROUTES\n\n작성 대기중\n\n\n\n\n\n\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n실제 버그 CASE\n\n\n1. GITHUB\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/118686116/image2020-3-25_18-54-7.png?api=v2]\n\nq라는 쿼리스트링을 두 컴포넌트가 참조하고 있어서 이런 문제가 생긴다.\n\n원래대로면 두 검색창은 값을 공유하지 않아야 한다.\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/118686116"
  },
  {
    "pageContent": "[F] 테스트\n\nhttps://reactjs.org/docs/testing.html [https://reactjs.org/docs/testing.html] 에\n명시 된 Jest [https://jestjs.io/], React Testing Library\n[https://testing-library.com/docs/react-testing-library/intro] 를 이용해 테스트 코드를\n작성한다.\n\n\n\n * 필독 자료\n * 단위 테스트 (Unit test)\n   * 목적\n   * 작성 규칙\n * 상호 작용 테스트 (Interaction test)\n   * 목적\n   * 작성 규칙\n   * 참고\n * 시각적 회귀 테스트 (Visual Regression test)\n   * 목적\n   * UI 변경사항 검토 규칙\n   * 참고\n * 통합 테스트 (Integration test)\n   * 목적\n   * 장점\n   * 작성 규칙\n   * 참고\n\n\n필독 자료\n\n * https://testing-library.com/docs/queries/about/#priority\n   [https://testing-library.com/docs/queries/about/#priority] 쿼리 우선순위\n   \n   * Role(+ name) > Label text > Placeholder > Text > Display value\n\n * https://seongry.github.io/2021/06-20-common-mistakes-with-rty/\n   [https://seongry.github.io/2021/06-20-common-mistakes-with-rty/]\n\n--------------------------------------------------------------------------------\n\n\n단위 테스트 (UNIT TEST)\n\n\n목적\n\n기능의 Output이 의도한 대로 나오는지 검증한다.\n\n\n작성 규칙\n\n * 함수/컴포넌트에 작성한 로직이 잘 동작하는지 테스트한다.\n   \n   * 모킹이 불가능하다고 판단되는 코드는 추상화를 더 해야한다.\n\n * 컴포넌트/화면 구분 없이 모두 작성한다.\n\n--------------------------------------------------------------------------------\n\n\n상호 작용 테스트 (INTERACTION TEST)\n\n\n목적\n\n특정 이벤트가 발생했을때 의도한 동작을 하는지 검증한다.\n\n\n작성 규칙\n\nInteraction Testing\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065/Interaction+Testing]\n\n\n참고\n\n * https://testing-playground.com/ [https://testing-playground.com/]\n\n\n\n--------------------------------------------------------------------------------\n\n\n시각적 회귀 테스트 (VISUAL REGRESSION TEST)\n\n\n목적\n\n회귀 버그가 발생하지 않았는지 검증한다.\n특히 사소한 변경에 의해 바뀌기 쉬운 UI 요소는 시각적 회귀 테스트를 통해 회귀 버그가 발생하지 않는지 검증한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/246317252/image-20211122-040942.png?api=v2]\n\n\nUI 변경사항 검토 규칙\n\n * 현재 발생한 UI 변경이 의도적으로 이루어진게 맞는지 확인한다.\n\n * 스토리북에 작성된 상호 작용 테스트(Interaction test)와 조합해서 사용할 수 있지만 기능적으로 검증하는것이 아닌 UI\n   변경사항에 초점을 맞춰 검토한다.\n\n\n참고\n\n * 단위 테스트, 상호작용 테스트 용도로 작성한 Story를 이용해 자동화한다.\n\n * 웹에서는 다양한 Headless browser를 사용하여 구현한 라이브러리가 많지만,\n   우리는 컴포넌트 개발 시 사용중인 Storybook과 Chromatic을 이용하여 시각적 회귀 테스트를 진행한다.\n\n--------------------------------------------------------------------------------\n\n\n통합 테스트 (INTEGRATION TEST)\n\n\n목적\n\n개발자가 단위 테스트로 테스트 할 수 없는 영역까지 포함하여 의도한대로 동작하는지 검증한다.\n(ex. 라이브러리. mui, ag-grid…)\n\n\n장점\n\n * 통합 테스트는 컴포넌트 내부의 코드가 어떻게 바뀌든 사용 시나리오가 바뀌지 않는다면 유효하기 때문에 리팩토링을 하는 경우 효과적이다.\n\n * 성능에 큰 영향을 끼치는 변화가 있는 경우 알아챌 수 있다.\n\n\n작성 규칙\n\n * 이큐브랩은 통합 테스트와 인수 테스트(Acceptance Test)를 결합하여 작성한다.\n   때문에 실제 사용자 시나리오에 맞춰 통합 테스트를 작성해야 한다.\n\n * 특수하게 검증해야 하는 시나리오가 있다면 별도의 테스트 케이스로 관리한다.\n\n * 모든 레이어를 검증하는 E2E 테스트가 아닌 앱이 제대로 동작하는지 검증한다.\n   (API, Infra layer까지 검증 가능한 E2E 테스트는 별도로 환경을 마련할 예정)\n\n * Interaction Testing\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065/Interaction+Testing]\n   1번을 제외한 모든 규칙을 따른다.\n\n\n참고\n\n * 일반적인 E2E 테스트 도구로 이용되는 Headless browser 라이브러리들(Selenium, WebDriverIO,\n   playwright, …)과 다르게 Cypress는 API 요청을 가로채서 모킹 할 수 있기 때문에 API 개발이 되지 않은 경우에\n   프론트엔드 개발을 보조하는 도구로도 이용할 수 있다.\n   \n   * https://www.testim.io/blog/end-to-end-testing-vs-integration-testing/\n     [https://www.testim.io/blog/end-to-end-testing-vs-integration-testing/]\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/246317252"
  },
  {
    "pageContent": "[H][F] 스토리북\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/598966654"
  },
  {
    "pageContent": "[H][F] 다국어 메시지 개발\n * 다국어 메시지 키 확인\n * 다국어 메시지 적용\n   * 1. 다운로드\n   * 2. 적용\n     * JS 코드에서 사용\n     * React 컴포넌트에서 사용\n     * 변수 전달\n * 주의사항\n\n\n다국어 메시지 키 확인\n\n다음과 같이 화면 설계의 출력 데이터 항목을 보면 다국어 메시지 키를 확인할 수 있다.\n\n결제 수단 등록 화면 (보류)\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/137691689]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/348980028/image-20200205-013021.png?api=v2]\n\n\n다국어 메시지 적용\n\n\n1. 다운로드\n\nhttps://translation.ecubelabs.xyz/en.json\n[https://translation.ecubelabs.xyz/en.json]\n\nhttps://translation.ecubelabs.xyz/ko.json\n[https://translation.ecubelabs.xyz/ko.json]\n\n위의 두 파일은 항상 stable 하게 유지 된다. 필요에 따라 두 파일을 프로젝트의 en.json, ko.json 으로 교체하면 된다.\n\n\n2. 적용\n\n\nJS 코드에서 사용\n\nimport { formattedMessage } from '@libs/intl';\n\nconst title = formattedMessage('mp__modify_generator_fee');\n\n\nREACT 컴포넌트에서 사용\n\nimport { FormattedMessage } from '@libs/intl';\n\nrender() {\n  return <FormattedMessage id=\"mp__modify_generator_fee\" />\n}\n\n\n변수 전달\n\n다국어 메시지에 변수를 전달해야 하는 경우가 있다.\n\nen.json\n{\n  ...\n  \"mp__collected_count\": \"{count} Collections\",\n  ...\n}\n\n그때는 values 를 이용한다.\n\nfunction Component() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <>\n      <FormattedMessage id=\"mp__collected_count\" values={{ count }}/>\n      {formattedMessage('mp__collected_count', { count })}\n    <>\n  )\n}\n\n\n\n주의사항\n\n * @libs/intl 외에 react-intl과 같은 library 를 직접 import 해서 사용하지 않는다.\n\n * 문구는 화면 설계의 출력 데이터에 있는 key + intl component/intl function 으로 출력한다.\n   \n   * 와이어프레임의 문구를 사용하지 않는다.\n   \n   * 제플린의 문구를 사용하지 않는다.\n\nif “화면 설계 출력 데이터”에 key 가 없는 경우 → 기획자에게 문의\n\nelse → 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 문의\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/348980028"
  },
  {
    "pageContent": "[H][F] 환경변수 관리\n\nhttps://github.com/Ecube-Labs/haulla-back-office-front/pull/353\n[https://github.com/Ecube-Labs/haulla-back-office-front/pull/353]\n\n\n환경변수 추가/삭제 후 로컬 테스트\n\n 1. .env 파일에 환경변수를 선언한다.\n\n 2. webpack.config.js 파일에 환경변수를 매핑한다.\n    \n    1. EnvironmentPlugin 의 파라미터 변경 필요.\n\n 3. 로컬 테스트.\n\n\n환경변수 추가/삭제 후 스테이지 테스트\n\n 1. 관리자에게 환경변수 추가를 요청하고 secret id 를 받는다.\n\n 2. Dockerfile 에 ARG 로 환경변수를 선언한다.\n\n 3. Jenkinsfile 에 관리자에게 받은 secret id 와 환경변수를 매핑한다.\n    \n    1. withCredentials 에 환경변수 매핑.\n    \n    2. 매핑 후 dockerBuild 에 build-arg 로 환경변수 전달.\n\n 4. 스테이지 테스트.\n\n\nPULL REQUEST\n\n[OMITTED]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/653033639"
  },
  {
    "pageContent": "성능 최적화\n\nState Colocation will make your React app faster\n[https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster]\n\nBefore You memo() [https://overreacted.io/before-you-memo/]\n\n\n\n\n\n\n\n'When to useMemo and useCallback' 를 읽고\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/196903098]\n\n(번역) React, Inline Functions, and Performance\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/288981352]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336953700"
  },
  {
    "pageContent": "[F] CORS\n\n[OJT][FE] CORS [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1116176519]\n\n * CORS 에 대한 개념 이해\n\n\n\nhttps://jakearchibald.com/2021/cors/ [https://jakearchibald.com/2021/cors/]\n\n * CORS 적용 방법",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2213543941"
  },
  {
    "pageContent": "[F] Cypress\n\n통합 테스트나 E2E 테스트는 Cypress를 사용한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2297331717"
  },
  {
    "pageContent": "[F] 메일 템플릿 퍼블리싱\n * 반응형\n * 웹폰트\n * 본문을 이미지로?\n * Mouse hover\n * 테스트\n * CSS\n * 기타\n\n\n반응형 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n대부분의 메일 클라이언트에서 modern css 지원 안 한다. 괜히 반응형으로 하려다가 시간 버리지 말고 PC 혹은 모바일 기준으로 통일할\n것.\n\n\n\n모바일 기준으로 통일한 사례 - 넷플릭스\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054123.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054142.png?api=v2]\n\n\n\nPC 기준으로 통일한 사례 - 대부분\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054246.png?api=v2]\n\n\n웹폰트 (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nRoboto 만 쓸 것\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2749661534/image-20230706-054527.png?api=v2]\n\nhttps://www.litmus.com/blog/the-ultimate-guide-to-web-fonts\n[https://www.litmus.com/blog/the-ultimate-guide-to-web-fonts]\n\n\n본문을 이미지로?\n\n아래 사례에 해당하면 메일 본문을 이미지로 만들어 삽입하는 것이 좋다.\n\n * 배치 및 퍼블리싱이 까다롭다.\n\n * 커스텀 폰트 적용하고 싶다.\n\n\nMOUSE HOVER\n\nbutton + a 로 만든다.\n\n그냥 button 만 쓰면 cursor: pointer 가 안 됨\n\nhttps://github.com/Ecube-Labs/haulla-api/blob/a448e28ae611a3cc43a5f0ca400182660c284305/src/services/notification-templates/infrastructure/repository.ts#L769\n[https://github.com/Ecube-Labs/haulla-api/blob/a448e28ae611a3cc43a5f0ca400182660c284305/src/services/notification-templates/infrastructure/repository.ts#L769]\n\n\n테스트\n\n * 개발 후 실제 환경에서 테스트 실시할 것\n\n * 크로스 체크할 것\n   \n   * 구글 메일\n   \n   * OS 내장 메일\n   \n   * 모바일\n   \n   * 기타\n\n\nCSS\n\n * inline 방식 사용\n   \n   * 메일 수신 시 링크된 스타일이 적용되지 않을 수 있음\n   \n   * gmail, naver 등 이메일 서비스 제공자 측에 의해 보안을 위해 메일 내용을 일부 변조될 수 있다. script, style 등\n     기본적으로 head 태그 내부에 정의되는 내용은 배제된다.\n\n * gmail, apple mail, outlook 등의 css 지원 여부 https://www.campaignmonitor.com/css/\n   [https://www.campaignmonitor.com/css/]\n   \n   * display 속성 중에 table은 대부분 지원하지만 flex는 대부분 지원하지 않음\n   \n   * 메일 수신 테스트 환경에 따라 지원하지 않는 부분이 있기 때문에 퍼블리싱이 난해한 건 이미지로 대체\n\n\n기타\n\nhttps://www.caniemail.com/ [https://www.caniemail.com/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2749661534"
  },
  {
    "pageContent": "[H][F] (DEPRECATED) 개발 가이드\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/625312153"
  },
  {
    "pageContent": "[H][M] 폴더 구조 (deprecated)\n\n웹과 모바일 폴더 구조 통합 이전에 논의 되었던 내용을 기록하기 위해 남겨둔다.\n\nsrc\n|-- screens\n|   |-- [도메인]\n|   |   |-- [프로세스]\n|   |   |   |-- [화면]\n|   |   |   |   |-- index.jsx\n|   |   |   |   |-- [SubComponent1]\n|   |   |   |   |   |-- index.jsx\n\n\n\n\n\nSCREENS\n\n\n[ 도메인 ]\n\n[H][M] 도메인 모델\n[/wiki/pages/createpage.action?spaceKey=WIKI&title=%5BH%5D%5BM%5D%20%EB%8F%84%EB%A9%94%EC%9D%B8%20%EB%AA%A8%EB%8D%B8]\n\n\n[ 프로세스 ]\n\n하나의 완전한 프로세스를 정의하는 화면들의 집합.\n\n예를 들어 개별 서비스 추가\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/137789908] 프로세스의 경우 아래의\n9개의 화면이 모여 하나의 완전한 프로레스를 정의한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/174948357/image2019-7-11_10-9-57.png?api=v2]\n\n\n[ 화면 ]\n\n프로세스를 구성하는 개별 화면.\n\nindex.jsx 가 화면의 root component 를 정의한다.\n\n화면의 sub components 는 root component 와 같은 폴더에 위치한다.\n\nsub components 는 다른 프로세스로 export 되면 안된다.\n\n\n컨벤션\n\n대상컨벤션[ 도메인 ]lowercase[ 프로세스 ]lowercase[ 화면 ]PascalCaseindex.jsxindex.jsxsub\ncomponentsPascalCase",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174948357"
  },
  {
    "pageContent": "[H][O] 폴더 구조 (deprecated)\n\n웹과 모바일 폴더 구조 통합 이전에 논의 되었던 내용을 기록하기 위해 남겨둔다.\n\n\n\n\nsrc/app/\n├── libs/\t\t\t# 라이브러리 관련된 폴더이다. services, config 등이 있다.\n├── configs/\t\t# 설정\n├── models/\t\t# 데이터 모델\n├── routes/\t\t# 앱의 라우팅 구성\n├── repositories/\t# 서비스 개념의 레파지토리\n├── components/\t# 리액트 컴포넌트들이 있는 폴더이다.\n│\t└── collections/\t\t# (예시)'/collections' 페이지에 쓰이는 컴포넌트들이 들어있는 폴더이다.\n│\t\t├── index.tsx\t\t\t\t\t# (예시)\n│\t\t└── CollectionItem.tsx\t\t\t# (예시)\n└── containers/\t# views에 해당하지 않지만 store에 접근해야 하는 작은 단위의 smart components\n└── views/\t\t\t# 화면을 구성하는 컴포넌트들. store에 접근 가능하며, 주로 containers, components를 사용하여 구성된다.\n\t├── _document.tsx\t\t# 전체적으로 영향을 미치는 Global 페이지이다. 생략된 경우 Next.js의 기본 값을 사용한다.\n\t├── _error.tsx\t\t\t# 에러가 났을 때 처리하는 페이지이다. 생략된 경우 Next.js의 기본 값을 사용한다.\n\t├── index.tsx\t\t\t# '/' 경로에 해당하는 페이지이다.\n\t└── collections.tsx\t# (예시)'/collections' 경로에 해당하는 페이지이다.\nsrc/assets/\t\t# 언어 json, 이미지 등의 static 파일들이 있는 폴더이다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/180420966"
  },
  {
    "pageContent": "[F] 화면 설계 보는 방법\n    \n\n 1. 요소(Component) 종류\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306/F#%EC%9A%94%EC%86%8C(Component)-%EC%A2%85%EB%A5%98]\n\n 2. 사후조건\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306/F#%EC%82%AC%ED%9B%84-%EC%A1%B0%EA%B1%B4]\n\n 3. 출력데이터\n    [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306/F#%EC%B6%9C%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0]\n\n * 해당 페이지 관리\n * 요소(Component) 종류\n * UX 용어\n * 사후 조건\n * 출력 데이터\n\n\n해당 페이지 관리\n\n고광준 (Erik)\n[https://ecubelabs.atlassian.net/wiki/people/5b2b3521882031170e5e5f84?ref=confluence]\n(+PD)\n\n * 변경 및 추가 필요하면 개발, 디자인, 기획 팀 누구나 지라로 이슈 생성하여 요청, 주로 PD 팀\n   GH-621 [https://ecubelabs.atlassian.net/browse/GH-621] - 이슈 세부사항 가져오는 중... 상태\n   에픽 내에 이슈 생성\n\n * 변경 프로세스: 지라 이슈 생성 > 기획 팀에서 변경 후 요청자 멘션 > 요청자 확인 후 확정 (이슈 완료)\n\n\n\n\n요소(COMPONENT) 종류\n\n\n\n 1. 컨테이너 (Container)\n\n * 다른 컴포넌트를 포함할 수 있는 영역\n\n * 컨테이너는 다른 컨테이너를 포함할 수 있음\n\n * https://mui.com/material-ui/react-container/\n   [https://mui.com/material-ui/react-container/]\n\n\n\n\n\n2. 리스트 (List)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/JI8oPguuWXiLYrVqbc1_92S7VboiierKfFbmp-UyR_latTPBtEuwewscY9m47EI6N-OKD-3Bt_vGVqxVPTMFSZArcZwNJgmrzeoCaxVISZvKBGl7LbSgqsJre04Q5seiAAhFhhc2xKgQfkM3lw?api=v2]\n\n * 선택할 수 있는 항목들을 보여주는 요소\n\n * 텍스트와 이미지 모두 가능\n\n * https://mui.com/material-ui/react-list/\n   [https://mui.com/material-ui/react-list/]\n\n\n\n2-1 리스트 아이템 (List Item)\n\n * 리스트의 각 항목\n\n\n\n\n\n3. 테이블 (Table)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/RNlFQ-rxTV6-N_adoVZicYhyc_QY8vuNi5rqQ52dEgk8IAnQISKqdyu999HfzVbeDaEsonSsfyQ0BJ0RDtAM96MtXKZy_1AlLLbXOBHbd076t39e6AsEUfuEHdISgg26JycPWAf7AkhJC-GUtA?api=v2]\n\n * 데이터 테이블 요소\n\n * https://mui.com/material-ui/react-table/\n   [https://mui.com/material-ui/react-table/]\n\n\n\n3-1 테이블 헤더 (Table Header)\n\n * 데이터 테이블의 colum 부분\n\n\n\n3-2 테이블 셀\n\n * colum에 해당하는 데이터 부분\n\n\n\n\n\n4. 텍스트 (Text)\n\n * 문자 (고정 ok, 변수 ok)\n\n\n\n\n\n5. 드롭다운 (Dropdown)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Rnt_a9M7yeVdCpuVL6m9stoyLBoj5l-2VJGALVgsfdGkf0chTFkwefMJEiRN58f7D4-Ukso_C2Fitg6hmSq8WQGjoeXGxnxD6HfZ2cvv6euYAKOS7X2nWMvzBDVYld34dyrnXozGSGrrwUQ68Q?api=v2]\n\n * 사용자가 버튼을 클릭이나 터치하였을 때, 그 버튼 아래로 선택 옵션들이 펼쳐지는 요소\n\n * 보통 상위 옵션만을 노출시키고, 활성화 시에만 하위 옵션들을 표시하는 방식\n\n * *단일 선택\n\n * https://mui.com/material-ui/react-select/\n   [https://mui.com/material-ui/react-select/]\n\n * https://mui.com/material-ui/react-autocomplete/\n   [https://mui.com/material-ui/react-autocomplete/]\n\n\n\n5-1 멀티 셀렉트 드롭다운 (Multi Select Dropdown)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-060845.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-060942.png?api=v2]\n\n * 2개 이상의 옵션을 선택할 수 있는 드롭다운 요소\n\n * *복수 선택\n\n\n\n\n\n6. 버튼 (Button)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Dqa-iKbpwpG6tsVIa5RCOFrhsYBVSeoAFXSDepwRolQrjCvG5H_TE5hJv59rtNxxeId3MiqLfoznSnJHnJAx4K2MGgZXSeWsvWlEqhCkJpcA4SO5JSmnoJ1-aOPQXzJwmt5bUd_fJx01gActoQ?api=v2]\n\n * 클릭 또는 터치를 통해 시스템에 특정한 정보를 전송하는 요소\n\n * https://mui.com/material-ui/react-button/\n   [https://mui.com/material-ui/react-button/]\n\n\n\n6-1 버튼 그룹 (Button Group)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Bfc_rMgmJHD5pRWoI65Q-VStgKlETKel44ifLga6U5zWeRPgRpYY_J0T58rPwQN4L2vkCQ2VnBADaayMzPk6LJoUZUbeV1Uk06yhelXIe0qsLYiJGX8b1XiiNG_cUqNyzZm4s57eAqEDWa1h8Q?api=v2]\n\n * 관련 버튼을 그룹화한 요소\n\n * https://mui.com/material-ui/react-button-group/\n   [https://mui.com/material-ui/react-button-group/]\n\n\n\n\n\n7. 앵커 (Anchor; <a>)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/hTy-OgFuIsTQ9Ci0fMdqTBwAc3MSrcc1uuzl61rcz-1Bx-BJl3_AAZHEcQuATHRTfN_e96eySjzsk00NXr4s6yTJptnt9cyRvelptSNOFWSWK_nBfl-XyOOm2sBRlhI55npnFbvZE1gsYIXBOg?api=v2]\n\n * 웹페이지, 파일, 이메일 또는 같은 페이지의 특정 위치와 같이 URL이 가리킬 수 있는 곳으로 연결하는 하이퍼링크 요소\n\n * https://mui.com/material-ui/react-link/\n   [https://mui.com/material-ui/react-link/]\n\n\n\n\n\n8. 이미지\n\n * 사진 및 로고 이미지\n\n\n\n\n\n9. 체크박스 (Checkbox)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/-VlqSz6R4gLt_1IS8AzRr_XGnheXUNJ26ixKzxoftxbI9ySJgbYh5VTDE4rRg7MBFBVbWsm3O6FnAs7hA-OzgeKuDDclnIFUmHCE9hzh2xYeV1fC8jNr3Or86JWRRLmZW-CeVU7vOmtgliFAFQ?api=v2]\n\n * 클릭하면 선택되고, 다시 클릭하면 선택이 해제되는 사각형 모양의 박스 요소\n\n * 보통 사용자는 1개이상 선택 가능\n\n\n\n\n\n10. 라디오 (Radio)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/VjNvsu69M1l1eoSzXt1VWtDDMyUrOclLKnakfGwPh3sRZOOYq6xZ1VA896mAQf7FGJk8ZkqjsVFLiTIokAbCqBex80PeoS0Mle6NcSKxNpitcAsyJbw275mC5msS6jG6U1zThzHqc0w4Fyurww?api=v2]\n\n * 선택 영역에서 어느 하나를 선택 또는 취소하기 위해 사용하는 요소\n\n * 보통 사용자는 1개만 선택 가능\n\n * https://mui.com/material-ui/react-radio-button/\n   [https://mui.com/material-ui/react-radio-button/]\n\n\n\n\n\n11. 데이트피커(DatePicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/1AzjiOazm5BKNz9r48KRfr9C3ay8h_dVzdEHDP7_jkDhc36yz6uS7E6bBPQYQWRKtxy0weRHN-a5MZ2hSCIFEIDojRWhVJqtgXoWP9lby36A6Jnwgwq09ZlGBUq3jqnqpJ6NgF1_eWoqcvekAA?api=v2]\n\n * 사용자가 날짜 또는 날짜 범위를 선택할 수 있는 요소\n\n * https://mui.com/x/react-date-pickers/getting-started/\n   [https://mui.com/x/react-date-pickers/getting-started/]\n\n\n\n11-1 캘린더데이트피커(CalendarDatePicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/8100aadd-a690-4b21-8d22-b89e7b440ec5%23media-blob-url=true&id=03182083-8588-4ad9-b8ec-844b69deb5a5&contextId=37363&collection=?api=v2]\n\n * 사용자가 특정 년도, 월, 일자를 선택할 수 있는 요소\n\n\n\n11-2 캘린더몬쓰피커(CalendarMonthPicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220718-003354.png?api=v2]\n\n * 사용자가 특정 년도, 월을 선택할 수 있는 요소\n\n\n\n11-3 캘린더레인지피커(DateRangePicker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Screen%20Shot%202022-05-17%20at%209.30.35%20AM.png?api=v2]\n\n * 사용자가 특정 년도, 월, 일 날짜의 범위를 선택할 수 있는 요소\n\n\n\n12. 입력폼 (Text Input Field)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/IPxzKEI4xAn5TpsmQEYiE5B-68YFc3qoDJP-QzX_5uUR6JBgdx40NHt2iufefN1OcJD1Jj87cZCH_1oQXPb6o5_p8ElFjRknOhCd1ORVB_qc9WjLyCmDqCychS_Oy7e_X0KG6-3djq4QkKbr2w?api=v2]\n\n * 사용자가 텍스트를 입력하고 편집할 수 있는 요소\n\n * https://mui.com/material-ui/react-text-field/\n   [https://mui.com/material-ui/react-text-field/]\n\n\n\n\n\n13. 지도\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Xuc1ND18Esap7ISHRjC6asCkCu86QYH9xAKzGmwPyawT8EKKwMxaCG6g1cl0qQnv2rqADKIR9g3x96VWsjDZVhSUNFFRM7Smq5v-V0nMkSyvsekOIBvksxOXOWasSTqZm1p1WRYkpGFD6HGbaw?api=v2]\n\n13-1 마커 (Marker)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Zva1yeYS9iO8ikL_RzToNHScbMycnWuSxvkCHDRQVZgUP4Fc2MW7HbO3bSP3y4eRL3OBuIS0F-l1hmtgou-RZyQl6XnQFdftZqCaTV_fbP7ReySH0yZYjtvbDKrpNevpZzlDDTB50TpQwoww4w?api=v2]\n\n * 지도에 어떤 부분을 표시하기 위한 요소\n\n\n\n13-2 폴리라인 (Polyline)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/eZkDRKqdWW8-sPqQY8XzVHUZEzU00X-eCZu5ivVv1DqezCeXoGkqwR2XxYFsQmbWx1eAx4pNVs2bNqf-gmqb50Ht2w75ePoaFnIDnCK0-kVRTa7_BpLqV6eoEH7g6MEgC_BPsTlYs_uHs4cOUw?api=v2]\n\n * 지도의 여러 선분이 하나로 이어져 꺾인 선\n\n\n\n13-3 클러스터 (Cluster)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-073020.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-072802.png?api=v2]\n\n * 지도의 배율을 축소 시에, 마커의 개수를 표현하는 요소\n\n\n\n\n\n14. 메뉴 (Menu)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-073657.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20211108-050047.png?api=v2]\n\n * 주로 화면 내의 Header, Footer 또는 Side에 위치하여 특정한 페이지로 이동하는 네비게이션 요소\n\n * 사용자가 클릭 또는 마우스 호버했을 때, 선택할 수 있는 메뉴 목록이 나타나는 네비게이션 요소\n\n * https://mui.com/material-ui/react-menu/\n   [https://mui.com/material-ui/react-menu/]\n\n\n\n14-1 햄버거 메뉴 (Drawer menu)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/6eRiuGBjJSsDNRsF9YXqSTH2Ox_ZOucqV-NUHFHhqVm1b__o3wChyK7VDDYayRANvDNXwVtFtcbeMukHF1Ak8KrZutWrsF7qz4OE7kuo1ituGG8SRGP85r_wnOx0S0sWlsv-8IhfNkx6anO3FQ?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-020150.png?api=v2]\n\n\n\n14-2 케밥 메뉴 (Kebab Menu)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220517-030013.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-043046.png?api=v2]\n\n\n\n14-3 메뉴 항목\n\n * 메뉴의 각 항목\n\n\n\n\n\n15. 아이콘 (Icon)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/D0wKgdNHoVLNsmQKTRO_nPbdMMw6-rwtSP9_vL2UEo6m8PIyfAgo6_KsV2KoO7RgwWqlPKctzolAZgoXKno_8ZCeZu7hbAoOfxGg4AVeAPAhTTFOTXA588rTIb74ec1ee7ugEB2ILxTnu2vhbw?api=v2]\n\n * 사용자가 기능이나 명령을 직관적으로 이해하고 상호작용할 수 있는 요소\n\n * https://mui.com/material-ui/icons/ [https://mui.com/material-ui/icons/]\n\n * https://mui.com/material-ui/material-icons/\n   [https://mui.com/material-ui/material-icons/]\n\n\n\n\n\n16. 칩 (Chip)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20211103-065216.png?api=v2]\n\n * 입력, 속성 또는 작업을 나타내는 간결한 요소\n\n * 사용자는 주로 정보 입력, 선택, 콘텐츠 필터링 등 작업 가능\n\n * https://mui.com/material-ui/react-chip/\n   [https://mui.com/material-ui/react-chip/]\n\n\n\n\n\n17. 게이지 (Gauge)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20211206-100513.png?api=v2]\n\n * 복잡한 데이터를 차트나 게이지의 형태로 표현하여 사용자의 데이터 해석에 도움을 주는 요소\n\n\n\n\n\n18. 아코디언 (Accordion)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/hHidRKl9TgqvUyBE6eEqcL6q3yy9KQODoFAm5k83c07e4sKAiygf9qplE7gmhn7uwusvRI9mCP_mnvbly6QMDuEsaP7fFaxMvzM8Ys2rr_Fegsq2ex3CjqJ8I8Q96ty6iK6BrKztBiDbj1FXGA?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-021102.png?api=v2]\n\n * 관련 콘텐츠를 표시하거나 숨길 수 있는 요소\n\n * https://mui.com/material-ui/react-accordion/\n   [https://mui.com/material-ui/react-accordion/]\n\n\n\n\n\n19. 다이얼로그 (Dialog ≒레이어 팝업)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220531-044528.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/iQoi78HFQCL-26htoNoxBBlkVVeiKT-H5HSMkyyacq9MZkN3sUkjXf2ZnxU2rJrwpXgwQBsuix7E_WPHRa9_O_4yulQF64YH1x3gAWcB5-twVWYgvmQo2u8ShmAGL5uG4QITmACSvGAjXQVeqA?api=v2]\n\n * 사용자에게 작업 및 중요한 정보를 알리거나 결정을 요구하기 위한 대화상자\n\n * 주로 사용자의 상호작용을 요구하는 일종의 모달 창\n\n * https://mui.com/material-ui/react-dialog/\n   [https://mui.com/material-ui/react-dialog/]\n\n\n\n\n\n20. 팝오버 (Popover)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/Screen%20Shot%202022-05-19%20at%2010.26.39%20AM.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220622-044122.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/L9lMXoDEfemJ0SdAWCwu9rsa3xn5yNDnD3r3836BZxWOchJKraOZqJdDCxrm53e0X0ad7zuW5DFEScb3GtSfvSoA8coUtaOvh_2C4eXkRS2WSlYVy8EhfyOjs55knWQYmCQOmFXftWiwKI66IQ?api=v2]\n\n * 사용자가 클릭 또는 마우스 호버 시, 해당 콘텐츠 위에 나타나는 일종의 모달 창\n\n * https://mui.com/material-ui/react-popover/\n   [https://mui.com/material-ui/react-popover/]\n\n\n\n\n\n21. 툴팁 (Tooltip)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-042531.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-042542.png?api=v2]\n\n * 사용자가 특정한 메뉴에 마우스 호버(hover)시 약 1~2초 뒤에 해당 요소에 대한 설명이 나타나는 요소\n\n * 마우스를 올려놓은 Hover 상태에서는 계속 유지\n\n * https://mui.com/material-ui/react-tooltip/\n   [https://mui.com/material-ui/react-tooltip/]\n\n\n\n\n\n22. 토스트\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-045843.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-045808.png?api=v2]\n\n * 사용자와 상호작용 시에 바뀐 상태나 상황을 전달하는 요소\n\n * 텍스트로만 이루어져 닫기 버튼이 없고 일정 시간이 지나면 자동으로 사라짐\n\n\n\n\n\n23. 스텝 (Step)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/8O2BOndhZ8MK6glHPXBGTOPmlfBQF7pDH2JHzgpm7duOt5anEpSPpfYW7Dl7oNfqmWIRsL4o1wST10Ls4lUuJ-im2yHQx27B0sIJeZnxQEbz9ZhKjlR6RM-vDqoFlr0Zgwabzi0BUOBdPt7xqg?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/tMwdX2ukwVJkU-bEuU7gigln7v-QkwAfIupW9yWTPx9hNvQJ-Cw8ikvurI6fVKuXcQG4GF-bpT94rOuzau94FVHmYx_nY6wcp8XluEFmjE6r2Nd0blRDOSbnXcna_LylQun2s-gSvwl2bINj5w?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/M-uBou6nHH2qsmlxbqqqNGZ0tD2zMBxV1vsSJ8hYkvhFSit_poG-5QkxwWEGI3gEg9jCoCAwCh-6nne2MGtXFA0vIOWFt2IqEtvaX2gqKWj-MXHk5_AV5tzXY5B1w-u3739DoAMuAbP5uiULJQ?api=v2]\n\n * 진행단계를 표시하는 요소\n\n * https://mui.com/components/steppers/ [https://mui.com/components/steppers/]\n\n\n\n\n\n24. 슬라이더(Slider)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-043800.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-043643.png?api=v2]\n\n * 사용자가 값을 시각적으로 인지하고 선택할 수 있는 요소\n\n * https://mui.com/material-ui/react-slider/\n   [https://mui.com/material-ui/react-slider/]\n\n\n\n\n\n25. 프로그래스 인디케이터 (Progress Indicator)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-051612.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220610-051510.png?api=v2]\n\n * 로딩, 양식 제출 또는 업데이트 저장 등 진행 중인 프로세스의 상태를 시각적으로 알리는 요소\n\n * https://mui.com/material-ui/react-progress/\n   [https://mui.com/material-ui/react-progress/]\n\n\n\n26. 페이지네이션 (Pagination)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220622-044803.png?api=v2]\n\n * 페이지 범위를 나타내는 요소로, 사용자가 특정 페이지를 선택하여 이동할 수 있음\n\n * https://mui.com/material-ui/react-pagination/\n   [https://mui.com/material-ui/react-pagination/]\n\n\n\n\n\n27. 파일 업로더 (File uploader)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220627-003814.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220627-004053.png?api=v2]\n\n * 파일을 전송하거나 콘텐츠를 제출할 수 있는 기능 요소\n\n * 파일 업로드 시스템 팝업을 생성하거나 파일 선택 영역에 드래그하여 업로드할 수 있음\n\n\n\n\n\n28. 탭 (Tab)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220718-004544.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20220718-004906.png?api=v2]\n\n * 관련된 콘텐츠 그룹을 쉽게 탐색하고 전환할 수 있는 요소\n\n * https://mui.com/material-ui/react-tabs/\n   [https://mui.com/material-ui/react-tabs/]\n\n\n\n29. Transfer List\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20230621-042444.png?api=v2]\n\n * https://mui.com/material-ui/react-transfer-list/\n   [https://mui.com/material-ui/react-transfer-list/]\n\n\n\n30. 뱃지(notification 이라고도 함)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-024657.png?api=v2]\n\n\n\n31. 차트(chart)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231219-004152.png?api=v2]\n\n\n\n*참고:\nhttps://velog.io/@oneook/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-32%EA%B0%80%EC%A7%80%EC%9D%98-UI-%EC%9A%94%EC%86%8C-%EB%B2%88%EC%97%AD\n[https://velog.io/@oneook/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-32%EA%B0%80%EC%A7%80%EC%9D%98-UI-%EC%9A%94%EC%86%8C-%EB%B2%88%EC%97%AD]\n\nTo Do…\n\n\n\n\nUX 용어\n\n 1. 코치마크(Coach Mark): 서비스 앱 초기 실행 시, 인터렉션 가이드나 해당 서비스를 안내하는 화면. 레이어 팝업 형태로 특정 기능\n    혹은 콘텐츠에 대한 추가 안내용으로 사용\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-025057.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-025121.png?api=v2]\n\n 2. 워크쓰루(Walkthroughs): 매뉴얼, 초기세팅에 상세 도움말을 단계별로 제공해주는 페이지 뷰. 코치마크보다 더 많은 정보 제공.\n    이미 알고 있는 사용자를 위해 skip 버튼을 달기도 함\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2031026306/image-20231127-025315.png?api=v2]\n\n\n\n\n사후 조건\n\n 1. 이동\n\n * 뒤로 가기 했을 때, 해당 화면이 다시 보이는 경우\n\n * location.href\n\n\n\n2. 돌아가기\n\n * 뒤로 가기 했을 때, 해당 화면이 다시 보이지 않는 경우\n   \n   * ex) 폼 제출 후에 뒤로 가기 누르면 다시 폼이 보이면 안되는 경우\n\n * location.replace\n\n\n\n\n출력 데이터\n\n파란색은 변수\n\n회색으로 감싸면 다국어 적용/글자 그대로 표시\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2031026306"
  },
  {
    "pageContent": "[F] 컴포넌트 명명 규칙\n * List\n * Dialog\n\n\nLIST\n\n * XXXList\n\n * XXXListItem\n\n<UserList>\n  <UserListItem />\n  <UserListItem />\n  <UserListItem />\n</UserList>\n\n\nDIALOG\n\n * Action 을 위한 dialog 는 동사로 시작, action 을 위한 dialog 가 아니면 형용사/부사로 시작할 수 있음.\n\n * Dialog 로 끝남.\n\n * Dialog 의 기능을 잘 설명하는 이름이어야 한다.\n\n * ex)\n   \n   * 수거 요청 dialog → RequestCollectionDialog\n   \n   * 개별서비스 등록 dialog → RegisterIndividualServiceDialog\n   \n   * 인보이스 만료 안내 dialog → PastDueDialog\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2008612944"
  },
  {
    "pageContent": "[F] 컴포넌트 기본 구조\n * Use function component\n   * why?\n * Do not export directly\n   * When using React.memo\n * Props 를 위한 타입 분리 금지\n * Function component 주석\n * Prop naming\n   * boolean prop\n   * Controlled/Uncontrolled value prop\n\n\nUSE FUNCTION COMPONENT\n\nFunction component 를 기본으로 한다.\n\nfunction ThisIsAFunctionComponent() {\n  return ...\n}\n\nclass ThisIsAClassComponent extends React.Component {\n  render() {\n    return ...\n  }\n}\n\n\nWHY?\n\n * this는 mutable이다. 언제든지 변할 수 있다.\n\n * class 컴포넌트에서 arrow method와 method는 다르다.\n   \n   * [ ES6 ] 클래스 내에서 arrow 함수와 메서드의 차이점\n     [https://medium.com/@han7096/%EB%A6%AC%EC%95%A1%ED%8A%B8-arrow-%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-3e81273b028a]\n\n * typescript에서는 function\n   \n   * https://velog.io/@velopert/create-typescript-react-component\n     [https://velog.io/@velopert/create-typescript-react-component]\n\n\nDO NOT EXPORT DIRECTLY\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n// Welcome.tsx\nexport function Welcome () { ... } \n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n// Welcome.tsx\nfunction Welcome () { ... }\n\nexport { Welcome }\n\n선언과 동시에 export 하면 다음과 같이 React devtool 에서 컴포넌트 이름이 Anonymous 로 나오기 때문에 디버깅이\n곤란하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/806355067/image-20200818-035155.png?api=v2]\n\n\nWHEN USING REACT.MEMO\n\nReact.memo 는 class comonent 에서 shouldComponentUpdate 와 비슷한 역할을 한다.\n\n * 불필요한 렌더링을 막아서 성능 최적화.\n\n * 성능이 문제가 되지 않으면 React.memo, shouldComponentUpdate 는 굳이 사용할 필요가 없다. (개발하기 귀찮기\n   때문)\n\n * React.memo 를 사용할 때는 다음과 같이 displayName 을 지정해줘야 원활한 디버깅이 가능하다.\n\nconst Welcome = React.memo(() => { ... })\n\nWelcome.displayName = 'Welcome'\n\nexport { Welcome }\n\n\nPROPS 를 위한 타입 분리 금지\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\ntype Props = {\n  id: number;\n  name: string;\n}\n\nfunction TestComponent(props: Props) {\n  // ...\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/806355067/image-20210208-062743.png?api=v2]\n\nVSCode 에서 props 의 내용을 인텔리센스로 확인할 수 없다. 그래서 prop 을 확인하기 위해 해당 컴포넌트 선언으로 이동해야 하는\n불편함이 있다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nfunction TestComponent(props: {\n  id: number;\n  name: string;\n}) {\n  // ...\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/806355067/image-20210208-062829.png?api=v2]\n\n컴포넌트 선언으로 이동하지 않아도 props 내용 확인 가능.\n\n\nFUNCTION COMPONENT 주석\n\nfunction TestComponent() {\n  // prop destruction\n\n  // lib hooks\n\n  // state, ref, querystring hooks\n\n  // form hooks\n\n  // query hooks\n\n  // calculated values\n  \n  // effects\n\n  // handlers\n  \n  return (\n    <...\n  )\n}\n\n위와 같이 주석을 달고 각 주석 아래에 hook 을 위치 시킨다. 해당 항목이 없더라도(예를 들어 prop이 없더라도) 주석은 그대로 유지한다.\n그래야 코드에 통일성이 생긴다.\n\n\nPROP NAMING\n\n\nBOOLEAN PROP\n\n기본 값이 false인것을 전제로 네이밍한다.\n이름을 보고 기본 값이 무엇인지 추측 할 수 있으며, 단축 표기법을 이용해 더 자연스러운 문법을 만들 수 있다.\n\n단축 표기법이 어떻게 동작하는지 모른다면?\nhttps://stackblitz.com/edit/react-ts-r9qkm4?file=index.tsx\n[https://stackblitz.com/edit/react-ts-r9qkm4?file=index.tsx]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]활성화 상태가\n기본인 입력 컴포넌트\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nBad: 비활성화 시키기 위해서는 아래와 같이 해야 한다.\n\n<Input enabled={false} />\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nGood\n\n<Input disabled /> \n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]열림 상태가\n기본인 모달 컴포넌트\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nBad: 닫기 위해서는 아래와 같이 해야 한다.\n\n<Modal open={false} />\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nGood\n\n<Modal close /> \n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]닫힘 상태가\n기본인 모달 컴포넌트\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nBad: 열기 위해서는 아래와 같이 해야 한다.\n\n<Modal close={false} />\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nGood\n\n<Modal open /> \n\n참고: https://mui.com/guides/api/#prop-naming\n[https://mui.com/guides/api/#prop-naming]\n\n\n\n\nCONTROLLED/UNCONTROLLED VALUE PROP\n\n * Controlled component: value\n\n * Uncontrolled component: initialValue\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/806355067"
  },
  {
    "pageContent": "[F] Props, State\n * Passing ID vs Entity as props\n * ?\n\n\nPASSING ID VS ENTITY AS PROPS\n\nhttps://medium.com/weekly-webtips/passing-id-vs-entity-as-props-in-react-a8f54834a019\n[https://medium.com/weekly-webtips/passing-id-vs-entity-as-props-in-react-a8f54834a019]\n\nhttps://stackoverflow.com/questions/25701168/at-what-nesting-level-should-components-read-entities-from-stores-in-flux\n[https://stackoverflow.com/questions/25701168/at-what-nesting-level-should-components-read-entities-from-stores-in-flux]\n\nDISCLAIMER\n\n아직 우리는 어떻게 하는 게 좋은지 잘 모르겠다. 일단은 갓 Dan 님의 말씀을 따라 가능하면 entity 를 prop 으로 넘기도록 한다.\n\n\n?\n\n * 요구사항에 따라 route 상태(querystring, fragment\n   [https://developer.mozilla.org/ko/docs/Web/API/URL/hash] 등)에 의존하여 관리하는게 적절한지\n   검토한다.\n   \n   * ex) 검색 화면 개발\n     \n     * 요구사항: 새로고침 해도 검색 화면이 그대로 유지되어야 한다.\n     \n     * (tick)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n       \n       const qs = useQueryString();\n       \n       const searchKeyword = qs.get('q');\n     \n     * (오류)\n       [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n       \n       const [searchKeyword] = useState('');\n     \n     * 잘못 구현된 사례: 뒤로가기 했을때 쿼리스트링이랑 화면이랑 안맞음\n       쿼리스트링을 상태 저장소로 보고 SSOT\n       [https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%A7%84%EC%8B%A4_%EA%B3%B5%EA%B8%89%EC%9B%90]로서\n       사용하면 이런 일이 발생할 수 없다.\n       \n       [https://ecubelabs.atlassian.net/wiki/download/attachments/2288058516/2021-12-23%2011-22-08.2021-12-23%2011_22_52.gif?api=v2]\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2288058516"
  },
  {
    "pageContent": "[F] Handling Events\n * 이벤트 처리 함수\n   * Prefix for Event handling\n     * on\n     * handle\n       * Bad\n       * Good\n   * Event Handler Naming in React\n * Bubbling and Propagation\n\n\n이벤트 처리 함수\n\n터치, 클릭과 같은 이벤트를 처리하기 위한 함수를 이벤트 처리 함수라 한다. 이벤트 처리 함수는 모든 종류의 컴포넌트에 존재할 수 있다.\n\n컴포넌트에서 발생하는 이벤트를 처리하는 함수가 컴포넌트 내부에 선언 된 경우 prefix = handle을 붙인다.\n컴포넌트에서 발생하는 이벤트를 처리하기 위한 함수를 외부에서 주입 받는 경우 prefix = on을 붙인다.\n\n위와 같이 하면 스크린 컴포넌트에는 대부분 handle…이 정의 되고 디자인 컴포넌트에는 대부분 on…이 정의될 것으로 기대된다.\n\npostfix를 통해 이벤트를 쉽게 식별할 수 있도록 한다.\n\n * handleNameChange\n\n * handleNextButtonClick\n\nex)\n\n/**\n * Page.jsx\n */\nclass Page {\n  /**\n   * 이름 변경 처리\n   * prefix 로 부터 이름이 변경된 경우 이 컴포넌트 내에서 관련 작업이 이루어짐을 유추할 수 있다.\n   * postfix 로 부터 input 과 연결된 핸들러임을 유추할 수 있다.\n   */\n  handleNameChange(name) {\n    // do something ...\n  }\n  \n  handleNextButtonClick() {\n    // do something ...\n  }\n    \n  render() {\n    return (\n      <TextInput label=\"name\" onChange={handleNameChange} />\n      <Button title=\"Next\" onClick={handleNextButtonClick} />\n    )\n  }\n}\n\n/**\n * TextInput.jsx\n * @param onChange prefix 로 부터 이벤트 핸들러를 prop 으로 주입 받는 것을 유추할 수 있다.\n */\nconst TextInput = ({ label, onChange }) => {\n  <>\n    <p>{label}</p>\n    <input onChange={onChange} />\n  </>\n}\n\n\n\nhttps://dmitripavlutin.com/dont-overuse-react-usecallback/\n[https://dmitripavlutin.com/dont-overuse-react-usecallback/]\n\n\nPREFIX FOR EVENT HANDLING\n\n\nON\n\n컴포넌트가 내부의 이벤트를 외부로 전달하기 위해 Props를 통해 주입받는 함수에 붙는 접두사다.\n\n보통 onChange, onBlur 같은 형식의 이름을 가진 함수를 Props를 통해 주입받으며, on 뒤에 컴포넌트 내부에서 발생하는 이벤트의\n이름을 적는게 일반적이다.\n\n\nHANDLE\n\n컴포넌트 내부에서 발생하는 이벤트를 핸들링 하기 위해 만들어진 함수에 붙는 접두어다.\n\n단, 이 접두어가 붙은 함수에서는 컴포넌트의 상태를 변경하는 기능을 포함할 수 있지만 반대로 컴포넌트의 상태만 변경하는 역할의 함수에\nhandle을 붙이는건 허용되지 않는다. (아래 예시 참조)\n\nBAD (오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n// bad\nconst [value, handleChange] = useState('');\n\nreturn (\n  <input onChange={(e) => handleChange(e.target.value)} />\n);\n\nGOOD (tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n// good\nconst [value, setValue] = useState('');\nconst handleChange = (value) => {\n  setValue(value);\n};\n\nreturn (\n  <input onChange={(e) => handleChange(e.target.value)} />\n);\n\n\nEVENT HANDLER NAMING IN REACT\n\nhandle + 명사 + 동사\n\nex) handleNameChange\n\n참고\nhttps://jaketrent.com/post/naming-event-handlers-react#for-props-more-complicated-naming\n[https://jaketrent.com/post/naming-event-handlers-react#for-props-more-complicated-naming]\n\n\nBUBBLING AND PROPAGATION\n\nhttps://web.dev/eventing-deepdive/ [https://web.dev/eventing-deepdive/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/372638546"
  },
  {
    "pageContent": "[H][F] Table, Section, Cell\n\nTable, Cell, Section 관련 컨벤션은\nhttps://developer.apple.com/documentation/uikit/uitableview\n[https://developer.apple.com/documentation/uikit/uitableview] 를 참고 했다\n\n\n\n * I. Table\n * II. Section\n * III. Cell\n * IV. Summary\n\n\nI. TABLE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083325.png?api=v2]\n\n위와 같은 형태의 view 는 table 이라 한다.\n\n비슷한 성격의 section 끼리 그룹화를 하기 위한 view 를 table 이라 한다.\n\nhttps://github.com/Ecube-Labs/haulla-mobile/pull/543#discussion_r380047885\n[https://github.com/Ecube-Labs/haulla-mobile/pull/543#discussion_r380047885]\n\n\nII. SECTION\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083459.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083440.png?api=v2]\n\n비슷한 성격의 cell 끼리 그룹화를 하기 위한 view 를 section 이라 한다.\n\n> You can configure a table to display a single long list of rows, or you can\n> group related rows into sections to make navigating the content easier.\n\n\n\n\nIII. CELL\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083415.png?api=v2]\n\ntable 에서 하나의 정보를 전달하는 view 를 cell 이라 한다.\n\n> Each row in the table contains one piece of your app’s content.\n\n애플 개발자 문서 [https://developer.apple.com/documentation/uikit/uitableview]에서 설명은\nrow 라고 하고 있지만 이와 매핑된 컴포넌트는 UITableViewCell\n[https://developer.apple.com/documentation/uikit/uitableviewcell]이기 때문에 우리도 cell\n로 명명한다..\n\n\n\n\nIV. SUMMARY\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/372638296/image-20200218-083659.png?api=v2]\n\n\n\n * section\n   \n   * Collection Request Number, Status, Requested on, Collection Scheduled on\n   \n   * Generator, Hauler\n   \n   * Fill-level when requested, Special request\n\n * cell\n   \n   * Collection Request Number: 275\n   \n   * Status: En Route\n   \n   * Requested on: August 06, 2019\n   \n   * Collection Scheduled on: August 06, 2019\n   \n   * Generator: 17\n   \n   * Hauler: 209\n   \n   * Fill-level when requested: 5%\n   \n   * Special request: sadfs\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/372638296"
  },
  {
    "pageContent": "[F] Lists and Keys\n * 개요\n * 정적인 리스트\n * 동적인 리스트\n\n\n개요\n\nReact는 DOM 트리를 업데이트할 때 key 속성을 활용한 diff 알고리즘을\n[https://reactjs.org/docs/reconciliation.html#recursing-on-children] 통해 렌더링을\n최적화한다.\n\n이말인즉슨 key 활용이 적절치 못할경우 성능 이슈가 발생할 수 있다.이상하게 동작할 수 있다.\n\n자세한 내용은 리스트와 키 문서\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/248381637/T+React]를 참고한다.\n\n\n정적인 리스트\n\nkey 로 사용할 유니크 값이 있으면 사용한다. 없을 경우 배열 index 를 키로 사용한다.\n\n{itmes.map((item, index) => (\n  <Hello\n    key={`${index.toString()}`} // lint에서는 index.toString()도 에러로 판단하기 때문에 template literal로 감싸주면 괜찮다.\n    ...\n  />\n))}\n\n\n동적인 리스트\n\n> 아이템의 순서가 바뀔 수 있는 경우 키에 인덱스를 사용하지 않는 게 좋습니다. 이로 인해 성능이 저하되거나 컴포넌트의 state에 따른\n> 문제가 발생할 수 있습니다. Robin Pokorny가 작성한 아티클인 in-depth explanation on the negative\n> impacts of using an index as a key\n> [https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318] 를\n> 참고하시길 바랍니다. 만약 리스트 아이템에 명시적으로 키를 지정하지 않으면 React는 기본적으로 인덱스를 키로써 사용합니다.\n> \n> https://reactjs-kr.firebaseapp.com/docs/lists-and-keys.html\n> [https://reactjs-kr.firebaseapp.com/docs/lists-and-keys.html]\n\n사용하지 않는 게 좋습니다가 아니고 사용하면 안 됨. 제대로 동작 안 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/349143994/listandkeys.gif?api=v2]\n\n\n\n무조건 아이템의 id를 키로 사용한다. id 가 없으면 임시로 사용할 id 를 만들어야 한다.\n\n{itmes.map((item, index) => (\n  <Hello\n    key={item.id}\n    ...\n  />\n))}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/349143994"
  },
  {
    "pageContent": "[F] Forms\n * I. Form ?\n * II. Rules of Form Development\n * III. Exception Case\n   * 1. ( header위에 submit이 있을 경우)\n\n\n\n\nI. FORM ?\n\n * input 의 집합을 form 이라 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/374341829/image-20200218-084347.png?api=v2]\n\n위의 컴포넌트는 다음과 같이 퍼블리싱 할 수 있다.\n\n// screen.tsx\nclass Screen extends React.Component {\n  handleSubmit = ({ firstName, lastName}) => {\n    // ...\n  }\n  \n  render() {\n    return (\n      <>\n        <Header />\n        <NameForm onSubmit={this.handleSubmit} />\n      </>\n    )\n  }\n}\n\n// header.tsx\n...\n\n// name-form.tsx\n...\n\n\n\n\n\n\nII. RULES OF FORM DEVELOPMENT\n\n * form 은 필요하다면 initial prop 을 받을 수 있다.\n\n * form 은 form 이 완성되었을 때 실행 되는 callback 을 받아야 한다.\n   \n   * callback 의 이름은 form 의 역할에 어울리는 이름을 짓도록 한다.\n     \n     * onSubmit, onConfirm, …\n   \n   * callback 은 form 이 완성되는 시점에 사용자가 입력한 모든 값을 파라미터로 해서 실행 되어야 한다.\n     \n     * 위의 예시에서 onSubmit 은 form 에서 입력 되는 모든 값 (firstName, lastName) 을 한번에 파라미터로\n       받는다.\n\n * form 의 상태는 parent 로 노출하지 않는다.\n   \n   * 위의 예시에서 NEXT를 누르기 전까지 사용자가 입력한 firstName, lastName 은 form 의 state 로 관리하고 이를\n     parent 의 state 와 동기화 시키지 않는다.\n\n * form 의 validation 은 form 이 담당한다. (validation 을 위한 정보를 parent 로 부터 주입 받지 않는다)\n\n\n\n\nIII. EXCEPTION CASE\n\n\n1. ( HEADER위에 SUBMIT이 있을 경우)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/374341829/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-02-19%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.59.32.png?api=v2]\n\n\n\n * forwardRef, useImperativeHandle 를 이용하도록 한다.\n   \n   * ref를 이용해서 submit을 호출할 수 있다.\n   \n   * useImperativeHandle를 이용해서 특정 메소드를 노출시킬 수 있다.\n\n * Class 컴포넌트\n   \n   * \n       constructor(props) {\n         super(props);\n         this.formRef = React.createRef();\n       }\n       \n         return(\n           <UpdateGeneratorUserInformationForm \n           ref={(ref) => {\n                 ref && (this.formRef = ref);\n               }}\n           />\n         )\n     \n\n * Function 컴포넌트\n   \n   *     const formRef = useRef<any>(null);\n         ...\n         ...\n         return(\n           <UpdateGeneratorUserInformationForm ref={formRef}/>\n         )\n     \n     \n     \n\n예 )\n\nexport const Component: React.FC<Props> = forwardRef((props, ref) => {\n...\n...\n\n  const handleSubmit = () => {\n    props.onSubmit(formModel);\n  };\n  \n  useImperativeHandle(ref, () => ({\n    submit: handleSubmit,\n  }));\n  \n...\n...\n\n}\n\n// screen에서 this.formRef.submit(); 을 호출 해주면 된다.\n\n        <CompanyDetailUpdateForm\n          ref={(ref) => {\n            ref && (this.formRef = ref);\n          }}\n          initialHaulerServiceAccount={haulerServiceAccount!}\n          onChangeFormModel={this.handleFormModelChange}\n          onChangeValid={this.handleValidChange}\n          onSubmit={this.handleFormModelSubmit}\n        />\n            \n\n\n\n * 주의)redux랑 사용시 forwardRef 옵션을 줘야 한다.\n\n * export const CompanyDetailUpdateForm = connect(\n     mapStateToProps,\n     mapDispatchToProps,\n     null,\n     { forwardRef: true },\n   )(Component);\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374341829"
  },
  {
    "pageContent": "[H][F] Segmented Component\n * I. Segmented Component?\n * 참고\n\n\nI. SEGMENTED COMPONENT?\n\n * 아래와 같은 형태의 컴포넌트를 XXXSegment 로 네이밍 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/381256598/segmented-control-simulator.png?api=v2]\n\n다음과 같이 퍼블리싱 할 수 있다.\n\nScreen.tsx\n<Screen>\n    ...\n    switch (tab) {\n      case 'A':\n        return <ASegment/>\n      case 'B':\n        return <BSegment/>\n    }\n    ...\n<Screen> \n\nASegment.tsx\n<View>\n  <Text>A</Text>\n</View>\n\nBSegment.tsx\n<View>\n  <Text>B</Text>\n</View>\n\n\n\n\n참고\n\n2020-01-08 회의록 (haulla-mobile, tab, segment, 번역 키 요청)\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/290816095]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/381256598"
  },
  {
    "pageContent": "[F] RTL 지원 컴포넌트 개발\n * RTL 스타일 구현\n   * 프로젝트 환경 구성\n   * 스타일링 가이드\n   * 스토리북 가이드\n * RTL Props\n\n\n\n\nRTL 스타일 구현\n\n\n프로젝트 환경 구성\n\nhttps://mui.com/guides/right-to-left/ [https://mui.com/guides/right-to-left/]\n\n예시: https://stackblitz.com/edit/mui5-single-theme-provider-rtl\n[https://stackblitz.com/edit/mui5-single-theme-provider-rtl]\n\n * rtl plugin을 theme의 direction 값에 따라 사용하도록 한다.\n\n * ThemeProvider에서 direction 제어\n\n * html 태그에 dir 값 지정\n\n\n스타일링 가이드\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2033254606/OJT+FE+Publishing#RTL%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C%EB%8B%A4.\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2033254606/OJT+FE+Publishing#RTL%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C%EB%8B%A4.]\n\n\n스토리북 가이드\n\n[F][스토리북] 스토리 작성 규칙\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964]\n\n\n\n\nRTL PROPS\n\n별도의 props(ex. direction)를 구현하지 않고 Provider에 의해 알아서 반전될 수 있도록 구현해야 한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1640235032"
  },
  {
    "pageContent": "[H][F] 퍼블리싱\n\nMATERIAL-UI [https://material-ui.com/] 를 기반으로 한다.\n\n * 콜론\n   * 금액 표시\n   * A11y best practices\n   * Semantic Tags\n\n\n\n\n콜론\n\nMP-1305 [https://ecubelabs.atlassian.net/browse/MP-1305] - 이슈 세부사항 가져오는 중... 상태\n\n콜론은 앞단어와 띄어쓰기하지 않는다.\n\n\n\nStatus : // bad\nStatus:  // good\n\n\n\n\n\n\n금액 표시\n\n * 띄어쓰기(화이트스페이스)가 있어야 한다.\n\n\n\n$10 // bad\n$ 10  // good\n\n\n\n\nA11Y BEST PRACTICES\n\n * Navigation Menu Button\n   [https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html]\n\n\n\n\nSEMANTIC TAGS\n\n아래 태그는 그 자체로 역할/의미를 가지는 태그다.\n\n * a\n   \n   * role=link\n\n * ul / ol\n   \n   * role=list\n\n * li\n   \n   * role=listitem\n\n * button\n   \n   * role=button\n\n * …\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/233340980"
  },
  {
    "pageContent": "[F] MUI\n * Components\n   * Inputs\n     * Button\n   * Data Display\n     * Typography\n * System\n   * Spacing\n\n\nCOMPONENTS\n\n\nINPUTS\n\n\nBUTTON\n\nimport { Button } from '@ceed/core';\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/575635551/image-20200515-010447.png?api=v2]\n\n제플린에서 버튼 컴포넌트는 X/Y/Z/W 4 단계로 구성된다.\n\n * X\n   \n   * 컴포넌트 이름\n   \n   * Button XXX이면 <Button />을 사용하면 된다.\n\n * Y\n   \n   * 크기 (Slim | Default | Large)\n   \n   * size prop 을 사용하면 된다.\n   \n   * <Button size=\"small\" />  // for Slim\n     <Button size=\"medium\" /> // for Default\n     <Button size=\"large\" />  // for Large\n\n * Z\n   \n   * 형태 (Text | Outlined | Contained)\n   \n   * variant prop 을 사용하면 된다.\n   \n   * <Button variant=\"text\" />      // for Text\n     <Button variant=\"outlined\" />  // for Outlined\n     <Button variant=\"contained\" /> // for Contained\n\n * W\n   \n   * 색깔 (inherit | primary | secondary | default | grey)\n   \n   * color prop 을 사용하면 된다.\n   \n   * <Button color=\"primary\" /> // for Primary\n     <Button color=\"grey\" />    // for Grey\n     \n     \n\n * 이 규칙을 따라 개발하면 위의 제플린 예시는 다음과 같이 개발 되어야 한다.\n   \n   * <Button size=\"small\" variant=\"text\" color=\"grey\" />\n\n\nDATA DISPLAY\n\n\nTYPOGRAPHY\n\nTypeface 를 적용하고 싶을 때 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/575635551/image-20200518-014223.png?api=v2]\n\n제플린에서 Typeface는 X/Y/Z/W 4 단계로 구성된다.\n\n * X\n   \n   * 용도\n\n * Y\n   \n   * 형태 (inherit | h1 | h2 | h3 | h4 | h5 | h6 | subtitle1 | subtitle2 | body1 |\n     body2 | caption | button | overline)\n   \n   * variant prop 을 사용하면 된다.\n   \n   * <Typography variant=\"h1\">Apple</Typography>  \n     <Typography variant=\"subtitle1\">Banana</Typography> \n     <Typography variant=\"caption\">Carrot</Typography>  \n\n * Z\n   \n   * 색깔 (initial |inherit | primary | secondary | textPrimary | textSecondary |\n     error)\n   \n   * color prop 을 사용하면 된다.\n   \n   * <Typography color=\"primary\">Apple</Typography>  \n     <Typography color=\"textPrimary\">Banana</Typography> \n     <Typography color=\"error\">Carrot</Typography>  \n\n * W\n   \n   * 정렬 (inherit | left | center | right | justify)\n   \n   * align prop 을 사용하면 된다.\n   \n   * <Typography align=\"left\">Apple</Typography> for Left Aligned \n     <Typography align=\"center\">Banana</Typography> for Centered\n     <Typography align=\"right\">Carrot</Typography> for Right Aligned \n     \n     \n\n * 이 규칙을 따라 개발하면 위의 제플린 예시는 다음과 같이 개발 되어야 한다.\n   \n   * <Typography variant=\"subtitle2\" color=\"primary\" color=\"left\">Hi, Edgar</Typography>  \n\n\nSYSTEM\n\n\nSPACING\n\n우리의 scaling factor = 8px. (Material-UI 기본값)\n\npadding, margin 은 모두 scaling factor 를 기반으로 계산한다.\n\n// (X)\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      paddingLeft: 24px\n    }\n  })\n)\n\n// (O)\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      paddingLeft: theme.spacing(3)\n    }\n  })\n)\n\n * width, height 의 크기는 spacing 과 관계가 없으므로 적용하지 않는다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/575635551"
  },
  {
    "pageContent": "[F] CEEDUI\n * [F][CEEDUI] Performance issues\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810937441]\n * [F][CEEDUI] Map\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810347530]\n * [F][CEEDUI] MapOverlayView\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811035693]\n * [F][CEEDUI] NativeMarker\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265039]\n * [F][CEEDUI] MapClusters\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265057]\n * [F][CEEDUI] MapSearchBox\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811134023]\n * [F][CEEDUI] Polyline & HeatmapLayer\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811199594]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810511379"
  },
  {
    "pageContent": "[F] DataGrid\n * Overview\n * DataGrid Props\n   * columns는 반드시 memoized 되어야한다.\n     * 예시\n   * checkbox column의 field는 selection 이다.\n * GridColDef\n * Height\n * With pagination\n * In BackOffice\n   * Props\n   * 예시코드)\n * In Dash-Board\n   * Props\n   * 예시코드)\n\n\nOVERVIEW\n\n@ceed/ui/DataGrid 는 @mui/x-data-grid [https://mui.com/x/react-data-grid/] 를 대체하는\n것을 목표로 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20221222-024848.png?api=v2]\n\n우리도 좋은 개발자가 많은데 1명당 $444.00 나 주고 저걸 구입할 필요가 없기 때문이다.\n\n@ceed/ui/DataGrid 는 다음의 이유로 가능하면 @mui/x-data-grid\n[https://mui.com/x/react-data-grid/] 와 같은 인터페이스, 기능을 갖도록 유지보수 해야 한다.\n\n 1. 인터페이스, 기능을 고민하는데 걸리는 시간 절약\n    \n    1. MIT license [https://mui.com/x/introduction/licensing/] 이기 때문에 문제 없음\n\n 2. Flex 할 수 있는 날이 오면 @mui/x-data-grid-premium\n    [https://mui.com/x/api/data-grid/data-grid-premium/] 으로 넘어가고 product 개발에 집중\n\n\nDATAGRID PROPS\n\n@ceed/ui/DataGrid 의 props.\n\nprop\n\ntype\n\n설명\n\n제약사항\n\nrows\n\nRowModel[]\n\n\n\n\n\ncolumns\n\nGridColDef<RowModel>\n\n\n\n * Must be memoized\n\ngetRowId?\n\n(row: RowModel) => string\n\nRowModel의 고유값을 얻는 함수.\n\n * Must be memoized\n\n * default (row) => row.id\n\nheaderHeight?\n\nnumber\n\n\n\n * default 56\n\nrowHeight?\n\nnumber\n\n\n\n * default 52\n\ncheckboxSelection?\n\nboolean\n\ntrue 일 경우 1열에 체크박스가 표시된다.\n\n * default false\n\ndisableSelectionOnClick?\n\nboolean\n\ntrue 일 경우 row 클릭 시 체크가 되지 않는다.\n\n * default false\n\ninitialState?\n\n{\n  sorting?: {\n    sortModel: {\n      field: Keyof RowModel;\n      sort: \"desc\" | \"asc\" | null;\n    }[];\n  };\n  columns?: {\n    columnVisibilityModel: Record<string, boolean>;\n  };\n}\n\nDataGrid의 최초 상태를 정할 때 사용된다.\n\n\n\n\n\nonRowClick?\n\n(params: { rowId: string; row: RowModel }, event: React.MouseEvent) => void\n\n\n\n\n\nselectionModel?\n\n(keyof ID)[] // ID === string\n\nonSelectionModelChange와 함께 주입되면 controlled component로 사용할 수 있다.\n\n\n\nonSelectionModelChange?\n\n(selectionModel: ID[]) => void\n\nselectionModel과 함께 주입되면 controlled component로 사용할 수 있다.\n\n\n\ncolumnVisibilityModel?\n\nRecord<string, boolean>\n\n * column을 보이거나 숨길 때 사용한다.\n\n * false 일 때만 숨겨진다.\n\n\n\nonColumnVisibilityModelChange?\n\n(columnVisibilityModel: Record<string, boolean>): void\n\n * GridToolbar 등을 통해서 columnVisibilityModel 가 바뀌었을 때 변경된 값을 받을 콜백 함수.\n\n * columnVisibilityModel과 함께 주입되면 controlled component로 사용할 수 있다.\n\n\n\nloading?\n\nboolean\n\ntrue 일 경우 LoadingOverlay가 나타난다.\n\n\n\nComponents?\n\nRecord<Key, ComponentType>\n\ndefault로 설정된 컴포넌트를 override 할 때 주입한다.\n\nKey: Checkbox, ColumnSortedDescendingIcon, ColumnSortedAscendingIcon,\nColumnUnsortedIcon, ColumnResizeIcon, NoRowsOverlay, LoadingOverlay\n\n * Must be memoized\n\n * deprecated (use slots instead)\n\nslots?\n\nRecord<Key, ComponentType>\n\nKey: baseCheckbox, columnSortedDescendingIcon, columnSortedAscendingIcon,\ncolumnUnsortedIcon, columnResizeIcon, noRowsOverlay, loadingOverlay, toolbar\n\n * DataGrid 내에서 사용되는 컴포넌트를 Override하거나 주입할 때 사용한다.\n\n\n\nlocaleText?\n\n{\n  /**\n   * @default 'Columns'\n   */\n  toolbarColumns: React.ReactNode;\n  /**\n   * @default 'Select columns'\n   */\n  toolbarColumnsLabel: string;\n  /**\n   * @default 'Show/Hide All'\n   */\n  columnsManagementShowHideAllText: string;\n  /**\n   * @default 'Find column'\n   */\n  columnsManagementSearchTitle: string;\n}\n\n * DataGrid 내에서 표시될 텍스트들을 주입한다.\n\n * toolbarColumns: GridToolbarColumnsButton에 보일 텍스트\n\n * toolbarColumnsLabel: GridToolbarColumnsButton에 들어갈 aria-label\n\n * columnsManagementShowHideAllText: GridToolbarColumnsMenu에서 전체 토글에 들어갈 텍스트\n\n * columnsManagementSearchTitle: GridToolbarColumnsMenu에서 컬럼 검색에 들어가는\n   placeholder\n\n\n\n\nCOLUMNS는 반드시 MEMOIZED 되어야한다.\n\nDataGrid의 container size에 따라 column width를 계산하는 로직이 columns를 dependency 로 두고 있기\n때문에 memoized되어 있지 않으면 리렌더링 될 때마다 column width가 다시 계산되어 리사이징한 width가 초기화 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/%20withoutmemocolumns.gif?api=v2]\n\n이 외 props도 memoized 되어있거나 컴포넌트 밖에서 선언하여 렌더링마다 다른 값을 가지지 않게 하는 것이 좋다.\n\n예시\n\nhttps://github.com/Ecube-Labs/haulla-hauler-front/pull/512\n[https://github.com/Ecube-Labs/haulla-hauler-front/pull/512]\n\nconst dataGridColumns = useMemo<GridColDef<typeof rows[number]>[]>(() => {\n  return [\n    {\n      field: 'id',\n      headerName: 'Id',\n      minWidth: 40,\n      maxWidth: 40,\n      resizable: false,\n    },\n    {\n      field: 'address',\n      headerName: 'Address',\n      width: 150,\n      resizable: false,\n    },\n    ...\n  ];\n}, []);\n\n\nCHECKBOX COLUMN의 FIELD는 SELECTION 이다.\n\ncheckboxSelection === true일 경우 columns에 GRID_CHECKBOX_SELECTION_COL_DEF이 포함되는데 이\ncolumn의 field가 \"selection\"이기 때문에 주입할 columns의 field가 selection 이라면 다른 값으로\n변경해야한다.\n\n\nGRIDCOLDEF\n\nprop\n\ntype\n\n설명\n\n제약사항\n\nfield\n\nkeyof RowModel\n\nColumn identifier\n\nnested한 값의 경우 dot notation으로 사용하면 된다.\n\nex) field: 'compactorSetting.ledSetting'\n\n\n\nheaderName?\n\nstring\n\n없을 경우 field가 표시된다.\n\n\n\ndescription?\n\nstring\n\naria-label, tooltip에 영향을 줄 수 있다.\n\n\n\nwidth?\n\nnumber\n\nflex와 함께 동작하지 않는다.\n\ndefault 100\n\nminWidth?\n\nnumber\n\n\n\ndefault 50\n\nmaxWidth?\n\nnumber\n\n\n\ndefault Infinity\n\nflex?\n\nnumber\n\nwidth와 함께 동작하지 않는다.\n\n\n\nresizable?\n\nboolean\n\n\n\ndefault true\n\nsortable?\n\nboolean\n\n\n\ndefault true\n\nrenderCell?\n\n(parmas: {\n  id: string;\n  value: V;\n  row: RowModel;\n}) => React.ReactElement\n\n스타일을 적용하거나 valueFormatter로는 표현이 불가능한 요소를 렌더링 하기 위해 사용한다.\n\nTODO: ReactNode도 가능하다. null도 리턴가능함\n\ndefault\n\n(props) => <EllipsisCell>{props.value}</EllipsisCell>\n\nrenderHeader?\n\nTODO\n\ncolumn header에 렌더링 될 Element\n\n\n\nvalueFormatter?\n\n(parmas: {\n  id: string;\n  value: V;\n  row: RowModel;\n}) => any\n\n보여지는 값을 가공하기 위해 사용한다.\nex) 0.01 -> 1% , 123.22 -> $ 123.22\n\nTODO\n\nsortComparator?\n\n(\n  v1: V,\n  v2: V,\n  cellParams1: GridSortCellParams<V>,\n  cellParams2: GridSortCellParams<V>,\n) => number\n\n정렬 기준을 설정할 때 사용한다. (Boolean일 경우 정상적으로 정렬되지 않기 때문에 sortComparator를 통해 정렬해줘야 한다.)\n\n\n\n\nHEIGHT\n\nDataGrid의 경우 가상돔에서 랜더링 하기 때문에 table body에 height가 없으면 데이터가 랜더링 되지 않을 수 있다. 이런경우\nDataGrid에 minHeight를 주면 해결된다.\n\n<DataGrid\n  ...\n  css={[dataGridStyle1, { minHeight: '144px' }]} // minHeight로 조절한다.\n/>\n\n\nWITH PAGINATION\n\n페이지네이션을 적용해서 사용하는 경우 컬럼의 정렬 옵션을 끄고 사용하는것을 기본으로 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/2024-02-15%20at%2011.22.59@2x.png?api=v2]\n\n\nIN BACKOFFICE\n\n * 백오피스에서는 @ceed/ui/DataGrid에서 페이지네이션 되어있는 경우 모든 데이터 row를 선택하는 기능이 추가되어있다.\n   \n   * 페이지네이션이 되어있지 않다면 필요없는 기능이니 적용하지 않는다. (페이지네이션이 되어있지 않다면 그냥 바로 전체선택을 하면 되기\n     때문)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20230418-012654.png?api=v2]\n\n * Select all 12,88080 items 를 누르면 12808개 전부 선택이 된다.\n\n\nPROPS\n\nprop\n\ntype\n\n설명\n\n제약사항\n\ncomponents\n\nGuide?: JSXElementConstructor<HTMLAttributes<HTMLDivElement>>\n\n * 헤더, 바디 사이에 위치 시킬 컴포넌트\n\n\n\ncomponentsProps\n\nGuid?: HTMLAttributes<HTMLDivElement>\n\n * 위 Guide 컴포넌트에 대한 props\n\n * style:{ height }가 필수로 있어야한다.\n   \n   * 없는 경우에 공간확보가 되지 않아 데이터그리드 위에 떠있는 괴상한 UI가 나온다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20230418-015914.png?api=v2]\n     \n     \n\n\n예시코드)\n\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/screens/billing/invoices/InvoicesScreen.tsx#L321-L339\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/screens/billing/invoices/InvoicesScreen.tsx#L321-L339]\n\n(자세히 알고싶다면\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/components/SelectAllGuide/SelectAllGuide.tsx#L20\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/3b59f4240b97e89e8b416c376fde833dc2620ac8/src/app/components/SelectAllGuide/SelectAllGuide.tsx#L20]\n코드도 참고할 것)\n\nfunction InvoiceScreen(){\n  // prop destruction\n  // lib, style hooks\n  // state hooks\n  ...\n  const [selectedInvoiceIds, setSelectedInvoiceIds] = useState<string[]>([])\n  const [dataGridGuide, setDataGridGuide] = useState<{ isDisplating: boolean; selected: boolean }>({\n    isDisplaying: false, // 가이드를 보여줄 것인지\n    selected: false, // 가이드 내에서 전체선택을 클릭했을 경우 true\n  })\n  ...\n  \n  // effects\n  useEffect(() => {\n    if (invoices) {\n      setDataGridGuide({\n        selected: false,\n        isDisplaying: false,\n      });\n      setSelectedInvoiceIds([]);\n    }\n  }, [invoices]); //refetch 되었을 시에 초기화\n  ...\n  \n  // handlers\n  ...\n  const handleSelectionModelChange = (ids: string[]) => {\n    const isSelectedAllInvoices: boolean = (() => {\n      if (!ids.length) {\n        return false;\n      }\n\n      const selectionModelMap = ids.reduce((map, id) => {\n        map[id] = true;\n        return map;\n      }, {} as Record<string, true>);\n\n      return invoices!.items.every((row) => selectionModelMap[row.id]);\n    })();\n    setSelectedInvoiceIds(ids);\n    setDataGridGuide({\n      selected: false,\n      isDisplaying: isSelectedAllInvoices,\n  }\n  \n  return (\n    ...\n    \n    <Stack flex={1}>\n        <DataGrid\n          ...\n          checkboxSelection\n          disableSelectionOnClick\n          selectionModel={selectedInvoiceIds}\n          getRowId={(row) => String(row.invoiceId)} // 만약 row에 id라는 property가 없다면 selectionModel에서 id를 가져올 수 없기 때문에 getRowId로 설정해주어야한다.\n          onSelectionModelChange={handleSelectionModelChange}\n          components={{\n            Guide: dataGridGuide.isDisplaying\n              ? () => (\n                  <SelectAllGuide\n                    selected={dataGridGuide.selected}\n                    countRow={invoices!.count}\n                    countRowPerPage={invoices!.items.length}\n                    onClick={() => setDataGridGuide({ ...dataGridGuide, selected: !dataGridGuide.selected })}\n                  />\n                )\n              : undefined,\n          }}\n          componentsProps={{\n            Guide: {\n              style: {\n                height: '48px',\n              },\n            },\n          }}\n        />\n        <Pagination\n          ...\n        />\n      </Stack>\n    </Stack>\n  )\n}\n\n\n\n\nIN DASH-BOARD\n\n * Dashboard에서는 백오피스와 같이 페이지네이션 되어있는 경우 모든 데이터 row를 선택하는 기능이 추가되어있다.\n\n * csv 파일을 파싱해서 DataGrid로 만들어주는 CsvDataGrid 가 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2476638313/image-20230418-050854.png?api=v2]\n\n\nPROPS\n\nprop\n\ntype\n\n설명\n\n제약사항\n\ncsvFile\n\nFile\n\n * Csv 파일\n\n\n\noptions\n\nheaders: string[]\n\n * header 이름\n\ncsv 파일과 똑같은 header를 입력해야한다.\n\ndescriptions\n\nstring[]\n\n * 데이터그리드 아래 들어갈 설명\n\n\n\nonLoadCsvFile\n\n(rawData: string) => void;\n\n * Csv 파일이 선택되었을 경우 동작하는 함수\n\n\n\nrenderUploadButton\n\n(rows: { [key: string]: string }[] | undefined) => ReactNode;\n\n * 업로드 버튼 랜더링\n\n\n\n\n예시코드)\n\nhttps://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/screens/docusigns/upload/UploadDocusignsScreen.tsx#L176\n[https://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/screens/docusigns/upload/UploadDocusignsScreen.tsx#L176]\n\n(자세히 알고싶다면\nhttps://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/components/DataGrid/CSVDataGrid/CSVDataGrid.tsx#L40\n[https://github.com/Ecube-Labs/haulla-customer-tycoon-front/blob/06cba5713a770d49a2495b89471ee8e134b07efd/src/app/components/DataGrid/CSVDataGrid/CSVDataGrid.tsx#L40]\n코드도 참고할 것)\n\nfunction UploadDocusignsScreen(){\n  ...\n  // state, ref hooks\n  const [files, setFiles] = useState<File[]>([]);\n  const [selectedItem, setSelectedItem] = useState<{ file: File; rawData?: string }>(); // 파일 이름으로 식별한다. 중복이름은 import 금지.\n  ...\n  \n  return (\n    <CSVDataGrid\n      csvFile={selectedItem.file}\n      options={{\n        headers: [\n          'Subject',\n          'Status',\n          'Sender Name',\n          'Recipient Name',\n          'Sent On (Date)',\n          'Sent On (Time)',\n          'Last Activity (Date)',\n          'Last Activity (Time)',\n          'Completed On (Date)',\n          'Completed On (Time)',\n          'Completion Time (DD:HH:MM)',\n          'Signer List',\n          'Envelope ID',\n        ],\n      }}\n      descriptions={[\n        '1. 이미 업로드된 docusign은 제외됩니다.',\n        '2. Signer List에 haulla.com 이메일이 포함된 docusign만 업로드됩니다.',\n      ]}\n      onLoadCsvFile={(rawData) => setSelectedItem((item) => ({ ...item!, rawData }))}\n      renderUploadButton={(rows) => (\n        <Button\n          disabled={!rows?.length}\n          loading={isUploading}\n          css={{ width: '100%', height: '150px', fontSize: '28px', fontWeight: 'bold' }}\n          variant=\"contained\"\n          onClick={handleUpload}\n        >\n          <Stack direction=\"row\" spacing=\"8px\" alignItems=\"center\">\n            {`Upload ${rows?.length || 0} docusigns`}\n            <FileUploadIcon css={{ width: '40px', height: '40px', color: 'color' }} />\n          </Stack>\n        </Button>\n      )}\n    />\n  )\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2476638313"
  },
  {
    "pageContent": "[F] Modal\n\n모달은 어플리케이션과의 상호작용을 차단하고 모달과 상호작용 할 수 있도록 돕는 모든 요소를 모달이라 부를 수 있다.\n\n일반적으로 사용자의 흐름을 차단하고 값을 입력받기 위해 사용하는 Dialog 또한 모달의 일종이므로 헷갈리면 안된다.\n\nhttps://mui.com/components/modal/ [https://mui.com/components/modal/]\n\nhttps://mui.com/components/dialogs/ [https://mui.com/components/dialogs/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2235596803"
  },
  {
    "pageContent": "[F] Charts\n\nhttps://github.com/airbnb/visx [https://github.com/airbnb/visx] 를 이용해 필요한 차트를\n개발한다.\n\nWhy? https://ecubelabs.atlassian.net/browse/CCNB-6072?focusedCommentId=68471\n[https://ecubelabs.atlassian.net/browse/CCNB-6072?focusedCommentId=68471]\n\n * 우리의 요구사항을 다 수용할 수 있으면서 d3보다는 리액트 친화스럽고 개발 자유도가 높은 라이브러리.\n   \n   * 다른 라이브러리들은 훨씬 리액트 친화스러워도 자유도가 매우 낮다. 이런 라이브러리들은 개발된 기능 내에서만 사용이 가능.\n   \n   * visx는 지원하지 않는 기능이면 직접 구현하거나 d3를 갖다 써도 되지만 대부분 지원한다.\n\n * 에어비앤비가 개발을 주도하고 있으며 2021. 8. 20. 시점에서도 꾸준히 유지보수되고 있다.\n\n * 다양한 이용 사례가 있다.\n\n * mock data를 지원해준다.\n\n\nFOR BEGINNERS…\n\n * visx는 svg element 하위에 렌더링되는것을 가정하여 동작한다.\n   \n   * 때문에 반드시 <svg>{visx Components}</svg> 의 양식으로 구현되어 있어야 한다.\n\n * visx는 d3를 비교적 사용하기 쉽게 래핑했기 때문에 d3의 자료도 많이 찾아봐야 한다.\n   \n   * 각종 유틸 함수들을 d3의 모듈을 사용하는게 많다…\n\n * TODO\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109374569"
  },
  {
    "pageContent": "[F] SVG 다루는 방식\n\n\n\n * 1. file-loader\n   * 장점\n   * 단점\n   * 예시\n * 2. webpack/svgr\n   * 장점\n   * 단점\n   * 예시\n * 3. @mui/material SvgIcon\n   * 장점\n   * 단점\n   * 예시\n\n\n1. FILE-LOADER\n\n\n장점\n\n?\n\n\n단점\n\n?\n\n\n예시\n\n * haulla-official\n   [https://github.com/Ecube-Labs/haulla-official/blob/main/src/app/screens/refer-business/ReferBusinessScreen.tsx#L28]\n\n\n2. WEBPACK/SVGR [https://www.npmjs.com/package/@svgr/webpack]\n\n> SVG and transforms it into a React component.\n\n\n장점\n\n1. 리액트 컴포넌트 다루듯이 사용할 수 있다.\n\nimport A from '@assets/images/a.svg';\n\nfunction XXX() {\n  return <A css={css({ width: 20, height: 27, color: ? })} />\n} \n\n\n\n단점\n\n?\n\n\n예시\n\n * haulla-hauler-front 시설 마커\n   [https://github.com/Ecube-Labs/haulla-hauler-front/blob/a8f99bdcb0c0b5971143ce11223e6ed7058e779a/src/app/components/FacilityMarker/index.tsx#L3]\n\n\n3. @MUI/MATERIAL SVGICON [https://mui.com/material-ui/api/svg-icon/]\n\n\n장점\n\n?\n\n\n단점\n\n?\n\n\n예시\n\n * haulla-official\n   [https://github.com/Ecube-Labs/haulla-official/blob/02e6641a59918be3b40b7a17e4b3f53671017544/src/app/components/DropdownMenu/DropdownMenu.tsx#L2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390130691"
  },
  {
    "pageContent": "Layout Component Concept\n\n작업 생산성 향상 및 통일감있는 화면 개발을 위해 전체적인 크기나 위치를 지정해둔 레이아웃 컴포넌트를 이용한다.\n\n\nPRESENTATION TOOLS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.11.18@2x.png?api=v2]\n\n\nGRID LAYOUT\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.25.10@2x.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.25.40@2x.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2911961505/2024-02-20%20at%2011.25.50@2x.png?api=v2]\n\n\nREF.\n\n * https://joy-treasury.dev/?path=/story/layout-dashboard-curve--curve\n   [https://joy-treasury.dev/?path=/story/layout-dashboard-curve--curve]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2911961505"
  },
  {
    "pageContent": "[F] Date 관리\n * Date 저장\n\n\nDATE 저장\n\nDate 는 항상 ISO format string 형태로 저장한다. (UTC+0)\n\n * 2019-11-26T06:18:32.233Z (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n * 2019-11-26T06:18:32.233Z+09:00 (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n절대로 Date 객체로 저장하지 않는다.\n\n * 서버에서 받은 데이터를 클라이언트에서 임의로 변경해서 가지고 않기 위해서.\n   \n   * 서버에서 받은 데이터를 클라이언트에서 임의로 변경하면 서버가 값을 잘못 준 건지 클라이언트가 값을 잘못 변경한 건지 디버깅이 힘들다.\n\n * Date string 을 Date 객체로 인스턴스화 하는 것을 데이터 변경으로 봐야 할지는 논란의 여지가 있지만 일단 Date 는\n   string 으로 저장 한다.\n\n// SomeComponent.tsx\nhandleSomething() {\n  this.setState({ now: new Date() })               // Bad\n  this.setState({ now: new Date().toISOString() }) // Good\n}\n\n// some-reducer.ts\ncase 'SOME_ACTION_FULFILLED':\n  return {\n    ...state,\n    now: new Date(), // Bad\n    now: new Date().toISOString(), // Good\n  }",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/236159132"
  },
  {
    "pageContent": "[F] react-hook-form\n * 등록\n   * number 타입은 valueAsNumber 설정해준다.\n * 검증\n   * 정적인 validation schema 는 컴포넌트 외부에 작성한다.\n * 제출\n   * isSubmitting === true 인 경우 버튼을 비활성화한다.\n   * 변경 사항 없거나 검증에 실패한 경우, 버튼을 비활성화한다.\n * 참고\n\n\n등록\n\n\nNUMBER 타입은 VALUEASNUMBER [https://react-hook-form.com/kr/api/] 설정해준다.\n\n<CurrencyTextField\n  ...\n  {...register('amount', { valueAsNumber: true })}\n  defaultValue={getValues('amount')}\n/>\n\n설정하지 않으면 string 타입을 반환하고, 이에 따라 isDirty는 항상 true가 된다. (10 !== ‘10’)\n\n\n검증\n\n\n정적인 VALIDATION SCHEMA 는 컴포넌트 외부에 작성한다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nfunction SomeComponent {\n  const validationSchema = yup.object({\n    name: yup.string().required()\n  })\n}\n\n\nvalidationSchema 객체는 컴포넌트가 렌더링 될 때마다 다시 생성되는데 정적인 스키마는 컴포넌트 렌더링과 관계없이 항상 같은\n형태이므로 매번 새로 생성할 필요가 없다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nconst validationSchema = yup.object({\n  name: yup.string().required()\n})\n\nfunction SomeComponent {\n  const {\n    ...\n  } = useForm({\n    ...\n    resolver: yupResolver(validationSchema),\n  });\n}\n \n\n\n제출\n\n\nISSUBMITTING === TRUE 인 경우 버튼을 비활성화한다.\n\nconst {\n  formState: { isSubmitting },\n  handleSubmit,\n  ... \n} = useForm({...});\n\n\n<Button\n  ...\n  loading={isSubmitting}\n  onClick={handleSubmit(async ({ name }) => {\n      await submit({\n        variables: {\n          name,\n        },\n      });\n  })}\n/>\n\n\n변경 사항 없거나 검증에 실패한 경우, 버튼을 비활성화한다.\n\nconst {\n  formState: { isDirty, isValid },\n  ... \n} = useForm({...});\n\n<Button\n  ...\n  disabled={!isDirty || !isValid}\n/>\n\n\n참고\n\nMUI + react-hook-form\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2386526223/F+react-hook-form]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2414706698"
  },
  {
    "pageContent": "(deprecated) [F] Formik 사용 가이드\n\n2022.05.17 기준 Formik 은 validation library 로 yup 만 지원해서 react-hook-form 으로 모두 교체할\n예정\n\n\n\n * 정적인 validation schema 는 컴포넌트 외부에 작성한다.\n\n\n정적인 VALIDATION SCHEMA 는 컴포넌트 외부에 작성한다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nfunction SomeComponent {\n  const validationSchema = yup.object({\n    name: yup.string().required()\n  })\n}\n\nvalidationSchema 객체는 컴포넌트가 렌더링 될 때마다 다시 생성되는데 정적인 스키마는 컴포넌트 렌더링과 관계없이 항상 같은\n형태이므로 매번 새로 생성할 필요가 없다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nconst validationSchema = yup.object({\n  name: yup.string().required()\n})\nfunction SomeComponent {\n  useFormik({ validationSchema, ... })\n}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1884520455"
  },
  {
    "pageContent": "[RN] 스크롤뷰에서 버튼 아래로 밀기\n\n<ScrollView>\n  <View>\n    // content goes here\n  </View>\n  <Button>BUTTON</Button>\n</ScrollView>\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1144161094/image-20201228-093500.png?api=v2]\n\n\n\n<ScrollView contentContainerStyle={{ flexGrow: 1, justifyContent: 'space-between' }}>\n  <View>\n    // content goes here\n  </View>\n  <Button>BUTTON</Button>\n</ScrollView>\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1144161094/image-20201228-093555.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1144161094"
  },
  {
    "pageContent": "[F][퍼블리싱] 최적화\n\nhttps://roadmap.sh/best-practices/frontend-performance\n[https://roadmap.sh/best-practices/frontend-performance]\n\n\nTOOLS\n\n\nLIGHTHOUSE\n\n * 크롬 개발자도구에 내장된 성능 측정 도구\n\n * 시크릿 모드 창에서 측정해야 외부 영향(devtool과 같은 크롬 확장 프로그램)을 받지 않을 수 있다.\n   \n   * devtool의 경우 불필요한 리소스를 집어넣어 성능 측정에 적지 않은 영향을 미친다.\n\n * 성능 점수가 측정하는 도구의 성능에 약간의 영향을 미치는것으로 보인다.\n\n아래 사진은 동일한 페이지를 같은 시간에 다른 기기로 측정한 결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2413035521/image-20220510-013505.png?api=v2]\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2413035521/image-20220510-013520.png?api=v2]\n\n\n\n\nPAGE SPEED\n\nhttps://pagespeed.web.dev/ [https://pagespeed.web.dev/]\n\n * lighthouse 기반의 성능 측정 도구\n   \n   * 그런데 항상 로컬에서 lighthouse만 돌린것보다 점수가 낮게 나온다.\n\n--------------------------------------------------------------------------------\n\n\nMETRICS\n\n\nFCP\n\nhttps://web.dev/i18n/ko/fcp/ [https://web.dev/i18n/ko/fcp/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2413035521/image-20220510-013742.png?api=v2]\n\n * 화면에 처음 렌더링 되기 시작한 시간에 대한 지표\n\n * 웹 폰트도 크게 영향을 미칠 수 있으므로 최적화 해야한다.\n   \n   * 웹 폰트를 사용할 때 설정에 따라 웹 폰트를 불러오는 동안 폰트가 표시되지 않을 수 있다.\n     (fallback font가 표시되는것과 다르게 아무것도 표시되지 않다가 폰트가 보이는것이 FCP에 영향을 미침)\n   \n   * https://stackoverflow.com/questions/19922285/web-font-flickering-on-load\n     [https://stackoverflow.com/questions/19922285/web-font-flickering-on-load]\n\n\nLCP\n\nhttps://web.dev/i18n/ko/optimize-lcp/ [https://web.dev/i18n/ko/optimize-lcp/]\n\n * FCP 이후부터 측정된다.\n\n * 화면에서 가장 큰 이미지나 텍스트가 렌더링 되는 시간에 대해 측정하는 지표\n\n * 화면이 처음 보여질 때 노출될 가능성이 높은 리소스는 preload를 하는것이 FCP, LCP에 도움이 된다. (큰 비중을 차지하는\n   컨텐츠일수록 LCP에 영향이 크다)\n   \n   * preload를 걸면 화면을 띄우기 전에 리소스를 먼저 받아오기 때문에 리소스가 로딩과 함께 표시될 수 있는것이다.\n   \n   * 아무거나 preload 걸면 안된다. 초기 로딩에 더 많은 시간을 쓰게되어 FCP 외에 다양한 지표에 영향을 끼칠수 있다.\n\n\nTTI\n\nhttps://web.dev/i18n/ko/tti/ [https://web.dev/i18n/ko/tti/]\n\n * 페이지가 띄워지고 실행되는 스크립트가 적을수록 TTI가 낮을 가능성이 높다.\n\n * 페이지에 로드되는 스크립트가 많다고 무조건 TTI가 높은것은 아니지만 로드된 스크립트가 아무 일도 하지 않을 경우에만 TTI에 영향이 적게\n   끼친다.\n   \n   * Code splitting, Lazy loading(dynamic import), Partial hydration이 도움이 된다.\n\n\nCLS\n\nhttps://web.dev/i18n/ko/cls/ [https://web.dev/i18n/ko/cls/]\n\n * 화면에 그려지는 요소는 width, height, aspect-ratio 같은 속성을 이용해 요소 크기에 대한 힌트를 줘야 한다.\n\n * 그렇지 않으면 각 요소들이 렌더링 되면서 블록처럼 차곡차곡 쌓여가며 보여지므로 사용자 경험에 저하 요소가 된다.\n\n\n\nTODO\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2413035521"
  },
  {
    "pageContent": "[F][Material-UI v4] CSS 렌더링 성능 최적화\n\nMUI v5에서 사용되는 CSS-in-JS 라이브러리(emotion)는 동작 방식이 다르기 때문에 해당 문서의 최적화 규칙이 의미가 없습니다.\n\n이 문서에서는 SSR을 사용하지 않으면서 SPA인 환경을 기준으로 설명하기 때문에 전통적인 HTML 렌더링 성능에 대해 깊게 다루지 않습니다.\n\n전통적인 방식의 렌더링 성능에 대해 궁금하면\nhttps://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=ko\n[https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=ko]\n를 참고하세요.\n\n\n최적화를 위한 규칙\n\n\n가능한 MAKESTYLES, WITHSTYLES를 사용하세요.\n\n두 함수는 JSS를 기반으로 만들어졌기 때문에 캐싱 등 여러 기능을 가지고 있어 비교적 우월한 성능을 자랑합니다.\n\nhttps://cssinjs.org/performance/?v=v10.6.0\n[https://cssinjs.org/performance/?v=v10.6.0]\n\n\nWITHSTYLES보다는 MAKESTYLES를 사용하세요.\n\n환경에 따라 편차가 있지만 makeStyles가 withStyles보다 약 30%정도 빠르다고 보고된 내용이 있습니다.\n\nhttps://github.com/mui-org/material-ui/issues/10778#issuecomment-472840548\n[https://github.com/mui-org/material-ui/issues/10778#issuecomment-472840548]\n\n\n인라인 스타일을 쓰지 마세요.\n\n인라인 스타일을 사용하는 경우 동일한 컴포넌트를 렌더링 할 때 makeStyles, withStyles를 사용하는것보다 훨씬 느립니다.\n이에 대한 내용은 JSS에서 다시 언급됩니다. https://cssinjs.org/performance/?v=v10.6.0\n[https://cssinjs.org/performance/?v=v10.6.0]\n\n게다가, JSS를 통해 이미 생성된 CSSOM은 캐싱이 되어있기 때문에 SPA에서는 새 페이지로 이동해도 CSSOM을 그대로 사용할 수\n있습니다.\n레거시 환경에서 페이지를 이동시킨다면 페이지도 새로 로딩되어야 해서 CSSOM가 다시 생성되기 때문에 JSS를 사용한 SPA는 이 부분에서\n이점으로 작용합니다.\n\n\n가변적인 스타일도 가능하면 MAKESTYLES로 구현하세요.\n\n필요한 CSS만 바꾸기 때문에 CSSOM도 필요한 부분만 재생성되어 렌더링 성능에서 이득을 볼 수 있습니다.\n\n--------------------------------------------------------------------------------\n\n\n🧐 조금 더 알아보기\n\n\n사전 지식\n\n * CSSOM [https://developer.mozilla.org/ko/docs/Web/API/CSS_Object_Model]\n\n * 브라우저의 객체 모델 생성 (DOM, CSSOM)\n   [https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko]\n\n * CSS in JS [https://d0gf00t.tistory.com/22]\n\n\nCSS 제어 방법?\n\n브라우저에서 CSS를 제어하기 위해서는 몇 가지의 방법이 있고, 이 방법들에 대한 장단점을 간단히 나열해보겠습니다.\n\n 1. CSSOM을 제어하는 방법\n    \n    1. 장점: 순수하게 JS로 element의 스타일을 제어할 수 있다.\n    \n    2. 단점: DOM 트리와 CSSOM 트리가 모두 생성된 뒤에야 CSSOM에 접근해 제어가 가능하므로 초기 렌더링 성능에 문제가 있다.\n\n 2. CSS를 문서에 직접 로드한 뒤 element에 classname을 지정하는 방법\n    \n    1. 장점: SASS와 같은 전처리기를 사용할 수 있으며, JS 코드가 필요 없다. 이미 선언된 스타일을 재사용할 수 있다.\n    \n    2. 단점: 개발자가 classname을 모두 알지 않으면 CSS in JS를 이용하는것보다 유지보수가 귀찮고,\n       전처리기나 webpack같은 모듈러를 이용하지 않으면 css를 컴포넌트마다 모듈화 하여 관리하기 어렵다.\n\n 3. CSS in JS 기술을 이용하는 방법 (더 많은 장단점?\n    [https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/])\n    \n    1. 장점: 1번과는 다르게 DOM의 생성여부와는 관계 없이 미리 계산해두고 캐싱해둔 뒤 나중에 적용할 수 있으며,\n       CSS를 JS로 관리하기 때문에 비교적 모듈화가 쉽다.\n       성능에 신경을 많이 쓴 라이브러리들이 많다.\n       2번 방법을 일부 채용했으므로 장점도 일부 취할수 있다.\n    \n    2. 단점: JS가 다 로딩된 뒤 런타임에서 CSS를 만들어내야 하는 문제가 있어 1번처럼 초기 렌더링 성능에 문제가 있다.\n       CSS만 안다고 되는게 아니고 CSS in JS라는게 뭔지도 알아야 한다. (러닝커브 상승)\n\n여기서 과거에 종종 사용하던 1번 방법인 CSSOM을 직접 제어하는 기법은 대체로 3번의 장점으로 커버가 가능하고, 단점도 비슷하므로 이젠 굳이\n사용할 필요가 없어보입니다.\n어차피 대부분의 SSR을 사용하지 않는 SPA 환경에서는 CSS 파일을 html에 링크하는게 아닐테니, 초기 로딩시 CSSOM 트리는 생성되지\n않습니다.\n\n\n당연히 CSS IN JS(EX. JSS)보다는 순수한 CSS가 더 빠릅니다.\n\nSSR을 사용하는 등 여러 경우에, 초기 렌더링에서 더 커다란 성능 개선을 원한다면 CSS 파일을 html에서 바로 로딩될 수 있도록\n구성하세요.\n\n이 경우 맨 처음 링크를 건 렌더링 성능 분석 문서에 의존하여 성능을 개선하길 바랍니다.\n\n이 외에도 여러 리소스에 의해 렌더링이 블락되는 경우가 많지만 여기선 다루지 않습니다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712881854"
  },
  {
    "pageContent": "[F] 반응형 디자인\n * Grid 를 사용한다.\n   * Breakpoints\n   * Container\n   * Item\n   * Nested Grid\n * 반응형 디자인 in Ecube Labs\n * 참고\n\n\nGRID 를 사용한다.\n\n * 예제 [https://material-ui.com/components/grid/]\n\n * API [https://material-ui.com/api/grid/]\n\n\nBREAKPOINTS [https://material-ui.com/customization/breakpoints/#breakpoints]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/image-20210623-011631.png?api=v2]\n\n\nCONTAINER\n\n * flex container\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1346043934/OJT%2BFE%2BFlexbox%2BLayout]\n   의 역할을 한다. container 가 item 들을 감싸는 식으로 사용한다.\n\n\nITEM\n\n * flex item 의 역할을 한다.\n\n * Breakpoints 에 따라 하나의 row(혹은 column)에 사용할 grid의 개수를 정의할 수 있다.\n\n * grid는 기본적으로 12개로 나뉜다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/image-20210618-060125.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/image-20210623-011954.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.44.00.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.45.07.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.45.42.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1935409153/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.46.48.png?api=v2]\n\n\nNESTED GRID\n\n * container와 item 속성을 함께 사용하면 container 이면서 item 으로도 사용할 수 있다.\n\n\n반응형 디자인 IN ECUBE LABS\n\n화면 크기가 변함에 따라 디자인이 변경 되는 진짜 반응형 디자인은 필요 없고 PC/모바일 두 번 퍼블리싱 할 필요가 없도록 생산성을 높이는 데만\n사용한다.\n\ni.e. PC/모바일 두가지 경우만 대응 되면 된다.\n\nconst isMobile = useMediaQuery(theme.breakpoints.down('sm')); // 태블릿은 don't care\n\n\n참고\n\n * iOS Resolution [https://ios-resolution.com/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1935409153"
  },
  {
    "pageContent": "MUI v5 Styling guide\n * emotion 설정 확인\n   * /tsconfig.json\n   * Storybook 설정\n * @mui/styles 를 import하지 않는다.\n * inline-style 대신 css를 사용한다.\n * Box component는 사용하지 않는다.\n * flex 스타일은 Stack 컴포넌트로 대체한다.\n * 반복되지 않는 스타일은 sx보다 css를 사용한다.\n * MUI classname은 MUI의 *Classes 객체를 참조한다.\n   * 이전 (v4):\n     * Case 1\n     * Case 2\n   * 현재 (v5):\n * Unstyled component 사용을 고려한다.\n * 조건부 스타일 적용\n   * Pattern 1: styled + classname\n   * Pattern 2: styled / css\n * styleOverrides만으로 구현이 가능한지 검토한다.\n * Theme 생성시 Theme 객체 참조가 필요한 경우\n * Palette 타입 확장\n * ‘px’ 단위는 생략하지 않는다.\n\nJSS(MUI v4 기본 스타일 엔진) → Emotion(MUI v5 기본 스타일 엔진)에 대한 가이드\n\nhttps://github.com/mui-org/material-ui/issues/22342\n[https://github.com/mui-org/material-ui/issues/22342]\n\n--------------------------------------------------------------------------------\n\n\nEMOTION 설정 확인\n\n아래 가이드를 따라 emotion 이슈를 예방한다.\n\n\n/TSCONFIG.JSON [https://emotion.sh/docs/typescript#emotionreact]\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/e51745972f7cbdc291b28fdbb85b7862db7107ad/tsconfig.json#L18-L19\n[https://github.com/Ecube-Labs/ccnx-front/blob/e51745972f7cbdc291b28fdbb85b7862db7107ad/tsconfig.json#L18-L19]\n\n위 링크를 참고하여 아래와 같은 형태로 설정되어 있어야 css 함수를 사용할 수 있다.\n\n{\n  \"extends\": \"@ecubelabs/tsconfig/react.json\",\n  \"compilerOptions\": {\n    ...\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"@emotion/react\"\n  },\n  ...\n}\n\n\n\nSTORYBOOK 설정\n\n[F][스토리북] 설정 가이드\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302214188]\n\n위 페이지를 참고하여 스토리북 설정에 문제가 없는지 우선적으로 확인한다.\n\n\n@MUI/STYLES 를 IMPORT하지 않는다.\n\nv4에 있던 기능을 유지하기 위한 기능들을 제공하지만 우리는 사용하지 않고 모두 v5에 맞게 마이그레이션 하는것을 기본으로 한다.\n\n당연히 createStyles, makeStyles, withStyles 등의 기존 JSS 기반 스타일 관련 함수도 포함된다.\n\n\nINLINE-STYLE 대신 CSS를 사용한다.\n\ninline style과 달리 rtl plugin의 혜택을 받을 수 있으므로 inline-style이 필요한 상황에는 무조건 css 함수를\n사용하는것을 규칙으로 한다.\n\ncss prop를 이용해 스타일을 주입하려면 반드시 Emotion JSX Pragma를 사용해야 한다.\n[OJT][FE] JSX (React/Emotion)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2320171030]\n\n\nBOX COMPONENT는 사용하지 않는다.\n\nBox 컴포넌트에서 지원되는 다양한 유틸리티 함수를 쓰는것보다는 styled로 감싸거나 css로 인라인 스타일처럼 넣는게 성능이 더 낫다고\n한다. (Box가 문젠지 sx가 문젠지 모르겠지만 둘 다 별로니까 사용하지 않는다.)\nhttps://mui.com/system/basics/#performance-tradeoff\n[https://mui.com/system/basics/#performance-tradeoff]\n\nBox 컴포넌트는 전부 div로 대체한다.\n\n\nFLEX 스타일은 STACK 컴포넌트로 대체한다.\n\nStack은 가로 또는 세로로 쌓이는 UI에 사용한다.\nGrid는 반응형 UI를 구현할 때 외에는 사용하지 않는다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nBad\n\n<Container css={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nGood\n\n<Stack component={Container} direction=\"column\" alignItems=\"center\">\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/bd79ec8830be320428294bef29f04fcf7b60afc8/src/app/screens/support/SupportScreen.tsx#L142\n[https://github.com/Ecube-Labs/ccnx-front/blob/bd79ec8830be320428294bef29f04fcf7b60afc8/src/app/screens/support/SupportScreen.tsx#L142]\n\n\n반복되지 않는 스타일은 SX보다 CSS를 사용한다.\n\n * sx보다 뛰어난 성능을 지닌다고 한다. (Box가 문젠지 sx가 문젠지 모르겠지만 둘 다 별로니까 사용하지 않는다.)\n   https://mui.com/system/basics/#performance-tradeoff\n   [https://mui.com/system/basics/#performance-tradeoff]\n\n * shorthand 기능으로 인해 오히려 코드를 읽는것에 불편함이 생긴다.\n   전부 다 sx로 만드는게 아니면 값이 뭘 뜻하는지 고민해야 한다.\n   \n   * sx에서의 marginLeft: 1 → marginLeft: theme.spacing(1)\n   \n   * css에서의 marginLeft: 1 → marginLeft: '1px'\n   \n   * jss(v4의 스타일 엔진)에서의 marginLeft: 1 → marginLeft: '1px'\n\n\nMUI CLASSNAME은 MUI의 *CLASSES 객체를 참조한다.\n\n\n이전 (V4):\n\n\nCASE 1\n\n{\n  color: 'black',\n  '&$selected': {\n    ...\n  },\n}\n\n\nCASE 2\n\nconst classes = useStyles();\n...\n<MuiComponent\n  classes={{\n    root: classes.defaultStyle,\n    selected: classes.selectedStyle,\n  }}\n/>\n\n\n현재 (V5):\n\nstyles, css 모두 적용 가능한 패턴\n\n{\n  color: 'black',\n  [`&.${pickersDayClasses.selected}`]: {\n    ...\n  }\n}\n\nhttps://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L56\n[https://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L56]\n\nhttps://mui.com/guides/understand-mui-packages/#design-system\n[https://mui.com/guides/understand-mui-packages/#design-system]\n\n\nUNSTYLED COMPONENT 사용을 고려한다.\n\nhttps://mui.com/customization/unstyled-components/\n[https://mui.com/customization/unstyled-components/]\n\n불필요한 기능이 훨씬 적고, 버전이 바뀌면서 생길 스타일 변화에도 영향을 덜 받을 수 있다.\n\n\n조건부 스타일 적용\n\n\nPATTERN 1: STYLED + CLASSNAME\n\n성능상의 이점으로 인해 MUI 코드에서 많이 사용되는 방식으로 보인다.\n\ncosnt Div = styled('div')((theme) => ({\n  backgroundColor: 'black',\n  \n  '&.condition1': {\n    backgroundColor: theme.palette.warning.main,\n  },\n  '&.condition2': {\n    backgroundColor: theme.palette.info.dark,\n  },\n  '&.condition1.condition2': {\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n...\n<Div className={mergeClasses({\n  condition1: !!condition1,\n  condition2: !!condition2,\n})}>\n...\n</Div>\n\n참고\n\n * https://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L54-L108\n   [https://github.com/Ecube-Labs/ceed-core/blob/c19c92991167b023b4220c98dcd130026df80091/packages/ui/src/DateRangePicker/DateRangePicker.tsx#L54-L108]\n\n * https://github.com/mui-org/material-ui/blob/dc3b69664f8c27acbac56e249e81ae8e761363ac/packages/mui-lab/src/PickersDay/PickersDay.tsx#L100-L200\n   [https://github.com/mui-org/material-ui/blob/dc3b69664f8c27acbac56e249e81ae8e761363ac/packages/mui-lab/src/PickersDay/PickersDay.tsx#L100-L200]\n\n\nPATTERN 2: STYLED / CSS\n\n구현 조건이 까다롭지 않다면 아래와 같은 형태로도 구현이 가능하다.\n\n사용되는 위치만 다를 뿐 styled, css 모두 sx 같은 인터페이스로 조건부 스타일링이 가능하다.\n\nconst PrettyBox = styled(Box)<{\n  type: 'primary' | 'sedondary';\n  selected?: boolean;\n}>(({ selected, type, theme }) => [\n  {\n    backgroundColor: 'black',\n  },\n  selected && {\n    borderBottomColor: theme.palette[type].main,\n  },\n]);\n\nimport { css } from '@emotion/react';\n\nconst PrettyBox2 = (props: {\n  type: 'primary' | 'sedondary';\n  selected?: boolean;\n} & BoxProps) => {\n  const { type, selected, ...ownerProps } = props;\n  \n  return <Box css={(theme) => css([\n    { backgroundColor: 'black' },\n    selected && { borderBottomColor: theme.palette[type].main },\n  ])} {...ownerProps} />\n}\n\n\nSTYLEOVERRIDES만으로 구현이 가능한지 검토한다.\n\nprops, style을 덮어 씌우기 위해 styled component 혹은 별도로 컴포넌트를 작성하기 전에 단순히 Theme option으로\n커스텀이 가능한지 검토해야 한다.\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L258-L285\n[https://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L258-L285]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2294841417/image-20211231-052359.png?api=v2]\n\n\nTHEME 생성시 THEME 객체 참조가 필요한 경우\n\n아래와 같은 패턴으로 기본 값으로 사용할 theme 객체를 먼저 생성한 뒤 참조한다.\n\n * https://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L20-L26\n   [https://github.com/Ecube-Labs/ccnx-front/blob/216f52380e0a0a4357723d16ebe3d306654b90ff/src/app/components/ThemeProvider/ThemeProvider.tsx#L20-L26]\n\n * https://mui.com/customization/theming/#createtheme-options-args-theme\n   [https://mui.com/customization/theming/#createtheme-options-args-theme]\n\nconst defaultTheme = createMuiTheme({\n  direction,\n  spacing,\n  palette,\n});\n\nreturn createMuiTheme({\n  direction,\n  spacing,\n  palette,\n  components: {\n    MuiChip: {\n      styleOverrides: {\n        root: {\n          borderRadius: theme.shape.borderRadius,\n        },\n      },\n    },\n  },\n});\n\n\nPALETTE 타입 확장\n\n기본적으로 emotion 또는 @mui/styles 에 구현된 Theme이 있으며, 이 타입을 참조하는 라이브러리와 충돌할 가능성이 높다.\n때문에 아래와 같이 각 라이브러리에 있는 Theme을 mui의 Theme으로 override한다.\n\n아래는 servicing, collection, event 라는 palette 속성을 추가하는 예시\n\ndeclare module '@mui/styles/defaultTheme' {\n  // NOTE: https://mui.com/guides/migration-v4/#types-property-quot-palette-quot-quot-spacing-quot-does-not-exist-on-type-defaulttheme\n  interface DefaultTheme extends MuiTheme {}\n}\n\ndeclare module '@emotion/react' {\n  interface Theme extends MuiTheme {}\n}\n\n// NOTE: custom palette\ndeclare module '@mui/material/styles' {\n  interface Palette {\n    servicing: Palette['primary'];\n    collection: Palette['primary'];\n    event: Palette['primary'];\n  }\n\n  interface PaletteOptions {\n    servicing: PaletteOptions['primary'];\n    collection: PaletteOptions['primary'];\n    event: PaletteOptions['primary'];\n  }\n}\n\n\n‘PX’ 단위는 생략하지 않는다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nGood\n\n<div css={{ width: '300px' }}>\n<StretchableComponent width=\"300px\" />\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nBad\n\n<div css={{ width: 300 }}>\n<StretchableComponent width={300} />\n<StretchableComponent width=\"300\" />\n\n * 관련 논의:\n   https://github.com/Ecube-Labs/ccnx-front/pull/211#discussion_r802529982\n   [https://github.com/Ecube-Labs/ccnx-front/pull/211#discussion_r802529982]\n\n * 컴포넌트가 수치를 입력받아야 하는 경우 가능한 아래와 같이 한다.\n   \n   * https://www.typescriptlang.org/play?#code/C4TwDgpgBA6glgE2ACygXigAwCQG8B2ArgLYBGEATgL5gAemA3AFBMDGA9vgM7BQDm7dggBcsRCnRQA5AEYATAGY6U5h268BQuaPhJUGHLgCcABhr1mbTjyikAhiLF7JsxSqvrbD7U4kZXChQQxO5qNvYICjri+tLKzEA\n     [https://www.typescriptlang.org/play?#code/C4TwDgpgBA6glgE2ACygXigAwCQG8B2ArgLYBGEATgL5gAemA3AFBMDGA9vgM7BQDm7dggBcsRCnRQA5AEYATAGY6U5h268BQuaPhJUGHLgCcABhr1mbTjyikAhiLF7JsxSqvrbD7U4kZXChQQxO5qNvYICjri+tLKzEA]\n   \n   * props: { width: `${number}px` }\n\n * 0은 px 생략해도 된다.\n   https://github.com/Ecube-Labs/haulla-back-office-front/pull/675#discussion_r829649334\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/675#discussion_r829649334]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2294841417"
  },
  {
    "pageContent": "[F] + react-hook-form\n\nMUI + react-hook-form 을 같이 사용할 때 가이드.\n\nreact-hook-form 자체에 대한 가이드는 [F] react-hook-form\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2414706698]\n\n * Initialize in uncontrolled way\n\n\nINITIALIZE IN UNCONTROLLED WAY\n\nreact-hook-form [https://react-hook-form.com/] 의 register 는 uncontrolled 방식으로\ninput 을 관리하기 위한 method 이다.\n\nMUI [https://mui.com/] 에서 uncontrolled 방식으로 input 을 사용하려면 defaultValue 를 사용해야\n하므로 react-hook-form 과 MUI 를 함께 사용할 때 uncontrolled 방식을 사용하고 싶다면 올바른 초기화 방법은 다음과\n같다.\n\nfunction ComponentA() {\n  const { register, getValues } = useForm({\n    defaultValues: {\n      name: 'Moongchi'\n    }\n  })\n  \n  return (\n    <TextField\n      {...register('name')}\n      defaultValue={getValues('name')}\n    />\n  )\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2386526223"
  },
  {
    "pageContent": "[F][MUI] @mui/icons-material\n\n\nICON MODULE\n\n@mui/icons-material [https://www.npmjs.com/package/@mui/icons-material] 은 우리가\n아이콘을 사용할 때 주로 사용하는 라이브러리이다.\n\nimage-20240108-054247.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-054247.png?api=v2]\n\n\n사용 시 주의점\n\n@mui/icons-material 을 사용할때는 번들사이즈때문에 통째로 가져오면 안되고 세분화하여 가져와야한다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n전체 import\n\nimport { SearchOutlined } from '@mui/icons-material';\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n부분 import\n\nimport SearchOutlined from '@mui/icons-material/SearchOutlined';\n\n\n\n * 전체 import 시\n\nimage-20240108-060011.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-060011.png?api=v2]\n\nimage-20240108-053615.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-053615.png?api=v2]\n\n * 부분 import 시\n\nimage-20240108-060118.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-060118.png?api=v2]image-20240108-060205.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2869297393/image-20240108-060205.png?api=v2]\n\n\n참고\n\n * 번들사이즈가 클 경우 chromatic 에 publish가 안되는 오류가 있을 수 있다. (물론 로딩도 오래걸리기때문에 성능적으로도 좋지\n   않다.)\n\nhttps://github.com/Ecube-Labs/haulla/pull/502#issuecomment-1859453005\n[https://github.com/Ecube-Labs/haulla/pull/502#issuecomment-1859453005]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2869297393"
  },
  {
    "pageContent": "[F][CEEDUI] Performance issues\n\n\n렌더링된 마커의 이미지에 따라 느릴 수 있음\n\n * svg를 이용하는 경우, svg를 복잡하지 않은 파일로 교체하여 성능이 개선되는지 확인\n\n * 혹은 png로 교체하여 성능이 개선되는지 확인\n\n\n마커가 메모이제이션 되었는지, 불필요한 렌더링을 하고 있는지 확인\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810937441"
  },
  {
    "pageContent": "[F][CEEDUI] Map\n\n\n특징\n\n * GoogleMap을 Best practices로 이용할 수 있게 추상화 해둔 구현체.\n\n * Map 컴포넌트는 독립적인 Context가 존재한다.\n\n * @ceed/ui 에서 제공하는 컴포넌트는 반드시 Map 의 children에 렌더링을 해야한다.\n\n\nUSAGE\n\n\nBASIC\n\nimport { Map } from '@ceed/ui/Map';\n\n<Map\n    loaderOptions={{\n      key: 'googlemapkey',\n      libraries: ['places', 'geometry', 'visualization'],\n    }}\n    mapOptions={{\n      defaultCenter: { lat: 37.631272, lng: 126.812099 },\n      defaultZoom: 12,\n      gestureHandling: 'greedy',\n      disableDoubleClickZoom: true,\n    }}\n>\n  // Marker, Polyline, ...\n</Map>\n\n\nWITH MAPAPI\n\nGoogle Map API를 사용하는 로직 중, 재사용성이 높은 코드는 별도 API로 추상화 하여 내보내며, 아래와 같이 이용할 수 있다.\n\n자세한 API 설명은 하단 참조.\n\nimport { Map, MapApi } from '@ceed/ui/Map';\n\nconst mapApiRef = React.useRef<MapApi>(null);\n\n// example\nReact.useEffect(() => {\n  mapApiRef.current?.panTo({ lat: 0, lng: 0 });\n  mapApiRef.current?.setZoom(2);\n}, []);\n\nreturn <Map ... ref={mapApiRef} />;\n\n\n\n\nAPI\n\nGoogle Map 불러오는 시간이 늦어져 실제 Google Map API 객체를 받아오지 못한 경우에 호출하면 API 객체를 받아온 이후\n호출되도록 되어있다.\n\n즉, 언제 호출하더라도 반드시 호출에 성공하도록 개발되어있다.\n타이밍은 보장하지 않는다.\n\n\nSETZOOM\n\n명시적으로 zoom level을 조정하고 싶은 경우 이용한다.\n\n\nGETZOOM\n\n현재 렌더링 되어있는 지도의 zoom level을 얻어온다.\n\n\nGETBOUNDS\n\n현재 렌더링 되어있는 지도의 bounds를 [westLng: number, southLat: number, eastLng: number,\nnorthLat: number] 형식으로 얻어온다.\n\n\nPANTO\n\n원하는 lat, lng 으로 지도의 pan 을 이동시킨다.\n\n\nFITBOUNDS\n\n{ lat, lng }[] 로 fitBounds를 한다.\n\nbounds 객체를 별도로 만들 필요 없도록 추상화 된 API다.\n\n\nGETCENTER\n\n현재 렌더링 되어있는 지도 중심의 lat, lng 를 얻어온다.\n\n\nSETMAPTYPE\n\n현재 렌더링 되어있는 지도의 그림 타입을 반환한다.\n\n아래의 형식중 하나의 값을 반환한다.\n'roadmap' | 'satellite' | 'hybrid' | 'terrain'\n\n\nISBOUNDCONTAINS\n\n인자로 전달한 좌표가 현재 렌더링 된 지도의 bounds에 포함되는지 확인한다.\n\nMapOverlayView 컴포넌트에서도 해당 API를 이용하여 지도 내의 표시 여부를 결정한다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810347530"
  },
  {
    "pageContent": "[F][CEEDUI] MapOverlayView\n\n성능 이슈가 있는 경우 [F][CEEDUI] Performance issues\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2810937441] 를 참고한다.\n\n\n특징\n\n * 클러스터나 마커와 같이 지도 내에 렌더링 할 컴포넌트가 있는 경우 사용된다.\n\n * 지도는 사소한 상호작용으로도 리렌더링이 많이 일어나는데, 불필요한 리렌더링을 최대한 줄이도록 추상화 한 컴포넌트.\n   \n   * GoogleMap의 이벤트 핸들러를 이용하여 필요한 경우에만 렌더링을 할 수 있도록 한다.\n   \n   * 이를 위해 내부적으로는 ref 에 HTMLElement를 넣어 렌더링하도록 개발되어 있다.\n\n * 반드시 Map 컴포넌트 하위에 렌더링되어야 한다.\n\n * 대량으로 렌더링 해야 하는 경우 반드시 컴포넌트 메모이제이션을 해야 성능 저하를 막을수 있다.\n   (Custom Marker 예시 참고)\n\n\nUSAGE\n\n\nBASIC\n\n<Map ...>\n  <MapOverlayView\n    lat={position.lat}\n    lng={position.lng}\n  >\n    <span onClick={onMarkerClick}>\n      예쁜 이미지\n    </span>\n  </MapOverlayView>\n</Map>\n\n\nCUSTOM MARKER\n\n * 메모이제이션은 props로 넘어오는 값 중 이벤트 핸들러를 제외하고 모두 비교한다.\n   \n   * 마커를 렌더링 할 때 이벤트 핸들러는 일반적으로 onClick={() => ...} 처럼 개발하기 때문에 항상 새 레퍼런스로 넘어와서\n     비교해도 의미가 없다.\n   \n   * CCN의 트래커처럼 마커의 좌표가 실시간으로 바뀌는 경우가 아니라면 lat, lng도 비교하지 않아도 된다.\n\nfunction Marker(props: {\n  latitude: number;\n  longitude: number;\n  selected: boolean;\n  className?: string;\n}) {\n  const { latitude, longitude, selected, className } = props;\n\n  return (\n    <MapOverlayView\n      position=\"center\"\n      className={className}\n      lat={item.latitude}\n      lng={item.longitude}\n      ...\n    >\n      이쁜 이미지\n    </MapOverlayView>\n  );\n}\n\nconst CustomMarker = React.memo(Marker, (prev, next) => {\n  return (\n    prev.latitude === next.latitude &&\n    prev.longitude === next.longitude &&\n    prev.selected === next.selected &&\n    prev.className === next.className\n  );\n});\nCustomMarker.displayName = 'CustomMarker';\n\nexport { CustomMarker };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811035693"
  },
  {
    "pageContent": "[F][CEEDUI] NativeMarker\n\n\n특징\n\n * CCN에서 Marker를 드래그해서 옮기는 기능과 같이 GoogleMap이 제공하는 기능을 통해 마커를 직접 다뤄야 하는 경우 이용하기\n   위한 컴포넌트.\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/2811265039/2023-10-06%2015.02.00.gif?api=v2]\n\n * 단순히 지도 위에 원하는것을 그려주는 MapOverlayView 와 비교했을때 성능 차이는 별로 없지만,\n   NativeMarker는 GoogleMap의 Marker 객체를 직접 다뤄야 하므로 추상화의 한계가 있기 때문에 반드시 필요한게 아니라면\n   MapOverlayView 이용을 권장한다.\n\n\nUSAGE\n\nGoogle Map 문서에서 지원하는 기능은 모두 가능하므로 참고할것.\n\n아래는 단순하게 사용할 때의 방법만 예시로 작성.\n\n\nBASIC\n\nconst markerRef = React.useRef<google.maps.Marker>(null);\n\nreturn (\n  <Map ...>\n    <NativeMarker\n      position={{\n        lat: clients[0].latitude,\n        lng: clients[0].longitude\n      }}\n      ref={markerRef}\n    />\n  </Map>\n);\n\n\nCUSTOM ICON\n\nconst markerRef = React.useRef<google.maps.Marker>(null);\n\nuseEffect(() => {\n  markerRef.current.setIcon('url...');\n  markerRef.current.setZIndex(selected ? 1 : 0);\n  markerRef.current.setTitle(`${markerName}_${id}`);\n}, [id, markerName, selected]);\n\nreturn (\n  <Map ...>\n    <NativeMarker\n      position={{\n        lat: clients[0].latitude,\n        lng: clients[0].longitude\n      }}\n      ref={markerRef}\n    />\n  </Map>\n);\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265039"
  },
  {
    "pageContent": "[F][CEEDUI] MapClusters\n\n\n특징\n\n * MapOverlayView와 supercluster [https://www.npmjs.com/package/supercluster] 를\n   기반으로 클러스터를 쉽게 개발할 수 있도록 추상화 한 컴포넌트.\n   \n   * supercluster를 전적으로 믿고 개발된것이므로 성능이 뛰어난 원리는 물어도 모릅니다.\n     궁금하면 찾아보고 남겨주세요\n\n\nUSAGE\n\n\nBASIC\n\n<Map ...>\n  <MapClusters\n    clusterOptions={{ radius: 200, maxZoom: 16 }}\n    items={clients}\n    getPoint={(client) => ({ id: client.id, lat: client.latitude, lng: client.longitude })}\n    Component={CustomCluster}\n    componentProps={{ onClick: handleClusterClick }}\n  />\n</Map>\n\n/////////////////////////////////////////////////////////////\n// CustomCluster Example\nfunction CustomCluster(props: { clusterId: number; items: ClientModel[]; onClick: (props: any) => void }) {\n  return (\n    <div onClick={() => props.onClick(props.items)}>\n      <div>{props.clusterId}</div>\n      cluster count: {props.items.length}\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811265057"
  },
  {
    "pageContent": "[F][CEEDUI] MapSearchBox\n\n\n특징\n\n * 구글이 제공하는 SearchBox API를 이용한 커스텀 SearchBox를 쉽게 개발할 수 있게 추상화 한 컴포넌트\n\n * 구글이 제공하는 Native SearchBox와 거의 동일하며, 자동완성 목록의 커스터마이징은 지원하지 않는다.\n\n\nUSAGE\n\n\nBASIC\n\n<Map {...args}>\n  <MapSearchBox\n    css={{ position: 'absolute', top: '10px', left: '10px' }}\n    onChange={...}\n    onPlaceChange={...}\n    Component={React.forwardRef(({ onChange }, ref) => {\n      return (\n        <TextField\n          css={{\n            position: 'absolute',\n            top: 0,\n            backgroundColor: '#f3f4f6',\n            fontSize: '12px',\n            color: '#6b778c',\n            margin: 0,\n          }}\n          variant=\"filled\"\n          onChange={onChange}\n          label=\"Enter Address\"\n          inputRef={ref}\n        />\n      );\n    })}\n  />\n</Map>\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811134023"
  },
  {
    "pageContent": "[F][CEEDUI] Polyline & HeatmapLayer\n\n\n특징\n\n * GoogleMap의 Polyline, HeatmapLayer 를 쉽게 다룰수 있게 추상화 한 컴포넌트.\n\n * HeatmapLayer를 이용하기 위해서는 지도 props loaderOptions.libraries에 visualization 을\n   추가해야한다.\n\n\nUSAGE\n\n\nPOLYLINE\n\n<Map ...>\n  <Polyline\n    coordinates={[{ lat, lng }, { lat, lng }]}\n    strokeColor=\"#607d8b\"\n    strokeOpacity={0.9}\n    strokeWeight={7}\n    icons={[\n      {\n        icon: {\n          path: 'M -3 0 L 0 -6 L 3 0 L 2 0 L 0 -4 L -2 0 z', // svg\n          strokeOpacity: 1,\n          strokeColor: 'white',\n          fillColor: 'white',\n          fillOpacity: 1,\n          scale: 0.6,\n        },\n        offset: '0',\n        repeat: '10px',\n      },\n    ]}\n  />\n</Map>\n\n\nHEATMAPLAYER\n\n<Map ...>\n  <HeatmapLayer data={[{ location, weight }, { location, weight }, ...]} radius={40} opacity={0.75} />\n</Map>\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2811199594"
  },
  {
    "pageContent": "[F] Dialog\n * Dialog?\n * 기본 구조\n   * Submit 버튼\n * Open and Close\n   * disableBackdropClick\n * Event handlers\n   * Close handler (required)\n   * Submit handler (required unless filter like dialogs)\n   * TODO 필터 다이얼로그는 어떻게 필터값을 넘겨줄까\n   * Error handler (never)\n   * With Datagrid\n\n\nDIALOG?\n\n팝업의 형태로 컨텐츠를 제공하는 컴포넌트를 다이얼로그(dialog) 라 한다.\n\n다이얼로그는 크게 두가지로 구분된다.\n\n 1. 리소스 조작을 위한 다이얼로그\n    ex) 사용자 계정 등록 다이얼로그\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/1773076779/image-20210508-035514.png?api=v2]\n\n 2. 필터 다이얼로그\n    ex) 제품 필터 다이얼로그\n    \n    [https://ecubelabs.atlassian.net/wiki/download/attachments/1773076779/image-20210508-035554.png?api=v2]\n\n\n기본 구조\n\n<Dialog open={open}>\n  <DialogTitle>\n    프로젝트 내에서 모든 Dialog의 제목은 스타일이 같은 게 자연스럽다.\n    그래서 title에 style을 주는 게 아니라 theme으로 적용하는 게 좋다.\n  </DialogTitle>\n  <DialogContent>\n    <tag css={css({ width: '708px' })}>\n      Theme에서 content의 width=100%로 설정하고 content 내부 element에 width를 주면 된다.\n    </tag>  \n  </DialogContent>\n  <DialogActions>\n    <Button>Cancel/Action도 마찬가지로 모든 Dialog의 스타일이 같은게 자연스럽다.</Button>\n    <Button>Save/Theme을 활용하면 된다</Button>\n  </DialogActions>\n</Dialog>\n\n\nSUBMIT 버튼\n\n사용자의 입력을 반영하기 위해 사용되는 버튼을 submit 버튼이라 부른다.\n\n버튼의 텍스트를 꼭 “Submit” 으로 할 필요는 없다.\n\n\nOPEN AND CLOSE\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nDialog 단독 컴포넌트를 만들때는 다음과 같이 하도록 한다.\n\nimport { useState } from 'react'\n\nfunction SomeComponent() {\n  const [open, setOpen] = useState()\n  \n  return (\n    <>\n      {open && <SomeDialog />}\n    </>\n  )\n}\n\nimport { useState } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\n\nfunction SomeDialog() {\n  const [state, setState] = useState()\n\n  return (\n    <Dialog open={true} />\n  )\n}\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nMaterial-UI 공식 문서의 예제 코드 [https://material-ui.com/components/dialogs/#dialog]\n\nimport { useState } from 'react'\n\nfunction SomeComponent() {\n  const [open, setOpen] = useState()\n  \n  return (\n    <>\n      <SomeDialog open={open} />\n    </>\n  )\n}\n\nimport { useState } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\n\nfunction SomeDialog({ open }) {\n  const [state, setState] = useState()\n\n  return (\n    <Dialog open={open} />\n  )\n}\n\nMaterial-UI 공식 문서의 예제 코드는 두가지 문제가 있다.\n\n 1. 사용자가 다이얼로그를 열지 않아도 다이얼로그가 mount 되면서 다이얼로그에 작성한 코드가 실행된다.\n\n 2. 사용자가 다이얼로그를 닫아도 unmount 되지 않기 때문에 state 가 그대로 남아있다. → 다이얼로그 닫을 때 초기화 필요\n\n그래서 Material-UI 예제 코드와 같은 규칙이 아닌 이큐브랩 자체 규칙으로 다이얼로그 open and close 를 작성하도록 한다.\n\nDialog 단독 컴포넌트가 아닌 경우 위의 설명은 유효하지 않으므로 Material-UI 스타일로 작성해도 무방하다.\n\nhttps://github.com/Ecube-Labs/haulla-back-office-front/blob/6e366784a78848cb5cd567b2b6de5173c483aedf/src/app/components/EditGeneratorAccountHaulerButton/index.tsx#L15\n[https://github.com/Ecube-Labs/haulla-back-office-front/blob/6e366784a78848cb5cd567b2b6de5173c483aedf/src/app/components/EditGeneratorAccountHaulerButton/index.tsx#L15]\n\n\nDISABLEBACKDROPCLICK\n\n특별한 이유가 없다면 disableBackdropClick prop 을 설정해서 백그라운드를 클릭했을 때 다이얼로그가 닫히지 않도록 한다.\n\ndisableBackdropClick prop은 deprecate 되었고, onClose의 두번째 인자인 reason 이용해 구현하면 된다고\n함.\n참고: https://github.com/Ecube-Labs/ccnx-front/pull/333#issuecomment-1501483257\n[https://github.com/Ecube-Labs/ccnx-front/pull/333#issuecomment-1501483257]\n\n\nEVENT HANDLERS\n\n\nCLOSE HANDLER (REQUIRED)\n\n사용자가 단순히 다이얼로그를 닫은 경우에만 close handler 가 동작해야 하고 () => void 로 정의한다.\n\nconst [open, setOpen] = useState(false)\n\nreturn (\n  <>\n    {open && <SomeDialog onClose={() => setOpen(false)} />}\n  </>\n)\n\n\nSUBMIT HANDLER (REQUIRED UNLESS FILTER LIKE DIALOGS)\n\n리소스를 조작하는 다이얼로그의 경우 리소스 조작이 완료된 경우에만 submit handler 가 동작해야 하고 () => void 로 정의한다.\n\nfunction Products() {\n  const { data: products, refetch } = useQuery(query)\n  \n  return (\n    <>\n      {products.map(product => (\n        <Product key={product.id} product={product} />\n      ))}\n      <RegisterProduct onSubmit={() => refetch()} />\n    </>\n  )\n}\n\nfunction RegisterProduct({ onSubmit }) {\n  const [registerProduct, { loading }] = useMutation(mutation)\n  \n  const handleSubmit = async () => {\n    await registerProduct()\n    onSubmit()\n  }\n  \n  return (\n    <Dialog open>\n      {loading && <ProgressBar />}\n      <Button>Cancel</Button>\n      <Button onClick={handleSubmit}>Ok</Button>\n    </Dialog>\n  )\n}\n\n리소스 조작 및 리소스를 조작하는 동안 프로그레스 표시는 다이얼로그 안에서 처리가 완료 되어야한다.\n\nsubmit handler 는 다이얼로그를 사용하는 컴포넌트가 다이얼로그 안에서 리소스 조작이 완료된 후 후속 작업 (위의 예시에서는 제품 등록\n후 제품 재조회) 을 할때만 사용해야한다.\n\n * 잠재적인 double progress 문제\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/507#discussion_r620959867]가\n   있긴한데 어쩔 수 없다.\n\n\nTODO 필터 다이얼로그는 어떻게 필터값을 넘겨줄까\n\n\nERROR HANDLER (NEVER)\n\n에러 핸들러는 정의하지 않는다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\n<SomeDialog\n  onError={(error) => { /* do something... */}}\n/>\n\n에러는 항상 다이얼로그 안에서 처리할 수 있다.\n\n\n\n\nWITH DATAGRID\n\n * data grid안에서 다이얼로그를 사용할때는 키보드 이벤트에 버블링이 일어나기 때문에 유의하여 개발하여야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1773076779/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202023-10-17%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.06.24.mov?api=v2]\n\n> 데이터그리드에서 스페이스바를 누를때와 데이터그리드 안에있는 다이얼로그에서 스페이스바를 누를때 이벤트 버블링때문에 체크 선택/해제가 일어나는\n> 모습\n\nPortal로 열리는 Dialog는 DataGrid Row의 바깥에 DOM이 존재하지만,\n실제 DOM의 구조와 관계 없이 리액트의 Portal API로 렌더링 했다면 Virtual DOM 상 Dialog의 부모인 DataGrid의\nRow에 이벤트 버블링이 발생하는것이 정상이기 때문에 이와 같은 조치를 취하는것이 최선이다.\nhttps://legacy.reactjs.org/docs/portals.html\n[https://legacy.reactjs.org/docs/portals.html]\n\n * 간단하게 안에서 사용하는 dialog에 onKeyDown={(e) => e.stopPropagation()}를 적용하면 된다\n   \n   * <Dialog open onKeyDown={(e) => e.stopPropagation()}>\n       ...\n     </Dialog>\n\n * DialogButton 컴포넌트가 있다면 아래와 같은 방식으로도 사용 가능하다\n   \n   * //DialogButton.tsx\n        ...\n        // handlers\n        const handleKeyDown = useCallback((e) => {\n         e.stopPropagation();\n        }, []);\n       \n        return (\n         <div\n           ...\n         >\n           {render({ onOpen: handleOpen })}\n           {open && children({ onClose: handleClose, onKeyDown: handleKeyDown })}\n         </div>\n       );\n     \n     // ServiceCoverageScreen.tsx\n     <DialogButton\n       render={({ onOpen }) => (\n         ...\n       )}\n     >\n       {({ onClose, onKeyDown }) => (\n         <EditServiceCoverageDialog\n           onClose={onClose}\n           onKeyDown={onKeyDown} // 데이터그리드가 아닌 다른곳에서도 사용가능 할 수 있으니 optional로 두는것이 좋다.\n           haulers={haulers!}\n           serviceCoverage={serviceCoverage}\n         />\n       )}\n     </DialogButton>",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1773076779"
  },
  {
    "pageContent": "[F] Chart vs Graph?\n\nhttps://www.wallstreetmojo.com/graphs-vs-charts/\n[https://www.wallstreetmojo.com/graphs-vs-charts/]\n\n * Chart: Graph를 포함한 다양한 형태로 정보를 나타낼 수 있다.\n\n * Graph: X, Y축에 플로팅해서 데이터셋을 표시하는데 사용되는 차트의 유형이다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2129133595"
  },
  {
    "pageContent": "[F][SVG] webpack/svgr\n\n> A complete tool box to take advantage of using SVGs in your React\n> applications.\n\n\n설정\n\nwebpack.config.js\n\n{\n  test: /\\.(svg)$/,\n  use: [{ loader: '@svgr/webpack', options: { dimensions: false }}],\n},\n\n\n사용 방법\n\nimport A from '@assets/images/a.svg';\n\nfunction XXX() {\n  return <A css={css({ width: 20, height: 27, color: ? })} />\n} \n\n\n\n이슈\n\n\n1. 색상 적용 안 되는 경우\n\n * 해결법: currentColor 적용\n\n * 예시\n   [https://github.com/Ecube-Labs/haulla-hauler-front/blob/a8f99bdcb0c0b5971143ce11223e6ed7058e779a/src/assets/images/facility-marker/garage.svg?short_path=692f7f5#L27]\n\n\n사용 예시\n\n * haulla-hauler-front 시설 마커\n   [https://github.com/Ecube-Labs/haulla-hauler-front/blob/a8f99bdcb0c0b5971143ce11223e6ed7058e779a/src/app/components/FacilityMarker/index.tsx#L3]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2389934095"
  },
  {
    "pageContent": "API 요청 규칙\n\n\n인증 정보 (AUTHORIZATION)\n\n\"Authorization\" 헤더에 API 서버에서 요구하는 토큰을 양식에 맞게 포함하여 보내는게 일반적입니다.\n\n현재 이큐브랩의 모든 API는 해당 헤더를 포함하여 인증을 하도록 약속했습니다.\n\n\n\n\n\n응답 메세지(RESPONSE BODY) 사용자화\n\n사용자가 사용하고 있는 환경에 알맞은 내용을 보여주기 위한 수단입니다.\n\n이를 위해 일반적으로 \"Accept-Language\" 헤더를 사용하기로 약속했으며, 내용에 포함하는 언어 규칙은 아래의 내용을 따릅니다.\n\n * ${ISO 639-1 (alpha-2)}\n * ${ISO 639-1 (alpha-2)}_${ISO 3166-1 (alpha-2 upper case)}\n\n두가지 경우가 있으며, en, ko, zh_CN 같은 경우가 해당됩니다.\n\n참고 https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#75-standard-request-headers\n[https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#75-standard-request-headers]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/120783458"
  },
  {
    "pageContent": "[F] useQuery, useLazyQuery, useMutation 사용 시 테스트\n\n\n개요\n\n이 글에서는 데이터 조회 및 변경\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1033437612/F]에서 소개 된 훅 함수를\n사용 시 테스트 코드를 작성하는 방법을 소개합니다.\n\n\n문제점\n\n만약 테스트 하고자 하는 컴포넌트에서 useQuery를 사용하여 loading, data, refetch와 같은 반환 값들을 사용하고 있다면,\n대부분 undefined 상태인 data 를 화면에 띄우지 않기 위해 관련 된 태그를 조건부 렌더링\n[https://reactjs-kr.firebaseapp.com/docs/conditional-rendering.html] 또는 옵셔널 체이닝\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining]을\n사용하게 됩니다.\n\n그러나 렌더링을 테스트하기 위해 테스트 코드를 실행할 경우, data의 기본 값이 undefined인 상태에서 렌더링 하므로 위에서 언급한\n방식이 적용 된 태그들은 렌더링되지 않거나 undefined인 경우에 해당하는 태그를 렌더링하게 됩니다.\n\n\n해결 방법\n\n아폴로에서 작성한 리액트 컴포넌트 테스팅\n[https://www.apollographql.com/docs/react/development-testing/testing/] 문서에서는\n자신들이 제공하는 MockedProvider 컴포넌트를 통해 테스트에서 실행되는 각 쿼리들에 대한 반환 값을 모킹할 수 있도록 편리한 컴포넌트를\n제공하고 있습니다.\n\n위 방식과 동일하게 구현하기 위해 useQuery 사용을 예로 들어 테스트 코드를 작성하는 방법을 구체적으로 소개합니다.\n\n 1. 테스트 코드에 모킹하고자 하는 훅 함수를 가져옵니다.\n    \n    import { useQuery } from ‘@ceed/core;’\n\n 2. useQuery를 제공하고 있는 모듈 @ceed/core를 모킹합니다.\n    \n    jest.mock('@ceed/core');\n\n 3. ts-jest [https://www.npmjs.com/package/ts-jest] 모듈에서 제공하는 mocked를 통해 가져온 함수를\n    모킹합니다.\n    \n    const mockedUseQuery = mocked(useQuery);\n\n 4. 모킹한 함수에서 mockReturnValue를 호출하여 반환 값을 모킹합니다.\n    \n    mockedUseQuery.mockReturnValue({ \n      loading: false,\n      data: { idx: 4831, … },\n      refetch: jest.fn(),\n    });\n    \n    \n\n이렇게 data만 모킹할 수 있을 뿐만 아니라 loading 또한 모킹이 가능하므로 더욱 다양한 테스트 작성이 가능합니다.\n\n실제 적용 예시를 확인하고 싶은 분들을 위해 참조 2번째 항목에 링크 걸어두었으니 참고하시면 많은 도움 됩니다.\n\n\n참조\n\n * https://www.apollographql.com/docs/react/development-testing/testing/\n   [https://www.apollographql.com/docs/react/development-testing/testing/]\n\n * https://github.com/Ecube-Labs/erp_main/pull/284/commits/653b3332d7f5e82e74fd4149f4bba1e687c06c08\n   [https://github.com/Ecube-Labs/erp_main/pull/284/commits/653b3332d7f5e82e74fd4149f4bba1e687c06c08]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1713012767"
  },
  {
    "pageContent": "Interaction Testing\n\n\n1. 스토리북으로 작성한다.\n\n[F][스토리북] 스토리 작성 규칙\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964]\n\n\n2. 반드시 사용자가 파악할 수 있는 조건을 통해 요소를 선택한다.\n\n웹 접근성(a11y) 개발 컨벤션\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2780135590] 를 준수하면 된다.\n\n파악할 수 있는 조건의 예시:\n\n * 텍스트 박스인지 아닌지\n\n * 버튼인지 아닌지\n\n * 눈으로 보이는 글자\n\n * …\n\n\n배경 코드\n\n<label for=\"user_id\">User ID</label>\n<input type=\"text\" id=\"user_id\" />\n\n\n❌ DON’T\n\nfindById(\"user_id\")\n\n\n✅ DO\n\nfindByRole('textbox', { name: \"User ID\" });\n\n\n3. TEST ID 는 사용하지 않는다.\n\n다양한 접근성 Attribute를 적절히 활용하면 Test Id가 필요한 상황은 거의 없다.\n\n\n❌ DON’T\n\n<button id=\"modal-open-button\">Open</button>\n<div data-testid=\"test-modal\">\n\t<h2>Modal Title</h2>\n</div>\n\nfindById(\"modal-open-button\").click()\nfindByTestId(\"test-modal\")\n\n\n✅ DO\n\n<button aria-haspopup=\"dialog\" aria-expanded=\"false\">Open</button>\n<div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"test-modal-title\">\n\t<h2 id=\"test-modal-title\">Modal Title</h2>\n</div>\n\nfindByRole(\"button\", { name: \"Open\", expanded: false }).click()\nfindByRole(\"dialog\", { name: \"Modal Title\" })\n\n\n4. 사용자의 입력 또는 이벤트 발생이 없는것은 검증하지 않는다.\n\n * 상호작용이 없는 것을 검증하면 화면의 모든것을 검증 할 수 밖에 없다.\n\n * 단위 테스트 또는 회귀 테스트로 충분히 검증할 수 있으므로 상호작용이 있는것만 검증한다.\n\n\n배경 코드\n\n{!isLoading && <DataGrid items={fetchedItems} />}\n\n\n❌ DON’T\n\nconst dataGrid = findByRole(\"grid\")\nexpect(within(dataGrid).findByRole(\"columnheader\", { name: \"Status\" })).toBeTruthy()\n\n\n✅ DO\n\nexpect(findByRole(\"button\", { name: \"CleanTRACK (150)\" })).toBeTruthy()\nsetFilter(...)\nexpect(findByRole(\"button\", { name: \"CleanTRACK (60)\" })).toBeTruthy()\n\n\n5. API 요청/응답 값은 절대 검증하지 않는다.\n\n * API Request/Response 데이터는 절대 검증하지 않는다.\n   \n   * 상세 스펙을 테스트 코드에 담으면 앱 자체를 검증하는게 아닌, 앱을 작성하는 방식을 테스트하는것이다.\n   \n   * https://mswjs.io/docs/recipes/request-assertions\n     [https://mswjs.io/docs/recipes/request-assertions]\n\n\n6. 이벤트 핸들러 검증은 ACTION ADDON을 이용한다. (LIKE JEST’S SPYON)\n\n스토리북이 제공하는 @storybook/addon-essentials 애드온을 이용하면 바로 사용할 수 있다.\n\n스토리북의 action-addon을 통해 주입되는 이벤트 핸들러는 jest의 spyOn 또는 mock 함수로 감싼것과 거의 동일하게 동작한다.\n\nhttps://github.com/Ecube-Labs/ecubelabs/blob/fe56c36cf39a101927eec51515dfbd6160597c8e/apps/ccnx-front/src/app/components/NotificationLogList/NotificationLogList.stories.tsx#L71\n[https://github.com/Ecube-Labs/ecubelabs/blob/fe56c36cf39a101927eec51515dfbd6160597c8e/apps/ccnx-front/src/app/components/NotificationLogList/NotificationLogList.stories.tsx#L71]\n\n\n7. TESTING-LIBRARY가 제공하는 SCREEN 은 CANVAS 바깥에 DOM이 존재하는 경우에만 사용한다.\n\n일반적으로 Portal 을 이용해 앱의 DOM 바깥에 존재하는 경우에 사용하고, 그 외에는 지양한다. screen을 사용하면 예상치 못한 요소를\n선택할 가능성이 높아진다.\n\n\n8. TESTING-LIBRARY의 FIND* / GET* / QUERY* 메서드는 목적에 맞게 사용해야 한다.\n\n * find*: async로 동작하며, 탐색에 실패해도 n 차례 재시도해서 다시 찾는다.\n   설정된 횟수(기본 3)만큼 시도했을때 찾지 못하면 에러를 던진다.\n   \n   * 테스트코드를 작성하며 기본적으로 사용하길 권장하는 메서드다.\n     실제로 브라우저에서 이루어지는 렌더링은 비동기이기 때문에 DOM이 확실히 존재하는 시점이 아니라면 이 메서드로 탐색해야 테스트를 비교적\n     일관적으로 성공할 수 있다.\n\n * get*: sync로 동작하며, 탐색에 실패하면 곧바로 에러를 던진다.\n   \n   * 이미 렌더링 된 DOM에 탐색해야 하는 DOM이 존재한다고 확신할 수 있는 경우에만 사용한다.\n   \n   * 찾는 DOM이 존재하지 않았을때 테스트가 실패해야 하는 경우 사용해야 한다.\n\n * query*: sync로 동작하며, 탐색에 실패하면 null을 반환한다.\n   \n   * 이미 렌더링 된 DOM에 탐색해야 하는 DOM이 존재한다고 확신할 수 있는 경우에만 사용한다.\n   \n   * 찾는 DOM이 존재하지 않아도 테스트가 실패하지 않아도 되는 경우 사용한다.\n     ex) n개의 role=row DOM중에 특정 값을 지닌 row만 찾아야 하는 경우.\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/2308440065/image-20230829-022450.png?api=v2]\n     \n     const manageModal = await screen.findByRole('presentation', { name: 'Manage Bin Profiles' });\n     \n     // NOTE: 셀에 특정 데이터가 있는 row의 DOM을 가져오기 위해 parentElement 같은 DOM API 대신 순수하게 testing-library API로만 탐색하기 위해 아래와 같이 작성한다.\n     // DOM API만 이용하면 DOM의 구조가 바뀌었을때 테스트가 깨지기 때문에 testing-library API를 사용한다.\n     const row = (await within(manageModal).findAllByRole('row')).find(\n       // NOTE: find* 는 비동기고, get*는 동기이지만 탐색에 실패한 경우 에러를 throw 하므로 동기이면서 탐색에 실패했을때 null을 리턴하는 query*를 사용한다.\n       (row) => !!within(row).queryByRole('gridcell', { name: '클린하우스' }),\n     )!;\n\n\n참조\n\n * https://testing-library.com/docs/queries/about/#priority\n   [https://testing-library.com/docs/queries/about/#priority]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2308440065"
  },
  {
    "pageContent": "[F][스토리북] 스토리 작성 규칙\n * CSF v3 사용\n * CSF v3 Properties\n   * component\n   * args\n   * argTypes\n   * parameters\n   * decorators\n * API Mocking\n   * [API Mocking] msw를 사용한다.\n   * [API Mocking] export default 에 있는 mocking만으로 컴포넌트 사용에 문제가 없도록 한다.\n   * [API Mocking] Error mocking은 msw handlers를 override한다.\n   * [API Mocking] msw handlers는 직접 참조한 컴포넌트만 상속받는다.\n * Data mocking\n   * [Data mocking] 직접 참조하지 않는다.\n   * [Data mocking] XXXrepository.mock 에는 모델 타입을 지정해준다.\n   * [Data mocking] 스토리 data.mock 에는 따로 타입을 지정하지 않는다.\n * Date Mocking\n * RTL 지원\n   * [RTL 지원] ex) src/app/components/ThemeProvider.tsx\n   * [RTL 지원] ex) .storybook/preview.tsx\n   * [RTL 지원] RTL 스토리 작성\n * 분자 단위 이상 컴포넌트\n * 화면 스토리\n\n\n\n\nCSF V3 사용\n\nStorybook v6에선 StoryObj 사용을 권장하며 Storybook v7에서는 기존의 방식은 완전 deprecated되므로 미리\n마이그레이션하는게 좋다.\n\ntype ArgTypes = ComponentProps<typeof MyComponent>;\n\nexport default {\n  title: 'components/MyComponent',\n  component: MyComponent,\n  decorators: [],\n  parameters: {},\n  argTypes: {},\n  args: {},\n} as Meta<ArgTypes>;\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L105-L156\n[https://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L105-L156]\n\n\nCSF V3 PROPERTIES\n\n\nCOMPONENT\n\n * 해당 스토리 파일의 모든 스토리에서 기본적으로 렌더링 할때 사용 할 컴포넌트를 넣는다.\n\n * 어떠한 조작 없이 component: MyComponent 처럼 넣는것이 모범 사례.\n\n\nARGS\n\n * component 에 주입한 컴포넌트가 렌더링 될 때 주입될 props와 동일하다.\n\n * export default 로 내보내는 값인 경우 반드시 컴포넌트가 잘 동작할 수 있는 값을 넣어주도록 한다.\n   \n   * 모든 컴포넌트가 해당 값을 병합해서 사용하기 때문에 잘못된 값을 넣는 스토리는 아래와 같이 별도의 값을 넣어 override 한다.\n     \n     export const FailureDisplay: StoryObj<ArgTypes> = {\n       args: {\n         value: Infinity,\n       },\n     };\n\n\nARGTYPES\n\n * 해당 필드를 통해 애드온의 기능을 제어한다.\n\n * 애드온마다 지원하는 인터페이스가 다르니 필요한 애드온의 문서를 찾아서 사용해야 한다.\n\n * ex) actions addon을 이용해 컴포넌트의 args에 이벤트 핸들러를 주입하려는 경우 아래와 같이 한다.\n   \n   * export const EventHandle: StoryObj<ArgTypes> = {\n       argTypes: {\n         onClick: { action: true }, // shortcut. key의 이름과 동일한 이벤트 이름으로 주입한다.\n         onChange: { action: 'event name' },\n       },\n     };\n   \n   * argTypes가 없다면 아래와 같이 해야 한다.\n     \n     import { action } from '@storybook/actions-addon';\n     export const EventHandle: StoryObj<ArgTypes> = {\n       args: {\n         onClick: action('onClick'), // 이벤트 핸들러를 만들어 args를 통해 컴포넌트에 주입한다.\n         onChange: action('onChange'),\n       },\n     };\n\n\nPARAMETERS\n\n * 애드온에 필요한 값(설정 등)을 제공한다.\n\n\nDECORATORS\n\n * 컴포넌트를 렌더링 하기 전에 Wrapping 되는 컴포넌트.\n\n * 미들웨어와 비슷하다고 이해하면 쉽다.\n\n * 컴포넌트가 의존하는 provider 를 주입해야 하거나 컴포넌트가 렌더링 될 캔버스의 크기를 직접 조절 할 때 자주 사용한다.\n\n\nAPI MOCKING\n\n\n[API MOCKING] MSW를 사용한다.\n\n * [OJT][SW] MSW (Mock service worker)\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2284388447]\n\n * https://storybook.js.org/addons/msw-storybook-addon\n   [https://storybook.js.org/addons/msw-storybook-addon]\n\n * msw의 데코레이터는 특별한 경우가 아니라면 무조건 마지막으로 넣는다.\n   \n   * 그렇지 않으면 서비스 워커가 initialize 되기 전에 API mocking에 의존하는 코드가 동작하면 문제가 발생한다.\n     https://github.com/Ecube-Labs/haulla-back-office-front/pull/788#issuecomment-1131406768\n     [https://github.com/Ecube-Labs/haulla-back-office-front/pull/788#issuecomment-1131406768]\n     → 2번 항목에 해당\n\n * 전역에서 사용되는 데코레이터가 API mock에 의존하는 경우 msw handler가 전역에서 처리될 수 있게 preview.tsx에\n   작성한다.\n\n\n[API MOCKING] EXPORT DEFAULT 에 있는 MOCKING만으로 컴포넌트 사용에 문제가 없도록 한다.\n\n * 컴포넌트에서 사용되는 API를 모두 export default 에 모킹한다.\n\n * export default에 모킹된 내용은 컴포넌트를 사용하기 위해 이상적인 동작을 할 수 있는것만 넣는다.\n   (== 테스트가 성공하기 위한 API의 응답 값으로 모킹)\n\n\n[API MOCKING] ERROR MOCKING은 MSW HANDLERS를 OVERRIDE한다.\n\nexport default 에 있는 모킹은 모두 성공하는 시나리오를 위하기 때문에 에러 시뮬레이션을 위해서는 아래처럼 한다.\n\nexport default {\n  parameters: {\n    msw: {\n      handlers: {\n        login: rest.post('~~/auth', (req, res, ctx) => res(ctx.status(201), ctx.json({ token: '🏰⚽️' }))), // 성공\n        otherMocking: rest.get('~~', (req, res, ctx) => res(ctx.json({ ... }))),\n      },\n    },\n  },\n} as Meta<ArgTypes>;\n\nexport const Default: StoryObj<ArgType> = {};\n\nexport const LoginFaile: StoryObj<ArgTypes> = {\n  parameters: {\n    msw: {\n      handlers: {\n        login: rest.post('~~/auth', (req, res, ctx) => res(ctx.status(401), ctx.json({ errorMessage: '🧶패' }))), // 실패\n      },\n    },\n  },\n};\n\n\n[API MOCKING] MSW HANDLERS는 직접 참조한 컴포넌트만 상속받는다.\n\n// Menu.tsx\nfunction Menu() {\n  return (\n    ...\n    <NotificationPopupButton />\n  );\n}\n\n// Menu.stories.tsx\nimport NotificationPopupButtonStories from '../NotificationPopupButton.stories';\n\nexport default {\n  parameters: {\n    msw: {\n      handlers: {\n        ...NotificationPopupButtonStories.parameters.msw.handlers,\n      },\n    },\n  },\n};\n\n// PrivateLayout.tsx\nfunction PrivateLayout() {\n  return (<div>\n    <Menu />\n    ...\n  </div>);\n}\n\n// PrivateLayout.stories.tsx\nimport MenuStories from '../Menu.stories';\n\nexport default {\n  parameters: {\n    msw: {\n      handlers: {\n        ...MenuStories.parameters.msw.handlers,\n      },\n    },\n  },\n};\n\n위와 같이 컴포넌트가 가진 의존 관계와 동일하게 유지한다.\n\n\nDATA MOCKING\n\n\n[DATA MOCKING] 직접 참조하지 않는다.\n\n * 관련 PR\n   https://github.com/Ecube-Labs/haulla-back-office-front/pull/837#discussion_r905724032\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/837#discussion_r905724032]\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/72/274c.png]\n\nimport { account } from 'app/repositories/account-repository.mock';\n\nexport default {\n  ...\n  args: { account },\n} as Meta<ArgTypes>;\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nimport { account } from './data.mock';\n\nexport default {\n  ...\n  args: { account },\n} as Meta<ArgTypes>;\n\n\n[DATA MOCKING] XXXREPOSITORY.MOCK 에는 모델 타입을 지정해준다.\n\n * 관련 논의\n   https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r913318511\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r913318511]\n\n * https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r914412966\n   [https://github.com/Ecube-Labs/haulla-back-office-front/pull/842#discussion_r914412966]\n\n// invoice-repository.mock.ts\n\nimport { InvoiceModel } from '@models';\n\nexport const invoices: InvoiceModel[] = [\n  {\n    id: '220000203-2205',\n    ...\n  },\n  ...\n]\n\n\n[DATA MOCKING] 스토리 DATA.MOCK 에는 따로 타입을 지정하지 않는다.\n\n// screens/invoices/data.mock.ts\nimport { invoices } from '../../repositories/invoice-repository.mock';\n\nexport { invoiceDetail } from '../../respositories/invoice-repository.mock';\n\nexport const invoicesData = {\n  count: 512,\n  items: invoices,\n};\n\n\nDATE MOCKING\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2049703964/image-20220526-092530.png?api=v2]\n\n비고정 Date 표시하는 컴포넌트는 날짜가 바뀔 때마다 스냅샷이 변경된다. (2022-05-26 → 2022-05-27)\n\n코드 변경이 없는데 changes 잡히는 건 매우 이상함으로 Date를 모킹해준다.\n\n예시\n\n * https://github.com/Ecube-Labs/haulla-back-office-front/commit/3dbda8543fcfc11d2e8bb1d6e8fe2e906d73512b\n   [https://github.com/Ecube-Labs/haulla-back-office-front/commit/3dbda8543fcfc11d2e8bb1d6e8fe2e906d73512b]\n\n * https://github.com/Ecube-Labs/ceed/blob/main/packages/ui/src/PeriodPicker/PeriodPicker.stories.tsx#L12\n   [https://github.com/Ecube-Labs/ceed/blob/main/packages/ui/src/PeriodPicker/PeriodPicker.stories.tsx#L12]\n\n\nRTL 지원\n\n\n[RTL 지원] EX) SRC/APP/COMPONENTS/THEMEPROVIDER.TSX\n\nfunction ThemeProvider({ children }: { children: ReactNode }) {\n  const dir = useDir();\n  const theme = createAppTheme({ direction: dir });\n  const cachedPlugins = useMemo(\n    () =>\n      createCache({\n        key: `mui${theme.direction}`, // key가 바뀌지 않으면 컴포넌트가 다시 마운트 되기 전까지 ltr 스타일이 유지되어버린다.\n        stylisPlugins: theme.direction === 'rtl' ? [rtlPlugin] : [],\n        prepend: true,\n      }),\n    [theme.direction],\n  );\n\n  return (\n    <StyledEngineProvider injectFirst>\n      <CacheProvider value={cachedPlugins}>\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          {children}\n        </MuiThemeProvider>\n      </CacheProvider>\n    </StyledEngineProvider>\n  );\n}\n\nexport { ThemeProvider };\n\n\n[RTL 지원] EX) .STORYBOOK/PREVIEW.TSX\n\nimport { ThemeProvider } from '../src/app/components';\n\nexport const decorators = [\n  (story, { globals }) => {\n    const theme = createAppTheme({ direction: globals.direction });\n    return (\n      <I18nProvider key={globals.locale || 'en'} language={globals.locale || 'en'}>\n        <ThemeProvider>\n          <Router>{story()}</Router>\n        </ThemeProvider>\n      </I18nProvider>\n    );\n  },\n];\n\n\n데코레이터의 context로 주입되는 globals.locale 는\nhttps://storybook.js.org/addons/@ecubelabs/storybook-addon-intl\n[https://storybook.js.org/addons/@ecubelabs/storybook-addon-intl] 를 이용해 주입받는 값으로\n가정한다.\n\n\n[RTL 지원] RTL 스토리 작성\n\nhttps://storybook.js.org/addons/@ecubelabs/storybook-addon-intl/\n[https://storybook.js.org/addons/@ecubelabs/storybook-addon-intl/] 를 사용했다면 상단\n툴바에서 locale을 변경하여 direction이 바뀌는것을 시뮬레이션 할 수 있다.\n일반적인 스토리를 작성하고 나서 아래처럼 direction이 바뀔 수 있는 locale 값으로 파라메터를 넣어준다.\n\n히브리어, 아랍어만 direction을 ‘rtl’ 로 주입한다. 이 외의 언어에서도 rtl을 주입하고 싶다면 애드온의\ndirectionResolver 를 사용하면 된다.\n\nexport const Default: StoryObj<ArgTypes> = {};\n\nexport const RtlDefault: StoryObj<ArgTypes> = {\n  parameters: {\n    intl: { locale: 'he' },\n  },\n};\n\n\n\n\n분자 단위 이상 컴포넌트\n\n구분 없이 모두 작성한다.\n\n원자 단위 컴포넌트에서 mocking된 내용은 반복하여 작성하지 않고 반드시 상속받아 사용한다.\n\nhttps://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L22-L34\n[https://github.com/Ecube-Labs/ccnx-front/blob/db0c17b10f2ad57e1a735036a8f2945756d89d0d/src/app/screens/tracker/TrackerScreen.stories.tsx#L22-L34]\n\n\n화면 스토리\n\nsrc/screens 에 존재하는 layout은 반드시 fullscreen으로 사용한다.\n\ncentered 를 기본 값으로 사용한다.\n\nexport default {\n  title: 'screens/LoginScreen',\n  component: LoginScreen,\n  parameters: {\n    layout: 'fullscreen',\n  },\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2049703964"
  },
  {
    "pageContent": "[F][스토리북] 설정 가이드\n\n\nESLINT-PLUGIN-STORYBOOK 사용\n\nhttps://github.com/storybookjs/eslint-plugin-storybook#readme\n[https://github.com/storybookjs/eslint-plugin-storybook#readme]\n\n스토리 작성시 deprecated 된 문법이나 함수 사용을 막아주고 interaction test code 작성시 도움을 준다.\n\n\nMUI 5의 EMOTION과의 호환성 문제 해결\n\nhttps://github.com/storybookjs/storybook/blob/next/MIGRATION.md#emotion11-quasi-compatibility\n[https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#emotion11-quasi-compatibility]\n\nStorybook에서 사용하는 emotion은 10이지만 MUI에서 사용하는 emotion은 11이라 MUI+Storybook 조합을 사용하는\n경우 문제가 된다.\n\n.storybook/main.js 에 아래 내용을 추가해서 돌아가게 만들어야 한다.\n\nmodule.exports = {\n  features: {\n    emotionAlias: false,\n  },\n};\n\n\n@TESTING-LIBRARY/JEST-DOM 타입 확장\n\nv7에서는 기본적으로 포함될 수 있다. 정식 릴리즈 이후 확인 필요.\n\nhttps://www.npmjs.com/package/@types/testing-library__jest-dom\n[https://www.npmjs.com/package/@types/testing-library__jest-dom] 를 설치하고 아래와 같은\n타입 파일을 만들면 된다.\n\nimport type { TestingLibraryMatchers } from '@testing-library/jest-dom/matchers';\n\n// FIXME: storybook 7.0으로 업그레이드하면 제거\ndeclare module 'expect/build/types' {\n  export interface Matchers<R = void, T = {}> extends TestingLibraryMatchers<typeof expect.stringContaining, R> {}\n}\n\nhttps://github.com/Ecube-Labs/ccnx-front/pull/250#discussion_r926245115\n[https://github.com/Ecube-Labs/ccnx-front/pull/250#discussion_r926245115]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302214188"
  },
  {
    "pageContent": "Chromatic\n\nhttps://www.chromatic.com/ [https://www.chromatic.com/start] 에 GitHub로 한번 로그인하면\n사용 가능하다.\n\n크로매틱은 시각 테스트를 자동화해주는 도구이다.\n덤으로 스토리북도 배포해준다.\n\nUI Tests는 각 프로젝트의 Code owner가 책임을 갖고 관리한다.\n\n\n사용법\n\nPR을 올리고 좀 기다리면 아래처럼 Chromatic이 상태를 체크한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2093940774/image-20210812-100520.png?api=v2]\n\n좀 기다리면 이렇게 나온다.\n\nStorybook Publish 옆의 Details를 누르면 현재 형상의 스토리북을 들어가서 볼 수 있다.\n\nUI Tests 우측에 Details를 누르면 아래처럼 뜬다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2093940774/image-20210812-100658.png?api=v2]\n\n시각적으로 변경사항이 생겼을때 변경사항이 유효한지에 대한 리뷰를 기다리는 상태다.\n각 컴포넌트의 변경사항을 다 확인하고 승인이 되는 경우에만 PR 머지가 가능하다.\n\n화면마다 리뷰를 할 수 있는데 아래처럼 새로 변경된 화면이 이상하다면 Deny를 눌러 PR이 머지되지 못하게 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2093940774/image-20210820-014549.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2093940774"
  },
  {
    "pageContent": "i18n\n\nInternationalization (= i18n).",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159645697"
  },
  {
    "pageContent": "1. Format\n\n\nICU MESSAGE\n\nhttps://namu.wiki/w/ICU(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)\n[https://namu.wiki/w/ICU(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)]\n\nhttp://userguide.icu-project.org/formatparse/messages\n[http://userguide.icu-project.org/formatparse/messages]\n\nICU 메세지는 전 세계 대부분의 언어를 가능한 native스럽게 번역할 수 있는 많은 기능을 가진 도구입니다.\n\n다양한 pipe를 커스텀해서 사용 가능한 문법이 사용되고 있기 때문에, gettext랑 비교하면 확장성은 좋으나 기본적인 진입장벽이 비교적\n높다고 생각됩니다.\n\n\n사용하는 프로젝트\n\n * CCN Front\n\n\n\n\n\nGETTEXT\n\nhttps://www.gnu.org/software/gettext/manual/html_node/PO-Files.html\n[https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html]\n\nhttps://en.wikipedia.org/wiki/Gettext [https://en.wikipedia.org/wiki/Gettext]\n\nGettext는 GNU에서 공개한 다국어 지원을 위한 도구입니다.\n\ngettext 또한 큰 부족함 없이 다국어를 지원할 수 있습니다.\n\n\n사용하는 프로젝트\n\n * CCN Current",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159809537"
  },
  {
    "pageContent": "2. 번역 파일 작성 규칙\n\n\n준비물\n\n * BabelEdit [https://www.codeandweb.com/babeledit]\n   \n   * 별것 아닌데 생각보다 비싸다.\n\n * modules-lang(@ccn/lang) - GitHub [https://github.com/Ecube-Labs/modules-lang]\n\n\n\n\n\n번역 절차\n\n 1. BabelEdit으로 ./modules-lang/ccn-front/ccn-front.babel 파일을 불러온다.\n\n 2. 작업 내용의 이름으로 브랜치 이름 check out\n\n 3. 적절한(?) 구조 안에 필요한 번역 내용을 수정하고 저장한다.\n    \n    1. key의 컨벤션은 항상 UPPER CASE + kebab-case = UPPER-KEBAB-CASE (적당한 명칭을 못찾겠네요)\n\n 4. master로 PR을 날린다.\n\n 5. PR이 merge되고 나면 master 브랜치에서 아래와 같은 절차를 거친다.\n    \n    git checkout master\n    git pull origin master\n    npm version patch\n    npm publish # 모듈 서버에 배포\n    git push origin master # tag가 붙은 변경사항을 원격 서버에 올린다.\n    \n    \n    \n\n\n적절한 구조를 위한 규칙\n\n지금은 아래의 요구사항을 만족하도록 하고 있습니다.\n필요하면 새로운 규칙을\n\n 1. 특정 워딩을 사용하는 목적에 맞게 namespace를 구성해야 한다.\n    \n    * 아래의 경우, 한국어는 번역된 결과가 같을수 있다. 그러나 언어는 대상에 따라 항상 다를수 있음을 염두에 둬야한다.\n      \n      * 올바른 예 \n        \n        * \"BIN.COUNT\" => \"{count}개\" \n        \n        * \"LIST.ITEM.COUNT\" => \"{count}개\"\n        \n        * \"VEHICLE.COUNT\" => \"{count}대\" → 한글에서도 다를수 있는 예시.\n      \n      * 바람직하지 않은 예\n        \n        * \"COUNT\" => \"{count}개\" → 모든 페이지에서 공통적으로 사용한다면, 특정 언어 사용자에겐 좋지 않은 결과물이\n          제공될수 있다.\n\n 2. 1번의 경우로 인해 같은 번역결과가 있을수 있으며, 이로 인해 중복을 허용한다.\n    \n    \n    * 그러나 우후죽순 늘어나도록 관리하면 안된다. 최대한 많은것을 찾아보고 고려해야 한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/159907871"
  },
  {
    "pageContent": "[CC] 번역 절차\n * 번역을 위해 필요한것\n * 번역 키 추가하는 방법\n * 번역 키 수정하는 방법\n   * 1. Poedit을 열어 “번역 편집”을 누른다.\n   * 2. 원하는 언어 파일을 연다.\n * 새 언어 추가하는 방법\n   * 1. Poedit을 열어 “새 번역 만들기”를 누른다.\n   * 2. 원하는 언어의 언어 코드(2-digit) 입력\n   * 3. 다 번역하면 된다.\n\n\n번역을 위해 필요한것\n\n * Poedit https://poedit.net/download [https://poedit.net/download]\n\n * Git\n\n * https://github.com/Ecube-Labs/ccn-current\n   [https://github.com/Ecube-Labs/ccn-current] clone\n\n * https://github.com/Ecube-Labs/modules-lang\n   [https://github.com/Ecube-Labs/modules-lang] clone\n\n\n\n\n번역 키 추가하는 방법\n\nTODO…\n\n\n번역 키 수정하는 방법\n\n\n1. POEDIT을 열어 “번역 편집”을 누른다.\n\n\n2. 원하는 언어 파일을 연다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1397882885/image-20210218-012307.png?api=v2]\n\n여기서 수정하면 된다.\n\n\n새 언어 추가하는 방법\n\n\n1. POEDIT을 열어 “새 번역 만들기”를 누른다.\n\n템플릿은 ccn-current/app/translation/po/template.pot 파일을 선택하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1397882885/image-20210218-005405.png?api=v2]\n\n\n2. 원하는 언어의 언어 코드(2-DIGIT) 입력\n\nhttps://www.sitepoint.com/iso-2-letter-language-codes/\n[https://www.sitepoint.com/iso-2-letter-language-codes/] 이런거 참고해서 원하는 언어 코드 입력\n\n\n3. 다 번역하면 된다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1397882885"
  },
  {
    "pageContent": "[React] React.memo\n\n * https://alexsidorenko.com/blog/react-render-always-rerenders/\n   [https://alexsidorenko.com/blog/react-render-always-rerenders/]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336920909"
  },
  {
    "pageContent": "[React] Profiling\n\n렌더링 할 때 30ms가 넘으면 Frame drop 발생\n\n> If your Javascript is slow it might cause “frames to be dropped” which means\n> computing a frame in more than 30 ms.\n> \n> If a React component update is triggered then the entire sub tree needs to be\n> rendered in less than 30ms.\n> \n> ref: https://nosleepjavascript.com/react-performance/\n> [https://nosleepjavascript.com/react-performance/]\n\n그래서 프레임드랍이 발생한다면 React profiler로 30ms가 넘는 원인을 찾아 해결하는것이 좋다.\n\n\n1. PROFILER로 FRAME DROP 발생하는 부분 캡쳐\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/2021-06-03%2011-28-10.2021-06-03%2011_29_44.gif?api=v2]\n\n이 도구가 없다면\nhttps://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\n[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi]\n을 설치하면 된다.\n\n\n2. 우측 상단에 있는 커밋 확인\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/image-20210603-022139.png?api=v2]\n\n다시 렌더링하지 않는 0.1ms 이하의 회색 커밋이 많아서 찾기 힘들다면 톱니바퀴버튼을 눌러 설정에서 필터링할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/image-20210603-022608.png?api=v2]\n\n\n3. 원인 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1880621383/image-20210603-022330.png?api=v2]\n\n위 사진에서는 리렌더링이 불필요한 Table 컴포넌트가 Formik Context 컴포넌트 안에 들어있기 때문에 input에 데이터를\n입력할때마다 다시 렌더링하는 문제가 발생하는것을 볼 수 있다.\n\n한 커밋당 다시 그리는데 17ms정도를 잡아먹는 Table을 Formik 컴포넌트 바깥으로 빼고 나니 문제가 해결됐다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1880621383"
  },
  {
    "pageContent": "[H][F] 언제 Memo를 써야 하는가?\n\n\n\nhttps://stackblitz.com/edit/react-ts-gouykr\n[https://stackblitz.com/edit/react-ts-gouykr]\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./style.css\";\n\nfunction Row(props) {\n  return (\n    <div onClick={() => props.onClick(props.item.id)}>\n      <div> name {props.item.name}</div>\n      <div> message : {props.item.message} </div>\n    </div>\n  );\n}\n\nconst MemoRow = React.memo(Row);\n\nfunction Table(props) {\n  return (\n    <div style={{ color: \"black\" }}>\n      {props.items.map(d => props.renderItem(d))}\n    </div>\n  );\n}\n\nfunction App() {\n  const [count, setCount] = React.useState(0);\n  const [dummy, setDummy] = React.useState([\n    { id: 1, name: \"11111\", message: \"hello\" },\n    { id: 2, name: \"22222\", message: \"world\" },\n    { id: 3, name: \"33333\", message: \"message\" },\n    { id: 4, name: \"44444\", message: \"react\" },\n    { id: 5, name: \"55555\", message: \"component\" }\n  ]);\n\n  const handleOnClick = id => {\n    setDummy(dummy =>\n      dummy.map(d => (d.id !== id ? d : { ...d, message: d.message + \"hello\" }))\n    );\n  };\n\n  const handleCountOnClick = () => setCount(c => c + 1);\n\n  return (\n    <div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <div onClick={handleCountOnClick}>{count}</div>\n      <Table\n        items={dummy}\n        renderItem={item => <Row item={item} onClick={handleOnClick} />}\n      />\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n\n\n\n\n위 코드는 Row를 클릭할때마다, 해당 Row의 message 가 변경되어, Row 전체가 리렌더링 되는 코드이다.\n\nRow를 클릭할때마다 부모 컴포넌트인 App 에서 State를 변경하기때문에, Table의 children 컴포넌트들은 모두 리렌더링이 된다.\n왜냐하면, Table의 items 데이터가 변경 되었기 때문이다. 여기서 문제는 변경되지 않은 Row도 리렌더링이 된다는 것이다.\n\n\n\n\n왜 그런거야?? 변경이 안되면 리렌더링이 안되어야 하는 거 아니야???\n\nReact는 DOM을 새로 그릴지 말지, 해당 props 값들을 Shallow Compare를 해서 정한다.\n\n{a :1 } == {a: 1} // false\n[{a :1 } == {a: 1}] === [{a :1 } == {a: 1}] // false\n\nReact에서 위처럼 아무리 값이 같아도 같은 값으로 인식하지 않는다.\n\n\n그럼 같은 값으로 인식하게 어떻게 하는데?\n\nReact.Memo를 사용하면 된다.\n\n <Table\n        items={dummy}\n        renderItem={item => <Row item={item} onClick={handleOnClick} />}\n      />\n에서\n\n<Row item={item} onClick={handleOnClick} />\n부분을\n<MemoRow item={item} onClick={handleOnClick} /> 로 변경해보자.\n\n\n\n\n어떤 원리로 작동하는 거야???\n\nCache를 생각해보자.\n\nfunction Method(value) { \n  return value * 10 / 3 + 2 + 4 + 5 + 6 * {... 복잡한 계산 로직}\n}\n\n위 처럼 함수가 있다고 치자.\n\n만약 Method 에 어떠한 value를 넣으면 어떠한 로직에 의해서 결과를 주는 것이다. 해당 Method에 Cache 기능을 구현하면,\nMethod의 결과값만 받으면 되기에, Method 안에 로직을 거칠 필요가 없다.\n\nReact Memo도 같다. prop가 같으면 같은 Component를 넘기기 때문에 re-render가 되지 않는다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1072267478"
  },
  {
    "pageContent": "[F] HTTP Cache\n * HTTP Caching?\n   * 문제점\n   * 해결방법\n     * Cache Busting with Webpack\n     * http response 헤더 설정\n       * Nginx 예시\n     * 꼼수(?)\n\n\nHTTP CACHING?\n\n웹 사이트에서 네트워크 요청 시 이전에 가져왔던 리소스들을 재사용함으로써 성능을 향상시키기 위해 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2415362049/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202022-05-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.43.55.mov?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2415362049/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202022-05-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.40.39.mov?api=v2]\n\n304: 요청된 리소스를 재전송할 필요가 없으므로 캐싱된 리소스를 사용함\nmemory cache: RAM\ndisk cache: HDD\n\n\n\n\n문제점\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2415362049/image-20220511-034603.png?api=v2]\n\n코드 수정사항을 배포 후 브라우저 캐시 상태에 따라 서로 다른 화면을 보는 경우가 있다.\n원인은 이전 버전의 index.html 이 배포 전의 번들.js 파일을 불러오려고 하기 때문이다.\n\n\n\n\n해결방법\n\n\nCACHE BUSTING WITH WEBPACK\n\n// webpack.config.js\n\noutput: {\n    filename: '[name].[hash].js', // main.2af50ebc6c7e04b7b3e4.js\n},\n\n이렇게 하면 내용이 수정될때마다 빌드 output에 template string\n[https://webpack.js.org/configuration/output/#template-strings]에 따라 해시값이 붙으므로\n브라우저에서는 파일이 변경되었음을 인식하고 새로운 파일을 받는다.\n(웹팩 설정만으로는 Cache Busting이 되지 않는다. index.html이 캐싱되었기 때문인가?)\n\n\nHTTP RESPONSE 헤더\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#controlling_caching]\n설정\n\n캐싱을 disable or 요청 시 항상 revalidate를 하도록 http response에 헤더를 설정한다.\n\n(헷갈리는 헤더 설정에 대한 설명글\n[https://www.zerocho.com/category/HTTP/post/5b594dd3c06fa2001b89feb9])\n\nNGINX 예시\n\nserver {\n    location / {\n        ...\n    \n        # disable cache\n        add_header Cache-Control 'no-store, no-cache, must-revalidate';\n        add_header Pragma 'no-cache';\n        expires off;\n        etag off;\n        \n        # or\n        \n        # revalidate cache whenever using it\n        add_header Cache-Control 'no-cache';\n        add_header Pragma 'no-cache';\n    }\n}\n\n\n꼼수(?)\n\n// 계속 다른 파라미터로 호출해서 캐싱을 방지하는 방법\nconst t = new Date().valueOf()\naxios.get(`/someapi?t=${t}`)\n\n// CDN에 있는 스크립트를 포함시킬 때도 실제로 사용하는 방법이다\n<script src=\"jquery.js?t=1665113597032\" />\n\n// 웹팩 같은 번들러를 사용할 경우 timestamp 가 아니라 번들 hash 를 파라미터로 사용하기도 한다\n<script src=\"app.js?h=commithash\" />\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2415362049"
  },
  {
    "pageContent": "[F][Cypress] 프로젝트 설정\n\n\n1. 필수 설치\n\n * cypress\n\n * eslint-plugin-cypress\n\n * @testing-library/cypress\n   \n   * https://testing-library.com/docs/cypress-testing-library/intro/\n     [https://testing-library.com/docs/cypress-testing-library/intro/]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2297626673"
  },
  {
    "pageContent": "[H][F] 액션 개발 - Deprecated\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n * 액션 선언\n   * 비동기 액션\n * 컨벤션\n * 개발 대상\n   * 웹\n   * 앱\n     * 주의 사항\n     * Snippet\n       * VS code\n\n\n액션 선언\n\ntypesafe-actions [https://github.com/piotrwitek/typesafe-actions] 를 이용한다.\n\n\n비동기 액션\n\ncreateAsyncAction 를 이용해 액션을 선언한다.\n\nex)\n\nimport { createAsyncAction } from 'typesafe-actions';\n\nexport const fetchUserAsync = createAsyncAction(\n  'FETCH_USER_REQUEST',\n  'FETCH_USER_FULFILLED',\n  'FETCH_USER_REJECTED',\n)<number, User, Error>();\n\n * typesafe-actions 를 사용하면 앱애서 string constant 를 사용할 일이 없으므로 그냥 string literal 로\n   선언해도 무방하다.\n\n * https://github.com/piotrwitek/typesafe-actions#constants\n   [https://github.com/piotrwitek/typesafe-actions#constants]\n\n * createAsyncAction 의 generic parameter 는 순서대로 비동기 처리 시작 action payload, 비동기 처리\n   완료 payload 그리고 비동기 처리 실패 payload 의 타입이다.\n\n\n\n\n컨벤션\n\nAsynchronous Action Creator\n\nSynchronous Action Creator\n\nnaming\n\nReference [https://medium.com/@kylpo/redux-best-practices-eef55a20cc72]\n\nReference\n[https://gist.github.com/datchley/4e0d05c526d532d1b05bf9b48b174faf#naming-things-1]\n\nverbNoun\n\nex) addTodo\n\nverbNoun\n\nex) addTodo\n\npostfix\n\n관련 논의\n[https://github.com/Ecube-Labs/haulla-mobile/pull/354#issuecomment-547789069]\n\nAsync\n\nex) addTodoAsync\n\n(none)\n\nex) addTodo\n\ntype\n\nAction Creator 에서 Async postfix 를 제거하고 SCREAMING_SNAKE_CASE + Action Type\npostfix (REQUEST, FULFILLED, REJECTED) 를 붙인다.\n\nex)\n\n * FETCH_USER_REQUEST - 비동기 요청 시작전에 발행\n\n * FETCH_USER_FULFILLED - 비동기 요청이 성공하면 발행\n\n * FETCH_USER_REJECTED - 비동기 요청이 실패하면 발행\n\n\n\n * action creator 의 이름은 self descriptive 해야 한다.\n   \n   * updateUser (bad)\n   \n   * changeUserName (good)\n\n\n개발 대상\n\n\n웹\n\nsrc/app/actions.ts\n\n\n앱\n\nsrc/app/common/actions.ts or\n\nsrc/app/generator/actions.ts or\n\nsrc/app/hauler/actions.ts\n\n\n\n\n주의 사항\n\n\n\n * epic 작성시 아래와 같은 방식으로 하지 않는다.\n\n\n\nNo\n\n map(fetchHaulerUserAsync.success)\n\nOK\n\nmap((data) => fetchHaulerUserAsync.success(data)),\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/231112851/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-12-23%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.08.07.png?api=v2]\n\n * -     \"meta\": undefined,\n   +     \"meta\": 0,\n\n1번째 방식으로 하면 jest에서 위와 같은 오류가 발생한다. (\"typesafe-actions\": \"^4.4.2\", )\n\n\n\n\nSNIPPET\n\n\n\nVS CODE\n\n * User Snippets under File > Preferences (Code > Preferences on macOS) >\n   typescript\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/231112851/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-11-07%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.55.00.png?api=v2]\n     \n     \n   \n   * 아래를 추가해준다.\n\n{\n\t\"Create Action type ( Fulfilled ,Rejected) \": {\n\t\t\"prefix\": \"createAsyncAction\",\n\t\t\"body\": [\n\t\t\t\"export const $1Async = createAsyncAction(\",\n\t\t\t\"'$2_REQUEST',\",\n\t\t\t\"'$2_FULFILLED',\",\n\t\t\t\"'$2_REJECTED',\",\n\t\t\t\")<{}, {}, Error>();\",\n\t\t],\n\t\t\"description\": \"createAsyncAction\"\n\t},\n}\n\nts파일에서만 가능하다. tab을 누르면 이동이 가능하다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/231112851"
  },
  {
    "pageContent": "[H][F] 에픽 개발 - Deprecated\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n * 명명 규칙\n\n\n명명 규칙\n\n에픽의 의도가 잘 드러나는 이름을 사용한다.\n\n다음과 같은 화면 기획을 보면 수거 요청 편집이 성공한 경우 이전 화면으로 돌아가도록 기획 되어 있다.\n\n이 경우 updateCollection 이 아닌 updateCollectionAndClose 같이 에픽의 의도가 잘 드러나는 이름을 선택해야\n한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/241926160/image-20191213-065446.png?api=v2]\n\n\n\n * filter안에는 isActionOf(xxxxx) 를 사용한다.\n   \n   * isActionOf - action-creator로 만들어진 인스턴스인지 확인한다.\n   \n   * isOfType - type의 constant가 같은지 확인한다.\n     \n     * isOfType(types.WITH_TYPE_ONLY)(typeOnlyAction);\n     \n     * isOfType([types.WITH_TYPE_ONLY, types.WITH_PAYLOAD])(typeOnlyAction);\n   \n   * getType - type의 literal이 같은지 확인한다.\n     \n     * 예)\n       \n       * getType(createAction('CREATE_ACTION')());\n       \n       * getType(createCustomAction('CREATE_CUSTOM_ACTION'));\n\n\n\nex)\n\nexport const fetchIndividualServicesEpic: Epic = (\n  action$: ActionsObservable<Actions>,\n  _,\n  { individualServiceService }: RootDependency,\n) =>\n  action$.pipe(\n    filter(isActionOf(fetchIndividualServicesAsync.request)),\n    map((action) => action.payload),\n    switchMap(({ page, limit, filter }) =>\n      individualServiceService.paginate(page, limit, filter).pipe(\n        map(({ items, count }) => fetchIndividualServicesAsync.success({ items, count, page, limit })),\n        catchError((err) => {\n          const errMsg = errorToMessage(err);\n          return of(fetchIndividualServicesAsync.failure(errMsg), enqueueSnackbar(errMsg, { variant: 'error' }));\n        }),\n      ),\n    ),\n  );",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/241926160"
  },
  {
    "pageContent": "[H][F] 리듀서 개발 - Deprecated\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n\n변수명\n\n * XXXReducer로 한다\n   \n   * sensorDetailsReducer\n   \n   * notificationsReducer\n\n\n\n\n\n\n\n\nREDUCER 구조\n\n * 어떤식으로 할지 정해야 한다.\n   \n   * 찰리 선생님이 정해주신다고 합니다.\n\n\n\n\n\n.. TODO\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/235307060"
  },
  {
    "pageContent": "[H][F] 컴포넌트 개발 - deprecated\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/664470139"
  },
  {
    "pageContent": "[F] 서비스 개발\n\nAngular 와 컨벤션을 맞추기 위해 이름을 서비스로 했었는데 Angular 는 사용하지 않을 예정이므로 이 가이드는 폐기한다.\n\n\n\n * 서비스?\n * 서비스 선언\n   * API 호출 서비스\n * 서비스 구현\n * 컨벤션\n   * Class 이름\n   * POJO 이름\n   * Method 이름\n   * Path, 파일명\n   * Export\n\n\n서비스?\n\nhttps://en.wikipedia.org/wiki/Service_(systems_architecture)\n[https://en.wikipedia.org/wiki/Service_(systems_architecture)]\n\n한마디로 정의하기는 힘든것 같다. 그냥 비슷한 기능을 하는 것들을 묶어서 추상화 한 것이라 생각하면 된다.\n\n서비스를 통해 관심사를 분리해서 앱의 응집도를 떨어뜨린다.\n\nex) MessagingService\n\n * 메시지 조회, 메시지 발송 등의 기능을 제공.\n\n * MessagingService 를 사용하는 사람은 실제 구현을 몰라도 서비스를 통해 메시지 관련 기능을 이용할 수 있다.\n\n\n\n웹/앱에서는 주로 API 호출을 서비스로 추상화 한다.\n\n\n서비스 선언\n\nclass POJO 를 이용해 선언한다.\n\nclass POJO 를 이용해야 DI (Dependency Injection) 이 편하다. 다른 이유는 없음.\n\n\nAPI 호출 서비스\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/231702567/image-20191031-034201.png?api=v2]\n\nAPI 문서를 보면 카테고리가 나뉘어 있다.\n\n카테고리마다 서비스가 하나씩 존재해야 한다.\n\n카테고리는 plural 형태이므로 s 는 제거하고 서비스를 만든다.\n\nex)\n\n * UserService\n\n * ServiceAccountService\n\n데이터 모델마다 API 호출 서비스가 존재해야 한다.\n\n언제 새로운 모델을 선언해야 하는가?\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/230719566/H+F#%EC%96%B8%EC%A0%9C-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%84%A0%EC%96%B8%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80]\n참고.\n\n\n서비스 구현\n\n모든 서비스 method 는 observable 을 반환하도록 개발해야 하는데 이는 https://recoiljs.org/\n[https://recoiljs.org/] 의 아이디어를 차용하기 위함이다.\n\n// How Recoil works\nconst xState = atom({ ... })\n\n// Component A\nfunction A() {\n  const x = useRecoilValue(xState)\n  return (<div>{x}</div>)\n}\n\n// Component B\nfunction B() {\n  const x = useRecoilValue(xState)\n  return (<div>{x}</div>)\n}\n\nReact 의 useState 와는 다르게 위의 코드에서 Component A, Component B 는 x 라는 state 를 공유한다.\n그래서 x 가 바뀌면 A, B 모두 다시 렌더링 된다. Observable 을 이용하면 이와 비슷하게 구현이 가능하다.\n\n// Mimic Recoil using Observable\nfunction useX() {\n  const x$: Observable = service.get(); \n  return x$;\n}\n\n// Component A\nfunction A() {\n  const x = useX()\n  return (<div>{x}</div>)\n}\n\n// Component B\nfunction B() {\n  const x = useX()\n  return (<div>{x}</div>)\n}\n\nComponent A와 Component B가 획득한 observable 이 동일한 value 를 push 해준다면 이는 Recoil 과\n개념적으로 동일한 코드가 된다.\n\n\n컨벤션\n\n\nCLASS 이름\n\n이름은 다른 개발자들과 의논해서 정하도록 한다.\n\nPascalCase.\n\n\nPOJO 이름\n\n이름은 다른 개발자들과 의논해서 정하도록 한다.\n\ncamelCase.\n\n\nMETHOD 이름\n\n동사를 이용한다.\n\n서비스의 구체적인 구현 방식을 노출하지 않도록 한다.\n\ncamelCase.\n\napprove(id);     // good\npostApprove(id); // bad. HTTP 요청을 보내는게 method 이름에 노출 된다.\n\n\n\nhttps://cloud.google.com/apis/design/naming_convention\n[https://cloud.google.com/apis/design/naming_convention] 참고해서 작성한다\n\n\n\n\n\n\n\n\nPATH, 파일명\n\nkebab-case.\n\n\nEXPORT\n\ndefault export 하지 않고 모두 named export 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/231702567"
  },
  {
    "pageContent": "[F] UserRepository 개발\n\nUserRepository 는 항상 다음과 같은 형태여야 한다.\n\n단, UserRepository 는 Singleton.\n\ninterface UserRepository {\n  /**\n   * 자기 자신의 정보 조회\n   * 로그인 -> emit UserModel, 로그아웃 -> emit undefined\n   */\n  getSelf(): BehaviorSubject<User | undefined>\n  \n  /**\n   * 로그인\n   */\n  signIn(userId: string, password: string): Observable<void>\n  \n  /**\n   * 자동 로그인.\n   * 토큰이 없거나 만료 되었으면 자동 로그인은 실패한다.\n   * 로그인 -> emit UserModel, 로그아웃 -> emit undefined\n   */\n  autoSignIn(): Observable<User | undefined>\n  \n  /**\n   * 로그아웃\n   */\n  signOut(): Observable<void>\n  \n  /**\n   * 사용자 정보 변경\n   */\n  update(/* 프로젝트마다 다름 */): Observable<User>\n}\n\n\n\n * getSelf\n * signIn\n * autoSignIn\n * signOut\n\n\nGETSELF\n\nBehaviorSubject 이므로 다음과 같이 동작한다.\n\n * getSelf 구독 시 자기 자신의 정보가 있으면(로그인 상태이면) 해당 값이 즉시 구독 됨. 없으면 undefined 가 구독 됨.\n\n\nSIGNIN\n\n로그인 성공하면 레파지토리에 사용자를 추가해야 한다.\n\nuserRepository.getSelf().subscribe(user => console.log('Self': user));\n// Self: undefined\n\nuserRepository.signIn('moongchi', 12345).subscribe();\n// Self: { name: moongchi, ... }\n\n\nAUTOSIGNIN\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/870416409/image-20210111-170335.png?api=v2]\n\n위의 자동로그인을 의미하는게 아니고 페이지 최초 접근 시 토큰/세션/… 이 있으면 자동으로 로그인 시켜야 함을 의미한다.\n\n로그인과 동일하게 자동로그인이 성공하면 레파지토리에 사용자를 추가해야 한다.\n\nautoSignIn 구독 시 유효한 토큰이 존재하면 사용자가 구독되고 유효한 토큰이 존재하지 않으면 undefined 가 구독 되도록 개발해야\n한다.\n\n\nSIGNOUT\n\n로그아웃 성공하면 레파지토리에서 사용자를 제거해야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/870416409"
  },
  {
    "pageContent": "[Deprecated] Flux convention\n\n\n\n * Actioin\n   * Name\n   * Type\n * Epic\n   * Name\n * Reducer\n   * 분리 기준\n\n\n\n\n\n\n\nACTIOIN\n\n\nNAME\n\n동작prefixpostfix규칙예시(인증|조회) 요청fetch\n\n-{prefix}{모델명 | 액션의 목적}{postfix}fetchIndividualServices(인증|조회) 조회\n완료FulfilledfetchIndividualServicesFulfilled(인증|조회) 조회\n실패RejectedfetchIndividualServicesRejected업데이트 요청update\n\n-updateCollectionStatus업데이트 완료FulfilledupdateCollectionStatusFulfilled업데이트\n실패RejectedupdateCollectionStatusRejected아직 다른 액션이 딱히 필요하지 않았음. 그러나 RN과 크게 다르지\n않을것으로 예상\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE\n\nexport const [ACTION_NAME_WITH_SNAKE_UPPER_CASE] = '[ACTION_NAME_WITH_SNAKE_UPPER_CASE]_REQUEST'; // 요청만 예외. why? 그냥 로그 볼때 편의상.\nexport const [ACTION_NAME_WITH_SNAKE_UPPER_CASE] = '[ACTION_NAME_WITH_SNAKE_UPPER_CASE]';\n\n// examples\nexport const FETCH_COLLECTION_REQUEST = 'FETCH_COLLECTION_REQUEST';\nexport const FETCH_COLLECTION_FULFILLED = 'FETCH_COLLECTION_FULFILLED';\nexport const FETCH_COLLECTION_REJECTED = 'FETCH_COLLECTION_REJECTED';\n\n\n\n\n\nEPIC\n\n\nNAME\n\n특별한 이유가 없다면 요청의 액션 이름을 camelCase를 따라서 그대로 작성하여 Epic만 Postfix로 추가한다.\n\nfetchIndividualServiceDetailEpic // fetchIndividualServiceDetail의 에픽\n\n\n\n\n\nREDUCER\n\n\n분리 기준\n\n목록, 상세 정보의 컬렉션으로 나눈다.\n\n레벨 2에 정의해놓은 프로퍼티를 반드시 갖는다.\n다만 아이템을 가져온적이 한번도 없다면 관련 프로퍼티는 다 undefined인것을 허용한다.\n\n * IndividualServices - 목록 아이템\n   * items?\n     * 모델 정보[]\n   * count?\n   * limit?\n   * page?\n   * errMsg\n   * isLoading\n * individualServiceDetails - 상세 정보 컬렉션 { [key: ModelKeyType]: Model }\n   * Id를 키로 갖는 object collection이다.\n     * isLoading\n     * item\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/208306201"
  },
  {
    "pageContent": "[H][F] 스마트 컴포넌트 개발\n\nRedux 관련 개발가이드인데 더이상 Redux 를 사용하지 않는다.\n\n\n\n * 서비스 호출\n   * 최초 설계\n   * 두번째 설계\n   * 최종 설계\n * Event Cancellation\n * setState\n   * callback\n * 컨벤션\n   * PropTypes\n\n\n서비스 호출\n\nSmart Components (A.K.A. Containers) 에서는 서비스를 호출해도 된다.\n\n서비스 호출 결과 / 에러를 액션을 통해 스토어로 전달해도 된다.\n\n\n최초 설계\n\nhttps://stackoverflow.com/questions/42985478/react-and-redux-redirect-after-action/42985812#42985812\n[https://stackoverflow.com/questions/42985478/react-and-redux-redirect-after-action/42985812#42985812]\n\n 1. 비동기 action 호출 with screenId\n    \n    1. // component.js\n       handle() {\n         doSomethingAsync(screenId);\n       }\n\n 2. 에픽이 비동기 액션 처리\n    \n    1. 비동기 액션 성공 → fulfilledAction(screenId, result)\n    \n    2. 비동기 액션 실패 → rejectedAction(screenId, error)\n    \n    3. 리듀서에서 FULFILLED, REJECTED 관련 스토어 업데이트\n       \n       // reducer.js\n       switch (action.type) {\n         case 'FULFILLED':\n           results[screenId] = action.payload;\n           break;\n         case 'REJECTED':\n           errors[screenId] = action.payload;\n           break;\n       }\n    \n    4. 컴포넌트에서 스토어에 있는 결과값 or 오류값 바탕으로 후속 작업\n       \n       // component.js\n       // getResult() and getError() are selectors.\n       render() {\n         if (getResult(screenId)) {\n           // publish success related actions\n         }\n         if (getError(screenId)) {\n           // publish error related actions\n         }\n       }\n\nSO 에서 best practice 로 채택된 답변이긴 하지만 이 코드는 전체적인 복잡도를 너무 증가 시킨다.\n\n그래서 이 방식은 사용하지 않는다.\n\n\n두번째 설계\n\n 1. 비동기 액션 호출 with screenId and callback\n    \n    1. callback 에서 액션 호출 결과값 or 오류값 바탕으로 후속 작업\n    \n    2. // component.js\n       handle() {\n         doSomethingAsync(screenId, (error, result) => {\n           if (error) {\n             // publish error related actions\n           }\n           if (result) {\n             // publish success related actions\n           }\n         })\n       }\n\n이 방법은 두가지 문제점이 있다.\n\n 1. redux style guide 위반\n    \n    1. https://redux.js.org/style-guide/style-guide/#do-not-put-non-serializable-values-in-state-or-actions\n       [https://redux.js.org/style-guide/style-guide/#do-not-put-non-serializable-values-in-state-or-actions]\n    \n    2. serializable 하지 않은 것을 액션으로 넘기면 몇몇 유용한 디버깅 기법을 사용할 수 없다.\n\n 2. raw state 를 컴포넌트로 노출\n    \n    1. 리듀서는 비동기 액션 결과값을 그대로 저장하기도 하지만 결과값을 가공해서 저장하기도 한다.\n    \n    2. 그런데 위와 같이 callback 을 parameter 로 넘겨버리면 리듀서가 결과값을 가공하기 전의 raw state 가\n       컴포넌트로 노출될 수 있다.\n       \n       1. redux-observable 을 보면 다음과 같이 에픽에서 state 값을 가져올 수 있다. (다른 비동기 액션 라이브러리도\n          모두 유사함)\n       \n       2. 그러면 액션의 파라미터로 전달 된 callback 을 통해 비동기 액션의 결과를 처리하기 전 state 를 그냥 넘겨버릴\n          위험이 있다.\n          \n          const pingEpic = (action$, state$) => action$.pipe(\n            ofType(PING),\n            map((action) => {\n              action.callback(state$);\n              return pongAction();\n            })\n          );\n    \n    3. 그러면 callback 을 통해 가져온 값과 selector 를 통해 가져온 값의 불일치가 발생할 수 있으므로 위와 같이 하면\n       안된다.\n\n\n최종 설계\n\n 1. 비동기 동작은 서비스가 담당하게 하고 컴포넌트에서 서비스를 호출한다.\n\n 2. 서비스의 결과값 or 오류값을 처리하기 위한 액션을 발행한다.\n    \n    1. // component.js\n       handle() {\n         doSometingService()\n           .then(result => {\n             // publish success related actions\n           })\n           .catch(error => {\n             // publish error related actions\n           });\n       }\n\n위의 코드는 redux-thunk, redux-saga, redux-observable or whatever 에 구현되어야 하는 로직을\nSmart Component 단으로 내린 것이다.\n\n이 방식은 다음의 문제를 해결 한다.\n\n 1. 최초 설계에서 코드 복잡도가 너무 높아지는 문제 해결\n    \n    1. 최초 설계와 비교해보면 reducer.js, component.js::render 에 추가 구현이 필요 없다.\n\n 2. 두번째 설계에서 raw state 를 컴포넌트로 노출하는 문제\n\n\nEVENT CANCELLATION\n\n컴포넌트가 동작하면서 구독됐던 옵저버블을 취소하고 싶다면 아래의 패턴을 따르면 된다.\n\nclass Page {\n  unmountEvent$ = new Subject<void>();\n\n  fetchUsers() {\n    userService.getUsers().pipe(\n      takeUntil(this.unmountEvent$),\n    ).subscribe();\n  }\n\n  componentWillUnmount() {\n    this.unmountEvent$.next();\n  }\n}\n\n\n\nSubject와 takeUntil 오퍼레이터를 통해 원하는 옵저버블의 구독을 끊는 방법이다.\n\n주의할점은, takeUntil 오퍼레이터가 pipeline의 마지막 오퍼레이터가 되어야한다는 점입니다.(특수한 경우를 제외) 그렇지 않으면 일부\n구독이 유지되는 경우가 발생할 수 있습니다.\n\n\nSETSTATE\n\n\nCALLBACK\n\nsetState 함수는 두번째 인자로 callback 을 받는다.\n\nsetState 는 비동기적으로 동작하기 때문에 실제로 state 가 변경된 경우에 callback 이 실행 된다.\n\n다음과 같이 setState 를 동기적으로 사용하면 제대로 동작하지 않는다.\n\nhandleClick = () => {\n  this.setState({ x: 1 })\n  this.state.x === 1; // setState 는 동기적으로 동작하지 않기 때문에 false\n}\n\nstate 가 변경된 뒤 결과를 받아서 뭔가 하려면 다음과 같이 해야 한다.\n\nhandleClick = () => {\n  this.setState({ x: 1 }, () => {\n    this.state.x === 1; // true\n  })\n}\n\n\n컨벤션\n\n\nPROPTYPES\n\n\n\nisXXXX 형태로 사용하지 않는다.\n\nisVisible => visible\n\nisOpen => open\n\nisShow => show\n\n\n\nex)\n\n\n\ntype PropTypes = {\n  title: JSX.Element;\n  handleConfirm: () => void;\n  ...\n  ...\n  open: boolean;\n};\n\nexport const AlertDialog: FC<PropTypes> = (props) => {\n...\n...\n  const isOpen = !!open // 컴포넌트안에서는 써도 된다.\n\n}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/240877569"
  },
  {
    "pageContent": "[B] 도메인 모델 개발\n * Property 설계\n   * Identifier\n   * Text\n   * List\n   * Description, Note and Memo\n   * Period\n   * Optional date\n * Audit Columns\n * Relations\n   * Direction\n   * Declaration\n   * OneToOne\n   * ManyToOne & OneToMany\n * Method\n   * private\n\n\nPROPERTY 설계\n\n\nIDENTIFIER\n\n특별한 이유가 없다면 id 로 네이밍\n\n기본키는 무엇으로 할까 - 자연키, 인조키 [https://multifrontgarden.tistory.com/180]\n\nWhy is NanoID Replacing UUID?\n[https://blog.bitsrc.io/why-is-nanoid-replacing-uuid-1b5100e62ed2]\n\nAuto increment keys vs. UUID\n[https://mareks-082.medium.com/auto-increment-keys-vs-uuid-a74d81f7476a]\n\n * nanoid는 default로 A-Za-z0-9_- 로 생성되는데, PK에 -,_이 오면 어색하므로\n   https://github.com/ai/nanoid#custom-alphabet-or-size\n   [https://github.com/ai/nanoid#custom-alphabet-or-size] 를 사용해 custom하는 것을\n   권장한다.\n\n * 참고\n   \n   * MP-4630 [https://ecubelabs.atlassian.net/browse/MP-4630] - 이슈 세부사항 가져오는\n     중... 상태\n   \n   * GitHub\n     \n     * nanoid 인지는 모르겠지만 length === 8\n     \n     * [https://ecubelabs.atlassian.net/wiki/download/attachments/1707475139/image-20210722-013442.png?api=v2]\n       \n       \n   \n   * YouTube\n     \n     * nanoid 인지는 모르겠지만 length === 11\n     \n     * https://www.youtube.com/watch?v=ChtumoDfZXI\n       [https://www.youtube.com/watch?v=ChtumoDfZXI]\n   \n   * 몇가지 채번 방식 [https://youtu.be/KoLObZ9A3Kc?t=888]\n\n\nTEXT\n\nText 는 nullable 로 설계 하지 않는다. 항상 not null 로 하고 필요에 따라 empty string '' 을 허용한다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Nullable\n& Not null 장/단점 비교\n\nnullable\n\nnot null\n\n장점\n\n사용자가 실제로 입력하지 않는 경우(null), 입력했다가 나중에 삭제한 경우 empty string('')을 구분할 수 있다.\n\nempty string 도 string 으므로 별도의 예외처리 없이 데이터를 가져와서 모든 string method 를 사용할 수 있다.\n\n단점\n\n * text? 과 같이 optional chaining 을 계속 사용해야 한다.\n\n * 환경에 따라 null 로 취급해야 할 때도 있고 undefined 로 취급해야 할 때도 있어서 일관성이 없다.\n\n사용자가 실제로 입력하지 않는 경우, 입력했다가 나중에 삭제한 경우를 구분하려면 별도의 bool property 를 추가해야 한다.\n\n * 경험상 사용자가 실제로 입력하지 않은 경우와 나중에 삭제한 경우를 구분해야 하는 경우는 거의 없으므로 not null 로 하는 게 좋다.\n\n@Column2({ nullable: true })\n\nuserId?: string;\n\n다른 모델을 reference 하는 경우 해당 모델 ID 의 type 이 string 이더라도 이것은 Text property 가 아니다. 해당\n값이 없을 수 있다면 '' 로 하면 안되고 nullable 로 만들어야 한다.\n\n\nLIST\n\nList 는 nullable 로 설계 하지 않는다. 값이 없을때는 그냥 empty list 로 취급하면 된다.\n\nclass User {\n  emails?      : string[] (x)\n  phoneNumbers!: string[] (o)\n}\n\nList 는 모나드이고 empty list 는 zero 에 해당하기 때문에 nullable 로 설계할 필요가 없다.\n\n\nDESCRIPTION, NOTE AND MEMO\n\n * Description\n   \n   * 객관적인 설명\n   \n   * ex) 패스트파이브 13층에 위치한 덤스터\n\n * 사용자와 공유해도 되는 모델에 대한 설명은 description\n\n * 관리자만 보는 모델에 대한 설명은 note\n\n * Note, Memo\n   \n   * TODO: 어떻게 구분해야 하지?\n\n\nPERIOD\n\n기간은 start / end 로 관리한다.\n\n * 시각 정보를 포함하는 경우 → startAt endAt\n\n * 날짜 정보만 포함하는 경우 → startOn endOn\n\n * MP-4409 [https://ecubelabs.atlassian.net/browse/MP-4409] - 이슈 세부사항 가져오는 중...\n   상태\n\n\nOPTIONAL DATE\n\nclass Article {\n  deletedAt?: Date\n}\n\n * deletedAt?: Date | null 로 선언하지 않는다.\n   \n   * Why?\n     \n     * deletedAt? 에 optional 의미가 내포되어 있기 때문\n     \n     * Date | null 로 하면 null 로 평가 되는 경우가 있기 때문에 Date library 를 사용할 때 귀찮아지기도 하고\n       deletedAt!: Date | null 로 하는 게 맞다.\n\n * 문제 상황\n   \n   * deletedAt 을 초기화 해야 하는 경우\n\n * 해결\n   \n   * // @ts-expect-error\n     deletedAt = null\n   \n   * 꼼수같지만 Date | null 로 선언하지 않으면서 초기화를 하려면 이 방법밖에 없다.\n\n * 존재 확인\n   \n   * !deletedAt\n     \n     * deletedAt === null deletedAt !== undefined 와 같이 하면 의도하지 않은 오류가 발생할 수 있으므로\n       !deletedAt 으로 비교한다.\n       \n       * new Article() 했다면 deletedAt === undefined ,\n         repository 를 이용해 조회했다면 deletedAt === null 임\n\n\nAUDIT COLUMNS\n\nORM 을 사용할 때는 모든 audit columns (createdAt, createdBy, updatedAt, updatedBy) 를 도메인\n모델에 직접 선언해야 한다.\n\n이 properties 는 모두 private 으로 선언하고 audit 목적으로만 사용해야 한다. (= 이 column 에 있는 값을 사용하면\n안 됨)\n\n비즈니스 로직상 기록해야 하는 날짜는 별도의 property 로 선언한다.\n\n\nRELATIONS\n\ntypeorm #relations [https://typeorm.io/#/relations]\n\n각 entity간 관계를 정의할 수 있다. (ex/ 1:1, 1:N, N:N…)\n\n\nDIRECTION\n\nUnidirectional. Bidirecional 로 설계했다면 [OJT] DDD (Domain-driven design)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882844] 규칙에 맞지 않게 설계한\n것이다.\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nBidirectional\n\n@Entity()\nclass User {\n  id: UserID\n  \n  @OneToMany(() => Group, (group) => group.user)\n  groups: Group[]\n}\n\n@Entity()\nclass Group {\n  id: GroupID\n  \n  @ManyToOne(() => User, (user) => user.groups)\n  user: User\n}\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nUnidirectional\n\n@Entity()\nclass User {\n  id: UserID\n  \n  @OneToMany(() => Group, (group) => group.user)\n  groups: Group[]\n}\n\n@Entity()\nclass Group {\n  id: GroupID\n  \n  @ManyToOne(() => User, (user) => user.groups)\n  user: never\n  // NOTE: 이 property는 ORM을 위해서만 존재하므로 never로 선언하면 다른 코드에서 이 property를 사용하지 못하도록 할 수 있다.\n  //       참조하지 않는 property 이기 때문에 user? user! 중 아무거나 해도 된다.\n}\n\n\nDECLARATION\n\n참조 하는 class 를 먼저 선언한다.\n\nTODO: 참조 하는 class 를 먼저 선언 했을 때 특정 옵션을 사용하면 ReferenceError: Cannot access 'XXX'\nbefore initialization 와 같은 오류가 발생하는데 이때는 참조 되는 class 를 먼저 선언해야 한다. 어떤 옵션이었는지 기억이\n안 남 😞\n\n\nONETOONE\n\n@JoinColumn 을 사용하면 FK를 가질 수 있다.\n\nOneToOne 공식 문서 [https://orkhan.gitbook.io/typeorm/docs/one-to-one-relations]에는 한\n쪽 entity에만 OneToOne을 붙이는 예시를 들고 있는데, 둘다 붙여서 더 적절한 쪽에 FK를 붙이는 것도 가능하다. (ref.\nhttps://github.com/typeorm/typeorm/issues/4553#issuecomment-634716902\n[https://github.com/typeorm/typeorm/issues/4553#issuecomment-634716902] )\n\n// 아래의 경우 incumbent.id\n\n@Entity()\nexport class Incumbent {\n  @PrimaryColumn()\n  id: string;\n \n  @OneToOne(() => ServiceAccount, (account) => account.incumbent)\n  @JoinColumn({ name:'id', referencedColumnName:'serviceAccountId' }) // default = Account.PK\n  account!: never;\n}\n\n@Entity()\nexport class Account {\n  @PrimaryColumn()\n  serviceAccountId!: string;\n  \n  @OneToOne(() => Incumbent, (incumbent) => incumbent.account)\n  incumbent: Incumbent;\n}\n\n\nMANYTOONE & ONETOMANY\n\n아래에서 Dumpster : Part = 1 : N 관계가 된다.\n\n@Entity()\nexport class Part {\n  ...\n  @ManyToOne(() => Dumpster, dumpster.parts)\n  dumpster?: never;\n}\n\n@Entity()\nexport class Dumpster {\n  ...\n  @OneToMany(() => Part, part.dumpster)\n  parts: Part[];\n\n}\n\n\nMETHOD\n\n\nPRIVATE\n\n * 클래스 내에서만 사용하고 있다면 private로 선언한다.\n   \n   * 추후 클래스 외부에서도 사용하게 된다면 private → public으로 바꾼다.\n   \n   * method 테스트는 그걸 사용하는 method를 테스트하면 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139"
  },
  {
    "pageContent": "[H][B] 도메인 이벤트 개발\n\n서로 다른 aggregate 간의 consistency 를 보장하고 싶을 때는 transaction 을 사용하면 안된다.\n\n도메인 이벤트를 이용해 eventual consistency 를 구현하도록 한다.\n\n\n\n * 필요성\n * 발행과 구독\n * 장점\n * 단점\n * 용도\n   * 1. 트리거\n   * 2. 데이터 동기화\n * 멱등성\n * 영속 관계\n\n\n필요성\n\ncollection.approve()되면 Bidding이 생성되는 로직이 있는 경우를 살펴보자.\n\nDDD에서 서로 다른 aggregate를 하나의 transaction으로 처리하는 것을 강결합(high coupling) 때문에 지양한다.\n\nclass Collection {\n    approve() {\n        // ... Collection.approve의 비즈니스 로직 처리 \n\n        const { collectionId, servicePrice, collectionExpectedAt } = collectionRequestedEvent;\n        const bidding = new Bidding({ collectionId, servicePrice, collectionExpectedAt });\n        return bidding;   \n    }\n}\n\nclass CollectionService {\n\n    @Transactional()\n    async approveCollectionRequest(collectionId: number, adminUser: User) {\n        const collection = await this.collectionRepository.findOneOrFail(collectionId);\n        const bidding = collection.approve(adminUser);\n        await this.collectionRepository.save([collection]);\n        await this.biddingRepository.save([bidding]);\n    }\n}\n\n게다가, collection.approve()되면 Notification 도 생성되도록 비즈니스 로직을 추가해야 한다면? 이렇게\nnotification이 collection의 도메인 모델 로직에 속하는 것이 맞을까?\n\n예를 들어,\n\nnotification.save()가 실패했을 경우, transaction은 전체를 rollback하게 될텐데 맞게 동작하는\n것일까?notification만 재실행 해야하지 않을까?\n\nnotification.save()가 만약 1분이 걸린다면 collection.approve()도 함께 1분을 기다리는 것이 합리적인가?\n\nclass Collection {\n    approve() {\n        // ... Collection.approve의 비즈니스 로직 처리 \n\n        const { collectionId, servicePrice, collectionExpectedAt } = collectionRequestedEvent;\n        const bidding = new Bidding({ collectionId, servicePrice, collectionExpectedAt });\n        return bidding;   \n    }\n}\n\nclass CollectionService {\n\n    @Transactional()\n    async approveCollectionRequest(collectionId: number, adminUser: User) {\n        const collection = await this.collectionRepository.findOneOrFail(collectionId);\n        const bidding = collection.approve(adminUser);\n        await this.collectionRepository.save([collection]);\n        await this.biddingRepository.save([bidding]);\n        const notification = new Notification(/* ... 생략 */);\n        // notification.save()가 실패할 경우, 로직 전체가 rollback된다.\n        await this.notificationRepository.save([notification]); \n    }\n}\n\n\n\n\n발행과 구독\n\n[/wiki/download/attachments/303169645/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8.drawio.png?api=v2]\n\n\n\n * bidding-service, notification-service각각은 EventHandler를 통해\n   CollectionRequestEvent를 구독하고 있는 상태이다.\n\n * collection.approve()가 호출될 때, CollectionRequestEvent를 발행한다.\n\n * 발행된 CollectionRequestEvent를 각각의 service에 등록된 EventHandler에서 받아서 로직을 처리한다.\n   bidding-service는 ‘입찰 시작’, notification-service는 ‘푸시 알림’을 한다.\n\n * 이런식으로 이벤트 구독을 통해 다른 로직에 영향을 미치지 않으면서 도메인 로직을 비교적 쉽게 추가할 수 있다.\n\n\n\n\n장점\n\n * 도메인 로직이 강하게 결합(high coupling)되는 것을 방지해, 서로 다른 도메인 로직이 섞이는 것을 방지할 수 있다.\n\n * 비즈니스 로직을 추가해야 하는 경우 발행되는 이벤트만 구독하면 되기 때문에, 확장성이 좋아진다.\n\n\n\n\n단점\n\n * 발행과 구독의 로직이 분리되어 있어 디버깅이 어려울 수 있다.\n\n * 비동기적으로 처리되기 때문에, 순서가 보장되지 않을 수 있다.\n\n * 발행과 구독이 반드시 한 번만 일어나지 않는다. 따라서 이벤트 핸들러는 요청에 대해 멱등성을 가져야 한다.\n\n * 이벤트 dispatcher, handler, 저장소 등을 직접 구현, 관리하는 것이 부담이 될 수 있다.\n\n\n\n\n용도\n\n아래와 같이 트리거, 데이터 동기화 두 가지 경우에 이벤트를 사용할 수 있다.\n\n\n1. 트리거\n\n도메인 상태가 바뀐 후, 후처리를 할 때 사용한다. 예를 들어, 수거 완료가 되었을 때 수거 완료가 된 것을 고객에게 알리기 위해 사용할 수\n있다.\n\n\n2. 데이터 동기화\n\n서로 다른 시스템간 동기화를 할 때 사용할 수 있다.\n\n예를 들어, 명령 모델은 트랜잭션을 지원하는 RDBMS를, 조회 모델은 조회 성능이 좋은 NoSQL을 사용하도록 시스템을 설계한 경우이다. 명령\n모델과 조회 모델을 분리하는 것에 대한 내용은 여기 내용 범위에 벗어나므로, 관련해서는 CQRS(Command Query\nResponsibility Segregation) [https://martinfowler.com/bliki/CQRS.html]을 읽어보도록\n한다.\nhttps://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs\n[https://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/303169645/image-20200326-081658.png?api=v2]\n\n[DDD start 책 p.316에 있는 그림]\n\n\n멱등성\n\n메시지 큐를 통해 같은 이벤트는 반드시 한 번 구독되는 것을 보장하지 않는다. 이런 경우를 대비해 이벤트 핸들러는 멱등성을 갖도록 구현돼야\n한다.\n\n멱등성을 갖도록 이벤트를 발행할 때 필요한 데이터를 모두 갖는 것이 좋다. 객체 ID로 데이터를 조회할 수 있겠지만 객체가 수정될 수 있기\n때문이다.\n\n * 참고\n   \n   * 동일한 트랜잭션에 대해 메일이 두번 발송된 모습. 분산 시스템에서 멱등성을 보장하는건 결코 쉽지 않다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/303169645/image-20200824-003528.png?api=v2]\n\n\n\n\n영속 관계\n\n도메인 모델의 변경으로 인한 도메인 이벤트 발행 시, 이 둘은 transaction 으로 묶여야 한다. 이벤트 메시지 발행을 보장하기\n위해서이다. (도메인 주도 설계 구현 책 398p. 메시징 인프라의 일관성 참고)\n\n우리는 아래의 방법을 사용한다.\n\nhttps://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#the-deferred-approach-to-raise-and-dispatch-events\n[https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#the-deferred-approach-to-raise-and-dispatch-events]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/303169645"
  },
  {
    "pageContent": "[B] 도메인 명세 (spec) 개발\n\n/**\n * 어카운트 등록 후 첫 인보이스에만 부과되는 요금(ex/ prorate, dumpster delivery fee)을 생성할 때 대상이 되는 어카운트를 조회한다.\n */\nexport class FirstMonthChargeableAccountSpec extends AccountSpec {\n  ...\n}\n\n * 주석에 있어야 하는 내용\n   \n   * 명세의 사용 목적\n   \n   * 파라미터 설명",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2654502913"
  },
  {
    "pageContent": "[B] 레파지토리 개발\n * 구조\n * 컨벤션\n   * 레파지토리 이름\n   * Base class\n   * CU (Create, Update)\n   * find(…)\n     * Time intervals\n       * Naming\n   * findXXX(…)\n   * D (Delete)\n * 관심사 분리\n   * 문제점\n   * 해결 방안\n\nimport { DddRepository, VersionedDddRepository } from '../../../lib/ddd';\n\nclass ModelRepository extends DddRepository<Model> {\n}\n\nor\n\nclass ModelRepository extends DddRepository<Model, string> {\n}\n\n * 첫번째 generic parameter: 모델 타입 (required)\n\n * 두번째 generic parameter: 모델의 ID 타입 (optional. 생략하면 ID 를 number 타입으로 간주)\n\n\n구조\n\n[/wiki/download/attachments/291635906/ddd-repository.png?api=v2]\n\n원칙적으로는 repository interface 가 domain 영역에 위치하고 repository interface 의 구현체가\ninfrastructure 영역에 위치해야 한다. 하지만 우리는 repository interface 를 사용하지 않고\ninfrastructure 영역에 직접 repository 구현체를 위치 시킨다.\n\n[/wiki/download/attachments/291635906/ddd-repositoy-in-practice.png?api=v2]\n\n이렇게 하는 이유는 두가지가 있다.\n\n 1. TS 에서는 interface type 에 대해 DI 가 불가능.\n    \n    1. TS 에서 interface 는 트랜스파일 시 사라지는 정보이다. 따라서 interface 를 참조해서 DI 할 수 없고\n       interface 이름이나 interface 토큰 등 다른 방법을 이용해야 하는데 번거롭다.\n    \n    2. 추상 클래스를 인터페이스처럼 쓰면 DI가 가능 하지만 아래 이유 때문에 지금은 굳이 필요 없다.\n\n 2. 프로토타입 언어의 특성 상 런타임에 method 교체가 가능.\n    \n    1. 이미 생성 된 객체에 대해서 런타임에 호출하는 method 교체가 가능하다. 따라서 interface 를 분리하지 않아도 테스트\n       코드를 쉽게 작성할 수 있다.\n    \n    2. 물론 런타임에서 상황에 따라 다른 repository 구현체를 사용해야 하는 상황이 생기면 interface 를 분리하는 게 좋지만\n       아직 그런 경우는 없다.\n\n\n컨벤션\n\n\n레파지토리 이름\n\n모델 이름 + Repository\n\n\nBASE CLASS\n\noptimistic lock 을 사용하는 경우 VersionedDddRepository, 그렇지 않으면 DddRepository 를 상속해야\n한다.\n\nDddRepository, VersionedDddRepository 에는 save(), findAll(), countAll()이 구현되어 있다.\n\n따라서 위의 코드처럼 base class 를 상속받기만 해도 save(), findAll(), countAll()을 호출할 수 있다.\n\n\nCU (CREATE, UPDATE)\n\n모델을 생성, 업데이트 하기 위한 함수는 절대로 구현하지 않는다. save() 로 모두 처리 가능하다.\n\n\nFIND(…)\n\n조건에 따라 모델을 조회하기 위한 함수는 find(...) 로 구현한다.\n\n도메인 명세에서 find(...) 를 호출하고 조건에 따라 올바른 parameter 로 find(...) 를 호출하는지 테스트를 작성한다.\n\n * find(...) 는 항상 도메인 명세에서 호출되어야 한다. 어플리케이션 서비스 레벨에서 find(...) 를 호출하면 올바른\n   parameter 로 find(...) 를 호출하는지 확인하는 테스트 코드를 작성하기 위해 mocking 해야할 것들이 많아진다.\n\nfind(...) 의 리턴 타입은 Promise<Model> 혹은 Promise<Model[]> 이어야 한다.\n\nfind(...) 는 항상 완전한 aggregate를 반환해야 한다. 따라서 QueryBuilder\n[https://typeorm.io/#/select-query-builder] + join 으로 직접 쿼리를 만들게 되면 실수할 가능성이 있기\n때문에 되도록 join의 사용을 지양한다. (ref. Eager Loading을 사용하지 않고 N+1 Problem 해결하기\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/652968156/OJT+RDB+N+1+Query+Problem#%ED%95%98%EC%A7%80%EB%A7%8C-Eager-Loading%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C%3F])\n\n * 하지만 현재 TypeORM은 join 대상 테이블에 검색 조건을 거는 것이 구현되어 있지 않으므로 join 대상 테이블에 조건을 걸어야\n   하는 경우에만 예외적으로 join을 사용하도록 한다. (ref. haulla-api.biddingRepository\n   [https://github.com/Ecube-Labs/haulla-api/blob/47b23ceb5bf47900c28a8dee3df6eea035e5eb47/src/services/biddings/infrastructure/repository.ts#L44-L56]\n   )\n\n\nTIME INTERVALS\n\nNAMING\n\n특정 interval 에 somethingOn 이 속하는지 찾기 위한 API 인 경우,\n\nfind({\n  somethingOnStart: '2022-06-14',\n  somethingOnEnd  : '2022-07-13',\n})\n// => somethingOn 이 2022-06-13 ~ 2022-07-12 인 데이터를 찾는다 \n\n * Postfix 는 [B] 도메인 모델 개발 | Period\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Period] 와\n   동일.\n   \n   * 예시\n   \n   * dueOnStart / dueOnEnd\n   \n   * sentAtStart / sentAtEnd\n\n\nFINDXXX(…)\n\nfind(…) 로 처리하기 곤란한 경우에만 예외적으로 findXXX(…) 를 개발한다.\n\n조건에 따라 모델을 조회하기 위한 함수는 findXXX() 으로 구현한다.\n\nimport { DddRepository } from '../../../lib/ddd';\n\nclass ModelRepository extends DddRepository<Model> {\n  async findById(id: number): Promise<Model> {\n    return this.getManager().find(...)\n  }\n}\n\n * this.getManager().findXXX 함수를 사용한다.\n   \n   * https://typeorm.io/index.html#/entity-manager-api\n     [https://typeorm.io/index.html#/entity-manager-api] 참고\n\n * 이름은\n   https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html\n   [https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html]\n   2.3 section 을 참고해서 짓는다.\n\n조건에 따라 모델을 조회하기 위한 함수에서 where 절의 In 을 사용하는 경우는 findXXXIn() 으로 명명한다.\n\nasync findByServiceProfileIn(serviceProfile: string[]) { \n  return this.entityManager.find(Usim, { where: { serviceProfile: In(serviceProfile) } });\n}\n\nhttps://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html\n[https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html]\n\n\nD (DELETE)\n\n문제가 발생할 경우 과거의 데이터가 필요할 수도 있기 때문에, DB 에서 실제로 데이터를 삭제하는 경우는 거의 없다.\n\n현재 typeORM의 @deleteDateColumn\n[https://typeorm.io/#/decorator-reference/deletedatecolumn] + softDelete()\n[https://typeorm.io/#/delete-query-builder/soft-delete] 조합으로 실제 데이터를 삭제하는 것이 아니라\n삭제된 효과를 주고 있다. (ref. MP-4663 [https://ecubelabs.atlassian.net/browse/MP-4663] -\n이슈 세부사항 가져오는 중... 상태 )\n\n\n\n\n관심사 분리\n\n\n문제점\n\n// dispute-tickets/repository.ts\nasync save(tickets: DisputeTicket[]) {\n  const [reporter, assignee] = await Promise.all(\n      ['id.kim@ecubelabs.com', IS_PRODUCTION ? 'je.song@ecubelabs.com' : 'id.kim@ecubelabs.com'].map((email) =>\n          this.atlassianClient.users.retrieve({ email }),\n      ),\n  );\n\n  await Promise.all(\n      tickets.map(async (ticket) => {\n          const {\n              issues: [issue],\n          } = await this.atlassianClient.issues.search({ id: ticket.id });\n\n          if (issue) {\n              const jiraIssue = ticket.toJiraIssue({\n                  reporterId: reporter.accountId,\n                  assigneeId: assignee.accountId,\n                  issueKey: issue.key,\n              });\n  ...\n}\n                    \n// dispute-tickets/model.ts\nexport class DisputeTicket {\n  ...\n  \n  toJiraIssue({ assigneeId, reporterId, issueKey }: { assigneeId: string; reporterId: string; issueKey?: string }) {\n        return JiraIssue.paymentDisputeFrom({\n            assigneeId,\n            reporterId,\n            key: issueKey,\n            disputeTicketId: this.id,\n            email: this.email,\n            paymentIntentId: this.paymentIntentId,\n            status: this.status,\n            reason: this.reason,\n            comment: this.prevStatus && `${this.prevStatus} -> ${this.status}`,\n        });\n    }\n\n * 레포지토리는 엔터티 객체를 저장, 조회, 수정, 삭제하는 역할을 하며 이를 도메인 모델에 노출하는 것은 적절하지 못 하다.\n   \n   * 어떤 방식으로 데이터를 관리하고 저장할지는 도메인 영역의 관심사가 아니다.\n   \n   * 레포지토리의 구현 방식이 변경되었을 때(ex 저장소 변경) 도메인 영역의 비즈니스 로직에 영향을 줘서는 안 된다.\n\n * 위의 코드의 경우 지라 이슈를 저장소로 사용하고 있지만 만약 저장소를 허브스팟으로 변경한다면 도메인 모델까지 수정해줘야 한다.\n   \n   * 비슷한 예시 -\n     https://github.com/Ecube-Labs/haulla/blob/3f76c87d25e59d47218489f6970a32d0bdfdea09/apps/core-api/src/services/balances/domain/model.ts#L252\n     [https://github.com/Ecube-Labs/haulla/blob/3f76c87d25e59d47218489f6970a32d0bdfdea09/apps/core-api/src/services/balances/domain/model.ts#L252]\n\n\n해결 방안\n\n// dispute-tickets/repository.ts\nasync save(tickets: DisputeTicket[]) {\n  const [reporter, assignee] = await Promise.all(\n      ['id.kim@ecubelabs.com', IS_PRODUCTION ? 'je.song@ecubelabs.com' : 'id.kim@ecubelabs.com'].map((email) =>\n          this.atlassianClient.users.retrieve({ email }),\n      ),\n  );\n\n  await Promise.all(\n      tickets.map(async (ticket) => {\n          const {\n              issues: [issue],\n          } = await this.atlassianClient.issues.search({ id: ticket.id });\n\n          if (issue) {\n              const jiraIssue = toJiraIssue(ticket, reporter.accountId, assignee.accountId);\n  ...\n}\n\nprivate toJiraIssue(ticket: DisputeTicket, reporterId: string, assigneeId: string) {\n  return {\n    ...\n  }\n}\n\n * 위와 같이 entity를 저장소에 저장할 수 있도록 가공하는 작업은 레포지토리 내부에서 한다.\n\n * 레포지토리의 구현 방식이 변경되어도 다른 레이어를 의존하지 않고 있기 때문에 수정에 어려움이 적어진다.\n\n * 참고 -\n   https://github.com/Ecube-Labs/CCN-API/blob/bf97cb49fad7f5c874f454b8cb10751893203253/src/queryModels/models/client.ts#L206\n   [https://github.com/Ecube-Labs/CCN-API/blob/bf97cb49fad7f5c874f454b8cb10751893203253/src/queryModels/models/client.ts#L206]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/291635906"
  },
  {
    "pageContent": "[B] 어플리케이션 서비스 개발\n * list\n * retrieve\n\n\nLIST\n\n리소스를 단순히 필터링 해서 목록을 조회하는 method 인 경우 이름을 list 로 한다.\n\nhttps://stripe.com/docs/api/invoices [https://stripe.com/docs/api/invoices] 참고\n\n\nRETRIEVE\n\n리소스의 ID 로 리소스를 조회하는 method 인 경우 이름을 retrieve 로 한다.\n\nhttps://stripe.com/docs/api/invoices [https://stripe.com/docs/api/invoices] 참고\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1755119845"
  },
  {
    "pageContent": "[B] API 개발\n * 통합 API 명세서 (prod)\n * 통합 API 명세서 (stage)\n * API header\n * API input\n   * Paging\n     * Naming\n   * Time intervals\n     * Naming\n   * Sorting\n   * EditInputSchema\n * API output\n   * Response<void>\n   * 동일한 리소스에 대한 응답 스키마는 동일해야 한다.\n * 하위 호환성 유지\n * deprecated\n\n\n통합 API 명세서 (PROD) [https://docs.ecubelabs.xyz/]\n\n\n통합 API 명세서 (STAGE) [https://docs-stage.ecubelabs.xyz/]\n\n\nAPI HEADER\n\n\nAPI INPUT\n\n\nPAGING\n\n\nNAMING\n\npage + limit\n\nhttps://github.com/Ecube-Labs/haulla-api/pull/29#discussion_r305167486\n[https://github.com/Ecube-Labs/haulla-api/pull/29#discussion_r305167486]\n\n\nTIME INTERVALS\n\n[A, B) - Start is inclusive and end is exclusive\n\nhttps://stackoverflow.com/questions/9795391/is-there-a-standard-for-inclusive-exclusive-ends-of-time-intervals\n[https://stackoverflow.com/questions/9795391/is-there-a-standard-for-inclusive-exclusive-ends-of-time-intervals]\n\n관련 논의\n\nhttps://github.com/Ecube-Labs/haulla-api/pull/1238#discussion_r864492243\n[https://github.com/Ecube-Labs/haulla-api/pull/1238#discussion_r864492243]\n\n\nNAMING\n\n특정 interval 에 somethingOn 이 속하는지 찾기 위한 API 인 경우,\n\nparams = {\n  somethingOnStart = 2022-06-14\n  somethingOnEnd   = 2022-07-13\n}\n// => somethingOn 이 2022-06-13 ~ 2022-07-12 인 데이터를 찾는다 \n\n * Postfix 는\n   https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Period\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Period] 와\n   동일.\n\n\nSORTING\n\nhttps://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/sort-pagination.html#sort-using-2-fields\n[https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/sort-pagination.html#sort-using-2-fields]\n\n\nEDITINPUTSCHEMA\n\nJoi 로 수정/변경 서비스 스키마를 디자인 할 경우 아래의 조건들을 지켜야 한다.\n\n * 모든 property 는 optional 이어야 한다.\n   \n   * key 가 존재하면 해당 property 를 업데이트 하면 됨.\n   \n   * key 가 존재하지 않으면 해당 property 는 업데이트 안하면 됨.\n\n * 비즈니스 규칙상 지우는게 허용된 값은 null 을 허용해야 한다.\n\n// 비즈니스 요구사항\n// 1. 이름은 필수값\n// 2. 나이, 몸무게는 선택값\n// 3. 나이는 일단 입력되면 지울 수 없다\n// 4. 몸무게는 언제든지 지울 수 있다\n\nclass User {\n  name: string;\n  age?: number;\n  weight?: number;\n}\n\nconst editInputSchema = {\n  name: Joi.string().optional(),\n  age: Joi.number().optional(),\n  weight: Joi.number().allow(null).optional(),\n}\n\n\nAPI OUTPUT\n\n\nRESPONSE<VOID>\n\n응답값이 없는 void API 인 경우 empty object 를 'Ok' message 로 사용한다.\n\nMP-288 [https://ecubelabs.atlassian.net/browse/MP-288] - 이슈 세부사항 가져오는 중... 상태\n\n\n동일한 리소스에 대한 응답 스키마는 동일해야 한다.\n\n리소스를 제거하는 DELETE 메서드를 제외한 동일한 리소스에 대한 GET, PUT, PATCH, POST 등은 모두 output으로 동일한\n스키마를 내보내야 한다.\n\n백엔드 개발자 입장에서는 생성, 수정과 같은 요청에 대해 ‘Ok’ 메세지만 던져줘도 별 다른 상관이 없다.\n\n하지만 만약 프론트엔드 개발자가 게시글 생성, 수정 요청 후 최종적으로 저장 된 데이터를 화면에 나타내줘야하는 등 필요로 하게 된다면 그게\nresponse에 담겨서 오면 참 편하겠지만 ‘Ok’ 메세지만 돌아오게 되면 그것을 얻기 위해 무조건 GET을 해줘야만 한다.\n\n해당 컨벤션 관련 대화 내용:\nhttps://github.com/Ecube-Labs/CCN-API/pull/542#issuecomment-819226180\n[https://github.com/Ecube-Labs/CCN-API/pull/542#issuecomment-819226180]\n\n\n하위 호환성 유지\n\nconst validate = {\n  body: Joi.object({\n    x: Joi.number().required(),\n  }),\n} as const;\n\nexport default {\n  path: ...,\n  method: ...,\n  meta: ...,\n  validate,\n  output: ...\n}\n\n위와 같은 route spec이 있을 때 y가 required 항목으로 추가해야 하는 경우, required 대신 optional 이면서\ndefault 를 지정하여 기본 값을 입력받도록 한다.\n\nconst validate = {\n  body: Joi.object({\n    x: Joi.number().required(),\n    y: Joi.number().default(88),\n  }),\n} as const;\n\nexport default {\n  path: ...,\n  method: ...,\n  meta: ...,\n  validate,\n  output: ...\n}\n\nkoa-joi-router와 다르게 koa-x-router는 pre 같이 validation 이전에 미들웨어가 실행되도록 하는 기능은 지원하지\n않는다.\n\n기존(koa-joi-router)처럼 pre 로 기본 값을 채워넣게 되는 경우 문서에서는 required로 나오지만 실제로 API를 호출하면\n값을 누락해서 보내도 실행이 되는 마법같은 현상이 발생하기 때문에 스키마는 항상 문서와 일치하도록 관리한다.\n\n\n\n--------------------------------------------------------------------------------\n\n\nDEPRECATED\n\n위와 같은 route spec 이 있을 때 y 가 required 항목으로 추가 되었다면 다음과 같이 pre 를 사용하면 된다.\n\nexport default {\n  path: ...,\n  method: ...,\n  meta: ...,\n  pre: async (ctx, next) => {\n    ctx.request.body.y = 88;\n    return next();\n  },\n  validate: {\n    body: Joi.object({\n      x: Joi.number().required(),\n      y: Joi.number().required(),\n    }),\n  }\n  output: ...\n}\n\n * pre 를 사용하지 않고 y: Joi.number().required()만 추가하게 되면 업데이트 되지 않은 클라이언트에서 들어오는 요청이\n   모두 실패하게 된다. (업데이트 되지 않는 클라이언트는 body 에 y 를 보내지 않으므로)\n\n * 신규 항목이 required 로 추가 되는 경우에는 반드시 기본값이 존재해야 하기 때문에 위와 같이 pre 에서 기본값을 할당해줄 수\n   있다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/298778912"
  },
  {
    "pageContent": "[B] 다국어 메세지 개발\n\n프론트에서 사용하는 react-intl를 개발한 Format.js가 만든 intl-messageformat\n[https://formatjs.io/docs/intl-messageformat/]를 사용합니다.\n\nhttps://formatjs.io/docs/intl-messageformat/\n[https://formatjs.io/docs/intl-messageformat/] 에서 Live Editor 기능을 제공하기 때문에 필요할때\n코드를 수정해서 바로 테스트할수 있습니다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1210449947"
  },
  {
    "pageContent": "[B] Control flow\n\nFront-end 와 Back-end 에 적용 되는 control flow 는 다를 수 있다.\n\n * switch\n   * 정해진 값이 있는 경우 default 에서 throw error\n\n\nSWITCH\n\n\n정해진 값이 있는 경우 DEFAULT 에서 THROW ERROR\n\nenum Status {\n  Active,\n  Suspended,\n}\n\nfunction logic(status) {\n  switch (status) {\n    case Status.Active: ...\n    case Status.Suspended: ...\n    default: throw new Error('???')\n  }\n}\n\n알 수 없는 값을 처리하면 안 된다.\n\n\n\n참고\n\n[F] Control flow\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390032449]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2390294582"
  },
  {
    "pageContent": "Signal 처리\n\nkubernetes를 이용한 서비스 무중단 배포 [http://tech.kakao.com/2018/12/24/kubernetes-deploy/]\n\nTL;DR\n\nSIGTERM 에서 cleanup 과정을 반드시 수행해야 한다\n\ninfra 관리자에게 특별히 요청하지 않았다면 쿠버네티스에 앱 배포 시 SIGTERM signal 발생 후 30 초 뒤에 SIGKILL\nsignal 이 발생한다\n\n\n\n\nEx) express cleanup\n\nconst express = require('express')\nconst app = express()\nconst server = app.listen(3000)\n\nprocess.on('SIGTERM', () => {\n  // 30초(기본 값) 뒤에는 server.close 가 실행중이라도 쿠버네티스가 SIGKILL 로 프로세스를 종료시킨다\n  // 따라서 cleanup 에 30초 이상 필요하다면 infra 관리자에게 요청\n  server.close(() => {\n    // SIGKILL 을 기다리지 말고 cleanup 이 완료되면 process.exit 해도 무방하다\n    process.exit()\n  })\n})",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/111083526"
  },
  {
    "pageContent": "NODE_ENV\n\nNODE_ENV환경production운영stagestage 테스트\n\ndevelopment\n\nlocalundefinedlocal",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/117080149"
  },
  {
    "pageContent": "Map library 사용 (지도)\n\nMap library 를 사용할 때는 어플리케이션 코드에서 직접 map library 를 호출하지 않고 다음의 signature 를 갖는\nmapClient 를 구현해서 사용한다.\n\ninterface createMapClient {\n  (options: { key: string }): {\n    /**\n     *\n     */\n    timezone: (lat: number, lng: number, timestamp?: number) => Promise<string>;\n    /**\n     *\n     */\n    reverseGeocode: (\n      lat: number,\n      lng: number,\n      language: string\n    ) => Promise<string>;\n    /**\n     *\n     */\n    placesAutoComplete: (query: {\n        input: string;\n        sessiontoken: string;\n    }) => Promise<{\n        status: 'OK' | 'ZERO_RESULTS' | 'OVER_QUERY_LIMIT' | 'REQUEST_DENIED' | 'INVALID_REQUEST' | 'UNKNOWN_ERROR';\n        errorMessage: string;\n        predictions: {\n            description: string;\n            placeId: string;\n        }[];\n    }>;\n  };\n}\n\n\nMAPCLIENT INTERFACE 필요성\n\n어플리케이션 계층 혹은 도메인 계층에서 직접 map library 를 호출하면 map library 를 교체해야 할때 이를 사용하는 모든 코드를\n고쳐야 하므로 비용이 너무 크다.\n\nmapClient 로 map library 계층을 추상화 하면 map library 를 교체해야 할 때 mapClient 만 고치고 테스트하면\n되므로 안전하고 빠르게 작업할 수 있다.\n\n\nMAPCLIENT INTERFACE 결정\n\nmapClient 추상화가 map library 교체를 염두에 둔 목적이라면 모든 map library 를 검토한 뒤 interface 를\n결정해야 한다.\n\n하지만 그럴 시간이 없기 때문에 (누군가 해주셔도 됨) 그냥 갓글맵 interface\n[https://googlemaps.github.io/google-maps-services-js/docs/GoogleMapsClient.html]\n를 따라가는 게 속 편하다\n\n\n참고\n\nmapClient in CCN-API\n[https://github.com/Ecube-Labs/CCN-API/blob/master/src/ts/lib/%40ccn/maps.ts]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/174882982"
  },
  {
    "pageContent": "Async / Await 가이드\n\n\nASYNC/AWAIT\n\nJavaScript ES8에 정의된 async function과 await syntax는 비동기 함수 처리를 마치 동기 함수를 다루듯 쉽게\n처리할 수 있는 방법입니다. Node.js 8부터 완전히 지원합니다.\n\n\n과거에는..\n\n비동기 처리를 할 때 ES6의 Promise와 함께 bluebird.js같은 Promise 라이브러리를 사용하거나, async.js와 같은 흐름\n제어 라이브러리를 이용했습니다.\n\n이큐브랩의 레거시 코드에서 async.js를 쉽게 찾아볼 수 있습니다.\n\n이런 방법들은 callback function을 차곡차곡 쌓아서 callback hell을 만드는 것보다는 나았지만, indent가 깊어지고\n에러 발생 시 stack trace를 제대로 추적할 수 없다는 문제가 있었습니다.\n\n왜냐면 기본적으로 비동기 함수는 별도의 콜 스택에서 실행되기 때문입니다.\n\n\nASYNC FUNCTION 알아둘 점\n\n * a = async function () {} 일 때 typeof a === 'function' 이며 a.constructor.name\n   === 'AsyncFunction' 입니다.\n * AsyncFunction는 리턴값을 단순히 Promise로 감싸는 것이라고 이해하기 쉬우나, 실제 동작은 리턴값을 암묵적으로\n   Promise.resolve\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve]로\n   감싸는 것입니다.\n   Promise.resolve의 특징에 따라, AsyncFunction에서 Promise를 반환해도 Promise가 중첩되지는 않습니다.\n * Node.js 12부터 async function에서 발생한 에러에 대해서 stack trace를 제공합니다.\n\n\nAWAIT 알아둘 점\n\n * async function 내에서만 사용할 수 있습니다.\n * 동기 코드와 동일하게 try catch로 에러 핸들링을 해야 합니다.\n * await 뒤에 오는 expression이 Promise가 아니어도 됩니다. resolved Promise에서 나온 값으로 취급됩니다.\n\n\n바람직한 비동기 처리\n\n * 중첩된 비동기 처리를 할 때 불필요한 blocking 및 오버헤드를 방지하기 위해 await은 실질적으로 대기가 필요한 최상위 로직에서만\n   사용하세요.\n   \n   * async function에서 Promise를 await해서 리턴하지 말고 그냥 리턴하세요.\n   * await이 evaluation되는 지점에서 blocking됨을 유의하세요.\n     * Promise.all([await a(), await b(), await c()])는 병렬 실행되지 않습니다.\n       병렬 실행하고자 한다면 await Promise.all([a(), b(), c()])와 같이 사용하세요.\n     * 다수의 async function이 순차적으로 실행되어야 하는 경우가 아니라면 for loop 안에 await를 사용하지 마세요.\n       (eslint rule: no-await-in-loop\n       [https://eslint.org/docs/rules/no-await-in-loop])\n * Promise.all, Promise.race, ...등 Promise 내장 메소드를 통해 간단한 흐름 제어를 할 수 있습니다.\n * Job간에 복잡한 의존 관계가 얽혀 있는 비동기 작업의 흐름 제어를 할 때\n   * 퍼포먼스가 중요하지 않은 작업이라면 불필요한 blocking을 감수하고 그냥 async / await, Promise 내장 메소드만을\n     활용하세요. (코드 가독성과 유지보수를 위해)\n   * 그 외의 경우 async.js 혹은 기타 라이브러리를 활용하세요.\n * Promise를 리턴하는 function은 사실상 async function과 동일하기 때문에 선언 시 async를 안 붙여도 되지만,\n   비동기 함수라는 것을 쉽게 알아볼 수 있도록 async function으로 선언해 주세요.\n\n\n참고\n\n * Mozilla MDN Web Docs\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function]\n * 자바스크립트의 Async/Await 가 Promises를 사라지게 만들 수 있는 6가지 이유\n   [https://medium.com/@constell99/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-async-await-%EA%B0%80-promises%EB%A5%BC-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%9E%88%EB%8A%94-6%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0-c5fe0add656c]\n * https://medium.com/@kiwanjung/번역-async-await-를-사용하기-전에-promise를-이해하기-955dbac2c4a4\n   [https://medium.com/@kiwanjung/%EB%B2%88%EC%97%AD-async-await-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-promise%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-955dbac2c4a4]\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/205127740"
  },
  {
    "pageContent": "GraphQL\n\nhttps://www.udemy.com/course/graphql-by-example\n[https://www.udemy.com/course/graphql-by-example]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436633885"
  },
  {
    "pageContent": "에러 던지기\n\nboom [https://hapi.dev/module/boom/api/?v=9.1.1] 을 이용한다.\n\n\n\n * 4xx Errors\n * 5xx Errors\n * 4xx, 5xx 의 구분\n * 에러 메시지 구분\n   * 보안 관련 에러 메시지\n * 참고\n\n\n4XX ERRORS\n\nhttps://hapi.dev/module/boom/api/?v=9.1.1#http-4xx-errors\n[https://hapi.dev/module/boom/api/?v=9.1.1#http-4xx-errors]\n\n\n5XX ERRORS\n\nhttps://hapi.dev/module/boom/api/?v=9.1.1#http-5xx-errors\n[https://hapi.dev/module/boom/api/?v=9.1.1#http-5xx-errors]\n\n\n4XX, 5XX 의 구분\n\n클라이언트에서 받은 값에 문제가 있을때는 4xx, 서버의 로직에 문제가 있을때는 5xx 오류를 던지면 된다. 그런데 사실 클라이언트에서\n에러코드를 보고 뭔가 하지 않기 때문에 (unauthorized 는 가끔 처리하긴 하지만) 에러코드는 크게 중요하지 않다. boom 을 사용하는\n주된 이유는 다른 개발자에게 의미있는 오류 메시지를 전달하기 위함이다.\n\nthrow forbidden('something went wrong')\n\n위와 같은 코드를 짰다면 내가 아닌 다른 개발자가 봤을 때 사용자가 뭔가 허용되지 않은 작업을 하려고 했구나 하는 의미를 전달할 수 있다.\n\n\n에러 메시지 구분\n\n개발자들이 보는 에러 메시지와 사용자가 보는 에러 메시지는 구분 되어야 한다.\n\n그렇지 않으면 다음과 같은 참사가 발생한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1163264020/image-20210106-080213.png?api=v2]카카오\n선물하기\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1163264020/image-20210401-031347.png?api=v2]\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nconst error = throw forbidden('something went wrong')\n\n// error.message === 'something went wrong'\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n\nconst error = throw forbidden('왜그러니?', { errorMessage: 'something went wrong' })\n\n// error.message === '왜그러니?'\n// error.data.errorMessage === 'something went wrong'\n\n이렇게 한다고 카카오뱅크와 같은 참사를 막을수 있는건 아니고 서버의 에러 핸들러에서 error.message 는 로깅용으로,\nerror.data.errorMessage 는 클라이언트에 반환하는용으로 사용하는 코드가 있어야 한다. - 현재는 errorMessage가 아닌\nerrorCode를 이용해서 사용자에게 보내는 메세지를 컨트롤한다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nconst error = throw forbiddne('왜그러니?', { errorCode: 'ERROR000' });\n\n// @packages/error-message/language/en\n{\n  \"ERROR000\": \"something went wrong\"\n}\n\n이렇게 하면 proxy간의 에러메세지를 통일할 수 있어 (기존에는 proxy에러를 제대로 전달하지 못하고있었음) 클라이언트로 제대로 에러메세지를\n전달할 수 있다. https://github.com/Ecube-Labs/haulla/pull/705\n[https://github.com/Ecube-Labs/haulla/pull/705]\n\n\n\n\n보안 관련 에러 메시지\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#incorrect-and-correct-response-examples\n[https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#incorrect-and-correct-response-examples]\n\n보안 관련 에러가 발생했을 때 에러의 구체적인 원인을 알려주는 것은 좋지 않다. 해커에게 공격의 단서를 제공하기 때문.\n\n\n참고\n\n[OJT][Node.js] Error Handling in Koa\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/710738065]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1163264020"
  },
  {
    "pageContent": "Pagination 구현\n\n페이지네이션은 보통 두가지 유형의 뷰에서 사용되며 이에 따른 두가지 방식의 페이지네이션이 생겼다.\n\n\n오프셋 기반 페이지네이션 (OFFSET-BASED PAGINATION)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1193214030/image-20210115-034042.png?api=v2]\n\n대부분의 API가 이런 형태로 만들어져 있다.\n\nparams: { offset, limit } | { page, limit }\nresponse: { data: [...] }\n\n이 방법은 특정 구간에 있는 데이터를 정해진 개수만큼 가져오는것으로, 데이터가 새로 생성되거나 제거되는 경우 방금 보았던 데이터를\n이전/다음페이지에서 다시 보거나 새로 생긴 데이터가 다른 페이지로 넘어가 못보게 될수도 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1193214030/image-20210118-080908.png?api=v2]\n\n(위에서 빨간색이 중복되어 조회되는 데이터. 덕분에 회색 데이터는 조회하지 못했다.)\n\n사용자가 직접 페이지를 지정해서 조회하는 형태로 제공하는 뷰는 위의 현상이 그리 어색하지 않았다.\n\n\n커서 기반 페이지네이션 (CURSOR-BASED PAGINATION)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1193214030/image-20210115-033838.png?api=v2]\n\n이건 오프셋 기반 페이지네이션과는 조금 다르게 구현해야한다.\n보통 실시간성 데이터를 보여주는 뷰에서 이런 형태의 페이지네이션을 요구한다.\n\n위같은 뷰에서 오프셋 기반 페이지네이션처럼 구현하게 되면 위에서 말한 문제인\n\n> 데이터가 새로 생성되거나 제거되는 경우 방금 보았던 데이터를 이전/다음페이지에서 다시 보거나 새로 생긴 데이터가 다른 페이지로 넘어가 못보게\n> 될수도 있다.\n\n이같은 현상이 발생하게 되는데, 실제 사용자가 보는 화면에서 중복/생략된 데이터가 발생하는것은 치명적인 문제다.\n아래처럼 구현하면 이런 문제가 생기는것을 예방할 수 있다.\n\nparams: { offset, limit } | { page, limit }\nresponse: {\n    data: [ ... ],\n    pagingUrl: {\n        next: string | null,\n        prev?: string | null,\n        first?: string | null,\n        last?: string | null,\n    }\n}\n\n위의 인터페이스처럼 구현하면 서버에서 다음 데이터를 조회하는 주소를 만들어서 주므로 클라이언트는 아무것도 신경쓰지 않고 다음 페이지를 불러올 수\n있다.\n\n\n서버 구현 방법\n\n서버쪽에서 URL에 어떤 파라메터를 붙여서 문제 없이 불러올 수 있게 구현하는지는 다양한것 같다.\n어떻게 구현하든 위의 인터페이스만 지키면 클라이언트는 일관적으로 동작할 수 있다.\n\n 1. 페이스북은 timestamp를 서버로 넘겨서 해당 timestamp 이전/이후의 데이터를 불러올 수 있는 URL을 만들어서 준다\n    http://api.example.com/foo?since=TIMESTAMP1\n\n 2. 지라는 응답 값에 조회했던 아이디를 넘겨준다.\n    \"pageInfo\":{\"firstId\":\"1610504639447-jJ3A9AxtTr9YYgvM\",\"lastId\":\"1610334599658-Q-tJZp8wUfqCf80J\"}\n    다음 페이지를 조회할 땐\n    https://ecubelabs.atlassian.net/gateway/api/notification-log/api/2/notifications?after=1610334599658-Q-tJZp8wUfqCf80J&limit=12\n    처럼 after에 lastId를 넘겨서 이후의 데이터를 조회하는것으로 보인다.\n\n 3. 트위터도 커서라는 이름으로 비슷하게 관리한다.\n    https://api.twitter.com/1.1/followers/ids.json?screen_name=theSeanCook&cursor=1374004777531007833\n\n 4. MinMax라는곳에서 작성한 api-paging-built-the-right-way\n    [https://www.mixmax.com/engineering/api-paging-built-the-right-way/] 글처럼 구현한\n    https://github.com/mixmaxhq/mongo-cursor-pagination\n    [https://github.com/mixmaxhq/mongo-cursor-pagination] 패키지도 있다.\n\n데이터의 순서가 바뀌는 환경에서는 이 방법도 무용지물이다.\n\n만약 데이터 순서를 바꾸려고 한다면, 그렇게 관리하는게 적절한 방법인지 다시 한번 고민해보면 좋다.\n알림같은 데이터는 그냥 데이터를 하나 더 만들고, 마지막에 발행한 알림만 보여줘도 되기 때문이다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1193214030"
  },
  {
    "pageContent": "KafkaJS\n * 주의사항\n   * Consumer fromBeginning 옵션 사용시 주의사항\n     * fromBeginning: false\n     * fromBeginning: true\n\n\n주의사항\n\n\nCONSUMER FROMBEGINNING 옵션 사용시 주의사항\n\n[/wiki/download/attachments/2869494083/frombeginning.drawio.png?api=v2]\n\n\nFROMBEGINNING: FALSE\n\nfalse로 설정하면 해당 ConsumerGroupId로 처음 구독한 시점 이후로 발생한 메세지만 consume 받을 수 있다.\n\n이후 동일한 ConsumerGroupId로 구독을 하면 Consume을 하다가 중단된 이후의 메세지를 받을수 있다.\n\n\nFROMBEGINNING: TRUE\n\ntrue로 설정하고 한번도 구독하지 않았던 ConsumeGroupId로 구독을 하게 되면 토픽에 produce 되었던 가장 낮은 offset의\n데이터부터 consume한다.\n\n동일한 ConsumerGroupId로 다시 구독하면 consume하지 못한 offset부터 받아오는것은 동일하다.\n\nawait consumer.subscribe({ topic, fromBeginning: true });\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2869494083"
  },
  {
    "pageContent": "Prometheus Metrics 개발 가이드Prometheus\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA/pages/491815122/Prometheus]\n\n프로메테우스가 우리 서버 프로그램의 지정된 경로에서 데이터를 스크래핑 해가는 Pulling 방식이기 때문에 아래의 조건을 만족하는 API를\n개발해야 한다.\n\n\nAPI\n\n\nLISTENING PORT: PROMETHEUS_MONITORING_PORT\n\nAPI를 제공하는 포트는 환경변수로 주입되는 PROMETHEUS_MONITORING_PORT 를 따라 별도로 listening 해야 한다.\nex) 9113\n\n\nPATH: GET /METRICS\n\n우리의 Scraper는 지정된 포트로 제공되는 GET /metrics 를 요청해서 응답으로 받아간 데이터를 저장하므로 다른 경로를 사용해서는\n안된다.\n\n\nRESPONSE\n\nhttps://www.npmjs.com/package/prom-client\n[https://www.npmjs.com/package/prom-client] 를 이용해 응답 데이터를 생성한다.\n\nMetrics 유형은 아래의 기준을 따라 선택한다.\n\n\nCOUNTER\n\n * 단순히 증가하기만 하거나 지속적으로 누적되는 메트릭에 적합하다.\n\n * 서버가 처리 성공/실패와 같이 누적된 횟수를 추적하는 데 사용될 수 있다.\n\n * 항상 0 이상의 값을 가지며, 증가만 할 수 있고 감소하지 않는다.\n\n * 사용 예:\n   \n   * 총 요청 통계\n   \n   * 서버 오류 발생 통계\n   \n   * 서버 업타임 통계\n\n\nGAUGE\n\n * 어떤 순간의 값을 나타내며, 증가/감소 할 수 있다.\n\n * 서버의 현재 상태나 수치를 나타낼 수 있다.\n\n * 사용 예:\n   \n   * 서버의 리소스 사용량\n   \n   * 일정 기간동안의 요청 평균 처리량\n   \n   * 현재 연결된 connection 수\n\n\nMETRICS NAMING\n\n아래의 네이밍 컨벤션을 준수하는것을 권장한다.\nhttps://prometheus.io/docs/practices/naming/\n[https://prometheus.io/docs/practices/naming/]\n\nprefix는 어플리케이션 이름으로 표현하는게 일반적이다.\n(아래 예제는 prefix 생략)\n\n * not_allowed_destination_requests (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n   → not_allowed_destination_requests_total (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n * callback_failed_count (오류)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\n   → callback_failed_total (tick)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(아래 예제는 prefix 적용)\n\n * hubspot_adapter_api_current_usage_total\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2879127630"
  },
  {
    "pageContent": "[B] ORM 컬럼 매핑\n * BigInt\n * Decimal\n * Float\n * Date\n\n\nBIGINT\n\nBigInt 는 사용하지 않는다.\n\n * BigInt 로 선언한 컬럼의 값은 mysqljs 로 select 했을 때 string 으로 변환 된다.\n\n * https://github.com/mysqljs/mysql/issues/625\n   [https://github.com/mysqljs/mysql/issues/625]\n\n * supportBigNumbers, bigNumberStrings 같은 옵션을 사용할 수 있지만 이 옵션들은 BigInt 뿐만 아니라\n   Decimal 과도 관계가 있어서 개발할 때 까다로운 점이 많다.\n\n * 그래서 BigInt 는 사용하지 않도록 한다. BigInt 를 사용해야 하면 Node.js 로 다루기 적합하지 않은 도메인이다.\n\n * https://github.com/Ecube-Labs/haulla-api/pull/287#discussion_r371576738\n   [https://github.com/Ecube-Labs/haulla-api/pull/287#discussion_r371576738]\n\n\nDECIMAL\n\n * 컬럼 크기 계산\n   \n   * https://www.mysqltutorial.org/basic-mysql-tutorial-aspx/mysql-decimal/\n     [https://www.mysqltutorial.org/basic-mysql-tutorial-aspx/mysql-decimal/]\n\n * Precision, Scale\n   \n   * 달러 (13, 2)\n     \n     * 센트까지 저장해야 하기 때문에 scale은 2로 해야 한다.\n     \n     * precision은 예상되는 최대값과 컬럼 사이즈를 고려해 결정하면 된다.\n     \n     * (13, 2) 는 $ 99,999,999,999.99 까지 저장할 수 있다. (signed)\n\n\nFLOAT\n\n * Precision, Scale\n   \n   * 위도 (8, 6)\n   \n   * 경도 (9, 6)\n   \n   * CCN DB 에 위와 같이 되어 있긴 한데… 왜 이렇게 하지?\n\n\nDATE\n\nyyyy-mm-dd 형식의 날짜는 어플리케이션에서는 string 으로 처리, DB 에서는 date 로 처리\n\n@Property()\n@Column({ type: 'date' })\ncontractOn!: string;",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/330465394"
  },
  {
    "pageContent": "[H][B] 도메인 이벤트 개발 컨벤션\n * 1. 이벤트 클래스\n   * a. 이름 짓기\n   * b. 위치\n   * c. 데이터\n * 2. 도메인 이벤트 개발\n   * a. 발행(publish)\n     * i. model\n     * ii. service\n   * b. 구독(subscribe)\n\n\n\n\n1. 이벤트 클래스\n\n\nA. 이름 짓기\n\n이벤트는 과거에 벌어진 상태 변화나 사건을 의미하기 때문에 이름을 결정할 때 {대상 객체/사건}+{과거 시제}+'Event' 로 한다.\n\n예) CollectionRequestedEvent(수거 요청됨 이벤트), CollectionFinishedEvent(수거 완료됨 이벤트)\n\n\nB. 위치\n\n클래스 파일 위치는 ~/src/services/…/domain/events/하위에 둔다.\n\n예) bidding-closed-event.ts의 경우,\n~/rc/services/biddings/domain/events/bidding-closed-event.ts에 위치한다.\n\n\nC. 데이터\n\n이벤트는 해당 도메인 모델의 가능한 모든 property를 포함하도록 한다.\n\n\n2. 도메인 이벤트 개발\n\n\nA. 발행(PUBLISH)\n\n * 이벤트를 발행하기 위해서는 각각 model,service, 계층에서 작업이 필요하다\n\n\nI. MODEL\n\n * 도메인 모델에서 이벤트를 발행된다.\n\n * 이벤트를 발행하기 위해 DddModel에서 구현된 publishEvent메소드를 사용\n   [https://github.com/Ecube-Labs/haulla-api/blob/master/src/lib/ddd/ddd-model.ts#L90]한다.\n   그러면 DddModel이 갖고 있다가 repository.save 될 때 이벤트 저장소에 영속되고 transaction이 끝나고\n   event가 발행된다.\n\nimport { Entity } from '../../../lib/orm';\n// other imports ...\n\n// model.ts\n@Entity()\nclass Collection extends VersionedDddModel<Collection> {\n\n    // ...\n\n    approve(user: User) {\n        // 이벤트 발행\n        this.publishEvent(\n            new CollectionRequestedEvent(\n                this.collectionId,\n                this.generatorId,\n                this.servicePrice,\n                this.collectionExpectedAt,\n            ),\n        );\n    }\n    \n    // ...\n}\n\n\n\nII. SERVICE\n\n * 이벤트를 발행하는 service의 method는 @Transactional() decorator를 사용해야 이벤트를 consume할 수\n   있다. 그렇지 않으면 이벤트 테이블에 영속만 된다. ddd-service\n   [https://github.com/Ecube-Labs/haulla-api/blob/master/src/lib/ddd/ddd-service.ts#L25]\n   소스코드를 보면 알겠지만 transaction이 commit 된 후( @Transactional()이 붙은 메소드가 종료된 후) 현재\n   context의 handleEvents()가 동작하기 때문이다.\n\nimport { Service } from 'typedi';\nimport { DddService, Transactional } from '../../../lib/ddd';\n// other imports ...\n\n//service.ts\n@Service()\nclass AdminCollectionService extends DddService {\n    \n    // ...\n    \n    // service가 event를 발행하는 domain model의 method를 포함한다면  \n    // @Transactional() decorator에 event를 발행하는 로직이 있어서\n    // **반드시 decorator로 선언**해줘야 이벤트를 발행한다. \n    @Transactional()  \n    async approveCollectionRequest(collectionId: number, adminUser: User) {\n        const collection = await this.collectionRepository.findOneOrFail(collectionId);\n        collection.approve(adminUser);\n        await this.collectionRepository.save([collection]);\n    }\n    \n    // ...\n}\n\n\nB. 구독(SUBSCRIBE)\n\n * 이벤트를 구독하기 위해서는 @EventHander({eventName})decorator를 등록해 이벤트 핸들러로써 동작하게 하면 된다.\n   만약 어디에서도 이 service 파일이 import되지 않을 경우 server.ts에서 require해서 건드려 주도록 한다.\n\n * 이벤트 핸들러의 이름은 on + 이벤트 이름으로 한다.\n   \n   * https://haulla-domain.ecubelabs.xyz/events\n     [https://haulla-domain.ecubelabs.xyz/events] 에서 이벤트 구독현황을 확인할 수 있다.\n\n * 메서드의 첫번째 인자는 이벤트로 구독 중인 모든 이벤트의 타입을 선언해줘야 한다.\n   \n   * 참고 - https://github.com/Ecube-Labs/haulla/pull/930#discussion_r1623815363\n     [https://github.com/Ecube-Labs/haulla/pull/930#discussion_r1623815363]\n\nimport { DddService, Transactional, EventHandler } from '../../../lib/ddd';\n// other imports ...\n\n// event를 등록하기 위해서는 service가 **DddService를 상속**받아야 한다\nclass NotificationService extends DddService {\n\n    // ...\n    \n    @EventHandler(CollectionRequestedEvent) // 이벤트 핸들러 등록\n    @EventHandler(CollectionUpdatedEvent) // 이벤트 핸들러 등록\n    @Transactional()\n    async onCollectionRequestedEvent(collectionRequestedEvent: CollectionRequestedEvent | CollectionUpdatedEvent): Promise<void> {\n        const { collectionId, servicePrice, collectionExpectedAt } = collectionRequestedEvent;\n        const bidding = new Bidding({ collectionId, servicePrice, collectionExpectedAt });\n        await this.biddingRepository.save([bidding]);\n    }\n    \n    // ...\n    \n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/476381321"
  },
  {
    "pageContent": "[H][B] 특정한 시점에 실행 되어야 하는 로직 개발\n * 모델에 실행 시점 명시\n * Job 개발\n * Event handler 개발\n\n\n모델에 실행 시점 명시\n\n모델에 xxxScheduledAt property 를 추가하고 이 property 에 로직이 실행 되어야 하는 시각을 기록한다.\n\n[H][B][도메인 모델] 입찰\n[/wiki/pages/createpage.action?spaceKey=WIKI&title=%5BH%5D%5BB%5D%5B%EB%8F%84%EB%A9%94%EC%9D%B8%20%EB%AA%A8%EB%8D%B8%5D%20%EC%9E%85%EC%B0%B0%20%28Bidding%29]\n\n\nJOB 개발\n\n|-- src\n|-- |-- routes\n|   |-- |-- jobs\n|   |   |-- |-- jobA\n|   |   |-- |-- jobB\n\n * Job 은 여러 종류가 있고 특정한 시점에 실행 되어야 하는 로직을 처리하기 위한 job 만 있는 게 아니다. 특정한 시점에 실행 되어야\n   하는 로직을 처리하기 위한 job 과 다른 목적의 job 은 컨벤션이 다르므로 헷갈리지 말 것.\n\n * Job 은 실행 시점이 도달한 객체들에 대해 XXXScheduledEvent 발행 외의 다른 동작을 수행하면 안된다.\n   \n   @Transactional()\n   async closeBiddings(): Promise<void> {\n       const biddings = await this.biddingRepository.findByScheduledFinishAtLessThanAndFinishedAtIsNull(new Date());\n       handleEvents(biddings.map((bidding) => new CloseBiddingScheduledEvent(bidding.biddingId).withTxId(uuid())));\n   }\n\n\nEVENT HANDLER 개발\n\nEvent handler 는 XXXScheduledEvent 가 발행 되었을 때, 즉 특정한 시점에 도달 했을 때 실행해야 할 로직을 구현한다.\n\n@EventHandler(CloseBiddingScheduledEvent)\n@Transactional()\nasync onCloseBiddingScheduledEvent(closeBiddingScheduledEvent: CloseBiddingScheduledEvent): Promise<void> {\n    const bidding = await this.biddingRepository.findOneOrFail(biddingExpiredEvent.biddingId, {\n        lock: { mode: 'pessimistic_write' },\n    });\n    \n    if (bidding.finishedAt) {\n        logger.info(\n            `Another hauler:${bidding.winnerId} has already secured the collection:${bidding.referenceId}.`,\n        );\n        return;\n    }\n    bidding.close();\n    await this.biddingRepository.save([bidding]);\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/485720282"
  },
  {
    "pageContent": "[H][B] 외부 이벤트 개발 컨벤션\n * 1. 클래스 인스턴스 넘기지 않는다.\n\n\n1. 클래스 인스턴스 넘기지 않는다.\n\n아래 예시를 보면 실제 클래스 인스턴스 아니기 때문에 에러가 발생한다.\n\nclass Car extends DddEvent {\n    ...\n    startEngine() {\n    \n    }\n    ...\n}\n\nclass DddEvent extends DddEvent {\n    constructor(\n        ...\n        public car: Car\n    ) \n    ...\n}\n\n@EventHandler(DddEvent)\n@Transactional()\nasync handle(event: DddEvent, roles: EventHandlerRole[]) {\n    // 에러\n    event.startEngine()\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3035856902"
  },
  {
    "pageContent": "RouterSpec Type\n\nctx 타입을 더 편리하게 사용하기 위해 프로젝트에서 아래와 같이 타입을 확장할 수 있다.\n\n이 타입은 koa-x-router에 내장할 예정이 없다.\nwhy? → only joi만을 위한 코드는 JoiAdaptor로 충분하고 프로젝트마다 타입에 대한 구성이 조금씩 다를수 있어서 포함할 이유가\n없다.\n\nimport type { Context } from '@ecubelabs/seed';\nimport type * as Joi from 'joi';\nimport type { RouteLayerSpec } from 'koa-x-router';\n\nexport type RouterSpec<\n    V extends {\n        query?: Joi.mappedSchema;\n        params?: Joi.mappedSchema;\n        body?: Joi.mappedSchema;\n        output?: { [statusCode: string | number]: { body?: Joi.mappedSchema; header?: Joi.mappedSchema } };\n    } = unknown,\n> = RouteLayerSpec<\n    { context: Context },\n    {\n        query: V extends { query?: Joi.mappedSchema } ? Joi.extractType<V['query']> : unknown;\n        params: V extends { params?: Joi.mappedSchema } ? Joi.extractType<V['params']> : unknown;\n        // FIXME: koa-body가 any로 오버라이딩하는데 강제로 오버라이딩 할 방법이 없다. https://github.com/microsoft/TypeScript/issues/36146\n        // request: { body?: V extends { body?: Joi.mappedSchema } ? Joi.extractType<V['body']> : unknown };\n        body: Joi.extractType<V['output'][keyof V['output']]['body']>;\n    }\n>;\n\ndeclare module 'koa-x-router' {\n    interface Router {\n        add(\n            spec:\n                | RouterSpec<unknown>\n                | RouterSpec<unknown>[]\n                | RouteLayerSpec<unknown, unknown>\n                | RouteLayerSpec<unknown, unknown>[],\n        ): void;\n    }\n}\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2804252692"
  },
  {
    "pageContent": "[B] Endpoint 컨벤션\n\n\nREST\n\n가능하면 REST API 원칙을 충실하게 따른다.\n\n단, FSM (Finite State Machine) 의 상태를 변경하기 위한 API 의 경우 REST 원칙을 충실하게 지키려고 했을때 문제가\n좀 있다.\n\nPUT /plans/:id/status\n{ value: 'canceled' }\n\n * 클라이언트가 원하는 것: plan 취소\n\n * 위의 API 는 plan 의 상태를 canceled 로 변경하는 것일테니 클라이언트의 목적을 달성할 수 있다.\n\n * 그런데 plan 취소 시 상태 변경 뿐 아니라 다른 작업도 같이 해야하는 경우가 있다. ex - plan 을 취소하면 상태도 변경하지만\n   관련된 푸시 알림도 발송\n\n * 따라서 다음과 같이 API 이름을 짓는게 좀 더 자연스러워 보인다.\n\n\n\nPOST /plans/:id/cancel\n\n * REST API 에서 action 은 HTTP verb 로 처리하고 endpoint 는 명사로 이름을 짓는게 관례.\n\n * 하지만 HTTP verb 중에 cancel 같은 것은 없기 때문에 FSM 을 다루는 API 는 REST 원칙에 따라서 이름을 짓는게\n   애매하다.\n\n * 따라서 FSM 을 다루는 API 는 그냥 endpoint 에 action(동사)를 포함시켜서 이름을 짓도록 한다.\n\n * 우리만 이렇게 하는건 아니다. 참고 https://stripe.com/docs/api/invoices\n   [https://stripe.com/docs/api/invoices]\n\n\n\n\n\n\nURL 네이밍\n\nkebab-case를 사용한다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]카더라 썰1\n\nhttp://test.com/test_test_test [http://test.com/test_test_test]\n\n위 링크를 보면 이 페이지에서는 자세히 보면 살짝 보이지만 underscore(_)가 공백처럼 보일수 있어서 -를 쓰기 시작했다는 썰을\n주워들었는데, 옛날 인터넷 환경을 생각하면 신빙성이 있다. (그냥 클릭하면 되는거 아닌가 싶은데 (파란별)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/72/1f611.png]\n프린트하거나 다른 환경을 고려한건진 모르겠다.)\n\n이 외에도 의미적으로 -가 단어의 분리를 잘 나타내기 때문이라는 말도 많다.\n\n아래 글들을 보면 케밥 케이스를 사용해야 할 이유가 많이 있다.\n\n * https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Why-you-should-make-kebab-case-a-URL-naming-convention-best-practice\n   [https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Why-you-should-make-kebab-case-a-URL-naming-convention-best-practice]\n\n * https://www.javacodegeeks.com/2018/12/whats-case-api.html\n   [https://www.javacodegeeks.com/2018/12/whats-case-api.html]\n\n * https://github.com/microsoft/api-guidelines/issues/67\n   [https://github.com/microsoft/api-guidelines/issues/67]\n\n * https://ux.stackexchange.com/questions/41595/what-is-the-casing-convention-for-url-routes\n   [https://ux.stackexchange.com/questions/41595/what-is-the-casing-convention-for-url-routes]\n\n\n\n\n\n\n참고\n\n[OJT] REST API [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1390084114]\n\n[OJT] REST의 멱등성(Idempotence in REST)\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/173670455]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/225018068"
  },
  {
    "pageContent": "[B] 폴더 구조\n * 폴더 구조\n * index.ts\n * ${httpMethod}.ts\n * HEAD method 구현시 주의사항\n\n\n폴더 구조\n\n 1. API endpoint가 폴더 구조와 일치해야 한다.\n\n 2. API endpoint에 리소스 id 가 포함 된 경우 폴더 이름은 _ + id 로 한다.\n    \n    1. 리소스 id 외에 query string, body 는 폴더 구조에 포함될 수 없다.\n\n 3. HTTP method 단위로 route spec 을 생성 하고 이름은 lowercase 로 한다.\n\n// example \n// 수거(id=3) 조회\n// GET /generators/collections/3\n\n|-- routes\n|   |-- generators\n|   |   |-- collections\n|   |   |   |-- _collectionId\n|   |   |   |   |-- get.ts\n|   |   |   |   `-- index.ts\n\n// example\n// 개별서비스 생성\n// POST /generators/individual-services\n\n|-- routes\n|   |-- generators\n|   |   |-- individual-services\n|   |   |   |-- post.ts\n|   |   |   `-- index.ts\n\n\nINDEX.TS\n\n 1. 각 폴더에는 index.ts 가 존재해야 한다.\n\n 2. index.ts 는 폴더 내에 존재하는 route spec 을 모아서 spec array 로 반환 한다.\n\n 3. spec array 의 이름은 (public|private)폴더이름routes (camelCase)\n    \n    1. 토큰 없이 호출 가능한 API 면 public prefix 사용\n    \n    2. 토큰이 있어야 호출 가능한 API 면 private prefix 사용\n    \n    3. public 인지 private 인지는 폴더 내의 개별 route spec 을 봐야 알 수 있다.\n       \n       1. 아직 폴더 내에 public 과 private 이 섞여 있는 경우는 없었지만 섞여 있는 경우가 생기면 index.ts 가\n          public route spec 을 모은 spec array, private route spec 을 모은 spec array\n          두개를 export 하면 된다.\n\n// example\n// 폴더 구조가 아래와 같은 경우\n|-- routes\n|   |-- generators\n|   |   |-- individual-services\n|   |   |   |-- get.ts\n|   |   |   |-- post.ts\n|   |   |   `-- index.ts\n\n// index.ts 는 다음과 같이 작성한다\n\nimport { RouterSpec } from '~/@types/router';\nimport get from './get';\nimport post from './post';\n\nexport const privateIndividualServicesRoutes: RouterSpec<any>[] = [get, post];\n\nRouterSpec 타입은 RouterSpec Type\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2804252692/RouterSpec+Type]\n를 참조하면 된다.\n\n\n${HTTPMETHOD}.TS\n\n// example\n// 폴더 구조가 아래와 같은 경우\n|-- routes\n|   |-- generators\n|   |   |-- individual-services\n|   |   |   |-- get.ts\n|   |   |   |-- post.ts\n|   |   |   `-- index.ts\n\n * get.ts\n   \n   * GET 요청을 처리하는 라우트 핸들러가 포함 된 파일\n\n * post.ts\n   \n   * POST 요청을 처리하는 라우트 핸들러가 포함 된 파일\n\n\nHEAD METHOD 구현시 주의사항\n\n// someRoute/index.ts\nimport get from './get';\nimport head from './head';\n\n/** 주의! head spec을 get spec 이전에 두어야 함**/\nexport const anyResourceRoutes = [head, get];\n\n// someRoute/get.ts\nexport default {\n    path: '/samePath',\n    method: 'get',\n\n    handler: async (ctx) => {\n        ctx.body = { data };\n    },\n} as Spec;\n\n// someRoute/head.ts\nexport default {\n    path: '/samePath',\n    method: 'head',\n\n    handler: async (ctx) => {\n        ctx.status = 200;\n    },\n} as Spec;\n\nhttps://www.rfc-editor.org/rfc/rfc9110#HEAD:~:text=The%20HEAD%20method%20is%20identical%20to%20GET%20except%20that%20the%20server%20MUST%20NOT%20send%20content%20in%20the%20response.%20HEAD%20is%20used%20to%20obtain%20metadata%20about%20the%20selected%20representation%20without%20transferring%20its%20representation%20data%2C%20often%20for%20the%20sake%20of%20testing%20hypertext%20links%20or%20finding%20recent%20modifications.\n[https://www.rfc-editor.org/rfc/rfc9110#HEAD:~:text=The%20HEAD%20method%20is%20identical%20to%20GET%20except%20that%20the%20server%20MUST%20NOT%20send%20content%20in%20the%20response.%20HEAD%20is%20used%20to%20obtain%20metadata%20about%20the%20selected%20representation%20without%20transferring%20its%20representation%20data%2C%20often%20for%20the%20sake%20of%20testing%20hypertext%20links%20or%20finding%20recent%20modifications.]\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD]\n\n * HEAD method 는 GET method 와 동일하지만, body에 return 값이 포함되지 않음\n\n * 대부분 routing system 에서 GET request 에 대한 구현만 해놓으면, HEAD request handler는 구현하지\n   않아도 GET handler에 의해 처리되고 response에 body만 없음.\n\n * 주로 대용량의 body content를 요청하기 전에 해당 리소스에 대해 간단히 맛? 보는 정도의 method verb (정확히는\n   Content-Length나 metainformation에 대한 정보를 받기 위해 요청하는 용도라고 함 )\n\n * 다만 Koa router 에서 주의할 사항은 route middleware 등록할때, 배열에서 HEAD route spec을 항상 GET\n   route spec 앞에 배치해야함 (그렇지 않으면, GET/HEAD 두요청 모두 GET handler에서 intercept 됨)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/427786600"
  },
  {
    "pageContent": "[H][B] Route spec\n * path\n * method\n * meta\n * validate\n   * header\n   * query\n   * type\n   * params\n   * body\n   * output\n\nRoute spec 은 다음의 형식으로 작성한다.\n\nimport { RouterSpec } from '~/@types/router';\n\nconst validate = {\n    header: Joi.object({\n        ...\n    }),\n    query: Joi.object({\n        ...\n    }),\n    type: 'json',\n    params: Joi.object({\n        ...\n    }),\n    body: Joi.object({\n        ...\n    }),\n    output: {\n        200: {\n            body: Joi.object({\n              ...\n            }),\n        },\n        '400-599': {\n            body: Joi.object({\n              ...\n            }),\n        },\n    },\n} as const;\n\nexport default {\n    path:,\n    method:,\n    meta: {\n        document: {\n            summary:,\n            description:,\n            tags: [],\n        },\n    },\n    validate,\n    handler: async (ctx) => {\n        ctx.body = ...\n    },\n} as RouterSpec<typeof validate>;\n\n\nPATH\n\n\nMETHOD\n\nHTTP method\n\n\nMETA\n\n\nVALIDATE\n\n별도 변수로 작성하여 RouterSpec 제네릭에서 스키마 타입을 알수 있도록 하여 ctx 타입을 더 정확하게 사용한다.\n\n\nHEADER\n\nHTTP header.\n\npublic API 인 경우 header 를 선언하지 않는다.\n\nprivate API 인 경우 다음과 같이 header 를 선언한다.\n\nheader: Joi.object({\n    authorization: Joi.string()\n        .required()\n        .description('Bearer {token} 양식'),\n}).options({\n    allowUnknown: true,\n}),\n\n\nQUERY\n\nquery string.\n\nGET API 인 경우에 query string 으로 받는 input parameter 를 선언한다.\n\ninput parameter 가 없으면 선언하지 않아도 된다.\n\n\nTYPE\n\nPOST, PATCH, PUT API 인 경우에 type: 'json' 으로 선언한다.\n\n그 외의 경우에는 선언하지 않는다.\n\nkoa-joi-router 에서 koa-x-router로 전환되면서 이제 사용되지 않는다.\n기존에 필요했던 이유는 koa-joi-router가 body parser 기능을 내장하고 있었기 때문이다.\n\n\nPARAMS\n\nurl parameter 를 받는 경우에만 선언한다.\n\n\nBODY\n\nPOST, PATCH, PUT API 인 경우에 API 의 input parameter 를 선언한다.\n\n\nOUTPUT\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/458391553"
  },
  {
    "pageContent": "[B] 스키마 정의\n * Joi\n   * Presence\n     * required\n     * optional\n     * and\n     * 스키마 정의\n   * 스키마 선언 위치\n   * 스키마 네이밍\n   * Input 스키마\n     * Text\n       * POST\n       * PATCH\n   * output 스키마\n     * description\n * 스키마 테스트\n * In Haulla\n   * Phone Number\n     * POST, PATCH\n     * GET\n\n\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/458391553/H+B+Route+spec\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/458391553/H+B+Route+spec]\n에서 사용하는 스키마는 joi [https://hapi.dev/module/joi/] 를 이용해 정의한다.\n\njoi 를 사용하는 이유는 다음과 같다.\n\n * joi 스키마를 기반으로 swagger 문서 [https://docs-stage.ecubelabs.xyz]가 자동으로 생성된다.\n\n * input 또는 output 의 유효성을 검사할 수 있다.\n   \n   * 필수값이 누락 되지 않았는가.\n   \n   * 정의 된 스키마와 같은 타입의 값을 입력 받는가/반환 하는가.\n   \n   * 유효성은 값 자체의 유효성 (타입, 형식, …)을 의미하며 비즈니스 로직에 의한 유효성은 joi 로 검사하지 않는다.\n     \n     * number 스키마라면 1, 2, 3, … 이런 값을 받았는지 검사.\n     \n     * 주문 API 라면 결제 시각이 주문 시각보다 나중이어야 하는데 이런 검사는 joi 로 하지 않는다.\n\n\nJOI\n\n\nPRESENCE\n\nJoi schema 는 required / optional 을 지원한다.\n\nuser: Joi.object({\n  name: Joi.string().required(),\n  age: Joi.number().optional(),\n})\n\n\nREQUIRED\n\n해당 key 값을 반드시 필요로 함\n\n위의 예제에서 user = { age: 30 } 으로 보내면 오류\n\n\nOPTIONAL\n\n해당 key 값 없어도 됨\n\n위의 예제에서 user = { name: 'EcubeLabs' } 로 보내도 ok\n\n\nAND\n\nkeys가 같이 존재하거나 없음\n\nconst schema = Joi.object({\n    id: Joi.number().optional(),\n    name: Joi.string().optional(),\n}).and('id', 'name').required();\n\nschema.validate({ id: 1, name: 'John' });\nschema.validate({ name: 'John' }); // Error [ValidationError]: \"value\" contains [name] without its required peers [id]\nschema.validate({ id: 1 }); // Error [ValidationError]: \"value\" contains [id] without its required peers [name]\nschema.validate({ });\n\n\n스키마 정의\n\n\n스키마 선언 위치\n\n스키마는 라우터 영역에 구현한다.\n\n * API 의 결과값은 어플리케이션 서비스 리턴값의 부분집합이 된다.\n   \n   * 하나의 어플리케이션 서비스만 호출해서 이를 API 의 결과값으로 사용하는 경우 API 의 결과값은 어플리케이션 서비스 리턴값의\n     부분집합.\n     \n     * validate: {\n         output: Joi.object({\n           name: Joi.string().required(),\n         }).options({ stripUnknown: true }),\n       },\n       handler: async (ctx) => {\n         const resultA = await serviceA.get(); // { name: string; age: number; }\n         ctx.body = { data }\n       }\n   \n   * 여러개의 어플리케이션 서비스를 호출해서 이를 API 의 결과값으로 사용하는 경우 API 의 결과값은 어플리케이션 서비스 리턴값들의\n     합집합의 부분집합.\n     \n     * validate: {\n         output: Joi.object({\n           name: Joi.string().required(),\n           team: Joi.string().required(),\n         }).options({ stripUnknown: true }),\n       },\n       handler: async (ctx) => {\n         const resultA = await serviceA.get(); // { name: string; age: number; }\n         const resultB = await serviceB.get(); // { team: string; }\n         ctx.body = { data: { ...resultA, ...resultB } }\n       }\n\n * Joi.options.stripUnknown = true 옵션을 사용하면 Joi 가 서비스 결과값을 API 결과값으로 map 해준다.\n   (서비스의 결과값중 스키마에 정의된 값만 API 결과값으로 사용 됨)\n\n\n스키마 네이밍\n\nheaderSchema, paramsSchema, inputSchema, outputSchema\n\n\nINPUT 스키마\n\n * Input 은 API 에서 query string (GET 요청의 경우), body (POST, PUT, PATCH 요청의 경우), url\n   parameter (모든 요청에서 가능)에 해당한다.\n\n * 필수로 받아야 하는 값은 Joi.required(), 그렇지 않으면 Joi.optional()로 선언한다.\n\n * 스키마를 서비스의 메소드 이름 + inputSchema로 이름 짓는다.\n\n * schema로 부터 받은 값들의 type을 정의하기 위해 Joi.extractType<typeof someSchema>를 사용한다.\n\n * body, query, params 그리고 header등을 조합 해 service method를 호출하기 위한 method params\n   정의한다. method params를 정의하기 위해 Parameters<SomeClass['anyMethod']>를 사용한다.\n\n\nTEXT\n\nPOST\n\n필수 값: joi.string().required()\n\n * 필수 값인데 '' 를 허용 하는건 말이 안 된다. 그건 필수가 아님.\n\n * ex) address1: joi.string().required()\n\n선택 값: joi.string().allow('')\n\n * ex) address2: joi.string().allow('')\n   \n   * address2: '' 로 보내도 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n   \n   * address2 보내지 않아도 (tick)\n     [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nPATCH\n\n필수 값: joi.string()\n\n선택 값: joi.string().allow('')\n\n * Property 가 없으면 업데이트 하지 않겠다는 의미 → PATCH 에서는 required() 가 사용 되면 안 된다.\n\n\nOUTPUT 스키마\n\n * 다음과 같이 작성 되어야 한다.\n   \n   * output: {\n         200: {\n             body: Joi.object({\n                 data: outputSchema\n             }),\n         },\n     },\n   \n   * body는 반드시 스키마가 들어가도록 한다.\n\n * 스키마를 서비스의 메소드 이름 + outputSchema로 이름 짓는다.\n\n * 가능하면 PATCH /resources/:id 와 /resources/:id 는 같은 output 으로 정의한다.\n   \n   * 그렇지 않으면 Optimistic update\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1269235768/Optimistic+update]\n     전략을 사용할 수 밖에 없다.\n\n * 가능하면 GET /resources 와 /resources/:id 는 같은 output 으로 정의한다.\n   \n   * Over-fetch 에 따른 최적화는 진짜 문제가 있는 경우에 다시 고민하면 된다.\n\n * output 스키마의 prop 들은 항상 required() 여야 한다. 데이터가 없는 경우 required().allow(null) 로\n   선언 한다.\n   \n   * optional 로 선언하면 개발자의 실수를 테스트 코드로 걸러낼 수가 없다.\n   \n   * // outputSchema = Joi.object({\n     //   id: Joi.number().required(),\n     //   name: Joi.string().optional(),\n     // });\n     \n     test('testA', () => {\n       const body = Spec.validate!.output!['200'].body as Joi.SchemaLike;\n     \n       const { error } = body.validate(\n         { id: 1, name: 'haulla' },\n       );\n     \n       expect(error.message).toBe('...');\n     });\n     \n     test('testB', () => {\n       const body = Spec.validate!.output!['200'].body as Joi.SchemaLike;\n     \n       const { error } = body.validate(\n         { id: 1 },\n       );\n     \n       expect(error.message).toBe('...');\n     });\n     \n     // class Service {\n     //   async doSomething() {\n     //     return { id }; // 개발자가 실수로 id 만 리턴하도록 개발\n     //   }\n     // }\n     \n     * name 이 스키마에 optional 로 선언 되었기 때문에 testA, testB 는 모두 성공한다.\n     \n     * 이 경우 위와 같이 실수를 하면 테스트 단계에서는 발견이 불가능하고 런타임에 오류가 발생한다.\n     \n     * name 을 required().allow(null) 로 선언하면 [H][B] 라우트 핸들러 개발\n       [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/591200604] #2.3 에\n       의해 개발 단계에서 오류 발견이 가능하다.\n\n * options.stripUnknown\n   \n   * 객체를 조회한 결과를 리턴 하는 경우 stripUnknown: true를 한다. 보통 라우터 영역이 서비스 영역에 의존하는데 라우터는\n     서비스로 부터 가져온 데이터를 사용해 유저에게 보여줘야 하기 때문이다. 현재 Joi 스키마가 구현의 편리를 위해 서비스 영역에 구현되어\n     있기는 하지만, output 스키마가 동작하는 곳은 라우터 영역이라 볼 수 있다.\n   \n   * 따라서,striptUnkown: true는 라우터 영역이 요청자에게 약속된 결과를 리턴하는 과정이다. 우리는 json format만\n     리턴하고 있기 때문에 json의 key, value를 map하는 과정이라 보면 된다.\n   \n   * 참고: https://github.com/Ecube-Labs/haulla-api/pull/397#discussion_r429000776\n     [https://github.com/Ecube-Labs/haulla-api/pull/397#discussion_r429000776]\n\n\nDESCRIPTION\n\ndescription에 class: X를 추가해서 front-end 개발자가 모델을 쉽게 인식할 수 있도록 한다.\n\n예를 들어 GET /admins/individual-services/:individualServiceId와 PATCH\n/admins/individual-services/:individualServiceId는 output 스키마가 동일한데 스웨거 문서만 보고서는\n두 API의 output 스키마가 같은지 확인이 힘들다. 그래서 description('class:\nIndividualServiceDetail')과 같이 명시적으로 API의 output 스키마를 알려주는 게 좋다.\n\n[H][F] 데이터 모델 개발\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230719566]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/458522695/image-20201021-081100.png?api=v2]\n\n\n스키마 테스트\n\n다음과 같이 단순한 형태라도 작성하도록 한다.\n\n * API 응답값이 바뀌는 것을 인지하기 위한 최소한의 안전 장치. API 응답값이 바뀔때는 하위 호환성을 유지해 주거나 프론트엔드와 함께\n   변경해야 한다.\n\nimport * as Joi from 'joi';\nimport Spec from './get';\n\ndescribe('GET /v2/sites 테스트', () => {\n    test('정상적인 output', () => {\n        const body = Spec.validate!.output!['200'].body as Joi.SchemaLike;\n\n        const { error } = body.validate(\n            [\n                {\n                    id: 80,\n                    name: '두비원 차고지1',\n                },\n                {\n                    id: 119,\n                    name: '고양바이오매스',\n                },\n            ],\n        );\n        expect(error).toBeUndefined();\n    });\n});\n\n\n\n\nIN HAULLA\n\n\nPHONE NUMBER\n\n * 하울라에서 사용하는 핸드폰 번호는 2가지가 있다.\n   \n   * 미국 번호 - 111-222-3333\n   \n   * 테스트용 한국 번호 - +8210-1234-5678\n\n// schema.ts\n\nexport const phoneNumberSchema = (args?: { shouldFormatted?: boolean; allowEmpty?: boolean }) => {\n    const { shouldFormatted = false, allowEmpty = false } = args || {};\n\n    let valueSchema = Joi.string().required().description('번호');\n    if (shouldFormatted) {\n        valueSchema = valueSchema.regex(/^[1-9]\\d{2}-\\d{3}-\\d{4}$|^\\+8210-\\d{4}-\\d{4}$/);\n    }\n    if (allowEmpty) {\n        valueSchema = valueSchema.allow('');\n    }\n\n    return Joi.object({\n        label: Joi.string().required().description('라벨'),\n        value: valueSchema,\n    });\n};\n\n\nPOST, PATCH\n\n * post, patch의 경우 우리가 현재 받는 포맷이 정해져있으므로 regex를 적용해야하기 위해 shouldFormatted: true를\n   줘야한다.\n\nbillingPhoneNumbers: Joi.array()\n        .items(phoneNumberSchema({ shouldFormatted: true }))\n        .description('청구 휴대폰번호[]'),\n\n\nGET\n\n * get의 경우 기존의 핸드폰 포맷이 바뀌었을 수 있고, empty string인 경우가 있다.\n\nphoneNumbers: Joi.array()\n        .items(phoneNumberSchema({ shouldFormatted: false, allowEmpty: true }))\n        .min(0)\n        .required()\n        .description('휴대폰 번호[]'),\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/458522695"
  },
  {
    "pageContent": "[H][B] 라우트 핸들러 개발\n\n\n\n * 1. ctx destructuring\n * 2. 서비스 호출\n   * 2.1. 서비스 객체 획득\n   * 2.2. 서비스 params 선언\n   * 2.3. 서비스 호출\n * 3. 서비스 결과값 body 로 설정\n\nconst validate = { ... } as const;\n\nexport default {\n  path: 'API endpoint goes here',\n  method: 'get' | 'post' | 'put' | 'patch' | 'delete',\n  meta: {\n    ...\n  },\n  validate,\n  handler: async (ctx) => {\n    // 1. ctx destructuring\n    const { context, user } = ctx.state as { context: DddContext, user: User };\n    \n    // 2. 서비스 호출\n    \n    // 2.1. 서비스 객체 획득\n    const service = context.get(Service);\n    // 2.2. 서비스 params 선언\n    const { a, b, c }: Joi.extractType<typeof paramsSchema> = ctx.request.params;\n    const { x, y, z }: Joi.extractType<typeof inputSchema> = ctx.request.query; (or ctx.request.body)\n    const serviceParams: Parameters<Service['doSomething']> = [a, b, c, x, y, z];\n    // 2.3. 서비스 호출\n    const data: Joi.extractType<typeof outputSchema> = await service.doSomething(...serviceParams); \n    \n    // 3. 서비스 결과값 body 로 설정\n    ctx.body = { data };\n  }\n} as RouterSpec<typeof validate>;\n\n주석도 동일하게 작성합니다.\n[https://github.com/Ecube-Labs/haulla-api/blob/e98e34c6f7399e22bf69a0b505fc42557ea7bc6d/src/routes/generators/payment-methods/post/post.ts#L41]\n\n\n1. CTX DESTRUCTURING\n\n\n2. 서비스 호출\n\n\n2.1. 서비스 객체 획득\n\n1. ddd-context\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243270004/1.+ddd-context]\n의 이유로 아래와 같이 라우트 핸들러에서 context를 사용해 어플리케이션 서비스 객체를 획득하도록 한다.\n\n// ...\nimport { DddContext } from '../../../../lib/ddd';\nimport { QueryIndividualServiceService } from '../../../../services/individual-services/application/service';\n\nexport default {\n  // ...\n  handler: async (ctx) => {\n    // ...\n\n    const queryIndividualServiceService = context.get(QueryIndividualServiceService);\n\n    // ...\n  },\n} as RouterSpec<typeof validate>;\n\n\n2.2. 서비스 PARAMS 선언\n\n다음과 같이 하면 개발 단계에서는 오류를 발견할 수 없고 runtime 에 id 의 타입 불일치로 인한 오류가 발생한다. (스키마에는\nnumber 로 선언했는데 실제 서비스가 요구하는 건 string)\n\nconst inputSchema = Joi.object({\n  id: Joi.number().required(),\n});\n\nconst validate = {\n  body: inputSchema,\n} as const;\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    const { id } = ctx.request.body;\n    // ...\n    const data = await service.doSomething(id); \n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string) {\n    // ...\n  }\n}\n\n이는 ctx.request.body, query, params 는 Record<string, string> 이거나 any type 이기\n때문이다.\n\n번거롭지만 다음과 같이 해야 typesafe 하게 개발할 수 있다.\n\nconst inputSchema = Joi.object({\n  id: Joi.number().required(),\n});\n\nconst validate = {\n  body: inputSchema,\n} as const;\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    const { id } = ctx.request.body;\n    // ...\n    const { id }: Joi.extractType<typeof inputSchema> = ctx.request.body;\n    // 여기서 타입 오류 발생\n    // id 는 inputSchema 에서 추출했으므로 number type.\n    // Parameters<Service['doSomething']>은 [string]이므로 [number]를 [string]에 할당할 수 없다.\n    const doSomethingParams: Parameters<Service['doSomething']> = [id];\n    \n    const data = await service.doSomething(...doSomethingParams); \n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string) {\n    // ...\n  }\n}\n\n\n2.3. 서비스 호출\n\nctx.body 는 any type 이기 때문에 다음과 같이 하면 2.2 와 똑같은 문제가 있다.\n\nconst outSchema = Joi.object({\n  name: Joi.number().required(),\n});\n\nconst validate = {\n  output: {\n    200: { body: Joi.object({ data: outputSchema }) }\n  }\n} as const;\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    // ...\n    const data = await service.doSomething(...doSomethingParams);\n    ctx.body = { data };\n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string): Promise<string> {\n    // ...\n    return 'sw';\n  }\n}\n\n번거롭지만 다음과 같이 해야 typesafe 하게 개발할 수 있다.\n\nconst outSchema = Joi.object({\n  name: Joi.number().required(),\n});\n\nconst validate = {\n  output: {\n    200: { body: Joi.object({ data: outputSchema }) }\n  }\n};\n\nexport default {\n  // ...\n  validate,\n  handler: async (ctx) => {\n    // ...\n    // 여기서 타입 오류 발생\n    // data 는 outputSchema 에서 추출했으므로 type { name: number; }.\n    // 서비스의 리턴 type 은 { name: string } 이므로 서비스의 리턴값을 data 에 할당할 수 없다.\n    const data: Joi.extractType<typeof outputSchema> = await service.doSomething(...serviceParams); \n    ctx.body = { data };\n  },\n} as RouterSpec<typeof validate>;\n\n// Service.ts\nexport class Service {\n  async doSomething(id: string): Promise<{ name: string }> {\n    // ...\n    return { name: 'sw' };\n  }\n}\n\n\n3. 서비스 결과값 BODY 로 설정",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/591200604"
  },
  {
    "pageContent": "[B] HTTP Headers\n\n비표준 헤더(X-*)는 가능한 사용하지 않는다. IANA 레지스트리에 등록된 헤더중 적합한 헤더를 찾아 사용한다.\n\n[H][O] Timezone\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/244416588] 에서 사용하는\nThe-Timezone-IANA 도 같은 맥락으로 채택된 헤더.\n\n\n참조\n\n * https://developer.mozilla.org/ko/docs/Web/HTTP/Headers\n   [https://developer.mozilla.org/ko/docs/Web/HTTP/Headers]\n\n * https://www.iana.org/assignments/message-headers/message-headers.xhtml\n   [https://www.iana.org/assignments/message-headers/message-headers.xhtml]\n\n\n\n\nRESPONSE MESSAGE TRANSLATION(INTERNATIONALIZATION)\n\n서버에서 응답하는 메세지를 그대로 화면에 보여줘야 하는 경우 클라이언트는 Accept-Language를 헤더로 포함해 원하는 언어를 서버에게\n표현한다\n\nhttps://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Accept-Language\n[https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Accept-Language]\n\n서버는 이 헤더에 있는 값을 우선적으로 참조하여 번역된 메세지를 반환하면 된다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2029879329"
  },
  {
    "pageContent": "[B] CSV Export API 개발\n\n\n기본 컨벤션\n\n * 모든 CSV 파일은 서버에서 데이터를 생성하여 응답하도록 한다.\n\n * 응답 헤더는 Content-type: text/csv 를 반드시 포함한다.\n\n * 응답 데이터는 ctx.body = { data: '<csv data>' }; 처럼 data key에 담아서 응답한다.\n   \n   * 프론트엔드에서는 정상적인 모든 API 응답 값이 data 에 들어있다고 가정하고 작성되어 있기 때문이다.\n\n\n대용량 CSV 응답 데이터 컨벤션\n\n제품 통신 로그와 같이 기본적으로 10MB 이상의 데이터를 추출하는 일이 잦은 요청에 적용 할 컨벤션입니다.\n\n * 모든 CSV 파일은 서버에서 데이터를 생성하여 응답하도록 한다.\n\n * 응답 헤더는 Content-type: text/csv 를 반드시 포함한다.\n\n * 데이터를 DB에서 가져오는 경우 Stream으로 가져와야 한다.\n   \n   * async findByClientIdsDateBetweenStream(params: { clientIds: number[]; from: Date; to: Date }) {\n         const { clientIds, from, to } = params;\n     \n         const queryBuilder = this.entityManager.createQueryBuilder(this.entityClass, 'clientLogRaw');\n         return queryBuilder\n             .select([...])\n             .where('clientIdx IN (:...clientIds) AND date >= :from AND date < :to', {\n                 clientIds,\n                 from,\n                 to,\n             })\n             .stream();\n     }\n   \n   * TODO: TypeORM은 query builder가 아니면 Stream으로 받아올수가 없다…\n\n * CSV 변환 또한 Stream pipe를 이용해야 하며, 서비스의 return 값도 Stream으로 내보내야 한다.\n   \n   * import { Transform } from '@json2csv/node';\n     ...\n     async getCsv(params: { clientIds: number[]; from: Date; to: Date }) {\n         const { clientIds, from, to } = params;\n     \n         const clientLogRawsInput = await this.clientLogRawRepository.findByClientIdsDateBetweenStream({\n             clientIds,\n             from,\n             to,\n         });\n         const parser = new Transform(\n             {\n                 fields: [...],\n             },\n             undefined,\n             { objectMode: true },\n         );\n     \n         return clientLogRawsInput.pipe(parser);\n     }\n\n * 응답 데이터 또한 ctx.body = logsStream; 처럼 Stream을 그대로 반환한다.\n\n * 프론트엔드 또한 기존과 다르게 처리해줘야 한다.\n   TODO: code 적용된 permalink\n\n위와 같이 하는 경우 아래와 같은 이점이 있다.\n\n 1. DB에서 가져온 데이터의 chunk+@ 만큼만 메모리를 사용한다.\n\n 2. DB에서 데이터를 전부 가져오기 전에 CSV 변환을 수행할 수 있다.\n\n 3. CSV 변환된 데이터는 즉각 요청자에게 전달되어 빠른 응답의 시작을 기대할 수 있다.\n    \n    1. 단, 데이터를 전부 받아가는 시간이 더 빠르다는 말은 아님. 대체로 약간 더 느릴수밖에 없다.\n    \n    2. 그럼 빠르게 응답을 시작하면 어떤 이점이 있는가?\n       \n       1. 데이터를 받기 시작하면 timeout 에러는 발생하지 않으므로 최종적인 데이터 변환에 오래걸린다고 해도 사용자 입장에서\n          timeout 에러가 발생할 확률이 훨씬 낮아진다.\n       \n       2. 서버에서 모든 데이터를 변환할 때 까지 DB에서 받아온 데이터와 변환중인 데이터를 메모리에 모두 들고 있을 필요가 없다.\n          위와 같이 스트리밍하지 않는 경우 DB에서 가져온 데이터를 전부 변환했다 하더라도, 전부 응답 데이터로 내려주기 전까지는 변환\n          데이터도 모두 메모리에 들고있어야 하므로 가용 리소스에 손해를 본다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2832334896"
  },
  {
    "pageContent": "ICU Message Syntax\n\nhttps://unicode-org.github.io/icu/userguide/format_parse/messages/\n[https://unicode-org.github.io/icu/userguide/format_parse/messages/]\n\n보통 확장 가능한 형태로 지원하니 직접 구현해서 아래와 같은 표준 형태로 쓰면 좋습니다.\n\n테스트는 이 사이트 [https://formatjs.io/docs/intl-messageformat/]에서 가능합니다.\n\n\nNUMBER\n\n\nNUMBER > CURRENCY\n\n{amount, number, currency=USD} # 120 => US$120.00\n{amount, number, currency=KRW} # 120 => ₩120\n\n위 형식이 표준 문법이지만 우리가 사용하는 intl-messageformat은 아래처럼 사용해야한다.\n\n{amount, number, ::currency/EUR} # 100 => €100.00\n{amount, number, ::currency/KRW} # 100 => ₩100\n{amount, number, ::currency/USD} # 100 => US$100.00\n\n\nNUMBER > PERCENTAGE\n\n터키어(lang: tr)은 %가 앞으로 붙는다.\n\n{amount, number, percent} # 1 => 10%, %10\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142"
  },
  {
    "pageContent": "TypeORM + TypeGraphQL 가이드\n\nWIP\n\n\nTYPEORM + TYPEGRAPHQL 조합\n\n\n장점\n\n\n단점\n\n\n\n\nTYPEGRAPHQL\n\nGitHub: https://github.com/MichalLytek/type-graphql\n[https://github.com/MichalLytek/type-graphql]\nHome: https://typegraphql.ml/ [https://typegraphql.ml/]\nGetting started: https://typegraphql.ml/docs/getting-started.html\n[https://typegraphql.ml/docs/getting-started.html]\n\n\n기본적인 사용법\n\n클래스와 데코레이터만 사용해서 GraphQL 객체 타입과 그 필드를 선언할 수 있습니다.\n\nhttps://github.com/MichalLytek/type-graphql/blob/master/docs/types-and-fields.md\n[https://github.com/MichalLytek/type-graphql/blob/master/docs/types-and-fields.md]\n\n@ObjectType()\nclass Recipe {\n  @Field(type => ID) // GraphQLID 스칼라 타입\n  id: string;\n  \n  @Field() // 간단한 타입은 이렇게 선언할 수 있다\n  title: string;\n\n  // Array, Promise같은 제네릭 타입인 경우 이렇게 명시해줘야 한다.\n  // 감싸는 []는 배열의 깊이를 의미한다.\n  // 함수 형식으로 타입을 넘기는 이유는 순환 참조를 막기 위해서라고 한다.\n  @Field(type => [Rate])\n  ratings: Rate[];\n\n  // optional 필드는 nullable 프로퍼티를 지정해야 합니다.\n  @Field({ nullable: true })\n  averageRating?: number;\n}\n\n\n\n\nTYPEORM\n\n\nENTITY\n\nhttps://typeorm.io/#/entities [https://typeorm.io/#/entities] 필독\n\n\nRELATIONS\n\nhttps://typeorm.io/#/relations [https://typeorm.io/#/relations] 필독",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374210603"
  },
  {
    "pageContent": "[gql] Server Error handling\n\n\n현재 문제\n\n 1. 아폴로는 실행중에 에러가 발생한 위치에 따라 핸들링 가능한 위치가 다름\n\n 2. 아폴로는 에러가 발생하면 동시에 요청한 쿼리들도 중단됨\n    \n    1. 부분적으로 성공한 payload라도 받기 위해 전부 성공처럼 처리해서 응답을 하면 에러가 사라져서 클라이언트는 어떤 문제가 발생한지\n       알수 없음\n\n 3. 아폴로가 기본적으로 제공해주는 에러 양식은 프로덕션에서 사용하기 적합하지 않음\n\n여기서 언급한 아폴로의 문제들은 아폴로만의 문제인지, GraphQL 스펙의 한계인지 아직 잘 모름.\n\n\n오류 발생 가능한 위치\n\n 1. 인프라\n    \n    * 서버가 정상적으로 연결되지 않거나 하여 API 서버로 도달하지 못함\n\n 2. 구문 분석\n    \n    * 클라이언트가 잘못된 쿼리를 요청함 → 정확히 잘못된 쿼리의 정의가 명확하지 않음 (파란별)\n      [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/72/1f611.png]\n\n 3. 검증\n    \n    * 유효한 쿼리를 보냈지만, 스키마가 맞지 않는 등 gql validation 과정에서 검증이 실패함\n\n 4. 실행\n    \n    * 클라이언트가 잘못된 입력 값을 보냈거나 리소스를 찾을수 없는 등, 여러 비즈니스 로직에 의한 의도적인 동작\n    \n    * 코드상의 에러로 개발자가 핸들링 하지 않음\n\n\nGRAPHQL 서버 에러 발생 유형\n\n앞에 있는것은 오류가 발생하는 단계입니다.\n\n 1. [인프라] 서버 에러 (흔히 HTTP status 5xx, … 처럼 다룸)\n\n 2. [구문 분석] 클라이언트/요청 에러 (흔히 HTTP status 4xx, 사용자 인증 실패, … 처럼 다룸)\n\n 3. [구문 분석]존재하지 않거나 의도하지 않은 양식의 쿼리를 보낸 경우\n\n 4. [검증] 문법, 스키마 등을 잘못 보내 쿼리의 검증이 실패하는 경우\n\n 5. [실행] 예외처리에 의해 개발자가 의도적으로 오류를 발생시킨 경우\n\n 6. [실행] resolver나 subscription에서 호출하는 코드에서 핸들링하지 않은 에러가 발생한 경우 (개발자 오류)\n\n\n해결을 위한 방법\n\n 1. 실행 단계에서 발생하는 에러는 실제론 발생시키지 않고 스키마에 에러 내용을 포함하여 내보냅니다.\n    \n    1. [https://ecubelabs.atlassian.net/wiki/download/attachments/436699342/image-20200317-054317.png?api=v2]\n       \n       이런 느낌;\n\n 2. 그 외에 구문 분석, 검증 단계에서 발생하는 에러는 사용자에게 디테일하게 주지 않고 추상적으로 줍니다.\n\n 3. … 더 없나?\n\n\n\n--------------------------------------------------------------------------------\n\n\n보안 에러 처리\n\nDB나 다른 여러 민감한 정보가 노출될 가능성이 있는 에러는 미리 잡아서 노출하지 않도록 하는것이 중요합니다.\n그리고 우리가 사용하는 Apollo server는 2~6번에 해당하는 에러를 rewrite할 수 있도록 기능을 지원하기 때문에 이것을 사용하면\n됩니다.\n\nhttps://www.apollographql.com/docs/apollo-server/data/errors/#redacting-the-error-message\n[https://www.apollographql.com/docs/apollo-server/data/errors/#redacting-the-error-message]\n\n\n\n--------------------------------------------------------------------------------\n\n\nREFERENCES\n\n * https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1\n   [https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1]\n\n * https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210\n   [https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210]\n\n * https://www.apollographql.com/docs/apollo-server/data/errors/\n   [https://www.apollographql.com/docs/apollo-server/data/errors/#redacting-the-error-message]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436699342"
  },
  {
    "pageContent": "[gql] Client Error handling\n\nhttps://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210\n[https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601236/image-20200317-073401.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436601236"
  },
  {
    "pageContent": "How to create Custom Error\n\n\n새로운 에러 타입 생성\n\n * ES6 이상의 문법을 지원하는 환경인 경우 → 클래스 상속 이용\n   \n   \n   class CustomError extends Error {\n       constructor(message, info) {\n           super(message);\n           this.name = this.constructor.name; // 에러 출력 시 보통 ${this.name}: ${this.message}\\n${this.stack}의 형태가 됨\n           this.info = info;\n       }\n   }\n\n * 클래스 문법을 사용하지 못하는 경우 → 프로토타입 상속 이용 (혹은 Node의 경우 util.inherits() 이용)\n   \n   function CustomError(message, info) {\n       this.name = 'CustomError';\n       this.info = info;\n       this.message = message;\n       if (Error.captureStackTrace) {\n           Error.captureStackTrace(this, CustomError);\n       }\n   }\n   CustomError.prototype = Error.prototype; // 혹은 Node인 경우 require('util').inherits(CustomError, Error);\n\n\n\n\n\nSTACK TRACE 제어\n\n 1. 일부 브라우저(Firefox 66.0.5)나 Node 이전 버전(< 7)에서 Error 서브 클래스 객체의 stack trace에\n    생성자가 추가되지 않도록 할 때\n    \n    class CustomError extends Error {\n        constructor(message) {\n            super(message);\n            this.name = this.constructor.name;\n            // 아래 코드를 추가하지 않으면 stack trace에 CustomError가 추가되게 됩니다.\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n            }\n        }\n    }\n\n 2. function과 util.inherits() (혹은 prototype 상속) 을 이용해 새로운 Error 서브 클래스 객체에 stack\n    trace를 추가하고 싶을 때\n    \n    function CustomError (message) {\n        this.name = 'CustomError';\n        // 아래 코드를 추가하지 않으면 new CustomError()에 stack 프로퍼티가 존재하지 않게 됩니다.\n        // 두 번째 파라미터로 CustomError를 전달해서 CustomError 함수가 stack trace에 추가되지 않도록 합니다.\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, CustomError);\n        }\n    }\n    \n    CustomError.prototype = Error.prototype; // 혹은 Node의 경우 require('util').inherits(CustomError, Error)\n\n 3. 그 외 에러를 throw한 함수가 stack trace에 추가되지 않길 바랄 때\n    \n    function throwError(type) {\n        switch (type) {\n            case 'database':\n                const err = new Error('database error');\n                Error.captureStackTrace(err, throwError);\n                throw err;\n        }\n    }\n\n\n\n\n\nSTACKTRACELIMIT 설정\n\nclass CustomError extends Error {\n    constructor(message, info) {\n        const prevStackTraceLimit = Error.stackTraceLimit;\n        Error.stackTraceLimit = 3;\n        super(message);\n        Error.stackTraceLimit = prevStackTraceLimit;\n        this.name = this.constructor.name;\n        this.info = info;\n    }\n}\n\n\n\n\n\n\n\n\nREFERENCES\n\n * https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript\n   [https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript]\n * https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Error\n   [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Error]\n * https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt\n   [https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/154305331"
  },
  {
    "pageContent": "에러 코드 (Error Code)\n\n\n개요\n\nimage-20240306-085825.png\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2927394962/image-20240306-085825.png?api=v2]\n\n다른 서버로 요청을 했을 때 해당 서버에서 에러가 나면 axios 에러를 그대로 뱉어 Internal Error 가 뱉어진다.\n\n→ 클라이언트는 500 error일때 something went wrong 오류를 보기때문에 실제 에러가 어떤 에러인지 명확하게 알 수\n없기때문에 클라이언트 메세지를 제대로 넘겨줄 필요성을 느껴 변경한다.\n\n\n구조\n\n우리는 기본적으로 모노레포이기 때문에 모노레포에서 공통적으로 사용하는 패키지는 @pakcages 에서 관리한다.\n\npackages\n|-- error-message\n|   |-- src\n|   |   |-- languages\n|   |   |   |-- en.json\n|   |   |-- index.ts\n|   |   |-- package.json\n|   |   |-- tsconfig.json\n\n\nLANGUAGES\n\n * 에러코드를 해당 언어에 맞도록 에러코드: 해당 언어로 저장되어있는 에러메세지 로 구성된 Json 파일이 모여있다.\n\n\nINDEX.TS\n\n * 에러코드를 해당 언어에 맞는 에러메세지로 변환시켜주는 함수가 있다. (default: english)\n\n\n기대효과\n\n * proxy간의 에러메세지를 통합하여 한곳에서 관리할 수 있다.\n\n * 서버에서 주는 에러메세지도 각 언어에 맞게 번역된 에러메세지로 반환해줄 수 있다.\n\n\n적용\n\n * proxy 되는 서버에서 사용하는 에러메세지\n   \n   * client → server 1 → server 2 의 flow일때 server2에서 에러가 나면 기존 errorMessage는\n     client에게 전달해줄 수 없기 때문에 errorCode를 사용한다.\n\n * hauler web에서 write관련 동작?\n   \n   * hauler web에서 정보 수정, 추가 등이 일어날때 보통 hauler web → tenant server → core api 형태로\n     흘러가기 때문에 core에서 에러가 나면 hauler web에서 알 수 있도록 errorCode를 사용한다.\n     \n     * 테넌트와 core의 통신의 경우 kafka를 활용하지 않고 axios 를 활용하여 동기적으로 처리한다. (core가 실패하면\n       tenant도 실패하도록. → 현재 우리는 이벤트의 실패는 산정하지 않음. 보상 트랜잭션 x)\n\n\n사용 방법\n\n\n에러코드 작성\n\n{\n  \"AAA000\": \"something went wrong\"\n}\n\n\n에러 던지기\n\nif (quote.channel !== 'Online') {\n    throw badRequest(`only online channel quote can be calculated.`, {\n        errorCode: `AAA007`,\n    });\n}\n\n\n에러 핸들러\n\nimport { getErrorMessage } from '@packages/error-message'\n\nif (isBoom(err)) {\n    const { statusCode } = err.output;\n    const { errorMessage, level, errorCode } = err.data ?? ({} as any);\n    rs.status = statusCode;\n    const message = errorCode ? getErrorMessage(errorCode) : errorMessage;\n    rs.body = {\n        errorMessage: message ?? `Something went wrong and we couldn't complete your request.`, // TODO: 메시지 정리\n        errorCode,\n        level,\n    };\n} \n\n * 현재는 Boom 객체일 때만 errorCode를 다루고 있다. ( client message를 제대로 통제하고 있는건 boom 에러일때만\n   하고 있기 때문에)\n\n\nERROR CODE CONVENTION\n\n * 총 길이 6인 문자열로 알파벳 3자리 + 숫자 3자리 로 이루어져있다. (17,576,000개 작성가능)\n\n * 에러코드를 작성할때는 1씩 증가하며 999가 되면 알파벳을 하나 올린다.\n\n * \"AAA000\":\"something went wrong\"\n   \"AAA001\":\"something went wrong\"\n   ...\n   \"AAA999\":\"something went wrong\"\n   \"AAB000\":\"something went wrong\"\n   ...\n   \"DTA451\":\"something went wrong\"\n   ...\n   \"ZZZ998\":\"something went wrong\"\n   \"ZZZ999\":\"something went wrong\"\n\n * 관련 논의 [https://github.com/Ecube-Labs/haulla/pull/705#discussion_r1515355180]\n\n\n변수 사용\n\n * json의 경우 따로 js처럼 template literal을 지원하지 않아 따로 구현한다.\n\n * {{변수}}로 json value에 지정해두고 에러를 던질때 variables에 Record<string,string> 타입으로 치환하고\n   싶은 변수를 key값을 맞춰서 넣으면 된다.\n\n * // error-message/en.json\n   'AAA000': 'hello world {{name}}'\n   \n   // index.js\n   throw badRequest('hello world error',{\n     errorCode: 'AAA000',\n     variables: {\n       name: 'arthur'\n     }\n   })\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2927394962"
  },
  {
    "pageContent": "React Native 개발 가이드",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217383194"
  },
  {
    "pageContent": "iOS 개발 가이드\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34242640"
  },
  {
    "pageContent": "Android 개발 가이드\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/34144356"
  },
  {
    "pageContent": "iOS/Android 공통",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/184516907"
  },
  {
    "pageContent": "Firebase?\n * 1. Firebase ?\n * 2. 어떤 기능들이 있는가?\n   * 2.1. Build\n        * Cloud Functions\n        * Authentication\n        * Hosting\n        * Cloud Storage\n        * Realtime Database\n     \n     * Cloud Firestore vs Realtime Database\n   * 2.2. Release & Monitor\n     * Analytics\n     * Remote Config\n   * 2.3. Engage\n     * Predictions\n     * Cloud Messaging\n     * 동적 링크 + 초대\n * 3. 가격은?\n * 4. 언제 유용한가?\n   * 4.1 비정상 로그 분석 및 성능 모니터링 (Crashlytics)\n     * Crashlytics 을 사용하면 비정상 로그를 모니터링을 할 수 있다.\n     * 다른 도입 후보로는 Sentry, Flurry 등이 거론된다. (여러 제품을 동시에 사용하는 경우도 있다.)\n   * 4.2 사용자 행동 패턴 분석 (Analytics, Predictions, A/B Testing)\n     * Analytics 를 사용하면 사용자 행동 패턴을 분석할 수 있다.\n     * 도입하면 아래와 같은 이점을 얻을 수 있다.\n     * 다른 도입 후보로는 AppsFlyer, Facebook analyst, Amplitude 등이 거론된다.\n   * 4.3 노티피케이션\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-014413.png?api=v2]\n\n\n1. FIREBASE ?\n\n파이어베이스는 구글이 소유하고 있는 애플리케이션 개발 플랫폼이다.\n\n앱에 필요한 여러가지 기능을 클라우드 서비스 형태로 제공해준다. 간단한 앱의 경우 파이어베이스 만으로 개발할 수 있어서 BaaS(Backend\nas a Service) 라고 불리기도 한다.\n\n14년 구글이 인수 후 서비스를 대폭 강화하고 있다.\n\n\n2. 어떤 기능들이 있는가?\n\n앱 개발, 마케팅, 테스트 제품 등 다양한 서비스들이 파이어베이스에 속해있다.\n\n용도와 관심사에 따라 3가지 그룹으로 분류되며, 한 제품이 다중 그룹에 속하는 경우도 있다. (자세한 내용은\nhttps://firebase.google.com/docs [https://firebase.google.com/docs] 참고)\n\n * Build [https://firebase.google.com/docs/build]: 앱 개발\n\n * Release & Monitor [https://firebase.google.com/docs/release]: 앱 품질 유지\n\n * Engage [https://firebase.google.com/docs/engage]: 비즈니스 성장\n\n\n2.1. BUILD [https://firebase.google.com/docs/build]\n\n백엔드 기능을 클라우드 형태로 제공하는 제품 그룹\n\n제품\n\n설명\n\n장점\n\nCloud Firestore [https://firebase.google.com/docs/firestore]\n\n * 클라우드 기반 NoSQL 데이터베이스 제공\n\n * 공간 부족시 자동으로 스케일업\n\n * 데이터 실시간 동기화 지원\n\nML Kit [https://firebase.google.com/docs/ml-kit] (Beta)\n\n * 구글 머신러닝 SDK 제공\n   \n   * High, Low 레벨 API 각각 지원\n\n * 커스텀 모델 사용 가능\n\n * 구글의 머신러닝 지식 활용 가능\n\n * 다양한 기능(텍스트  인식, 얼굴 인식, 언어 식별, 번역 등) 제공\n   (https://firebase.google.com/docs/ml-kit\n   [https://firebase.google.com/docs/ml-kit] )\n\nCLOUD FUNCTIONS [https://firebase.google.com/docs/functions]\n\n * 서버 사이드 개발 도구 제공\n\n * RESTful 형태로 API 오픈 가능\n\n * NodeJS 런타임 환경\n\n * 인증, 분석, 실시간 데이터 베이스 등과 연동 가능\n   \n   * e.g. 특정 데이터 처리 후 푸시 자동 발송\n\nAUTHENTICATION [https://firebase.google.com/docs/auth]\n\n * 인증 서비스 제공\n\n * 소셜 로그인(Google, Facebook, Twitter, Github) 지원\n\n * 이메일, 비밀번호 인증 지원\n\n * 전화번호 인증 지원\n\n * 익명 인증 지원\n\n * 안전한 인증 시스템을 빠르게 구현 가능\n\nHOSTING [https://firebase.google.com/docs/hosting]\n\n * GCP 기반 클라우드 호스팅 제공\n\n * 구글 CDN 서버에 캐싱\n\n * CLI 배포 가능\n\n * 커스텀 도메인 지원\n\n * REST API 지원\n\n * 글로벌 서비스의 접속 속도 이슈에서 자유로움\n\n * GCP 기반의 빠르고 안전한 웹 호스팅\n\n * SSL 인증서 무료 제공\n\nCLOUD STORAGE [https://firebase.google.com/docs/storage]\n\n * 파일 스토리지\n\n * GCP 제품\n\n * 엑사바이트 급 규모까지 확장 가능\n\n * 클라이언트에서 업로드 하기 쉬움\n\nREALTIME DATABASE [https://firebase.google.com/docs/database]\n\n * 클라우드 기반 NoSQL 데이터베이스\n\n * JSON 포멧으로 저장\n\n * Node, Python, Go, and Java server SDKs 지원\n\n * 클라이언트 온/오프라인 변화에 최적화되어 있음\n\n * 실시간 데이터 동기화 지원\n\n\nCLOUD FIRESTORE VS  REALTIME DATABASE\n\nhttps://firebase.google.com/docs/firestore/rtdb-vs-firestore\n[https://firebase.google.com/docs/firestore/rtdb-vs-firestore]\n\n\n\n\n2.2. RELEASE & MONITOR [https://firebase.google.com/docs/release]\n\n품질 향상을 목적으로 하는 제품 그룹\n\n모바일 앱에 많이 사용되는 Analytics, Crashlytics 가 여기 속한다. 적절히 활용하면 성능 이슈를 조기에 찾을 수 있고, 비정상\n종료 발생 여부와 예측 결과를 이메일로 보고 받을 수 있다.\n\n제품\n\n설명\n\n장점\n\nANALYTICS [https://firebase.google.com/docs/analytics]\n\n * 사용자 분석 도구 제공\n\n * 사용자 유입, 기능 사용 통계 제공\n\n * 커스텀 이벤트 등록 지원\n   \n   * ex) 장바구니 등록, 경로 안내 시작\n\n * 확장성과 연계성이 뛰어남\n   \n   * 푸시, 원격 구성, 광고, 비정상 사용자 분석\n\n * 가장 성숙한 분석도구 (GoogleAnalytics + FirebaseAnalytics 통합 버전임)\n\nTest Labs [https://firebase.google.com/products/test-lab]\n\n+\n\nA/B 테스트\n\n * 앱 테스트 환경 제공\n\n * 실제 기기를 클라우드 환경으로 제공\n\n * Expresso, XCTest 지원\n\n * Robo 이용한 지능형 테스트\n\n * 클라우드에 호스팅 된 기기에서 다양한 규모로 앱 테스트를 자동화할 수 있음\n\n * 구글 플레이 알파, 테스트 트랙에 새로운 버전 등록 시, 자동 테스트 가능\n\n * 로그, 스크린샷, 동영상이 포함된 보고서를 받을 수 있음\n\nCrashlytics\n[https://firebase.google.com/products/crashlytics?gclid=CjwKCAjw7--KBhAMEiwAxfpkWPkCC27oZ1GqP5GQjuO2dnAya7YgKPXGfy4bSVHGSorPHAUaT72CQRoCXZ0QAvD_BwE&gclsrc=aw.ds]\n\n * 비정상 종료 분석 도구 제공\n\n * 로그 그룹화 기능 제공\n   \n   * 버전별, 기기별, etc…\n\n * 실시간 보고 기능(Slack, Jira)\n\n * 분석 도구와 연동 가능\n\n * 성숙한 분석도구\n\nPerformance Monitoring [https://firebase.google.com/docs/perf-mon]\n\n * 앱 성능 모니터링 도구 제공\n\n * HTTP 요청, 실행 시간 등을 측정하여, 앱 성능 관련 이슈를 먼저 보고받을 수 있음\n\nAppDistribution [https://firebase.google.com/docs/app-distribution] (Beta)\n\n * 테스트 앱 배포 서비스\n\n * 테스트 앱 배포 방식을 통합할 수 있음 (AppStore 테스트 플라이트, PlayStore 내부 테스트 트랙을 대체함)\n\nREMOTE CONFIG [https://firebase.google.com/docs/remote-config]\n\n * 앱 원격 제어 도구 제공\n\n * 키-값 자료구조 형태의 저장소 제공\n\n * 앱 심사 거치지 않고 동작, 모습을 동적으로 바꿀 수 있음\n\n * 다양한 요소를 기준으로 개인화 설정 가능\n   \n   * 기기, 유형, 국가, 사용자 패턴\n\n\n\n\n2.3. ENGAGE [https://firebase.google.com/docs/engage]\n\n비즈니스의 성장을 돕는 제품 그룹\n\n사용자 데이터를 기반으로 사용 타겟층을 분석하고, 예측하여 발전 방향을 잡을 수 있게 도와준다.\n\n제품\n\n설명\n\n장점\n\nPREDICTIONS [https://firebase.google.com/docs/predictions]\n\n * 수집 데이터 기반으로 다양한 예측 지표 제공\n\n * 수집한 데이터들을 기반으로 앱 사용자 분석\n   \n   * 누가 이탈할 가능성이 있는가?\n   \n   * 누가 주로 비용을 지출하는가?\n\n * 머신러닝 킷 활용해 더 다양한 예측 가능\n\nCLOUD MESSAGING [https://firebase.google.com/docs/cloud-messaging]\n\n * 추상화된 푸시 발송 기능 제공\n\n * 고급 타겟팅 가능 제공\n   \n   * 인구, 행동…\n\n * 현지시간 발송 기능 제공\n\n * 분석, 예측 도구와 연동하여 푸시 자동화 가능\n\n * 멀티 플랫폼 지원\n\nIn-App Messaging (Beta)\n\n * 개별 사용자들 맞춤 타깃 메시지 발송기능 제공\n\n * 예측 제품과 연계\n\n * 개별 사용자 행동 패턴에 밀접한 푸시 발송이 가능해진다.\n\n동적 링크 [https://firebase.google.com/docs/dynamic-links] + 초대\n[https://firebase.google.com/docs/invites]\n\n * \n\n\n\n\n\n\n\n3. 가격은?\n\n제품이 너무 많고 변동도 심해서\nhttps://firebase.google.com/pricing/?gclid=CjwKCAiA-_L9BRBQEiwA-bm5fpCPMi2xOC-UgxPZ8BAU09l9k5LGv-lWaaVKufL-ncqs6FhpH94RwBoCRngQAvD_BwE\n[https://firebase.google.com/pricing/?gclid=CjwKCAiA-_L9BRBQEiwA-bm5fpCPMi2xOC-UgxPZ8BAU09l9k5LGv-lWaaVKufL-ncqs6FhpH94RwBoCRngQAvD_BwE]\n참고하자.\n\n\n4. 언제 유용한가?\n\n\n4.1 비정상 로그 분석 및 성능 모니터링 (CRASHLYTICS)\n\n모바일 앱이 궤도에 오르면 비정상 종료 모니터링은 필수이다. 특히 배포 주기가 짧은 경우 중요성은 더 높아진다.\n\nCRASHLYTICS 을 사용하면 비정상 로그를 모니터링을 할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-023743.png?api=v2]\n\n도입하면 아래와 같은 이점을 얻을 수 있다.\n\n * 오류 선제 보고: 치명적 이거나, 지속적으로 발생하는 오류에 대해 지속적으로 보고 받을 수 있다. (Slack, Jira 연동 가능)\n\n * 정교한 에러 분석: 앱 버전, 유저 운영체제, 디바이스 종류와 같은 요소로 에러를 정교하게 분석할 수 있다.\n\n\n\n다른 도입 후보로는 SENTRY, FLURRY 등이 거론된다. (여러 제품을 동시에 사용하는 경우도 있다.)\n\n회사\n\n개발 환경\n\n도구\n\n관련 링크\n\n카카오뱅크\n\nNative\n\n * Sentry(On-premise)\n\n * Firebase Crashlytics\n\n\n\n리디\n\nReact Native\n\n * Firebase Crashlytics\n\nhttps://velog.io/@velopert/react-native-1year-review\n[https://velog.io/@velopert/react-native-1year-review]\n\n올리브영\n\nReact Native\n\n * Firebase Crashlytics\n\nhttps://tech.oliveyoung.co.kr/tech/2101052132/\n[https://tech.oliveyoung.co.kr/tech/2101052132/]\n\n우아한형제들(띠잉)\n\nNative\n\n * Firebase Crashlytics\n\nhttps://techblog.woowahan.com/2688/ [https://techblog.woowahan.com/2688/]\n\n\n\n\n4.2 사용자 행동 패턴 분석 (ANALYTICS, PREDICTIONS, A/B TESTING)\n\n비즈니스를 성장 시키려면 사용자에 대한 지속적인 분석이 병행되어야 한다.\n\nANALYTICS 를 사용하면 사용자 행동 패턴을 분석할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211008-061851.png?api=v2]\n\n\n\n도입하면 아래와 같은 이점을 얻을 수 있다.\n\n * 잠재고객 특징 파악 : 인구통계, 지역, 관심분야, 행동, 모바일, 교차기기\n\n * 실시간 분석: 위치, 트래픽소스, 콘텐츠, 이벤트, 전환 수\n\n * 고객 정보 분석 : 소스/매체, 채널\n\n * 구글 광고와 연동\n\n * 뛰어난 연동성\n   \n   * Predictions, A/B Testing과 연계 → 사용자 참여도 높일 수 있음, 데이터에 근거한 제품 개선이 가능\n   \n   * 비정상 종료 분석과 연계 → 품질 향상\n\n\n\n다른 도입 후보로는 APPSFLYER, FACEBOOK ANALYST, AMPLITUDE 등이 거론된다.\n\n * 분석도구는 마케팅 팀의 요청에 의해 도입하는 경우가 많다. 그래서 마케터가 어떤 도구를 잘 다루냐에 따라 도입이 결정된다.\n\n * 참고로\n   https://www.e-nor.com/blog/general/google-analytics-and-google-tag-manager-dominate-fortune-500-in-2015\n   [https://www.e-nor.com/blog/general/google-analytics-and-google-tag-manager-dominate-fortune-500-in-2015]\n   설문 결과에 따르면 GA 가 압도적이다.\n\n * 다양한 분석을 위해 2개 이상 제품을 동시에 적용하는 경우도 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-035033.png?api=v2]\n\n회사\n\n개발 환경\n\n도구\n\n관련 링크\n\n카카오뱅크\n\nNative\n\n * Sentry(On-premise)\n\n\n\n직방\n\nReact Native\n\n * AppsFlyer\n\n\n\n숨고\n\nReact Native\n\n * Sentry\n\n\n\n올리브영\n\nReact Native\n\n * Facebook Pixel [https://www.facebook.com/business/learn/facebook-ads-pixel]\n\n * Google Tag Manager\n   [https://marketingplatform.google.com/intl/ko/about/tag-manager/]\n\nhttps://tech.oliveyoung.co.kr/tech/2101052132/\n[https://tech.oliveyoung.co.kr/tech/2101052132/]\n\n\n\n\n4.3 노티피케이션\n\n푸시 알림 도입을 고려하고 있는가? 그냥 사용하자.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2137063435/image-20211006-033745.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2137063435"
  },
  {
    "pageContent": "AppCenter?\n\n\n1. APPCENTER? [https://visualstudio.microsoft.com/ko/app-center/faq/]\n\n모바일 및 데스크톱 앱을 지속적으로 빌드, 테스트, 릴리즈, 모니터링 할 수 있도록 도와주는 서비스이다.\n\n마이크로소프트 제품으로 다양한 운영체제, 플랫폼을 지원하고 있다.\n\nOS\n\nPlatform\n\niOS\n\n * Object-C / Swift\n\n * React Native\n\n * Cordova\n\n * Xamarin\n\n * Unity\n\nAndroid\n\n * Java / Kotlin\n\n * React Native\n\n * CordovaPreview\n\n * Xamarin\n\n * Unity\n\nWindows\n\n * UWP\n\n * WPF\n\n * WinForms\n\n * Unity\n\nmacOS\n\n * Objective-C / Swift\n\ntvOS\n\n * Objective-C / Swift\n\nCustom\n\n\n\n\n2. 가격은?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-035628.png?api=v2]\n\n\n\n기본 기능들은 무료이다.\n\n테스트 기능을 사용하려고 하거나, 빌드 규모를 키우려고 할 때 유료 모델을 구독하면 된다.\n\n가격은 https://azure.microsoft.com/ko-kr/pricing/details/app-center/\n[https://azure.microsoft.com/ko-kr/pricing/details/app-center/] 에서 확인 가능하다.\n\n\n3. 기능은?\n\n기능\n\n세부 기능\n\n설명\n\nBuild [https://docs.microsoft.com/en-us/appcenter/build/]\n\nBuild\n\n * 앱 빌드\n   \n   * 저장소: Azure DevOps, GitHub, Bitbucket, Gitlab\n   \n   * 타입: 수동 , 자동\n\nTest [https://docs.microsoft.com/en-us/appcenter/test-cloud/] (유료, Only mobile)\n\nTest runs\n\n * 앱 테스트\n   \n   * Appium, Calabash, Espresso, XCUIText 지원\n\n * 방식\n   \n   * Appcenter CLI\n   \n   * REST API\n\nDevice sets\n\n * 테스트 그룹 생성 및 관리\n\n * 실제 장치를 클라우드 형태로 대여\n   \n   * iOS - iPhone 12, SE, 7, etc…\n   \n   * Android - Pixel 5, Galaxy S21, Note, etc…\n\nDistribute [https://docs.microsoft.com/en-us/appcenter/distribution/]\n\nReleases\n\n * 앱 배포\n   \n   * 내부 테스트\n   \n   * AppStore 배포\n\n * 방식\n   \n   * 콘솔\n   \n   * CLI\n   \n   * API\n     [https://github.com/microsoft/appcenter-Xamarin.UITest-Demo/blob/main/ac-distribute.sh]\n\nGroups\n\n * 테스터 그룹 생성 및 관리\n\n * 테스터 초대 방식\n   \n   * 이메일\n\nStores\n\n * 앱 스토어(PlayStore, AppStore) 연동\n\n * 권한 획득 방식\n   \n   * AppStore: 애플 계정 로그인\n   \n   * PlayStore: GCP OAuth\n\nCodePush (Only react-native)\n\n * JS 번들 호스팅\n   \n   * 심사 없이 앱 업데이트가 가능해짐\n\nDiagnostics [https://docs.microsoft.com/en-us/appcenter/diagnostics/]\n\nIssues\n\n * Crash 로그 수집\n\nSymbols\n\n * 에러 원인을 상세하게 파악하기 위한 Symbol file 관리\n   \n   * dSYMs\n   \n   * appxsym\n   \n   * abit.so\n\nAnalytics [https://docs.microsoft.com/en-us/appcenter/analytics/]\n\nOverview\n\n * 앱 통계 제공\n   \n   * 활성 유저\n   \n   * 세션 횟수, 유지 시간\n   \n   * 디바이스 종류\n   \n   * 나라, 언어\n\nEvents\n\n * 이벤트 조회\n\n * 앱에서 커스텀 이벤트 발생시키면 이곳에 표시됨\n\nLog flow\n\n * 실시간 로그 확인\n\nSetting\n\nData management\n\n * 데이터 관리\n\n * Diagostics 데이터 유지 기간 설정\n\nServices\n\n * 외부 연동 관리\n\n * 버그 자동 티켓 생성 연동\n   \n   * Github issues\n   \n   * Jira\n\nWebhooks\n\n * 웹훅 관리\n\n * 트리거 종류\n   \n   * 빌드 성공, 실패\n   \n   * 앱 배포\n   \n   * 에러 발생\n\nExport\n\n * 데이터 Azure service 로 추출\n\nEmail notifications\n\n * 이메일 알림 관리\n\n * 트리거 종류\n   \n   * 빌드\n   \n   * 배포\n   \n   * 에러\n   \n   * 테스트\n\n * 발송 옵션\n   \n   * 받지 않음\n   \n   * 즉각\n   \n   * 하루\n\nApp API Tokens\n\n * API Token 발급 및 관리\n   \n   * Full Access, Read Only\n\n * REST-API [https://openapi.appcenter.ms/#/distribute/devices_deviceDetails] 에서\n   사용 가능함\n\n\n4. 언제 유용한가?\n\n\n4.1 REACTNATIVE 앱을 빠르게 업데이트 하고 싶다면 (CODE PUSH)\n\n코드 푸시는 RN 플랫폼만 사용할 수 있는 기능으로 JS Bundle을 원격지(AppCenter)에 호스팅해 사용하는 개념이다.\n\n컨셉은 대략적으로 아래와 같다.\n\n일반적인 앱 동작\n\n코드 푸시 적용한 앱의 동작\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-035702.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-035715.png?api=v2]\n\n\n\n앱 심사는 자칫하면 굉장히 매우 긴 시간이 소요될 수 있는 과정이다. 빨라도 하루 정도는 생각해야 한다.\n\n하지만 코드 푸시를 사용하면 이런 과정 없이 곧바로 업데이트할 수 있다. 사용자는 재실행만 하면 곧바로 최신 앱을 사용할 수 있게된다. (굉장히\n굉장히 굉장히 대단히 큰 이점이다)\n\n일반적인 앱 배포 플로우\n\n코드 푸시를 적용한 앱 배포 플로우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/a80486b2-d1ca-4152-a00b-0becde8a814b.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/1978630b-567a-4d25-81fa-dcb86b75f6a3.png?api=v2]\n\n\n\n\n사용하는 회사들을 알아보자\n\n궁금해서 찾아봤는데 리액트 네이티브를 도입한 대부분의 회사들이 코드 푸시를 사용하고 있는 것을 확인할 수 있었다. 코드 푸시 쓰고 있는 회사만\n찾은 것은 절때 아니다.\n\n서비스\n\n플랫폼\n\nAppCenter\n\nCodePush\n\n비고\n\n올리브영\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://tech.oliveyoung.co.kr/tech/2101052132/\n[https://tech.oliveyoung.co.kr/tech/2101052132/]\n\n리디북스\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://ridicorp.com/story/react-native-1year-review/\n[https://ridicorp.com/story/react-native-1year-review/]\n\n제로카\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://seokjun.kim/react-native-in-production-2/\n[https://seokjun.kim/react-native-in-production-2/] 서비스 중지함\n\n직방\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://www.wanted.co.kr/wd/78116 [https://www.wanted.co.kr/wd/78116]\n\n클라썸\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://www.wanted.co.kr/wd/31020 [https://www.wanted.co.kr/wd/31020]\n\n숨고\n\nReact Native\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\n\nhttps://medium.com/soomgo-tech/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%95%B1-%EB%A7%A4%EC%A3%BC-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0-90e4e3d243ff\n[https://medium.com/soomgo-tech/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%95%B1-%EB%A7%A4%EC%A3%BC-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0-90e4e3d243ff]\n\n\n\n\n4.2 비정상 종료 모니터링이 필요할 때 (DIAGNOSTICS)\n\n앱 센터는 비정상 종료 모니터링 기능을 제공한다.\n\n * 왜 죽었는지\n\n * 언제 발생했는지\n\n * 어디서 발생했는지\n\n * 몇번 발생했는지\n\n * 어느 환경(버전, 디바이스) 에서 발생했는지\n\n지라, 깃허브 연동해서 이슈 티켓을 자동으로 생성할 수도 있다.\n\n비정상 종료 발생 목록\n\n종료 이슈 상세\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/0b2b8b97-e587-450c-80ce-55f82414dd5c.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/94711219-e132-4ae3-9263-06cabf2bc7d3.png?api=v2]\n\n\n\n\n\n\n4.3 사용자에 대한 분석이 필요할 때 (ANALYTICS)\n\n\n4.3.1 인구 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/c17c8b15-3211-49aa-95e8-a11b806b0c7e.png?api=v2]\n\n * 활성유저 수\n\n * 세션 수, 유지 기간\n\n * 디바이스 종류\n\n * 사용자 나라, 언어\n\n * 버전 별 설치 수\n\n\n4.3.2 실시간 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-040318.png?api=v2]\n\n\n4.3.3 행동 분석\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2204991524/image-20211015-040109.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2204991524"
  },
  {
    "pageContent": "[RN] 스플래시 화면\n\n\n스플래시 화면?\n\n앱 실행 후 1~2초 정도 잠깐 노출되는 화면을 의미한다.\n\n목적은 다양하지만 본래의 목적은 앱이 로딩되기까지 나타나는 화면 공백을 개선하기 위함이다.\n\n * 로딩 중 발생하는 화면 공백 개선\n\n * 브랜드나 앱 이미지 각인\n\n * 로딩화면에서 로직 처리\n\n\n\n\n구현\n\n스플래시 화면은 플랫폼별로 각각 추가해야 한다. RN 으로 스플래시 화면을 만들면 앱 구동 시 흰 화면이 잠깐 보이다가 RN 스플래시 화면이\n렌더링 된다.\n\n\nIOS\n\nLaunchScreen.storyboard 에서 작업하면 된다.\n\n이미지, 텍스트, … 등의 iOS 컴포넌트를 사용할 수 있다.\n\n\nANDROID\n\n2021.11.22 기준 안드로이드 스플래시는 통 이미지로 받아야 한다.\n\niOS 처럼 네이티브 컴포넌트로 스플래시 화면을 만들 수 없다.\n\n\n1. ANDROID/APP/SRC/MAIN/RES/VALUES/DRAWABLE/SPLASH.XML 와 같이 XML 파일을 만들고 스플래시 화면\n설정\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:drawable=\"@color/colorBlack\" />\n    <item>\n        <bitmap\n            android:gravity=\"center\"\n            android:src=\"@drawable/download\" />\n    </item>\n</layer-list>\n\n\n2. ANDROID/APP/SRC/MAIN/RES/VALUES/THEMES.XML 에 SPLASHTHEME 를 추가\n\n <!-- Base application theme. -->\n    <style name=\"ThemeXXX\">\n...\n\n<style name=\"SplashTheme\" parent=\"Theme.AppCompat.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/background_splash</item>\n</style>\n\n\n3. ANDROIDMANIFEST.XML 에서 최초 실행되는 액티비티의 테마로 SPLASHTHEME를 설정\n\n<activity\n    android:name=\".MainActivity\"\n    android:label=\"@string/app_name\"\n    android:theme=\"@style/SplashTheme\"> // 이곳\n...\n\n\n\n\n결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1934295069/ezgif.com-gif-maker%20(2).gif?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1934295069"
  },
  {
    "pageContent": "[RN] 이미지 관리\n\n이미지는 번들에 포함시키거나 앱 리소스에 포함되어야 한다.\n\n번들에 포함되면 번들 사이즈가 커지기 때문에 1) 코드 푸시할 때 불리 2) 초기화 오래 걸림\n\n앱 리소스에 포함 되면 1) 코드 푸시로 이미지 수정 불가\n\n장단점을 고려해서 선택하면 된다.\n\n * 번들에 이미지 추가\n * 앱 리소스에 이미지 추가\n   * iOS\n   * Android\n * 참고\n\n\n번들에 이미지 추가\n\nsrc/assets 에 놔두면 된다. easy.\n\n\n앱 리소스에 이미지 추가\n\niOS 에서 image set 이름, Android 에서 파일 이름이 동일해야 한다.\n\n\nIOS\n\nXcode > $Proejct > Images.xcassets\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2009759749/image-20210706-074827.png?api=v2]\n\n\nANDROID\n\n|-- android\n| | -- app\n| | | -- src\n| | | | -- main\n| | | | | -- res\n| | | | | | -- drawable-mdpi\n| | | | | | | -- logo.png\n| | | | | | -- drawable-xhdpi\n| | | | | | | -- logo.png\n| | | | | | -- drawable-xxhdpi\n| | | | | | | -- logo.png\n\n안드로이드에서 drawble 에 들어가는 파일 이름은 대문자를 허용하지 않는다.\n\n * drawable-mdpi\n   \n   * iOS image set 1x 이미지에 대응\n\n * drawable-xhdpi\n   \n   * iOS image set 2x 이미지에 대응\n\n * drawable-xxhdpi\n   \n   * iOS image set 3x 이미지에 대응\n\n\n참고\n\nhttps://reactnative.dev/docs/images [https://reactnative.dev/docs/images]\n\nhttps://mesign.tistory.com/11 [https://mesign.tistory.com/11]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2009759749"
  },
  {
    "pageContent": "[RN] 이미지 피커 선택\n\n\n# IMAGEPICKER?\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/ezgif.com-gif-maker.gif?api=v2]\n\n앱이 사용자로부터 이미지를 전달받을 수 있는 수단.\n\n\n\n\n# TL;DR\n\n--------------------------------------------------------------------------------\n\n * 가장 인기있는 이미지 피커는 react-native-image-picker 이다.\n\n * 가장 성숙한 이미지 피커는 react-native-image-picker 이다.\n\n * 비디오 길이 제한이 필요한 경우는 react-native-image-picker를 사용해야한다.\n\n * 단순 이미지 피커가 필요한 경우는 react-native-image-picker 사용하면 된다\n\n * 이미지 편집(crop, rotation) 기능이 필요한 경우는 react-native-image-crop-picker 를 사용해도 좋다\n   \n   * react-native-image-picker 와 이미지 편집 라이브러리의 조합으로도 구현할 수는 있다.\n     \n     * (ex react-native-image-picker + react-native-image-crop-picker)\n\n\n\n\n# 이미지 피커 라이브러리 비교\n\n--------------------------------------------------------------------------------\n\n\n1. 기능 비교\n\n기능\n\nreact-native-image-picker\n\nreact-native-image-crop-picker\n\n카메라 촬영\n\n✅\n\n✅\n\n전면 카메라\n\n✅\n\n✅\n\n후면 카메라\n\n✅\n\n✅\n\n갤러리 선택\n\n✅\n\n✅\n\n이미지 최대 크기\n\n✅\n\n✅\n\n이미지 퀄리티 조정\n\n✅\n\n✅\n\n이미지 base64 반환\n\n✅\n\n✅\n\n비디오\n\n✅\n\n✅\n\n비디오 길이 제한\n\n✅\n\n❌\n\n이미지 편집(crop, rotation)\n\n❌\n\n✅\n\n여러 이미지 선택\n\n✅\n\n✅\n\n이미지 개수 제한\n\n(파란별)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/72/26a0.png]\n(Only iOS)\n\n❌\n\n이미지 초기값\n\n❌\n\n❌\n\n\n2. 구현 모습 비교\n\n플랫폼\n\n\nREACT-NATIVE-IMAGE-PICKER\n\n\nREACT-NATIVE-IMAGE-CROP-PICKER\n\nreact-native-image-crop-picker crop\n\nIOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-065243.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070016.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070244.png?api=v2]\n\n\n\nAOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-065907.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070047.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070212.png?api=v2]\n\n\n\n\n3. 인기 비교\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070709.png?api=v2]\n\n\n4. 성숙정도 비교\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2302967835/image-20220118-070721.png?api=v2]\n\n\n5. 라이브러리 용량(UNPACK) 비교\n\n * react-native-image-picker: 143 kb\n\n * react-native-image-crop-picker: 2.17 mb\n\n * @baronha/react-native-multiple-image-picker: 129 kb\n\n\n# 결론\n\n단순 이미지 피커 기능만 필요한 경우에는 react-native-image-picker 를 사용하면 된다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2302967835"
  },
  {
    "pageContent": "[RN] 버전 업그레이드\n\nhttps://reactnative.dev/docs/upgrading [https://reactnative.dev/docs/upgrading]\n\nhttps://react-native-community.github.io/upgrade-helper/\n[https://react-native-community.github.io/upgrade-helper/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2337243155"
  },
  {
    "pageContent": "abc\n\nStep1\n\nhttps://reactnative.dev/docs/native-components-ios#ios-mapview-example\n[https://reactnative.dev/docs/native-components-ios#ios-mapview-example]\n\n// RNTMapboxNavigationManager.m\n#import <MapKit/MapKit.h>\n\n#import <React/RCTViewManager.h>\n\n@interface RNTMapboxNavigationManager : RCTViewManager\n@end\n\n@implementation RNTMapboxNavigationManager\n\nRCT_EXPORT_MODULE(RNTMapboxNavigation)\n\n- (UIView *)view\n{\n  return [[MKMapView alloc] init];\n}\n\n@end\n\n// MapView.ts\n\nimport { requireNativeComponent } from 'react-native';\n\n// requireNativeComponent automatically resolves 'RNTMapboxNavigation' to 'RNTMapboxNavigationManager'\nconst MapView = requireNativeComponent('RNTMapboxNavigation');\n\nexport { MapView };\n\n\n\nStep2\n\nhttps://reactnative.dev/docs/native-modules-ios#exporting-swift\n[https://reactnative.dev/docs/native-modules-ios#exporting-swift]\n\n// RNTMapboxNavigationManager.m\n#import \"React/RCTViewManager.h\"\n\n@interface RCT_EXTERN_MODULE(RNTMapboxNavigationManager, RCTViewManager)\n@end\n\n// RNTMapboxNavigationManager.swift\nimport MapKit\nimport React\n\n@objc(RNTMapboxNavigationManager)\nclass RNTMapboxNavigationManager: RCTViewManager {\n  // https://github.com/facebook/react-native/blob/051082117059e461f340f0fb7b0bde3db835e5dd/React/Views/RCTViewManager.h#L40\n  override func view() -> UIView! {\n    return MKMapView();\n  }\n}\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1838645266"
  },
  {
    "pageContent": "[DEPRECATED] 네이티브 리소스 교체(이미지)\n\n\n\n * 제플린 - 이미지 EXPORT\n\n덤스터 이미지 교체\n* iOS\n* Android\n* 네이밍 컨벤션\n\n\n\n\n\n\n\n\n\n\n\n\n\n제플린 - 이미지 EXPORT\n\n\n\n\n * 현재 제플린 프로젝트가 안드로이드 프로젝트로 셋팅 되어 있기 때문에 Android aseet에 맞게 export된다. ( 제플린에서\n   ios, android 둘다 설정은 현재 안된다. )\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-03-12%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.33.47.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n * iOS Asset에 맞게 이미지 넣는 방법\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/messageImage_1583991119930.jpg?api=v2]\n\n * 이렇게 매칭 시켜주면 된다.\n   * 1x = hdpi\n   * 2x = xhdpi\n   * 3x = xxhdpi\n\n\n\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n덤스터 이미지 교체\n\n\n\n\n\nIOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/image2019-10-23_18-56-58.png?api=v2]\n\n * Xcode 에서 Images.xcassets 내에 있는 이미지를 교체하면 된다.\n * Drag & Drop 방식으로 1x, 2x, 3x 모두 교체.\n * iOS 는 image set 이름으로 이미지를 찾기 때문에 변경된 이미지 이름이 기존 이미지 이름과 달라도 무방하다.\n\n\n\n\n\nANDROID\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227115287/image2019-10-23_19-5-50.png?api=v2]\n\n * File system 에서 android > app > src > main > res > drawable 내에 있는 이미지를 교체하면\n   된다.\n * 전달받은 이미지 중 1x 이미지만 사용한다.\n * Android 에서는 파일 이름으로 이미지를 찾기 때문에 파일 이름이 변경 되면 안된다.\n\n\n\n\n\n\n\n\n 네이밍 컨벤션\n\n\n\n\n * snake를 이미 쓰고 있으므로.. snake로 하기로 한다\n   * google_map\n   * yard_2\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227115287"
  },
  {
    "pageContent": "사용자별 가이드\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/203751783"
  },
  {
    "pageContent": "Test Flight\n\n\n\n * App Store Connect 사용자 등록\n * Test Flight 테스터 등록\n\n\n\n\n\n\n\nAPP STORE CONNECT 사용자 등록\n\nApp Store Connect [https://appstoreconnect.apple.com] > Users and Access\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/193200168/image2019-8-9_11-10-52.png?api=v2]\n\n\n\n\n+ 버튼\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/193200168/image2019-8-9_11-11-25.png?api=v2]\n\n\n\n\n항목값First Name이름Last Name성Email반드시 애플 아이디여야 한다Roles상황에 따라 다른데 단순 테스터는 Marketing\n으로 충분함Apps앱\n\n사용자를 추가하면 초대장이 메일로 발송되고 사용자가 이를 승낙해야 App Store Connect 사용자 등록이 완료 된다.\n\n\nTEST FLIGHT 테스터 등록\n\nApp Store Connect 등록이 완료된 사용자만 테스터로 추가가 가능하다.\n\nApp Store Connect > My Apps > 테스트 하려는 앱 > App Store Connect Users 에서 테스터 추가하면\n된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/193200168/image2019-8-9_11-16-28.png?api=v2]\n\n테스터를 추가하면 다시 한번 초대장이 메일로 발송되고 사용자가 이를 승낙해야 Test Flight 테스터 등록이 완료 된다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/193200168"
  },
  {
    "pageContent": "[iOS] 버전 별 이슈",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227115091"
  },
  {
    "pageContent": "[iOS] 푸시 인증서\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/228655107"
  },
  {
    "pageContent": "[iOS] 시행착오\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/271188637"
  },
  {
    "pageContent": "[iOS] Swift\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696008"
  },
  {
    "pageContent": "[iOS] Xcode\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/291078172"
  },
  {
    "pageContent": "[iOS] 배포\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374210650"
  },
  {
    "pageContent": "[iOS] URL\nSchemes[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/11.gif?api=v2]\n * 작업\n   * 1. 프로젝트 Info 탭 이동\n   * 2. URL Types 설정 (Identifier, URL Schemes)\n * 기타\n   * 1. 호출 방법\n   * 2. 앱에서 URL Scheme parameter 확인 및 사용\n\n테스트 화면\n\n외부링크를 통해 앱이 열려야 하는 경우 URL Scheme를 사용합니다. 주로 결제, 소셜 로그인 연동 시 사용합니다.\n\n\n작업\n\n\n1. 프로젝트 INFO 탭 이동\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/image-20200317-180950.png?api=v2]\n\n\n2. URL TYPES 설정 (IDENTIFIER, URL SCHEMES)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/image-20200317-180938.png?api=v2]\n\n\n\n\n기타\n\n\n1. 호출 방법\n\n * 웹에서 호출\n\nhaulla://?token=ABCD\n\n\n2. 앱에서 URL SCHEME PARAMETER 확인 및 사용\n\nfunc application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    print(\"test: url=\\(url.absoluteString)\")\n    return true\n}\n\n * SceneDelegate 를 사용할 경우 \n\nfunc scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n    if let url = URLContexts.first?.url {\n        print(\"test: url=\\(url.absoluteString)\")\n    }\n}\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436961681/image-20200317-180925.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436961681"
  },
  {
    "pageContent": "[iOS] 빌드 환경 별 키 관리\n * Build Settings > User-Defined\n * Info.plist\n * AppDelegate.m\n\n\nBUILD SETTINGS > USER-DEFINED\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141487123/image-20210910-054031.png?api=v2]\n\n\nINFO.PLIST\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141487123/image-20210910-054136.png?api=v2]\n\n\nAPPDELEGATE.M\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n#ifdef FB_SONARKIT_ENABLED\n  InitializeFlipper(application);\n#endif\n\n  [GMSServices provideAPIKey:[[NSBundle mainBundle] objectForInfoDictionaryKey:@\"GoogleMapApiKey\"]]; // add this line using the api key obtained from Google Console",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2141487123"
  },
  {
    "pageContent": "[iOS] AutoFill 구현\n * 1. iOS 프로젝트 구성\n   * 1.1 Associated Domains 활성화 및 도메인 명시\n   * 1.2 AutoFill Credential Provider 활성화\n * 2. Associated Domains 구성\n   * 2.1 apple-app-site-association 파일 생성 및 앱 정보 기입\n   * 2.2 apple-app-site-association 호스팅\n     * 예시\n     * 예시 PR\n * 3. 앱에 AutoFill 적용\n   * 3.1 인증정보 힌트 활성화\n   * 3.2 인증정보를 아이클라우드 키체인에 저장\n * 4. 테스트\n\nAutoFill은 Shared web credentials\n[https://developer.apple.com/documentation/security/shared_web_credentials] 방식의\n브릿지를 통해 인증정보를 공유하는 방식을 사용합니다.\n\n예시코드\n\n앱: https://github.com/Ecube-Labs/haulla-hauler-mobile/pull/85\n[https://github.com/Ecube-Labs/haulla-hauler-mobile/pull/85]\n\n웹: https://github.com/Ecube-Labs/haulla-hauler-front/pull/353\n[https://github.com/Ecube-Labs/haulla-hauler-front/pull/353]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-081542.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-081356.png?api=v2]\n\n\n1. IOS 프로젝트 구성\n\n\n1.1 ASSOCIATED DOMAINS 활성화 및 도메인 명시\n\n앱을 설치하면 Associated Domains 목록에 적혀있는 도메인에 접근하여 권한을 검증을 시도합니다.\n\nXcode -> Capabilites -> Associated Domains 을 활성화합니다.\n\nAssociated Domains 목록이 활성화되면 apple-app-site-association 파일 호스팅 도메인(2번 참고)을\nwebcredentials:{domain} 형식으로 추가해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-084848.png?api=v2]\n\n\n1.2 AUTOFILL CREDENTIAL PROVIDER 활성화\n\nCapabilites -> AutoFill Credential Provider 를 활성화합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-085447.png?api=v2]\n\n\n2. ASSOCIATED DOMAINS 구성\n\nAssociated Domains 도메인 검증에 사용되는 apple-app-site-association 파일 만들고 호스팅하는 작업이\n필요합니다.\n\n\n2.1 APPLE-APP-SITE-ASSOCIATION 파일 생성 및 앱 정보 기입\n\n확장자 없는 apple-app-site-association 파일을 만들고 webcredentials 을 적어줍니다.\n\n이때 앱은 TeamID + BundleID 조합으로 적어주면 되고 배열 형태로 작성하면 됩니다.\n\n{\n    \"webcredentials\": {\n        \"apps\": [\n            \"LH6YCFHD6W.com.haulla.hauler\",\n            \"LH6YCFHD6W.com.haulla.haulerdebug\",\n            \"LH6YCFHD6W.com.haulla.haulerstage\"\n        ]\n    }\n}\n\n\n2.2 APPLE-APP-SITE-ASSOCIATION 호스팅\n\n2.1에서 만든 apple-app-site-association 파일을, 호스팅 서버 /.well-known 경로에 위치시킵니다.\n\n꼭 /.well-known 디렉터리에 위치시켜야 합니다.\nhttps://developer.apple.com/documentation/xcode/supporting-associated-domains\n[https://developer.apple.com/documentation/xcode/supporting-associated-domains]\n\n예시\n\n * https://sample.com/apple-app-site-association\n\n * https://hauler-stage.haulla.com/apple-app-site-association\n   [https://hauler-stage.haulla.com/apple-app-site-association]\n\n * https://google.com/apple-app-site-association\n   [https://google.com/apple-app-site-association]\n\n * https://cleancitynetworks.com/.well-known/apple-app-site-association\n   [https://cleancitynetworks.com/.well-known/apple-app-site-association]\n\n예시 PR\n\nhttps://github.com/Ecube-Labs/haulla-hauler-front/pull/353\n[https://github.com/Ecube-Labs/haulla-hauler-front/pull/353]\n\n\n3. 앱에 AUTOFILL 적용\n\n웹에서 저장한 인증정보를 앱에서 사용하려면 3.1, 앱에서 저장한 인증정보를 웹에서 사용하려면 3.2 적용\n\n\n3.1 인증정보 힌트 활성화\n\nAutoFill 힌트는 조건을 만족하는 입력 필드가 포커싱되면 자동으로 노출됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2257977420/image-20211124-091438.png?api=v2]\n\nRN 에서는 TextInput의 textContentType 속성을 username 나 password 로 설정해주면 됩니다.\n\n( 참고 https://reactnative.dev/docs/0.65/textinput#textcontenttype-ios\n[https://reactnative.dev/docs/0.65/textinput#textcontenttype-ios] )\n\n <View>\n  <TextInput ... textContentType=\"username\" />\n  <TextInput ... textContentType=\"password\" />\n</View>\n\n\n3.2 인증정보를 아이클라우드 키체인에 저장\n\nhttps://www.npmjs.com/package/react-native-keychain\n[https://www.npmjs.com/package/react-native-keychain] 라이브러리를 사용해 구현합니다.\n\n로그인 이후 setSharedWebCredentials 을 호출해주면 디바이스인증 이후 아이클라우드 키체인에 저장됩니다.\n\nimport { useCallback } from 'react';\nimport { setSharedWebCredentials } from 'react-native-keychain';\n\n// apple-app-site-association 파일 호스팅서버 url.\nASSOCIATED_DOMAIN = 'hauler.haulla.com';\n\nsetSharedWebCredentials(ASSOCIATED_DOMAIN, username, password);\n\n\n4. 테스트\n\n1~3번 작업을 모두 완료했다면 실제 기기에 앱을 설치해서 테스트하면 됩니다.\n\niOS 12 미만 기기는 지원하지 않습니다.\n\niCloud 키체인 비활성화 상태라면 동작하지 않습니다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2257977420"
  },
  {
    "pageContent": "개발자 가이드\n * 애플 계정 생성\n * 개발자 초대 요청\n * Xcode 에 애플 계정 등록\n\n\n애플 계정 생성\n\nhttps://appleid.apple.com/ [https://appleid.apple.com/]\n\n회사 이메일로 애플 계정 생성.\n\n아이폰 사용자의 경우 이미 애플 계정이 있겠지만 추가로 계정을 생성해서 Xcode 에는 회사 계정 애플 아이디를 등록할 수 있도록 한다.\n\n\n개발자 초대 요청\n\n관리자김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]에게\n개발자 초대 해달라고 요청.\n\n\nXCODE 에 애플 계정 등록\n\nXcode > Preferences > Accounts\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204505203/image2019-9-3_14-43-34.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/204505203/image2019-9-3_14-43-49.png?api=v2]\n\n\n\n\n관리자에게 초대를 받았다면 로그인 했을 때 다음과 같이 나온다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204505203/image2019-9-3_14-55-34.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204505203"
  },
  {
    "pageContent": "배포 담당자 가이드\n\niOS 앱 배포 담당자만 진행하면 된다\n\n * I. 배포인증서 발급\n * II. keychain 설정\n * III. Xcode signing 셋팅\n\n\nI. 배포인증서 발급\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/image2019-10-18_19-15-30.png?api=v2]\n\n * Keychain Access > Certificate Assistant > Request a Certificate From a\n   Certificate Authority...\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/image2019-10-18_19-16-21.png?api=v2]\n\n * User Email Address: 애플 계정\n\n * Common Name: 이건 뭔지 잘 모르겠다\n\n * CA Email Address: (empty)\n\n * Check \"Saved to disk\"\n\n * Check \"Let me specify key pair information\"\n\n * 나머지는 그냥 계속 Next Next 하면 CertificateSigningRequest.certSigningRequest 파일을 다운\n   받게 되는데 이를 관리자 [https://ecubelabs.atlassian.net/wiki/spaces/INFRA/overview]에게\n   전달하면(라인으로) 관리자가 배포 인증서를 다시 전달해준다(라인으로).\n\n\n\n\n\n\n\n\nII. KEYCHAIN 설정\n\n * 관리자에게 전달받은 cer파일을  Keychain Access 에 드래그한다.\n\n * 그러면 비밀번호 입력창이 나오는데, 비밀번호를 입력해준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.49.42.png?api=v2]\n\n * 이런 문구가 나오게 되면  '항상 허용'을 눌러야 합니다. 안그러면 계속 뜹니다\n\n\n\n\n\nIII. XCODE SIGNING 셋팅\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2250702869/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.29.07.png?api=v2]\n\n * release에 Automatically 체크 되어 있는지 확인한다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2250702869"
  },
  {
    "pageContent": "관리자 가이드\n\n\n\n * 신규 개발자 등록\n\n\n\n\n\n\n\n신규 개발자 등록\n\nApp Store Connect > Users and Access [https://itunesconnect.apple.com]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204374162/image2019-9-3_14-32-7.png?api=v2]\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204374162/image2019-9-3_15-0-43.png?api=v2]\n\n * First Name: 어차피 사용자 애플 계정을 따르게 되기 때문에 적당히 입력해도 된다\n * Last Name: 어차피 사용자 애플 계정을 따르게 되기 때문에 적당히 입력해도 된다\n * Email: 사용자 애플 계정. 그냥 이메일이 아니다.\n * Roles: Developer\n * Apps: 개발하려는 앱 list. 신규 프로젝트를 위한 개발자라 아직 개발할 앱이 없는 상태라면 앱을 지정 안해도 된다.\n * Developer Resources\n   * Access to Certificates, Identifiers & Profiles: check\n\n\n\n\nInvite 버튼을 누르면 다음과 같이 사용자에게 초대 메일이 간다.\n\n사용자가 Accept invitation 하면 신규 개발자 등록 완료.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/204374162/image2019-9-3_14-38-14.png?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374162"
  },
  {
    "pageContent": "배포 인증서 등록\n * Step 1. Certificates 옆의 (+) 버튼 클릭\n * Step 2. Apple Distribution 선택\n * Step 3. 개발자에게 전달 받은 CSR 파일 업로드\n * Step 4. 인증서 다운로드\n\nApple Developer > Certificates, Identifiers & Profiles\n[https://developer.apple.com/account/]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-18_19-47-27.png%3Fversion=1&modificationDate=1580448220846&cacheVersion=1&api=v2&width=250?api=v2]\n\n\n\n\nSTEP 1. CERTIFICATES 옆의 (+) 버튼 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-18_19-48-15.png%3Fversion=1&modificationDate=1580448220565&cacheVersion=1&api=v2&width=350?api=v2]\n\n\n\n\nSTEP 2. APPLE DISTRIBUTION 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-24_15-34-3.png%3Fversion=1&modificationDate=1580448220282&cacheVersion=1&api=v2&width=550?api=v2]\n\n\n\n\nSTEP 3. 개발자에게 전달 받은 CSR 파일 업로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2019-10-24_15-34-33.png%3Fversion=1&modificationDate=1580448220028&cacheVersion=1&api=v2&width=550?api=v2]\n\n\n\n\nSTEP 4. 인증서 다운로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/336724144/image2020-1-31_14-17-7.png%3Fversion=1&modificationDate=1580448219777&cacheVersion=1&api=v2&width=700?api=v2]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/336724144"
  },
  {
    "pageContent": "개발자 계정 갱신\n * 메일 수신\n * 개발자 사이트 접속\n * 결제 정보 검토\n * 결제\n\n\n메일 수신\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-015243.png?api=v2]\n\n때가 되면 애플에서 돈을 내라고 메일이 온다.\n\n(해마다 갱신이므로 보통 8월 즈음)\n\n\n개발자 사이트 접속\n\n메일의 Renew now > 링크를 타고 가서 sw@ecubelabs.com으로 로그인 하면 다음과 같이 돈을 내라는 배너가 보인다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-015428.png?api=v2]\n\n\n결제 정보 검토\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-015514.png?api=v2]\n\n바뀐 내용이 있으면 수정하고 그렇지 않으면 주문 검토 버튼을 누른다.\n\n\n결제\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-020121.png?api=v2]\n\n결제하고 법인카드 영수증 처리 하면 끝.\n\n * 사업자 번호 201-86-22009\n\n * 영수증은 이메일로 오는데 과거의 영수증을 확인할 수 있는 페이지는 따로 없는듯 하니 이 페이지의 첨부 파일로 영수증을 모아 놓는다.\n   \n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/812711965/image-20200820-021211.png?api=v2]\n   \n   \n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/812711965"
  },
  {
    "pageContent": "iOS 13\n\n최근 iOS 13 [https://www.apple.com/ios/ios-13/features/]이 출시 되면서 다양한 기능이 추가되고\n변경사항이 생겼습니다. \n\n업데이트를 통해 더 풍부한, 개선된 기능을 제공받을 수 있는건 좋은 일입니다.\n\n하지만 개발자들은 개발 시 주의해야할 이슈들이 생겼습니다. 한번씩 읽어보시는 걸 추천드립니다.\n\n* 이 문서에서 iOS 13 변경사항을 모두 다룰 예정이나 개발에 필요한 주요 업데이트 중심으로 작성해나갈 예정입니다. 지속적으로 업데이트\n하겠습니다. \n\n* 시간 나시면 공식 사이트에서 자세히 보시길 추천드립니다.\n\n\n소개\n\n\n\n\n항목내용최초 공개일2019.06.03 (WWDC)정식 배포일2019.09.20공식\n사이트https://www.apple.com/ios/ios-13/ [https://www.apple.com/ios/ios-13/]기능\n소개https://www.apple.com/ios/ios-13/features/\n[https://www.apple.com/ios/ios-13/features/]\n\niOS 13은 2019년 9월 업데이트 되었습니다. 주요 업데이트 내용으로는 다크모드, 애플 아케이드(오락실)\n[https://www.apple.com/kr/apple-arcade/], 사진앱 변경, 사파리 다운로드 관리자, 애플 맵 3D 지원이\n있습니다. \n\n\n\n\n\n목차\n\n\n\n * 소개\n * 목차\n * 0. 대응이 필요한 변경사항\n * 1. 다크모드\n   * 대응\n     * 1) 직접적 대응\n     * 2) 다크모드 비활성화\n     * info.plist 설정을 통한 비활성화\n     * 코드를 통한 비활성화\n   * StatusBar Style 스타일 변경\n   * 대응 하지 않을 경우 (CCNx)\n * 2. 위치 요청 정책 변경\n   * 위치 권한 한 번만 허용 추가\n * * '항상 허용' 정책 변경\n   * 위치 트래킹 알림\n * 3. 개인정보 보호 및 보안\n * 4. Apple 로그인\n * 5. 애플 아케이드\n * 6. 사진 앱\n * 7. 비디오 편집\n * 8. 애플 지도\n * 9. Siri\n * 10. 미리 알림\n * 11. 성능 향상\n * 12. iPad\n * 13. ARKit3\n * 14. 그 외 개발 시 주의해야 할 점\n   * 1) StatusBar 색상 변경 방식\n   * 2) View Controller Presentation 동작 변경\n     * 대응\n * 15. 기타\n   * Swift UI\n * 16. 참고 사이트\n\n\n\n\n0. 대응이 필요한 변경사항\n\n 1. 다크모드\n 2. 위치 요청 정책 변경\n 3. StatusBar 색상 수정 방식 변경\n 4. View Controller Presentation 동작 방식 변경\n\n\n1. 다크모드\n[https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode/]\n\n다크 모드는 Mac OS 모하비에서 처음 선보인 기능이며, iOS13 부터 지원합니다.\n\n요약해서 설명하자면 \"UI 컬러를 전반적으로 어둡게 바꾸는 기능\"입니다. 물론 사용자가 제어센터에서 사용여부를 선택할 수 있습니다.\n\n이로인해 앱이 다크모드를 지원해야 한다면, 기획, 디자인, 개발, QA 단계에서 다크모드에 대응해야 합니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_13-18-34.png?api=v2]\n\n\n\n\n\n대응\n\n현재 배포되어 있거나 iOS 13에 따로 대응하지 않은 앱은 무조건 대응이 필요합니다. 다크모드에서는 Color 값을 별도로 적용하지 않은\n뷰들은 다크모드의 Default 값을 따르게 됩니다.\n\n대응되지 않은 앱은 아래와 같은 문제들이 발생합니다.\n\n * 텍스트 가독성이 저하될 수 있습니다.\n   * 다크모드에서 텍스트는 밝은 색, 배경 색상은 어두운 색이 Default 입니다.\n   * 따로 백그라운드의 색깔을 변경해주지 않은 뷰들이 다크 모드를 준수하게 됩니다. 이 때 제일 문제가 되는 경우는 UITextView\n     입니다. 보통 텍스트 컬러는 직접 지정해주는데 백그라운드 색상은 지정하지 않는 경우가 많기 때문입니다.\n     이렇게 될 경우 다크 모드로 전환하면 백그라운드는 다크모드의 Default 값을 따라서 어두운 색깔로 변경되는 반면 텍스트 컬러는\n     그대로 검은색이라 가독성이 심각하게 떨어집니다. (보이지 않는 수준이라고 봐도 무방할 듯)\n\n * UIStatusBarStyle.default 로 지정되었던 StatusBar 색깔이 일괄적으로 흰색으로 바뀌게 됩니다.\n   \n   * Status 색상을 밝은 계열로 지정한 경우, 가독성이 심각하게 떨어집니다. 이에 대응해\n     UIStatusBarStyle.darkContent 가 새로 제공됩니다. UIStatusBarStyle.darkContent로 지정할\n     경우, 다크 모드일 경우에도 StatusBar 컨텐츠 색깔이 검은색으로 유지됩니다.\n\n해결 방법으로는 직접적으로 대응, 다크모드를 미 지원 두 가지가 있습니다.\n\n\n1) 직접적 대응\n\n네이티브 방식에서는 iOS 13, 다크모드를 설정한 디바이스에서 앱을 설치하고, 가독성이 떨어지는 텍스트, 괴리감이 발생하는 UI 색상 등을\n하나하나 수정해주는 방법이 있습니다.\n\n대응 가이드가 필요하다고 여겨지면 추후 별도로 작성해보겠습니다. \n\n\n2) 다크모드 비활성화\n\n적용이 불필요하다고 판단되면 무시할 수 있는 방법이 있습니다. \n\n\nINFO.PLIST 설정을 통한 비활성화\n\n프로젝트 info.plist에 아래와 같이 설정해주면 됩니다.\n\n[https://k.kakaocdn.net/dn/dGfhZf/btqyu9rljWZ/8phyp9MX0sUmJ9SLQviEm0/img.png]\n\n\n코드를 통한 비활성화\n\nCCNx iOS Commit\n[https://github.com/Ecube-Labs/ccn-fm-ios/commit/11f500497830e8f3523a9771525e66c76fe6b049]\n을 참고해주세요\n\n\n\n\n참고로 애플 개발 문서\n[https://developer.apple.com/documentation/xcode/supporting_dark_mode_in_your_interface/choosing_a_specific_interface_style_for_your_ios_app]에\n따르면 애플은 다크모드를 지원할 것을 추천합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-20-19.png?api=v2]\n\n\nSTATUSBAR STYLE 스타일 변경\n\nXcode - Project Setting General - Deployment Info 에서 해당 설정을 바꾸어 주면 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/%E1%84%83%E1%85%A1%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%85%E1%85%A9%E1%84%83%E1%85%B3.png?api=v2]\n\n\n\n\n\n대응 하지 않을 경우 (CCNX)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/f47c4f27-0000-46c0-9e91-5a56467df9cd.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/f0535c8b-e83f-4aa4-b308-640d73945039.png?api=v2]\n\n\n2. 위치 요청 정책 변경\n\n\n위치 권한 한 번만 허용 추가\n\n위치 접근 허용 권한에 \"다음번에 묻기\" 가 추가됐습니다.\n\n권한 허용 팝업에서 \"한 번 허용\"을 누르면 CLLocationManager.authorizationStatus 값이\nauthorizedWhenInUse 로 변경됩니다.\n\n이 권한은 유저가 앱을 사용 중일 때만 유지되며, 백그라운드에 돌아갔다가 다시 오거나, 앱을 재 실행할경우 다시 notdetermined로\n변경됩니다.\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-0-42.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-3-28.png?api=v2]\n\n\n'항상 허용' 정책 변경\n\nCLLocationManager.requestalwaysAuthorization()을 콜할 경우 기존에는 왼쪽과 같이 '항상 허용' 창이\n있었습니다. 하지만 이 선택지는 iOS 13에서 사라졌습니다. 대신 한 번 허용이 추가된 걸 확인할 수 있습니다.\n\n단 항상 허용할지 물어보는 Alert는 아래 조건에 부합하면 별도로 사용자에게 노출됩니다.\n\n * 백그라운드에서 위치 탐색을 시도하는 경우\n * 위치 권한이 \"사용하는 동안\"(authorizedAlways) 으로 설정된 사용자일 경우\n * CLLocationManager의 allowBackgroundLocationupdates가 True인 경우\n * 위 조건을 만족하고 startUpdatingLocation() 함수를 호출할 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-7-37.png?api=v2]\n\n유저가 '사용하는 동안 유지'를 선택할 경우 'authorizedWhenInUse로 권한이 변경된다. 반면 '항상 허용'을 누르면 영구적으로\n'authorizedAlways'로 유지된다.\n\n\n\n\n결과적으로 '항상 허용'을 직접적으로 요청하는 방법은 사라졌지만, 설정에서 유저가 '항상' 을 선택할 경우 이전 로직이 그대로 돌아갑니다. 항상\n허용 권한이 필요하다면 아래와 같은 안내 화면을 사용자에게 보여주는 것을 추천합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_14-14-40.png?api=v2]\n\n\n위치 트래킹 알림\n\n백그라운드에서 위치 탐색 시 어디에서 위치를 취득했는지 시스템 Alert을 주기적으로 띄워 경고합니다.\n\n\n3. 개인정보 보호 및 보안\n\n업데이트 예정\n\n\n4. APPLE 로그인\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_12-32-43.png?api=v2]\n\n트위터, 페이스북, 구글 들이 제공하는 OAuth 로그인 기능이 추가된 것으로 보인다.\n\n업데이트 예정\n\n\n5. 애플 아케이드 [https://www.apple.com/kr/apple-arcade/]\n\n재미를 선물하는 업데이트입니다. \n\n업데이트 예정\n\n\n6. 사진 앱\n\n * 일, 월, 연도별로 최고의 사진을 자동으로 엄선해서 보여주는 기능\n * 새롭게 마련된 사진 편집 기능\n * 강력한 동영상 편집\n\n업데이트 예정\n\n\n7. 비디오 편집\n\n업데이트 예정\n\n\n8. 애플 지도\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_13-42-57.png?api=v2]\n\n3D 지도 탐색 기능이 추가 됨. (미국 에서 우선 적용)\n\n업데이트 예정\n\n\n9. SIRI [https://developer.apple.com/siri/]\n\n업데이트 예정\n\n\n10. 미리 알림\n\n업데이트 예정\n\n\n11. 성능 향상\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_13-44-28.png?api=v2]\n\n * Face ID 잠금 해제 속도 30% 향상\n * 앱 실행 속도가 2배 향상\n\n자세한 벤치마킹 데이터는 추후 업데이트 예정\n\n\n12. IPAD [https://developer.apple.com/kr/ipad/]\n\n업데이트 예정\n\n\n\n\n\n13. ARKIT3\n\n업데이트 예정\n\n\n14. 그 외 개발 시 주의해야 할 점\n\n\n1) STATUSBAR 색상 변경 방식\n\nNative 개발 방식에서 앱의 StatusBar 색상을 변경할 때 사용했던 보편적인 방법은 iOS 13 환경에서는 허용되지 않으며, 만약\n코드에 존재한다면 Crash가 발생해 앱이 죽습니다.\n\n애플은\n[StatusBarManager|https://developer.apple.com/documentation/uikit/uistatusbarmanager]\n[https://developer.apple.com/documentation/uikit/uistatusbarmanager%5D%EB%A5%BC] 를\n제공하나, BackgroundColor는 변경할 수 없습니다. Background Color를 변경해야 하는 경우 아래 대응 커밋을\n참고해주세요.\n\nCCNx 대응\n[https://github.com/Ecube-Labs/ccn-fm-ios/commit/13484f1481d980b9ec79187977f0c3930a815476]\n\n\n2) VIEW CONTROLLER PRESENTATION 동작 변경\n\nView controller presentation의 동작이 변경됐습니다. Presentation의 Default 속성은 이제 PageSheet\n입니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_15-35-45.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/227213328/image2019-10-23_15-38-34.png?api=v2]\n\niOS 13 전 / 후 CCNx 사이드바 동작 방식\n\n\n대응\n\n모달을 호출할 때, UIViewController 객체의 'modalPresentatonStyle' 속성을 조절해주면 됩니다\n\n기존과 같은 모달 방식을 사용하고 싶다면 '.fullScreen' 설정을 주면 됩니다.\n\n대응법은 테스트 후 업데이트 하겠습니다.\n\n\n15. 기타\n\n\nSWIFT UI [https://developer.apple.com/xcode/swiftui/]\n\n업데이트 중\n\n\n16. 참고 사이트\n\nhttps://www.apple.com/kr/ios/ios-13/ [https://www.apple.com/kr/ios/ios-13/]\n\nhttps://www.apple.com/kr/ios/ios-13/features/\n[https://www.apple.com/kr/ios/ios-13/features/]\n\nhttps://www.apple.com/kr/newsroom/2019/06/apple-previews-ios-13/\n[https://www.apple.com/kr/newsroom/2019/06/apple-previews-ios-13/]\n\nhttps://developer.apple.com/kr/ios/ [https://developer.apple.com/kr/ios/]\n\nhttps://g-y-e-o-m.tistory.com/150 [https://g-y-e-o-m.tistory.com/150]\n\nhttps://sesang06.tistory.com/138 [https://sesang06.tistory.com/138]\n\nhttps://brunch.co.kr/@genkino/169 [https://brunch.co.kr/@genkino/169]\n\nhttps://medium.com/@hacknicity/view-controller-presentation-changes-in-ios-13-ac8c901ebc4e\n[https://medium.com/@hacknicity/view-controller-presentation-changes-in-ios-13-ac8c901ebc4e]\n\nhttps://sarunw.com/posts/modality-changes-in-ios13/\n[https://sarunw.com/posts/modality-changes-in-ios13/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/227213328"
  },
  {
    "pageContent": "UIWebView 지원 중단\n\n\n개요\n\niOS 앱에 웹을 표시해야 하는 경우 UIWebView, WKWebView 두 가지 중 하나를 선택해 개발하면 됐습니다.\n\n그러나 애플은 2019년 부터 UIWebView deprecated 소식을 알려왔으며, 이제 UIWebView\n[https://developer.apple.com/documentation/uikit/uiwebview] 지원이 중단되었습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/556924929/image-20200506-013854.png?api=v2]\n\nUIWEBVIEW를 사용하고 있는 프로젝트를 업로드 할 경우 받을 수 있는 이메일\n\n\n문제점\n\nUIWebView 사용하는 프로젝트는 앱을 업로드할 수 없습니다. (업로드 성공 후 처리 중 단계에서 검수되어 취소 됨)\n\n * 신규 앱이라면 2020년 4월부터 업로드 할 수 없습니다. (직접 확인 함)\n\n * 이미 등록된 앱이라면 2020년 12월부터 업로드 할 수 없습니다. (확인 못함)\n\n아직 UIWebView 를 사용하고 있는 프로젝트가 많을 것으로 예상되며, 직접적으로 사용하지 않더라도 사용 라이브러리가 이를 사용하고 있다면\n문제가 됩니다.\n\n라이브러리 버전이 최신이 아닌 경우 UIWebView를 간접적으로 사용하고 있을 가능성이 있습니다.\n\n\n대안\n\n * WKWebView [https://developer.apple.com/documentation/webkit/wkwebview] 으로\n   마이그레이션 해야합니다.\n\n * 사용하는 라이브러리가 UIWebView 사용하는 경우, 버전을 높이거나 다른 라이브러리로 대체하는 것을 생각해보아야 합니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/556924929"
  },
  {
    "pageContent": "[iOS][푸시 인증서] 1. 개별 인증서 발급 및 Push Services 인증서 등록\n\n이 페이지는 푸시 인증서를 통한 방식에 대한 설명입니다. key를 이용한 방식은 해당 문서\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/223183054/2.+APN]를 참고해주세요\n\n * 1. 개별 인증서 발급\n * 2. Push Services 인증서 등록\n\n\n1. 개별 인증서 발급\n\n인증서를 발급 받아야합니다. “키체인 접근” 앱을 킵니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045023.png?api=v2]\n\n상단 메뉴에서 인증서 지원 - 인증 기관에서 인증서 요청 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045126.png?api=v2]\n\n사용자 이메일을 입력하고 디스크에 저장하기 체크한 뒤 계속을 눌러 저장합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045259.png?api=v2]\n\n인증서 발급을 완료했습니다.\n\n\n2. PUSH SERVICES 인증서 등록\n\nhttps://developer.apple.com/account/resources/identifiers/list\n[https://developer.apple.com/account/resources/identifiers/list] 에 접속합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045618.png?api=v2]\n\n\n\ncertificates 등록할 앱을 선택합니다.\n\n예시에서는 Clean City Networks 에 대한 푸시 certificates 를 등록합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045645.png?api=v2]\n\n\n\n항목 중 “Push Notification” 항목의 Edit 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045749.png?api=v2]\n\n * Development SSL Certificate: 개발용 푸시 인증서\n\n * Production SSL Certificate: 배포용 푸시 인증서\n\n“Create Certificate” 버튼을 클릭한 뒤 앞서 발급 받은 인증서를 선택합니다.\n\n선택을 완료했다면 “Complete” 버튼을 클릭해주세요.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045851.png?api=v2]\n\n\n\ncertificate 등록 완료됐습니다. 다운로드 합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-045938.png?api=v2]\n\n다운로드한 certificate 을 실행하면, 키체인 앱에 추가된 것을 확인할 수 있습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/228687958/image-20191028-050404.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/228687958"
  },
  {
    "pageContent": "[iOS][푸시 인증서] 2. APNs pem 생성 및 전달\n\nCCN 에서 아직 APNs 방식을 사용 중입니다.\n\n혹시 [iOS][푸시 인증서] 1. 개별 인증서 발급 및 Push Services 인증서 등록\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/228687958]을 읽지 않으셨다면 해당 문서\n내용을 먼저 확인해주세요. (필수)\n\n본 문서는 APNs 푸시 인증서(cert.pem, apns.pem)를 생성하고 전달해야 방법을 다루고 있습니다.\n\n * 1. Certificate, Key 추출\n   * 1.1. Certificate 내보내기\n     * 1) 전달하고자 하는 프로젝트 푸시 Certificate를 선택하고 내보내기 버튼을 클릭합니다.\n     * 2) 저장할 파일 경로를 선택하고 저장합니다. 이름은 cert.p12 로 적습니다.\n     * 3) 암호를 설정합니다.\n   * 1.2. Key 추출\n     * 1) Key를 선택하고 내보내기 버튼을 클릭합니다.\n     * 2) 저장할 파일 경로를 선택하고 이름을 정합니다. 이름은 key.p12로 적습니다.\n     * 3) 암호를 설정합니다.\n * 2. 푸시 인증서 p12 → pem 변환\n   * 2.1. cert.p12 → cert.pem\n   * 2.2. key.p12 → key.pem\n   * 2.3. key.pem → key.unencrypted.pem\n   * 2.4. cert.pem + key.unencrypted.pem → apns.pem\n * 3.전달\n   * 전달 방법\n   * 최종 전달물\n   * 주의사항\n\n\n1. CERTIFICATE, KEY 추출\n\n먼저 키체인 접근에 등록되어 있는 푸시 인증서와 키를 추출 해야 합니다.\n\n\n1.1. CERTIFICATE 내보내기\n\n\n1) 전달하고자 하는 프로젝트 푸시 CERTIFICATE를 선택하고 내보내기 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-063841.png?api=v2]\n\n\n2) 저장할 파일 경로를 선택하고 저장합니다. 이름은 CERT.P12 로 적습니다.\n\n\n3) 암호를 설정합니다.\n\n공백도 되나 비밀번호를 되도록이면 설정해주시고, 이걸 메모합니다.\n\np12 파일을 pem 파일로 변환하는 과정에서 필요합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064127.png?api=v2]\n\n\n\n\n\n\n1.2. KEY 추출\n\n\n1) KEY를 선택하고 내보내기 버튼을 클릭합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-063937.png?api=v2]\n\n\n2) 저장할 파일 경로를 선택하고 이름을 정합니다. 이름은 KEY.P12로 적습니다.\n\n\n3) 암호를 설정합니다.\n\n공백도 되나 비밀번호를 되도록이면 설정하고 이걸 메모합니다.\n\np12 파일을 pem 파일로 변환하는 과정에서 필요합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064127.png?api=v2]\n\n\n\n\n2. 푸시 인증서 P12 → PEM 변환\n\n푸시 발송 시 사용하는 푸시 인증서는 apns.pem과, cert.pem 두 가지입니다.\n\np12 파일을 pem 파일로 변환하는 과정을 거쳐야 합니다 .\n\n\n2.1. CERT.P12 → CERT.PEM\n\n아래와 같이 터미널에 입력하면 아까 인증서를 저장할 때 입력했던 비밀번호를 요구합니다. 입력해주세요\n\nopenssl pkcs12 -clcerts -nokeys -out cert.pem -in cert.p12\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064810.png?api=v2]\n\n\n2.2. KEY.P12 → KEY.PEM\n\n아래와 같이 터미널에 입력하면 아까 인증서를 저장할 때 입력했던 비밀번호를 요구합니다. 입력해주세요\n\nopenssl pkcs12 -nocerts -out key.pem -in key.p12\n\ncert 파일 변환때와는 다르게 pem에 비밀번호를 지정해주어야 합니다. 지정해주세요.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-064911.png?api=v2]\n\n\n2.3. KEY.PEM → KEY.UNENCRYPTED.PEM\n\n아래와 같이 터미널에 입력하면 아까 key.pem 파일을 생성할 때 입력했던 비밀번호를 요구합니다. 입력해주세요\n\nopenssl rsa -in key.pem -out key.unencrypted.pem\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/230720127/image-20191031-065002.png?api=v2]\n\n\n2.4. CERT.PEM + KEY.UNENCRYPTED.PEM → APNS.PEM\n\ncat cert.pem key.unencrypted.pem > apns.pem\n\n\n\n\n3.전달\n\n\n전달 방법\n\n김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]에게\n전달.\n\n\n최종 전달물\n\n * apns.pem\n\n * cert.pem\n\n\n주의사항\n\n * 테스트\n   \n   * 인증서 교체 후 작동하는지 확인하면 됩니다.\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/230720127"
  },
  {
    "pageContent": "앱을 삭제하고 같은 Bundle ID로 재 등록할 수 없다.\n\n같은 Bundle ID로 재 등록이 필요한 경우는 현재까지 없습니다.\n\n이 테스트는 잘못된 상식으로 비롯됐다. 기록을 위해 적는다.\n\n\n\niOS 앱은 각각 고유한 Bundle Identifier를 지니는데, 앱을 삭제하고 같은 번들 ID를 재 등록하려는 경우가 만일하나 있을 수\n있다. 결론부터 말하면 불가능한것으로 보인다.\n\nex) CCN iOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/272761460/image-20191231-004409.png?api=v2]\n\n\n\nBundle ID 등록 ~ 앱 생성 까지 진행한 후 테스트를 진행했다. 배포는 하지 않았다.\n\n우선 Itunes connect 에서 앱을 삭제해보았는데, 한달이 지난 지금도 삭제한 앱 목록에 계속 유지된다.\n\nBundle ID 삭제를 시도하면 아래와 같은 알림창이 뜨며 실패한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/272761460/image-20191231-005016.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/272761460/image-20191231-005038.png?api=v2]\n\n결론적으로 앱은 마켓에서 삭제할 수 있지만 한번 등록되면 Bundle ID를 삭제할 수 없는 것으로 보인다.\n\n\n\nApple에 직접 문의해보지 않았다. 추후 필요하면 진행할 예정이다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272761460"
  },
  {
    "pageContent": "Cannot inherit from non-open class '{Module}' outside of its defining module\n\n\n원인\n\nSwift 3부터 override 하려면 대상 클래스 메서드의 access level이 open으로 지정되어야 합니다. 그렇지 않을 경우\n발생합니다. 오래된 패키지를 사용하다보면 발생할 수 있습니다.\n\n\n해결방법\n\n\n1. 모듈 버전 업데이트\n\n모듈을 최신 버전으로 업데이트 하면 됩니다.\n\n단 업데이트로 인해 기능 동작이 기존과 상이할 수 있으니 유의해야 하며, 대응된 모듈이 아니면 시도할 수 없습니다.\n\n\n2. 기존 설치 모듈의 코드 변경\n\n가급적 피해야 하는 방법입니다.\n\n마땅이 대안이 없는 경우, 모듈이 오래됐거나 프로젝트를 보수적으로 운영해야 하는 경우 해당 방법을 사용할 수 있습니다.\n\n> Cannot inherit from non-open class '{Module}' outside of its defining module\n\n문제가 발생한 class 앞에 open 명시해주면 됩니다.\n\n> Overriding non-open instance method outside of its defining module\n\n문제가 발생한 method 앞에 open 명시해주면 됩니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/271188726"
  },
  {
    "pageContent": "[iOS][Swift] Access levels\n\nSwift 3 is bringing significant changes to access control.\n\nSwift 2 only had 3 access levels:\n\n * private: entities are available only from within the source file where they\n   are defined.\n\n * internal: entities are available to the entire module that includes the\n   definition.\n\n * public: entities are intended for use as API, and can be accessed by any file\n   that imports the module.\n\nSwift 3 is adding 2 more access levels (open and fileprivate) and changing the\nmeaning of private:\n\n * private: symbol visible within the current declaration only.\n\n * fileprivate: symbol visible within the current file.\n\n * internal: symbol visible within the current module.\n\n * public: symbol visible outside the current module.\n\n * open: for class or function to be subclassed or overridden outside the\n   current module.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696018"
  },
  {
    "pageContent": "[iOS][Swift] 버전 주요 변경점\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696039"
  },
  {
    "pageContent": "Swift 5\n\nTODO\n\nhttps://developer.apple.com/kr/swift/#introducing\n[https://developer.apple.com/kr/swift/#introducing]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/272696057"
  },
  {
    "pageContent": "SwiftUI\n\nXcode 11, macOS 10.15 이상 버전부터 사용가능합니다.\n\n\nSWIFTUI 란?\n\n> Swift 구문을 통해 SwiftUI는 새로운 Xcode 디자인 도구와 매끄럽게 연동되면서 코드와 디자인이 완벽하게 동기화되도록 합니다.\n> 또한 유동적 글자 크기 조절, 다크 모드, 현지화 및 손쉬운 사용을 자동 지원하므로 SwiftUI 코딩 첫 줄부터 가장 강력한 UI 코드를\n> 작성할 수 있습니다.\n\nSwift UI는 Apple 플랫폼의 사용자 인터페이스를 코드를 통해 쉽게 구축할 수 있도록 Xcode 에서 제공되는 기능입니다. Xcode\n11 부터 사용 가능합니다. \n\n\n특징\n\n\n1) 높은 가독성\n\n코드 기반으로 화면을 그립니다. 즉 더 이상 스토리보드 AutoLayout을 사용할 필요가 없습니다. 물론 코드로 화면을 그리는 방식은 이전부터\n있었습니다. 하지만 보편적이지 않고, 가독성이 떨어졌습니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/330858675/image-20200128-231100.png?api=v2]\n\n사진) SwiftUI - Developer Apple Tutorials\n\nSwiftUI는 코드가 굉장히 간결하고, 읽기 쉽습니다. AutoLayout은 H/VStack, Groups 과 같은 새로운 방식으로\n대체됩니다.개발 시간 및 유지보수 비용을 줄일 수 있습니다. \n\n\n2) 멀티 플랫폼\n\nSwiftUI는 멀티 플랫폼을 지원합니다. Apple 플랫폼(macOS, watchOS, ipadOS, tvOS iOS) 앱 개발에 활용할 수\n있습니다. Flutter, React Native 처럼 하나의 코드가 여러 플랫폼(Android, iOS) 에서 공통된 의미로 작동되는 의미는\n아닙니다. 멀티 플랫폼을 지원해야하는 경우 시간을 줄일 수 있습니다.\n\n> 플러터는 안드로이드 앱을 함께 개발할 수 있다. 만약 모바일용 앱만 개발할 계획이라면, 플러터가 더 나은 선택일 테고, 스위프트 UI는\n> 고려하지 않을 것이다. 단지 소규모 개발을 넘어선 문제에서 보면 얘기가 달라진다.\n> \n> 만약 맥 앱을 개발하길 원하면, iOS 그룹이 맡는 게 아니라 새로운 그룹을 만들어야 한다. 수익에 큰 영향을 끼치지 않는다면 굳이 새로운\n> 그룹을 만들어서 맥 앱을 개발할 이유가 없다는 거다. 프로젝트 카탈리스트는 기존의 iOS 개발 그룹이 맥 앱도 개발할 수 있게 지원한다.\n> 회사로서는 새로운 그룹을 만들지 않아도 되고, 비용도 절감되며, 시간조차 오래 걸리지 않는다. 아이패드 앱을 맥 앱으로 출시하는 게 큰일이\n> 아니게 된 것이다. 그리고 이 얘기는 맥만 아니라 모든 애플 기기에 적용된다.\n> \n> https://m.post.naver.com/viewer/postView.nhn?volumeNo=21490246&memberNo=6384148\n> [https://m.post.naver.com/viewer/postView.nhn?volumeNo=21490246&memberNo=6384148]\n\n\n\n\n3) 라이브 코딩\n\n코드 수정을 통해 변경되는 레이아웃을 실시간으로 미리보기 할 수 있습니다. 개발 속도를 향상시킵니다.\n\nCanvas는 macOS 10.15 이상 버전부터 지원합니다.\n\n라이브 코딩을 사용하려면 Canvas를 활성화합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/330858675/image-20200128-231119.png?api=v2]\n\n사진) Xcode 상단 - Adjust Editor Options\n\n\n4) 컴포넌트 재사용\n\n코드로 컴포넌트를 작성하고, 컴포넌트를 조합하는 형태이기 때문에 재사용 가능한 특징을 갖습니다. \n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/330858675/image-20200128-231131.png?api=v2]\n\n사진) SwiftUI - Developer Apple Tutorials\n\n\n기타\n\n\n1) 추후에 UIKIT는 없어지는가?\n\n→ SwiftUI 로 작성된 코드는 컴파일 시점에서 UiKit 컴포넌트로 변환돼 컴파일된다.\n\n\n2) SWIFTUI 완벽 대체 가능한가?\n\n→ 완벽 대체 불가능하다.\n\n * UiKit 컴포넌트와 100% 1:1 대응되지 않는다. 대표적으로 UICollectionView 는 SwiftUI 에서 제공되지 않는다.\n\n * UiKit 는 에러사항들을 해결하는 수 많은 라이브러리들이 존재한다. SwiftUi 는 그렇지 않다. 당장 무리가 있다. 이는 시간이\n   해결해줄 것으로 보인다.\n\n\n3) SWIFTUI, UIKIT 동시 사용\n\n→ 동시에 사용하길 원한다면 UIHostingController 를 사용하면 된다.\n\n\n참고 링크\n\nIntroducing SwiftUI: Building Your First App\n[https://www.youtube.com/watch?v=_1_XkeFUUME]\n\nXcode Swift UI [https://developer.apple.com/kr/xcode/swiftui/]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/330858675"
  },
  {
    "pageContent": "[iOS] 심사 리젝 주의사항 및 대응법\n\n\n\n\n\n\n\n\n???\n\n * 같은 사유로 리젝을 3번 정도 걸리면, 아주 자세하게 설명해주기도 합니다… (???)\n   \n   * 구독 관련 문구를 제대로 표시 안 했을 때\n     \n     * 예) 너는 그저 저 문구를 화면에 그대로 넣어주면 돼!, 어떤 행동을 해서 보여야 하는 것이 아니라 해당 화면을 보자마자 보여야 돼\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/330858734"
  },
  {
    "pageContent": "[iOS] Changelog\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374145114"
  },
  {
    "pageContent": "Apple extends deadline for developers to update their apps to iOS 13\n\nhttps://developer.apple.com/news/?id=03262020b\n[https://developer.apple.com/news/?id=03262020b]\n\n\n\n애플의 앱 스토어 가이드 라인 정책이 업그레이드 됐습니다.\n\n원래는 April 20, 2020 시행 될 예정이었으나, June 30th 으로 데드라인이 확장 됐습니다.\n\n\n\n1. Apps for iPhone or iPad must be built with the iOS 13 SDK or later and use an\nXcode storyboard to provide the app's launch screen.\n\n아이폰과 아이패드 전용 앱은 iOS 13 SDK 이상 버전을 사용해야 한다는 조항입니다.\n\n이는 Target version 과 무관하고 Xcode, OS 버전의 업데이트가 필요할 수 있습니다. 확인은 아래 명령어를 터미널에 입력해보시면\n됩니다.\n\nxcodebuild -showsdks\n\n...\niOS SDKs:\n\tiOS 13.2                      \t-sdk iphoneos13.2\n\n\n\n2. iPhone apps must support all iPhone screens and all iPad apps must support\nall iPad screens.\n\n아이폰 앱은 모든 아이폰 스크린을 지원해야하고, 아이패드 앱은 모든 아이패드 스크린을 지원해야 한다는 조항입니다.(질문)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/help_16.png]\n\n모든 기기 스크린에서 기능이 잘 작동하고, UI가 유연해야 한다는 이야기인지.. 백프로 이해 못했습니다.. 다른분들이 도와주실 거라 믿습니다.\n\n\n\n3. Apps for Apple Watch must be built with the watchOS 6 SDK or later.\n\n우리는 해당하는 앱이 아직 없습니다.\n\n애플 워치를 위한 앱은 watchOS 6 SDK 이상을 사용해야 한다는 조항입니다.\n\n\n\n4. Apps that authenticate or set up user accounts must support Sign in with\nApple if required by guideline 4.8 of the App Store Review Guidelines.\n\n우리는 해당하는 앱이 아직 없습니다.\n\nGuideline 4.8 - Design - Sign in with Apple\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/365330581/Guideline+4.8+-+Design+-+Sign+in+with+Apple]\n\n\n\n5. Apps in the Kids category must be in full compliance with guideline 1.3 and\nguideline 5.1.4. of the App Store Review Guidelines.\n\n우리는 해당하는 앱이 아직 없습니다.\n\n간략한 설명\n\n키즈 카테고리의 앱들은 가이드라인 1.3과 5.1.4 를 충족해야 한다는 조항입니다\n\n1. 가이드 라인 1.3\n\n * 링크, 구매 또는 어린이를 위한 기타 방해 요소가 포함되어서는 안된다.\n\n * 온라인에서 아동의 데이터 수집과 관련하여 전 세계에서 적용 가능한 개인 정보 보호법을 준수해야합니다\n\n2. 가이드 라인 5.1.4\n\n * 어린이의 개인 데이터는 COPPA(Children’s Online Privacy Protection Act) 법률을 준수 해야한다.\n\n * 광고 분석, 광고가 포함되어서는 안된다. (이름, 생년월일, 전자 메일 주소, 위치 또는 장치를 수집하거나 전송하지 않는 경우 제한적인\n   경우 타사 분석이 허용 될 수 있습니다.)\n\n * 위치 기반 API 사용시 몇 가지 주의해야 할 것들이 있다.\n\n\n\n6. Apps using HTML 5 must be in full compliance with guideline 4.7 sections 4,\n5, and 6 of the App Store Review Guidelines.\n\n우리는 해당하는 앱이 아직 없습니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/468025521"
  },
  {
    "pageContent": "Guideline 4.8 - Design - Sign in with Apple\n * 원인\n * 대응법\n * 기타\n\n\n원인\n\n앱에 소셜 로그인 기능이 있는데, Sign in with Apple 기능을 제공하지 않은 경우입니다.\n\n[https://developers.naver.com/inc/devcenter/images/cont/img_naverid01.png]\n\n많은 유명 서비스들을 보면 소셜 로그인 기능을 제공하는 경우가 많습니다. 사용자는 이를 통해 손쉽게 회원가입 및 로그인을 할 수 있습니다.\n\n네이버, 카카오톡, 구글 로그인 등이 여기에 해당합니다.\n\n\n\n[https://support.apple.com/library/content/dam/edam/applecare/images/en_US/appleid/ios13-iphone-xs-sign-in-with-apple-hide-my-email.jpg]\n\n문제는 앱 스토어 릴리즈 계획을 갖고있고, 그 앱이 소셜로그인 기능이 제공한다면 애플 로그인을 필수로 고려해야합니다.\n\n그 이유는 소셜 로그인 기능이 포함된 앱이 애플 로그인을 제공하지 않을경우 무조건 리젝이기 때문입니다. (애플 양아치)\n\n\n대응법\n\nSign in with Apple 기능을 다른 소셜 로그인과 동일한 레벨로 구현하면됩니다.\n\nImplementing User Authentication with Sign in with Apple\n[https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple]\n\n\n기타\n\nSign in with Apple [https://support.apple.com/ko-kr/HT210318]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/365330581"
  },
  {
    "pageContent": "Guideline 5.1.1 - Account deletion requirement\n\n\nTL;DR\n\n * 앱에 계정 등록 기능이 있는 경우, 계정 삭제 기능을 반드시 포함해야 합니다. 2022.06.30일부터 적용됩니다.\n   https://developer.apple.com/news/?id=12m75xbj\n   [https://developer.apple.com/news/?id=12m75xbj]\n\n\n가이드라인\n\nhttps://developer.apple.com/app-store/review/guidelines/#5.1.1v\n[https://developer.apple.com/app-store/review/guidelines/#5.1.1v]\n\n> If your app supports account creation, you must also offer account deletion\n> within the app.\n\n * 계정 삭제 옵션은 앱에서 쉽게 찾을 수 있어야 합니다.\n\n * 앱에서 Apple로 로그인을 제공하는 경우 계정을 삭제할 때 Apple로 로그인 REST API를 사용하여 사용자 토큰을 취소해야 합니다.\n\n * 계정을 일시적으로 비활성화하거나 비활성화하는 기능만 제공하는 것만으로는 충분하지 않습니다. 사람들은 개인 데이터와 함께 계정을 삭제할 수\n   있어야 합니다.\n\n * 규제가 심한 산업의 앱은 계정 삭제 프로세스를 확인하고 용이하게 하기 위해 추가 고객 서비스 흐름을 제공할 수 있습니다.\n\n * 사용자 계정 정보를 저장 및 유지하고 계정 삭제를 처리하기 위해 적용 가능한 법적 요구 사항을 따르십시오. 여기에는 여러 국가 또는 지역의\n   현지 법률 준수가 포함됩니다. 항상 그렇듯이 법률 고문에게 문의하십시오.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2439708677"
  },
  {
    "pageContent": "[iOS][Changelog] CCN\n\n각 버전에서 어떤 수정사항이 있었는지 추적이 안되는 것 같아서 만들었습니다. 문제가 되면 삭제하겠습니다.\n\n(커밋메시지를 더 상세히 쓰겠습니다.)\n\n\n\n * Release note convention\n * Logs\n   * [v1.2.4]\n     * Release Notes\n     * Changes\n\n\nRELEASE NOTE CONVENTION\n\n> 너무 많은 신경을 쓰지 말자. note 준비하고 번역하고, … etc. 많은 공수를 들이기엔 기회 비용이 아깝다.\n> \n> 사용자에게 유의미한(확실히 고지가 되어야만 하는) 업데이트(e.g. 기능 추가/변경/삭제 등)가 아닌 이상, 해당 업데이트는 다음과 같은\n> 류의 문구 하나로 충분하다.\n> \n> - 속도와 안정성 개선\n\n * Release note convention\n   [/wiki/pages/createpage.action?spaceKey=SW&title=Release%20note%20convention&linkCreation=true&fromPageId=374145123]\n   문서 카카오톡 형식(Bullet)을 따른다.\n\n\n\n\n\n\nLOGS\n\n\n[V1.2.4] \n\n\nRELEASE NOTES\n\n국가\n\n변경 내용\n\n제출 문구\n\n한국\n\n * 속도와 안정성 개선\n\n * 속도와 안정성 개선\n\n미국\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n중국\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n일본\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n그외\n\n * 속도와 안정성 개선\n\n * Improve speed and stability\n\n\nCHANGES\n\n * iOS 13 다크모드 비활성화\n\n * iOS 13 Slide menu 동작 방식을 이전과 동일하게 수정\n\n * 검색 수치 동적으로 표시되도록 수정\n\n * 버튼, 배경 이미지 깨지던 문제 해결\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/374145123"
  },
  {
    "pageContent": "Architecture\n\n\nMVVM [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35192856/MVVM]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35323936"
  },
  {
    "pageContent": "Issue\n * 위치 정보 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27295761]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27426838"
  },
  {
    "pageContent": "CCNx (FM)\n\n\n구조\n\n├─java                                  \n│  └─com                                \n│      └─ecubelabs                      \n│          └─fm                         \n│              ├─binding// 데이터 바인딩 어댑터                \n│              ├─data// 데이터                   \n│              │  ├─event// 이벤트 버스용 클래스               \n│              │  ├─local// 로컬 데이터 소스               \n│              │  │  └─pref// SharedPreferences 데이터 관련             \n│              │  ├─model// 데이터 모델               \n│              │  ├─remote// 원격 데이터 소스              \n│              │  │  └─network// 네트워크 데이터 소스          \n│              │  │      ├─interceptor// 통신 인터셉터  \n│              │  │      ├─request// api request시 사용 클래스      \n│              │  │      ├─response// api response받을때 사용 클래스     \n│              │  │      └─service// api spec 관리      \n│              │  └─repository// api를 이용하여 비즈니스 로직 처리하는 repository          \n│              ├─di// DI 관련 클래스                     \n│              │  └─annotation// DI시 사용 커스텀 어노테이션          \n│              ├─service// 커스텀 서비스                \n│              ├─ui// UI 관련                     \n│              │  ├─appnavigation// 앱 좌측 슬라이드 네비게이션 메뉴       \n│              │  ├─base// 베이스 UI                \n│              │  ├─collection// 수거 관련          \n│              │  │  ├─issue// 특이사항 페이지           \n│              │  │  ├─skip// 건너뛰기 페이지             \n│              │  │  └─volume// 수거하기 페이지           \n│              │  ├─common// 일반 UI              \n│              │  │  ├─button// 일반 버튼            \n│              │  │  ├─dialog// 일반 다이얼로그           \n│              │  │  │  └─message// 일반 메시지 다이얼로그       \n│              │  │  └─view// 일반 뷰             \n│              │  ├─intro// 인트로 페이지               \n│              │  ├─password// 비밀번호 관련            \n│              │  │  ├─auth// 비밀번호 수정 전 인증 페이지             \n│              │  │  └─update// 비밀번호 수정 페이지           \n│              │  ├─route// 경로 관련               \n│              │  │  ├─detail// 경로 상세 페이지           \n│              │  │  ├─list// 경로 리스트 페이지(Fragment)             \n│              │  │  │  └─tab// 경로 리스트 탭           \n│              │  │  ├─navigation// 경로 운행 페이지        \n│              │  │  │  └─info// 경로 운행 하단 정보 창          \n│              │  │  ├─result// 경로 결과            \n│              │  │  │  ├─detail// 경로 결과 상세 페이지        \n│              │  │  │  └─popup// 경로 결과 팝업         \n│              │  │  └─select// 경로 리스트 페이지(Activity)           \n│              │  ├─signin// 로그인 페이지              \n│              │  ├─test// 테스트 페이지(필요없음)                \n│              │  └─vehicle// 차량 관련             \n│              │      └─list// 차량 목록 페이지\n│              └─util// 유틸 클래스                   \n│                  ├─mapbox// 맵 박스 유틸             \n│                  │  └─replay// 맵 박스 경로 시뮬레이션 유틸          \n│                  └─notification// 노티피케이션 유틸       \n└─res// 리소스                                   \n    ├─anim                              \n    ├─drawable                          \n    ├─drawable-hdpi                     \n    ├─drawable-mdpi                     \n    ├─drawable-v24                      \n    ├─drawable-xhdpi                    \n    ├─drawable-xxhdpi                   \n    ├─drawable-xxxhdpi                  \n    ├─font                              \n    ├─layout                            \n    ├─menu                              \n    ├─mipmap-hdpi                       \n    ├─mipmap-mdpi                       \n    ├─mipmap-xhdpi                      \n    ├─mipmap-xxhdpi                     \n    ├─mipmap-xxxhdpi                    \n    ├─values                            \n    ├─values-en                         \n    └─xml                               \n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/113705010"
  },
  {
    "pageContent": "Device\n\n\n1. TABLET\n\n--------------------------------------------------------------------------------\n\n\nFM 단말기 적합 최소 필요 조건\n\n * S-GPS 기능 (A-GPS는 Optional)\n * Bluetooth 기능\n * 4G 네트워크 통신 지원 (Usim 슬롯 필요)\n * 안드로이드 6.0 이상\n * RAM 2G 이상\n * CPU: Snapdragon 425급 이상 (가능하면 Snapdragon 617급 이상)\n\n\n1.1. FM이 구동될 태블릿 후보군\n\nBold: 1차 후보군\n\nGreen 배경: 최종 후보군\n\n제조사제품명 OS화면 (\")CPURAM (GB)Storage (GB)배터리 (mAh)BluetoothGPSWiFi3G4G가격\n(KRW)판매링크적합여부\n\n네트워크 제외 적합여부\n\n비고아이뮤즈A108.110.1 (1920 * 1200)Rockchip Rk33994643000OXOXX239,000판매처\n[https://smartstore.naver.com/imuz/products/4204397819]\n\nX\n\n\n3G, 4G, GPS 동작필요아이뮤즈T78.17 (600 * 1024)MT816318 or 162600OOOXX\n\n89,000 or 109,000\n\n판매처 [https://smartstore.naver.com/imuz/products/3746813925]XX (RAM 부족)3G, 4G\n동작필요아이뮤즈T107.010.1 (1280 * 800)Cortex-A531 or 28 or 165800OOOXX129,000 or\n169,000판매처 [https://smartstore.naver.com/twostarshop/products/2613464076]XO (RAM\n2GB 모델만)3G, 4G 동작필요아이뮤즈A87.18 (1200 * 1920)Rockchip\nRK33994324000O확인불가OXX198,000판매처\n[https://smartstore.naver.com/twostarshop/products/3040363406]XO (GPS 가능할 경우)3G,\n4G, GPS 동작필요아이뮤즈컨버터85.18 (800 * 1280)Intel Z3735F232 or 644000O확인불가OXX139,000 or\n159,000판매처 [https://smartstore.naver.com/twostarshop/products/2020329917]XO (GPS\n가능할 경우)3G, 4G, GPS 동작필요, 듀얼 OS라는점이 마음에 걸림.엠피지오ATHENA TAB78.17 (1024 *\n600)Cortex-A7182500O확인불가OXX68,930판매처\n[http://shopping.interpark.com/product/productInfo.do?prdNo=6388246815&dispNo=016001&bizCd=P01397&NaPm=ct%3Dju0s6nuo%7Cci%3Dc903e52f1b23efc37a26260622a3f48ccf53e147%7Ctr%3Dslc%7Csn%3D3%7Chk%3Da57ee35369fce94a328351fc65612edbbf692206&utm_medium=affiliate&utm_source=naver&utm_campaign=shop_p11714_p01397&utm_content=price_comparison]XX\n(RAM 부족)3G, 4G, GPS 동작필요엠피지오ATHENA TAB88.18 (1280 *\n800)MTK81631163600OOOXX98,840\nXX (RAM 부족)3G, 4G 동작필요엠피지오ATHENA Queen7.07.85 (2048 *\n1536)MT81763324900OOOXX198,720\nXO3G, 4G 동작필요엠피지오레전드 N78.17 (1024 * 600)MTK81631162500O확인불가OXX63,000\nXX (RAM 부족)3G, 4G 동작필요엠피지오ATHENA Octa Plus6.010.1 (1280 *\n800)Cortex-A71165000O확인불가OXX132,000\nXX (RAM 부족)3G, 4G 동작필요ZTETrek 2 hd k886.08 (1280 * 800)Snapdragon\n6172164600OOOOO119,000판매처\n[https://smartstore.naver.com/wholesalestore/products/2200880453?NaPm=ct%3Dju0tfb3s%7Cci%3D2814bc46b667e73edafc12f082006b7f3c036a50%7Ctr%3Dslsl%7Csn%3D272741%7Cic%3D%7Chk%3D1beff825fa4dd55464544f70cc98e100d97dfdf8]O\nAS 불가능하다는 에릭의 피드백, 모바일팀에서 실제 단말기 테스트 도중 전원 버튼 불량 경험Teclast98 Octa core 4G6.010.1\n(1920 * 1200)MTK67532324900OOOOO198,000판매처\n[http://beauty.ontheway.co.kr/shop/ProdDetail.php?PMInc=14581703&NaPm=ct%3Dju0tfxhc%7Cci%3D00e66a0eee73a0b4a97e3dff8c4650b285bc6285%7Ctr%3Dslsl%7Csn%3D562305%7Chk%3Dbe942844dbbd9505e64998ac8d36f75a094de434]O\n테스트 결과 ZTE Trek2 대비 버벅임, 단말 동작 테스트 및 버그 디버깅 필요. AS 가능(한국 총판?에서 가능하다고\n표시되어있음)BDFKT1076.010 (1280 * 800)MTK65802165000OOOOO88 USD판매처1\n[https://www.gearbest.com/tablet-pcs/pp_694673.html], 판매처2\n[https://ko.aliexpress.com/item/4-3-Inch-KIDS-Android-Tablets-PC-WiFi-Dual-camera-tab-gift-for-baby-and-kids/32719790879.html?spm=a2g12.search0103.3.1.62c9179fCQcT5h&ws_ab_test=searchweb0_0,searchweb201602_1_10152_10151_10065_10068_10344_10342_10325_10546_10343_10340_10548_10341_10696_10084_10083_10618_10307_10712_10059_100031_10103_10624_10623_10622_10621_10620,searchweb201603_54,ppcSwitch_5&algo_expid=32fcd02f-e154-4522-8af0-76ac009d5d13-0&algo_pvid=32fcd02f-e154-4522-8af0-76ac009d5d13&priceBeautifyAB=0]O\n어떤 제품인지 알려진 정보가 별로없음. AS 어려워 보임.TeclastT207.010.1 (2560 *\n1600)MT6797T4648000OOO확인불가확인불가299,000판매처\n[https://www.coupang.com/vp/products/167775412?isAddedCart=]?O한국사이트에는 미기재. 중국\n사이트에는 된다고 적혀있음.\n(에릭 전화문의 결과 펌웨어 다운받아 설치할 경우 한국에서도 유심 원활히 사용가능하다고 함.)TeclastA10S7.010.1 (1920 *\n1200)MT81632326000OOOXX159,000판매처\n[https://www.coupang.com/vp/products/145902356?isAddedCart=]XO\nTeclastP80 PRO7.08.0 (1920 * 1200)MT81633165300OOOXX\n\n133,900\n\n판매처\n[http://deal.11st.co.kr/product/SellerProductDetail.tmall?method=getSellerProductDetail&prdNo=2087383022]XO\nTeclastM208.010.1 (2560 * 1600)MT67974646350OOOOO160 USD (190,000)판매처\n[https://ko.aliexpress.com/item/10-1-inch-2560-1600-Tablet-PC-Teclast-M20-MT6797-X23-Deca-Core-8-0/32902714934.html?spm=a2g12.search0104.3.9.b4d463c7xeeYGF&transAbTest=ae803_3&ws_ab_test=searchweb0_0%2Csearchweb201602_2_10065_10068_319_10059_10884_317_10887_10696_321_322_10084_453_10083_454_10103_10618_10307_10712_537_536_10713%2Csearchweb201603_35%2CppcSwitch_0&algo_pvid=9c50c8f0-9178-41ba-8496-9868c7de5111&algo_expid=9c50c8f0-9178-41ba-8496-9868c7de5111-1]O\n테클라스트 코리아에서 판매하지 않는것으로 보임. 알리익스프레스 판매.\n리뷰 [https://rgy0409.tistory.com/2930]\nTeclastP10 4G8.110.1 (1280 * 800)MTK67372164850OOOOO104.99 USD (130,000)판매처\n[https://ko.aliexpress.com/item/Teclast-P10-4G-LTE-10-1-Inch-1280-800-Android-8-1-OS-MTK6737-Quad/32954804244.html?spm=a2g12.search0104.3.9.384d675an9An4F&transAbTest=ae803_3&ws_ab_test=searchweb0_0%2Csearchweb201602_2_10065_10068_319_10059_10884_317_10887_10696_321_322_10084_453_10083_454_10103_10618_10307_10712_537_536_10713%2Csearchweb201603_35%2CppcSwitch_0&algo_pvid=c9eea23d-0066-4dec-85af-dc8c92fd020e&algo_expid=c9eea23d-0066-4dec-85af-dc8c92fd020e-1]O\n테클라스트 코리아에서 판매하지 않는것으로 보임. 알리익스프레스 판매.화웨이MediaPad M3 Lite7.08 (1920 *\n1200)MSM89403324800\nOO?O240,000판매처O\n\n화웨이MediaPad M36.08.4 (2560 * 1600)Kirin octa-core processor 4325100OOOOO\n\n\n\n\n화웨이MediaPad T58.010.1 (1920 * 1200)Kirin 6593325100OOOXX268,000\n\n\n\n화웨이M5 10 Lite LTE 32G\n\n\n\n\n\n\n\n\n\n\n375,000\n\n\n\n화웨이MediaPad M5 8.4\n\n\n\n\n\n\n\n\n\n\n378,000\n\n\n\n\n\n\n삼성\n\n\n갤럭시탭A 8.0 LTE (2017) 32G\n\n\n8.1\n\n\n8 (1280 * 800) \n\n\nSNAPDRAGON 425\n\n\n2\n\n\n32\n\n\n5000\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\n205,000\n\n\n판매처\n[https://search.shopping.naver.com/detail/detail.nhn?nv_mid=16952340701&cat_id=50000152&frm=NVSHATC&query=%EA%B0%A4%EB%9F%AD%EC%8B%9C+%ED%83%AD+a+lte&NaPm=ct%3Djwu78rgg%7Cci%3Ddca11e2cb4194e5bce30fbf1c3545128f47b38d0%7Ctr%3Dslsl%7Csn%3D95694%7Chk%3Dc8acdd8631cddffa765e0afe0fc7eb21f288d312]\n\n\nO\n\n\nO\n\n\n\n삼성\n\n\n갤럭시탭A 10.5 LTE (2018) 32G\n\n\n8.1\n\n\n10.5 (1920 * 1200)\n\n\nSNAPDRAGON 450\n\n\n3\n\n\n32\n\n\n7300\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\n328,000\n\n\n판매처\n[https://search.shopping.naver.com/detail/detail.nhn?nv_mid=14979417904&cat_id=50000152&frm=NVSHATC&query=%EA%B0%A4%EB%9F%AD%EC%8B%9C+%ED%83%AD+a+lte&NaPm=ct%3Djwu71gc8%7Cci%3D1d8858439c70fdc8e6aa489921860c640bbf7c92%7Ctr%3Dslsl%7Csn%3D95694%7Chk%3Da370f4df24f0050f7daef59055cc5d1e0df202bf]\n\n\nO\n\n\nO\n\n\n\n삼성\n\n\n갤럭시탭A 10.1 2019 LTE+WIFI (SM-T515)\n\n\n9.0\n\n\n10.1(1920 * 1200)\n\n\n엑시노스 7904\n\n\n3\n\n\n32\n\n\n6150\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\nO\n\n\n274,000\n\n\n판매처\n[https://smartstore.naver.com/upsystem5884/products/4537827210?NaPm=ct%3Djwuh9hkg%7Cci%3D7b0c89dab2f3b358fbdd013adbc8aa1867085b98%7Ctr%3Dslsl%7Csn%3D877652%7Cic%3D%7Chk%3D36abc37b7f00fd2d26a206ba442adccd25b5d516]\n\n\nO\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2. 태블릿 제조사\n\n\n1.2.1. TECLAST\n\n1.2.1.1. 공식 홈페이지\n\nhttp://www.teclast.com/en/ [http://www.teclast.com/en/]\n\n1.2.1.2. 태블릿 제품군\n\nhttp://www.teclast.com/en/tablet.html [http://www.teclast.com/en/tablet.html]\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/133333220"
  },
  {
    "pageContent": "[Android] URL\nScheme[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/android.gif?api=v2]\n\n\n\n\n * 작업\n   * 1. AndroidManifest intent filter 설정\n * 기타\n   * 1. 호출 방법\n   * 2. 앱에서 URL Scheme parameter 확인 및 사용\n\n\n\n\n작업\n\n\n1. ANDROIDMANIFEST INTENT FILTER \n[https://developer.android.com/training/basics/intents/filters?hl=ko]설정\n\n연결을 원하는 Activity 에 scheme 설정해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/image-20200317-185033.png?api=v2]\n\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\"/>\n\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n\n    <data android:host=\"test\" android:scheme=\"haulla\" />\n</intent-filter>\n\n\n\n\n기타\n\n\n1. 호출 방법\n\n * 웹에서 호출\n\n<a href=\"haulla://test?token=ABCD\"><h1>테스트</h1></a>\n\n위 방법을 따라하면 외부링크를 통해 앱이 잘 띄워지는 걸 확인할 수 있다.\n\n토큰도 로그에 잘 찍히는걸 확인할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/image-20200317-185109.png?api=v2]\n\n\n2. 앱에서 URL SCHEME PARAMETER 확인 및 사용\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/436601306/image-20200317-185132.png?api=v2]\n\nif (Intent.ACTION_VIEW == intent.action) {\n    val uri = intent.data\n    if (uri != null) {\n        val token = uri.getQueryParameter(\"token\")\n        Log.d(\"TEST\", \"token=$token\")\n    }\n\n}\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/436601306"
  },
  {
    "pageContent": "[Android] 빌드 환경 이해\n\n자세하게 알고싶으면 https://developer.android.com/studio/build/build-variants?hl=ko\n[https://developer.android.com/studio/build/build-variants?hl=ko] 읽는것이 좋습니다.\n\n\n\n앱을 개발하다 보면, 요구 환경에 따라 구성을 다르게 해줘야 하는 경우가 있다. 이때 안드로이드는 buildTypes +\nproductFlavors 조합을 이용한다.\n\n버전\n\n앱 이름\n\n패키지명\n\nAPI Url\n\n아이콘 이미지\n\nProduction 버전\n\nProduction App\n\ncom.app\n\nhttps//a.com/\n\nicon.png\n\nStage 버전\n\nStage App\n\ncom.app.stage\n\nhttps//test.a.com/\n\nicon.stage.png\n\n\n\n\nBUILDTYPES\n\n * 빌드 모드에 따라 바꿔줘야 하는 설정(난독화, Signing)을 이곳에서 해준다.\n\n * 예\n   \n   * release ↔︎ debug\n\n\nPRODUCTFLAVORS\n\n * 동일한 앱에 여러 버전을 구성할때 사용한다.\n\n * 예\n   \n   * 제공 환경: production ↔︎ stage\n   \n   * 결제 정책: free ↔︎ paid\n   \n   * 배포 환경: oneStore ↔︎ playStore\n\n\nBUILD VARIANT\n\n * 최종적으로 buildType+flavor 형태의 빌드 조합(Build Variant)이 가능해진다.\n\n예시\n\n * stageDebug\n\n * stageRelease\n\n * productionDebug\n\n * productionRelease\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2144272434"
  },
  {
    "pageContent": "[Android] 빌드 환경 별 키 관리\n\n\n[ANDROID] 빌드 환경 이해\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2144272434] 필독\n\n\nANDROIDPROJECT/APP/BUILD.GRADLE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-041120.png?api=v2]\n\n\nPRODUCTFLAVORS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-041601.png?api=v2]\n\n\nMAINACTIVITY\n\npublic class MainActivity extends ReactActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        Log.d(\"log test\", getString(R.string.CodePushDeploymentKey));\n        ...\n    }\n...\n\n\nSTAGEDEBUG 빌드 결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-045737.png?api=v2]\n\n\nSTAGEPRODUCTION 빌드 결과\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2141257766/image-20210913-045727.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2141257766"
  },
  {
    "pageContent": "MVVM\n\n\nFM ANDROID APPLICATION 설계\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/35192856/%EC%A0%9C%EB%AA%A9%20%EC%97%86%EB%8A%94%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8%20(2).png?api=v2]\n\n\n\n\n\nREFERENCES\n\n--------------------------------------------------------------------------------\n\n\nIMPLEMENTING MVVM USING LIVEDATA, RXJAVA, DAGGER ANDROID\n[https://proandroiddev.com/mvvm-architecture-using-livedata-rxjava-and-new-dagger-android-injection-639837b1eb6c]\n\n * Stack: MVVM + LiveData + RxJava2 + Dagger2\n\n\nOFFLINE FIRST ANDROID APP WITH MVVM, DAGGER2, RXJAVA, LIVEDATA AND ROOM\n[https://medium.com/@cdmunoz/offline-first-android-app-with-mvvm-dagger2-rxjava-livedata-and-room-25de4e1ada14]\n\n * Stack: MVVM + LiveData + RxJava2 + Dagger2 + Room + Repository\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35192856"
  },
  {
    "pageContent": "키스토어 & 업로드 키 분실\n\nGoogle에서 앱 서명 키를 관리 및 보호하도록 허용(권장) 사항에 동의했을 경우만 키 복구가 가능합니다.\n\n업로드 키 교체는 구글에 변경 요청 후 2~3 일 정도 소요됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200805-024318.png?api=v2]\n\n\n\n배포된 안드로이드 앱을 업데이트하려면 4가지 정보가 필요합니다. (keystore file, keystore password, key\nalias, key password)\n\n잊어버릴 경우 앱을 새로 올려야 하는 상황이 올 수 있습니다. 주의해서 보관해야 합니다.\n\n\n\n키스토어를 잃어버렸는데, 구글 앱 서명키에 동의했다면\nhttps://support.google.com/googleplay/android-developer/answer/7384423#create\n[https://support.google.com/googleplay/android-developer/answer/7384423#create]\n문서를 따라 하시면 됩니다.\n\n\n1. 키 저장소 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200804-062805.png?api=v2]\n\n * https://developer.android.com/studio/publish/app-signing#generate-key\n   [https://developer.android.com/studio/publish/app-signing#generate-key]\n\n\n2. 업로드 인증서 생성\n\nhttps://developer.android.com/studio/publish/app-signing#register_upload_key\n[https://developer.android.com/studio/publish/app-signing#register_upload_key]\n\n keytool -export -rfc -keystore scale-keystore.jks -alias ecubelabs -file scale-certificatie.pem\n\n\n3. 문의 넣기\n\n문의 넣을때 관리자 계정으로 문의를 넣는것이 좋습니다.\n\nhttps://support.google.com/googleplay/android-developer/contact/otherbugs\n[https://support.google.com/googleplay/android-developer/contact/otherbugs]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200804-063417.png?api=v2]\n\n\n\n * pem 파일을 같이 전달 해야합니다.\n\n * 답변은 하루 정도 소요됩니다.\n\n\n\n\n4. 교체 완료\n\n시간이 지나면 교체 완료 메일이 도착합니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/774045780/image-20200805-024616.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/774045780"
  },
  {
    "pageContent": "FM 단말기 Mobile data 사용 문제\n\n\n1. 상황\n\n--------------------------------------------------------------------------------\n\n고객에게 FM 운전자용 단말기를 제공하게 되었을 경우 모바일 데이터 통신비용을 우리가 지불하게 되는데,\n이때 유저가 이큐브랩의 Application을 사용하는데 있어 불필요한 데이터 통신을 일으키는 사용(유튜브 시청 등)을 할 경우 발생되는 모바일\n데이터 통신 비용이 문제가 될 수 있습니다.\n\n\n2. 원인\n\n--------------------------------------------------------------------------------\n\n 1. 이큐브랩에서 유저의 모바일 데이터 통신 비용을 부담합니다.\n 2. 유저는 착하지 않습니다.\n\n\n3. 대응 가능 방법 후보군\n\n--------------------------------------------------------------------------------\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]폐기된 후보\n\n\n3.1. 안드로이드 디바이스 OEM 의뢰\n\n--------------------------------------------------------------------------------\n\nOEM 전문 제조업체에게 단말기의 제조를 의뢰하는 방법입니다.\n\n\n3.1.1. 예상되는 OEM 요구사항\n\n * 구글플레이스토어앱의 설치가 되어있어야합니다.(구글플레이 서비스를 통한 이큐브랩 Application의 OTA 업데이트를 위해)\n * 구글플레이스토어앱을 유저가 접근할 수 없어야 합니다. (불필요한 어플리케이션 설치 방지 차원)\n * White list에 포함된 Application만이 Internet permission을 가지게 해야합니다.(다른 어플리케이션을 통해\n   모바일 데이터를 사용하는것을 막기 위해)\n * Launcher Application을 사용자가 변경할 수 없도록 해야 합니다.\n\n\n3.1.2. 예상 필요 작업\n\n * Launcher Application 개발\n   (디바이스 부팅시 실행되는 Application)\n\n\n3.1.3. 발생가능한 문제점\n\n * 구글플레이스토어의 접근을 막는것이 가능하더라도 유저가 APK파일을 수동 설치할 수 있습니다.\n * Rooting된 단말기의 경우 위에 명시된 White list를 무시하고 유저가 수동 설치한 Application이 모바일 데이터를 사용할\n   수 있습니다.\n * 사용자가 공장초기화를 하거나 OS 펌웨어를 변경할 경우 모바일데이터의 사용을 막을 방법이 없습니다.\n\n\n3.2. OEM없이 LAUNCHER APPLICATION 개발\n\n--------------------------------------------------------------------------------\n\n디바이스 부팅시 실행되는 Application입니다. 종료되지않는 특성을 가지고 있습니다.\n\n\n3.2.1. 예상 필요 작업\n\n * Launcher Application 개발\n   (디바이스 부팅시 실행되는 Application)\n\nFM APPLICATION자체가 LAUNCHER APPLICATION이 되는 경우\n\n디바이스 부팅시 FM Application이 곧바로 실행되게 됩니다.\n\nFM APPLICATION, LAUNCHER APPLICATION 개별 개발 하는 경우\n\n디바이스 부팅시 Launcher Application이 실행되게 되며, 유저에게 FM Application이 아닌 다른 Application도\n실행할 수 있는 선택지(Shortcut)를 제공할 수 있습니다.\n\n\n3.2.2. 발생가능한 문제점\n\n유저가 런처앱을 변경하는것을 막지 못하므로 다른 Application을 이용하여 불필요한 모바일 데이터 사용이 가능합니다.\n\n\n3.3. CORPORATE-OWNED, SINGLE-USE (COSU) APPLICATION 개발\n\n--------------------------------------------------------------------------------\n\n단말기 자체를 특정 어플리케이션만이 구동되도록 제한하는 방법입니다. 우리 서버에서 원격으로 고객들의 단말기를 관리할 수 있으며 사용자가 단말기를\n임의로 조작할 수 없도록 제한할 수 있습니다.\n\n\n가능한 것\n\n * 사용자가 임의로 단말기의 공장초기화(=리셋)를 하지 못하도록 제한\n * 관리자가 지정한 어플리케이션만 접근할 수 있도록 제한\n * 단말기 부팅시 홈화면, Lock Screen 등 거치지않고 바로 지정 어플리케이션 실행\n * 지정 어플리케이션만 실행되도록 제한 및 사용자가 해당 어플리케이션을 종료하지 못하도록 제한\n * 사용자가 단말기의 설정에 접근할 수 없도록 제한\n * 원격으로 사용자들의 단말기의 설정 변경\n * 단말기 초기 설정방법은 공장초기화후 QR코드 스캔하는것만으로 완료\n * 마켓에 앱이 업데이트 되었을경우 특정시간대에 자동 업데이트 시도하도록 설정\n * 원격으로 단말기 잠금, 재부팅 등 명령\n\n\n단말기 배포 방법\n\n 1. Android 6.0이상이 구동가능한 단말기를 구입합니다.\n\nFOR DEVICES RUNNING ANDROID 7.0 OR ABOVE:\n\n 1. Turn on a new or factory-reset device.\n 2. Tap the same spot on the welcome screen six times to enter QR code mode.\n 3. Connect to a WiFi network.\n 4. Scan the QR code.\n\nFOR DEVICES RUNNING ANDROID 6.0:\n\n 1. Turn on a new or factory-reset device.\n 2. Follow the setup wizard and enter your Wi-Fi details.\n 3. When prompted to sign in, enter afw#setup.\n 4. Tap Next, and then accept the installation of Android Device Policy.\n 5. Scan the QR code.\n\n\n제약사항\n\n단말기의 Android OS version이 '6.0 Marshmallow' 이상이어야 합니다.\n[https://developer.android.com/work/guide#prerequisites]\n\n\n필요사항\n\n단말기 설정, 관리 및 어플리케이션 배포를 위해 Android Management API 사용이 필요합니다.\n\n\n개발 참조\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]참조문서\n\nhttps://developer.android.com/work/cosu\n[https://developer.android.com/work/cosu]\n\nhttps://stackoverflow.com/questions/44828745/how-to-implement-single-application-mode-cosu-in-android\n[https://stackoverflow.com/questions/44828745/how-to-implement-single-application-mode-cosu-in-android]\n\nhttps://codelabs.developers.google.com/codelabs/cosu/index.html?index=..%2F..%2Findex#0\n[https://codelabs.developers.google.com/codelabs/cosu/index.html?index=..%2F..%2Findex#0]\n\nhttps://github.com/googlecodelabs/cosu [https://github.com/googlecodelabs/cosu]\n\n\n4. 하드웨어\n\n--------------------------------------------------------------------------------\n\n\n4.1. 요구사항\n\n--------------------------------------------------------------------------------\n\n\n4.1.1. 필수 기능\n\n * 블루투스\n * GPS\n\n\n4.1.2. 최소 요구사항\n\n램\n\n1GB\n\nCPU\n\n퀄컴 스냅드래곤/4XX 라인업\n\n\n4.1.3. 권장 요구사항\n\n램\n\n2GB\n\nCPU\n\n퀄컴 스냅드래곤/6XX 라인업\n\n\n4.2. 적격 단말\n\n--------------------------------------------------------------------------------\n\n제품명가격(소매가)BrandCPUStorageRAMOSDisplayBattery\n\n구입링크\n\nzte trek 2 hd k8899,000원ZTE퀄컴 스냅드래곤 617 MSM895216GB2GBAndroid 6.0 8.0인치 (1280 x\n800) 4600mAh링크1\n[http://itempage3.auction.co.kr/DetailView.aspx?ItemNo=B551418097&frm3=V2]Teclast\n98 Octa core 4G130,000원TeclastMTK 675332GB 2GB Android 6.0 10.1인치 (1920 x\n1200)4900mAh링크1\n[http://item.gmarket.co.kr/DetailView/Item.asp?goodscode=1453036037&GoodsSale=Y&jaehuid=200001169&NaPm=ct%3Djkhlz5u8%7Cci%3D7b71ca6ce8cb2e27d7d2cbc11f14fa4581aa2452%7Ctr%3Dslsl%7Csn%3D24%7Chk%3D34d9637e7cab6747624775caa486b4114b71e2ad]BDF\ntablet pc\n\n90,500 ~ 113,500원\n\nBDFMTK 658016GB2GB Android 6.0 10인치 (1280 x 800)5000mAh링크1\n[https://ko.aliexpress.com/item/4-3-Inch-KIDS-Android-Tablets-PC-WiFi-Dual-camera-tab-gift-for-baby-and-kids/32719790879.html?spm=a2g12.search0103.3.1.62c9179fCQcT5h&ws_ab_test=searchweb0_0,searchweb201602_1_10152_10151_10065_10068_10344_10342_10325_10546_10343_10340_10548_10341_10696_10084_10083_10618_10307_10712_10059_100031_10103_10624_10623_10622_10621_10620,searchweb201603_54,ppcSwitch_5&algo_expid=32fcd02f-e154-4522-8af0-76ac009d5d13-0&algo_pvid=32fcd02f-e154-4522-8af0-76ac009d5d13&priceBeautifyAB=0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2.1. ZTE TREK 2 HD K88\n\n\n4.2.2. TECLAST 98 OCTA CORE 4G\n\n원래 목표였던.. '공장초기화 혹은 신제품 부팅시 설정'에서 진입해야하는것이 불가능함을 확인했습니다.\n이 제품으로 가능한 방법에는\n\n * 커스텀 롬을 씌우는 방법\n\n * 서드파티 EMM 솔루션을 사용하는 방법\n\n이 있겠습니다.\n\n각 방법 구현에는 리서치가 필요하겠지만, 우선 각 예상되는 단점으로는\n\n커스텀롬의 경우 모든 단말기에 커스텀롬을 배포하는 단계가 추가되어야합니다.\n\n서드파티 EMM 솔루션을 사용하는 방법은 Android Management API를 사용하는것이아닌, EMM API를 사용하는것이며, 하나의\n단말기를 설정하는 절차가 꽤 길것으로 보입니다. 숙달되면 약 5 ~ 10분으로 단축할 수 있을것으로 기대하고있습니다.\n\n우선 현재 아직 배송이 오지않은 ZTE사의 단말기가 공장초기화시 초기설정 진입이 가능하기를 기대하고있으며, 가능할경우\n\n * 직접 QR코드 생성하여 배포\n\n * 서드파티 솔루션으로 QR코드 생성하여 배포\n\n위 2가지 방법이 가능하겠습니다.\n\n다만 솔루션 이용시 subscription방식으로 결제를 해야하며, 단말기 1개당 월 3 ~ 7USD 정도의 비용이 들것으로 예상됩니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/52724289"
  },
  {
    "pageContent": "Minimum support OS version\n\n\n선택지\n\nAndroid 앱 개발시 지원할 플랫폼의 최소 버전을 선택해야하며 크게는 아래 3가지 경우가 있습니다.\n\n\nAPI LEVEL 16\n\n * 이름 : 젤리빈\n * 출시일 : 2012년 06월 28일\n * 마켓쉐어 : 4%\n\n\nAPI LEVEL 19\n\n * 이름 : 킷캣\n * 출시일 : 2013년 10월 31일\n * 마켓쉐어 : 10.3%\n\n\nAPI LEVEL 21\n\n * 이름 : 롤리팝\n * 출시일 : 2014년 10월 16일\n * 마켓쉐어: 85%\n\n--------------------------------------------------------------------------------\n\n\nMARKET SHARE\n\n * https://www.statista.com/statistics/271774/share-of-android-platforms-on-mobile-devices-with-android-os/\n   [https://www.statista.com/statistics/271774/share-of-android-platforms-on-mobile-devices-with-android-os/]\n * https://developer.android.com/about/dashboards/?hl=ko\n   [https://developer.android.com/about/dashboards/?hl=ko]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/51281921/dkjdsldsldsl.PNG?api=v2]\n\n\nCCN ANDROID 유저 통계\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/51281921/djksfjlkdsldsl.PNG?api=v2]\n\n\n\n\n--------------------------------------------------------------------------------\n\n\n선택\n\nAPI Level 19부터 지원하는걸로..",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51281921"
  },
  {
    "pageContent": "개발환경\n\n\nJIMMY 데스크탑 (회사)\n\n--------------------------------------------------------------------------------\n\n\nANDROID DEBUG\n\n * MD5: 41:98:42:8B:12:E6:D4:42:06:51:7C:54:B3:BC:21:D0\n * SHA1: 13:E0:FF:A9:1D:90:BA:B1:30:8D:1C:8C:A8:BF:E9:D4:28:89:7A:82\n * SHA256:\n   D6:FF:B3:34:6E:73:CF:D8:9B:2B:AB:70:A7:19:8B:D3:EA:BE:2A:6B:B4:D6:AE:C5:97:F8:4A:82:7E:1E:A2:F0\n\n\nANDROID RELEASE\n\n\nCCN\n\n * MD5: A6:F6:F7:60:F0:BB:32:63:07:A0:A5:96:08:BE:76:61\n * SHA1: 94:F0:4D:15:64:80:2A:45:57:2A:47:62:D6:60:AB:F1:BD:85:F8:F7\n * SHA256:\n   03:E3:C5:9D:C2:46:32:9E:59:42:6F:FF:A5:8C:F0:12:5A:9B:4E:FE:53:CE:06:41:75:23:C6:94:C2:08:DA:5D",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/35160092"
  },
  {
    "pageContent": "위치 정보\n\n참조\n\n--------------------------------------------------------------------------------\n\nhttps://developer.android.com/guide/topics/location/battery?hl=ko\n[https://developer.android.com/guide/topics/location/battery?hl=ko]\n\n\nANDROID 8.0 (API LEVEL 26) 변경점\n\n--------------------------------------------------------------------------------\n\n * Background location gathering is throttled and location is computed, and\n   delivered only a few times an hour.\n * Wi-Fi scans are more conservative, and location updates aren't computed when\n   the device stays connected to the same static access point.\n * Geofencing responsiveness changes from tens of seconds to approximately two\n   minutes. This change noticeably improves battery performance—up to 10 times\n   better on some devices.\n\n\n주요 변경점\n\n--------------------------------------------------------------------------------\n\n백그라운드에서 더이상 위치정보를 실시간으로 수집할 수 없습니다.\n\n\n전원 소모 주요 원인\n\n--------------------------------------------------------------------------------\n\n * Accuracy: The precision of the location data. In general, the higher the\n   accuracy, the higher the battery drain.\n * Frequency: How often location is computed. The more frequent location is\n   computed, the more battery is used.\n * Latency: How quickly location data is delivered. Less latency usually\n   requires more battery.\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/27295761"
  },
  {
    "pageContent": "SMS\n\n\nSMS 파싱 이슈\n\n--------------------------------------------------------------------------------\n\n2019년 1월 9일 시행된 정책으로, SMS 파싱이 크게 제한되었습니다. 이제 SMS 파싱은 원칙적으로 안드로이드에서 제공하는 SMS\nRetriever API [https://developers.google.com/identity/sms-retriever/overview] 를\n통해서만 가능해졌습니다.\n\n\n관련 링크\n\n * https://proandroiddev.com/no-more-sms-call-log-permissions-now-what-9b8226de7827\n   [https://proandroiddev.com/no-more-sms-call-log-permissions-now-what-9b8226de7827]\n * https://developers.google.com/identity/sms-retriever/overview\n   [https://developers.google.com/identity/sms-retriever/overview]\n * https://play.google.com/about/privacy-security-deception/permissions/\n   [https://play.google.com/about/privacy-security-deception/permissions/]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/125567580"
  },
  {
    "pageContent": "권한\n\n안드로이드 클라이언트 프로그램은 특정 기능을 수행하기 위해서는 권한이 필요하고, 때에 따라 유저에게 이를 요청해야합니다.\n\n\n마시멜로우(6.0) 이전\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/165052966/image2019-6-17_17-44-33.png?api=v2]\n\n앱이 설치되기직전에 안드로이드 OS단에서 권한을 유저에게 요청하게됩니다. 이 권한이 승인되지 않을경우 앱은 설치되지 않습니다. 앱이 설치될경우\n이후로는 권한을 취소할 수 없습니다.\n\n앱이 설치된 이후로는 앱이 필요한 모든 권한이 있다고 간주해도됩니다.\n\n\n마시멜로우(6.0)및 그 이후\n\n앱이 설치되기전에 권한을 요청하지 않습니다. 앱이 실행중일때 권한을 요청하게 됩니다. 권한을 요청하는 위치나 순서는 개발자가 결정할 수\n있습니다.\n\n권한을 유저가 거부할 경우 해당 권한이 필요한 기능을 수행할 수 없습니다.\n\n유저는 이 권한을 승인한뒤에도 언제든지 기기 설정에서 이 권한 승인을 취소할 수 있습니다. 이 경우 해당 앱은 다시 그 권한이 승인되기 이전까지\n해당 권한이 필요한 기능을 수행할 수 없습니다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/165052966"
  },
  {
    "pageContent": "네비게이션\n\n\n경로 노드\n\n--------------------------------------------------------------------------------\n\n\n수정\n\n--------------------------------------------------------------------------------\n\n\n기존 업로드된 이미지의 표시\n\n--------------------------------------------------------------------------------\n\n[/wiki/download/attachments/125633047/Untitled%20Diagram.drawio.png?api=v2]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/125633047"
  },
  {
    "pageContent": "LTE 주파수 대역\n\n\nDISCLAIMER\n\n이 문서에서 사용한 데이터 소스는 다음과 같습니다. 틀린 정보일 수 있습니다.\n\n * https://www.gsmarena.com [https://www.gsmarena.com/]\n * https://www.frequencycheck.com [https://www.frequencycheck.com/]\n\n\nLTE 주파수 대역 목록\n\nhttp://niviuk.free.fr/lte_band.php [http://niviuk.free.fr/lte_band.php]\n\n\n\n\n\n통신사\n\n--------------------------------------------------------------------------------\n\n\nAT&T\n\nhttps://www.frequencycheck.com/carriers/at-t-united-states\n[https://www.frequencycheck.com/carriers/at-t-united-states]\n\n\nLTE 주파수 대역\n\n * B2 (1900 PCS)\n * B4 (1700/2100 AWS 1)\n * B17 (700 bc)\n * B30 (2300 WCS)\n\n\nVERIZON\n\nhttps://www.frequencycheck.com/carriers/verizon-wireless-united-states\n[https://www.frequencycheck.com/carriers/verizon-wireless-united-states]\n\n\n주의사항\n\nThis carrier only accepts approved devices on its network.\nEven if a device supports some or all of the required frequencies for this\ncarrier, it will not be able to connect unless the device is approved for this\nnetwork. Check with the network operator to confirm whether a device is approved\nor not.\n\n\nT-MOBILE\n\nhttps://www.frequencycheck.com/carriers/t-mobile-united-states\n[https://www.frequencycheck.com/carriers/t-mobile-united-states]\n\n\nLTE 주파수 대역\n\n * B2 (1900 PCS)\n * B4 (1700/2100 AWS 1)\n * B12 (700 ac)\n * B66 (1700/2100)\n * B71 (600)\n   \n   \n\n\n태블릿\n\n--------------------------------------------------------------------------------\n\n\nHUAWEI MEDIAPAD T5\n\n\n지원 주파수 대역\n\nLTE band 1(2100), 3(1800), 5(850), 7(2600), 8(900), 20(800)\n\n참조 [https://www.gsmarena.com/huawei_mediapad_t5-9412.php]\n\n\n\n\n\nSAMSUNG GALAXY TAB A 10.5 (SM-T595)\n\n\n지원 주파수 대역\n\nLTE band 1(2100), 2(1900), 3(1800), 4(1700/2100), 5(850), 7(2600), 8(900),\n12(700), 17(700), 20(800), 28(700), 38(2600), 40(2300), 66(1700/2100)\n\n참조 [https://www.gsmarena.com/samsung_galaxy_tab_a_10_5-9263.php]\n\n\nSAMSUNG GALAXY TAB A 8.0 (2018) (SM-T387V (VERIZON))\n\n참조 [https://www.gsmarena.com/samsung_galaxy_tab_a_8_0_(2018)-9665.php]\n\n\n3G BANDS\n\nHSDPA 850 / 900 / 1900 / 2100 - Verizon\n\n\n4G BANDS\n\nLTE band 2(1900), 3(1800), 4(1700/2100), 5(850), 7(2600), 13(700) - Verizon\n\n\n\n\n\n통신사 & 태블릿 LTE 주파수 대역 호환\n\n--------------------------------------------------------------------------------\n\n주파수 대역/태블릿\n\nSM-T387V\n\nSM-T595TB-8704VAT&T - B2 (1900 PCS)OOOAT&T - B4 (1700/2100 AWS 1)OOOAT&T - B17\n(700 bc)\nO\nAT&T - B30 (2300 WCS)\n\n\nVerizon - B2 (1900 PCS)OOOVerizon - B4 (1700/2100 AWS 1)OOOVerizon - B13 (700\nc)O\n\nT-Mobile - B2 (1900 PCS)OOOT-Mobile - B4 (1700/2100 AWS 1)OOOT-Mobile - B12 (700\nac)\nO\nT-Mobile - B66 (1700/2100)\nO\nT-Mobile - B71 (600)\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/172261775"
  },
  {
    "pageContent": "API 호출",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/184582433"
  },
  {
    "pageContent": "User Agent\n\nCustom user agent 로 앱, 기기 식별이 가능해야 한다.\n\nCustom user agent 설정이 불가능한 http client 는 사용하면 안된다.\n\n\n\n\n\n\n * 형식\n   * Android\n   * iOS\n * 사례\n\n\n\n\n\n\n\n형식\n\n\nANDROID\n\n<app id>/<app version name>:<app version code> (Linux; U; Android <android version code>; Android API <android sdk version code>; <support abi>; <manufacturer> <device model name>; Build/<os build name>)\n\nex) com.ecubelabs.fm/1.1.14-beta:26\n[http://com.ecubelabs.fm/1.1.14-beta:26] (Linux; U; Android 9; Android API 28;\narm64-v8a; Google PixelXL; Build/PQ3A.190505.001)\n\n\nIOS\n\n<app id>/<app version name>:<app version code> (iOS <iOS version code>; <support abi>; <manufacturer> <device model name>; Build/<os build name>)\n\nex) org.reactjs.native.example.haulla/1.0.1:1 (iOS 12.4; Intel x86-64h Haswell;\nApple iPhone X; Build/18G84)\n\n\n사례\n\nAppUser Agent파파고aceApps (Android OS 9; samsung SM-G975N; papago_android;\n1.4.3)니코동Niconico/1.0 (Linux, U; Android 9; ja-jp; nicoandroid SM-G975N)\nVersion/5.09.0구글홈com.google.android.apps.chromecast.app/2.10.1.13 (Linux; U;\nAndroid 9; SM-G975N Build/PPR1.180610.011)메가박스Dalvik/2.1.0 (Linux; U; Android 9;\nSM-G975N Build/PPR1.180610.011)\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/184778986"
  },
  {
    "pageContent": "모바일 앱 버전 관리\n\n\n버전 형식\n\nx.y.z 형식\n\n * x: major. 사업팀 요구가 있을 때 변경한다. 신규 프로젝트는 모두 1로 설정하고 기존 프로젝트는 기존 major 를 유지한다.\n\n * y: year - 2020\n\n * z: week number\n\nex) 2021.01.13 에 배포를 해야 하는 경우 버전은 1.1.3\n\n\n\n * Q. 같은 주에 배포를 여러번 해야 하면?\n\n * A. build number 만 올린다.\n\n\n\n * Q. 왜 이렇게 하나?\n\n * A. 모바일 앱 특성상 여러개의 작업을 모아서 배포하기 때문에 semantic versioning 을 따르기도 힘들고 지금까지 경험으로 앱\n   개발 초기를 제외하면 한 주에 여러번 배포하는 일은 없었다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1150189733"
  },
  {
    "pageContent": "모바일앱 배포 절차\n * 1. 업데이트 브랜치 생성\n * 2. 프로젝트 버전 업데이트\n * 3. PR 제출\n * 4. 앱 업로드 및 심사 제출\n\n\n1. 업데이트 브랜치 생성\n\nmain 기준으로 업데이트 브랜치를 새로 만든다. (예: MP-4556)\n\n상황에 따라 작업중이던 브랜치를 그대로 사용하는 경우도 있다. (hotfix 처럼 머지 후 바로 배포 하는 경우)\n\n\n2. 프로젝트 버전 업데이트\n\n업데이트 명령어를 터미널에 입력한다. \n\n// major 버전 업데이트 경우\nnpm version major\n\n// minor 버전 업데이트 경우\nnpm version minor\n\n// patch 버전 업데이트 경우\nnpm version patch\n\nmajor, minor, patch  중 무엇을 업데이트해야 하는지 모른다면  김일두(Charlie)\n[http://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 물어본다. \n\n대부분 patch 버전을 업데이트 하면 된다.\n\n\n3. PR 제출\n\n예시: https://github.com/Ecube-Labs/haulla-mobile/pull/753/files\n[https://github.com/Ecube-Labs/haulla-mobile/pull/753/files]\n\n\n4. 앱 업로드 및 심사 제출\n\nPR이 완료되면 아래 문서를 참고해 앱을 업로드하고, 심사 요청을 넣는다. 만약 배포 권한이 없다면 김일두(Charlie)\n[https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n에게 문의한다.\n\n애플 앱스토어 배포 [http://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224133169]\n\n구글 플레이스토어 배포 [http://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1947795474]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1948319760"
  },
  {
    "pageContent": "애플 앱스토어 배포\n\n \n\n * 1. 배포 브랜치로 체크아웃\n * 2. 타겟 디바이스 지정\n * 3. Archive\n * 4. Upload App\n * 5. 배포 버전 생성\n * 6. 심사 요청\n * 7. 리젝 당한 경우 재심사 요청\n\n\n1. 배포 브랜치로 체크아웃\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.07.44%E2%80%AFPM.png?api=v2]\n\nPR 완료 후 배포하므로 주로 메인 브랜치일 것이다. 현재 어디 브랜치에 있는지는 xcode 상단에서도 확인이 가능하다.\n\n\n2. 타겟 디바이스 지정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.06.31%E2%80%AFPM.png?api=v2]\n\n타겟 디바이스를 Any iOS Device (arm64) 로 지정한다.\nAny iOS Simulator Device (x86_64)는 이름에서도 알 수 있듯이 simulator용이다\n\n\n3. ARCHIVE\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.11.16%E2%80%AFPM.png?api=v2]\n\n * Product > Archive\n\n * 오래 걸릴 수도 있다\n\n\n4. UPLOAD APP\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.11.59%E2%80%AFPM.png?api=v2]\n\n * Archive 가 완료되면 위와 같은 창이 뜬다.\n\n * 버전을 확인하고 Distribute App 클릭.\n   \n   * 이름이 왜 Distribute 인지 모르겠다.\n   \n   * 이걸 눌러도 앱이 앱스토어에 배포 되는게 아니고 App Store Connect 에 업로드 되므로 안심하고 눌러도 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/Screenshot%202024-01-30%20at%206.12.34%E2%80%AFPM.png?api=v2]\n\n * Default로 선택되어 있는 TestFlight & App Store 옵션으로 Distribute를 눌러준다.\n\n\n\n * 업로드 후 App Store Connect 에 뜰 때 까지 오래 걸린다. (~30분)\n\n * App Store Connect 에 준비가 되면 애플에서 메일이 온다.\n\n\n5. 배포 버전 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20210108-105650.png?api=v2]\n\n * App Store Connect [https://appstoreconnect.apple.com/] 에서 앱에 들어가면 왼쪽 상단 iOS\n   App 오른쪽에 (더하기)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/add.png]\n   아이콘이 보인다.\n\n * (더하기)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/add.png]\n   버튼을 눌러서 배포하려는 앱 버전을 추가한다.\n\n * 추가할 앱 버전은 Xcode 에 있는 버전과 같아야 한다.\n   \n   * [https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20210108-105855.png?api=v2]\n\n * (더하기)\n   [https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/add.png]\n   아이콘이 보이지 않으면 아마 심사중인 상태일 것. 심사가 진행중일 때 추가로 심사를 요청할 수 없다.\n\n\n6. 심사 요청\n\n * What's New in This Version\n   \n   * 새로운 버전에 포함된 내용. 반드시 작성해야 한다.\n\n * Build\n   \n   * 4에서 업로드 한 바이너리를 선택하면 된다.\n   \n   * 나머지는 이전 버전과 동일하게 설정되므로 변경 사항이 있을때만 수정해주면 된다.\n\n\n7. 리젝 당한 경우 재심사 요청\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20201231-062534.png?api=v2]\n\n앱 바이너리에 마우스를 올려보면 위와 같이 (빼기)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/forbidden.png]\n아이콘이 나타난다.\n\n(빼기)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/forbidden.png]\n를 클릭해서 리젝당한 바이너리를 제거.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20201231-062628.png?api=v2]\n\n문제점을 수정한 바이너리를 선택하자.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/224133169/image-20201231-062733.png?api=v2]\n\n우측의 Save 를 누르면 심사 상태가 Rejected → Prepare for Submission 으로 바뀌었고 Submit for\nReview 버튼이 활성화 된 것을 볼 수 있다.\n\nSubmit for Review 를 눌러서 재심사 요청.\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/224133169"
  },
  {
    "pageContent": "구글 플레이스토어 업데이트\n\n \n\n * 1. 배포 브랜치로 체크아웃\n * 2. AAB 파일 생성\n * 3. 플레이스토어 콘솔에 접속\n * 4. 업데이트 하고자하는 앱 선택\n * 5. Production 메뉴 선택\n * 6. 새로운 버전 생성\n * 7. AAB or APK 파일 업로드\n * 8. Release 정보 입력\n * 7. 리뷰 버튼 클릭\n * 8. 심사 제출\n * 8. 심사 상태 확인\n\n스토어 정보(앱 이름, 설명, 스크린샷)만 업데이트 하는 경우 새로운 버전을 꼭 업로드 하지 않아도 됩니다.\n\n\n1. 배포 브랜치로 체크아웃\n\nPR 완료 후 배포하므로 주로 메인 브랜치일 것이다.\n\n\n2. AAB 파일 생성\n\n아래 문서를 참고해 AAB 파일을 생성한다.\n\n[H][M][배포] 안드로이드 APK, AAB 파일 빌드\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/298549959]\n\n\n3. 플레이스토어 콘솔에 접속\n\nhttps://play.google.com/console/ [https://play.google.com/console/]\n\n\n4. 업데이트 하고자하는 앱 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051458.png?api=v2]\n\n\n5. PRODUCTION 메뉴 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051531.png?api=v2]\n\n\n6. 새로운 버전 생성\n\nCreate new release 버튼을 눌러서 새로운 버전을 생성한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051553.png?api=v2]\n\n\n\n\n7. AAB OR APK 파일 업로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-051713.png?api=v2]\n\n\n8. RELEASE 정보 입력\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083127.png?api=v2]\n\n\n\n항목\n\n설명\n\n비고\n\nRelease name\n\n1.0.1 과 같이 스토어에 표시되는 앱 버전\n\n가만히 있으면 업로드 파일을 분석해 자동으로 기입된다. 따로 건들지 말자.\n\nRelease note\n\n업데이트 내용\n\n다른 요청이 없다면 아래 내용을 복사한다.\n\n<en-US>\nBug fixes and performance improvements.\n</en-US>\n<ko-KR>\n서비스 개선 및 안정화\n</ko-KR>\n\n\n7. 리뷰 버튼 클릭\n\nSave 버튼과 Review release 버튼을 차레대로 누른다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083143.png?api=v2]\n\n\n\n\n8. 심사 제출\n\nStart rollout to Production 버튼을 눌러 심사 제출한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083218.png?api=v2]\n\n\n\n\n8. 심사 상태 확인\n\nUpdate status 가 In review 상태로 바뀐것을 확인한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1947795474/image-20210621-083444.png?api=v2]\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1947795474"
  },
  {
    "pageContent": "Slow query 확인\n * 로그 확인: CloudWatch slow query logs\n * 쿼리 점검: Explain ...\n * 개선\n   * Index\n     * Key\n     * 조건문 확인\n\n일반적으로 slowquery 확인 후 optimizer피셜 쿼리 성능검사 후 성능 개선 순으로 진행한다.\n\n\n로그 확인: CLOUDWATCH SLOW QUERY LOGS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3015934024/Screenshot%202024-05-24%20at%2011.04.58%E2%80%AFAM.png?api=v2]\n\nAWS의 CloudWatch / Logs / Log groups 에서 slowquery키워드로 검색하면 클러스터별 slowquery에 대한\n기록을 확인할 수 있다.\n\nRDS for slow query log\n[https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.MySQL.LogFileSize.html#USER_LogAccess.MySQL.Generallog]\n\n\n쿼리 점검: EXPLAIN ...\n\nMySQL에서 Explain문을 사용해서 실행하고자 하는 쿼리가 어떤 식으로 돌아갈 지 짐작할 수 있다. 다만, 무조건 Explain문의 결과와\n같이 실행되는 건 아니고, 내장 optimizer에 의해 추정된 결과이다.\n\nhttps://dev.mysql.com/doc/refman/8.0/en/using-explain.html\n[https://dev.mysql.com/doc/refman/8.0/en/using-explain.html]\n\n\n\n\n개선\n\n\nINDEX\n\n개선 가능성이 있는 부분은 일반적으로 Index와 관련된 경우가 많다.\n\nIndex를 통한 성능 개선 예시\n\n2024-04-12\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2967011406/2024-04-12]\n\nSlow Query 개선기 [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3016556548]\n\n\nKEY\n\n대표적으로 조건절에 사용하는 column이 key로 생성되어있지 않아서 index를 못타고 풀스캔을 하는 경우가 많다.\n\n\n조건문 확인\n\nindex를 사용한 검색은 binary search를 이용하는데, binary search의 특성상 특정 조건들은 index를 태우기가 어렵다.\n\nIN vs NOT IN\n\nkey로 설정되어있는 column이더라도 IN구문이 NOT IN구문 보다 index를 탈 확률이 높다.\n\nhttps://stackoverflow.com/questions/16891668/sql-in-vs-not-in\n[https://stackoverflow.com/questions/16891668/sql-in-vs-not-in]\n\nUNION instead of OR statement\n\n테이블 조인 시 사용되는 조건으로 OR을 사용하면 테이블을 풀스캔 한다. OR을 UNION으로 바꿔서 사용하면 쿼리문은 좀 복잡해질지언정\nindex를 태울 수 있다.\n\nhttps://towardsdatascience.com/why-you-should-stop-using-or-in-sql-joins-right-now-d5b6e83464cf\n[https://towardsdatascience.com/why-you-should-stop-using-or-in-sql-joins-right-now-d5b6e83464cf]\n\nhttps://stackoverflow.com/questions/19725014/sql-server-left-join-with-or-operator\n[https://stackoverflow.com/questions/19725014/sql-server-left-join-with-or-operator]\n\nhttps://dba.stackexchange.com/questions/227238/speed-up-left-join-with-or-operator-in-on-clause\n[https://dba.stackexchange.com/questions/227238/speed-up-left-join-with-or-operator-in-on-clause]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3015934024"
  },
  {
    "pageContent": "쿼리 작성 가이드\n\n어플리케이션에서 실행하는 adhoc 쿼리가 아닌 운영하면서 데이터를 변경하기 위한 쿼리\n\n * 0. Sample query\n * 1. PK 혹은 인덱스로 업데이트 한다.\n * 2. Audit column 이 있는 경우 근거를 남겨둔다.\n\n\n0. SAMPLE QUERY\n\nUPDATE haulla.city\nSET lateFeeRate = 5,\n    updatedBy   = 'MP-6993',\n    updatedAt   = CURRENT_TIMESTAMP\nWHERE id = 24;\n\n\n1. PK 혹은 인덱스로 업데이트 한다.\n\n그렇지 않으면 테이블 락 발생할 수 있음\n\n\n2. AUDIT COLUMN 이 있는 경우 근거를 남겨둔다.\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Audit-Columns\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1707475139/B#Audit-Columns]\n\nsample 에서 updatedBy, updatedAt 에 해당",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2905145351"
  },
  {
    "pageContent": "DB schema 무중단 업데이트\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]검색용 키워드\n\n * 다운타임\n\n * 무중단\n\n * DB 스키마 마이그레이션\n\n * DB schema migration\n\n * 스키마 업데이트\n\n * 스키마 변경\n\n * 스키마 수정\n\n * online DLL\n\n * percona-toolkit\n\n * pt-online-schema-change\n\n * gh-ost\n\n\n개요\n\nDB 스키마를 운영 환경에서 실제로 변경하고자 할 땐 어떻게 해야 할까요? 서비스를 잠시 중단하고 할 수 있다면 별 문제가 없지만 우리는\n다운타임 없이 스키마를 변경해야 합니다. 왜냐면\n\n * 수천~수만대의 활성화된 기기가 통신하고 있습니다. 현재 우리 서버는 DB가 사용 불가하면 기기에 적절한 응답을 할 수 없는 구조이고 기기는\n   통신을 계속 재시도하면서 배터리를 크게 소모합니다.\n\n * 현재 정립된 ‘서버 점검’ 절차가 없습니다. (고객에게 미리 통보, 점검을 알리는 페이지 등)\n\n다운타임 없이 DB 스키마를 변경하는 방법을 알아봅시다.\n\n\nSTEP-BY-STEP 가이드\n\n\n내가 실행하고자 하는 DDL [https://cbw1030.tistory.com/71]이 ONLINE DDL인가?\n\n참고 1: MySQL 5.6\n[https://dev.mysql.com/doc/refman/5.6/en/innodb-online-ddl-operations.html] 참고\n2: MySQL 5.7\n[https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html]\n\nMySQL 5.6부터는 online DDL을 지원합니다. 테이블 스키마를 수정하는 동안 DML(insert, update, delete)가\n가능한 것입니다. 하지만 모든 DDL이 지원되는 것은 아닙니다. operation 마다 조금씩 다릅니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/745505248/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-07-24%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.34.05.png?api=v2]\n\n위 이미지는 Column Operation들의 online DDL 지원 여부를 나타내는 표입니다(위 ‘참고’ 링크에서 볼 수 있음). 컬럼\n데이터 타입을 변경하는 경우 5.6 이전과 동일하게 동작합니다. 그냥 alter table … 쿼리를 날리면 테이블 수정이 완료되기까지 억겁의\n시간동안 기다려야 하고 그동안 그 테이블은 insert, update, delete가 안 됩니다. 미친듯이 쏟아지는 에러 메시지를 받게 될\n것입니다..\n\n\nSTAGE 환경에서 시험해보기\n\nonline DDL이 지원되는 DDL이라고 해서 운영에 전혀 영향을 안 미치지는 않습니다. 수 초 ~ 수십 초 가량의 높은 부하와 그에 따른\n장애가 있을 수 있습니다. production 환경에서 저지르기 전에 stage 환경에서 먼저 해봅시다.\n\n\n너무 느리면\n\n다운타임이 예상된다면 고전적인 방법을 사용하는 수밖에 없습니다.\n\n 1. dump & change schema: 새 스키마로 빈 테이블을 생성하고 데이터를 새 테이블에 옮긴다. 또는 테이블을 복제한 후 스키마를\n    바꾼다.\n\n 2. sync: 구 테이블의 데이터의 변경사항을 실시간으로 새 테이블에도 반영한다.\n\n 3. replace: 두 테이블의 데이터가 완전히 동기화되면 새 테이블로 구 테이블을 교체한다.\n\n하지만 이걸 직접 하거나 스크립트를 짜는 과정은 매우 번거롭고 예상하기 어려운 문제도 많습니다.\n\n다행히도, 이런 절차를 자동화해주는 소프트웨어가 여럿 있습니다.\n\npercona의 percona-toolkit에 포함된 pt-online-schema-change가 유명하지만 비교적 나중에 등장한 GitHub의\ngh-ost [https://github.com/github/gh-ost]가 여러 설계상 이점이 있어서 더 좋아 보입니다. Trigger 대신\nbinlog를 사용한다는 점에서 좀 더 안정적일 거라고 기대가 됩니다. (gh-ost에 대한 포스트\n[https://m.blog.naver.com/sory1008/221131621433])\n\n\nGH-OST 가이드\n\nTODO\n\nAWS RDS에서는 확인할 게 많다. → 참고\n[https://github.com/github/gh-ost/blob/master/doc/rds.md]\n\n\nPT-ONLINE-SCHEMA-CHANGE\n\n→ [DB] pt-online-schema-change 가이드\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/964198492]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/745505248"
  },
  {
    "pageContent": "[DB] Index convention\n\n\nNAMING\n\n인덱스 이름은 아래의 양식을 따른다.\n\n\nINDEX KEY\n\n * 단일 인덱스 (Single index): IX_{Source Table}_{Source Column}\n\n * 복합 인덱스 (Composite index): IX_{Soruce Table}_{Source Column1}_{Source\n   Column2}_...\n\n\nFOREIGN KEY\n\n * FK_{Referencing table}_{Referenced table}\n\n\nINDEX COLUMN ORDER\n\n인덱스 순서는 성능에 영향을 미치기 때문에 아무렇게나 지정하면 안된다.\n\nCardinality가 높은 순으로 컬럼을 둬야 비교적 안정적인 퍼포먼스를 보여준다.\n그렇지 않은 경우 엄청난 성능 저하가 발생할 수 있다.\n\n참고: https://github.com/Ecube-Labs/db-schema/pull/98#discussion_r703267040\n[https://github.com/Ecube-Labs/db-schema/pull/98#discussion_r703267040]\n\n만약 기존 테이블에 인덱스를 추가하려고 한다면 How to start pt-online-schema-change\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2151448592/How+to+start+pt-online-schema-change]\n를 사용해야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/866123786"
  },
  {
    "pageContent": "[DB] Column convention\n\n\nPK의 이름은 ID 로 한다.\n\n반복되는 단어는 넣지 않는다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nDo\n\nCREATE TABLE `voltage` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT,\n  ...\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nDon’t\n\nCREATE TABLE `voltage` (\n  `voltageId` bigint unsigned NOT NULL AUTO_INCREMENT,\n  ...\n\n\nTRANSACTION ID를 넣는 컬럼의 길이는 36이 아닌 72로 한다.\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nDo\n\n`created_by` varchar(72) NOT NULL\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nDon’t\n\n`created_by` varchar(36) NOT NULL\n\n참고: https://github.com/Ecube-Labs/db-schema/pull/50#discussion_r489196699\n[https://github.com/Ecube-Labs/db-schema/pull/50#discussion_r489196699]\n\n\nDATE만 저장하는 컬럼의 타입은 DATE가 아닌 DATETIME으로 통일한다.\n\n값은 사용자의 타임존을 반영한 UTC를 기준으로 저장한다.\nex) 2021-01-01 12:30:00(KST) → 2021-01-01 03:30:00(UTC)\n\n(tick)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/check.png]\nDo\n\n`joinedAt` DATETIME NOT NUL\n\n(오류)\n[https://ecubelabs.atlassian.net/wiki/s/1017909629/6452/ac3d450b7f78ea676c818c066c14356c75fb191d/_/images/icons/emoticons/error.png]\nDon’t\n\n`joinedAt` DATE NOT NULL\n`joinedAt` TIMESTAMP NOT NULL\n\n참고: https://github.com/Ecube-Labs/db-schema/pull/82#discussion_r629011525\n[https://github.com/Ecube-Labs/db-schema/pull/82#discussion_r629011525]\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/880279900"
  },
  {
    "pageContent": "Transaction\n\nhttps://nesoy.github.io/articles/2018-06/DDD-Transcation\n[https://nesoy.github.io/articles/2018-06/DDD-Transcation]\n\n\n\nSQL 트랜잭션 - 믿는 도끼에 발등 찍힌다\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/175964416]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/236879899"
  },
  {
    "pageContent": "MySQL\n\n\nMYSQL CLIENT MODULES\n\nNode.js에서 MySQL client로 사용되는 모듈은 몇 가지가 있습니다. TypeORM 등 ORM을 사용하는 경우 직접적으로 사용할 일은\n없지만 드라이버로 사용되는 모듈이 동작하는 방식이나 자세한 옵션을 알아둘 필요가 있습니다.\n\n\nMYSQL [https://github.com/mysqljs/mysql] (NODE-MYSQL)\n\n가장 널리 쓰입니다. TypeORM 등 다른 라이브러리들도 이 모듈을 MySQL 드라이버로 사용합니다.\n직접 사용할 경우 문서를 꼼꼼히 모두 읽어보는 것을 권장합니다. DB 관련 지식을 요합니다. 그렇지 않으면 문제 발생 시 디버깅하기 어렵습니다.\n\n\nMYSQL2 [https://github.com/sidorares/node-mysql2] (NODE-MYSQL2)\n\nnode-mysql과 호환을 추구하는 더 빠른 모듈입니다. 사용자 수는 node-mysql에 비하면 적은 편이며, 실제로 좋은 성능을 보여주나\n항상 100% 호환되지는 않습니다. 그래서 문제 발생 시 디버깅하기 어렵습니다.\n\n\n@CCN/MYSQL [https://github.com/Ecube-Labs/modules-mysql] (MODULES-MYSQL) →\nDEPRECATED\n\nmysql, mysql2에 기반한 내부 라이브러리입니다. 몇몇 편의 기능을 제공하지만 2020년 3월 30일 기준으로 대부분 필요 없게\n되었습니다. node-mysql에서 논의가 진행중이지만 아직 지원되지 않는 initialConnections,\nidleConnectionTimeout과 같은 옵션이 구현되어 있습니다.\n\n\nTIPS\n\n\nPOOL DOES NOT EXIST\n\nPool Cluster는 커넥션에서 fatal 에러(주로 mysql 서버와의 연결과 관련된 문제) 발생 시 연결을 재시도합니다. 재시도에\n실패하면 해당 커넥션을 포함하는 노드(커넥션 풀)을 삭제합니다. 그래서 그 이후의 쿼리는 Pool Does Not Exist에러를 발생시킵니다.\n\n관련 옵션: [https://github.com/mysqljs/mysql#poolcluster-options]\nremoveNodeCount: 지정한 횟수 이상 에러 발생 시 노드 삭제 (에러 없이 쿼리될 때는 카운트 1씩 감소)\nrestoreNodeTimeout: 노드 삭제 후 지정한 ms동안 노드를 offline으로 취급하고 이후에 다시 연결 시도. (offline\n상태에서 쿼리 시 에러 발생합니다.)\n\n해결책:\n\n * fatal 에러가 드물게 발생하는 경우 removeNodeCount를 충분히 높게 설정해서 계속 재시도하도록 해도 괜찮습니다.\n\n * restoreNodeTimeout 설정을 제대로 사용하려면 offline 상태에서의 쿼리 대기 처리를 직접 구현해야 합니다.\n\n * 고전적인 방법으로 껐다 켜기가 있습니다. 다수의 서버가 로드밸런서를 통해 서비스되고 있어서 괜찮다면 서버가 커넥션 에러를 listen해서\n   곧바로 종료시키는 것도 방법입니다. → 적용 사례\n   [https://github.com/Ecube-Labs/iot-server/blob/master/src/infrastructure/setup-infrastructure.ts#L25-L29]\n\n * 가장 근본적인 해결책은 커넥션이 불안정한 원인을 찾는 것입니다. (DB 클러스터가 Scale Down되면서 연결중이던 DB 인스턴스가\n   사라지는 것도 원인일 수 있으나 확실하지는 않습니다)\n\n\nTIMEZONE\n\n\n커넥션 관련 TIMEOUT 옵션들\n\n\nSTREAMING\n\n\nTYPECAST\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/461799743"
  },
  {
    "pageContent": "TypeORM\n * Decorators\n   * @UpdateDateColumn()\n   * @Index()\n * TypeORM과 Transaction per request와 Continuation Local Storage(CLS)\n * Date type(datetime) 사용시 소수점 반올림 현상\n\n\n\n\n\nDECORATORS\n\n\n@UPDATEDATECOLUMN()\n\n이 decorator 를 사용하면 save() 호출 시 해당 property 는 자동으로 업데이트 된다.\n\nclass User {\n  @Column()\n  name: string;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\nconst user = new User();\nuser.name = 'Ecube';\n\nentityManager.save(user);\n// update user set name = ?, updatedAt = current_timestamp ... 라는 쿼리를 생성한다.\n// user 테이블의 updatedAt 컬럼이 on update ... 로 생성 되는게 아니다.\n\n\n\n\n주의 사항\n\nEntity 내에서 이 decorator 를 두 번 사용하면 하나의 property 만 업데이트 된다. (2019.09.04 기준)\n\nclass User {\n  @Column()\n  name: string;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @UpdateDateColumn()\n  modifiedAt: Date;\n}\n// update user set name = ?, updatedAt = current_timestamp, modifiedAt = current_timestamp ... 라는 쿼리가 생성되어야 할 것 같지만\n// update user set name = ?, updatedAt = current_timestamp ... 라는 쿼리가 생성 된다.\n\nTypeORM 코드 UpdateQueryBuilder.prototype.createUpdateExpression 함수 참고\n\n\n\n\n@INDEX()\n\n기존 테이블에 인덱스를 추가하는 경우, TypeORM decorator 보다는 pt-online-schema-change\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2151448592/How+to+start+pt-online-schema-change]\n를 사용해 무중단 업데이트 하는 것을 권장한다.\n\n하지만 생성한 인덱스에 대해 { synchronize: false } 설정을 해주지 않으면 매번 빌드할 때 마다 생성한 인덱스가 drop 되므로\n주의해야 한다.\n\n@Entity()\n@Index('pt-online-schema-change로 생성한 indexName', { synchronize: false })\nexport class modelName {\n... \n}\n\nref. https://typeorm.io/#/indices/disabling-synchronization\n[https://typeorm.io/#/indices/disabling-synchronization]\n\n\nTYPEORM과 TRANSACTION PER REQUEST와 CONTINUATION LOCAL STORAGE(CLS)\n\n비즈니스 로직을 담은 코드를 복잡하게 만들지 않으면서 transaction per request를 구현하기 위해, TypeORM을 사용하지 않는\n이큐브랩의 다른 서비스들은 mysql.js 등 DB 드라이버를 추상화하지 않고 직접 사용하거나 커넥션 바인딩을 쉽게 만든 자체 라이브러리를\n사용하곤 했습니다.\n\n하지만 TypeORM의 transaction\n[https://github.com/typeorm/typeorm/blob/master/docs/transactions.md]은 단순히 트랜잭션\n안에서 실행할 코드를 콜백에 넣는 정도밖에 지원해주지 않습니다. transaction per request를 TypeORM으로 어떻게 구현할 수\n있을까요?\nTypeORM을 사용하지 않는 ccn-api처럼 request가 올 때마다 미들웨어에서 transaction을 만들어서 scoped\ncontainer에 넣어주고 서비스나 Repository에 DI 할 수도 있지만, TypeORM을 사용하면서 그렇게 하면 TypeORM\nRepository 클래스를 그대로 사용할 수 없고 모두 Custom Repository로 구현하고 그 안에서 scoped container\n안의 트랜잭션을 사용하도록 일일히 지정해야 합니다. 사실 그렇게 어려운 것도 아니지만 더 좋은 방법이 있습니다.\n\nodavid/typeorm-transactional-cls-hooked\n[https://github.com/odavid/typeorm-transactional-cls-hooked] \n\n이 패키지는 continuation local storage를 이용해 transaction connection을 전달하고 TypeORM\nRepository가 그것을 사용할 수 있게 합니다. 트랜잭션을 사용할 메소드에 @Transactional() 데코레이터를 달아서 그\n메소드로부터 연쇄적으로 호출되는 모든 함수/메소드를 트랜잭션의 내부에 넣을 수 있습니다. propagation, isolation level과\n같은 transaction 전략도 지정할 수 있습니다.\n\nKoa의 ctx(Context), Express의 req/res, ctx.locals, req.locals, scoped container같은\n것을 local storage 라고 부릅니다. Web API의 localStorage와는 다릅니다.\n\ncls-hooked [https://www.npmjs.com/package/cls-hooked] 패키지의 설명에 더 잘 나와있지만\ncontinuation local storage는 일련의 함수 호출 체인이 하나의 스코프를 공유하고 그 안에서는 인자를 넘기거나 하지 않아도\n변수를 공유할 수 있는 local storage입니다. typeorm-transactional-cls-hooked는 이것을 이용해서 트랜잭션을\n공유하고 TypeORM이 그 트랜잭션을 사용하도록 합니다.\n\n@Transactional()\nasync addCommandSet(deviceId: number, commandSet: DeviceCommandSet) {\n    // start transaction\n    const shadow = await this.getShadow(deviceId);\n    shadow.addCommand(commandSet);\n    await this.deviceRepository.saveShadow(shadow)\n    return shadow.commandSet;\n    // end transaction\n}\n\n\n\n\n\nDATE TYPE(DATETIME) 사용시 소수점 반올림 현상\n\n  @Column()\n  updatedAt!: DateTime;\n\n  @Column()\n  lastModifiedAt!: Date;\n\n    const nowTime = new Date();\n    this.lastModifiedAt = nowTime;\n    const updatedAt = nowTime.toISOString();\n    this.updatedAt = updatedAt;\n\nDate type인 lastModifiedAt에 new Date(), DateTime(string) type인 updatedAt에 new\nDate().toISOstring()을 넣을 경우\nupdatedAt에는 그대로 날짜가 들어가고 lastModifiedAt 에는 소수점이 반올림 되어 들어가게 된다.\n\nex)\n\nlastModifiedAt : 2024-07-01 09:45:46\nupdatedAt : ‘2024-07-01T09:45:45.714Z’\n\n범위 검색시 문제가 생길수 있어 소수점을 모두 제거하여 사용\n\nex)\n\nconst nowTime = new Date(Math.trunc(new Date().getTime() / 1000) * 1000);\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204996771"
  },
  {
    "pageContent": "[DB] Data archiving (pt-archiver)\n\npt-archiver는 너무 느려서 권장하지 않습니다\n\n제가 잘못썼거나, 우리 DB Scheme이 pt-archiver와 맞지 않을수도 있습니다.\n\n\n개요\n\n특정 대용량 테이블에 있는 데이터를 아카이빙하려고 한다.\n도구는 이것저것 있고 코드를 직접 짜서 마이그레이션하거나, 손수 데이터 덤프떠서 아카이빙하고 기존 테이블에 있는 데이터를 직접 제거해야한다.\n이렇게 마이그레이션 하는 도구는 다양하게 존재하는데, Percona toolkit중 하나인 pt-archiver\n[https://www.percona.com/doc/percona-toolkit/LATEST/pt-archiver.html]로 진행해볼\n예정이다.\n\n\n아카이빙 절차\n\n 1. 아카이빙 할 데이터의 분류를 정한다. (where 문으로)\n\n 2. 원본 데이터베이스와 옮길 대상 데이터베이스 정보를 파악해둔다.\n\n 3. pt-archiver를 이용해 하위 테이블부터 상위 테이블 순서대로 아카이빙한다.\n\n\nPT-ARCHIVER DRY-RUN\n\n아래는 dry-run으로 돌려본 예시다.\n(ccnetworks_archive 데이터베이스와 각 테이블은 이미 생성되어 있는것으로 가정하고 진행.)\n\n$ pt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=myusername,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccb,A=utf8mb4 \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--dry-run\n\n# printed\nSELECT /*!40001 SQL_NO_CACHE */ `raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date` FROM `ccnetworks`.`client_log_raw_parsing_ccb` FORCE INDEX(`PRIMARY`) WHERE (raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)) ORDER BY `raw_idx` LIMIT 1\nSELECT /*!40001 SQL_NO_CACHE */ `raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date` FROM `ccnetworks`.`client_log_raw_parsing_ccb` FORCE INDEX(`PRIMARY`) WHERE (raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)) AND ((`raw_idx` >= ?)) ORDER BY `raw_idx` LIMIT 1\nDELETE FROM `ccnetworks`.`client_log_raw_parsing_ccb` WHERE (`raw_idx` = ?)\nINSERT INTO `ccnetworks_archive`.`client_log_raw_parsing_ccb`(`raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\n\n\n출력된 쿼리를 보면 select ~~ limit 1; 로 된것을 볼 수 있다.\nhtypt-archiver는 select로 가져온 데이터를 가지고 위 쿼리를 반복하며 아카이빙을 수행하는것으로 보인다.\n문서\n[https://www.percona.com/doc/percona-toolkit/LATEST/pt-archiver.html#cmdoption-pt-archiver-dry-run]에서도\n비슷하게 언급하는듯 하다.\n\n이 값은 --limit 플래그로 조절할 수 있는데, --for-update 같은 플래그를 붙이거나 스토리지 엔진에 따라 문제가 발생할 가능성이\n있으니 1을 권장한다고 한다. 기본 값도 1이다.\n\n\n실습\n\n1개씩 실제로 돌려보니 너무너무 오래걸렸다.\n\n그래서 결심했다. 안전하지는 않지만 limit을 1000으로 올리기로.\n--commit-each 플래그를 같이 걸어주면 트랜잭션 크기를 제어해준다고 하는데, 그냥 조금 더 안정적으로 아카이빙 할 수 있게 도와준다고\n생각했다.\n\n\n실습 2\n\n퇴근 전에 limit 1000으로 돌려놓고 갔다. 아래는 10000개를 넣을때마다 출력하도록 설정한 결과다.\n\nTIME                ELAPSED   COUNT\n2020-11-25T16:52:05       0       0\n2020-11-25T17:51:50    3585   10000\n2020-11-25T18:46:56    6890   20000\n2020-11-25T19:42:14   10209   30000\n2020-11-25T20:37:36   13530   40000\n2020-11-25T21:32:13   16808   50000\n2020-11-25T22:26:16   20050   60000\n2020-11-25T23:20:07   23281   70000\n2020-11-26T00:13:58   26512   80000\n2020-11-26T01:09:02   29816   90000\n2020-11-26T02:02:46   33040  100000\n2020-11-26T02:58:02   36356  110000\nDBD::mysql::st execute failed: Lost connection to MySQL server during query [for Statement \"INSERT INTO `ccnetworks_archive`.`client_log_raw_parsing_ccb`(`raw_idx`,`client_idx`,`protocol_type`,`usim_id`,`latitude`,`longitude`,`client_type`,`version`,`communication_type`,`voltage`,`reporting_type`,`error_status`,`current_status`,`wastebasket_type`,`ampere`,`temperature`,`rising_rotation`,`falling_rotation`,`internal_temperature`,`compaction_period`,`firmware_type`,`slave_version`,`sensitivity`,`company`,`at_command_error`,`reporting_period`,`photo_sensor_period`,`yellow_threshold`,`red_threshold`,`ampere_threshold`,`date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\" with ParamValues: 0=9710071, 1=1728, 2='3', 3='8982068597006415074F', 4=undef, 5=undef, 6='00012', 7='1.108', 8='0', 9='12.9', 10='1', 11='0000000000000000', 12='0000000000000000', 13='0', 14=148, 15=3, 16=321, 17=324, 18=7, 19=0, 20=0, 21=2500, 22='3199', 23='000000', 24=0, 25='1', 26='9', 27=255, 28=171, 29=255, 30='2018-01-16 11:17:48'] at /usr/local/Cellar/percona-toolkit/3.2.1/libexec/bin/pt-archiver line 6771.\n\n\n우리 회사는 매일 새벽에 공유기 재부팅이 예약되어 있다고 한다.\n그 결과 위처럼 중간에 실패한것으로 보인다.\n\n게다가 이 속도로 2000만개 이상의 데이터를 옮기는건 너무너무 오래걸릴듯 하다.\n다른 방법을 찾아야겠다.\n\n\n실습 3\n\npt-archiver에는 bulk-insert라는 옵션이 있었다.\n사실 존재는 이미 알고 있었는데 이렇게 느릴 줄 몰라서 딱히 필요할 줄 몰랐다.\n\nbulk-insert 플래그를 사용하려고 하니 LOAD DATA LOCAL INFILE라는 에러가 발생했는데, 공식 문서에도 써있었다.\n이런 문제가 발생하는 환경이 있다곤 하는데, 자세히 알아보지 않았다.\n\n어쨌든 내 상황에서 bulk-insert를 사용하려면 DSN에 L=yes를 추가해주면 된다고 해서 그렇게 해봤다.\n효과는 엄청났다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw_parsing_ccbu\n\nTIME                ELAPSED   COUNT\n2020-11-26T10:35:12       0       0\n2020-11-26T10:35:16       3    1000\n2020-11-26T10:35:22       9    2000\n2020-11-26T10:35:27      14    3000\n2020-11-26T10:35:31      19    4000\n2020-11-26T10:35:36      23    5000\n2020-11-26T10:35:41      28    6000\n2020-11-26T10:35:45      32    7000\n2020-11-26T10:35:49      36    8000\n2020-11-26T10:35:53      41    9000\n2020-11-26T10:35:57      45   10000\n2020-11-26T10:36:01      48   11000\n...\n2020-11-26T10:39:32     260   67000\n2020-11-26T10:39:36     264   68000\n2020-11-26T10:39:40     268   69000\n2020-11-26T10:39:44     272   70000\n2020-11-26T10:39:48     276   71000\n2020-11-26T10:39:52     280   72000\n2020-11-26T10:39:56     284   73000\n2020-11-26T10:39:59     287   73673\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw_parsing_ccb\n\nTIME                ELAPSED   COUNT\n2020-11-26T10:45:49       0       0\n2020-11-26T10:50:50     301    1000\n2020-11-26T10:51:00     311    2000\n2020-11-26T10:51:05     316    3000\n2020-11-26T10:51:10     321    4000\n2020-11-26T10:51:15     326    5000\n2020-11-26T10:51:19     330    6000\n2020-11-26T10:51:23     334    7000\n2020-11-26T10:51:28     339    8000\n2020-11-26T10:51:32     343    9000\n2020-11-26T10:51:36     347   10000\n2020-11-26T10:51:40     351   11000\n2020-11-26T10:51:44     355   12000\n2020-11-26T10:51:48     359   13000\n2020-11-26T10:51:52     363   14000\n...\n# 자잘한 트러블이 있어 여러번 끊겼지만 결국 성공...\n2020-11-27T17:39:50   13115 3247000\n2020-11-27T17:39:53   13118 3248000\n2020-11-27T17:39:57   13121 3249000\n2020-11-27T17:40:00   13124 3250000\n2020-11-27T17:40:03   13127 3251000\n2020-11-27T17:40:06   13131 3252000\n2020-11-27T17:40:09   13134 3253000\n2020-11-27T17:40:12   13137 3254000\n2020-11-27T17:40:15   13140 3255000\n2020-11-27T17:40:18   13143 3256000\n2020-11-27T17:40:22   13146 3257000\n2020-11-27T17:40:25   13149 3258000\n2020-11-27T17:40:28   13153 3259000\n2020-11-27T17:40:31   13156 3260000\n2020-11-27T17:40:34   13159 3261000\n2020-11-27T17:40:37   13162 3262000\n2020-11-27T17:42:46   13290 3262608\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw_parsing_ccp\n\nTIME                ELAPSED   COUNT\n2020-11-30T10:09:55       0       0\n2020-11-30T10:18:16     500    1000\n2020-11-30T10:18:24     508    2000\n2020-11-30T10:18:31     515    3000\n2020-11-30T10:18:38     522    4000\n2020-11-30T10:18:43     527    5000\n2020-11-30T10:18:46     531    6000\n2020-11-30T10:18:50     534    7000\n2020-11-30T10:18:54     538    8000\n2020-11-30T10:18:57     542    9000\n2020-11-30T10:19:01     545   10000\n2020-11-30T10:19:05     549   11000\n...\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log_raw\n\n너무 느려서 pt-archiver로 안함 -_-\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]client_log\n\n너무 느려서 pt-archiver로 안함 -_-\n\nclient_log_raw_parsing_ccbu 결과를 보면 테이블 하나에 있는 데이터를 약 3~7초마다 1000개씩 옮긴 것이다.\n10분도 안되는 시간동안 73673개의 데이터를 아카이빙했다. 몰라서 삽질한것만 빼면 아주 쉽게 누구나 할수 있는것이다.\n\n단 주의할 점이 있다.\n데이터가 많을수록 처음에 대기하는 시간이 길어진다.\nclient_log_raw_parsing_ccb 결과를 보면 처음 시작과 다음 텀이 약 5분의 간격이 있는 것을 볼 수 있다.\n그 뒤로는 최대 10초 이상 걸리지 않은 채 데이터를 정상적으로 삽입하는것을 볼 수 있다.\n\n\n최종\n\n아래 스크립트는 내가 최종적으로 사용한 명령어다.\n\n## client_log_raw_parsing_ccb\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccb,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log_raw_parsing_ccbu\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccbu,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log_raw_parsing_ccp\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw_parsing_ccp,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log_raw\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log_raw,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n## client_log\npt-archiver \\\\\n--source h=ccn-stage-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com,u=tim,p=secret,D=ccnetworks,t=client_log,A=utf8mb4,L=yes \\\\\n--dest D=ccnetworks_archive \\\\\n--where 'idx > 75317601 and idx <= 91300226' \\\\\n--progress 5000 \\\\\n--limit 1000 \\\\\n--bulk-insert \\\\\n--commit-each \\\\\n--dry-run\n\n\n\nTROUBLESHOOTING\n\n\nERROR: WIDE CHARACTER IN PRINT ~~~\n\n처리할 수 없는 문자열이 아카이빙 할 데이터에 포함된 경우다.\n난 내 환경에서 utf8 문자열을 정상적으로 처리할 수 없는것으로 생각하고 perl(pt-archiver가 perl script로 짜인\n프로그램이다)을 utf8 문자열을 사용해도 문제가 없게 모듈이나 여러 플래그를 붙여서 실행해봤다.\n\n결과는 똑같았다.\n때문에 어떤 문자가 utf8에 포함이 안되는건가 싶어 찾아봤다.\n\n� 이러한 replacement character가 존재했다.\n모든 컬럼에 테이블을 풀스캔 해서 다 찾아야 한다.\n\nupdate문으로 대체문자를 전부 바꿔주면 된다.\n어차피 문제가 있는 데이터로 판단하고 대충 0으로 다 바꿔주면 일단 아카이빙은 가능하다.\n\n아래는 내가 대체문자를 제거할 때 사용한 쿼리다.\n엄청 느리지만 일단 문제 없이 돌아가긴 한다.\n\n# client_log_raw_parsing_ccb\nUPDATE client_log_raw_parsing_ccb\nSET reporting_period = REPLACE(reporting_period, '�', '0'), photo_sensor_period = REPLACE(photo_sensor_period, '�', '0')\nwhere raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)\nand '�' in (reporting_period, photo_sensor_period)\n;\n\n# client_log_raw_parsing_ccp\nUPDATE client_log_raw_parsing_ccp\nSET ultra_sonic_wave = REPLACE(ultra_sonic_wave, '�', '9'), company = REPLACE(company, '�', '0'), accelerometer = REPLACE(accelerometer, '�', '0')\nwhere raw_idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)\nand (ultra_sonic_wave like \"%�%\" or company like \"%�%\" or accelerometer like \"%�%\")\n;\n\n# client_log_raw\nUPDATE client_log_raw\nSET receive_raw = REPLACE(receive_raw, '�', '0'), send_raw = REPLACE(send_raw, '�', '0')\nwhere idx in (select raw_idx from client_log where idx > 75317601 and idx <= 91300226)\nand (receive_raw like \"%�%\" or send_raw like \"%�%\")\n;\n\n\n\n\n\n\n\n결론\n\n편하게 옮길수 있긴 한데 데이터가 많으면 엄청 오래걸린다…\n\n내가 잘못쓴건가 싶지만 일단 이대로는 못쓰겠다…\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1069842437"
  },
  {
    "pageContent": "DB 에 저장 된 값 변경 요청이 들어왔을 때 check list\n * 도메인 모델에 주의사항 없는지 확인\n   ex)\n   https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B+Account#ContractOn-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B3%B3\n   [https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/171376776/H+B+Account#ContractOn-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B3%B3]\n * TODO",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3048734845"
  },
  {
    "pageContent": "How to start pt-online-schema-change\n\n\n1. 왜 필요한가\n\nDB schema 무중단 업데이트\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/745505248]\n위 문서를 통해 무중단 업데이트를 어떻게 해야 하는지, 이 도구가 왜 필요한지 이해한다.\n\n스키마 변경시 Online DDL에 해당하지 않는 경우 테이블에 락이 걸려 해당 테이블을 사용하는 기능이 정상적으로 동작하지 않으므로\npt-online-schema-change를 사용한다.\n\n\n2. 개념\n\n[DB] 자식 테이블에 CUD 있는 테이블 무중단 업데이트\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/883327112]\n위 문서를 통해 pt-online-schema-change가 어떻게 가능한지에 대한 동작 원리를 이해한다.\n\n\n3. 사용\n\n[DB] pt-online-schema-change 가이드\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/964198492]\n위 문서를 따라 설치하고 사용한다.\n\n--execute 플래그 없이 테스트 후, 마이그레이션에 문제가 없다고 판단될 때 Stage DB에 우선적으로 --execute 플래그를 사용해\n마이그레이션 하는것을 원칙으로 해야한다.\n\n예시) 테이블에 인덱스 추가하는 경우\n\npt-online-schema-change \\\n--alter \"ADD INDEX IX_client_log_date_client_idx (date, client_idx)\" \\\n--preserve-triggers \\\n--charset=utf8 \\\n--progress=time,30 \\\n--chunk-index=PRIMARY \\\n--chunk-time=0.3 \\\n--chunk-size=5000 \\\n--password=비밀 \\\n--alter-foreign-keys-method=auto \\\n--no-drop-old-table \\\n--set-vars innodb_strict_mode=0 \\\n--execute \\\nD=데이터베이스이름,t=테이블이름,h=스테이지디비호스트,u=사용자\n\n\nTIPS.\n\n * 해당 데이터베이스의 root 권한을 가진 계정 정보를 넣지 않으면 스크립트 실행에 실패할 수 있다.\n\n * 마이그레이션 도중 기존 테이블에서 발생하는 CUD에 대한건 pt-online-schema-change가 알아서 관리하므로 걱정하지 않아도\n   된다.\n   \n   * 기존 테이블에 트리거를 걸어 마이그레이션을 하고 있는 데이터베이스에도 문제 없이 반영될 수 있게 해준다.\n\n * 마이그레이션 도중에는 테이블이름_new 가 생성되어 있으며, 만약 --no-drop-old-table플래그를 사용했다면 마이그레이션을 했던\n   원본 테이블이 테이블이름_old 라는 이름으로 보존된다.\n\n * 마이그레이션이 도중에 실패하는 경우 _new postfix가 붙은 테이블이 그대로 보존되며, 원본 테이블에 걸린 trigger를 제거해야\n   다시 마이그레이션을 시작할 수 있다.\n\n * pt-online-schema-change 는 bastion 을 통한 접근을 지원하지 않아서 스테이지 db를 변경해야 된다면 직접 ssh\n   터널 구성하고 실행해야 한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2151448592"
  },
  {
    "pageContent": "[DB] 자식 테이블에 CUD 있는 테이블 무중단 업데이트\n\nMySQL에서 Alter문은 기본적으로 테이블락을 건다.\n\n그리고 락이 걸린 테이블이 자식 테이블이 많고 트랜잭션이 많은 경우 오랜 시간(어쩌면 데드락) 잠금이 풀리지 않아 문제가 발생한다.\n(실제로 이 문제가 발생했을때는 모든 제품이 통신하지 못하는 상황이 발생했기 때문에 분석할 시간이 없었기 때문에 추측만으로 리서치를 해야했다)\n\n가장 비슷한 상황으로 추측하건데, https://blog.naver.com/parkjy76/220639066476\n[https://blog.naver.com/parkjy76/220639066476] 에서 서술한대로 부모-자식 간 테이블의 공유 잠금때문으로\n보인다.\n\n자식 테이블이 아무리 많아도 자식 테이블에 CUD가 없으면 MySQL에 내장된 alter 구문만으로도 문제 없이 수정되는것을 확인했다.\n\n\nSOLUTION 1:\n\n외래키를 검사하지 않도록 설정해둔 뒤, table alter를 한다.\n\nSET FOREIGN_KEY_CHECKS = 0;\n\n위와 같은 구문을 실행하면 외래키를 검사하지 않아서 부모-자식간에 테이블 잠금이 걸리지 않는다.\n\n물론 이 설정을 계속 꺼두면 외래키를 건 의미가 없기 때문에 아래 쿼리로 다시 켜야한다.\n(계속 꺼둘거면 차라리 외래키를 걸지 말고 써라)\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n\nSOLUTION 2:\n\nMySQL을 조금 써봤다면 익숙할법 한 pt-online-schema-change 라는 도구를 사용하면 된다.\n\n외래키가 걸린 테이블이기 때문에 --alter-foreign-keys-method 옵션을 써야하는데, “auto”를 값으로 주면 적당히 알아서\n잘 해준다.\n\npt-online-schema-change \\\n--alter \"add column tested_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\" \\\n--preserve-triggers \\\n--charset=UTF8MB4 \\   # 지정 안하면 한글이 들어간 테이블에 있던 정보가 깨질수도 있다고 한다.\n--progress=time,30 \\  # 이 옵션을 걸면 30초가 지날때 마다 남은 시간을 보여준다.\n--chunk-size=500 \\    # 마이그레이션 할 때 한번에 마이그레이션 할 chunk의 사이즈를 지정한다.\n--password=secret \\\n--alter-foreign-keys-method=auto \\ # 외래키 있으면 걸어야한다.\n--dry-run \\\nD=DBNAME,t=TABLENAME,h=DBHOST,u=USERNAME\n\n단, 이 도구는 새로 만든 테이블에 마이그레이션을 끝내고 old ↔︎ new 테이블을 스왑하는 도구이기 때문에,\n스왑하는 아주 짧은 시간 동안 select를 하면 에러가 날 수 있다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/883327112"
  },
  {
    "pageContent": "[DB] pt-online-schema-change 가이드\n\n\n개요\n\npt-online-schema-change는 DB 스키마 마이그레이션을 위한 커맨드라인 도구입니다. Percona Toolkit\n[https://www.percona.com/doc/percona-toolkit/3.0/index.html]에 포함되어 있습니다.\n\n * 디비 파라메터 log_bin_trust_function_creators = 1 로 설정 필요\n   \n   * 이전에 설정한적이 있더라도 테라폼에 의해 이 파라메터 설정은 사라질 수 있으므로 작업 전에 항상 확인해야 한다.\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/964198492/image-20231016-014249.png?api=v2]\n\n\n설치\n\n$ brew install percona-toolkit\n\nbrew를 통한 설치가 실패하면 로컬에 설치된 MySQL 버전을 5.6으로 낮춰보세요. 참고\n[https://github.com/Homebrew/legacy-homebrew/issues/46051]\n\nhttps://gist.github.com/takatoshiono/ea84371dfa2ae4529c5f5ba6427b711d\n[https://gist.github.com/takatoshiono/ea84371dfa2ae4529c5f5ba6427b711d] 와 비슷하게\n나오면 설치에 성공한 것입니다.\n\n\n예시\n\n$ pt-online-schema-change --ask-pass \\\n --charset=utf8 \\\n --alter-foreign-keys-method=auto \\\n --recursion-method=none \\\n --execute \\\n --alter=\"add column `product_code` varchar(128) DEFAULT NULL COMMENT '품번'\" \\\n --user=json \\\n --host=ccn-cluster.cluster-cstvquklpixk.us-west-2.rds.amazonaws.com \\\n --chunk-time=0.3 \\ \n --chunk-size=10000 \\\n D=ccnetworks,t=client # Database, Table 지정\n\n\n유의할 파라미터\n\n * execute: 이 파라미터를 명시하지 않으면 실행되지 않습니다. 반대로, 절대 실행하지 않는 옵션은 dry-run 입니다.\n\n * alter: 변경할 내용을 나열합니다. MySQL의 ALTER TABLE Statement\n   [https://dev.mysql.com/doc/refman/5.6/en/alter-table.html]에서 [alter_option [,\n   alter_option] ...]에 해당하는 부분을 입력하면 됩니다.\n\n * charset: 스키마를 변경하는 테이블의 charset을 커버할 수 있는 charset으로 지정해주어야 합니다.\n\n * ask-pass: 보안을 위해, password를 파라미터로 넘기는 것보다 명령어 실행 후 입력하는 것을 추천합니다.\n\n * alter-foreign-keys-method: 외래키 제약조건이 있는 테이블의 경우 이 옵션이 필요할 수 있습니다.\n\n * chunk-time, chunk-size: 큰 마이그레이션을 하는 경우 마이그레이션 부하로 인한 DB 장애를 방지하기 위해 적은 처리량에서\n   먼저 테스트해봐야 합니다.\n\n * recursion-method: 복제 지연(replication lag)을 체크해서 최소화하기 위한 옵션인데 이 옵션 관련 에러가 뜨면\n   그냥 none으로 지정해주면 됩니다. 어차피 우리는 복제 지연이 생길 정도로 큰 부하를 주면 안 됩니다.\n\n * host, database, table, user 등 접속 정보: --host 처럼 파라미터로 넘기거나 파라미터 뒤에 DSN\n   [https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html#dsn-options]\n   형식으로 넘기면 됩니다.\n\n\n더 자세한 옵션\n\nhttps://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html\n[https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html]\n또는 $ pt-online-schema-change --help 또는 $ man pt-online-schema-change 로 볼 수 있습니다.\n\n\n실제 예시\n\n * CCNB-4957 [https://ecubelabs.atlassian.net/browse/CCNB-4957?src=confmacro] 댓글\n   참고\n\n * [DB] 자식 테이블에 CUD 있는 테이블 무중단 업데이트\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/883327112]\n\n * CCNB-5297 [https://ecubelabs.atlassian.net/browse/CCNB-5297?src=confmacro] 댓글\n   참고\n\n * SW-10059 [https://ecubelabs.atlassian.net/browse/SW-10059?src=confmacro]\n\n\n원리\n\nhttp://small-dbtalk.blogspot.com/2014/02/mysql-table-schema.html\n[http://small-dbtalk.blogspot.com/2014/02/mysql-table-schema.html] 참고\n\n\nCHEATSHEET\n\n<Table name> was not altered (...) execute failed: Lost connection to MySQL\nserver during query [for Statement \"EXPLAIN SELECT (...)\n\n→ --nocheck-plan\n\nTable storage engine for <Table name> doesn't have this option (...)\n\n→ --set-vars innodb_strict_mode=0\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/964198492"
  },
  {
    "pageContent": "[RxJS] debounceTime vs throttleTime operator\n\n개발자가 debounceTime과 throttleTime Operator를 사용하는 가장 큰 이유는 대부분 앱의 성능을 올리거나, 부하를 줄이기\n위해서입니다.\n물론 사용자의 실수를 줄이거나 사용성 개선 등을 목적으로도 사용됩니다.\n\n그리고 겉으로 보기에 두 Operator를 거친 뒤 나오는 결과물은 크게 달라보이지 않기 때문에 두개중에 어떤것을 사용해야 적당한지 모르는\n개발자를 위해 작성한 글입니다.\n\n두 Operator가 어떻게 동작하는지 모른다면 아래 링크를 참고하세요.\n\n * https://reactive.how/throttletime [https://reactive.how/throttletime]\n\n * https://rxmarbles.com/#debounceTime [https://rxmarbles.com/#debounceTime]\n\n * https://rxmarbles.com/#throttleTime [https://rxmarbles.com/#throttleTime]\n\n\nDEBOUNCETIME\n\n연속적으로 입력받는 element의 마지막 element만 사용하면 되는 경우.\n경험상 text value처럼 입력받는 element를 예측할 수 없는 경우 적합했습니다.\n\n예시\n\n * 검색어 자동완성: 성능이나 부하 방지를 위해 입력받은 텍스트 값의 변경이 0.5초 이상 없는 경우만 자동완성 데이터 불러와야 하는 경우\n\n * 실시간 검색: 성능이나 부하 방지를 위해 입력받은 텍스트 값의 변경이 0.5초 이상 없는 경우만 검색 API 호출해야 하는 경우\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/334266437/fast.gif?api=v2]\n   \n   [Fast]\n   \n   [https://ecubelabs.atlassian.net/wiki/download/attachments/334266437/normal.gif?api=v2]\n   \n   [Normal]\n   \n   위는 실제로 구현된 사례입니다. 사진의 오른쪽 로딩 인디케이터가 생길때마다 데이터를 불러온다고 볼 수 있는데, 입력을 마친 뒤 일정 시간이\n   지나야 데이터를 다시 불러오는것을 확인할 수 있습니다.\n   물론 Normal처럼 지정된 시간이 지나자 마자 입력을 하면 사진에 나온것처럼 동작하는건 막을수 없습니다, 기본적인 부하는 막을수\n   있습니다.\n\n\nTHROTTLETIME\n\n일정 시간동안 입력받는 element의 첫 element만 사용하면 되는 경우.\n경험상 입력받는 element의 형태가 단순한 이벤트인 경우 적합했습니다.\n\n예시\n\n * 버튼 클릭 중복 방지: 버튼이 항상 활성화 되어있어야 하고, 버튼을 눌렀을때 바로 반응해야 하고, 연속적으로 버튼을 눌러도 이벤트를 한번만\n   발생시켜야 하는 경우\n\n\n\n\n결론\n\n요구사항과 사용성을 고려하여 적합한 연산자를 선택하면 됩니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334266437"
  },
  {
    "pageContent": "[개발 가이드][rxjs] Side effect를 발생시키고 싶을때\n\nobservable을 만들때 아이템을 변경하는것이 아닌, 부작용을 일으켜야하는 경우가 있습니다. 보통은 console에 로그를 표시하거나, 어떤\n조건을 만족할때 어떠한 함수를 실행하는등의 경우가 있습니다.\n\n이때, *map operator를 사용하여 부작용을 일으키고 upstream을 그대로 downstream으로 내려보내주게됩니다.\n\n이런경우 *map 대신 tap operator [https://rxjs-dev.firebaseapp.com/api/operators/tap]를\n사용하면 좋습니다.\n\ntap operator는 인자로받은 observer를 실행하고, upstream을 그대로 downstream으로 반환합니다. 개발자가 명시적으로\n작업하던부분을 수행해주기때문에 실수할일이 적고, 이 operator를 사용하는 부분은 무조건 부작용을 일으키는것임을 선언적으로 나타낼 수\n있기때문에 읽기에도 더 좋은 코드가 됩니다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334692490"
  },
  {
    "pageContent": "[rxjs] axios-observable\n\naxios-observable을 사용해서 http request를 observable로 쉽게 변환시킬 수 있어 사용된다.\n\n\n\n보통 subscribe()한 후 memory leak이 발생하기 때문에 unsubscribe()해줘야 한다. 자동으로\nunsubscribe()되게 하기 위해 retry(3), take(1)등의 operator를 추가 하는 방법도 있다.\n\n\n\n하지만 axios-observable은 request 한 후 complete()되므로 unsubscribe()를 호출할 필요가 없다.\nhttps://github.com/zhaosiyang/axios-observable/blob/master/lib/create-observable.ts#L25\n[https://github.com/zhaosiyang/axios-observable/blob/master/lib/create-observable.ts#L25]\n\n\n\n단, API request를 취소하고 싶을 때는 unsubscribe()를 사용하면 된다.\nhttps://www.npmjs.com/package/axios-observable#cancellation-big-win-for-axios-observable\n[https://www.npmjs.com/package/axios-observable#cancellation-big-win-for-axios-observable]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/334332196"
  },
  {
    "pageContent": "[개발 가이드][rxjs] 에러핸들링\n\n\nERROR가 발생하면 해당 OBSERVABLE은 COMPLETE됩니다.\n\n예외는 없습니다. 어떠한 방법도 Error가 발생한 Observable이 Complete되는것을 막지 못합니다. (단, 손수 해당 Error\n발생 코드를 try~catch하는 경우를 제외합니다. 이 경우는 Error가 발생하지 않는 경우로 간주합니다.)\n\n\nCATCHERROR\n\ncatchError 오퍼레이터를 사용하면 Error 발생시 해당 Observable이 Error를 downstream으로 전달하는 대신 어떠한\nObservable을 전달할지를 선택할 수 있습니다. 또는 또다른 Error를 발생시킬 수 있습니다. 주의해야할 점은, catchError를\n사용한다할지라도 Error가 발생한 Observable은 complete 된다는 점 입니다.\n\n따라서, 어떠한 Observable을 구독해서 어떠한 작업을 수행할때, Error가 발생하더라도 구독이 끊기지않도록 하기위해서는 구독하고있는\nmain stream에서 catchError 오퍼레이터를 사용하지않고, Error가 발생하리라 예측되는 작업을 sub stream으로 분리하여\n해당 stream에서 catchError 오퍼레이터를 사용하여 error를 캐치하여야합니다.\n\n\n\n// Error가 발생하여 main stream이 complete 되는경우 = 구독이 종료되는경우\nevent$.pipe(\n  map( () => { /*ERROR*/ }),\n  catchError( (error) => { return EMPTY; }), // main stream에서 catchError를 수행하고 있습니다.\n).subscribe(\n  () => { console.log('next!'); }, // catchError에서 EMPTY를 반환했으므로 아무 아이템이 발행되지않아 next는 호출되지 않습니다.\n  () => { console.log('error!'); }, // error는 위에서 consume했으므로 여기에서는 catch되지 않습니다.\n  () => { console.log('complete!'); }, // main stream에서 error가 발생하여 complete되었으므로 이 핸들러가 호출됩니다. 동시에 구독이 종료됩니다.\n);\n\n// Error가 발생하여 sub stream이 complete 되는경우 = 구독이 종료되지 않는경우\nevent$.pipe(\n  concatMap( () => { \n    failingObservable$.pipe(\n      catchError( (error) => { return EMPTY; }), // sub stream에서 catchError를 수행하고 있습니다.\n      // error를 캐치하여 아무 아이템도 반환하지 않는 observable을 down stream으로 보냅니다. error는 보내지 않습니다.\n      // error를 캐치하고 난뒤에 이 failingObservable$은 complete 됩니다.\n    )\n  }),\n).subscribe(\n  () => { console.log('next!'); }, // catchError에서 EMPTY를 반환했으므로 아무 아이템이 발행되지않아 next는 호출되지 않습니다.\n  () => { console.log('error!'); }, // error는 위에서 consume했으므로 여기에서는 catch되지 않습니다.\n  () => { console.log('complete!'); }, // main stream에서 error가 발생하지 않았으므로 complete되지않아 이 핸들러가 호출되지않습니다. 구독이 유지됩니다.\n);\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/342327538"
  },
  {
    "pageContent": "Tips > RxJS > Rx onError Guidelines\n\n\n원문\n\nhttps://netflixtechblog.com/android-rx-onerror-guidelines-e68e8dc7383f\n[https://netflixtechblog.com/android-rx-onerror-guidelines-e68e8dc7383f]\n\n\nOBSERVABLE이 ERROR를 발행하는일은 FATAL ERROR에 한해서만 일어나야 합니다.\n\nObservable이 error를 발행하게되면, 해당 Observable의 구독은 종료됩니다. 그러므로 Observable이 error를\n발행하는 경우는 더이상 아이템을 발행해서는 안되는 fatal error의 경우에 한해서만 이루어져야하며, 아닐경우 error를 발행하지 않도록\n해야합니다.\n\n\nDETERMINISTIC ERROR와 NON-DETERMINISTIC ERROR를 함께 내보내지 마세요.\n\nDeterministic error는 동일한 input이 있을경우 항상 동일하게 발생하는 error이고 Non-deterministic\nerror는 때에따라 발생하는 error입니다. (예를들면 network error가 있습니다.) Non-deterministic error의\n경우 retry operator를 사용하는것이 자연스럽지만, deterministic error일 경우 retry는 쓸모가 없습니다.\nObservable이 항상 일관된 error를 발생시키도록 하세요. 위 두 타입의 error가 함께 발생하는 경우가 생겼다면, 관심사의 분리를\n적절히하여 두개의 observable로 분리할 수 있는지 고려해보세요.\n\n\n다른 API를 WRAPPING하는 OBSERVABLE의 경우 API의 ERROR HANDLING을 존중하세요.\n\n감싸려는 Api(touch event 등)에서 error를 발생시키는 경우 이를 임의로 핸들링하지말고 해당 Observable을 사용하는곳에서\n핸들링하도록 하세요.\n\n\n아이템에 따라 ERROR를 발생시키는 비즈니스 로직을 추가하지 마세요.\n\n그런 경우, 해당 아이템을 생성하는 위치에서 error로 변환하도록 해야합니다. 드문경우지만 그럴 수 없다면, observable에서\nerror를 발생시키지 말고 error와 일반 아이템을 추상화한 아이템을 반환하도록 해야합니다.\n\n\nERROR를 발생시킬경우 자세한 내용을 입력하세요.\n\nError를 발생시켜야 하는경우, 해당 error의 원인과 적절한 핸들링 방법을 error에 담아서 발생시키세요.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/408944714"
  },
  {
    "pageContent": "[RxJS] Operators\n * [RxJS] switchMap\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635516427]\n * [RxJS] withLatestFrom\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635287068]\n * [RxJS] mergeMap\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635745800]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635450885"
  },
  {
    "pageContent": "[RxJS] switchMap\n\n\n특징\n\n * Target 옵저버블을 구독한다.\n\n * Source 옵저버블에 새 엘리먼트가 fire된 경우 기존 Target 옵저버블의 구독을 취소한다.\n\n * Source 옵저버블이 fire 될 때 마다 Target 옵저버블의 모든 엘리먼트를 반복한다.\n\n\n주의사항\n\n * Target 옵저버블에 엘리먼트가 많이 쌓일수록 성능에 문제가 생길 수 있다.\n   \n   * 한번만 fire하고 구독을 취소하는 형태의 옵저버블을 사용하는게 적합하다.\n     (last, first, skip* 계열의 filtering operator를 사용한 옵저버블도 좋다.)\n\n\n주 용도\n\n * HTTP Request cancellation 구현시 아주 편리함\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635516427"
  },
  {
    "pageContent": "[RxJS] withLatestFrom\n\n\n특징\n\n * 특정 옵저버블을 Target으로서 구독한다.\n\n * Target 옵저버블의 최근 엘리먼트만 받아온다.\n\n * Target 옵저버블에서 fire되는 엘리먼트가 하나도 없는 경우 구독해도 동작하지 않는다.\n\n * Source 옵저버블을 기준으로 데이터를 전달받는다.\n\n\n주 용도\n\n * Source 옵저버블의 데이터를 가공할 때 다른 옵저버블에 있는 데이터가 필요한 경우\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635287068"
  },
  {
    "pageContent": "[RxJS] mergeMap\n\n\n특징\n\n * Target 옵저버블을 구독한다.\n\n * Source 옵저버블에 새 엘리먼트가 fire되어도 Target을 구독 취소하지 않는다.\n\n\n주 용도\n\n * 비동기 처리나 동시 작업 필요한 옵저버블을 동시에 구독하기 좋다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1635745800"
  },
  {
    "pageContent": "0. 프로젝트 준비\n\n\nGITHUB REPOSITORY 생성\n\n첫걸음!\n\n깃헙에 프로젝트를 생성한 뒤엔 권한 설정을 해줘야 다른 사람들이 접근할 수 있다.\n\nSW팀을 writer로 허용해주자.\n\n\nTRANSPILER & BUNDLER & FRAMEWORK & LIBS 설정\n\n * TypeScript\n * Webpack\n * React.js\n * Angular\n * ...\n\n뭐든 자신이 필요한 도구를 설치하고 셋팅한다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204308569"
  },
  {
    "pageContent": "1. 개발 환경(Lint & Prettify) 설정\n\n\nPRETTIER & CONFIG 설치\n\nhttps://www.npmjs.com/package/@ecubelabs/prettier-config\n[https://www.npmjs.com/package/@ecubelabs/prettier-config]\n\nnpm i eslint prettier eslint-config-prettier eslint-plugin-prettier @ecubelabs/prettier-config -D\n\n위 패키지들을 설치합니다.\n\n그리고 아래 파일을 프로젝트 최상단에 만들어줍니다.\n\n// .prettierrc.js\nmodule.exports = {\n  ...require('@ecubelabs/prettier-config/back-end'), // front-end도 있습니다. jsx 호환.\n  ...require('@ecubelabs/prettier-config'),\n};\n\n\nESLINT 설정\n\nCode formatting 에 대한 설정은 온전히 프리티어에게 맡기기 위해 eslint에 추가 설정이 필요합니다.\n아래 가이드를 따라하게 되면 eslint에서의 code formatting 을 위한 규칙은 무시되고, 프리티어의 규칙을 따르게 됩니다.\n\nprettier 설정을 .eslintrc.js 에 추가해줍니다.\n\n// .eslintrc.js\nmodule.exports = {\n  extends: ['ecubelabs', 'plugin:prettier/recommended'], // 반드시 prettier를 가장 마지막에 extends해야 합니다.\n  plugins: [..., 'prettier'], // 순서 상관 없습니다.\n  rules: {\n    ...,\n    'prettier/prettier': 'error', // 프리티어를 지키지 않으면 에러로 처리해야 합니다.\n  },\n  ...\n};\n\n\nTSCONFIG 설정\n\nhttps://github.com/Ecube-Labs/tsconfig [https://github.com/Ecube-Labs/tsconfig]\n\n{\n    \"include\": [\"src\"],\n    \"extends\": \"@ecubelabs/tsconfig/node14.json\", // NOTE: https://github.com/Ecube-Labs/tsconfig/blob/main/node14.json\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"baseUrl\": \"./src\",\n        \"outDir\": \"./dist\",\n    },\n}\n\n\nESLINT 동작 확인\n\nnpx eslint src/**/*.ts --fix\n\n프로젝트에서 위 명령어를 돌렸을 때 변경사항이 없고 에러가 없어야 정상적으로 설정된것이다.\n\n\n.NVMRC 파일 추가\n\n아래의 내용으로 파일을 추가한다.\n\n14\n\n이 버전은 Dockerfile에서 사용하는 node 버전과 일치하도록 한다.\n개발 환경은 nvm use 자동화\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2109702171] 를 이용해 일관적인 개발\n환경을 이용할수 있도록 구성한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/204374073"
  },
  {
    "pageContent": "iOS 프로젝트\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221053004"
  },
  {
    "pageContent": "Android 앱\n등록[https://ecubelabs.atlassian.net/wiki/download/attachments/221118525/image-20210103-132102.png?api=v2]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221118525/image-20210103-132155.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221118525/image-20210103-140313.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221118525"
  },
  {
    "pageContent": "App Center\n\nMS AppCenter 를 통해 Code Push 를 사용한다.\n\n * App Center, App 초대 요청\n * Management CLI 설치\n * RN 프로젝트에 Code Push 적용\n * Release\n   * CCN-iOS 배포\n   * CCN-Android 배포\n   * Trouble Shooting\n     * digital envelope routines::unsupported\n * 관련문서\n\n\nAPP CENTER, APP 초대 요청\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA/overview?homepageId=38731850\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA]\n\nApp Center 관리자에게 요청해서 App Center에 초대를 받는다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221578718/Screenshot%202024-02-22%20at%202.50.24%E2%80%AFPM.png?api=v2]\n\n배포하고자 하는 App의 팀에도 초대가 되어야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221578718/Screenshot%202024-02-22%20at%202.52.35%E2%80%AFPM.png?api=v2]\n\n\nMANAGEMENT CLI 설치\n\nnpm install -g appcenter-cli\n\nappcenter login\n\n정상적으로 설치, 로그인 됐다면 appcenter codepush deployment list --app Ecube-Labs/앱 이름 명령어를\n입력했을 때 배포 현황을 확인할 수 있다.\n\nex)\n\nappcenter codepush deployment list --app Ecube-Labs/CCN-iOS\n\n\n\n--displayKeys 옵션을 통해 key가 제대로 들어있는지 확인할 수도 있다.\n\n\nRN 프로젝트에 CODE PUSH 적용\n\n이미 적용된 프로젝트라면 해당 과정은 넘어가도 된다.\n\nnpm install react-native-code-push --save\n\nApp.tsx\n\nexport default codePush({\n  checkFrequency: codePush.CheckFrequency.ON_APP_RESUME,\n  installMode: codePush.InstallMode.ON_NEXT_RESUME,\n})(App);\n\n\nRELEASE\n\nappcenter codepush release-react -a Ecube-Labs/{앱 이름} -d Production -m  --description \"{이슈 번호 or 설명}\" --target-binary-version \"{Codepush하고자 하는 프로젝트의 현 버전}\"\n\n\n\nCCN 앱 배포 예시\n\n\nCCN-IOS 배포\n\nappcenter codepush release-react -a Ecube-Labs/CCN-iOS -d Production -m  --description \"SW-7003\" --target-binary-version \"2.1.7\"\n\n\nCCN-ANDROID 배포\n\nappcenter codepush release-react -a Ecube-Labs/CCN-Android -d Production -m  --description \"SW-7003\" --target-binary-version \"2.1.7\"\n\n\nTROUBLE SHOOTING\n\n\nDIGITAL ENVELOPE ROUTINES::UNSUPPORTED\n\nFailed to construct transformer:  Error: error:0308010C:digital envelope routines::unsupported\n...\nerror Cannot read properties of undefined (reading 'transformFile').\nTypeError: Cannot read properties of undefined (reading 'transformFile')\n\n위와 같은 에러가 발생한다면 NODE_OPTIONS 환경 변수의 값을 --openssl-legacy-provider 로 설정하고 배포 커맨드를\n실행해주면 된다.\n\nex)\n\nNODE_OPTIONS=--openssl-legacy-provider appcenter codepush release-react -a Ecube-Labs/CCN-iOS -d Production -m  --description \"SW-7003\" --target-binary-version \"2.1.7\"\n\n\n관련문서\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2204991524?search_id=f8ffce47-e28b-4c6c-81a8-9155d4ef3cc5\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2204991524?search_id=f8ffce47-e28b-4c6c-81a8-9155d4ef3cc5]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221578718"
  },
  {
    "pageContent": "Firebase\n\n앱을 production, stage 환경으로 분리해 관리한다는 가정하에 문서를 작성했습니다.\n\n\n관련문서\n\nFirebase? [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2137063435]\n\n\n목차\n\n * 관련문서\n * 목차\n * 프로젝트 구성 방법\n   * 1. Firebase 콘솔 접속 (https://console.firebase.google.com/)\n   * 2. 프로젝트 생성\n     * 2.1 프로젝트명 기입\n     * 2.2 GA 활성화 여부 설정\n     * 2.3 GA Account 선택 (GA 설정하는 경우만)\n   * 3. RN 프로젝트 설정\n\n\n\n\n프로젝트 구성 방법\n\n--------------------------------------------------------------------------------\n\n\n1. FIREBASE 콘솔 접속 (HTTPS://CONSOLE.FIREBASE.GOOGLE.COM/\n[https://console.firebase.google.com/])\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-022824.png?api=v2]\n\n\n2. 프로젝트 생성\n\n이전에 프로젝트를 생성한 이력이 있다면 3번부터 시작하면 된다.\n\n프로젝트 생성 기준 [https://ecubelabs.atlassian.net/browse/CCNB-6306]\n\nFirebase 는 2단계 계층 구조를 갖는다. (Project - App)\n\n * Project: haulla\n\n * Apps\n   \n   * com.haulla (Android)\n   \n   * com.haulla.stage (Android)\n   \n   * com.haulla (iOS)\n   \n   * com.haulla.stage (iOS)\n\n\n2.1 프로젝트명 기입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-023041.png?api=v2]\n\n\n2.2 GA 활성화 여부 설정\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA] Firebase 관리자 혹은 프로젝트 리더에게 GA\n활성 여부를 물어봐서 설정하면 된다. (물론 나중에 활성화 할 수 있다.)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-023107.png?api=v2]\n\n\n2.3 GA ACCOUNT 선택 (GA 설정하는 경우만)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2225995796/image-20211028-024359.png?api=v2]\n\n\n3. RN 프로젝트 설정\n\n[Firebase] iOS 세팅\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217776156]\n\n[Firebase] Android 세팅\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2226290771]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2225995796"
  },
  {
    "pageContent": "제플린에 컴포넌트 연결\n\n\n\n * I. 설정\n   * 1. CLI 설정\n     * I. Token 받아오기\n     * II. 토큰 셋팅하기\n     * III. 프로젝트 및 스타일가이드 셋팅\n   * 2. VS code 설정\n * II. 제플린에 컴포넌트 연결하기\n   * I. 플러그인 추가\n   * II. 연결할 컴포넌트 지정\n   * III. 스타일 가이드에 해당 컴포넌트 있는지 확인하기\n   * 예시\n * III. 제플린에 스토리북 연결\n   * I. 플러그인 추가\n   * II. 연결할 컴포넌트 지정\n * IV. 배포\n   * 주의: 토큰 셋팅 확인\n   * 최종 완성본 - 예) ListItemText\n\n\n\n\nI. 설정\n\n\n\n\n1. CLI 설정\n\n참고: https://github.com/zeplin/cli [https://github.com/zeplin/cli]\n\nI. TOKEN 받아오기\n\nhttps://app.zeplin.io/profile/connected-apps\n[https://app.zeplin.io/profile/connected-apps]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.12.30.png?api=v2]\n\n\n\nII. 토큰 셋팅하기\n\nSet ZEPLIN_ACCESS_TOKEN environment variable in your CI.\n\nex) ZEPLIN_ACCESS_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6Ind\n\n\n\nIII. 프로젝트 및 스타일가이드 셋팅\n\n./zeplin/components.json\n\nMP_Web : 5eb2499ef962ccb1b82e7fb8 (projects)\n\nCEED Web Design System : 5ea7d6a0b472cbbc68219de1 ( styleguides )\n\n  \"projects\": [\"5eb2499ef962ccb1b82e7fb8\"],\n  \"styleguides\": [\"5ea7d6a0b472cbbc68219de1\"],\n\n\n\n\n2. VS CODE 설정\n\n * VS 익스텐션 : https://marketplace.visualstudio.com/items?itemName=zeplin.zeplin\n   [https://marketplace.visualstudio.com/items?itemName=zeplin.zeplin]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.24.11.png?api=v2]\n\nCommand에서 Login to Zeplin 을 클릭하여, 연결해준다.\n\n\n\n사이드바 하단에 제플린 아이콘을 눌러서 프로젝트, 스타일 가이드를 연결해준다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-26%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.19.24.png?api=v2]\n\n\n\n\nII. 제플린에 컴포넌트 연결하기\n\n\n\n참고: https://github.com/zeplin/cli-connect-react-plugin\n[https://github.com/zeplin/cli-connect-react-plugin] ( 플러그인 설치 )\n\n\nI. 플러그인 추가\n\n./package.json\n\n  \"plugins\": [\n    {\n      \"name\": \"@zeplin/cli-connect-react-plugin\"\n    }\n  ],\n\n\n\n\nII. 연결할 컴포넌트 지정\n\n./zeplin/component.json\n\n\"components\": [\n    {\n      \"path\": \"src/app/ceed/core/ListItemText/ListItemText.tsx\", // 컴포넌트 명\n      \"zeplinNames\": [ \"Lists/Default/Default/Text\",\n        \"Lists/Default/with Secondary/Text\",\n        \"Lists/Default/with Caption/Text\"\n        ] // 스타일가이드에 있는 컴포넌트 명\n    }\n  ]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.10.37.png?api=v2]\n\n\n\n\nIII. 스타일 가이드에 해당 컴포넌트 있는지 확인하기\n\n\n\n * 마우스를 올려두면 해당 컴포넌트가 없는지 확인 가능하다.\n\n\n\n * 해당 컴포넌트가 있을 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.20.45.png?api=v2]\n\n\n\n * 없을 경우\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.07.43.png?api=v2]\n\n\n예시\n\n\n\n위치: .zeplin/components.json\n\n{\n  \"plugins\": [\n    {\n      \"name\": \"@zeplin/cli-connect-react-plugin\"\n    }\n  ],\n  \"projects\": [\"5eb2499ef962ccb1b82e7fb8\"],\n  \"styleguides\": [\"5ea7d6a0b472cbbc68219de1\"],\n  \"components\": [\n    {\n      \"path\": \"src/app/ceed/core/ListItemText/ListItemText.tsx\",\n      \"zeplinNames\": [\n        \"Lists/Default/Default/Text\",\n        \"Lists/Default/with Secondary/Text\",\n        \"Lists/Default/with Caption/Text\"\n      ],\n    }\n  ]\n}\n\n\n\n\n\nIII. 제플린에 스토리북 연결\n\n\n\n참고: https://github.com/zeplin/cli-connect-storybook-plugin\n[https://github.com/zeplin/cli-connect-storybook-plugin] ( 플러그인 설치 )\n\n\n\n\nI. 플러그인 추가\n\n  \"plugins\": [\n     {\n      \"name\": \"@zeplin/cli-connect-storybook-plugin\",\n      \"config\": {\n        \"url\": \"http://localhost:64557\",\n        \"startScript\": \"storybook\"\n      }\n    }\n  ],\n\n\n\n\nII. 연결할 컴포넌트 지정\n\n\n\n스토리북에 작성된 컴포넌트 이름을 입력하면 된다.\n\n\nstoriesOf('@ceed/core/ListItemText', module).add('Lists/Default/Default/Text', () => (\n  <ListItemText primary=\"List item\" />\n));\n\n\n\n      \"storybook\": {\n        \"kind\": \"@ceed/core/ListItemText\",\n        \"stories\": [\n          \"Lists/Default/Default/Text\",\n          \"Lists/Default/with Secondary/Text\",\n          \"Lists/Default/with Caption/Text\"\n        ]\n      }\n\n\n\nkind 에는 storiefOf의 값을 넣는다\n\nstories 에는 add로 추가한 컴포넌트를 넣어주면 된다.\n\n\nIV. 배포\n\n\n\n주의: 토큰 셋팅 확인\n\n zeplin connect\n\n\n\n\n\n최종 완성본 - 예) LISTITEMTEXT\n\n{\n  \"components\": [\n    {\n      \"path\": \"src/app/ceed/core/ListItemText/ListItemText.tsx\",\n      \"zeplinNames\": [\n        \"Lists/Default/Default/Text\",\n        \"Lists/Default/with Secondary/Text\",\n        \"Lists/Default/with Caption/Text\"\n      ],\n      \"storybook\": {\n        \"kind\": \"@ceed/core/ListItemText\",\n        \"stories\": [\n          \"Lists/Default/Default/Text\",\n          \"Lists/Default/with Secondary/Text\",\n          \"Lists/Default/with Caption/Text\"\n        ]\n      }\n    }\n  ],\n}\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/599359651/82852620-5caf4300-9f3e-11ea-9d9b-5e048682a01f.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/599359651"
  },
  {
    "pageContent": "tsconfig 관리\n\n아래 코드는 이해를 돕기 위한 tsconfig 예시이므로 반드시 똑같이 관리하지 않아도 되지만, 보통 비슷하게 구성된다.\n\n * tsconfig.base.json: 모든 tsconfig에서 상속받아서 사용하는 용도로 관리한다.\n   \n   * compilerOptions, paths 등의 설정을 공통으로 구성하기 위한 목적이다.\n   \n   * {\n         \"extends\": \"@ecubelabs/tsconfig/node18.json\", // NOTE: https://github.com/Ecube-Labs/tsconfig/blob/main/node18.json\n         \"compilerOptions\": {\n             \"module\": \"commonjs\",\n             \"baseUrl\": \"./src\",\n             \"outDir\": \"./dist\",\n             \"useUnknownInCatchVariables\": false,\n             \"esModuleInterop\": true,\n             \"paths\": {\n                 \"~types/*\": [\"@types/*\"]\n             }\n         }\n     }\n\n * tsconfig.json: TS Language server / ESLint에서 참조하는 tsconfig\n   \n   * tsconfig에서 exclude 하게 되면 VSCode Extension에 의해 실행되는 TS Language server가\n     tsconfig를 참조하지 못해서 exclude에 포함된 파일(ex. test file)을 대상으로 IDE(인텔리센스)가 정상적으로\n     동작하지 않는다.\n     안타깝게도 VSCode tsconfig를 별도로 지정할 수 없으므로 tsconfig.json 파일은 개발용으로만 사용한다.\n   \n   * 자세한것은 아래 커밋메세지 참고.\n     https://github.com/Ecube-Labs/ecubelabs/commit/73095fb82558d186f31f9f56fe34e8a4739d001a\n     [https://github.com/Ecube-Labs/ecubelabs/commit/73095fb82558d186f31f9f56fe34e8a4739d001a]\n     https://github.com/Ecube-Labs/ecubelabs/commit/aae1f7442068df1d88b9c5772bf3bc0c65f8e64d\n     [https://github.com/Ecube-Labs/ecubelabs/commit/aae1f7442068df1d88b9c5772bf3bc0c65f8e64d]\n   \n   * {\n         \"include\": [\"src\"],\n         \"exclude\": [\"node_modules\"],\n         \"extends\": \"./tsconfig.base.json\"\n     }\n\n * tsconfig.test.json: 테스트를 돌릴때 참조하는 tsconfig\n   \n   * 테스트를 실행할 때에도 exclude에 포함시킨 파일은 읽어들이지 못한다.\n     테스트 관련 파일을 exclude에 포함시키는 경우 테스트가 정상적으로 실행될 수 없으므로 별도로 분리해서 관리한다.\n   \n   * {\n         \"include\": [\"src\", \"test\"],\n         \"extends\": \"./tsconfig.base.json\",\n         \"compilerOptions\": {\n             \"types\": [\"jest\"]\n         }\n     }\n\n * tsconfig.build.json: 빌드할 때 사용하는 tsconfig\n   \n   * 앱 실행에 불필요한 파일을 제외하고 전부 exclude에 포함시킨다.\n   \n   * {\n         \"include\": [\"src\"],\n         \"exclude\": [\"**/*.spec.ts\", \"**/*.test.ts\", \"*.d.ts\", \"node_modules\", \"test\"],\n         \"extends\": \"./tsconfig.base.json\"\n     }\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2779054141"
  },
  {
    "pageContent": "[GitHub] Code Owners\n\nGitHub는 오픈소스 생태계를 지키기 위해 Code Owners\n[https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners]라는\n기능이 존재합니다.\n\n# /.github/CODEOWNERS\n\n* @github_username1 @github_username2\n/src/services @selenehyun\n/Dockerfile @ecube_infra_admin\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/243138599/image-20191128-052253.png?api=v2]\n\n자세한 포맷은\nhttps://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners\n[https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners]\n를 참고하면 되고, 위 처럼 정의를 해두면 누군가 PR을 올렸을때, 위 규칙에 해당하는 GitHub 사용자는 자동으로 Reviewer로 지정되며\n아래 사진과 같이 아이콘이 뜹니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/243138599/image-20191128-051944.png?api=v2]\n\n어떠한 설계나 변경사항이 있을 때 반드시 알아야 하는 경우 유용하게 쓰일수 있으며, 지금 이큐브랩에서는 프로젝트의 방향이나 설계하는 리더를 모든\n파일의 코드 오너로 지정하는것을 권장합니다. (1~2명)\n\n--------------------------------------------------------------------------------\n\n추가적으로, 코드 오너가 승인하지 않으면 머지를 못하도록 레파지토리 설정을 변경할 수 있습니다. (GitHub 관리자\n[https://ecubelabs.atlassian.net/browse/CCNB-2520]에게 요청)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243138599"
  },
  {
    "pageContent": "1. 앱 등록\n * App ID 생성\n   * Step 1. Apple Developer > Certificates, Identifiers & Profiles\n   * Step 2. Identifiers 옆에 + 버튼 클릭\n   * Step 3. App IDs 선택\n   * Step 4. 값을 채워 넣는다. 번들 ID 는 교체할 수 없기 때문에 주의\n   * Step 5. 푸시를 사용하는 앱이라면 Capabilities 에서 Push Notifications 을 체크\n * App 생성\n\n\nAPP ID 생성\n\n\nSTEP 1. APPLE DEVELOPER [https://developer.apple.com] > CERTIFICATES,\nIDENTIFIERS & PROFILES\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_12-16-0.png?api=v2]\n\n\n\n\nSTEP 2. IDENTIFIERS 옆에 + 버튼 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-16_15-51-58.png?api=v2]\n\n\n\n\nSTEP 3. APP IDS 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_12-18-57.png?api=v2]\n\n\n\n\nSTEP 4. 값을 채워 넣는다. 번들 ID 는 교체할 수 없기 때문에 주의\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_12-22-51.png?api=v2]\n\n * Bundle ID 영어 소문자, . 만 포함하도록 한다.\n   \n   * 안드로이드의 applicationId 와 일치시키기 위함인데 안드로이드의 applicationId 는 -, _ 를 허용하지 않는다.\n   \n   * 안드로이드의 applicationId 와 iOS bundle ID 를 반드시 일치시킬 필요는 없지만 각 플랫폼에서 어플리케이션의\n     identifier 를 다르게 할 이유도 없으니 특별한 사유가 없다면 일치시키도록 한다.\n\n * Description 은 나중에 수정할 수 있다.\n\n\n\n\nSTEP 5. 푸시를 사용하는 앱이라면 CAPABILITIES 에서 PUSH NOTIFICATIONS 을 체크\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-16_15-50-23.png?api=v2]\n\n\nAPP 생성\n\nApp Store Connect [https://appstoreconnect.apple.com]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image2019-10-2_13-47-24.png?api=v2]\n\n * 이전 과정에서 생성한 번들 ID 를 선택해야 하는 것 외에 특이사항은 없다.\n\n * SKU 는 뭔지 모르겠는데 그냥 번들 ID 랑 같은 값을 입력해도 된다.\n\n\n\n\n프리뷰 이미지 준비\n\nhttps://ecubelabs.atlassian.net/browse/MP-767\n[https://ecubelabs.atlassian.net/browse/MP-767]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image-20210103-131031.png?api=v2]\n\n\n\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image-20210103-133001.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/215449605/image-20210103-133328.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/215449605"
  },
  {
    "pageContent": "2. APN 인증 키 생성\n\n푸시를 사용하는 앱은 APN 인증 키가 필요하다.\n\nAPN 인증 키는 앱마다 발급해야 하는 것이 아니다.\n\n실제로 APN 인증 키를 만들때 앱 관련 어떠한 정보도 입력하지 않는다.\n\n3. Firebase iOS 생성\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219515085]에서 APN 인증 키를\n업로드할 때 번들 아이디를 입력하는데 이것으로 충분하다.\n\n(하나의 APN 키로 복수개의 앱에서 푸시 전송하는 것 확인 완료. 2020.01.16)\n\n\n\n\nApple Developer [https://developer.apple.com]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-2_12-16-0.png?api=v2]\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-16_16-29-4.png?api=v2]\n\n * Keys 옆에 + 버튼 클릭\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-16_16-30-50.png?api=v2]\n\n * Key Name 입력\n * Apple Push Notifications service 체크\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/223183054/image2019-10-16_16-31-53.png?api=v2]\n\n * APNs key 다운로드 (AuthKey_YOUR_KEY_ID.p8)\n * 다시 다운로드 불가능하므로 잘 보관해야 한다\n   * 보유자 강승현 (Tim)\n     [https://ecubelabs.atlassian.net/wiki/people/557058:f3687c0d-0c03-471d-a624-ff5b557028ad?ref=confluence] 김일두(Charlie)\n     [https://ecubelabs.atlassian.net/wiki/people/5ade957854b5e72468e78c20?ref=confluence]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/223183054"
  },
  {
    "pageContent": "3. Firebase iOS 생성\n\nFirebase 프로젝트가 미리 생성되어 있어야 한다.\n\n\n\n * Firebase iOS 앱 생성\n * APN 인증 키 등록\n\n\n\n\n\n\n\nFIREBASE IOS 앱 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_15-57-33.png?api=v2]\n\n * Firebase 프로젝트에서 iOS 앱 추가\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_15-58-18.png?api=v2]\n\n * iOS 번들 ID 입력\n\n\n\n\n\nAPN 인증 키 등록\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_16-7-56.png?api=v2]\n\n * Project Overview > Project settings > Cloud Messaging\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_16-9-15.png?api=v2]\n\n * APNs Authentication Key 항목에 p8 형식의 인증키를 업로드한다.\n\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/219515085/image2019-10-16_16-38-25.png?api=v2]\n\n * Key ID 는 AuthKey 에 있는데 없다면 Apple Developer > Certificates, Identifiers &\n   Profiles [https://developer.apple.com/] 에서 확인할 수 있다.\n * Team ID 는 Membership [https://developer.apple.com/account/#/membership] 에서\n   확인할 수 있다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/219515085"
  },
  {
    "pageContent": "4. Xcode 프로젝트 생성\n * For React Native\n * For iOS Native\n\n\nFOR REACT NATIVE\n\n$ npx react-native init MyApp --template react-native-template-typescript\n\n\nFOR IOS NATIVE\n\n특별한 규칙은 없다.",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221151311"
  },
  {
    "pageContent": "5. QA build 설정\n * QA configuration 생성\n * QA scheme 생성\n * Customize QA configuration\n   * Product Bundle Identifier\n   * Entry file for TypeScript\n   * Different App icons\n\n\nQA CONFIGURATION 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/QA%20configuration.gif?api=v2]\n\nQA 앱은 metro bundler 없이 standalone 으로 동작해야 하기 때문에 Release 를 duplicate 해서 생성한다.\n\n\nQA SCHEME 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/QA%20scheme.gif?api=v2]\n\nQA 스킴은 Run(Xcode 에서 실행) 혹은 Archive(Test Flight 로 배포)할 때 QA configuration 을 사용하도록\n생성.\n\n\nCUSTOMIZE QA CONFIGURATION\n\n\nPRODUCT BUNDLE IDENTIFIER\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-083546.png?api=v2]\n\nProduct bundle identifier 는 앱을 구분하는 값으로 bundle identifier 가 같은 앱은 두개 존재할 수 없다.\n그래서 Release 와 Debug 의 bundle identifier 가 같은 경우, 앱스토어에서 설치한 앱이 있을 때 Xcode 를 이용해\n해당 앱을 아이폰에서 디버깅 하려고 하는 경우 앱스토어에서 설치한 앱을 지워버린다.\n\n\nENTRY FILE FOR TYPESCRIPT\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-091318.png?api=v2]\n\n\nDIFFERENT APP ICONS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-101314.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/221053011/image-20210715-101343.png?api=v2]\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/221053011"
  },
  {
    "pageContent": "배포 키스토어 생성 및 설정\n\n배포 secret 은 앱 당 하나만 존재한다.\n\n배포자가 여러명인 경우 모종의 방법을 통해 secret 을 공유해야 하며 절대로 형상 관리하지 않는다.\n\n\n\n * 1. Keystore 비밀번호 생성\n * 2. Keystore 생성\n * 3. Keystore 설정 파일 생성\n * 4. 프로젝트에 secret 복사\n\n\n1. KEYSTORE 비밀번호 생성\n\n> openssl rand -base64 32\n\n\n2. KEYSTORE 생성\n\n> keytool -genkeypair -v -keystore $YOUR_KEYSTORE_NAME -alias $YOUR_KEY_ALIAS\n-keyalg RSA -keysize 2048 -validity 100000 -storetype pkcs12\n\n$YOUR_KEYSTORE_NAME 은 ***.keystore 형식으로 한다.\n\n그러면 다음과 같이 interaction 이 진행 된다.\n\n키 저장소 비밀번호 입력: // 여기에 1 에서 생성한 비밀번호 입력\n새 비밀번호 다시 입력:\n이름과 성을 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\n조직 단위 이름을 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\n조직 이름을 입력하십시오.\n  [Unknown]: Ecube Labs\n구/군/시 이름을 입력하십시오?\n  [Unknown]: // 아무값도 입력하지 않고 enter\n시/도 이름을 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\n이 조직의 두 자리 국가 코드를 입력하십시오.\n  [Unknown]: // 아무값도 입력하지 않고 enter\nCN=Unknown, OU=Unknown, O=Ecubelabs, L=Unknown, ST=Unknown, C=Unknown이(가) 맞습니까?\n  [아니오]: y\n\n다음에 대해 유효 기간이 100,000일인 2,048비트 RSA 키 쌍 및 자체 서명된 인증서(SHA256withRSA)를 생성하는 중\n        : CN=Unknown, OU=Unknown, O=Ecubelabs, L=Unknown, ST=Unknown, C=Unknown\n[$YOUR_KEYSTORE_NAME을(를) 저장하는 중]\n\n\n3. KEYSTORE 설정 파일 생성\n\n다음과 같이 Keystore 설정 파일 keystore.properties 를 생성한다.\n\nRELEASE_KEY_ALIAS=$YOUR_KEY_ALIAS\nRELEASE_KEY_PASSWORD=$(1에서 생성한 비밀번호)\nRELEASE_KEYSTORE_FILE_PATH=../secrets/$YOUR_KEYSTORE_NAME\nRELEASE_KEYSTORE_PASSWORD=$(1에서 생성한 비밀번호)\n\n\n4. 프로젝트에 SECRET 복사\n\nYOUR_PROJECT/android/app/secrets 하위로 2, 3 에서 생성한 ***.keystore,\nkeystore.properties 를 옮긴다.\n\n/android/app/secrets는 gitignore 에 추가하고 절대로 형상관리 되지 않도록 하며\nhttps://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122225385\n[https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/122225385] 에 기록한다.\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/245202952"
  },
  {
    "pageContent": "[Firebase] iOS 세팅\n * 1. 앱 등록\n   * 1.1 프로젝트 상세 진입\n   * 1.2 앱 등록 페이지 진입\n   * 1.3 메타데이터 입력\n   * 1.4 GoogleService-Info.plist 파일 다운로드\n   * 1.5 완료\n * 2. 프로젝트에 Firebase 구성\n   * 2.1 react-native-firebase/app 패키지 설치\n   * 2.2 Pod install\n   * 2.2 AppDelegate.m 설정\n   * 2.3 Firebase 구성 파일들을 위치시킬 폴더 생성\n   * 2.4 firebase 폴더에 GoogleService-Info.plist 파일 추가\n   * 2.5 Target Membership 해제\n   * 2.6 Build Phases 에 Firebase 스크립트 추가\n\n\n1. 앱 등록\n\n--------------------------------------------------------------------------------\n\n\n1.1 프로젝트 상세 진입\n\n콘솔에서 프로젝트를 눌러 상세에 진입한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-030535.png?api=v2]\n\n\n1.2 앱 등록 페이지 진입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-051332.png?api=v2]\n\n프로젝트명 아래에 있는 + 버튼을 누르고, iOS 을 선택해서 앱 등록 페이지에 진입한다.\n\n\n1.3 메타데이터 입력\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-030757.png?api=v2]\n\n\n1.4 GOOGLESERVICE-INFO.PLIST 파일 다운로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-030945.png?api=v2]\n\n\n1.5 완료\n\n3, 4 번 설정은 추후 프로젝트 구성할 때 진행할 거라 그냥 Next 눌러서 패스하면 된다.\n\nContinue to console 눌러서 앱 등록을 마무리한다.\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-031119.png?api=v2]\n\n\n\n\n2. 프로젝트에 FIREBASE 구성\n\n--------------------------------------------------------------------------------\n\nhttps://rnfirebase.io/ [https://rnfirebase.io/] 문서를 기반으로 한다.\n\n\n2.1 REACT-NATIVE-FIREBASE/APP 패키지 설치\n\nnpm install --save @react-native-firebase/app\n\n\n2.2 POD INSTALL\n\npod install\n\n\n2.2 APPDELEGATE.M 설정\n\n#import <Firebase.h>\n\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  ...\n  \n  // Firebase\n  [FIRApp configure];\n\n  ...\n}\n\n...\n\n\n2.3 FIREBASE 구성 파일들을 위치시킬 폴더 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-095950.png?api=v2]\n\n\n\n\n2.4 FIREBASE 폴더에 GOOGLESERVICE-INFO.PLIST 파일 추가\n\n3번에서 다운로드 했던 GoogleService-Info.plist 를 각 폴더에 추가해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-100016.png?api=v2]\n\n\n\n\n2.5 TARGET MEMBERSHIP 해제\n\n방금 추가한 GoogleService-Info.plist 파일들을 선택하고 Target Membership 을 모두 해제해줍니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-043712.png?api=v2]\n\n\n2.6 BUILD PHASES 에 FIREBASE 스크립트 추가\n\n순서는 Link Binary With Libraries 다음에 두면 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/217776156/image-20211028-043931.png?api=v2]\n\n# Name of the resource we're selectively copying\nGOOGLESERVICE_INFO_PLIST=GoogleService-Info.plist\n\n# Get references to dev and prod versions of the GoogleService-Info.plist\n# NOTE: These should only live on the file system and should NOT be part of the target (since we'll be adding them to the target manually)\nGOOGLESERVICE_INFO_PRODUCTION=${PROJECT_DIR}/firebase/production/${GOOGLESERVICE_INFO_PLIST}\nGOOGLESERVICE_INFO_STAGE=${PROJECT_DIR}/firebase/stage/${GOOGLESERVICE_INFO_PLIST}\nGOOGLESERVICE_INFO_DEBUG=${PROJECT_DIR}/firebase/debug/${GOOGLESERVICE_INFO_PLIST}\n\necho \"CONFIGURATION ${CONFIGURATION}\"\n\nif [[ $CONFIGURATION == \"Release\" && ! -f $GOOGLESERVICE_INFO_PRODUCTION ]]\nthen\n    echo \"Production GoogleService-Info.plist is not found. Please ensure it's in the proper directory.\"\n    exit 1\nfi\n\nif [[ $CONFIGURATION == \"Stage\" && ! -f $GOOGLESERVICE_INFO_STAGE ]]\nthen\n    echo \"Stage GoogleService-Info.plist is not found. Please ensure it's in the proper directory.\"\n    exit 1\nfi\n\nif [[ $CONFIGURATION == \"Debug\" && ! -f $GOOGLESERVICE_INFO_DEBUG ]]\nthen\n    echo \"Debug GoogleService-Info.plist is not found. Please ensure it's in the proper directory.\"\n    exit 1\nfi\n\n# Get a reference to the destination location for the GoogleService-Info.plist\nPLIST_DESTINATION=${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app\n\n# Copy over the prod GoogleService-Info.plist for Release builds\nif [ $CONFIGURATION == \"Release\" ]\nthen\n    echo \"cp ${GOOGLESERVICE_INFO_PRODUCTION} to ${PLIST_DESTINATION}\"\n    cp \"${GOOGLESERVICE_INFO_PRODUCTION}\" \"${PLIST_DESTINATION}\"\nelif [ $CONFIGURATION == \"Stage\" ]\nthen\n    echo \"cp ${GOOGLESERVICE_INFO_STAGE} to ${PLIST_DESTINATION}\"\n    cp \"${GOOGLESERVICE_INFO_STAGE}\" \"${PLIST_DESTINATION}\"\nelse\n    echo \"cp ${GOOGLESERVICE_INFO_DEBUG} to ${PLIST_DESTINATION}\"\n    cp \"${GOOGLESERVICE_INFO_DEBUG}\" \"${PLIST_DESTINATION}\"\nfi\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/217776156"
  },
  {
    "pageContent": "[Firebase] Android 세팅\n * 1. 앱 등록\n   * 1.1 프로젝트 상세 진입\n   * 1.2 앱 등록 페이지 진입\n   * 1.3 메타데이터 입력\n   * 1.4 google-services.json 파일 다운로드\n   * 1.5 등록 완료\n * 2. 프로젝트에 Firebase 구성\n   * 2.1 react-native-firebase/app 패키지 설치\n   * 2.2 google-services.json 구성\n   * 2.3 빌드 설정\n\n\n1. 앱 등록\n\n--------------------------------------------------------------------------------\n\n\n1.1 프로젝트 상세 진입\n\n콘솔에서 프로젝트를 눌러 상세에 진입한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-030535.png?api=v2]\n\n\n1.2 앱 등록 페이지 진입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-051332.png?api=v2]\n\n프로젝트명 아래에 있는 + 버튼을 누르고, Android 선택해서 앱 등록 페이지에 진입한다.\n\n\n1.3 메타데이터 입력\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-111012.png?api=v2]\n\n\n1.4 GOOGLE-SERVICES.JSON 파일 다운로드\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211028-111027.png?api=v2]\n\n\n1.5 등록 완료\n\n나머지 단계는 모두 건너 뛰어서 등록을 완료한다.\n\n\n\n\n2. 프로젝트에 FIREBASE 구성\n\n--------------------------------------------------------------------------------\n\nhttps://rnfirebase.io/ [https://rnfirebase.io/] 문서를 기반으로 한다.필수 설정\n\n\n2.1 REACT-NATIVE-FIREBASE/APP 패키지 설치\n\nnpm install --save @react-native-firebase/app\n\n\n2.2 GOOGLE-SERVICES.JSON 구성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2226290771/image-20211029-022459.png?api=v2]\n\n\n2.3 빌드 설정\n\n/android/build.gradle 의  dependencies 속에 google-services 플러그인 을 추가한다.\n\nbuildscript {\n  dependencies {\n    ...\n    classpath 'com.google.gms:google-services:4.3.10'\n  }\n}\n\n\n\n/android/app/build.gradle 최상단에 플러그인 실행 코드를 추가한다.\n\napply plugin: 'com.android.application'\napply plugin: 'com.google.gms.google-services' // <- 요기\n\n...\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2226290771"
  },
  {
    "pageContent": "[Firebase] Analytics\n\n\n\n * 1. 프로젝트 설정\n   * 1.1 패키지 다운로드\n   * 1.2 Pod install\n * 2. 활동 추적\n   * 2.1 로그인 추적 예시\n   * 2.2 화면 이동 추적 예시\n   * 2.3 사용자 정보 추적 예시\n * DebugView\n   * iOS\n   * Android\n\n\n1. 프로젝트 설정\n\n--------------------------------------------------------------------------------\n\n\n1.1 패키지 다운로드\n\nnpm install @react-native-firebase/analytics\n\n\n1.2 POD INSTALL\n\n\n\n\n2. 활동 추적\n\n--------------------------------------------------------------------------------\n\n사용자 행동을 추적할 수 있는 다양한 메소드들이 존재한다.\nhttps://rnfirebase.io/reference/analytics#methods\n[https://rnfirebase.io/reference/analytics#methods] 참고\n\n\n2.1 로그인 추적 예시\n\nfirebaseAnalytics().logLogin({ method: 'social' });\nfirebaseAnalytics().setUserId(userId);\n\n디바이스에 유저 아이디를 매핑시킬 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-043432.png?api=v2]\n\n\n2.2 화면 이동 추적 예시\n\nfirebaseAnalytics().logScreenView({\n  screen_name: routeName, \n  screen_class: routeName,\n});\n\n화면 호출 횟수를 파악할 수 있고, 이를 통한 퍼널 분석도 가능하다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-043940.png?api=v2]\n\n\n2.3 사용자 정보 추적 예시\n\nfirebaseAnalytics().setUserProperties({ \n    language,\n    timezone,\n}),\n\n사용자 환경을 같이 기록할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-043155.png?api=v2]\n\n\n\n\nDEBUGVIEW\n\nFirebase 콘솔에는 로그를 실시간으로 확인할 수 있는 DebugView 페이지가 존재한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-041835.png?api=v2]\n\n사용 방법을 아래에 간단히 적어놓았지만 궁금하다면\nhttps://firebase.google.com/docs/analytics/debugview#ios\n[https://firebase.google.com/docs/analytics/debugview#ios] 문서를 참고하면 된다.\n\n\nIOS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227634289/image-20211029-042200.png?api=v2]\n\nEdit Scheme 을 누르고, Arguments 탭에서 -FIRDebugEnabled -FIRAnalyticsDebugEnabled 값을\n추가한다.\n\n\nANDROID\n\n아래 명령어를 터미널에 입력한다.\n\n# 예시 adb shell setprop debug.firebase.analytics.app com.ecubelabs.ccnstage\nadb shell setprop debug.firebase.analytics.app {package_name}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227634289"
  },
  {
    "pageContent": "[Firebase]\nCrashlytics[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211029-065100.png?api=v2]\n\nCrashlytics 이용하면 에러와 비정상 종료 상태를 확인할 수 있다.\n\n\n\n * 1. 프로젝트 설정\n   * 1.1 패키지 다운로드\n   * 1.2 빌드 구성\n   * 1.3 Pod install or Gradle sync\n * 2. 에러 관리\n   * 2.1 발생 흐름 추적\n * 3. 테스트\n * 4. 알림\n   * 4.1 이메일\n   * 4.2 기타\n\n\n\n\n1. 프로젝트 설정\n\n--------------------------------------------------------------------------------\n\n\n1.1 패키지 다운로드\n\nnpm install @react-native-firebase/crashlytics\n\n\n\n\n1.2 빌드 구성\n\nAndroid\n\niOS\n\nproject/build.gradle 에 클래스 경로를 지정한다.\n\nbuildscript {\n    dependencies {\n        // ...\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'\n    }\n\n\n /android/app/build.gradle 파일 상단에 플러그인 적용 코드를 추가한다.\n\napply plugin: 'com.android.application'\napply plugin: 'com.google.firebase.firebase-crashlytics'\n\n\nx\n\n\n1.3 POD INSTALL OR GRADLE SYNC\n\n\n\n\n2. 에러 관리\n\n--------------------------------------------------------------------------------\n\n\n2.1 발생 흐름 추적\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211029-095205.png?api=v2]\n\nlog 메서드를 이용하면 에러 발생 흐름을 만들 수 있다.\n\nfirebaseCrashlytics().log(\"test errors log!!!\")\n\ncrash()\n\n\n\n\n3. 테스트\n\n--------------------------------------------------------------------------------\n\nhttps://firebase.google.com/docs/crashlytics/test-implementation?platform=android\n[https://firebase.google.com/docs/crashlytics/test-implementation?platform=android]\n\nAndroid\n\niOS\n\nadb shell setprop log.tag.FirebaseCrashlytics DEBUG\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211029-042200.png?api=v2]\n\nEdit Scheme 을 누르고, Arguments 탭에서 -FIRDebugEnabled -FIRAnalyticsDebugEnabled 값을\n추가한다.\n\n\n4. 알림\n\n--------------------------------------------------------------------------------\n\n\n4.1 이메일\n\nhttps://console.firebase.google.com/subscriptions/overview\n[https://console.firebase.google.com/subscriptions/overview] 에 접속하면 개인 알림 설정이\n가능하다. (프로젝트 확인이 안 된다면 권한 문서 확인\nhttps://support.google.com/firebase/answer/7276542\n[https://support.google.com/firebase/answer/7276542] )\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211102-023920.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211102-024127.png?api=v2]\n\n\n\n\n4.2 기타\n\n슬랙, 지라와 연동이 가능하다. (Project Settings - Integrations 탭에서 설정 가능)\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2227863697/image-20211102-023529.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227863697"
  },
  {
    "pageContent": "[Firebase] Performance\nMonitoring[https://ecubelabs.atlassian.net/wiki/download/attachments/2227830944/image-20211029-064351.png?api=v2]\n\nPerformance Monitoring 이용하면 앱의 네트워크 속도, 렌더링 성능 등을 측정할 수 있다.\n\n\n1. 프로젝트 설정\n\n--------------------------------------------------------------------------------\n\n\n1.1 패키지 다운로드\n\nnpm i @react-native-firebase/perf\n\n\n1.2 빌드 구성\n\nAndroid\n\niOS\n\nproject/build.gradle 에 클래스 경로를 지정한다.\n\nbuildscript {\n    dependencies {\n        // ...\n        classpath 'com.google.firebase:perf-plugin:1.4.0'\n    }\n\n\n /android/app/build.gradle 파일 상단에 플러그인 적용 코드를 추가한다.\n\napply plugin: 'com.android.application'\napply plugin: 'com.google.firebase.firebase-perf'\n\n\nx\n\n\n1.3 POD INSTALL OR GRADLE SYNC\n\n\n2. 커스텀 성능 측정\n\n--------------------------------------------------------------------------------\n\n1번 프로젝트 설정만 하더라도 기본적인 성능 측정은 시작된다. (네트워크 통신, 렌더링 성능)\n\n이 외의 커스텀 메소드( https://rnfirebase.io/reference/perf#methods\n[https://rnfirebase.io/reference/perf#methods] ) 를 활용하면 특정 기능이나 흐름에 대해서도 성능 측정이\n가능하다.\n\nimport perf from '@react-native-firebase/perf';\n\nasync function getRequest(url) {\n  // Define the network metric\n  const metric = await perf().newHttpMetric(url, 'GET');\n\n  // Define meta details\n  metric.putAttribute('user', 'abcd');\n\n  // Start the metric\n  await metric.start();\n\n  // Perform a HTTP request and provide response information\n  const response = await fetch(url);\n  metric.setHttpResponseCode(response.status);\n  metric.setResponseContentType(response.headers.get('Content-Type'));\n  metric.setResponsePayloadSize(response.headers.get('Content-Length'));\n\n  // Stop the metric\n  await metric.stop();\n\n  return response.json();\n}\n\n// Call API\ngetRequest('https://api.com').then(json => {\n  console.log(json);\n});\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2227830944"
  },
  {
    "pageContent": "[Firebase] Jira 통합 설정\n\n\n1. FIREBASE CONSOLE 접속 후 PROJECT SETTINGS 페이지 진입\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-022527.png?api=v2]\n\n\n2. 통합탭에서 JIRA 설치 버튼 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-022544.png?api=v2]\n\n\n3. 프로젝트 구성\n\n\n3.1 프로젝트 URL 입력\n\nhttps://[workspace-name].atlassian.net/projects/[project-key]의 포맷에 workspace 이름과\nproject 키 명칭만 맞춰서 넣으면 된다.\n\n예시: https://ecubelabs.atlassian.net/projects/CCNB\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-024244.png?api=v2]\n\n\n\n\n3.2 JIRA API 토큰 입력 및 인증\n\n이메일에는 이슈를 생성할 계정의 이메일과 API 토큰을 적으면 되는데, 이슈 요청자나\nhttps://ecubelabs.atlassian.net/wiki/spaces/INFRA\n[https://ecubelabs.atlassian.net/wiki/spaces/INFRA] 의 Atlassian Cloud\n[https://ecubelabs.atlassian.net/] 담당자에게 API 토큰을 요청하면 된다.\n\n\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]토큰 발급하는\n방법\n\n토큰은 최초 1회만 보여지기에 잘 복사를 해두는 것이 좋다.\n\nhttps://id.atlassian.com/manage-profile/security/api-tokens\n[https://id.atlassian.com/manage-profile/security/api-tokens] 로 이동해서 API 토큰을\n발급한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023532.png?api=v2]\n\n\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023704.png?api=v2]\n\n\n3.3. CRASHLYTICS 알림 설정\n\n프로덕션앱만 활성화 시키면 될 듯?\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023340.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/2249129989/image-20211117-023359.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2249129989"
  },
  {
    "pageContent": "Pseudolocalization\n\n\n이게 무엇인가?\n\nLocalization을 적용한 앱들을 보면 가끔 특정 언어에서 레이아웃이 무너지는 경우가 발생한다.\n\n이런 문제가 발생하는 이유는 같은 문장이어도 언어마다 길이가 달라지기 때문인데,\n영어와 독일어를 비교하면 일반적으로 독일어가 영어보다 30%정도 더 길다고 한다.\n\nPseudolocalization는 Localization를 적용하는 과정에서 발생하는 이런 문제를 예방하기 위해 사용되는 테스트 방법이다.\n\n\n장점?\n\n * 개발자는 번역 담당자가 번역을 해주기 전에도 Pseudolocalization를 키로 사용하여 미리 작업을 해둘 수 있다.\n\n * 길이가 긴 다른 언어가 있어도 레이아웃이 무너지지 않도록 예방할 수 있다.\n\n * 언어에 따라 번역이 같기도 하고 다르기도 한 경우 Pseudolocalization를 키로 잡으면 된다.\n\n키\n\n영어\n\n한글\n\nÀççôûñţ Šéţţîñĝš\n\nAccount Settings\n\n계정 설정\n\nÀççôûñţ Šeţtîñĝš\n\nAccount Settings\n\n사용자 설정\n\n\n단점?\n\n * Pseudolocalization를 키로 사용하면 직접 입력하기가 너무 힘들다.\n\n * 프로그램의 도움 없이는 Pseudolocalization를 만들기 어렵다.\n\n * 원문이 뭔지 약간 알아보기 어렵다... (아래는 예시)\n   \n   Account Settings => [!!! Àççôûñţ Šéţţîñĝš !!!]\n\n\n참고\n\n * https://docs.lokalise.com/en/articles/2348943-pseudolocalization\n   [https://docs.lokalise.com/en/articles/2348943-pseudolocalization]\n\n * https://en.wikipedia.org/wiki/Pseudolocalization\n   [https://en.wikipedia.org/wiki/Pseudolocalization]\n\n * https://netflixtechblog.com/pseudo-localization-netflix-12fff76fbcbe\n   [https://netflixtechblog.com/pseudo-localization-netflix-12fff76fbcbe]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1702428891"
  },
  {
    "pageContent": "Localization\n\nl10n, 현지화라고 부르기도 한다.\n\n현지화가 제대로 하려면 국제화(Internationalization, i18n)\n[http://www.terms.co.kr/internationalization.htm]가 선행되어야 하며 개발하는 제품이 특정 언어나 문화,\n정서에 맞추는 과정이다.\n완벽하게 현지화가 된 제품은 해당 국가에서 개발된 제품처럼 이질감이 전혀 없다.\n\n\n고려해야 할 주제\n\n현지화를 제대로 하기 위해서는 이 외에도 매우 많은데, 그중 제일 일반적으로 다루는 부분들만 정리했다.\n\n * Translation\n\n * Timezone\n\n * 통화 표기\n   \n   * ex) 미국의 통화(USD)는 소수점 둘째 자리까지 표기하지만 한국의 통화(KRW)는 소수점 표기가 없다.\n   \n   * ICU Message Syntax\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142/ICU+Message+Syntax]\n     > Currency 참고\n\n * 숫자 표기\n   \n   * ICU Message Syntax\n     [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1202094142/ICU+Message+Syntax]\n     > Percentage 참고\n\n * 해당 국가의 휴일\n   \n   * ex) 이번주 수요일은 한글날인데 지라는 평일로 인식해서 스프린트 일수에 포함되는 문제가 있다.\n\n * 서비스 이름\n   \n   * ex) 한국 사람들이 영어 간판만 보다가 인사동에 있는 한글 간판을 보면 좋아한다. (지역/국가 정서 반영)\n     \n     [https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210510-022010.png?api=v2]\n\n * 종교/정서적 문제\n   \n   * 개발자보다 기획자, 마케터, 번역가가 더 잘 알아야 하기 때문에 당장 중요하진 않다\n\n * 아이콘 사용\n   \n   * 특정 국가는 👌 제스쳐가 심한 욕으로 받아들여지므로 제품 내에서는 함부로 이모지/아이콘을 사용하면 안된다.\n     나무위키 참고 [https://namu.wiki/w/OK#s-4]\n\n\n잘못 적용된 예\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210510-020611.png?api=v2]\n\n컨플루언스에서 댓글을 작성하다 취소를 누르면 뜨는 황당한 모달.\n어떤게 댓글 작성을 취소하는 버튼인지 헷갈린다.\n\n물론 아틀라시안은 디자인 가이드를 잘 만든 편이라 주황색 버튼이 내가 목적으로 했던 동작댓글작성 취소을 Confirm해주는 버튼으로 자연스럽게\n인식하는 사람도 더러 있을수 있지만, 이것은 UI/UX가 열일했다고 보는게 맞다.\n이 예시는 현지화가 제대로 되었다고 보기 어렵다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210511-083950.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20210511-084028.png?api=v2][https://ecubelabs.atlassian.net/wiki/download/attachments/1784053767/image-20220120-022246.png?api=v2]\n\n아틀라시안은 한결같이 l10n을 엄청나게 못한다.\n잊을만하면 참신하고 새로운 이상한 번역 메세지를 보여준다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1784053767"
  },
  {
    "pageContent": "[Monorepo] 기본 구성 가이드\n\n\n개발 준비\n\n최신버전의 yarn만 설치되어 있으면 됩니다.\n\nnpm i -g yarn\n\n이미 yarn 2 환경설정된 프로젝트라면 바로 사용이 가능합니다.\n\n--------------------------------------------------------------------------------\n\n\n용어 설명\n\n\nYARN WORKSPACES 용어\n\n * workspace: 작업 공간이라 부르는 한 패키지의 최소 단위라고 보면 된다.\n\n * worktree: 작업 공간을 묶는 패키지들의 최상위 저장소. worktree를 선언해야 yarn workspaces 기능을 사용할 수\n   있다.\n\n--------------------------------------------------------------------------------\n\n\n새 프로젝트 설정\n\n새 프로젝트를 사용하기 위한 기본 설정은 이미 다 되어있다고 가정합니다.\n(프로젝트 폴더 생성 및 npm init 등..)\n\n\n0. YARN 2 설정\n\n모든 도구는 모든 개발자가 똑같은 동작을 보장받기 위해 프로젝트에만 설치하세요. (yarn 1 제외)\n\n * 의존성 관리: yarn 2+\n   \n   * yarn이 가진 workspaces 기능은 의존성을 버그 없이 잘 관리해주고 상당히 편합니다.\n   \n   * # 참고: https://yarnpkg.com/getting-started/install#per-project-install\n     yarn --version # 1.22.0 나와도 정상임\n     cd ~/path/to/project\n     yarn set version berry\n     yarn plugin import workspace-tools\n     yarn --version # 2.* 나와야함\n     git add .\n     git commit -m \"chore: Set to yarn version 2\"\n\n위 절차를 따른다면 특정 프로젝트에서만 yarn 2를 사용할 수 있게 됩니다.\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]기록용\n\n * 모듈 버전 관리 및 배포: yarn 2+\n   \n   * 후보군…\n     \n     * yarn workspaces ← 기능으로 당장은 충분히 커버 가능\n     \n     * https://docs.bit.dev/ [https://docs.bit.dev/] → ??\n     \n     * https://rushjs.io/pages/intro/welcome/\n       [https://rushjs.io/pages/intro/welcome/] → 마소 오피스팀이 개발함. 프로덕션에서 쓰고 있어 기능은\n       부족함 없겠지만 도입에 허들이 좀 있어보임\n     \n     * https://github.com/boltpkg/bolt [https://github.com/boltpkg/bolt] → 순수하게\n       yarn을 기반으로 동작한다고 하니 허들이 매우 낮겠지만 그만큼 기능이 부족할것으로 예상됨\n     \n     * https://bazel.build/ [https://bazel.build/] → 빡셀것같은데..\n     \n     * 이런저런 조사..? [https://github.com/SAP/luigi/issues/1105]\n   \n   * 이 문서 작성 도중 lerna는 사용하지 않기로 결정했습니다.\n     → 관리되지 않고 있음 [https://github.com/lerna/lerna/issues/2703] + yarn 2가 출시한지\n     1년이 넘었는데 lerna 최신버전과 사용할 수 없는 문제\n     [https://github.com/lerna/lerna/issues/2449#issuecomment-799814907]\n     \n     * 일부 유명 레포들은 lerna를 버리고 yarn만 사용하기도 합니다. (ex. babel\n       [https://github.com/babel/babel])\n     \n     * 의존성 관리를 제외하면 나머지 기능은 lerna가 더 강력합니다.\n     \n     * lerna와 yarn은 서로 충돌하지 않고 동작할 수 있도록 개발되어 있어 문제가 되지 않으며, 오히려 같이 사용하는것을\n       권장합니다. (Yarn Workspaces vs Lerna 참고\n       [https://yarnpkg.com/features/workspaces#yarn-workspaces-vs-lerna]) (How\n       does it compare to Lerna? 참고\n       [https://classic.yarnpkg.com/en/docs/workspaces/#toc-how-does-it-compare-to-lerna])\n\n\n1. WORKTREE 선언\n\nyarn workspaces 기능을 사용하기 위해 package.json에 workspaces 프로퍼티를 추가합니다.\n\n{\n  \"workspaces\": [\"packages/*\"]\n}\n\nyarn 2 버전부터 private을 true로 하지 않아도 됩니다.\n버전 1까지는 워크스페이스를 publish하지 않으므로 private 속성을 true로 하는것이 강제되었습니다.\n\n하지만 워크트리의 private을 true로 지정하지 않으면 워크트리 또한 워크스페이스처럼 취급될 수 있습니다.\n\nnode_modules 폴더가 생성되지 않나요?\nyarn에 새로 추가된 pnp 기능을 사용하지 않도록 해야합니다. →\nhttps://yarnpkg.com/configuration/yarnrc#nodeLinker\n[https://yarnpkg.com/configuration/yarnrc#nodeLinker]\n\n\n2. 워크트리에 새 패키지 추가\n\nmkdir packages/new-package\ncd packages/new-package\nyarn init\ncd ../../\n\n\nREFERENCES\n\n * https://classic.yarnpkg.com/en/docs/workspaces/\n   [https://classic.yarnpkg.com/en/docs/workspaces/]\n\n * https://yarnpkg.com/cli/workspace [https://yarnpkg.com/cli/workspace]\n\n * https://blog.heroku.com/building-a-monorepo-with-yarn-2\n   [https://blog.heroku.com/building-a-monorepo-with-yarn-2]\n\n * https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h\n   [https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h]\n\n * https://www.smashingmagazine.com/2019/07/yarn-workspaces-organize-project-codebase-pro/\n   [https://www.smashingmagazine.com/2019/07/yarn-workspaces-organize-project-codebase-pro/]\n\n\n\n\n관련된 글\n\n * [Monorepo] 관리 명령어\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712849032]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712717929"
  },
  {
    "pageContent": "[Monorepo] 관리 명령어\n * yarn berry (yarn 2+)\n   * 워크트리에서 모든 패키지 설치\n   * 워크스페이스에 워크스페이스 링크\n   * 워크스페이스에 워크스페이스 링크 제거\n   * 워크스페이스에 외부 패키지(npm 등) 설치\n   * 모든 워크스페이스에 패키지 설치\n   * 워크스페이스에 외부 패키지(npm 등) 제거\n   * 워크트리에 패키지 설치\n   * 패키지 배포\n * turbo\n   * 특징\n   * 명령어\n * 관련된 글\n\n\n\n--------------------------------------------------------------------------------\n\n\nYARN BERRY (YARN 2+)\n\nnpm을 대신하여 패키지를 관리하기 위해 사용한다.\n공통 모듈은 호이스팅하여 설치할 수 있기 때문에 node_modules를 최대한 가볍게 관리해줄수 있다.\n\n\n워크트리에서 모든 패키지 설치\n\nyarn install\n\nnpm i 하는것과 비슷하지만 워크스페이스에 있는 모듈도 전부 설치해줍니다.\n\n\n워크스페이스에 워크스페이스 링크\n\n원격 레지스트리에 의존하지 않는것을 원하는 경우 사용합니다.\n\n외부 패키지와 동일하게 워크스페이스에 있는 이름을 설치하면 됩니다.\n\nyarn workspace @ceed/ui add @ceed/core\n\n\n\n워크스페이스를 링크했을때 package.json에 나오는 workspace: 는 yarn 2부터 지원되는 프로토콜이며, yarn npm\npublish 스크립트가 실행 될 때 동적으로 바뀝니다.\nhttps://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n[https://yarnpkg.com/features/workspaces#workspace-ranges-workspace]\n(배포하는 패키지의 경우에만 필요하고, 모노레포 안에서 사용할 땐 변환될 필요도 없고 변환되지 않음.)\n\n\n워크스페이스에 워크스페이스 링크 제거\n\nyarn workspace @ceed/ui remove @ceed/core\n\n\n워크스페이스에 외부 패키지(NPM 등) 설치\n\nn개의 워크스페이스 중 일부에만 설치하려면 아래처럼 명령어를 여러번 실행해야 한다.\n\nyarn workspace @ceed/ui add lodash\nyarn workspace @ceed/query add lodash\n\n설치하는 패키지가 이미 다른 패키지에서 사용중이라면 가능한 같은 버전을 명시적으로 설치하세요.\n동일한 패키지를 2개 이상 설치한다면 워크트리에 있는 package.json에 추가하는것을 고려하세요.\n워크트리에 명시된 패키지는 hoisting됩니다.\n\n단, 이미 루트에 있는 package.json에 명시된 패키지라면 해당 버전을 따릅니다. (설치 시 버전을 명시하지 않으면)\n\n\n모든 워크스페이스에 패키지 설치\n\nyarn workspaces foreach add lodash\n\n이렇게 설치하는 경우 설치하는 패키지는 hoisting되어 워크트리의 node_modules에서 관리됩니다.\n\n만약 개발 의존성(devDependencies)을 추가하려는 경우 가능한 워크트리에 추가하세요.\n개발 환경에서 사용되는 패키지의 버전을 통일하도록 도와줍니다.\n\nnpm bash(scripts)에서 사용되는 cli가 아니라면 워크트리에만 추가해도 참조가 가능합니다.\n\n\n워크스페이스에 외부 패키지(NPM 등) 제거\n\nyarn workspace @ceed/ui remove lodash\n\n\n워크트리에 패키지 설치\n\n그냥 workspace 명령어 안쓰고 설치하면 된다.\n\nyarn add lodash\n\n\n패키지 배포\n\nyarn workspaces foreach run build && yarn workspaces foreach npm publish --access public --tolerate-republish\n\n위 스크립트를 워크트리의 package.json에 넣어두면 편하다.\n\n당연히 yarn npm login 을 통해 로그인이 되어 있으면서, 해당 패키지의 publish 권한이 있어야 합니다.\n\n--------------------------------------------------------------------------------\n\n\nTURBO\n\n\n특징\n\n * monorepo의 단점이나 문제점을 상쇄 해준다.\n   \n   * monorepo로 구성하면 장점도 많지만 여러 문제점을 만날 수 있는데, 이러한 문제점을 해결하기 위해 스크립팅/파이프라인을 구성하여\n     사용할 수 있게 해준다.\n   \n   * 각 프로젝트마다 다른 린팅/테스트/빌드 등의 명령어나 관리에 필요한 과정을 turbo.json 및 package.json 파일을 통해\n     일관적으로 관리할 수 있게 도와준다.\n   \n   * Remote cache 기능을 통해 중복되는 과정을 최대한 줄여 최적화 해준다.\n\n * npm/yarn 과 같은 패키지 매니저와 역할이 겹치지 않는다.\n   \n   * 단순히 작업을 제어하고 실행해주는 역할로서 존재하기 때문에 어떠한 간섭도 발생하지 않는다.\n\n * vercel이 인수하고 유지관리를 하고 있기 때문에 Next.js와도 궁합이 나쁘지 않으며 점점 더 좋아질것으로 기대된다.\n\n\n명령어\n\nturbo.json 파일에 있는 내용을 기준으로 명령어 파이프라인이 구성된다.\n\n파이프라인에 없는 경우 turbo cli를 통해 명령어를 실행할 수 없으므로 주의해야 한다.\n\n--------------------------------------------------------------------------------\n\n\n관련된 글\n\n * [Monorepo] 기본 가이드\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712717929]\n\n * https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756771953/Monorepo+Pipeline+Lifecycle\n   [https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756771953/Monorepo+Pipeline+Lifecycle]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1712849032"
  },
  {
    "pageContent": "[Monorepo] 이미 존재하는 프로젝트 병합\n * Regenerate package-lock.json\n * ⭐️ Upgrade modules, Node.js 🔔\n * Merge exists repository\n * Setting eslint, lint-staged\n   * eslint\n   * lint-staged\n * Edit Dockerfile , docker-compose.yml\n   * Dockerfile\n     * for Front-end\n     * for Back-end\n   * docker-compose\n     * docker-compose.yml\n     * Dockerfile.* (for Development dockerfile)\n * Edit GitHub Actions workflow\n * Edit Jenkinsfile for deploy\n * Edit Monorepo pipeline\n * Setting chromatic\n * Move cypress test code & clean up\n\n\n\n--------------------------------------------------------------------------------\n\n\nREGENERATE PACKAGE-LOCK.JSON\n\n재생성하고 빌드, 개발환경 실행, 배포 등 모두 잘 동작해야 현재 명시된 버전 표시자의 최신버전으로도 잘 돌아가는것을 확신할 수 있다.\npackage-lock 파일을 그대로 yarn.lock 파일로 합칠 수 없기 때문에 모노레포로 합치면서 최신버전을 사용하면 문제가 발생하는\n경우가 잦다.\n\n이 과정을 먼저 진행해서 동작을 확인한 뒤 아래 작업을 따르는것이 좋다.\n\n\n⭐️ UPGRADE MODULES, NODE.JS 🔔\n\n주로 개발 도구들이나 의존하는 패키지가 많은 핵심 도구들의 버전이 다르면 다른 버전의 타입이나 잘못된 버전의 패키지를 참조하기 때문에 정신건강에\n매우매우 좋지 않다. 🫠\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]여담\n\nYarn PnP 기능을 이용하면 이 문제가 상당히 개선될 수 있지만 ghost dependency가 있는 패키지를 사용하는 경우 직접 정리해줘야\n하고, 예전 버전의 개발 도구들을 사용하는 프로젝트의 경우 PnP를 지원하지 않는게 대부분이라 패키지를 업그레이드 해야하는건 매한가지다…\n\n아래 패키지 외에도 Major 버전이 다른 패키지끼리는 언제든지 문제가 발생할 수 있으므로 가능한 버전을 맞춰주는게 좋다.\n심한 경우 Minor or Patch 버전이 달라졌다고 동작하지 않는 경우도 있다.\n\n아래 도구는 무조건 모노레포에 합칠 앱들과 맞춰야 한다.\n그렇지 않으면 지옥이 펼쳐진다.\n\nMonorepo의 yarn.lock 파일에 명시된 패키지 버전에 호환된다면 그대로 옮겨도 된다.\n그렇지 않다면 다른 버전의 패키지가 설치돼서 다른 어플리케이션에 영향을 미칠수도 있다.\n\n * Node.js\n   \n   * 가장 먼저 업그레이드 해서 아무것도 안바꿨는데도 에러가 나지는 않는지 확인해야 한다.\n\n * TypeScript\n\n * react, @types/react\n\n * react-dom, @types/react-dom\n\n * jest, ts-jest, @types/jest\n\n * @storybook/*\n\n * webpack, webpack plugins…\n\n * eslint, eslint plugins\n\n\nMERGE EXISTS REPOSITORY\n\n 1. Add remote to Monorepo\n    \n    1. cd ~/Projects/haulla\n    \n    2. git remote add ha git@github.com:Ecube-Labs/hubspot-adapter.git\n\n 2. (Optional) Remove submodule from Monorepo\n    \n    1. git rm -f apps/hubspot-adapter\n    \n    2. git gc\n\n 3. ⚠️ Important ⚠️ Before following the next steps, ensure your Monorepo has no\n    Git changes.\n\n 4. Merge with history into Monorepo\n    \n    1. git fetch --all\n    \n    2. git merge -s ours --no-commit --allow-unrelated-histories ha/main\n    \n    3. git read-tree --prefix=apps/hubspot-adapter -u ha/main\n    \n    4. git commit -m \"some commit message\"\n\n 5. Include in workspace\n    \n    1. Delete package-lock.json, .nvmrc , .huskyrc .dockerignore in your app\n    \n    2. Edit package.json\n       \n       ...\n         \"workspaces\": [\n           \"packages/*\",\n           \"apps/generator-front\",\n           \"apps/hauler-front\",\n       +   \"apps/hubspot-adapter\"\n         ],\n    \n    3. Update yarn.lock file\n       yarn install\n\n 6. Remove remote\n    \n    1. git remote remove ha\n\n 7. Run\n    \n    1. yarn turbo lint --filter=<workspace-name>\n    \n    2. yarn turbo test --filter=<workspace-name>\n    \n    3. yarn turbo build --filter=<workspace-name>\n    \n    4. yarn turbo start --filter=<workspace-name>\n    \n    5. yarn turbo build-storybook --filter=<workspace-name>\n    \n    6. yarn turbo storybook --filter=<workspace-name>\n\n\nSETTING ESLINT, LINT-STAGED\n\n\nESLINT\n\nTODO\n\n\nLINT-STAGED\n\n{\n  \"**/*.{js,ts,jsx,tsx}\": [\"eslint --fix\", \"jest --bail --findRelatedTests\"]\n}\n\n\nEDIT DOCKERFILE , DOCKER-COMPOSE.YML\n\n\nDOCKERFILE\n\n\nFOR FRONT-END\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Monorepo\nDockerfile Template (Front-end)\n\n# NOTE: Build context must be specified as the root path.\n#######################\n## 1. Prune packages ##\n#######################\nFROM node:18-alpine AS builder\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN yarn global add turbo\nCOPY . .\nRUN turbo prune --scope=<package-name> --docker\n\n#################################\n## 2. Packages install & Build ##\n#################################\nFROM node:18-alpine AS installer\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN corepack enable\nRUN corepack prepare yarn@3.5.1 --activate\n\n# First install the dependencies (as they change less often)\n# COPY .gitignore .gitignore\nCOPY ./.yarn/ ./.yarn\nCOPY ./.yarnrc.yml .\nCOPY --from=builder /app/out/json/ .\nCOPY --from=builder /app/out/yarn.lock ./yarn.lock\nRUN yarn install\n\n# Build the project\nARG NODE_ENV\n# ARG HAULLA_API_HOST # FIXME: Example\n# ARG GOOGLE_MAP_API_KEY\n# ARG ENABLED_MENUS\n\nCOPY --from=builder /app/out/full/ .\nRUN yarn turbo run build --filter=<package-name>\n\n############\n## 3. Run ##\n############\nFROM nginx:1.18-alpine\n\nCOPY ./apps/<package-name>/nginx/default.conf /etc/nginx/conf.d/default.conf\n\nCOPY --from=installer /app/apps/<package-name>/dist /usr/share/nginx/html\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n\n\n\n\nFOR BACK-END\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]Monorepo\nDockerfile Template (Back-end)\n\n# NOTE: Build context must be specified as the root path.\n#######################\n## 1. Prune packages ##\n#######################\nFROM node:18-alpine AS builder\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN yarn global add turbo\nCOPY . .\nRUN turbo prune --scope=<package-name> --docker\n\n#######################################\n## 2. Packages install & Build & Run ##\n#######################################\nFROM node:18-alpine AS installer\nRUN apk add --no-cache libc6-compat\nRUN apk update\nWORKDIR /app\n\nRUN corepack enable\nRUN corepack prepare yarn@3.5.1 --activate\n\n# First install the dependencies (as they change less often)\nCOPY ./.yarn/ ./.yarn\nCOPY ./.yarnrc.yml .\nCOPY --from=builder /app/out/json/ .\nCOPY --from=builder /app/out/yarn.lock ./yarn.lock\nRUN yarn install\n\n# Build the project\nARG NODE_ENV\n# ARG COMMIT_HASH # FIXME: Example\n\nCOPY --from=builder /app/out/full/ .\nRUN yarn turbo run build --filter=<package-name>\n\nCMD [\"yarn\", \"workspace\", \"<package-name>\", \"start\"]\n\n\nnode 이미지는 https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md\n[https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md] 를 따라\nnode로 실행\n\n\nDOCKER-COMPOSE\n\n\nDOCKER-COMPOSE.YML\n\n    build:\n-     context: ./hubspot-adapter\n+     context: ./\n-     dockerfile: ../Dockerfile.hsa\n+     dockerfile: Dockerfile.hsa\n\n\n\n\nDOCKERFILE.* (FOR DEVELOPMENT DOCKERFILE)\n\nFROM node:18-alpine\n\nWORKDIR /hubspot-adapter\n\nCOPY package.json \\\n    yarn.lock \\\n    turbo.json \\\n    .yarnrc.yml \\\n    ./\nCOPY .yarn ./.yarn\nCOPY packages ./packages\nCOPY apps/hubspot-adapter ./apps/hubspot-adapter\n\nRUN yarn install\n\nCMD [\"yarn\", \"turbo\", \"start:dev\", \"--filter=hubspot-adapter\"]\n\n\nEDIT GITHUB ACTIONS WORKFLOW\n\nTODO…\n\n\nEDIT JENKINSFILE FOR DEPLOY\n\n * https://github.com/Ecube-Labs/haulla/commit/e2206a3bc7f236bb58c5beb2373cc2b4f81917de\n   [https://github.com/Ecube-Labs/haulla/commit/e2206a3bc7f236bb58c5beb2373cc2b4f81917de]\n   \n   * // Jenkinsfile\n     ...\n                 if (!prevCommitHash || isChange(prevCommitHash, \"hubspot-adapter\")) {\n                     echo \"Queuing hubspot-adapter\"\n                     buildStages[\"hubspot-adapter\"] = {\n                         stage(\"hubspot-adapter\") {\n                             build job: env.PIPELINE_NAME_HUBSPOT_ADAPTER, wait: false\n                         }\n                     }\n                 }\n\n * Specify the Dockerfile path\n   \n   * // apps/hubspot-adapter/Jenkinsfile\n     ...\n     - dockerBuild(imageName, env.IMAGE_TAG, \"--build-arg NODE_ENV=${env.NODE_ENV} --build-arg COMMIT_HASH=${commitHash} .\")\n     + dockerBuild(imageName, env.IMAGE_TAG, \"-f 'apps/hubspot-adapter/Dockerfile' --build-arg NODE_ENV=${env.NODE_ENV} --build-arg COMMIT_HASH=${commitHash} .\")\n\n\nEDIT MONOREPO PIPELINE\n\n인프라 관리자에게 문의…\n\n 1. Add new config to monorepo pipeline\n    \n    https://github.com/Ecube-Labs/infrastructure/pull/708\n    [https://github.com/Ecube-Labs/infrastructure/pull/708]\n\n 2. Remove app’s pipeline trigger\n    https://github.com/Ecube-Labs/infrastructure/pull/708\n    [https://github.com/Ecube-Labs/infrastructure/pull/708]\n\n 3. Change app’s pipeline repository\n    \n    1. https://github.com/Ecube-Labs/infrastructure/pull/709\n       [https://github.com/Ecube-Labs/infrastructure/pull/709]\n\n\nSETTING CHROMATIC\n\n프론트 앱만\n\n\nMOVE CYPRESS TEST CODE & CLEAN UP\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2686943559"
  },
  {
    "pageContent": "[Monorepo] \bPipeline / Lifecycle 관리\n\n\n모노레포 전환 후 문제점\n\n * 내부 모듈 참조\n   \n   * 앱을 빌드할 때 의존하는 내부 패키지가 빌드되어 있지 않은 경우 에러가 발생한다.\n\n\n개선 방안\n\n * turbo의 turbo.json 필요한 파이프라인을 실행하기 전에 의존하는 패키지의 특정 명령어를 실행하도록 라이프사이클을 구성한다.\n\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"pipeline\": {\n    \"start\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"start:dev\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"dist/**\"]\n    },\n    \"lint\": {},\n    \"test\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"storybook\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"build-storybook\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"storybook-static/**\"]\n    }\n  }\n}\n\n\n주의사항\n\n * 앞으로 개발시 명령어는 turbo로 실행해야 한다.\n   \n   * yarn turbo run lint --filter=haulla-hauler-front\n     yarn turbo run test --filter=haulla-generator-front\n     yarn turbo run build --filter=haulla-generator-front\n\n * 무지성으로 파이프라인을 추가하거나 라이프사이클을 수정하면 여러 어플리케이션에 영향을 미치므로 주의해야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2756771953/g.svg?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756771953"
  },
  {
    "pageContent": "[Monorepo] Tools\n\n모노레포는 모놀리식처럼 동작하지 않지만 모놀리식처럼 덩치가 크기 때문에 멀티레포처럼 단순하게 관리하면 여러 작업을 수행하는 속도가 느려진다.\n쾌적한 모노레포의 관리 및 개선을 위해 사용되는 도구나 기술을 정리한다.\n\n\nHUSKY [https://github.com/typicode/husky]\n\n * AS-IS\n   \n   * git hook을 쉽게 관리하기 위해 만들어진 husky는 하나의 Git repo에 하나의 구성만 정상적으로 동작한다.\n     git이 자체적으로 지원하는 hook을 기반으로 단순하게 동작하기 때문에 당연하다.\n   \n   * 그러므로 모노레포의 각 워크스페이스별로 git hook을 다르게 설정하는것이 불가능하다.\n\n * TO-BE\n   \n   * husky는 모노레포 루트에만 구성하고 아래의 lint-staged와 결합하여 사용한다.\n   \n   * 이러한 조합은 모노레포가 아니어도 husky에 의해 둔해지는 작업 속도를 높이는데 기여할 수 있다.\n\n\nLINT-STAGED [https://github.com/okonet/lint-staged]\n\n * Git stage에 있는 파일들을 인수로 받아 스크립트로 실행할 수 있게 돕는 cli다.\n\n * husky를 이용해 pre-commit hook에서 lint-staged로 각 워크스페이스에 설정된 eslint, jest를 실행하도록\n   구성 할 수 있다.\n\n\nJEST --FINDRELATEDTESTS\n\n * AS-IS\n   \n   * jest는 인수로 받은 glob에 해당하는 파일을 의존하는 테스트코드의 테스트를 수행할 수 있지만 해당 파일을 직접적으로 의존하는\n     테스트코드만 수행하고, 이 외에 영향을 미치게 되는 코드들의 테스트를 수행하지는 않는다.\n   \n   * 위와 같이 검사하면 a.ts를 의존하는 b.ts 가 있을때, a.ts를 수정한 경우 a.test.ts 만 테스트 코드를 수행하고\n     b.test.ts를 수행하지 않아 b.ts 가 정상적으로 동작하는지 확인하지 못한다.\n\n * TO-BE\n   \n   * lint-staged와 --findRelatedTests 플래그를 이용해 해당 테스트 파일의 의존성을 검사해 연관된 테스트 코드까지\n     포함하여 테스트를 수행한다.\n   \n   * https://thesametech.com/under-the-hood-jest-related-tests/\n     [https://thesametech.com/under-the-hood-jest-related-tests/]\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2756804811"
  },
  {
    "pageContent": "Jest\n\n\n\n * Mock Functions\n   * mockReturnValue / mockReturnValueOnce\n   * mockImplementation / mockImplementationOnce\n\n\n\n\n\n\njest mocking에 관하여\n\nhttps://medium.com/@rickhanlonii/understanding-jest-mocks-f0046c68e53c\n[https://medium.com/@rickhanlonii/understanding-jest-mocks-f0046c68e53c]\n\n\n\n\n\nMOCK FUNCTIONS [https://jestjs.io/docs/en/mock-function-api.html]\n\n * mockReturnValue 는 mockReturnValueOnce 와 함께 사용한다.\n * mockImplementation 는 mockImplementationOnce 와 함께 사용한다.\n * 관련 이슈 [https://github.com/facebook/jest/issues/4474]\n   * TL;DR\n   * mockReturn 과 mockImplementation 을 섞어서 사용하면 제대로 동작 안한다.\n\n\nMOCKRETURNVALUE / MOCKRETURNVALUEONCE\n\n함수의 반환값을 단순히 mocking 하고 싶을때 사용하면 된다.\n\nconst f = jest.fn();\n\nf.mockReturnValue(1);\nf.mockReturnValueOnce(2);\n\nexpect(f()).toBe(2); // pass\nexpect(f()).toBe(1); // pass\n\n\nMOCKIMPLEMENTATION / MOCKIMPLEMENTATIONONCE\n\n함수의 구현체를 mocking 하고 싶을때 사용하면 된다.\n\nconst x = 5;\n\nconst f = jest.fn();\n\nf.mockImplementation(() => x + 1);\nf.mockImplementationOnce(() => x + 2);\n\nexpect(f()).toBe(7);\nexpect(f()).toBe(6);",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/51806209"
  },
  {
    "pageContent": "[B] 테스트\n * 파일명은 *.test.ts\n\n\n파일명은 *.TEST.TS\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2478997578/image-20220715-070927.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2478997578"
  },
  {
    "pageContent": "Jest error - Warning: React.createElement: type is invalid\n\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\n\nCheck the render method of `ServiceDetailScreen`.\n    in ServiceDetailScreen (created by ConnectFunction)\n    in ConnectFunction\n    in Provider\n\n\n\n\n\n\n\n\nCASES\n\n \n\n\nCASE 1\n\nMP 모바일에서는\n\n * BaseScreen.Header actions에 넘길때 Icon도 같이 넘기는데 Icon 문제였다.\n\n * 해당문제가 발생해도 테스트 코드는 실패하지 않는다. ( 무시해도 된다. )\n\nimport MoreIcon from 'app/../assets/img/ic_more_horiz.svg';\n\nactions={[\n            new MainTopBarAction({\n              icon: <MoreIcon />,\n              // onClick: () => {\n              //   const onClickButtonMore = this.props.navigation.getParam('onClickButtonMore');\n              //   onClickButtonMore();\n              // },\n            }),\n          ]}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/242876442"
  },
  {
    "pageContent": "Jest error - TypeError: Super expression must either be null or a function\n\n\n\nTypeError: Super expression must either be null or a function\n...\n...\n...\n\n  at _inherits (node_modules/@babel/runtime/helpers/inherits.js:5:11)\n  at src/app/screens/generator/service-detail/ServiceDetailScreen/ServiceDetailScreen.tsx:98:26\n  at Object.<anonymous> (src/app/screens/generator/service-detail/ServiceDetailScreen/ServiceDetailScreen.tsx:452:2)\n  at Object.<anonymous> (src/app/screens/generator/service-detail/ServiceDetailScreen/ServiceDetailScreen.spec.tsx:10:1)\n\n\n\n\n\n\n\n\nCASES\n\n \n\n\nCASE 1\n\n// jest.mock('app/components/BaseScreen', () => 'BaseScreen'); // X\n\n\n\nBaseScreen를 mock 처리 해버려서 생긴문제... ( header, body 등이 있으니…)\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/242941993"
  },
  {
    "pageContent": "Jest error - Invariant Violation: Element type is invalid: expected a string\n(for built-in components) or a class/function\n\n\n\n Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named \nimports.\n\n    Check the render method of `ServiceDetailScreen`.\n\n      at invariant (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:55:15)\n      at createFiberFromTypeAndProps (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2056:11)\n      at createFiberFromElement (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2077:15)\n      at reconcileSingleElement (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:4629:23)\n      at reconcileChildFibers (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:4686:35)\n      at reconcileChildren (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6500:28)\n      at updateHostComponent (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6961:3)\n      at beginWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:7747:14)\n      at performUnitOfWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11413:12)\n      at workLoop (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11445:24)\n\n  console.error node_modules/react/cjs/react.development.js:188\n    Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and nam\ned imports.\n    \n    Check the render method of `ServiceDetailScreen`.\n        in ServiceDetailScreen (created by ConnectFunction)\n        in ConnectFunction\n\n\n\n\n\n * 모듈중에서 destructuring 해서 가져오고 있다면 전체를 mock하기 바란다. (에러표시가 제대로 안된다.)\n\n예)\n\nimport\n\nimport { TabBar, TabView } from 'react-native-tab-view';\n\nmock\n\njest.mock('react-native-tab-view', () => ({\n  TabView: 'TabView',\n  TabBar: 'TabBar',\n}));\n\n\n\n\nCASES\n\n\n\n\nCASE 1\n\n원인: TabView 컴포넌트\n\n * ServiceDetailScreen → TabView 컴포넌트 때문에 발생한다.\n\n수정:\n\njest.mock('react-native-tab-view', () => ({\n  TabView: 'TabView',\n  TabBar: 'TabBar',\n}));\n\n\n\n\nCASE 2\n\n원인: LoadableContainer 컴포넌트\n\n * LoadableContainer export 방식때문에 발생.\n\n * default가 아닌 export *로 내보내기 때문에 발생\n   \n   * class는 default로 보내는게 일반적이다.\n   \n   * default를 하면 import 하는 쪽에서 변경이 안되는 문제가 있어서 ecube에서는 안쓰는 쪽으로 가고있다.\n\n수정:\n\njest.mock('app/components/LoadableContainer', () => 'LoadableContainer'); // X\n\njest.mock('app/components/LoadableContainer', () => ({\n  LoadableContainer: 'LoadableContainer',\n})); // O\n\n\n\n\n\nCASE 3\n\n\n\njest.mock('react-native', () => ({\n  TouchableOpacity: 'TouchableOpacity',\n}));\n\n\n\njest.mock('app/components/KeyboardAccessorySubmitButton/KeyboardAccessorySubmitButton', () => ({\n  KeyboardAccessorySubmitButton: 'KeyboardAccessorySubmitButton',\n}));\n\n\n\n\n\nCASE 4\n\n원인: MainTopBar or MainTopBar assets mocking 필요.\n\n로그\n\nInvariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.\n\nCheck the render method of `MainTopBar`.\n\n해결책\n\njest.mock('app/components/MainTopBar', () => ({\n  MainTopBar: 'MainTopBar',\n  MainTopBarAction: jest.fn().mockReturnValue({}),\n}));\n\nor\n\nMainTopBar 버튼 테스트 필요한 케이스 아래 방법을 사용.\n\njest.mock('assets/img/ic_navigation_back.svg', () => 'NavigationBackIcon');\n\njest.mock('assets/img/ic_close_line.svg', () => 'CloseLineIcon');\n\njest.mock('@ceeds', () => ({\n  Divider: 'Divider',\n  ...\n});",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/243073056"
  },
  {
    "pageContent": "Jest error - ReferenceError: React is not defined\n\n  console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9215\n    The above error occurred in the <MyServiceScreen> component:\n        in MyServiceScreen (created by ConnectFunction)\n        in ConnectFunction\n        in Provider\n    \n    Consider adding an error boundary to your tree to customize error handling behavior.\n    Visit https://fb.me/react-error-boundaries to learn more about error boundaries.\n\n\nReferenceError: React is not defined\n\n    at MyServiceScreen.render (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/src/app/screens/generator/my-service/MyServiceScreen/MyServiceScreen.tsx:206:5)\n    at finishClassComponent (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6839:31)\n    at updateClassComponent (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:6794:24)\n    at beginWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:7742:16)\n    at performUnitOfWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11413:12)\n    at workLoop (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11445:24)\n    at renderRoot (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:11528:7)\n    at performWorkOnRoot (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:12416:7)\n    at performWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:12328:7)\n    at performSyncWork (/Users/gangjuyeong/Desktop/workspace/project/haulla/haulla-mobile/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:12302:3)\n\n\n\nCASE 1\n\n원인: 정확한 원인은 모르겠으나 react를 default 임포트로 읽어오면 발생한다.\n\n\n해결\n\n\nBEFORE:\n\nimport React from 'react';\n\n\nAFTER:\n\nimport * as React from 'react';\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/253198541"
  },
  {
    "pageContent": "Jest 최적화\n\nhttps://dev.to/vantanev/make-your-jest-tests-up-to-20-faster-by-changing-a-single-setting-i36\n[https://dev.to/vantanev/make-your-jest-tests-up-to-20-faster-by-changing-a-single-setting-i36]\n\nArticle TL;DR\n\n * \"test\": \"jest --maxWorkers=50%\",\n\n * \"test:ci\": \"jest --runInBand\",\n\nIn practice in Ecube-Labs\n\n * jest --maxWorkers=50% 옵션은 아이맥에서 별다른 성능 차이를 보이지 않았다\n\n * 테스트가 적은 건 잘 모르겠고 haulla-api 의 경우 runInBand 옵션이 없으면 테스트 돌다가 죽어버린다\n   \n   * 2, 3 은 runInBand 옵션 없이 죽은 경우\n   \n   * 4 는 runInBand 로 실행 됨\n     \n     * TODO\n       \n       * runInBand 가 없을때 thread 를 10개 정도 만들던데 runInBand 말고 worker thread 를 적당히\n         제한해도 될 듯…\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2767159415/image-20230731-085217.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2767159415"
  },
  {
    "pageContent": "[OAuth2] GCP OAuth2 Client 연동\n\n상위 페이지에 명시된 OAuth 2.0에 대한 내용을 숙지해야 한다.\n\nGoogle API를 사용하기 위해서는 GCP 콘솔에서 OAuth 2 client를 생성\n[https://developers.google.com/workspace/guides/create-credentials]해야 하는데, 유의할\n점이 있다.\n\n\nREFRESH TOKEN은 첫 인증(권한 승인)시에만 준다.\n\nOAuth 2에서의 Refresh token은 Access token의 만료 기한과 상관 없이 언제든 새 Access token을 발급할 수\n있는 마스터키와 같은 존재다.\n\n만약 과거에 인증을 해서 Refresh token을 알 수 없다면 인증을 했던 google 계정 설정의 permissions 페이지로 이동해서\n인증 했던 앱을 사용 중지한 뒤, 다시 권한 허용을 해야한다.\n\n이렇게 받아온 토큰 데이터는 잘 보관해둬야 나중에 언제든지 새로운 액세스 토큰을 발급할 수 있다.\n\nERP는 아주 오래 전부터 이렇게 구현하여 사용하고 있다.\nhttps://github.com/Ecube-Labs/erp-api/pull/305#discussion_r646221688\n[https://github.com/Ecube-Labs/erp-api/pull/305#discussion_r646221688]\n\n구글은 첫 인증 데이터를 파일로 저장하는 코드를 가이드로 제공하고 있다. →\nhttps://developers.google.com/calendar/quickstart/nodejs\n[https://developers.google.com/calendar/quickstart/nodejs]\n굳이 가이드를 따르지 않고 하드코딩을 해도 상관 없다.\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1891172498"
  },
  {
    "pageContent": "[통합 개발 가이드] ecubelabs\n\n\nROUTING\n\n[/wiki/download/attachments/1913913505/ccn-router.drawio.png?api=v2]\n\n아래에는 라우트와 관련된 설명이며, 각 프로젝트에 대한 설명은 소프트웨어\n[https://ecubelabs.atlassian.net/wiki/spaces/CW/pages/119406640] 참고\n\n * CCN Router\n   \n   * 요청이 들어올 경우 정해진 경로\n     [https://github.com/Ecube-Labs/ecubelabs/blob/main/ccn-router/nginx.conf]에\n     따라 위 다이어그램과 같이 셋 중 하나로 전달\n   \n   * 실제 운영 환경과 동일하게 프록시 하도록 구현된 웹서버\n\n * CCN Current\n   \n   * 아래 모든 경우에 해당하지 않는 경우 해당 서버로 연결됨\n\n * CCN Front\n   \n   * 경로가 /v2로 시작하는 경우 연결됨\n\n * CCNx Front\n   \n   * 경로가 /v3로 시작하는 경우 연결됨\n\nCCN Current, CCNx Front 간 경로 차이는 /, /v3 차이 외에도 존재하는 경우가 있으므로 정확한 경로를 확인하기 위해서는\n라우트를 하고 있는 소스 코드를 참고해야 합니다.\n\n\nERP 제품 등록 및 CCN 업로드\n\n * ea, em, cb, iot 서비스가 켜져있어야 한다.\n   \n   * 제품 등록시 iot를 통해 device id를 생성하기 때문이다.\n\n * 절차\n   \n   1. ERP(http://localhost:9000 [http://localhost:9000])로 들어간다.\n   \n   2. 유심을 생성한다. Upload USIMs 기능을 이용하면 개발 환경에서 사용할 유심을 편하게 만들수 있다.\n      \n      [https://ecubelabs.atlassian.net/wiki/download/attachments/1913913505/image-20210611-071534.png?api=v2]\n   \n   3. 원하는 타입의 Product를 생성한다.\n   \n   4. 생성한 Product에 Device DB ID가 지정되어있는지 확인한다.\n      (만약 비어있다면 iot가 꺼져있거나 버그가 있는것이다.)\n   \n   5. 생성한 Product를 목록에서 체크해서 CCN Upload 버튼을 누른다.\n   \n   6. 제품 정보에 CCN DB ID가 채워져 있다면 업로드가 정상적으로 된것이다.\n      (만약 에러가 났다면 cb가 꺼져있거나 버그가 있는것이다.)\n\n\n통신 테스트\n\n위에 설명된 ERP 제품 등록 가이드를 따라 정상적인 제품을 등록을 먼저 해야한다.\n\n * ea, em, cb, iot, is 서비스가 켜져있어야 한다.\n\n * 절차\n   \n   * 원하는 제품의 UsimID, Device DB ID를 확인하고 기억해둔다.\n   \n   * 시뮬레이터(http://localhost:9090 [http://localhost:9090])로 들어간다.\n   \n   * 통신을 테스트 할 제품 유형에 맞는 페이지로 이동해서 USIM ID 또는 DEVICE DB ID를 입력한다.\n   \n   * 원하는 값을 입력해서 테스트한다.\n\n * 통신 테스트는 identifier(Device DB ID or UsimID) 외에 특정 값이 비어있다고 실패하면 문제가 있는것이다.\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/1913913505"
  },
  {
    "pageContent": "Google Tag Manager\n * 마케팅/트래킹 스크립트 주입\n   * 1. Tags > New\n   * 2. Tag Configuration\n   * 3. Trigger\n   * 4. Submit\n   * 5. 스크립트 실제로 주입 되었는지 사이트에서 확인\n\n\n마케팅/트래킹 스크립트 주입\n\n\n1. TAGS > NEW\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095105.png?api=v2]\n\n\n2. TAG CONFIGURATION\n\nCustom HTML 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095153.png?api=v2]\n\n\n\nHTML 영역에 스크립트 추가\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095256.png?api=v2]\n\n\n3. TRIGGER\n\nAll Pages 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095406.png?api=v2]\n\n\n\n태그 이름은 봤을 때 뭐하는 태그인지 파악하기 쉽도록 작성한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095613.png?api=v2]\n\n\n4. SUBMIT\n\n우측 상단 Submit 버튼\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095733.png?api=v2]\n\n작업 내용 작성하고 Publish\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2604892470/image-20221222-095914.png?api=v2]\n\n\n5. 스크립트 실제로 주입 되었는지 사이트에서 확인",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2604892470"
  },
  {
    "pageContent": "Google Analytics\n\nGA 가 포함된 웹사이트에 utm parameter 를 query string 으로 달고 들어가기만 하면 됨\n\nhttps://github.com/Ecube-Labs/haulla/blob/811022572c062c9b28ac904c035ef8a14ab86d99/apps/core-api/src/services/verifications/application/service.ts#L134\n[https://github.com/Ecube-Labs/haulla/blob/811022572c062c9b28ac904c035ef8a14ab86d99/apps/core-api/src/services/verifications/application/service.ts#L134]\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2817098063/image-20231017-072407.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2817098063"
  },
  {
    "pageContent": "GTM 트리거 생성\n방법[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-082443.png?api=v2]\n\nhttp://www.haulla.com/support [http://www.haulla.com/support] 에서\nClick Here to start a chat 버튼 클릭 시 동작하는 트리거를 만든다는 가정 하에 작성하였습니다.\n\n\n\n트리거는 웹페이지 또는 모바일 앱에서 양식 제출, 버튼 클릭, 페이지뷰와 같은 특정 유형의 이벤트를 수신합니다. 해당 유형의 이벤트가 감지되면\n트리거가 태그를 실행하도록 알려 줍니다.\n\n\n1. 트리거 새로 생성\n\n구글 태그 관리자에서 트리거 → 새로 만들기 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-082936.png?api=v2]\n\n\n2. 트리거 유형 선택\n\n트리거 이름을 지정한 후 트리거 유형 선택 클릭\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-083155.png?api=v2]\n\n버튼 ‘클릭’ 시 동작하는 트리거를 생성해야 하므로\n클릭 -> 모든 요소 선택\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-083440.png?api=v2]\n\n이 외에도 다른 유형을 선택하면 주어진 상황에 맞는 트리거를 만들 수 있다.\n(트리거 유형 [https://support.google.com/tagmanager/topic/7679108])\n\n\n3. 트리거 조건 설정\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-085504.png?api=v2]\n\n위와 같은 상태에서는 사이트의 화면 아무데나 클릭해도 트리거가 동작한다.\n요구사항은 특정 URL에서 특정 텍스트를 포함한 버튼을 클릭했을때 동작하는 것이므로\n다음과 같이 설정할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20221004-004552.png?api=v2]\n\n\n\n이 외에도 조건을 추가해서 상황에 맞는 트리거 조건을 설정할 수 있다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20220930-090244.png?api=v2]\n\n사이트 안에 있는 어떤 요소(ex. <button 속성=값>) 를 찾아서 해당 요소의 속성 값이 특정 조건을 만족할 때 라는 트리거 조건을\n설정하고 싶다면 Click Classes, Click Element 같은 기본 제공 변수\n[https://support.google.com/tagmanager/answer/7182738?hl=ko&ref_topic=7182737] 을\n적절히 사용하면 된다.\n필요하다면 사용자 정의 변수 [https://support.google.com/tagmanager/answer/7683362?hl=ko]를 직접\n만들어서 원하는 값을 추적하는 것도 가능하다.\n\n\n4. 태그에 트리거 연결\n\n위에서 생성한 트리거를 태그에 연결\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2551153097/image-20221004-010532.png?api=v2]\n\n\n5. 잘 동작하는지 확인\n\nhttps://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2510520345/GTM#1.-Tag-Assistant%5BhardBreak%5D\n[https://ecubelabs.atlassian.net/wiki/spaces/WIKI/pages/2510520345/GTM#1.-Tag-Assistant%5BhardBreak%5D]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2551153097"
  },
  {
    "pageContent": "GTM 링크 클릭\n트리거[https://ecubelabs.atlassian.net/wiki/download/attachments/2614951990/image-20230106-063443.png?api=v2]\n\n\n\n링크(<a/>)를 클릭했을 때 트리거가 동작하도록 만들려면 Just Links 로 만들면 된다.\n\n어떤 링크를 클릭했을 때 트리거가 동작할지도 지정할 수 있다.\n\n\n\nex)\n\n<Stack\n  direction=\"row\"\n  spacing={2}\n  component={Link}\n  href=\"/for-businesses/services\"\n>\n  <Typography variant=\"subtitle2\" css={{ display: 'flex', alignItems: 'center' }}>\n    LEARN MORE\n  </Typography>\n  <ArrowForward fontSize=\"small\" />\n</Stack>\n\n위와 같이 링크를 퍼블리싱 했을때 링크 클릭 트리거가 동작하게 하고 싶으면 다음과 같이 하면 된다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2614951990/image-20230106-064145.png?api=v2]\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2614951990"
  },
  {
    "pageContent": "GTM 폼 제출 트리거\n * 1. Form id 확인\n * 2. Form Submission 트리거 생성\n   * 2.1. 트리거가 동작하지 않는 경우\n\n\n1. FORM ID 확인\n\nform 에 id 가 없으면 개발자가 추가 해줘야 한다.\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2439020578/image-20230214-045517.png?api=v2]\n\n공홈 quote request form 의 id 는 generatorLeadForm\n\n\n2. FORM SUBMISSION 트리거 생성\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/2439020578/image-20230214-045714.png?api=v2]\n\n\n2.1. 트리거가 동작하지 않는 경우\n\n개발자에게 폼 제출 버튼이 type=submit 으로 되어 있는지 문의\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/2439020578"
  },
  {
    "pageContent": "Go/Operator SDK 개발 환경 설정\n\n\n1. GVM [https://github.com/moovweb/gvm] 설치\n\nxcode-select --install\nbrew update\nbrew install mercurial\nbash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n\n\n2. GO CLI 설치\n\ngo 바이너리는 1.4 버전 이전까지 C 로 컴파일 되어서 바로 사용할 수 있었지만, 1.5부터는 go 로 go cli를 컴파일 하기 때문에\n1.5 이상을 설치하기 위해서는 go 가 필요하다.\n\n그리고 1.20 이상 버전은 1.17.3 이상의 버전이 필요하므로 최신 버전 바이너리가 필요한 경우 다음과 같은 순서로 설치해야 한다.\n\n1.4 → 1.17.3 → 1.22\n\ngvm install go1.4 -B\ngvm use go1.4\nexport GOROOT_BOOTSTRAP=$GOROOT\ngvm install go1.17.13\ngvm use go1.17.13\nexport GOROOT_BOOTSTRAP=$GOROOT\ngvm install go1.22\ngvm use go1.22\n\n\n3. GO OPERATOR SDK 설치\n\nhttps://sdk.operatorframework.io/docs/installation/\n[https://sdk.operatorframework.io/docs/installation/]\n\nbrew install operator-sdk\n\n\n4. VSCODE GO EXTENSION 설치\n\n[https://ecubelabs.atlassian.net/wiki/download/attachments/3020783793/2024-05-28%20at%2019.02.48@2x.png?api=v2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3020783793"
  },
  {
    "pageContent": "Prompt Engineering\n\n * https://www.promptingguide.ai/kr/introduction/tips\n   [https://www.promptingguide.ai/kr/introduction/tips]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3068821564"
  },
  {
    "pageContent": "HuggingFace\n\n주소\n\nhttps://huggingface.co/ [https://huggingface.co/]\n\n특징\n\n * 배포된 LLM을 무료로 로컬 환경에서 import, run\n\n * FM(Foundation Model)의 깃허브\n\n * Open source AI Model을 사용할 수 있도록 SDK를 지원한다.\n   https://huggingface.co/docs/huggingface.js/index\n   [https://huggingface.co/docs/huggingface.js/index]\n   https://huggingface.co/docs/transformers.js/index\n   [https://huggingface.co/docs/transformers.js/index]\n\n * HuggingFace에서 모델들의 역할을 분류해 놓은 페이지\n   https://huggingface.co/tasks [https://huggingface.co/tasks]",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069018135"
  },
  {
    "pageContent": "Audio-To-Text (Automatic Speech Recognition, ASR)\n\n자연어 음성을 자연어 문자로 변환하는 과정.\n\n * ASR LLM 모델들은 주로 .wav 확장자, sample-rate 16000으로 수행한다.\n\n * 처리량이 많은 작업이므로 빠른 응답속도가 필요하다면,\n   30초 이내의 Chunking을 통해 Streaming 방식으로 받을 수 있다.\n\n\n\n직접 구현하기 ( TRAMSFORMER.JS )\n\nHuggingFace의 ASR 모델 중 distil-whisper/distil-large-v3 을 가지고 수행하는 코드.\nGPU 가속 없이 구동하면 3분 이상의 시간이 걸린다. (M1 Pro 기준)\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]예시 코드\n\nyarn add @xenova/transformers axios wavfile\n\nimport {\n  AutomaticSpeechRecognitionOutput,\n  pipeline,\n} from \"@xenova/transformers\";\nimport axios from \"axios\";\nimport wavefile from \"wavefile\";\n\nconst getWavFile = async (url: string) => {\n  const response = await axios.get(url, {\n    responseType: \"arraybuffer\",\n  });\n  const buffer = Buffer.from(response.data);\n  const wav = new wavefile.WaveFile(buffer);\n  wav.toBitDepth(\"32f\");\n  wav.toSampleRate(16000);\n\n  let audioData = wav.getSamples();\n  if (Array.isArray(audioData)) {\n    if (audioData.length > 1) {\n      const SCALING_FACTOR = Math.sqrt(2);\n\n      for (let i = 0; i < audioData[0].length; ++i) {\n        audioData[0][i] =\n          (SCALING_FACTOR * (audioData[0][i] + audioData[1][i])) / 2;\n      }\n    }\n\n    audioData = audioData[0];\n  }\n\n  return Float32Array.from(audioData);\n};\n\nconst splitArrayBuffer = (\n  buffer: Float32Array,\n  chunkSize: number\n): Float32Array[] => {\n  const chunks = [];\n  const totalSize = buffer.length;\n  let start = 0;\n\n  while (start < totalSize) {\n    const end = Math.min(start + chunkSize, totalSize);\n    const chunk = buffer.slice(start, end);\n    chunks.push(chunk);\n    start = end;\n  }\n\n  return chunks;\n};\n\nconst audioToText = async (buffer: Float32Array) => {\n  const transcriber = await pipeline(\n    \"automatic-speech-recognition\",\n    \"distil-whisper/distil-large-v3\"\n  );\n  return transcriber(buffer, {\n    chunk_length_s: 30,\n    stride_length_s: 5,\n  }) as Promise<AutomaticSpeechRecognitionOutput>;\n};\n\nconst chunksToText = async (chunks: Float32Array[]) => {\n  console.log(\"transcribing chunks start\");\n  const transcriber = await pipeline(\n    \"automatic-speech-recognition\",\n    \"distil-whisper/distil-large-v3\"\n  );\n  let transcription = \"\";\n  for (const chunk of chunks) {\n    const result = await transcriber(chunk, {\n      chunk_length_s: 30,\n      stride_length_s: 5,\n    });\n    if (!(result instanceof Array)) {\n      transcription += result.text;\n      process.stdout.write(result.text);\n    }\n  }\n  return transcription;\n};\n\nexport const fileTotext = async (url: string) => {\n  const buffer = await getWavFile(url);\n  const chunks = splitArrayBuffer(buffer, (1024 * 1024) / 2);\n  console.time(\"transcription\");\n  const transcription = await chunksToText(chunks);\n  // const transcription = await audioToText(buffer);\n  console.log(transcription);\n  console.timeEnd(\"transcription\");\n  return transcription;\n};\n\nfileTotext(\n  \"example.wav\"\n);\n\n\n\n\n\n관련 SAAS 기술 스택 정리\n\n공급사\n\nAWS\n\nAssembly AI\n\nOpenAI\n\nAutomatic Speech Recognition(ASR)\n\nTranscribe\nhttps://aws.amazon.com/ko/pm/transcribe/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE&trk=3d9da6a1-603c-47a2-8832-148f358f6974&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE:G:s&s_kwcid=AL!4422!3!652835845611!e!!g!!amazon%20audio%20transcription!19910625295!147224435643\n[https://aws.amazon.com/ko/pm/transcribe/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE&trk=3d9da6a1-603c-47a2-8832-148f358f6974&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxUdVY4x0sf0TX7_1PVoMZopOohBc_WvXKzVgEumzk0zfm1K2_WKvahoCcCUQAvD_BwE:G:s&s_kwcid=AL!4422!3!652835845611!e!!g!!amazon%20audio%20transcription!19910625295!147224435643]\n\nSpeech-to-Text\nhttps://www.assemblyai.com/products/speech-to-text\n[https://www.assemblyai.com/products/speech-to-text]\n\nWhisper\nhttps://openai.com/index/whisper/ [https://openai.com/index/whisper/]\n\n * 속도 (5분 음성)\n\n60 seconds\n\n15 seconds\n\n15 seconds\n\n * 정확도\n\nGood\n\nGood\n\nGood\n\n * 비용\n\n1.44$ / h\n(free tier, 1h / month)\n\n0.12$ / h\n(free tier, 100h / month)\n\n0.36 $ / h\n(no free tier)\n\n * API 제공\n\nO\n\nO\n\nO\n\nLLM for Text Summarization (cloud computing 방식)\n\nBedrock\nhttps://aws.amazon.com/ko/bedrock/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE&trk=24a8f13a-f5db-4127-bcb7-8b2876aa4265&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE:G:s&s_kwcid=AL!4422!3!692062155749!e!!g!!aws%20bedrock!21058131112!157173586057\n[https://aws.amazon.com/ko/bedrock/?gclid=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE&trk=24a8f13a-f5db-4127-bcb7-8b2876aa4265&sc_channel=ps&ef_id=CjwKCAjw1emzBhB8EiwAHwZZxVtidD711FwTN7OPNKlftU1uuNROVraqC-8A6MBn2exewI1k0JJz6RoC9jQQAvD_BwE:G:s&s_kwcid=AL!4422!3!692062155749!e!!g!!aws%20bedrock!21058131112!157173586057]\n\nLeMUR\n\ngpt-3.5-turbo-0125\n\n * 속도\n\n5~10 seconds\n\n * not yet to try\n\n5~10 seconds\n\n * 정확도\n\nGood\n\n * not yet to try\n\nGood\n\n * 비용\n\n0.0003$ / 1 api call\n(Claude-3-Haiku 기준)\n\n입력토큰\n0.00025$ / 1K tokens\n출력토큰\n0.00125$ / 1K tokens\n\n\n\napi call 1회당 평균\n입력토큰 1,000개,\n출력토큰 300개\n\nfree\n(유료 요금제 사용 기준)\n\nAPI 호출 시 summary까지 연속 적용 가능.\n\n0.0010$ / 1 api call\n(gpt-3.5-turbo 기준)\n\n입력토큰\n0.0005$ / 1K tokens\n출력토큰\n0.0015$ / 1K tokens\n\n\n\napi call 1회당 평균\n입력토큰 1,000개,\n출력토큰 300개\n\n\n\n * API 제공\n\nO\n\nO\n\nO\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3072524301"
  },
  {
    "pageContent": "Helm -> Terraform\n\nhttp://claude.ai [http://claude.ai] 로 작업 함.\n\nI'm an infrastructure engineer.\n\nHere's operator.yaml:\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]operator.yaml\n복사\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/component: operator\n    app.kubernetes.io/instance: percona-postgresql-operator\n    app.kubernetes.io/name: percona-postgresql-operator\n    app.kubernetes.io/part-of: percona-postgresql-operator\n    pgv2.percona.com/control-plane: postgres-operator\n  name: percona-postgresql-operator\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: operator\n      app.kubernetes.io/instance: percona-postgresql-operator\n      app.kubernetes.io/name: percona-postgresql-operator\n      app.kubernetes.io/part-of: percona-postgresql-operator\n      pgv2.percona.com/control-plane: postgres-operator\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: operator\n        app.kubernetes.io/instance: percona-postgresql-operator\n        app.kubernetes.io/name: percona-postgresql-operator\n        app.kubernetes.io/part-of: percona-postgresql-operator\n        pgv2.percona.com/control-plane: postgres-operator\n    spec:\n      containers:\n      - env:\n        - name: WATCH_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: PGO_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: LOG_STRUCTURED\n          value: \"false\"\n        - name: LOG_LEVEL\n          value: INFO\n        - name: DISABLE_TELEMETRY\n          value: \"false\"\n        image: perconalab/percona-postgresql-operator:main\n        imagePullPolicy: Always\n        livenessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /metrics\n            port: metrics\n            scheme: HTTP\n        name: operator\n        ports:\n        - containerPort: 8080\n          name: metrics\n          protocol: TCP\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n      serviceAccountName: percona-postgresql-operator\n\nHere's rbac.yaml:\n\n[https://ecubelabs.atlassian.net/wiki/images/icons/grey_arrow_down.png]rbac.yaml\n복사\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: percona-postgresql-operator\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: percona-postgresql-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - configmaps\n  - persistentvolumeclaims\n  - secrets\n  - services\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - endpoints\n  verbs:\n  - create\n  - delete\n  - deletecollection\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - endpoints/restricted\n  - pods/exec\n  verbs:\n  - create\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n  - patch\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - serviceaccounts\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - apps\n  resources:\n  - deployments\n  - replicasets\n  - statefulsets\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - batch\n  resources:\n  - cronjobs\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - batch\n  resources:\n  - jobs\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgbackups\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - update\n  - watch\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgbackups/finalizers\n  - perconapgclusters/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgbackups/status\n  verbs:\n  - create\n  - patch\n  - update\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgclusters\n  - perconapgupgrades\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgclusters/status\n  - perconapgrestores/status\n  - perconapgupgrades/status\n  verbs:\n  - patch\n  - update\n- apiGroups:\n  - pgv2.percona.com\n  resources:\n  - perconapgrestores\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - policy\n  resources:\n  - poddisruptionbudgets\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - watch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - crunchybridgeclusters\n  verbs:\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - crunchybridgeclusters/finalizers\n  - crunchybridgeclusters/status\n  verbs:\n  - patch\n  - update\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgadmins\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgadmins/finalizers\n  - pgupgrades/finalizers\n  - postgresclusters/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgadmins/status\n  - pgupgrades/status\n  - postgresclusters/status\n  verbs:\n  - patch\n- apiGroups:\n  - postgres-operator.crunchydata.com\n  resources:\n  - pgupgrades\n  - postgresclusters\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - rolebindings\n  - roles\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: service-account-percona-postgresql-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: percona-postgresql-operator\nsubjects:\n- kind: ServiceAccount\n  name: percona-postgresql-operator\n\nConvert these to Terraform resources.\n\n--------------------------------------------------------------------------------\n\nOutput\n\n# Deployment\nresource \"kubernetes_deployment\" \"percona_postgresql_operator\" {\n  metadata {\n    name = \"percona-postgresql-operator\"\n    labels = {\n      \"app.kubernetes.io/component\"    = \"operator\"\n      \"app.kubernetes.io/instance\"     = \"percona-postgresql-operator\"\n      \"app.kubernetes.io/name\"         = \"percona-postgresql-operator\"\n      \"app.kubernetes.io/part-of\"      = \"percona-postgresql-operator\"\n      \"pgv2.percona.com/control-plane\" = \"postgres-operator\"\n    }\n  }\n\n  spec {\n    replicas = 1\n\n    selector {\n      match_labels = {\n        \"app.kubernetes.io/component\"    = \"operator\"\n        \"app.kubernetes.io/instance\"     = \"percona-postgresql-operator\"\n        \"app.kubernetes.io/name\"         = \"percona-postgresql-operator\"\n        \"app.kubernetes.io/part-of\"      = \"percona-postgresql-operator\"\n        \"pgv2.percona.com/control-plane\" = \"postgres-operator\"\n      }\n    }\n\n    strategy {\n      type = \"Recreate\"\n    }\n\n    template {\n      metadata {\n        labels = {\n          \"app.kubernetes.io/component\"    = \"operator\"\n          \"app.kubernetes.io/instance\"     = \"percona-postgresql-operator\"\n          \"app.kubernetes.io/name\"         = \"percona-postgresql-operator\"\n          \"app.kubernetes.io/part-of\"      = \"percona-postgresql-operator\"\n          \"pgv2.percona.com/control-plane\" = \"postgres-operator\"\n        }\n      }\n\n      spec {\n        service_account_name = \"percona-postgresql-operator\"\n\n        container {\n          name  = \"operator\"\n          image = \"perconalab/percona-postgresql-operator:main\"\n\n          env {\n            name = \"WATCH_NAMESPACE\"\n            value_from {\n              field_ref {\n                field_path = \"metadata.namespace\"\n              }\n            }\n          }\n\n          env {\n            name = \"PGO_NAMESPACE\"\n            value_from {\n              field_ref {\n                field_path = \"metadata.namespace\"\n              }\n            }\n          }\n\n          env {\n            name  = \"LOG_STRUCTURED\"\n            value = \"false\"\n          }\n\n          env {\n            name  = \"LOG_LEVEL\"\n            value = \"INFO\"\n          }\n\n          env {\n            name  = \"DISABLE_TELEMETRY\"\n            value = \"false\"\n          }\n\n          image_pull_policy = \"Always\"\n\n          liveness_probe {\n            http_get {\n              path = \"/metrics\"\n              port = \"metrics\"\n            }\n            failure_threshold = 3\n          }\n\n          port {\n            container_port = 8080\n            name           = \"metrics\"\n            protocol       = \"TCP\"\n          }\n\n          security_context {\n            allow_privilege_escalation = false\n            capabilities {\n              drop = [\"ALL\"]\n            }\n            read_only_root_filesystem = true\n            run_as_non_root           = true\n          }\n        }\n      }\n    }\n  }\n}\n\n# ServiceAccount\nresource \"kubernetes_service_account\" \"percona_postgresql_operator\" {\n  metadata {\n    name = \"percona-postgresql-operator\"\n  }\n}\n\n# Role\nresource \"kubernetes_role\" \"percona_postgresql_operator\" {\n  metadata {\n    name = \"percona-postgresql-operator\"\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"configmaps\", \"persistentvolumeclaims\", \"secrets\", \"services\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"endpoints\"]\n    verbs      = [\"create\", \"delete\", \"deletecollection\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"endpoints/restricted\", \"pods/exec\"]\n    verbs      = [\"create\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"events\"]\n    verbs      = [\"create\", \"patch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"pods\"]\n    verbs      = [\"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"\"]\n    resources  = [\"serviceaccounts\"]\n    verbs      = [\"create\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"apps\"]\n    resources  = [\"deployments\", \"replicasets\", \"statefulsets\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"batch\"]\n    resources  = [\"cronjobs\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"batch\"]\n    resources  = [\"jobs\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgbackups\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgbackups/finalizers\", \"perconapgclusters/finalizers\"]\n    verbs      = [\"update\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgbackups/status\"]\n    verbs      = [\"create\", \"patch\", \"update\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgclusters\", \"perconapgupgrades\"]\n    verbs      = [\"create\", \"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgclusters/status\", \"perconapgrestores/status\", \"perconapgupgrades/status\"]\n    verbs      = [\"patch\", \"update\"]\n  }\n\n  rule {\n    api_groups = [\"pgv2.percona.com\"]\n    resources  = [\"perconapgrestores\"]\n    verbs      = [\"get\", \"list\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"policy\"]\n    resources  = [\"poddisruptionbudgets\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"crunchybridgeclusters\"]\n    verbs      = [\"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"crunchybridgeclusters/finalizers\", \"crunchybridgeclusters/status\"]\n    verbs      = [\"patch\", \"update\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgadmins\"]\n    verbs      = [\"get\", \"list\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgadmins/finalizers\", \"pgupgrades/finalizers\", \"postgresclusters/finalizers\"]\n    verbs      = [\"update\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgadmins/status\", \"pgupgrades/status\", \"postgresclusters/status\"]\n    verbs      = [\"patch\"]\n  }\n\n  rule {\n    api_groups = [\"postgres-operator.crunchydata.com\"]\n    resources  = [\"pgupgrades\", \"postgresclusters\"]\n    verbs      = [\"create\", \"delete\", \"get\", \"list\", \"patch\", \"update\", \"watch\"]\n  }\n\n  rule {\n    api_groups = [\"rbac.authorization.k8s.io\"]\n    resources  = [\"rolebindings\", \"roles\"]\n    verbs      = [\"create\", \"get\", \"list\", \"patch\", \"watch\"]\n  }\n}\n\n# RoleBinding\nresource \"kubernetes_role_binding\" \"service_account_percona_postgresql_operator\" {\n  metadata {\n    name = \"service-account-percona-postgresql-operator\"\n  }\n\n  role_ref {\n    api_group = \"rbac.authorization.k8s.io\"\n    kind      = \"Role\"\n    name      = kubernetes_role.percona_postgresql_operator.metadata[0].name\n  }\n\n  subject {\n    kind = \"ServiceAccount\"\n    name = kubernetes_service_account.percona_postgresql_operator.metadata[0].name\n  }\n}",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069444097"
  },
  {
    "pageContent": "Hugginface.js\n\n타입스크립트 기반 SDK, serverless API로 웹 앱을 구축하게 해준다.\n\nTransformers.js은 지원 가능한 모델으로만 앱을 구축할 수 있지만,\nHuggingface.js는 서버리스로 모든 모델에 추론을 요청할 수 있다.\n\n\n\nHUB, RESPOSITORY 관련\n\nyarn add @huggingface/hub\n\n * HuggingFace 레포지토리의 생성, 삭제, 그리고 커밋을 할 수 있다.\n\n\n\nMODEL INFERENCE 관련\n\nyarn add @huggingface/inference\n\n * Hub의 Model을 이용한 추론 Serverless API\n\n * Rate Limit이 존재하지만, 정확한 값을 공개하고 있지 않다.\n\n * API Token이 필요하다.\n   https://huggingface.co/settings/tokens\n   [https://huggingface.co/settings/tokens]\n\n\n\nLLM CHATCOMPLETION 예시 코드\n\nimport { HfInference } from \"@huggingface/inference\";\n\nconst HF_TOKEN = process.env.HF_ACCESS_TOKEN;\n\nconst inference = new HfInference(HF_TOKEN);\n\nconst chat = async (input: string) => {\n  const out = await inference.chatCompletion({\n    model: \"mistralai/Mistral-7B-Instruct-v0.2\", // 기본적인 챗봇\n    messages: [\n      {\n        role: \"user\",\n        content: input,\n      },\n    ],\n    max_tokens: 100,\n  });\n  console.log(\"=\".repeat(50));\n  console.log(\"answer:\" + out.choices[0].message.content);\n\n  return out.choices[0].message.content;\n};\n\nchat('where is the capital of France')\n\nThe capital city of France is Paris.\nParis is one of the most renowned cities in the world,\nknown for its history, art, fashion, and cuisine\n\n\n\n * 시스템 프롬프트를 추가하고 싶으면, input과 함께 입력한다.\n   예시 코드에서는 이모지를 사용하는 교사 역할을 부여했다.\n\n * n-Shot Prompt Engineering을 추가해서 입력 형태와 맥락을 추가 제공할 수 있다.\n\n...\n  ...\n  const out = await inference.chatCompletion({\n    model: \"mistralai/Mistral-7B-Instruct-v0.2\", // 기본적인 챗봇\n    messages: [\n      {\n        role: \"user\",\n        content: \"Where is the capital of South Korea\",\n      },\n      {\n        role: \"assistant\",\n        content: \"Seoul.\"\n      },\n      // 1-Shot Prompt Engineering\n      {\n        role: \"user\",\n        content: \"you are a cool teacher. and you like face emoji. and please tell me simple 3 sentences.\" + input,\n      },\n    ],\n    max_tokens: 100,\n  });\n  ...\n  ...\n\n1. The capital city of France is Paris.\n ✨👏 (Paris is known as the \"City of Light\" and is famous for its beauty, art, and culture.)\n\n2. Paris is located in the northern part of France, along the Seine River.\n🇫🇷🔴 (\"France\" is the name of both the country and the people who live there.)\n\n3. Paris is home to many famous landmarks, such as the Eiffel Tower, the Louvre Museum, and Notre-Dame Cathedral.\n🥇😍 (These places attract millions of tourists every year.)",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3069837318"
  },
  {
    "pageContent": "Transformer.js\n\n * Huggingface.js는 serverless API로 모델을 이용한다면,\n   Transformer.js는 모델을 직접 구동한다.\n\n * Hub에서 필요한 모델을 다운로드하여, 브라우저 또는 Node.js 환경에서 모델 추론을 시작할 수 있다.\n   그렇기 때문에, 사용자 또는 구동 환경의 성능에 따라 추론 속도가 달라진다.\n\n * 또한, 지원하는 모델만 사용할 수 있다.\n   대신 지원하는 모델에 대해서는 옵션 설정이 가능하다. Huggingface.js은 불가.\n\n\n\n기본적인 사용 방식(PIPELINE)\n\nconst model = await pipeline(\n  \"${TASK_NAME}\", // hf.com/tasks에서 지원하는 추론 기능, 리터럴 타입을 Ctrl+Space로 확인 가능\n  \"${MODEL_NAME}\" // 입력하지 않으면 Default Model이 있음.\n)\n\nconst result = await model(input, options)\n\n\n\nAUDIO-TO-TEXT 예시코드\n\nimport {\n  AutomaticSpeechRecognitionOutput,\n  pipeline,\n} from \"@xenova/transformers\";\nimport axios from \"axios\";\nimport wavefile from \"wavefile\";\n\nconst getWavFile = async (url: string) => {\n  const response = await axios.get(url, {\n    responseType: \"arraybuffer\",\n  });\n  const buffer = Buffer.from(respotnse.data);\n  const wav = new wavefile.WaveFile(buffer);\n  wav.toBitDepth(\"32f\");\n  wav.toSampleRate(16000);\n\n  let audioData = wav.getSamples();\n  if (Array.isArray(audioData)) {\n    if (audioData.length > 1) {\n      const SCALING_FACTOR = Math.sqrt(2);\n\n      for (let i = 0; i < audioData[0].length; ++i) {\n        audioData[0][i] =\n          (SCALING_FACTOR * (audioData[0][i] + audioData[1][i])) / 2;\n      }\n    }\n\n    audioData = audioData[0];\n  }\n\n  return audioData;\n};\n\nconst audioToText = async (buffer: Float32Array) => {\n  const transcriber = await pipeline(\n    \"automatic-speech-recognition\",\n    \"distil-whisper/distil-large-v3\"\n  );\n  return transcriber(buffer, {\n    chunk_length_s: 30,\n    stride_length_s: 5,\n  }) as Promise<AutomaticSpeechRecognitionOutput>;\n};\n\nexport const fileTotext = async (url: string) => {\n  const buffer = await getWavFile(url);\n  console.time(\"transcription\");\n  const transcription = await audioToText(buffer as unknown as Float32Array);\n  console.log(transcription);\n  console.timeEnd(\"transcription\");\n  return transcription;\n};\n\nfileTotext(\n  \"https://public-testdrive.s3.us-west-2.amazonaws.com/n3wpEJb35Bk1wvtAZ351WBENFlkKlMfMqnckxY89kk5W.wav\"\n);\n\n\n",
    "url": "https://ecubelabs.atlassian.net/wiki/spaces/SW/pages/3070099470"
  }
]